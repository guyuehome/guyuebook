{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"引言 机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的 电气时代 。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的 数字时代 ，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发， 智能机器人时代 正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。 教程链接汇总 课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/90 博客泡圈： https://www.guyuehome.com/","text_tokens":["工业","执行","俗称","自主","ros2","环境","agv","过程","对","课程","重要","教器","/","由示","有限","这","2000","这是","https","智能","算机","传感","主角","id","计算机","90","出现","八十","减速机","经历","人类","、","circledetail","命令","计算","劳动","成为","横跨","之后","引言","仿生","操作系统","井喷",".","载体","人工","泡圈","控制","之一","guyuehome","robot","教程","21","system","开发","快速","太","2015","：","爆发","。","此时","七八十","com","源码","_","状","拉开","热点","年","逐渐","操作","链接","伺服","设备","七八","劳动力","ai","机器人","后","bubble","而言","动作","帮助","服务","丰富","业生","不过","前夜","更加","并","就是","了","只能","系统",":","序幕","更","局部","技术","多","应用","关注","问答","七八十年","送餐","视频","汇总","等","是","释放","依然","主要","生产","工业生产","思考","按照","必将","驱动","四足","不断","人工智能","家庭","我们","book","最为","的","github","工厂","，","机器","发展","于","电气","不断丰富","伺服电机","提出","但是","要求","视觉","动力"," ","呈","感知","没有","驱动器","www","层面","时期","驾驶","博客","时代","图文","class","传感器","也","正式","拉开序幕","控制器","—","八十年","最佳","随着","operating","操控","数字","电机","检测","十年","三个","大","狗","感器","年前","tutorials","软件","和","减速","类型","智能化","高","gitee","汽车","缺少","完全","自动"],"title":"引言","title_tokens":["引言"]},{"location":"#_1","text":"机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的 电气时代 。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的 数字时代 ，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发， 智能机器人时代 正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。","text_tokens":["工业","执行","俗称","自主","环境","agv","过程","对","课程","重要","教器","由示","有限","这","2000","这是","智能","算机","传感","主角","计算机","出现","八十","减速机","经历","人类","、","命令","计算","劳动","成为","横跨","之后","仿生","操作系统","井喷","载体","人工","控制","之一","robot","system","开发","快速","太","2015","爆发","。","此时","七八十","状","拉开","热点","年","逐渐","操作","伺服","设备","七八","劳动力","ai","机器人","后","而言","动作","帮助","服务","丰富","业生","不过","前夜","更加","并","就是","了","只能","系统","序幕","更","局部","技术","多","应用","关注","七八十年","送餐","等","是","释放","依然","主要","生产","工业生产","思考","按照","必将","驱动","四足","不断","人工智能","家庭","我们","最为","的","工厂","，","机器","发展","于","电气","不断丰富","伺服电机","提出","但是","要求","视觉","动力"," ","呈","感知","没有","驱动器","层面","时期","驾驶","时代","传感器","也","正式","拉开序幕","控制器","—","八十年","最佳","随着","operating","操控","数字","电机","检测","十年","三个","大","狗","感器","年前","软件","和","减速","类型","智能化","高","汽车","缺少","完全","自动"],"title":"引言","title_tokens":["引言"]},{"location":"#_2","text":"课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/90 博客泡圈： https://www.guyuehome.com/","text_tokens":["ros2","：","博客","问答","图文","class","com","课程","视频","源码","_","/","https","id","90","book","circledetail","github","bubble"," ","tutorials",".",":","gitee","泡圈","guyuehome","教程","www","21"],"title":"教程链接汇总","title_tokens":["链接","汇总","教程"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["人才培养","高校","一体","+","微控","社区","课件","课程","法律责任","版权","追究其","未经","有限","任何","科技","但","高质","本","追究","ros","众多","明者","、","》","书面","镜像","仅限","交流学习","授权",".","小时","武汉","建立","guyuehome","开发","限于","学","质量","未来","努力","知名","法律","com","。","与","对本","有限公司","源码","高质量","其它","年","用户","致力","1000","作品","brand","精锋","内容","ai","机器人","复制","优质","累积","不","居","许可","销售","构建","畅销","及","致力于","声明","至今","合法","面向未来","线上","超过","校企","集","如需","地区","企业","出版","创新","包括","被","依法","生态","有权","视频","修改","均","赋能","等","是","平台","请","产品","为","责任","联系","的","（","提供","所有","，","捆绑","机器","上","单位","不得","声明者","通过","网站","交流"," ","公司","实践","）","www","华语","万人","人才","古月","使用","究其","将","面向","合作","或","传播","万字","学习","拥有","创建","上述","培养","@","抄录","进行","《","个人","模式","和","2011","图书","120","违反","学习者"],"title":"关于我们","title_tokens":["我们","关于"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["人才培养","高校","一体","+","社区","课程","高质","ros","众多","、","》","交流学习",".","小时","建立","guyuehome","开发","质量","未来","努力","知名","com","。","与","高质量","年","用户","致力","1000","内容","ai","机器人","优质","累积","居","构建","畅销","及","致力于","至今","面向未来","线上","超过","校企","集","地区","企业","出版","创新","生态","视频","赋能","等","是","平台","为","的","（","提供","，","机器","通过","交流"," ","实践","）","www","华语","万人","人才","古月","面向","合作","万字","学习","创建","培养","《","模式","2011","图书","120","学习者"],"title":"学机器人，上古月居","title_tokens":["学","机器人","古月","，","机器","上","居"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["微控","课件","课程","法律责任","版权","追究其","未经","有限","任何","科技","但","本","追究","明者","、","书面","镜像","仅限","授权",".","武汉","guyuehome","限于","法律","com","。","与","对本","有限公司","源码","其它","用户","作品","brand","精锋","复制","不","居","许可","销售","声明","合法","如需","包括","被","依法","有权","视频","修改","均","等","请","产品","为","责任","联系","的","所有","，","捆绑","单位","不得","声明者","网站"," ","公司","古月","使用","究其","将","或","传播","学习","拥有","上述","@","抄录","进行","个人","和","违反"],"title":"版权声明","title_tokens":["声明","版权"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/","text":"ROS/ROS2是什么 智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。 ROS的诞生 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人—— PR2 ，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS的发展 ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称 ROSCon ，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。 ROS的特点 ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。 参考资料 关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["资金","缩短","；","月底","乐意","25","多媒体系统","index","根据","对","繁荣","扩展","绝大","重要","第一个","诞生","做成","成果","时候","/","收拾","玩耍","尽量","任何","陪","这是","时间","本","曲线","注意","world","深知","分享","一群","版","外观","开源","访问","笔记","全人类","零部件","其中","操作系统",".","各项","斯坦福","2022","无聊","甚至","robot","教程","排名","各样","月","快速","限于","近两年","向","2015","相关","不想","来看","聊天","很快","源码","全人","圈","答案","涉及","可为","名称","出来","从中","容易","详细","几百","度","多万","认识一下","神秘","personal","推出","物体","万万","服务","问题","跟随","零","不","居","总而言之","许可","搜索","系统","巨人","更","没想到","广泛","时至今日","大部分","首先","被","加","ubuntu","生态","维基","视频","挑战","研究","成熟","主要","同一","这群","都","促使","风险投资","便宜","设计","亚马","工程","来自","ros1","个","四项","要","解决","熨烫","的","github","图","机器","上","发展","40","提出","大有可为","维基百","通过","效果","衣服","动力","水下","已经","做","时间轴","不乏","看到","受限于","公司","没有","一款","板块","活动","大笔","站","跑","资本","引擎","人才","万左右","越来","古月","尝试","开始","人数","差不多","中","推进","绝对","上市","复用","革命","分钟","来讲","重新","资源","一定","几百万","元素","五年","浏览量","大部","呢","量级","turtlebot","进化","强悍","虽然","进行","基本","投资","大","齐聚一堂","入门教程","两个","和","智能化","2011","局限","疫情","下来","以叠","上图","120","简单","正式版","新增","以上","工业","掀起","简称","总称","不同","最后","开发者","同学","就","率","课程","价格便宜","受限","联合","普遍","提取","此后","因为","一段","框架","这","为例","linux","居高不下","每","初期","功能","直接","暴露","之","团队","迭代","这里","年底","一些","只","humble","更新","其实","横跨","回到","百科全书","洗衣","整合","着","围绕","叫做","原因","每年","同样","利器","叠","一大步","一大笔钱","这样","价格","直到","使命","对于","那","百科","代","无疑","此时","早期","头发","没想","年","上去","操作","特点","250","光靠","其次","真的","真正","清晰","事情","基于","kinect","关于","四大","明智","据库","开发工具","做出","而生","并","一套","一大笔","起来","体感","2","棒","年轻人","推动","类似","频繁","机械","所有人","采用","可以","实现","代表","适用","非常","一步","长期","只想","维基百科","平台","来","产品","一下","我们","可能","为","为了","速度","几个","提供","2010","浏览","如果","臂","于","选择","知识","answers"," ","之内","爆款","2017","制造","人形","年轻","很多","a","查看","google","多年","手机","”","独立","发表","万人","变为","底盘","时代","许可证","福大","还有","很","用","效率","微软","做法","将","笔记本","多项","发布","动机","他们","举办","2012","日常","自身","高度","还是","方法","总体","roscon","媒体","性能","其他","场景","关键","青年","感器","100","起点","认识","此","软件系统","为什么","全球","神兵","活跃","ros2","当初","近几年","这个","电脑","嘉宾","嵌入","啦","怀揣","泡泡","2014","成本","了解","同理","作为","第一次","论坛","传感","一次","有没有","ros","地域","经历","人类","新鲜事","无论","面纱","助推","成为","电路","集合","造","方式","各种","大会","15","领域","苹果","来到","提高","控制","迅猛","精致","system","说干就干","案例","创意","智慧","wiki","熟悉","介于","百万","好","向前走","确定","目标","用于","现在","工具","实验","逐渐","不开","历经","大量","系列","生态系统","这些","packages","windows","重量","内容","更好","“","而言","一样","参考","一届","离不开","有志","快","所以","前","通常","了","欢迎","低","别人","本身","这位","算是","不断更新","80","能够","无论是","重量级","基本上","推荐","大学","接下来","技术","多","虽好","情况","资料","局限性","移动机器人","而且","已有","掌握","得到","参考资料","张图","原本","同年","单独","存储","游戏机","intel","这款","接下","统计","扫地","你","不断","活跃度","应用软件","整理","成功","生态系","最为","，","看中","迎来","这一波","宽松","针对","更为","巨大","所学","条","商业","统统","不是","上边","图中","下","回答","趋势","跨平台","台球","？","层面","稳定","托管","一大","绝大部分","从","新","肯定","找到","增长","充足","—","第一","还","加上","风险","不下","创始","学习","又","越来越","5","最佳","随着","终于","由","一个","几年","笔记本电脑","在","只要","org","全新","长远","正在","轰动","入门","c","汽车","不到","美妙","有人","方向","进步","想法","每个","过程","全","新鲜","社区","不仅","结晶","记录","discourse","专业","willow","两年","而","全球化","智能","最高","到","干","、","会","把","原型","索引","机制","打","一切","支持","复合","b","有","带领","部件","给","一系列","程度","自己","左右","阵地","采购","因","限性","一家","配合","具备","该","开发","望而却步","同时","努力","如何","或者","：","得以","pr2","款","商业化","比如","20","。","全书","一系","斯坦福大学","想到","什么","浪潮","组成","项目","肩负","沉淀","用户","官方","向前","机器人","才","150","帮助","远","就是","野蛮","起","增长速度","核心","模块化","友好","以","投了","复杂","肩膀","之王","家","至今","讨论","线上","各种各样","嵌入式","下载","多媒体","实验室","踏上","完成","应用","通信","步伐","大步","然后","大家","问答","2007","模块","之旅","等","是","给出","包","几乎","后期","页面","今日","正如","提问","处理","世界","木头","学术","当时","所有","说明","标准","等等","既然","但是","网站","不要","普及","部分","做到","标志","柔性","国家","毛巾","却步","移动","不多","游戏","身影","肩负着","garage","xbox","一起","使用","主阵地","conference","体系","传感器","也","正式","让","希望","大大","人","万","剪头发","却","数据","改为","一堂","operating","版本","访问量","代码","高效","个人","讲解","特性","之上","进入","工程师","研发","亚马逊","轮子","做饭","软件","数据库","加快","后续","完全","次数"],"title":"ROS和ROS2是什么","title_tokens":["是","ros2","什么","和","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#rosros2","text":"智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。","text_tokens":["重量级","开发","接下来","掀起","应用","ros2","向","一起","方向","那","嘉宾","就","大家","时代","全","对","。","中","挑战","是","什么","这","接下","智能","又","一下","操作","ros","我们","认识一下","高度","呢","神秘","面纱","量级","进化","的","机器人","重量","，","机器","场景","提出","操作系统","带领","而生","巨大"," ","了","系统","认识","智能化","正在","下来","这位","？"],"title":"ROS/ROS2是什么","title_tokens":["是","/","ros2","什么","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人—— PR2 ，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。","text_tokens":["资金","最后","这个","有人","想法","就","专业","重要","联合","诞生","时候","玩耍","收拾","因为","框架","这","陪","为例","第一次","智能","一次","有没有","ros","初期","功能","干","深知","分享","一群","、","团队","原型","电路","一些","外观","只","成为","打","一切","横跨","零部件","其中","有","洗衣","操作系统","部件","苹果","一系列","自己","斯坦福","无聊","甚至","同样","因","robot","叠","精致","一大步","这样","开发","说干就干","对于","如何","或者","那","不想","：","得以","pr2","款","代","。","此时","聊天","一系","很快","向前走","圈","斯坦福大学","答案","涉及","用于","头发","什么","出来","实验","从中","容易","年","组成","操作","光靠","系列","真的","personal","向前","机器人","事情","才","物体","基于","帮助","服务","问题","不","就是","有志","做出","并","一套","所以","而生","了","系统","复杂","低","家","别人","更","2","实验室","大学","技术","完成","推动","应用","多","类似","机械","大步","而且","大家","所有人","2007","可以","实现","非常","等","是","研究","给出","同一","都","平台","这款","设计","后期","你","我们","可能","个","要","处理","应用软件","木头","熨烫","整理","学术","当时","的","所有","图","，","标准","如果","机器","上","针对","既然","但是","衣服","已经"," ","做","之内","条","看到","柔性","毛巾","不是","图中","很多","没有","台球","？","一款","层面","手机","一大","独立","一起","越来","尝试","福大","很","用","肯定","中","也","效率","找到","人","充足","—","第一","还","分钟","他们","剪头发","却","越来越","5","呢","一个","强悍","虽然","性能","高效","个人","在","青年","100","只要","做饭","软件","和","软件系统","以叠","轰动","为什么","不到"],"title":"ROS的诞生","title_tokens":["的","ros","诞生"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_1","text":"ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称 ROSCon ，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。","text_tokens":["月底","简称","ros2","当初","这个","开发者","电脑","就","每个","过程","不仅","2014","成本","价格便宜","绝大","受限","了解","重要","willow","第一个","诞生","提取","此后","因为","这","两年","这是","而","传感","时间","居高不下","到","注意","world","ros","功能","直接","每","暴露","本","经历","分享","、","会","迭代","版","团队","这里","助推","原型","成为","开源","年底","humble","把","各种","大会","笔记","支持","回到","其中","操作系统","着","给","叫做","斯坦福","自己","2022","原因","控制","每年","限性","robot","教程","一家","system","一大笔钱","价格","各样","开发","望而却步","快速","限于","直到","近两年","该","使命","2015","pr2","款","熟悉","介于","。","百万","很快","确定","圈","斯坦福大学","早期","想到","名称","现在","没想","出来","年","项目","肩负","逐渐","操作","几百","历经","官方","真正","推出","机器人","万万","kinect","一样","服务","问题","跟随","一届","野蛮","起","一大笔","所以","前","了","投了","系统","更","体感","没想到","能够","线上","各种各样","年轻人","大学","推动","虽好","多","大部分","应用","类似","步伐","局限性","被","2007","采用","可以","ubuntu","适用","原本","同年","单独","等","是","长期","只想","成熟","游戏机","这群","intel","风险投资","便宜","亚马","设计","后期","扫地","来自","我们","为","为了","成功","的","2010","所有","，","看中","迎来","机器","于","发展","提出","但是","普及","时间轴"," ","部分","爆款","做","2017","已经","标志","不乏","年轻","受限于","商业","公司","却步","下","游戏","一款","身影","肩负着","稳定","大笔","多年","一大","绝大部分","从","garage","资本","xbox","使用","越来","变为","底盘","时代","福大","开始","conference","微软","中","正式","也","让","传感器","笔记本","发布","大大","增长","人","—","加上","第一","风险","他们","不下","创始","越来越","举办","5","几百万","2012","一堂","随着","operating","改为","版本","五年","大部","终于","turtlebot","一个","几年","roscon","笔记本电脑","进行","投资","讲解","大","个人","关键","齐聚一堂","在","之上","感器","进入","起点","亚马逊","软件","全新","和","2011","局限","疫情","加快","全球","正式版"],"title":"ROS的发展","title_tokens":["的","ros","发展"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_2","text":"ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["缩短","；","工业","ros2","总称","最后","这个","多媒体系统","进步","就","嵌入","率","怀揣","社区","繁荣","结晶","对","普遍","做成","成果","尽量","同理","这","全球化","linux","智能","时间","到","ros","功能","直接","之","人类","分享","、","无论","会","把","这里","集合","成为","开源","造","机制","各种","全人类","支持","复合","b","有","整合","领域","着","给","围绕","提高","自己","采购","一家","具备","这样","各样","开发","快速","案例","同时","创意","：","那","智慧","商业化","比如","。","向前走","全人","目标","用于","工具","组成","上去","简单","沉淀","特点","生态系统","这些","向前","windows","机器人","“","四大","明智","零","远","开发工具","就是","并","许可","通常","核心","模块化","了","以","系统","友好","巨人","肩膀","家","至今","别人","更","本身","无论是","广泛","各种各样","嵌入式","多媒体","时至今日","技术","多","应用","通信","机械","移动机器人","已有","大家","被","可以","生态","实现","模块","代表","一步","非常","是","促使","都","来","平台","产品","设计","ros1","今日","正如","我们","新增","生态系","的","，","标准","臂","机器","发展","上","宽松","不要","水下","已经"," ","做","部分","制造","做到","人形","看到","统统","公司","移动","不是","商业","很多","跨平台","a","身影","站","跑","”","从","引擎","一起","人才","使用","越来","许可证","新","多项","体系","做法","将","也","中","推进","上市","复用","还","来讲","动机","他们","重新","越来越","自身","由","还是","一个","媒体","特性","在","轮子","软件","此","和","智能化","长远","下来","c","汽车","全球","完全"],"title":"ROS的特点","title_tokens":["特点","的","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_3","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。","text_tokens":["以上","；","活跃","乐意","25","不同","近几年","开发者","就","每个","index","新鲜","根据","社区","记录","discourse","绝大","重要","作为","任何","这","这是","最高","曲线","到","每","本","ros","功能","地域","新鲜事","、","会","这里","方式","索引","助推","访问","成为","各种","其实","15","其中","有","整合","给",".","各项","程度","左右","利器","迅猛","教程","排名","月","开发","快速","相关","：","wiki","百科","比如","20","来看","。","无疑","源码","可为","现在","什么","浪潮","度","250","多万","用户","这些","packages","清晰","机器人","150","神兵","关于","而言","问题","参考","据库","不","就是","快","增长速度","总而言之","核心","了","起来","讨论","算是","棒","80","基本上","下载","情况","多","应用","大部分","频繁","大家","问答","加","可以","维基","代表","张图","得到","非常","等","是","存储","包","维基百科","都","统计","页面","你","我们","活跃度","速度","四项","最为","几个","的","说明","，","浏览","这一波","发展","上","40","机器","提出","如果","更为","等等","网站","维基百","answers","通过","动力","大有可为","已经"," ","部分","看到","国家","上边","趋势","很多","回答","不多","选择","？","查看","活动","万人","发表","从","绝大部分","使用","万左右","越来","新","很","人数","差不多","中","也","希望","增长","发布","绝对","革命","人","万","学习","资源","越来越","数据","最佳","元素","日常","浏览量","访问量","大部","呢","一个","几年","总体","基本","其他","大","在","研发","两个","org","和","数据库","上图","正在","全球","论坛","次数"],"title":"ROS的社区","title_tokens":["社区","的","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#_1","text":"关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["美妙","ros2","同学","最后","这个","啦","社区","泡泡","课程","扩展","绝大","重要","一段","作为","这","本","ros","分享","会","这里","成为","开源","更新","百科全书","有","来到","阵地","教程","配合","开发","努力","百科","。","全书","好","工具","项目","详细","不开","大量","其次","内容","机器人","更好","关于","参考","问题","离不开","居","搜索","欢迎","之王","不断更新","踏上","推荐","技术","大部分","资料","然后","大家","掌握","首先","可以","参考资料","视频","之旅","是","主要","都","工程","几乎","你","不断","我们","提问","解决","要","世界","最为","几个","的","github","所有","提供","，","机器","知识","网站","效果","所学"," ","部分","google","托管","板块","万人","绝大部分","从","主阵地","一起","使用","古月","还有","开始","将","中","也","找到","—","还","学习","一定","大部","一个","方法","代码","入门教程","在","工程师","和","入门","120","后续"],"title":"参考资料","title_tokens":["参考","资料","参考资料"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/","text":"ROS2对比ROS1 在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。 ROS1的局限性 首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。 全新的ROS2 ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。 ROS2 vs ROS1 系统架构 在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。 DDS通信 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。 核心概念 ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。 编码方式 再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。 命令行 最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随教程，你就会慢慢理解这些特性。","text_tokens":["；","客户端","rtos","中间","现有","保障","对","库会","绝大","良好","重要","右侧","第一个","诞生","做成","足够","尽量","时候","房子","宕机","/","任何","之初","条件","时间","接口","架构","注意","本","常","信号","除此之外","装修","why","流程","开源","大幅度","强壮","而已","级别","不难","其中","不能","操作系统","新版","接收","run","交给","轻松","举","前方","建立","python3","诸多","甚至","专注","教程","各样","可移植","学","100ms","分解","相关","连接","编程","意义","来看","变得","省略","mcu","是因为","可选","答案","历史使命","完整性","名称","所示","搭载","含义","封装","链接","几百","发","得","之外","一种","似乎","服务","问题","大致","跟随","不","协议","一一","系统","强","难度","相对","更","定性","广泛","深入","满足","只有","实时","大部分","迈过","格局","建筑","首先","网络","修改","指挥","成","可选项","opensplice","批量","挑战","勿躁","研究","主要","都","请","工程","设计","ros1","解决","要","完善","udp","的","上","发展","机器","结合","通过","印象","动力","属性","一团乱","已经","做","编写","受制","公司","加入","移植性","没有","陆续","一款","发布者","编码","对象","开发方式","厂家","图片","越来","以及","原有","内","不用","开始","当","中","颠覆","对比","尤其","复用","致使","控制器","到底","来讲","之间","重新","资源","一定","几百万","基本保障","它","大部","阶段","呢","自家","虽然","干掉","变化","图像","基本","进行","语言","调用","大","一旦","协作","体验","方便","几点","两个","python","稍安","部署","借助","最大","和","进程","局限","名字","5g","至关重要","小","简单","以上","集成","简称","不同","管理","开发者","最后","就","率","看看","课程","移植","产品化","差异","上手","不再","因为","批量生产","框架","这","交付","二代","之前","但","linux","复杂度","主角","迁移","每","功能","直接","程序","这里","接触","第二种","一些","最早","其实","colcon","命令行","发送","改","middleware","叫做","颠覆性","c++","同样","ament","一行","新一代","过来","接入","这样","道坎","除此","再","使命","消费","对于","总结","那","一团","算力","第二","运动学","与","tcp","加密","雷达","分散","天翻地覆","符合","节点","操作","开发成本","减少","中间层","运行","真正","基于","选项","不难理解","丰富","不过","更加","并","一套","测试","黑客","只能","话题","布式","二个","即可","干扰","发现","毛坯房","有线","类似","频繁","标准化","企业","当然","小伙伴","可以","实现","更接","适用","非常","一步","需要","动力学","平台","来","按照","产品","一下","担心","驱动","角色","一致","我们","可能","为了","为","（","提供","topic","选择","如果","于","明显","尽力","整体","可移植性"," ","翻地","听","很多","走向","里","去","大部头","一本","是从","收","安装","手机","比","独立","切记","放在","第二个","时代","还有","用","将","发布","受制于","入侵","由于","启动","他们","以下","揭秘","搬","rosbuild","交道","时","方法","解算","不爽","总体","性能","其他","场景","消失","听说","wifi","rostopic","项目管理","对系统","一边","amr","软件系统","经常","安全","编码方式","为什么","层","生活","行为","全球","换成","有且","没","ros2","这个","电脑","经验","纠结","嵌入","通信协议","是否","啦","怀揣","单兵作战","分布式","成本","航天","了解","这台","通用","多功能","上升","管理器","vs","discovery","内部","写","过","ros","广泛应用","常用","无论","例子","毛坯","命令","计算","解密","ceo","方式","各种","一代","盖","之后","角度","联网","推倒重来","左侧","提高","控制","不太","另","一团乱麻","除了","未来","部头","物","熟悉","分布","百万","好","应用层","dds","重来","目标","最终","用于","工具","下要","大量","慢慢","面临","软件开发","这些","么","微控制器","单兵","需求","windows","更好","后","api","而言","远比","一样","适合","真实","所以","涌现","各位","了","总之","会成","从而","提","能够","不好","多","走","局限性","先进","张图","产品开发","原本","一页","很大","延迟","确实","系统工程","存在","你","不断","出错","灵活","第二代","自","成功","最为","售价","，","不断涌现","针对","翻新","继续","周期","巨大","导致","市场","商业","不是","下","跨平台","？","更换","工作站","能力","稳定","层面","从","绝大部分","驾驶","编译器","最","怎样","肯定","变革","电脑系统","面向","找到","完","充足","看","第一","—","还","编译系统","风险","打成","学习","发成","越来越","最佳","随着","高昂","更具","推倒","一个","至关","乱麻","三个","可靠性","在","突然","只要","全新","类型","应该","长远","汽车","优化","主","课时","以下几点","环境","每个","过程","可靠","全","社区","不仅","暂且","诟病","国际","伙伴","作战","有限","表示","而","智能","到","千差万别","细节","编程语言","出现","、","会","fastrtps","把","内存","二种","间层","机制","rosrun","支持","不会","彼此","有","带领","共享内存","适配","全部","给","还会","运算","完整","自己","总体而言","稳定性","限性","陌生","一家","借鉴","具备","考虑","相比","开发","该","精力","下边","同时","如何","：","或者","较","pr2","款","工作","比如","接近","初次","。","两者","无法","策略","什么","简单明了","项目","想要","信息","过去","如","设备","运动","另外","用户","机器人","历史","macos","地方","就是","个体","实时性","升级","性","核心","走向市场","复杂","体现","理解","rmw","厂商","唯一","只是","嵌入式","各种各样","完成","应用","通信","方案","某","然后","大家","理器","担忧","安全性","android","成功经验","不够","是","等","master","指定","依然","生产","概念","保留","多个","几乎","消费市场","通信接口","学术研究","家庭","处理","学术","可读","所有","说明","标准","具体","也许","但是","要求","基础","通用性","只不过","不要","普及","部分","做到","调试","国际标准","）","力学","定义","catkin","面向对象","使用","保证","依赖","丢","让","也","客户","最新","或","带来","他","底层","哪些","网络连接","数据","能","版本","幅度","切换","先","代码","讲解","1ms","特性","打交道","配置","小伙","面对","编译","可读性","实力","之上","用到","便于","研发","软件","行人","高","大幅","共享","后续","自动"],"title":"ROS2对比ROS1","title_tokens":["ros1","ros2","对比"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2ros1","text":"在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。","text_tokens":["从","多","ros2","使用","就","来看","看看","。","第二","对比","或","名称","到底","这","二代","之前","学习","ros1","过","你","ros","能","我们","第二代","么","一个","的","，","变化","上","大","不","听说","也许","就是","有","其中","在"," ","做","和","？"],"title":"ROS2对比ROS1","title_tokens":["ros1","ros2","对比"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros1","text":"首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。","text_tokens":["；","ros2","就","嵌入","可靠","单兵作战","课程","成本","航天","绝大","良好","这台","第一个","诞生","做成","足够","因为","批量生产","作战","框架","这","有限","条件","时间","内部","主角","ros","出现","会","计算","why","一些","最早","各种","一代","级别","支持","有","运算","自己","甚至","新一代","具备","这样","开发","：","那","连接","pr2","款","工作","或者","比如","来看","。","算力","是因为","目标","答案","天翻地覆","最终","用于","搭载","什么","设备","运行","单兵","机器人","历史","似乎","服务","问题","适合","不","地方","就是","更加","并","涌现","黑客","了","只能","系统","走向市场","复杂","干扰","嵌入式","有线","实时","完成","大部分","应用","通信","类似","首先","当然","担忧","网络","可以","先进","原本","批量","不够","是","研究","生产","都","平台","产品","设计","ros1","不断","学术研究","我们","家庭","为了","要","处理","售价","学术","的","，","具体","发展","机器","上","不断涌现","针对","但是","普及","已经"," ","部分","市场","翻地","走向","没有","？","工作站","能力","一款","从","绝大部分","独立","驾驶","保证","丢","不用","用","中","让","也","找到","入侵","充足","由于","致使","第一","他","—","风险","资源","网络连接","数据","随着","它","高昂","大部","呢","一个","虽然","可靠性","在","实力","软件","和","类型","小","为什么","汽车","自动"],"title":"ROS1的局限性","title_tokens":["的","局限性","局限","ros1","限性"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2","text":"ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。","text_tokens":["rtos","保障","对","第一个","房子","尽量","时候","宕机","任何","之初","接口","架构","信号","装修","流程","强壮","不能","操作系统","新版","前方","python3","诸多","甚至","各样","100ms","分解","连接","来看","mcu","历史使命","完整性","搭载","链接","得","一种","问题","不","系统","强","相对","更","定性","满足","实时","格局","建筑","网络","修改","挑战","都","工程","设计","ros1","要","的","机器","上","结合","动力","已经","编写","受制","没有","一款","越来","以及","原有","内","不用","中","颠覆","尤其","控制器","之间","重新","一定","基本保障","它","阶段","呢","虽然","变化","基本","进行","语言","一旦","大","协作","体验","方便","几点","两个","python","部署","借助","和","简单","不同","管理","开发者","就","课程","移植","产品化","差异","不再","框架","这","但","linux","直接","第二种","colcon","发送","叫做","颠覆性","c++","ament","这样","使命","消费","那","算力","第二","运动学","与","加密","节点","操作","运行","真正","更加","并","测试","黑客","布式","发现","毛坯房","类似","标准化","可以","实现","需要","动力学","平台","产品","一下","角色","我们","可能","为","为了","（","提供","选择","于","明显","尽力"," ","很多","走向","去","手机","比","独立","时代","用","受制于","入侵","他们","以下","rosbuild","方法","解算","性能","场景","wifi","项目管理","对系统","amr","经常","安全","生活","行为","ros2","这个","电脑","经验","纠结","怀揣","分布式","通用","管理器","ros","无论","毛坯","解密","各种","盖","推倒重来","控制","除了","未来","分布","好","dds","重来","最终","用于","工具","下要","大量","面临","这些","微控制器","需求","windows","后","api","远比","适合","所以","了","提","能够","不好","多","原本","很大","系统工程","出错","成功","，","针对","翻新","继续","周期","巨大","导致","市场","不是","下","跨平台","？","稳定","层面","驾驶","编译器","怎样","肯定","变革","电脑系统","第一","编译系统","还","风险","打成","越来越","最佳","更具","推倒","一个","在","全新","长远","优化","汽车","课时","以下几点","环境","可靠","全","不仅","智能","到","千差万别","细节","出现","、","会","把","二种","机制","不会","有","全部","给","还会","完整","自己","稳定性","借鉴","考虑","具备","相比","开发","同时","如何","：","或者","较","工作","比如","。","无法","策略","项目","过去","运动","机器人","历史","macos","就是","个体","实时性","升级","性","复杂","体现","只是","各种各样","完成","应用","通信","方案","大家","理器","安全性","android","成功经验","等","是","master","保留","消费市场","所有","说明","标准","具体","要求","但是","基础","通用性","做到","调试","）","力学","catkin","使用","也","让","最新","网络连接","数据","能","代码","1ms","特性","面对","编译","之上","研发","行人","软件","后续","自动"],"title":"全新的ROS2","title_tokens":["ros2","的","全新"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2-vs-ros1","text":"","text_tokens":[],"title":"ROS2 vs ROS1","title_tokens":["ros1","ros2"," ","vs"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_1","text":"在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。","text_tokens":["ros2","客户端","管理","这个","中间","通信协议","rtos","就","库会","了解","重要","右侧","时候","框架","这","而","但","linux","管理器","discovery","接口","写","架构","注意","过","ros","程序","、","会","把","内存","接触","ceo","方式","间层","机制","而已","彼此","不难","有","操作系统","共享内存","接收","左侧","后续","建立","不太","一团乱麻","这样","开发","下边","再","那","连接","一团","比如","。","变得","tcp","两者","好","应用层","dds","雷达","可选","节点","简单明了","封装","操作","信息","大量","另外","中间层","这些","得","windows","基于","一样","选项","macos","不难理解","大致","不","就是","不过","更加","一套","协议","并","了","系统","复杂","会成","理解","从而","发现","深入","只有","走","应用","通信","类似","频繁","大家","理器","可以","指挥","张图","成","可选项","是","master","需要","主要","都","请","驱动","通信接口","ros1","角色","我们","自","完善","udp","的","提供","所有","，","标准","如果","上","明显","整体","通过","印象","只不过","一团乱"," ","听","公司","里","很多","更换","稳定","是从","安装","依赖","最","内","开始","将","肯定","中","让","客户","也","找到","对比","发布","看","—","底层","哪些","学习","数据","它","交道","一个","方法","变化","图像","先","至关","进行","乱麻","调用","消失","打交道","在","突然","和","进程","应该","名字","共享","至关重要","层","简单","有且"],"title":"系统架构","title_tokens":["系统","架构"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#dds","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。","text_tokens":["简称","ros2","不同","这个","通信协议","纠结","就","每个","率","是否","优化","社区","移植","成本","诟病","国际","/","交付","这","复杂度","接口","写","每","广泛应用","功能","常","ros","程序","、","例子","这里","fastrtps","把","会","开源","一些","各种","其实","联网","适配","给","改","middleware","交给","轻松","举","提高","专注","一行","另","一家","过来","除了","相比","该","接入","这样","开发","精力","再","对于","如何","物","熟悉","比如","。","省略","tcp","加密","好","无法","dds","目标","符合","想要","开发成本","减少","用户","这些","么","发","之外","得","需求","机器人","一种","基于","一样","问题","丰富","不","就是","不过","更加","并","协议","所以","了","系统","复杂","总之","rmw","厂商","更","唯一","能够","广泛","满足","多","应用","通信","类似","频繁","某","然后","当然","可以","实现","产品开发","适用","opensplice","等","master","是","指定","延迟","都","按照","产品","多个","设计","ros1","灵活","我们","解决","为了","要","为","udp","的","提供","，","标准","选择","如果","于","机器","属性"," ","做","部分","商业","加入","不是","国际标准","？","更换","层面","稳定","收","定义","安装","厂家","放在","丢","还有","最","不用","用","肯定","中","也","让","完","带来","复用","底层","来讲","重新","发成","数据","版本","时","一个","自家","切换","不爽","变化","性能","先","其他","场景","代码","基本","三个","配置","听说","在","只要","部署","最大","软件","应该","高","软件系统","5g","简单"],"title":"DDS通信","title_tokens":["dds","通信"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_2","text":"ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。","text_tokens":["开发","从","应用","开发方式","ros2","开发者","使用","第二个","就","大家","熟悉","意义","小伙伴","以及","。","课程","第二","百万","不用","中","也","非常","尽量","伙伴","依然","概念","保留","迁移","含义","学习","担心","几乎","到","几百","几百万","ros1","存在","本","一致","我们","过","ros","这些","会","这里","方式","的","方法","，","如果","讲解","小伙","其中","有","不","陌生","并","在","已经"," ","便于","了","各位","部分","一一","应该","和","很多","没有","二个","全球","广泛"],"title":"核心概念","title_tokens":["概念","核心"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_3","text":"再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。","text_tokens":["ros2","就","过程","看看","暂且","课程","移植","这","写","编程语言","程序","会","方式","一些","之后","角度","带领","提高","总体而言","同样","教程","道坎","具备","可移植","开发","学","再","部头","如何","接近","编程","。","所示","项目","操作","如","软件开发","机器人","更好","而言","真实","不过","难度","更","发现","多","迈过","企业","大家","实现","更接","一页","一步","是","勿躁","来","确实","ros1","我们","可读","的","，","具体","机器","可移植性","不要"," ","移植性","大部头","一本","发布者","编码","对象","从","切记","图片","面向对象","当","用","面向","也","中","发布","来讲","学习","版本","搬","大部","一个","方法","总体","语言","特性","可读性","在","一边","用到","两个","稍安","软件","和","后续"],"title":"编码方式","title_tokens":["方式","编码方式","编码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_4","text":"最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随教程，你就会慢慢理解这些特性。","text_tokens":["以上","没","集成","ros2","最后","现有","就","啦","对","上手","多功能","上升","表示","每","ros","功能","常用","除此之外","会","把","命令","大幅度","rosrun","有","命令行","run","控制","教程","开发","除此","再","相关","总结","：","编程","初次","比如","。","好","dds","分散","节点","工具","慢慢","这些","之外","一种","而言","跟随","大致","就是","核心","了","话题","难度","理解","相对","更","即可","通信","某","大家","是","master","概念","都","ros1","你","我们","最为","的","所有","topic","，","如果","选择","印象"," ","做","下","陆续","独立","中","也","对比","启动","—","揭秘","幅度","一个","干掉","变化","特性","rostopic","在","和","大幅","换成","后续","主"],"title":"命令行","title_tokens":["命令","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/","text":"ROS2安装方法 本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。 Linux系统简介 时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。 Ubuntu系统简介 我们后续课程使用到的Linux发行版就是 ubuntu系统 。 Ubuntu诞生于2004年10月份， 每六个月发布一个新版本 ，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。 Ubuntu虚拟机安装 虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下： 1. 下载系统镜像 下载链接： https://ubuntu.com/download/desktop 2. 在虚拟机中创建系统 3. 设置虚拟机硬盘大小 4. 设置Ubuntu镜像路径 5. 启动虚拟机 6. 设置用户名和密码 7. 等待系统安装 8. 完成安装 Ubuntu系统安装好后，大家可以先随意使用熟悉一下。 ROS2系统安装 接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下： 1. 设置编码 $ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8 2. 添加源 $ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844 3. 安装ROS2 $ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop 4. 设置环境变量 $ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。 ROS2示例测试 为了验证ROS2安装成功，我们可以通过以下示例进行测试。 示例一：命令行示例 先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。 示例二：小海龟仿真示例 再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["export","任何人","install","添加","null","evaluation","desktop","-","对","发行版","$","重要","第一个","诞生","时候","/","任何","热爱","基本相同","时间","本","蕴藏","编号","world","大小","分享","除此之外","py","版","开源","硬盘","键盘","一直","os","其中","操作系统","原理","光大","者","个人爱好","run","合适",".","2022","虚拟机","甚至","位置","guyuehome","教程","各样","月","快速","us","兼容","deb","d","开放","衡量","千层浪","俱全","链接","二","之外","一种","bug","服务","问题","不","热情","激发","系统","10","更","4","bash","林纳斯","网络","ubuntu","成","redhat","多用户","成熟","主要","二句","密码","都","请","吸引","设计","usr","一句","个","发行","的","相同","背景","上","发展","机器","(","tee","订阅","看出","lang","通过","效果","products","已经","做","echo","看到","加入","公司","bashrc","没有","本相","22","download","环境变","发布者","第一句","编码","六个","--","越来","原有","开始","中","绝对","叫","来讲","路径","重新","编辑","一定","摩拳擦掌","激起","命名","好后","en","呢","务器","虽然","持续","基本","进行","大","准确","ubuntu22.04","两个","最大","试试","和","18","名字","爱好者","下来","list","界面","不同","管理","开发者","1991","就","试一试","课程","移植","用户名","这套","因为","这","为例","之前","但","linux","rosdistro","算机","占据","archive","每","地址","功能","学生","直接","程序","&&","这里","接触","一些","更新","只","humble","绑定","回到","ubuntu20.04","乐于","维护","准备","发扬光大","好者","o","环境变量","命令行","小海","叫做","人工","每年","硬件","可视","这样","操作界面","打包","gpg","多任务","除此","上下","再","小海龟","centos","com","此时","与","talker","第二","点击","精神","户名","节点","年","操作","运行","奥义","locale","内核","并用","服务器","关于","upgrade","一套","并","测试","起来","示例","fedora",")","第二句","apt","二个","2","keyrings","企业","一","采用","可以","gen","实现","代表","适用","raw","keyring","大学生","各个","长期","需要","月份","source","来","一下","编辑器","我们","人工智能","可能","为了","浏览","何人","选择","如果","于","connect","爱好"," ","之内","步骤","上层","实践","很多","并且","真理","安装","六个月","”","源代码","第二个","发挥","很","将","发布","传播","启动","探索","以下","all","按键","2004","时","nodes","还是","文件","方法","性能","其他","场景","teleop","locales",">","一石激起千层浪","经典","ros2","传输","这个","电脑","是否","比较","啦","了解","每隔","demo","通用","第一次","http","应用程序","一次","最好","ros","终端","出于","workstation","7","常用","[","可视化","无论","命令","计算","成为","|","各种","codename","之后","动手做","当中","联网","release","领域","如下","pro","先要","控制","之一","failed","迅猛","不太","外衣","除了","说干就干","未来","前先要","githubusercontent","3","熟悉","好","dds","_","curl","分别","现在","伴随","中将","自行","大量","软件开发","packages","免费","windows","验证","字符","]","后","“","一样","参考","适合","快","所以","了","unix","构建","print","hello","无论是","6","蓝色","大学","技术","情况","多","资料","接下来","\"","已有","原本","目前","接下","main","你","dev","应用软件","成功","最为","sources","，","其","变量","节","update","修复","ssl","商业","下","？","04","稳定","www","从","多人","简介","等待","最","新","决定","芬兰","后缀","提到","—","加上","还","第一","字符串","越来越","5","反馈","一个","操作方法","紧随","影响","html","浏览器","在","仿真器","模式","华丽","紧随其后","应该","utf","org","turtlesim","37844","强大","出","发扬","环境","setup","过程","不仅","dpkg","opt","优先","cpp","有限","一位","表示","两年","https","智能","到","计算机","出现","动手","=","检验","、","会","把","镜像","源","支持","vmware","有","收费","给","千层","普通","自己","1","多用","左右","share","真器","一般","指标","考虑","开发","该","一应","同时","如何","或者","：","工作","比如","。","by","sudo","其后","正常","什么","技术实力","想要","node","介绍","用户","另外","运动","lts","量","其他软件","上下左右","机器人","互联","macos","就是","turtle","核心","升级","以",":","可","随意","变动","lc","任务","尚","唯一","to","各种各样","下载","完成","应用","通信","通讯","大家","关注","擦掌","等","是","master","放到","依然","概念","多个","互联网","arch","说明","标准","~","architecture","如遇","等等","但是","lsb","至此","etc","仿真","一起","使用","吧","保证","signed","依赖","建议","提交","也","让","或","底层","他","会加","数据","一应俱全","版本","创建","海龟","设置","listener","数字","顺序","先","代码","讲解","个人","报错","实力","之上","8","唯一标准","行列","软件","gnupg","key","后续","虚拟","指令"],"title":"ROS2安装方法","title_tokens":["安装","ros2","方法"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2","text":"本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。","text_tokens":["安装","ros2","一起","前先要","最","。","了解","重要","底层","—","linux","一下","操作","本","我们","的","，","一种","操作系统","节","系统","先要"],"title":"ROS2安装方法","title_tokens":["安装","ros2","方法"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#linux","text":"时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。","text_tokens":["发扬","任何人","界面","不同","ros2","管理","开发者","这个","1991","就","过程","对","不仅","发行版","重要","通用","这套","有限","任何","一位","这","热爱","之前","但","linux","应用程序","算机","时间","到","本","计算机","最好","基本相同","功能","学生","动手","出于","出现","程序","检验","分享","、","会","可视化","把","常用","计算","成为","镜像","一些","开源","各种","之后","动手做","当中","回到","绑定","联网","其中","支持","操作系统","原理","光大","收费","个人爱好","乐于","千层","维护","好者","发扬光大","给","自己","叫做","多用","每年","硬件","甚至","之一","迅猛","教程","可视","不太","外衣","指标","操作界面","开发","快速","多任务","打包","说干就干","一般","各样","兼容","或者","熟悉","比如","centos","。","此时","与","开放","衡量","精神","现在","什么","技术实力","伴随","年","操作","千层浪","大量","用户","另外","量","有","免费","内核","并用","windows","服务器","后","bug","一样","服务","参考","互联","问题","macos","不","热情","适合","就是","一套","所以","并","核心","了","unix","系统","激发","起来","fedora","更","尚","任务","唯一","各种各样","林纳斯","大学","技术","情况","多","应用","企业","已有","ubuntu","可以","实现","成","原本","适用","redhat","大学生","多用户","是","需要","放到","等","成熟","主要","概念","都","吸引","设计","互联网","我们","发行","应用软件","的","相同","，","标准","何人","上","发展","爱好","等等","通过","其","已经"," ","修复","做","看到","加入","公司","实践","商业","每","很多","下","并且","本相","没有","？","真理","稳定","安装","源代码","多人","使用","一起","越来","依赖","最","原有","提交","中","也","决定","芬兰","传播","或","提到","他","底层","还","—","叫","来讲","重新","加上","越来越","激起","版本","命名","呢","反馈","一个","操作方法","方法","务器","虽然","性能","先","其他","基本","代码","讲解","个人","大","场景","准确","在","实力","之上","唯一标准","模式","行列","华丽","和","应该","软件","名字","爱好者","强大","目前","一石激起千层浪"],"title":"Linux系统简介","title_tokens":["系统","简介","linux"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu","text":"我们后续课程使用到的Linux发行版就是 ubuntu系统 。 Ubuntu诞生于2004年10月份， 每六个月发布一个新版本 ，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。","text_tokens":["不同","开发者","环境","电脑","就","比较","试一试","发行版","课程","移植","每隔","重要","诞生","因为","时候","优先","为例","表示","两年","之前","第一次","linux","智能","占据","一次","到","每","编号","本","出现","直接","常用","、","无论","会","版","除此之外","接触","这里","更新","只","硬盘","各种","一直","支持","之后","联网","其中","有","ubuntu20.04","领域","维护","合适","普通","自己","2022","虚拟机","人工","位置","硬件","教程","除了","这样","月","开发","考虑","一应","除此","未来","再","如何","熟悉","比如","。","好","其后","年","想要","自行","俱全","介绍","用户","软件开发","lts","之外","免费","windows","机器人","出","互联","参考","就是","快","所以","升级","以","了","系统","10","变动","4","更","无论是","多","应用","资料","通讯","大家","关注","已有","网络","ubuntu","可以","擦掌","代表","各个","等","是","长期","依然","月份","主要","都","一下","编辑器","互联网","你","我们","人工智能","可能","为了","发行","个","的","，","浏览","选择","机器","于","上","如果","看出","效果","但是","通过","已经"," ","之内","上层","很多","22","04","稳定","安装","六个月","六个","从","使用","保证","发挥","建议","新","很","中","让","也","发布","绝对","或","后缀","第一","还","编辑","会加","一定","5","一应俱全","摩拳擦掌","版本","2004","数字","时","一个","文件","还是","方法","紧随","顺序","持续","性能","影响","进行","其他","讲解","浏览器","ubuntu22.04","在","软件","紧随其后","18","最大","后续","虚拟"],"title":"Ubuntu系统简介","title_tokens":["ubuntu","简介","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu_1","text":"虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下：","text_tokens":["下载","安装","完成","同时","evaluation","环境","：","-","工作","已有","大家","就","啦","com","。","可以","采用","开始","让","是","/","请","https","多个","自行","操作","地址","另外","我们","workstation","运行","这里","一个","其他软件","的","相同","，","后","html","其他","vmware","products","在","之上","如下"," ","并","准备","构建","系统","步骤",".","软件",":","和","叫做","pro","虚拟机","虚拟","www"],"title":"Ubuntu虚拟机安装","title_tokens":["虚拟机","ubuntu","安装","虚拟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1","text":"下载链接： https://ubuntu.com/download/desktop","text_tokens":["下载"," ","download","/",".",":","：","desktop","https","com","ubuntu","链接"],"title":"1. 下载系统镜像","title_tokens":["下载"," ","系统",".","镜像","1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2","text":"","text_tokens":[],"title":"2. 在虚拟机中创建系统","title_tokens":["创建","在","2"," ","系统",".","虚拟机","虚拟","中"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3","text":"","text_tokens":[],"title":"3. 设置虚拟机硬盘大小","title_tokens":["设置"," ","大小",".","硬盘","3","虚拟机","虚拟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4-ubuntu","text":"","text_tokens":[],"title":"4. 设置Ubuntu镜像路径","title_tokens":["设置"," ",".","镜像","路径","4","ubuntu"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#5","text":"","text_tokens":[],"title":"5. 启动虚拟机","title_tokens":[" ",".","启动","虚拟机","5","虚拟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#6","text":"","text_tokens":[],"title":"6. 设置用户名和密码","title_tokens":["6","用户名","设置"," ",".","户名","和","密码","用户"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#7","text":"","text_tokens":[],"title":"7. 等待系统安装","title_tokens":["7","安装"," ","系统",".","等待"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#8","text":"Ubuntu系统安装好后，大家可以先随意使用熟悉一下。","text_tokens":["安装","好后","系统","使用","，","。","大家","先","随意","熟悉","一下","ubuntu","可以"],"title":"8. 完成安装","title_tokens":["安装"," ","8","完成","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_1","text":"接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下：","text_tokens":["安装","接下来","ros2","：","就","ubuntu","。","可以","中","接下","到","我们","把","，","如下","了","系统","步骤","下来"],"title":"ROS2系统安装","title_tokens":["系统","安装","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1_1","text":"$ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8","text_tokens":["export","install","us","-","gen","$","sudo","_","all","=","en","&&","locale","lang","update"," ","8",".","utf","locales","lc","apt"],"title":"1. 设置编码","title_tokens":["设置"," ","编码",".","1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2_1","text":"$ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844","text_tokens":["list","install","ros2","null","-","$","dpkg","/","http","https","rosdistro","archive","ros","=","&&","[","|","codename","os","release","o",".","share","failed","guyuehome","gpg","githubusercontent","deb","com","by","d","sudo","curl","_","packages","]","“","参考",":","可","print",")","apt","to","keyrings","\"","ubuntu","keyring","raw","master","source","usr","main","dev","sources","arch","，","tee","(","connect","architecture","如遇","update"," ","echo","ssl","lsb","www","etc","”","--","signed","报错","org",">","37844","gnupg","key"],"title":"2. 添加源","title_tokens":[" ",".","添加","源","2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3-ros2","text":"$ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop","text_tokens":["update","sudo"," ","install","desktop","-","humble","upgrade","apt","$","ros"],"title":"3. 安装ROS2","title_tokens":["安装"," ","ros2",".","3"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4","text":"$ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。","text_tokens":["安装","ros2","\"","就","setup","。","$","中","bash","好","opt","/","source","ros","humble","，","~","在","已经"," ","了","系统","echo",".","bashrc",">","至此"],"title":"4. 设置环境变量","title_tokens":["环境变","环境变量","设置"," ",".","环境","4","变量"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_2","text":"为了验证ROS2安装成功，我们可以通过以下示例进行测试。","text_tokens":["我们","安装","为了","测试","成功","ros2","示例","验证","，","进行","以下","。","可以","通过"],"title":"ROS2示例测试","title_tokens":["ros2","测试","示例"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_1","text":"先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。","text_tokens":["发布者","”","ros2","通信","传输","吧","：","第二个","是否","。","talker","第二","$","中","demo","重要","dds","第一个","发布","_","节点","启动","底层","正常","第一","cpp","来","字符串","以下","数据","world","终端","py","最为","nodes","listener","一个","命令","字符","的","说明","，","“","如果","先","订阅","问题","通过","者","在"," ","run","系统","两个","试试","hello","没有","二个"],"title":"示例一：命令行示例","title_tokens":["命令行","命令","示例","一","："]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_2","text":"再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["第一句","蓝色","该","上下","安装","”","仿真","再","ros2","小海龟","：","就","啦","试一试","。","可以","第二","$","将","中","_","点击","分别","启动","—","第一","二句","节点","探索","来","中将","控制","node","蕴藏","ros","终端","运动","一句","按键","海龟","我们","运行","成功","一个","奥义","上下左右","的","背景","持续","，","“","关于","键盘","上","在","turtle","如下"," ","teleop","两个","run","小海","示例","仿真器","第二句","左右","turtlesim","真器","至此","key","后续","经典","教程","指令"],"title":"示例二：小海龟仿真示例","title_tokens":["海龟","仿真","二","小海","示例","小海龟","："]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/","text":"ROS2命令行操作 在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。 Linux中的命令行 类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。 启动方式 回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。 常用命令操作 我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。 ROS2中的命令行 ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。 运行节点程序 想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看节点信息 当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim 查看话题信息 当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose 发布话题消息 想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 发送服务请求 一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\" 发送动作目标 想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\" 录制控制命令 系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["现有","每次","而是","-","目","根据","对","$","重要","第一个","时候","/","本","便捷","至于","兴趣","z","键盘","笔记","一直","二十个","run","子目","轻松",".","拷贝","2022","列表","动","数量","terminal","快捷键","十个","angular","异常","名称","看不到","容易","详细","链接","turtle1","科幻","某个","推出","随身带","一种","服务","问题","大致","不","一只","搜索","系统","管理员","例如","片段","更","目的","深入","bag","满足","alt","被","成","度高","主要","都","设计","多到","解决","要","的","相同","里边","背景","上","40","结合","通过","pub","衣服","统管","已经","echo","看到","及其","没有","mv","--","0.0","尝试","原有","不用","中","既","绝对","来讲","参数","路径","编辑","一定","它","呢","twist","send","虽然","很少","有点","进行","语法","体验","调用","文件夹","info","改名","科幻电影","适应","1.8","和","cmd","下来","msgs","小","保持","以上","list","集成","自主","不同","管理","就","试一试","看看","具体操作","因为","这","为例","linear","之前","但","linux","rosbag","每","功能","直接","某段","程序","从来","这里","接触","约束","若","一些","ctrl","回到","死记硬背","命令行","发送","小海","叫做","窗口","精心","原因","0","可视",",","这样","再","小海龟","对于","此时","与","知道","播放","节点","操作","总","运行","逛来逛去","死机","常用命令","总有","找","选项","不过","并","黑客","忙","起来","话题","即可","2","cd","类似","一","枯燥","可以","列出","输入","一点","实现","既定","一步","需要","当前工作","来","一下","编辑器","17","我们","可能","子","为","炫酷","提供","topic","如果","选择","于","硬"," ","材料","本节","rosbag2","很多","去","查看","”","一二十个","文件名","action","主目录","pose","还有","很","将","专门","令人","用","笔记本","发布","启动","标目","产生","拷贝到","record","call","还是","文件","其他","场景","name","35","权限","service","一二十","新建","这种","一边","teleop","此",">","为什么","执行","ros2","呈现","复现","这个","电脑","srv","二十","啦","转","所在","了解","逛去","第一次","一次","ros","终端","常用","vel","[","无论","可视化","命令","方式","各种","右键","角度","x","如下","详细信息","帮上","改变","ls","…","控制","感兴趣","不太","另","感受","未来","案例","想","干什么","3","记忆","熟悉","系统管理员","移入","好","_","目标","孤单","工具","实验","pwd","死记","深色","慢慢","系列","布料","这些","需求","字符","内容","]","后","“","商场","现出","一样","写字","复制","跟","2.0","所以","源文件","了","想象","及","goal","电影","能够","文件名称","接下来","多","\"","rotateabsolute","删除","快捷","难以","目标目录","确实","接下","你","灵活","感兴","绝对路径","，","不可","看中","怎么","继续","db3","y","{","随身","不是","其上","下","？","04","段","子目录","t","改了","theta","不一","mkdir","打开","背","11","play","—","第一","还","加上","学习","又","rotate","随着","魅力","则","由","一个","笔记本电脑","在","目录","rm","仿真器","turtlesim","出","不到","+","当前","看似","后边","哪","感觉","表示","到","、","会","把","}","精心设计","机制","absolute","有","geometry","带领","一系列","自己","1","真器","呀","觉得","该","录制","件夹","太","如何","买","：","或者","工作","进一步","初次","比如","。","呈现出","gedit","rate","一系","体操","<","sudo","正常","什么","一二","想要","node","信息","用户","令人发指","麻烦","消息","体会","并不一定","请求","动作","就是","turtle","核心","以","查","做好",":","鼠标","至今","商家","只是","实验室","spawn","完成","应用","某","逛来","大家","均","发指","服装","等","是","指定","概念","保留","msg","多个","什么样","所有","受","具体","款式","但是","'","手","这项","调试","0.2","定制","仿真","多种","不变","一件","使用","一起","必不可少","也","让","或","哪些","cp","数据","创建","海龟","地","复制到","先","用到","规则","软件","显示","key","完全","指令"],"title":"ROS2命令行操作","title_tokens":["操作","命令","ros2","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2","text":"在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。","text_tokens":["深入","感受","案例","多","ros2","小海龟","使用","大家","进一步","。","可以","将","中","重要","一步","时候","—","第一","工具","第一次","之前","学习","一定","一次","到","随着","我们","可能","海龟","魅力","运行","会","接触","命令","的","，","一种","如果","有点","带领","在","命令行"," ","了","小海","适应","调试","本节","更","不太"],"title":"ROS2命令行操作","title_tokens":["操作","命令","ros2","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#linux","text":"类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。","text_tokens":["自主","呈现","现有","每次","就","根据","看似","哪","逛去","时候","但","linux","ros","功能","便捷","、","会","无论","可视化","命令","这里","方式","约束","一些","精心设计","各种","一直","命令行","自己","精心","可视","呀","这样","对于","买","比如","。","此时","呈现出","异常","什么","工具","容易","想要","操作","布料","科幻","这些","逛来逛去","需求","推出","一种","商场","麻烦","总有","现出","一样","服务","并不一定","问题","不","就是","并","想象","起来","了","做好","至今","片段","电影","商家","能够","满足","多","类似","某","逛来","大家","被","可以","一点","成","既定","服装","等","是","度高","保留","都","来","设计","你","灵活","我们","解决","为","什么样","炫酷","的","里边","所有","看中","，","不可","受","于","款式","结合","但是","衣服","已经"," ","材料","手","看到","不是","其上","很多","没有","去","？","定制","一件","使用","不一","必不可少","中","来讲","一定","呢","还是","一个","虽然","先","其他","场景","在","这种","规则","科幻电影","软件","和","小","为什么","完全"],"title":"Linux中的命令行","title_tokens":["命令行","命令","的","linux","中"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_1","text":"回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。","text_tokens":["而是","+","这个","电脑","就","二十","对","所在","因为","时候","这","本","到","终端","功能","常用","至于","会","从来","命令","方式","ctrl","右键","笔记","回到","有","命令行","二十个","一系列","叫做","窗口","原因","列表","觉得","：","记忆","初次","熟悉","数量","terminal","。","快捷键","一系","十个","正常","什么","看不到","工具","一二","操作","深色","慢慢","系列","令人发指","科幻","死机","字符","随身带","后","体会","写字","就是","不过","并","所以","黑客","搜索","及","鼠标","电影","即可","应用","alt","大家","枯燥","快捷","可以","输入","难以","发指","是","需要","都","来","确实","一下","多到","我们","的","背景","，","选择","上","硬","怎么","通过","但是"," ","手","随身","这项","看到","不是","多种","t","一二十个","使用","很","专门","打开","中","也","令人","笔记本","既","不用","背","用","启动","参数","一定","又","随着","魅力","呢","很少","笔记本电脑","其他","一二十","在","用到","科幻电影","软件","为什么","不到","指令"],"title":"启动方式","title_tokens":["启动","方式"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_2","text":"我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。","text_tokens":["执行","管理","当前","就","目","感觉","/","linux","功能","常用","[","会","把","命令","若","回到","死记硬背","子目","改变","ls","…","拷贝","列表","另","该","件夹","未来","对于","：","或者","工作","熟悉","。","系统管理员","gedit","移入","<","sudo","目标","名称","pwd","死记","链接","用户","这些","某个","]","复制","“","常用命令","找","选项","不","源文件","了","以","系统","及","管理员","查","目的","只是","文件名称","cd","多","一","大家","删除","列出","可以","均","需要","指定","目标目录","当前工作","来","一下","多个","编辑器","我们","绝对路径","为","的","所有","，","统管"," ","下","及其","没有","”","子目录","文件名","mv","不变","主目录","mkdir","原有","打开","将","用","中","也","绝对","或","cp","标目","路径","编辑","拷贝到","它","创建","则","地","由","一个","文件","复制到","先","语法","体验","权限","文件夹","新建","一边","目录","改名","rm","此","显示",">","出","保持","指令"],"title":"常用命令操作","title_tokens":["操作","命令","常用命令","常用"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2_1","text":"ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。","text_tokens":["感受","集成","接下来","仿真","ros2","不同","小海龟","干什么","一起","就","比如","对","。","可以","后边","与","了解","中","体操","具体操作","一系","也","第一个","节点","第一","什么","还","参数","都","表示","为例","主要","linux","接下","概念","node","操作","功能","我们","系列","总","海龟","一个","命令","内容","的","相同","所有","topic","，","机制","具体","跟","大致","继续","有","不过","在","命令行","核心"," ","以","小海","话题","一系列","下来","下","目的"],"title":"ROS2中的命令行","title_tokens":["命令行","命令","ros2","的","中"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_3","text":"想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["仿真","ros2","使用","：","可以","$","中","_","节点","想要","node","操作","我们","海龟","要","运行","某个","命令","，","键盘","进行","turtle","teleop"," ","run","例如","和","turtlesim","控制","key"],"title":"运行节点程序","title_tokens":["程序","节点","运行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_4","text":"当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim","text_tokens":["这样","list","ros2","当前","：","某","就","啦","对","可以","$","知道","中","/","节点","哪些","加上","都","来","详细","node","信息","ros","感兴","它","子","运行","呢","兴趣","一个","命令","的","，","？","如果","有","info"," ","详细信息","系统","turtlesim","查看","感兴趣"],"title":"查看节点信息","title_tokens":["信息","查看","节点"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_5","text":"当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose","text_tokens":["list","想","ros2","当前","使用","：","某","试一试","pose","$","中","/","加上","还","都","数据","子","turtle1","呢","一个","命令","的","topic","，","消息","有","如下"," ","系统","echo","话题","看到","即可","查看"],"title":"查看话题信息","title_tokens":["查看","信息","话题"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_6","text":"想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":["ros2","\"","：","--","动","0.0","可以","$","rate","msgs","发布","_","angular","/","还","linear","msg","想要","直接","我们","海龟","turtle1","vel","命令",",","twist","}","topic","，","z","x","通过","pub","geometry","2.0","y","命令行"," ","起来","{","话题",":","1.8","1","cmd","控制","指令"],"title":"发布话题消息","title_tokens":["话题","发布","消息"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_7","text":"一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\"","text_tokens":["spawn","太","仿真","改了","再","ros2","\"","：","srv","theta","试一试","$","孤单","/","—","还","来","产生","call","我们","海龟","一个","}","提供","，","服务","name","调用","service","x","一只","y","'"," ","{","仿真器",":","turtlesim","0.2","真器","2",","],"title":"发送服务请求","title_tokens":["发送","请求","服务"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_8","text":"想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\"","text_tokens":["这样","完成","仿真","action","ros2","rotateabsolute","这个","：","\"","3","theta","比如","转","可以","$","中","让","_","目标","/","指定","想要","到","rotate","海龟","turtle1","一个","命令","的","提供","send","，","具体","absolute","动作","角度","通过","命令行"," ","忙","发送","仿真器","帮上",":","goal","turtlesim","真器"],"title":"发送动作目标","title_tokens":["发送","动作","目标"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_9","text":"系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["以上","bag","段","录制","实验室","再","复现","ros2","如何","：","-","大家","啦","尝试","看看","。","还有","与","很","用","实现","中","好","$","play","11","可以","_","播放","/","这","实验","rosbag","想要","数据","每","record","功能","17","某段","我们","turtle1","子","vel","运行","常用","把","还是","命令","一个","的","，","如果","40","35","回到","有","db3","就是"," ","系统","轻松",".","rosbag2","自己","2022","cmd","很多","下来","0","？","04"],"title":"录制控制命令","title_tokens":["命令","录制","控制"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","text":"ROS2开发环境配置 ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。 Git git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git 下载教程源码 《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。 VSCode Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download VSCode插件配置 为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。 中文语言包 Python插件 C++插件 CMake插件 vscode-icons ROS插件 Msg Language Support Visual Studio IntelliCode URDF Markdown All in One VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["以上","集成","官方网","简称","ros2","不同","管理","开发者","环境","每次","install","就","-","有些","课程","$","扩展","重要","/","作为","这","visualstudio","但","linux","clone","https","略显","ros","功能","广泛应用","合并","众多","直接","之父","终端","、","会","》","这里","命令","方式","成为","intellicode","一些","开源","只","language","哪里","记事本","之后","支持","不会","有","听到","操作系统","给","准备","后续",".","一系列","自己","人工","插件","利器","硬件","c++","因","guyuehome","一行","判断","教程","21","这样","开发","快速","件夹","如何","国内","：","2015","比如","com","。","与","一系","好","源码","非常简单","sudo","_","工具","项目","年","不开","操作","链接","大量","另外","系列","这些","官方","内容","推出","机器人","记事","windows","bug","出","macos","in","离不开","开发工具","不","冲突","丰富","而生","所以","并","了","搜索","系统","示例","复杂",":","理工","审核","轻量","更","官方网站","apt","广泛","下载","推荐","linus","完成","码云","应用","多","studio","大家","已有","被","vscode","可以","讲","管理工具","visual","非常","code","是","需要","喜欢","自带","都","无限","这款","msg","多个","设计","驱动","编辑器","我们","可能","个人","为了","迅速","千万","的","提供","所有","github","，","具体","里边","机器","发展","如果","浏览","网上","等等","网站"," ","做","修复","support","千上万","编写","看到","变更","调试","搭建","很多","组件","download","？","查看","一款","中会","安装","cmake","两款","源代码","成千","几千","使用","one","行","贡献","以及","icons","最","新","用","肯定","提交","也","让","中","微软","成千上万","人","—","几千万","还","之间","上万","编辑","语言包","all","版本","呢","增加","一个","下载方式","文件","切换","方法","先","进行","代码","高效","《","配置","特性","中文","文件夹","编译","浏览器","语言","在","git","便于","tutorials","python","软件","常听到","和","gitee","urdf","入门","功能强大","管理软件","强大","markdown","简单","神兵","自动"],"title":"ROS2开发环境配置","title_tokens":["ros2","开发","配置","环境"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros2","text":"ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。","text_tokens":["中会","开发","推荐","两款","完成","如何","环境","大家","。","vscode","课程","肯定","重要","源码","需要","—","工具","不开","ros","大量","我们","这些","、","呢","的","机器人","提供","一些","，","？","机器","先","代码","配置","离不开","开发工具","编译","给","准备","做","git","示例","编写","和","查看"],"title":"ROS2开发环境配置","title_tokens":["ros2","开发","配置","环境"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#git","text":"git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git","text_tokens":["不同","install","管理","开发者","每次","就","有些","$","这","linux","广泛应用","功能","直接","合并","众多","终端","之父","会","命令","开源","哪里","之后","不会","有","听到","人工","硬件","因","判断","一行","开发","国内","比如","。","非常简单","sudo","工具","项目","这些","内容","bug","不","冲突","而生","所以","并","了","系统","理工","审核","apt","广泛","linus","码云","完成","应用","已有","大家","被","可以","管理工具","非常","是","需要","都","这款","多个","设计","驱动","我们","可能","迅速","千万","的","github","所有","，","具体","发展","等等","网站"," ","修复","千上万","变更","看到","一款","安装","成千","几千","使用","行","贡献","以及","新","肯定","提交","也","让","中","成千上万","人","几千万","—","之间","上万","版本","增加","一个","切换","方法","进行","代码","高效","特性","在","git","软件","常听到","和","gitee","管理软件","简单","自动"],"title":"Git","title_tokens":["git"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_1","text":"《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。","text_tokens":["下载","这样","推荐","开发","件夹","集成","多","ros2","：","环境","就","com","。","vscode","课程","$","用","讲","好","中","源码","_","是","/","—","还","自带","https","clone","略显","另外","查看","会","》","下载方式","文件","这里","方式","的","一个","里边","记事","，","浏览","如果","记事本","代码","《","有","文件夹","浏览器","git"," ","tutorials","系统",".","复杂",":","和","gitee","入门","很多","更","guyuehome","21"],"title":"下载教程源码","title_tokens":["下载","源码","教程"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode","text":"Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download","text_tokens":["官方网站","下载","开发","快速","官方网","源代码","简称","2015","：","studio","com","。","vscode","可以","扩展","微软","visual","code","非常","是","/","visualstudio","编辑","但","年","linux","项目","https","操作","链接","编辑器","功能","、","官方","一个","推出","的","windows","成为","，","代码","支持","macos","丰富","网站","操作系统","在"," ","系统","download",".",":","和","功能强大","搭建","轻量","组件","利器","强大","神兵"],"title":"VSCode","title_tokens":["vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode_1","text":"为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。","text_tokens":["安装","开发","ros2","。","可以","与","扩展","vscode","一系","还","无限","功能","我们","系列","为了","插件","的","，","便于","一系列","调试","后续"],"title":"VSCode插件配置","title_tokens":["vscode","配置","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_2","text":"","text_tokens":[],"title":"中文语言包","title_tokens":["语言","中文","语言包"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#python","text":"","text_tokens":[],"title":"Python插件","title_tokens":["python","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#c","text":"","text_tokens":[],"title":"C++插件","title_tokens":["c++","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#cmake","text":"","text_tokens":[],"title":"CMake插件","title_tokens":["cmake","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode-icons","text":"","text_tokens":[],"title":"vscode-icons","title_tokens":["-","vscode","icons"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros","text":"","text_tokens":[],"title":"ROS插件","title_tokens":["插件","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#msg-language-support","text":"","text_tokens":[],"title":"Msg Language Support","title_tokens":["language"," ","msg","support"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#visual-studio-intellicode","text":"","text_tokens":[],"title":"Visual Studio IntelliCode","title_tokens":["studio","intellicode","visual"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#urdf","text":"","text_tokens":[],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#markdown-all-in-one","text":"VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["以上","推荐","开发","环境","大家","最","vscode","可以","。","也","喜欢","作为","众多","插件","的","只","，","支持","个人","配置","网上","在","搜索","自己","出"],"title":"Markdown All in One","title_tokens":[" ","one","all","in","markdown"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/","text":"DDS Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。 通信模型 DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。 DDS DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。 什么是DDS 好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是 Data Distribution Service ，也就是 数据分发服务 ，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。 DDS在ROS2中的应用 DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。 质量服务策略QoS DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是 Domain ，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为 数据提供者和接收者之间的合约 。 具体会有哪些策略？比如： DEADLINE策略，表示通信数据必须要在每次截止时间内完成一次通信； HISTORY策略，表示针对历史数据的一个缓存大小； RELIABILITY策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式； DURABILITY策略，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。 案例一：在命令行中配置DDS 我们先来试一试在命令行中配置DDS的参数。 启动第一个终端，我们使用best_effort创建一个发布者节点，循环发布任意数据，在另外一个终端中，如果我们使用reliable模型订阅同一话题，无法实现数据通信，如果修改为同样的best_effort，才能实现数据传输。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort 如何去查看ROS2系统中每一个发布者或者订阅者的QoS策略呢，在topic命令后边跟一个\"--verbose\"参数就行了。 $ ros2 topic info /chatter --verbose 案例二：DDS编程示例 接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。 运行效果 启动两个终端，分别运行发布者和订阅者节点： $ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub 可以看到两个终端中的通信效果如下，和之前貌似并没有太大区别。 看效果确实差不多，不过底层通信机理上可是有所不同的。 发布者代码解析 我们看下在代码中，如果加入QoS的配置。 learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , }, 订阅者代码解析 订阅者中的QoS配置和发布者类似。 learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], }, DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们主要带领大家认识DDS，更多使用方法和相关内容，大家也可以参考下边的链接进行学习。 参考链接 https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["交换","；","组织","客户端","*","中间","每次","-","提示","根据","保障","对","#","$","重要","第一个","一新","尽量","时候","/","建模语言","分发","__","publishernode","about","接口","时间","design","架构","world","必须","增多","大小","py","兴趣","高速","区别","开源","接口标准","统一","4g","者","那个","接收","run","合适","国防","举","helloworld",".","建立","python3","位置","guyuehome","预测","快速","质量","向","兼容","连接","编程","相关","来看","durability","可见","处","垂直","任意","完整性","异常","啥意思","成立","尽可能","链接","bilibili","作者","docs","默认","二","得","一种","并行","服务","问题","红色","不","居","服务端","系统","broker","更","广泛","满足","只有","实时","忽略","神经网络","depth","非常复杂","网络","deadline","生态","scripts","视频","修改","成","发生变化","相当于","i","主要","同一","都","在于","我","设计","所","ros1","usr","解决","要","树莓","顺利","的","图","机器","上","单位","(","订阅","前边","通过","pub","效果","已经","做","通路","echo","编写","看到","加入","感知","best","没有","流畅性","发布者","无人机","对象","bv12z4y167w2","古月","--","样","尝试","1989","内","不用","当","差不多","中","复用","spin","到底","参数","具体地址","distribution","之间","一定","资源","它","美国","%","en","呢","初始化","publishing","架构图","焕然","务器","差别","变化","图像","容性","有点","进行","基本","语言","一旦","才能","大","可是","info","两个","python","借助","适应","和","5g","下来","args","至关重要","避免","msgs","缓存","工业","主讲人","不同","管理","中间件","关系","就","有些","试一试","课程","guides","医疗","火锅","某一","框架","这","为例","import","之前","但","刚才","入口","每","地址","尽可","能响","功能","直接","众多","转移","之","程序","这里","数以千计","第二种","不管","只","最早","一些","humble","其实","绑定","送给","讲到","遥控","命令行","维护","发送","middleware","\\","learning","同样",",","这样","使命","掉","那","价值","门","qosprofile","无论如何","com","此时","第二","与","知道","加密","人机","std","符合","节点","靠","定时","年","黑入","销毁","qoshistorypolicy","concepts","运行","真正","服务器","构图","四大","它们","选项","丰富","不过","更加","一套","并","黑客","话题","布式","示例","entry","!",")","get","生变","databus","类似","频繁","企业","一","优势","旋转","所有人","当然","数据通信","退出","列出","可以","实现","destroy","讲","非常","一步","各个","需要","来","按照","uml","一下","驱动","sub","角色","我们","可能","速度","为","为了","无用","空间","effort","可信","（","提供","topic","兼容性","如果","选择","明显","于","尽力","瓶颈"," ","日志","输出","上层","历史数据","很多","神经网","并且","去","查看","create","提供者","”","小组","交通","放在","行","规模","整个","还有","很","效率","专门","用","将","有所","video","占用","发布","subscribernode","能源","self","由于","启动","他们","强制","2004","名","时","还是","文件","收到","方法","行业","性能","信赖","on","其他","场景","domain","name","《","service","publisher","听说","这种","super","s","认识","丢失","omg","env","string","行为","没","强调","执行","ros2","传输","这个","电脑","纠结","第一种","集中","啦","回调","太多","分布式","像是","作为","看下","互相","一条","主讲","应用程序","一次","指令","过","ros","广泛应用","终端","常用","[","无论","》","例子","命令","方式","成为","last","各种","领域","如下","中心","来到","决策","提高","处于","控制","感兴趣","21","reliability","据传","想","案例","供者","循环","42","分布","建设","同一个","保证数据","通道","好","dds","可信赖","高通","_","初始","分别","现在","运转","说了半天","大量","航拍","subscription","这些","需求","字符","内容","定时器","更好","后","跟","“","而言","一样","]","参考","原则","回忆","articles","真实","边","流畅","所以","通常","了","欢迎","hello","本身","提","init","能够","解析","不好","蓝色","情况","技术","数据通","多","合约","接下来","\"","而且","console","第三种","不感兴趣","数据传输","from","先进","集中处理","history","单独","sysml","该用","确实","接下","帧","一角","技术标准","main","存在","你","感兴","灵活","最为","qosreliabilitypolicy","相当","，","处理速度","coding","针对","qos","周期","组成部分","导致","{","商业","拿","不是","上边","下","包含","？","0.5","www","能力","驾驶","关心","三种","等待","新","打开","肯定","找到","增长","华为","看","提到","第一","—","学习","字符串","timer","点","终于","logger","由","一个","对应","影响","html","至关","chatter","就行了","任","corba","在","模式","入个","选用","应该","体","utf","类型","入门","org","优化","当于","全局","吃","class","主","points","有人","环境","working","每个","setup","过程","后边","接收者","哪","表示","关闭","https","到","id","how","出现","=","、","会","把","}","课","二种","分组","父类","multiple","库","发生","有","那该","implementations","带领","授权","给","半天","完整","程度","自己","1","冰山一角","第四种","none","开发","下边","航空","太","如何","：","或者","进一步","比如","vendors","。","广播","无法","好吃","机理","模型","def","服务质量","建模","策略","正常","什么","组成","延时","node","类","信息","过去","介绍","用户","另外","运动","通信模型","受到","四种","机器人","像","历史","麻烦","双方","消息","动作","请求","专利","就是","核心","升级","全称","以","性","许多","派","复杂","填充","可",":","publish","办法","reliable","理解","rmw","厂商","只是","to","完成","连接数","应用","通信","大大提高","传送","大家","无人","模块","的话","等","是","指定","包","神经","with","貌似","msg","多个","heard","处理","所有","data","标准","具体","说明","舰船","bin","既然","但是","要求","带","callback","综合","'","部分","shutdown","不多","兼容性问题","）","rclpy","焕然一新","定义","第三","宗旨","不变","一起","使用","保证","海军","这么","重大","也","点对点","客户","让","大大","晚","或","int32","profile","different","底层","哪些","秒","几种","数据","版本","冰山","创建","意思","设置","地","listener","函数","遥控器","每条","结构","发送给","@","先","代码","高效","个人","就行","特性","配置","编译","有所不同","之上","进入","便于","第四","8","软件","截止","verbose","keep","定位","自动"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds","text":"Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。","text_tokens":["主讲人","完成","ros2","通信","古月","大家","神经网络","过程","网络","。","重大","课程","实现","讲","好","中","dds","相当于","是","—","底层","靠","都","他们","学习","主讲","来","我","神经","ros","我们","它","终于","最为","、","》","的","相当","机器人","，","变化","具体","机器","动作","服务","《","前边","讲到","在"," ","系统","话题","欢迎","来到","入门","hello","神经网","当于","21"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_1","text":"DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。","text_tokens":["客户端","有人","这个","每次","关系","每个","就","第一种","集中","有些","太多","像是","火锅","作为","框架","这","一条","之前","但","到","架构","地址","能响","必须","增多","之","常用","会","这里","兴趣","二种","第二种","成为","只","各种","其实","发生","中心","程度","自己","建立","感兴趣","第四种","这样","想","连接","进一步","。","第二","广播","通道","知道","与","可见","dds","无法","好吃","模型","处","节点","异常","正常","运转","受到","通信模型","四种","真正","服务器","一种","麻烦","双方","消息","并行","请求","服务","问题","不过","就是","更加","并","服务端","核心","了","以","许多","系统","broker","更","能够","连接数","多","生变","通信","类似","databus","忽略","传送","优势","而且","旋转","所有人","第三种","不感兴趣","列出","可以","实现","集中处理","先进","单独","非常","发生变化","是","需要","一步","都","在于","所","ros1","角色","感兴","我们","可能","解决","速度","为","处理","的","提供","所有","，","具体","处理速度","如果","明显","上","订阅","针对","但是","瓶颈"," ","导致","通路","拿","很多","并且","没有","包含","第三","使用","行","关心","三种","规模","整个","不用","当","很","效率","也","点对点","客户","找到","增长","发布","中","第一","具体地址","几种","一定","数据","它","时","由","一个","收到","务器","每条","变化","性能","影响","有点","进行","其他","一旦","在","这种","第四","软件","和","应该","优化","吃"],"title":"通信模型","title_tokens":["通信","模型","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_1","text":"DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。","text_tokens":["交换","预测","满足","航空","应用","通信","ros2","频繁","驾驶","交通","比如","。","可以","新","模块","很","好","dds","医疗","非常","等","能源","需要","都","之前","数据","存在","广泛应用","这些","地","会","高速","一个","需求","方式","的","，","它们","领域","并","在","已经"," ","通常","国防","借助","决策","和","不是","感知","很多","定位","自动","广泛"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_2","text":"好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是 Data Distribution Service ，也就是 数据分发服务 ，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。","text_tokens":["组织","强调","管理","中间","环境","中间件","啦","保障","分布式","/","建模语言","分发","过","、","这里","课","成为","数以千计","最早","各种","统一","维护","半天","中心","完整","开发","质量","使命","兼容","价值","分布","比如","。","好","dds","服务质量","垂直","建模","策略","现在","啥意思","成立","年","介绍","说了半天","大量","需求","服务","问题","丰富","真实","就是","一套","升级","全称","以","系统","复杂","布式","可","提","满足","实时","技术","应用","通信","大家","当然","网络","可以","sysml","等","是","来","uml","一下","设计","技术标准","灵活","我们","可能","解决","为","的","提供","data","兼容性","，","标准","于","舰船","订阅","已经","做"," ","兼容性问题","？","对象","海军","1989","还有","专门","中","也","发布","到底","distribution","强制","数据","它","美国","意思","2004","地","呢","由","一个","行业","容性","进行","语言","高效","service","听说","corba","omg","软件","和"],"title":"什么是DDS","title_tokens":["是","dds","什么"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#ddsros2","text":"DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。","text_tokens":["没","组织","工业","ros2","中间","这个","中间件","纠结","就","根据","过程","对","分布式","哪","重要","尽量","某一","但","刚才","接口","时间","架构","每","ros","功能","转移","、","会","这里","无论","把","不管","开源","接口标准","统一","4g","有","授权","给","那个","middleware","自己","提高","建立","位置","这样","开发","下边","想","兼容","那","编程","如何","比如","建设","无论如何","分布","。","此时","dds","高通","符合","组成","用户","得","构图","像","机器人","一种","而言","一样","红色","问题","原则","四大","不","专利","就是","边","所以","性","了","系统","布式","可","厂商","更","能够","蓝色","技术","大大提高","多","应用","通信","企业","大家","可以","生态","实现","模块","是","需要","都","该用","来","按照","多个","设计","驱动","你","我们","可能","为了","要","的","所有","，","标准","具体","上","选择","如果","兼容性","机器","既然","综合","组成部分"," ","部分","上层","商业","上边","加入","很多","？","能力","宗旨","不变","使用","放在","保证","这么","用","肯定","中","也","让","大大","华为","或","复用","由于","提到","他们","版本","呢","函数","一个","还是","架构图","对应","差别","性能","容性","影响","至关","基本","场景","代码","个人","就行","其他","任","在","之上","进入","软件","选用","和","5g","至关重要"],"title":"DDS在ROS2中的应用","title_tokens":["在","dds","应用","ros2","的","中"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#qos","text":"DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是 Domain ，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为 数据提供者和接收者之间的合约 。 具体会有哪些策略？比如： DEADLINE策略，表示通信数据必须要在每次截止时间内完成一次通信； HISTORY策略，表示针对历史数据的一个缓存大小； RELIABILITY策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式； DURABILITY策略，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。","text_tokens":["；","传输","ros2","不同","这个","电脑","每次","关系","啦","根据","过程","对","接收者","重要","一新","尽量","时候","互相","表示","之前","应用程序","一次","时间","id","每","顺利","尽可","ros","功能","必须","出现","直接","众多","程序","大小","会","例子","命令","分组","一些","绑定","送给","有","那该","遥控","给","那个","接收","发送","合适","举","完整","处于","控制","缓存","reliability","这样","快速","质量","供者","向","掉","：","如何","门","比如","同一个","来看","。","保证数据","此时","durability","加密","人机","好","dds","可信赖","模型","_","策略","节点","完整性","延时","黑入","尽可能","过去","另外","航拍","运动","通信模型","这些","默认","需求","机器人","历史","更好","一种","服务","回忆","不","就是","流畅","派","了","黑客","系统","办法","reliable","理解","不好","满足","只有","情况","数据通","完成","合约","应用","通信","类似","多","大家","无人","数据通信","网络","deadline","可以","实现","的话","成","history","视频","各个","是","需要","指定","同一","都","帧","所","我们","可能","为","无用","要","树莓","空间","effort","可信","的","提供","图","所有","，","具体","选择","如果","机器","尽力","qos","针对","通过","要求","但是","带"," ","导致","加入","历史数据","下","best","没有","？","流畅性","焕然一新","定义","提供者","无人机","小组","一起","使用","保证","样","这么","内","新","将","用","中","也","客户","让","晚","占用","哪些","参数","之间","资源","一定","数据","地","呢","一个","遥控器","焕然","结构","发送给","图像","信赖","先","基本","domain","进行","场景","特性","配置","才能","在","这种","便于","模式","丢失","截止","和","适应","体","入个","避免","全局","行为","指令"],"title":"质量服务策略QoS","title_tokens":["策略","qos","质量","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_3","text":"我们先来试一试在命令行中配置DDS的参数。 启动第一个终端，我们使用best_effort创建一个发布者节点，循环发布任意数据，在另外一个终端中，如果我们使用reliable模型订阅同一话题，无法实现数据通信，如果修改为同样的best_effort，才能实现数据传输。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort 如何去查看ROS2系统中每一个发布者或者订阅者的QoS策略呢，在topic命令后边跟一个\"--verbose\"参数就行了。 $ ros2 topic info /chatter --verbose","text_tokens":["传输","ros2","-","试一试","后边","$","第一个","/","每","终端","命令","者","命令行","同样","reliability","据传","如何","或者","循环","42","。","dds","无法","模型","_","std","任意","策略","节点","另外","跟","系统","话题",":","reliable","数据通","通信","\"","数据传输","数据通信","实现","修改","同一","来","msg","我们","为","effort","的","topic","，","data","如果","订阅","qos","pub"," ","echo","best","去","查看","发布者","使用","--","中","发布","int32","启动","第一","参数","数据","创建","呢","一个","先","chatter","配置","才能","就行了","info","在","verbose","msgs"],"title":"案例一：在命令行中配置DDS","title_tokens":["在","命令行","dds","案例","命令","一","：","配置","中"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_4","text":"接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。","text_tokens":["接下来","通信","尝试","。","中","dds","为例","之前","接下","world","我们","，","代码","配置","在"," ","以","话题","下来","hello"],"title":"案例二：DDS编程示例","title_tokens":["dds","案例","二","示例","：","编程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_2","text":"启动两个终端，分别运行发布者和订阅者节点： $ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub 可以看到两个终端中的通信效果如下，和之前貌似并没有太大区别。 看效果确实差不多，不过底层通信机理上可是有所不同的。","text_tokens":["发布者","太","ros2","通信","不同","：","。","可以","$","差不多","中","有所","机理","发布","_","看","分别","启动","节点","底层","之前","貌似","确实","sub","终端","运行","区别","的","，","上","订阅","qos","大","效果","pub","可是","不过","者","并","有所不同","如下"," ","helloworld","两个","run","看到","和","learning","不多","没有"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_3","text":"我们看下在代码中，如果加入QoS的配置。 learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , },","text_tokens":["执行","ros2","*","-","提示","setup","回调","#","/","看下","import","__","publishernode","关闭","入口","接口","world","功能","=","程序","py","、","[","}","父类","last","库","如下","helloworld",".","learning","1","python3","guyuehome",",","reliability","none","：","循环","qosprofile","com","。","知道","def","_","std","初始","节点","定时","node","类","信息","作者","销毁","qoshistorypolicy","字符","定时器","后","“","消息","选项","原则","居","并","填充","系统","示例","话题",":","entry","publish","!","reliable",")","hello","init","get","完成","\"","console","depth","退出","from","destroy","scripts","history","需要","包","msg","usr","main","我们","为","qosreliabilitypolicy","effort","的","（","说明","data","，","如果","coding","单位","(","bin","qos","pub","callback","周期","'","已经"," ","日志","输出","{","shutdown","编写","加入","best","create","）","rclpy","www","0.5","发布者","对象","”","古月","等待","打开","中","让","发布","self","profile","spin","秒","字符串","数据","timer","点","创建","%","名","logger","设置","函数","初始化","一个","publishing","文件","@","chatter","进行","代码","name","publisher","配置","编译","info","在","super","s","8","python","utf","keep","类型","env","args","msgs","string","class","主","points"],"title":"发布者代码解析","title_tokens":["代码","发布者","解析","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_4","text":"订阅者中的QoS配置和发布者类似。 learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], }, DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们主要带领大家认识DDS，更多使用方法和相关内容，大家也可以参考下边的链接进行学习。","text_tokens":["执行","ros2","*","-","提示","setup","对","回调","#","/","import","__","关闭","入口","接口","world","功能","=","程序","py","、","[","}","父类","last","库","带领","者","如下","helloworld",".","\\","learning","1","python3","冰山一角","guyuehome",",","reliability","none","下边","相关","：","循环","qosprofile","com","。","知道","dds","def","_","std","初始","节点","node","类","信息","作者","销毁","链接","qoshistorypolicy","subscription","内容","]","后","“","消息","选项","原则","参考","居","并","系统","示例","话题",":","entry","复杂","!","reliable",")","hello","本身","更","init","只是","get","完成","多","类似","\"","console","大家","depth","退出","非常复杂","from","destroy","scripts","可以","history","非常","是","需要","i","主要","包","msg","一角","sub","usr","main","我们","heard","处理","qosreliabilitypolicy","effort","的","（","说明","data","标准","，","coding","(","订阅","bin","qos","pub","callback","'"," ","日志","输出","{","shutdown","编写","加入","best","create","）","rclpy","www","发布者","定义","对象","”","古月","使用","等待","打开","中","让","也","发布","subscribernode","self","profile","spin","学习","数据","冰山","点","创建","%","名","logger","设置","listener","函数","初始化","一个","文件","收到","方法","@","chatter","进行","name","代码","配置","编译","info","super","s","8","认识","python","utf","keep","和","类型","env","args","msgs","string","class","主","points"],"title":"订阅者代码解析","title_tokens":["订阅","者","解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_5","text":"https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["to","ros2","bv12z4y167w2","-","working","vendors","com","video","guides","dds","_","/","different","with","about","https","design","bilibili","how","ros","docs","en","concepts","multiple","humble","on","html","articles","implementations"," ","middleware",".",":","org","rmw","www"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/","text":"工作空间：开发过程的大本营 大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是工程。 工作空间是什么 类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做工作空间。 所以工作空间是一个存放项目开发相关文件的文件夹，也是 开发过程中存放所有资料的大本营 。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。 创建工作空间 了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 自动安装依赖 我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init $ rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y 编译工作空间 依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。 设置环境变量 编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["eclipse","以上","；","强调","执行","集成","install","ros2","管理","这个","环境","中间","关系","就","-","啦","过程","setup","当前","社区","creating","手动","#","$","了解","src","绝大","像是","/","任何","这","之前","错误","https","clone","rosdistro","到","过","pip","ros","功能","一部","出现","终端","程序","、","会","这里","接触","w","命令","一些","humble","各种","可执行文件","多少","不会","rosdepc","b","有","大本营","colcon","如下","环境变量","子目",".","生效","叫做","自己","1","完全","python3","guyuehome","教程","21","开发","件夹","未来","相关","：","或者","3","工作","数量","保存","比如","自动生产","com","。","此时","允许","sudo","_","点击","所示","名称","用于","b2","什么","workspace","工具","存放","项目","想要","操作","链接","信息","另外","docs","这些","运行","内容","缺少","机器人","后","“","build","rosdep","一样","选项","参考","p","就是","并","所以","仅","了","空间结构","系统","行文",":","path","apt","2","唯一","init","能够","local","警告","下载","cd","情况","接下来","完成","大部分","资料","如图所示","类似","四个","\"","某","studio","大本","大家","得到","可以","from","一点","均","visual","等","是","需要","典型","i","sh","source","qt","生产","概念","都","包","接下","creator","工程","多个","存在","dev","我们","子","根目录","要","为了","成功","空间","的","所有","里边","，","如果","机器","~","针对","变量","y","update"," ","日志","部分","echo","编写","看到","不是","bashrc","..","里","并且","编写程序","a","至此","放置","定义","脚本","安装","log","中会","环境变","”","子目录","绝大部分","某些","从","使用","--","依赖","以及","mkdir","新","开始","当","用","中","也","让","找到","并列","否则","还","参数","来讲","学习","产生","ws","创建","大部","设置","en","时","人为","一个","文件","总体","结构","很少","html","进行","代码","一部分","配置","文件夹","编译","在","git","工具栏","目录","两个","tutorials","org","和","应该","gitee","下来",">","报错","后续","pip3","结果","自动"],"title":"工作空间","title_tokens":["空间","工作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_1","text":"大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是工程。","text_tokens":["eclipse","开发","集成","”","件夹","某些","这个","环境","studio","就","大家","工作","比如","以及","。","此时","新","当","中","visual","等","点击","是","qt","工具","都","之前","学习","产生","creator","想要","工程","过","我们","创建","程序","这些","、","会","接触","一个","文件","内容","的","所有","里边","，","“","选项","有","文件夹","在"," ","工具栏","编写","和","应该","叫做","编写程序","后续","放置"],"title":"工作空间：开发过程的大本营","title_tokens":["大本营","开发","空间","的","：","工作","大本","过程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_2","text":"类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做工作空间。 所以工作空间是一个存放项目开发相关文件的文件夹，也是 开发过程中存放所有资料的大本营 。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。","text_tokens":["以上","；","强调","执行","集成","install","管理","这个","中间","环境","关系","就","过程","src","绝大","像是","这","错误","到","ros","功能","一部","、","会","这里","w","一些","各种","可执行文件","b","有","大本营","子目","叫做","自己","1","完全","开发","件夹","未来","相关","或者","：","3","工作","数量","保存","比如","。","允许","_","所示","名称","用于","b2","存放","项目","操作","信息","另外","运行","机器人","后","build","一样","就是","并","所以","了","空间结构","系统","行文","2","唯一","警告","情况","大部分","资料","如图所示","类似","四个","某","大本","得到","可以","一点","等","是","需要","典型","都","工程","多个","存在","dev","我们","子","根目录","要","成功","空间","的","所有","里边","，","机器","针对"," ","日志","部分","编写","不是","里","a","放置","定义","脚本","安装","log","子目录","绝大部分","某些","新","开始","用","中","也","并列","参数","来讲","产生","ws","创建","大部","时","人为","一个","文件","总体","结构","很少","进行","代码","一部分","文件夹","编译","在","目录","两个","和","结果"],"title":"工作空间是什么","title_tokens":["是","空间","工作","什么"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_3","text":"了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git","text_tokens":["下载","cd","接下来","ros2","使用","：","-","工作","com","mkdir","可以","$","了解","src","_","/","概念","接下","教程","clone","https","ws","dev","我们","创建","空间","命令","一个","的","，","~","代码","p","git","如下"," ","了","tutorials",".",":","和","gitee","下来","并且","guyuehome","结果","21"],"title":"创建工作空间","title_tokens":["空间","创建","工作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_4","text":"我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init $ rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y","text_tokens":["下载","安装","cd","从","install","使用","：","-","--","依赖","社区","手动","可以","$","from","中","也","src","sudo","i","工具","都","rosdistro","pip","我们","会","一个","的","一些","，","humble","各种","rosdep","init","多少","代码","rosdepc","有","y","update"," ","path","python3","..","apt","pip3","自动"],"title":"自动安装依赖","title_tokens":["安装","依赖","自动"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_5","text":"依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。","text_tokens":["安装","中会","cd","log","件夹","完成","install","使用","或者","：","就","工作","依赖","啦","过程","-","自动生产","。","可以","$","中","sudo","_","/","否则","任何","生产","错误","ws","出现","ros","dev","成功","、","空间","命令","文件","的","后","，","如果","build","~","代码","不会","有","文件夹","编译","在","colcon","如下"," ","了","看到","应该","python3","apt","报错","缺少","自动"],"title":"编译工作空间","title_tokens":["空间","工作","编译"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_6","text":"编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。","text_tokens":["环境变","local","执行","完成","install","\"","环境","：","当前","就","setup","工作","。","#","$","让","均","找到","_","sh","需要","/","source","包","还","ws","dev","功能","终端","我们","创建","为了","设置","成功","、","空间","文件","的","所有","，","后","可执行文件","~","配置","变量","编译","在","环境变量"," ","仅","了","系统","行文",".","echo","生效","和","bashrc",">","至此","能够"],"title":"设置环境变量","title_tokens":["环境变","环境变量","设置","环境","变量"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_7","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["docs","en"," ","tutorials","/",".",":","org","workspace","-","humble","creating","html","https","a","ros"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/","text":"功能包：开发过程的大本营 在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做功能包。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。 创建功能包 如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python 编译功能包 在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash 功能包的结构 功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。 C++功能包 首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。 Python功能包 C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["；","package","执行","自主","不同","ros2","install","而是","这个","关系","-","每个","就","率","过程","环境","降低","一颗","社区","#","setup","$","first","src","重要","版权","points","尽量","时候","/","type","这","表示","但","刚才","入口","包是","https","到","ros","功能","终端","cmakerlists","cmakelists","必须","程序","立刻","分享","、","会","例子","把","命令","这里","py","除此之外","一些","只","humble","机制","新创建","各种","可执行文件","之后","其中","有","原理","大本营","给","环境变量","colcon","如下","普通",".","learning","叫做","提高","新创","控制","c++","之一","导航","ament","举个","教程","很难","判断","是否是","该","开发","件夹","除此","想","相关","如何","：","包该","或者","那","数量","工作","比如","编程","。","pkg","creating","好","很快","源码","<","_","名称","分别","正常","workspace","出来","是否","链接","信息","介绍","docs","这些","么","运行","得","之外","内容","型","机器人","跟","build","“","找","耦合","一样","参考","颜色","不","就是","并","假设","五颜六色","所以","了","黄豆","起来","描述","包中","行文","entry","声明",":","划分","别人","是不是","bash","红豆","xml","发现","local","解析","下载","cd","译成","完成","多","大本","大家","当然","首先","豆子","某种","可以","必然","绿豆","等","是","需要","放到","只想","source","包","主要","都","来","存在","你","dev","越","我们","可能","要","空间","的","说明","所有","，","里边","如果","机器","混合","~","编译成","但是","继续","视觉","变量"," ","拆分","编写","看到","txt","拿","不是","移动","感知","很多","里","下","包含","a","？","create","包并","分析","环境变","头疼","cmake","”","某些","一起","使用","放在","--","手上","依赖","还有","your","当","用","中","也","袋子","将","复用","看","之间","他们","ws","版本","创建","设置","en","时","呢","一个","文件","还是","方法","结构","html","代码","三个","name","配置","才能","语法","文件夹","新建","编译","语言","在","两个","规则","python","拿出","tutorials","软件","org","和","类型","名字",">","c","后续","讲解","指令"],"title":"功能包","title_tokens":["包","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_1","text":"在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做功能包。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。","text_tokens":["；","自主","不同","ros2","而是","这个","关系","每个","就","率","降低","一颗","社区","重要","尽量","时候","到","ros","功能","立刻","分享","、","会","例子","把","只","机制","其中","有","原理","给","普通","叫做","提高","控制","之一","导航","举个","教程","很难","件夹","想","如何","包该","数量","比如","。","很快","源码","名称","出来","这些","么","得","机器人","找","耦合","颜色","不","就是","并","假设","五颜六色","所以","了","黄豆","起来","包中","划分","别人","是不是","红豆","发现","下载","多","大家","当然","豆子","某种","可以","绿豆","等","是","需要","放到","只想","包","都","你","越","我们","可能","的","说明","，","如果","机器","混合","但是","视觉"," ","拆分","看到","拿","不是","移动","感知","很多","里","头疼","某些","一起","使用","放在","手上","当","用","中","也","袋子","复用","之间","他们","时","一个","文件","方法","代码","三个","文件夹","在","拿出","软件"],"title":"功能包：开发过程的大本营","title_tokens":["大本营","开发","的","包","：","大本","过程","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_2","text":"如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python","text_tokens":["cd","；","cmake","package","c","ros2","相关","如何","使用","这个","：","--","-","或者","那","就","比如","。","可以","pkg","$","#","中","src","<","_","/","分别","type","包","表示","包是","ws","dev","功能","终端","我们","创建","ament","版本","呢","这里","一个","命令","还是","的","，","新创建","build","如果","跟","~","name","新建","在"," ","python","和","learning","新创","名字",">","c++","？","create","指令"],"title":"创建功能包","title_tokens":["包","创建","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_3","text":"在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash","text_tokens":["环境变","cd","完成","install","环境","：","工作","setup","可以","#","$","src","好","_","需要","/","正常","包","source","ws","dev","功能","我们","创建","运行","空间","的","所有","，","build","~","之后","代码","配置","才能","继续","变量","编译","在","环境变量","colcon"," ","包中",".","编写","和","bash","local"],"title":"编译功能包","title_tokens":["包","功能","编译"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_4","text":"功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。","text_tokens":["件夹","如何","那","是否","分析","。","包","来","刚才","功能","我们","创建","呢","一个","文件","的","结构","，","新创建","文件夹","两个","普通","新创","不是","下","？","判断","包并","是否是"],"title":"功能包的结构","title_tokens":["包","的","功能","结构"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#c","text":"首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。","text_tokens":["该","包含","package","cmake","如何","：","使用","依赖","首先","。","必然","中","版权","是","需要","看","主要","包","存在","cmakelists","功能","cmakerlists","必须","要","运行","设置","文件","内容","的","，","各种","代码","语法","才能","其中","编译","在","所以","如下"," ","两个","规则","描述",".","声明","和","类型","txt","下","c++","xml"],"title":"C++功能包","title_tokens":["c++","包","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#python","text":"C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。","text_tokens":["解析","译成","包含","执行","package","除此","”","不同","如何","：","编程","使用","setup","依赖","大家","。","还有","将","中","也","源码","版权","_","是","需要","主要","包","这","但","入口","信息","功能","版本","我们","介绍","程序","py","除此之外","会","文件","之外","型","的","内容","一些","里边","，","“","各种","可执行文件","一样","语言","编译成","讲解","配置","不","但是","有","编译","在","所以","给"," ","两个","行文","python",".","描述","entry","声明","和","c++","后续","xml","points"],"title":"Python功能包","title_tokens":["包","python","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_5","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["package","ros2","-","creating","first","your","/","workspace","https","ros","docs","en","humble","html"," ","tutorials",".",":","org","a"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/","text":"节点 机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。 通信模型 完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。 案例一：Hello World节点（面向过程） ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。 运行效果 大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ], 创建节点流程 代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。 案例二：Hello World节点（面向对象） 所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。 运行效果 下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ], 创建节点流程 所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。 案例三：物体识别节点 没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。 运行效果 在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 Attention 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。 代码解析 在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ], 案例四：机器视觉识别节点 用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。 运行效果 启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 注意 如果是在虚拟机中操作，需要进行以下设置： 把虚拟机设置为兼容USB3.1； 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。 代码解析 相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ], 节点命令行操作 节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息 思考题 现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["hsv","；","install","*","中间","-","根据","保障","inrange","#","$","imread","xy","重要","时候","/","查询","cap","__","乃至","接口","时间","world","合体","注意","打印","py","除此之外","左上角","w","findcontours","流程","而已","其中","摄像头","操作系统","不能","一帧","helloworld","run","宽","云端","状态",".","载体","python3","虚拟机","guyuehome","while","列表","框会","可移植","孤立","四","upper","兼容","连接","编程","来看","名称","搭载","出来","链接","作者","远程","255","docs","马","二","之外","得","物体","一种","红色","问题","不","取","居","系统","重点","circle","更","是不是","as","实时","被","某种","scripts","修改","chain","坐标","都","请","设计","if","usr","共同","要","的","相同","心里","没错","attention","机器","上","(","通过","效果","视觉","做","编写","看到","加入","bgr2hsv","移植性","像头","比喻","waitkey","负责","对象","编码","color","图片","古月","lower","后勤部","更多要","开始","当","不用","中","180","上限","溜溜","spin","到底","helloworldnode","参数","岂","路径","重新","之间","它","命名","先拉","en","呢","人为","初始化","虽然","监控","变化","图像","进行","外界","语言","动态","厂房","方便","info","身体","来源","tutorials","两个","python","最大","和","进程","这份","为止","名字","args","下来","简单","保持","list","后勤部门","不同","知其所以然","就","continue","看看","课程","移植","图像识别","apple","绿点","框架","这","import","为例","处理过程","之前","但","入口","刚才","算机","img","90","每","功能","众多","程序","一节","这里","一些","humble","可执行文件","一项","cvtcolor","合理","回到","就让","命令行","发送","此处","下限","learning","叫做","窗口","c++","硬件","0","可视","框架图",",","过来","这样","骡子","除此","videocapture","再","工人","对于","这座","那","总结","jpg","np","com","知道","节点","上去","调整","操作","销毁","运行","关于","选项","不过","保持联系","ruby","并","更加","数值","for","绿色","起来","示例","布式","entry","!","hierarchy",")","approx","apt","即可","2","发现","思考题","understanding","get","范围","drawcontours","推动","四个","类似","一","当然","退出","可以","destroy","实现","一点","读取","需要","看上去","来","一下","图像处理","驱动","我们","可能","速度","为","眼睛","位于","职责","提供","工厂","（","如果","整体","相机","可移植性"," ","日志","输出","步骤","cnt","java","里","并且","去","a","编写程序","查看","cv2","分析","看上","理过","安装","”","独立","放在","阈值","还有","很","将","用","sleep","发布","usb3.1","self","启动","他们","会弹","以下","ws","时","bgr","还是","文件","nodes","方法","收到","总体","name","read","这种","super","认识","env","经常","编码方式",">","没","执行","webcam","ros2","这个","电脑","destroyallwindows","是否","纠结","啦","好像","所在","分布式","src","同理","互相","过","ros","终端","shape","常用","[","可视化","命令","计算","方式","成为","各种","角度","x","如下","苹果","home","中心","boundingrect","改变","控制","21","知其然","image","未来","案例","疑惑","detect","循环","熟悉","分布","一张","好","_","初始","分别","左上","现在","中将","去除","面积","这些","字符","]","后","“","综合体","更好","难","一样","而言","red","参考","颜色","部门","所以","前","细胞","二值化","了","行文","及","至","hello","算是","init","解析","推荐","摄像","接下来","多","\"","例程","console","得到","from","前后","这款","接下","main","你","dev","最为","成功","联系","，","coding","opencv","噪声","更为","各不相同","y","周期","{","time","不是","下","？","0.5","www","中心点","从","某些","等待","一台","打开","面向","上角","找到","pyhton","看","—","还","学习","字符串","5","点","物理","logger","一个","true","实际","检测","html","在","int","utf","org","应该","class","主","结果","points","三","出","object","环境","+","模拟","每个","setup","retr","过程","考题","numpy","表示","关闭","https","到","编程语言","计算机","出现","=","、","会","把","父类","点画","库","机制","发生","桌子","ok","b","有","给","还会","完整","总体而言","左右","1","h","呀","imshow","none","具备","该","开发","相比","太","更多","如何","：","或者","工作","比如","。","<","def","模型","sudo","contours","想到","转换","正常","ret","休眠","识别","组成","想要","node","类","信息","设备","另外","运动","介绍","每一项","通信模型","像素","机器人","像","150","摇杆","in","地方","就是","所以然","太小","模块化","以","稍微","复杂","着急",":","可","理解","任务","唯一","只是","轮廓","完成","通信","某","然后","大家","关注","的话","模块","等","是","依然","包","概念","思考","mask","改成","处理","前后左右","可读","hcx","说明","具体","bin","网上","既然","但是","128","只不过","综合","不要","'","后勤","腿","做到","生成","shutdown","调试","移动","自然","）","rclpy","50","获取","array","一线","多种","一起","使用","面向对象","吧","也","让","却","勾勒","创建","设置","函数","@","结构","先","代码","配置","可读性","编译","用到","8","轮子","高","显示","虚拟","指令"],"title":"节点","title_tokens":["节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_1","text":"机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。","text_tokens":["”","一起","连接","那","就","工作","。","中","成为","是","节点","到","合体","ros","功能","众多","我们","每一项","这些","一个","的","机器人","像","一些","，","机制","各种","机器","综合体","一项","“","整体","通过","取","就是","综合","在","给","细胞"," ","了","名字"],"title":"节点","title_tokens":["节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_2","text":"完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。","text_tokens":["；","执行","后勤部门","不同","这个","环境","每个","就","根据","保障","看看","分布式","时候","查询","这","互相","但","乃至","算机","到","编程语言","计算机","每","功能","程序","除此之外","、","计算","可执行文件","桌子","角度","b","有","摄像头","操作系统","还会","云端","状态","完整","叫做","左右","载体","控制","c++","硬件","这样","该","除此","工人","这座","：","连接","或者","工作","那","编程","比如","分布","如何","来看","。","想到","节点","名称","搭载","分别","组成","想要","操作","信息","远程","另外","运动","这些","运行","之外","机器人","“","摇杆","不","部门","地方","就是","ruby","并","细胞","了","系统","行文","复杂","布式","更","任务","算是","唯一","推动","摄像","完成","多","接下来","某","可以","得到","实现","等","是","需要","前后","都","来","这款","接下","设计","你","共同","我们","可能","速度","前后左右","眼睛","位于","的","职责","相同","提供","，","具体","工厂","机器","上","整体","各不相同","通过","既然","更为","后勤"," ","做","腿","生成","看到","java","不是","移动","里","像头","自然","去","a","比喻","获取","”","从","独立","某些","一线","一起","放在","一台","后勤部","还有","当","中","也","让","找到","—","到底","还","参数","他们","却","它","物理","命名","时","人为","一个","文件","虽然","监控","外界","语言","配置","厂房","编译","在","身体","认识","轮子","python","和","进程","下来","结果"],"title":"通信模型","title_tokens":["通信","模型","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world","text":"ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。","text_tokens":["”","从","ros2","例程","循环","当然","。","实现","开始","中","是","需要","节点","来","字符串","到","world","功能","终端","我们","程序","打印","最为","一个","字符","的","，","“","先","不","就是","并"," ","了","复杂","编写","hello","编写程序","简单"],"title":"案例一：Hello World节点（面向过程）","title_tokens":[" ","案例","节点","一","（","：","hello","过程","world","）","面向"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_3","text":"大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["知其然","执行","骡子","”","再","ros2","知其所以然","这个","如何","然后","循环","大家","过程","。","可以","课程","实现","$","中","好","也","_","溜溜","是","看","节点","出来","来","字符串","node","world","终端","我们","先拉","运行","马","成功","打印","命令","字符","的","，","后","“","先","代码","通过","效果","编译","所以然","不要","所以","在"," ","helloworld","run","做到","着急","看到","learning","下","hello","分析"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_4","text":"这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ],","text_tokens":["ros2","*","这个","-","是否","setup","过程","#","/","import","关闭","入口","接口","时间","world","功能","=","程序","py","[","方式","库","ok","如下","helloworld",".","learning","python3","控制","guyuehome","while",",","none","如何","：","循环","来看","。","com","知道","def","_","初始","节点","正常","休眠","node","类","信息","作者","销毁","运行","]","后","“","选项","居","并","系统","示例","entry",":","!",")","hello","init","get","完成","\"","console","from","destroy","实现","scripts","是","需要","包","usr","main","我们","的","说明","，","coding","(","bin","'"," ","日志","输出","{","time","shutdown","编写","加入","下","？","0.5","rclpy","www","对象","”","古月","使用","打开","面向","让","sleep","发布","点","创建","logger","设置","呢","函数","初始化","文件","@","进行","代码","配置","编译","info","8","python","utf","env","args","主","points"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_5","text":"代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。","text_tokens":["这样","编码","未来","对于","总结","使用","：","纠结","编程","大家","或者","过程","就","。","可以","不用","实现","的话","中","面向","一点","重要","很","模块","初始","是","pyhton","节点","关闭","学习","一下","想要","接口","过","销毁","出现","功能","我们","创建","函数","会","一个","初始化","这里","方法","的","方式","虽然","流程","，","具体","如果","先","机器","机器人","难","代码","有","但是","并","这种","用到"," ","做","模块化","稍微","系统","复杂","做到","应该","理解","经常","更","c++","简单","发现"],"title":"创建节点流程","title_tokens":["流程","创建","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world_1","text":"所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。","text_tokens":["具备","这样","可移植","开发","推荐","对象","ros2","面向对象","使用","编程","就","大家","比如","。","可以","移植","面向","中","也","看上去","刚才","上去","我们","改成","会","可读","方式","的","虽然","一些","，","更好","代码","但是","可读性","可移植性","方便","更加","在","所以"," ","了","起来","复杂","调试","和","移植性","更","看上"],"title":"案例二：Hello World节点（面向对象）","title_tokens":[" ","对象","案例","二","节点","（","面向对象","：","hello","world","）","面向"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_6","text":"下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["”","ros2","：","循环","。","可以","$","中","_","节点","字符串","调整","一下","node","world","终端","打印","运行","成功","还是","字符","的","后","，","“","效果","在"," ","helloworld","run","看到","learning","下来","hello","class"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_7","text":"功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ],","text_tokens":["ros2","*","-","是否","setup","#","/","import","__","关闭","入口","接口","时间","world","功能","程序","=","py","[","方式","父类","库","发生","ok","如下","helloworld",".","learning","python3","控制","guyuehome","while",",","none","：","循环","com","。","知道","def","_","初始","节点","正常","休眠","node","类","信息","作者","销毁","运行","]","后","“","一样","选项","居","并","了","系统","示例","entry",":","!",")","hello","init","get","完成","\"","console","退出","from","destroy","实现","scripts","需要","包","一下","usr","main","我们","的","说明","，","具体","coding","(","bin","但是","'"," ","日志","输出","{","time","shutdown","编写","加入","0.5","rclpy","www","对象","”","面向对象","古月","使用","等待","打开","面向","让","sleep","发布","self","看","spin","helloworldnode","点","创建","logger","设置","时","初始化","一个","函数","文件","虽然","结构","@","变化","进行","代码","name","配置","编译","info","super","8","python","utf","这份","env","args","class","主","points"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_8","text":"所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。","text_tokens":["编码","完成","四个","疑惑","吧","编程","大家","。","还有","实现","中","初始","是","依然","节点","这","关闭","接口","到","world","销毁","功能","创建","打印","初始化","这里","一个","得","方式","的","总体","一些","心里","，","机器人","具体","而言","而已","机器","不过","只不过","不能","并","所以","做"," ","了","步骤","改变","总体而言","为止","不是","编码方式","hello","是不是","任务","只是"],"title":"创建节点流程","title_tokens":["流程","创建","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_9","text":"没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。","text_tokens":["接下来","从","图片","模拟","就","过程","。","实现","中","一张","找到","节点","为例","识别","来","接下","我们","一个","的","机器人","没错","，","实际","机器","先","网上","通过","视觉","苹果"," ","以","编写","下来","任务"],"title":"案例三：物体识别节点","title_tokens":["案例","节点","物体","：","识别","三"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_10","text":"在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 Attention 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。","text_tokens":["object","install","ros2","中间","这个","-","就","啦","#","$","imread","src","apple","绿点","/","表示","注意","=","py","可视化","把","库","如下","苹果","run","home",".","中心","learning","python3","窗口","可视","21","框会","image","：","jpg","。","sudo","_","出来","识别","node","运行","后","前","绿色",")","apt","即可","轮廓","然后","例程","被","可以","修改","需要","请","图像处理","dev","我们","为","处理","成功","hcx","的","attention","，","opencv","(","'"," ","看到","cv2","安装","中心点","图片","使用","将","中","—","路径","重新","会弹","勾勒","ws","一个","图像","实际","代码","编译","在","用到","tutorials","出","指令"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_11","text":"在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ],","text_tokens":["object","hsv","list","ros2","*","这个","+","-","模拟","destroyallwindows","setup","retr","过程","continue","inrange","#","numpy","所在","imread","xy","src","图像识别","apple","/","处理过程","import","关闭","入口","接口","img","90","出现","功能","shape","=","程序","py","[","左上角","w","计算","findcontours","点画","一些","库","cvtcolor","x","苹果","如下","helloworld","宽","home","此处",".","boundingrect","下限","learning","中心","1","python3","h","0","guyuehome","imshow",",","21","none","image","upper","更多","detect","如何","：","jpg","循环","np","com","。","知道","<","def","模型","_","contours","转换","初始","节点","左上","出来","识别","去除","node","类","作者","销毁","255","面积","像素","机器人","]","150","后","关于","红色","red","in","颜色","选项","居","太小","并","二值化","数值","for","了","系统","示例","及",":","重点","circle","entry","!","hierarchy",")","approx","2","init","as","get","范围","轮廓","drawcontours","完成","\"","例程","大家","关注","console","退出","from","得到","实现","destroy","scripts","chain","是","坐标","读取","需要","包","概念","来","mask","图像处理","if","usr","main","dev","我们","为","处理","hcx","的","说明","，","具体","机器","coding","opencv","(","bin","噪声","通过","效果","128","y","'"," ","{","cnt","shutdown","编写","加入","bgr2hsv","不是","cv2","www","rclpy","理过","waitkey","array","对象","从","color","图片","古月","使用","阈值","等待","lower","更多要","上限","将","180","中","让","上角","打开","spin","勾勒","5","ws","点","创建","logger","设置","bgr","函数","一个","初始化","文件","@","图像","检测","进行","代码","配置","编译","info","在","8","int","tutorials","python","utf","和","env","高","显示","args","class","主","points"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_12","text":"用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。","text_tokens":["没","接下来","太","摄像","类似","图片","或者","好像","。","用","读取","节点","还","识别","接下","我们","眼睛","的","机器人","物体","，","图像","机器","进行","合理","问题","动态","颜色","不","有","摄像头","其中","就让","苹果","应该","下来","像头","呀"],"title":"案例四：机器视觉识别节点","title_tokens":["四","案例","节点","：","识别","机器","视觉"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_13","text":"启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 注意 如果是在虚拟机中操作，需要进行以下设置： 把虚拟机设置为兼容USB3.1； 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。","text_tokens":["object","；","该","webcam","实时","摄像","ros2","兼容","：","连接","就","啦","。","#","可以","$","中","_","usb3.1","是","需要","节点","启动","识别","中将","以下","node","操作","驱动","注意","终端","设备","为","设置","运行","成功","一个","把","的","物体","，","后","如果","进行","红色","摄像头","在","如下"," ","run","可","learning","至","移动","虚拟机","像头","并且","虚拟"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_14","text":"相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ],","text_tokens":["object","hsv","list","webcam","ros2","*","+","-","setup","retr","continue","inrange","#","numpy","所在","xy","/","cap","import","之前","关闭","入口","接口","img","90","出现","功能","shape","程序","=","py","[","左上角","这里","w","计算","findcontours","点画","一些","库","cvtcolor","ok","x","摄像头","苹果","一帧","如下","helloworld","宽",".","boundingrect","中心","下限","learning","1","python3","h","0","guyuehome","while","imshow",",","none","相比","videocapture","image","upper","detect","：","np","com","。","知道","<","def","模型","_","contours","转换","初始","节点","左上","ret","出来","识别","去除","node","类","信息","作者","销毁","255","面积","像素","]","150","后","红色","red","in","颜色","选项","居","太小","并","二值化","数值","for","了","系统","示例","及",":","circle","entry","!","hierarchy",")","approx","2","init","as","get","范围","轮廓","drawcontours","摄像","完成","\"","console","from","得到","修改","destroy","scripts","chain","是","坐标","读取","需要","包","来","mask","图像处理","驱动","if","usr","main","为","处理","的","说明","，","coding","opencv","(","bin","噪声","相机","通过","128","效果","周期","y","'"," ","{","cnt","shutdown","编写","bgr2hsv","加入","像头","并且","cv2","rclpy","www","waitkey","50","array","对象","从","color","图片","使用","古月","阈值","lower","上限","将","180","中","让","上角","打开","勾勒","5","点","创建","logger","设置","bgr","函数","初始化","文件","true","@","变化","图像","检测","进行","代码","配置","read","编译","info","来源","8","int","python","最大","utf","和","env","高","显示","args","class","主","points"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_15","text":"节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息","text_tokens":["list","ros2","：","#","$","<","_","节点","node","操作","信息","常用","命令","的","name","info","如下"," ",">","查看","列表"],"title":"节点命令行操作","title_tokens":["操作","命令","节点","命令行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_16","text":"现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。","text_tokens":["这个","电脑","就","同理","框架","这","ros","常用","一节","会","把","机制","回到","b","有","摄像头","给","发送","还会","改变","控制","框架图","过来","孤立","连接","工作","熟悉","比如","。","节点","现在","想要","介绍","另外","运动","这些","得","机器人","后","一种","摇杆","问题","保持联系","并","细胞","了","系统","发现","摄像","大家","某种","实现","概念","我们","速度","要","最为","联系","的","没错","，","如果","机器"," ","看到","不是","下","像头","a","负责","多种","开始","很","将","中","岂","参数","之间","他们","一个","方法","收到","图像","配置","在","两个","应该","和","显示","保持","指令"],"title":"思考题","title_tokens":["思考","思考题","考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_17","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["docs","understanding","en","nodes","tutorials","/",".","ros2",":","org","-","humble","html","https","ros"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/","text":"话题 节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。 通信模型 以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。 发布/订阅模型 从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。 多对多通信 大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。 异步通信 话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。 消息接口 最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过.msg后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。 案例一：Hello World话题通信 了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 运行效果 启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。 发布者代码解析 我们来看下发布者的实现方法。 程序实现 learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口 订阅者代码解析 我们再来看下订阅者的实现方法。 程序实现 learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。 案例二：机器视觉识别 在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。 运行效果 这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。 发布者代码解析 learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], }, 订阅者代码解析 learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], }, 案例三：机器视觉识别优化 通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub 话题命令行操作 话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息 思考题 关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？ 参考链接 https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["hsv","组织","格式","install","*","-","提示","对","inrange","#","$","xy","重要","第一个","做成","一新","时候","/","任何","cap","__","publishernode","接口","注意","world","py","长宽","左上角","兴趣","不行","w","findcontours","流程","统一","哪里","其中","不能","原理","者","一帧","helloworld","接收","run","合适","宽",".","举","rgb","python3","guyuehome","列表","各样","可移植","exe","upper","并不知道","编程","数量","来看","可见","名称","出来","0.1","链接","作者","255","渲染","docs","二","得","物体","一种","似乎","红色","问题","不","居","值","在生活中","协议","系统","描述","单向","circle","10","是不是","更","as","满足","实时","被","某种","scripts","视频","修改","成","报社","chain","坐标","i","topics","都","中是","设计","if","usr","一句","个","要","的","没错","机器","上","接口定义","(","订阅","单位","过瘾","通过","效果","pub","视觉","已经","做","echo","编写","看到","加入","bgr2hsv","移植性","没有","waitkey","发布者","数据类型","对象","frame","color","古月","lower","内","开始","上限","180","中","hz","复用","spin","叫","参数","之间","来讲","比方","一定","它","%","en","呢","初始化","publishing","焕然","虽然","监控","图像","变化","进行","基本","语言","耦","才能","中文","info","两个","tutorials","python","区分","和","名字","args","下来","msgs","发送数据","sensor","保持","以上","list","receiving","集成","固定","同学","最后","千丝万缕","关系","就","率","continue","移植","因为","发出","为例","这","import","之前","但","入口","刚才","img","桥梁","每","90","功能","直接","程序","这里","本原","一些","只","humble","cvtcolor","命令行","发送","\\","learning","叫做","下限","0","硬件","同样","可视","一行",",","这样","videocapture","再","对于","总结","那","np","com","此时","与","第二","知道","std","符合","节点","接口协议","定时","操作","销毁","化成","画面","运行","队列","基于","关于","选项","想下","不过","并","for","数值","积木","话题","示例","entry","!","hierarchy",")","approx","二个","即可","apt","2","思考题","understanding","get","范围","drawcontours","类似","一","imagesubscriber","当然","退出","可以","destroy","实现","raw","讲","一步","读取","需要","来","解","一下","图像处理","驱动","sub","我们","可能","为","几个","（","topic","如果","传递数据","知识","相机","可移植性"," ","日志","基本原理","输出","cnt","东西","不然","听","很多","里","并且","a","千丝","查看","create","cv2","分析","是从","安装","”","独立","第二个","阈值","拍摄","还有","将","用","video","逻辑性","发布","subscribernode","self","逻辑","启动","以下","文章","名","平时","bgr","出去","还是","文件","收到","方法","name","publisher","控制指令","read","听说","随处","感器","super","s","这种","程序实现","env","根本","长度","string","换成",">","生活","没","执行","webcam","传输","ros2","这个","是否","啦","回调","好像","所在","了解","通用","作为","第一次","互相","间","一次","传感","写","ros","较强","终端","shape","接收数据","常用","[","可视化","无论","例子","命令","计算","方式","成为","每换","各种","之后","角度","x","排版","如下","苹果","boundingrect","中心","提高","万缕","控制","感兴趣","不太","另","思想","据传","image","杂志","想","案例","未来","说干就干","detect","3","循环","好","dds","_","初始","bridge","目标","分别","用于","左上","现在","已","自行","去除","拼接","面积","subscription","这些","么","需求","字符","定时器","]","后","“","更好","一样","优先级","适合","red","颜色","参考","转化成","二值化","了","想象","及","从而","hello","本身","init","能够","解析","接下来","传递","多","\"","例程","console","数据传输","得到","from","原本","对劲","接下","cvbridge","main","存在","你","感兴","成功","联系","，","coding","opencv","噪声","继续","周期","y","bw","{","不是","词","下","包含","？","0.5","更换","www","从","某些","等待","最","打开","肯定","上角","公众","异步","看","后缀","第一","还","转换成","字符串","又","5","timer","点","logger","指","一个","对应","true","检测","html","chatter","随处可见","在","cam","int","只要","utf","org","应该","类型","class","主","优化","points","三","采集","object","精简","方向","+","每个","setup","cv","过程","稍后","retr","考题","numpy","感觉","优先","type","关闭","https","到","编程语言","块","=","号","会","、","把","不知","频率","}","父类","点画","库","打","b","有","给","英文","小编","1","自己","h","！","呀","imshow","none","一般","该","开发","周期性","太","如何","：","进一步","比如","。","无法","<","def","模型","contours","sudo","转换","什么","ret","识别","组成","想要","node","类","信息","设备","用户","另外","运动","usb","通信模型","像素","机器人","像","150","消息","摇杆","数据结构","in","就是","联系方式","一篇","太小","模块化","以","填充","imagepublisher","复杂",":","publish","理解","带宽","唯一","to","各种各样","轮廓","完成","通信","某","大家","一份","必然","魔性","的话","模块","换","谁","是","放入","包","概念","思考","mask","msg","多个","几乎","之为","heard","处理","什么样","说明","data","标准","所有","bin","等等","既然","要求","但是","128","callback","'","做到","微信","shutdown","bgr8","自然","）","rclpy","焕然一新","定义","获取","array","不变","使用","保证","建议","传感器","也","让","无关","挺","人","阅读","他会","秒","就要","数据","勾勒","留","称之为","仔细","创建","设置","说","listener","函数","报纸","结构","@","先","代码","讲解","特性","配置","编译","imgmsg","进入","8","软件","所谓","转化","显示","高","完全","指令"],"title":"话题","title_tokens":["话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_1","text":"节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。","text_tokens":["各样","各种各样","独立","传递","千丝万缕","最","。","实现","重要","是","节点","之间","但","间","数据","桥梁","功能","它","这些","会","联系","的","机器人","方式","，","一种","各种","机器","传递数据","其中","有","就是","联系方式","并"," ","了","话题","不是","万缕","千丝"],"title":"话题","title_tokens":["话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_2","text":"以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。","text_tokens":["传输","这个","方向","关系","就","作为","为例","这","到","桥梁","ros","功能","可视化","方式","b","有","给","硬件","可视","这样","据传","想","。","此时","节点","信息","设备","用户","渲染","机器人","以","了","话题","是不是","实时","传递","某","大家","数据传输","某种","得到","可以","视频","必然","实现","是","一下","驱动","存在","我们","之为","要","的","没错","，","机器","上","相机"," ","做","不是","a","？","查看","获取","从","拍摄","将","中","之间","数据","称之为","它","一个","监控","图像","才能","在","两个","显示"],"title":"通信模型","title_tokens":["通信","模型","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_3","text":"从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。","text_tokens":["组织","固定","格式","传输","这个","就","对","/","到","每","接收数据","号","会","兴趣","把","、","成为","打","之后","角度","有","者","排版","接收","发送","叫做","小编","感兴趣","这样","据传","杂志","比如","来看","。","好","可见","dds","无法","模型","节点","名称","什么","另外","机器人","基于","“","居","就是","在生活中","了","话题","本身","类似","大家","数据传输","可以","实现","的话","成","是","需要","都","感兴","之为","的","，","如果","机器","订阅","知识","等等","要求"," ","微信","自然","没有","？","是从","发布者","数据类型","对象","”","从","使用","古月","也","发布","公众","看","叫","他会","比方","数据","文章","称之为","它","平时","呢","出去","一个","收到","报纸","特性","随处可见","随处","和","类型","应该","名字","发送数据","生活"],"title":"发布/订阅模型","title_tokens":["订阅","/","发布","模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_4","text":"大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。","text_tokens":["这个","每个","对","因为","优先","注意","ros","号","、","有","者","发送","1","控制","该","杂志","再","3","数量","。","知道","模型","节点","通信模型","这些","画面","机器人","似乎","一样","摇杆","优先级","想下","不","并","想象","了","话题","是不是","2","唯一","多","通信","大家","被","可以","魔性","谁","是","一下","多个","存在","我们","可能","个","之为","要","的","没错","，","如果","机器","订阅"," ","东西","不然","听","不是","很多","里","发布者","建议","也","发布","公众","挺","人","称之为","仔细","一个","还是","报纸","控制指令","区分","和","指令"],"title":"多对多通信","title_tokens":["多","通信","对"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_5","text":"话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。","text_tokens":["传输","同学","这个","就","时候","发出","这","第一次","传感","一次","较强","不知","号","一些","有","者","合适","叫做","控制","太","并不知道","那","比如","。","知道","用于","什么","运动","后","适合","不","居","就是","一篇","了","话题","更","通信","类似","某","一份","可以","修改","报社","是","你","可能","的","，","如果","订阅","等等","周期"," ","词","？","发布者","某些","古月","还有","用","传感器","也","让","逻辑性","发布","公众","异步","逻辑","第一","阅读","参数","数据","文章","指","一个","收到","报纸","特性","听说","感器","只要","所谓","根本","指令"],"title":"异步通信","title_tokens":["异步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_6","text":"最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过.msg后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。","text_tokens":["格式","传输","最后","就","每个","接口","编程语言","块","ros","长宽","会","这里","、","方式","各种","统一","有","不能","者",".","rgb","英文","各样","这样","据传","编程","比如","。","与","节点","组成","自行","拼接","得","像素","像","机器人","一种","消息","一样","数据结构","值","积木","了","系统","描述","话题","复杂","理解","各种各样","通信","数据传输","可以","成","是","概念","都","msg","我们","之为","的","，","标准","接口定义","机器","订阅","等等","既然","通过"," ","包含","发布者","定义","中","也","无关","发布","后缀","数据","称之为","说","一个","文件","对应","结构","图像","进行","语言","中文","在","和"],"title":"消息接口","title_tokens":["消息","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#hello-world","text":"了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。","text_tokens":["发布者","定义","接下来","从","”","再","这个","例程","啦","。","开始","了解","中","发布","是","来","就要","接下","字符串","到","world","ros","我们","创建","还是","一个","字符","的","本原","，","“","消息","标准","基本","chatter","代码","订阅","原理","周期","者"," ","了","基本原理","发送","接收","话题","编写","类型","从而","下来","hello","string"],"title":"案例一：Hello World话题通信","title_tokens":[" ","案例","话题","通信","一","：","hello","world"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_7","text":"启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。","text_tokens":["发布者","该","”","ros2","：","第二个","循环","。","可以","第二","$","也","第一个","_","发布","节点","启动","第一","同样","字符串","几乎","数据","sub","world","终端","运行","频率","一个","字符","收到","的","topic","，","“","消息","订阅","pub","者"," ","helloworld","以","run","话题","看到","learning","hello","二个"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_8","text":"我们来看下发布者的实现方法。","text_tokens":["我们","发布者","发布","方法","的","下","来看","。","实现"],"title":"发布者代码解析","title_tokens":["代码","发布者","解析","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_9","text":"learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], },","text_tokens":["执行","ros2","*","-","提示","setup","回调","#","/","import","__","publishernode","关闭","入口","接口","world","功能","=","程序","py","、","[","}","父类","库","如下","helloworld",".","learning","python3","guyuehome",",","none","：","循环","com","知道","def","_","std","初始","节点","定时","node","类","信息","作者","销毁","字符","定时器","队列","后","“","消息","]","选项","居","并","填充","系统","话题","示例",":","entry","publish","!","10",")","hello","init","get","完成","\"","console","退出","from","destroy","scripts","需要","包","msg","usr","main","为","（","的","说明","topic","，","data","coding","单位","(","bin","pub","callback","周期","'","已经"," ","日志","输出","{","shutdown","编写","加入","create","）","rclpy","www","0.5","发布者","对象","”","古月","等待","打开","中","让","发布","self","spin","秒","字符串","数据","timer","点","创建","%","名","logger","设置","函数","初始化","一个","publishing","文件","@","chatter","进行","name","publisher","代码","配置","编译","info","super","s","8","python","utf","类型","env","args","长度","msgs","string","class","主","points"],"title":"程序实现","title_tokens":["程序","实现","程序实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_10","text":"对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口","text_tokens":["以上","发布者","对象","：","编程","对","实现","发布","初始","节点","关闭","想要","接口","销毁","我们","创建","程序","初始化","一个","流程","，","如果","消息","进行","并","如下"," ","填充","话题","分析"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_11","text":"我们再来看下订阅者的实现方法。","text_tokens":["我们","者","再","方法","的","下","订阅","。","实现","来看"],"title":"订阅者代码解析","title_tokens":["订阅","者","解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_12","text":"learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], },","text_tokens":["执行","ros2","*","-","提示","setup","对","回调","#","/","import","__","关闭","入口","接口","world","功能","=","程序","py","、","[","}","父类","库","者","如下","helloworld",".","\\","learning","python3","guyuehome",",","none","：","循环","com","知道","def","_","std","初始","节点","node","类","信息","作者","销毁","subscription","队列","后","“","消息","]","选项","居","并","系统","话题","示例",":","entry","!","10",")","hello","init","get","完成","\"","console","退出","from","destroy","scripts","需要","i","包","msg","sub","usr","main","heard","处理","的","（","说明","topic","标准","，","data","coding","(","订阅","bin","pub","callback","'"," ","日志","输出","{","shutdown","编写","加入","create","）","rclpy","www","定义","对象","”","古月","等待","打开","让","subscribernode","self","spin","数据","点","创建","%","名","logger","设置","listener","函数","初始化","一个","文件","收到","@","chatter","进行","name","代码","配置","编译","info","super","s","8","python","utf","类型","env","args","长度","msgs","string","class","主","points"],"title":"程序实现","title_tokens":["程序","实现","程序实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_13","text":"对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。","text_tokens":["以上","对象","接下来","通信","：","编程","例程","大家","啦","对","回调","。","实现","好","初始","节点","还","关闭","之前","一定","接下","想要","接口","数据","world","销毁","我们","创建","程序","处理","函数","初始化","一个","的","流程","，","基于","如果","机器","进行","订阅","过瘾","不","继续","视觉","者","并","如下"," ","话题","hello","下来","下","优化","分析"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_14","text":"在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。","text_tokens":["没","开发","传输","对于","这个","过程","对","。","实现","模块","将","中","做成","是","节点","概念","来讲","识别","间","数据","驱动","功能","我们","程序","一个","方式","的","物体","虽然","机器人","，","更好","联系","机器","图像","红色","问题","讲解","相机","通过","但是","没有","视觉","就是","在","并","周期","模块化","了","两个","做到","话题","和","并且","即可"],"title":"案例二：机器视觉识别","title_tokens":["案例","二","：","识别","机器","视觉"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_15","text":"这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。","text_tokens":["webcam","ros2","这个","就","啦","移植","$","第一个","ros","功能","终端","只","run","learning","完全","另","思想","可移植","未来","说干就干","如何","来看","。","第二","好","_","节点","分别","识别","运行","物体","更好","消息","红色","并","模块化","了","话题","二个","即可","范围","可以","修改","模块","实现","是","需要","放入","中是","设计","驱动","sub","我们","要","的","topic","标准","，","如果","订阅","相机","可移植性","效果","视觉","pub"," ","看到","移植性","下","？","更换","定义","不变","第二个","保证","内","将","发布","启动","第一","以下","一个","图像","先","在","这种","两个","软件","保持"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_16","text":"learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], },","text_tokens":["采集","webcam","执行","ros2","*","-","提示","cv","setup","稍后","回调","#","/","cap","import","__","关闭","入口","接口","ros","功能","=","程序","py","、","号","[","}","父类","库","如下","一帧","helloworld",".","learning","python3","0","guyuehome",",","none","image","videocapture","：","循环","com","与","知道","def","_","初始","bridge","转换","节点","用于","ret","定时","0.1","node","类","信息","作者","销毁","设备","定时器","队列","后","]","消息","选项","居","并","imagepublisher","系统","话题","示例",":","entry","publish","!","10",")","init","to","get","完成","\"","console","退出","from","destroy","视频","scripts","raw","读取","需要","包","msg","cvbridge","图像处理","驱动","usr","if","main","sub","为","处理","成功","（","的","说明","topic","，","如果","coding","opencv","单位","(","bin","相机","pub","callback","周期","'","已经"," ","日志","输出","{","bgr8","shutdown","编写","加入","cv2","create","rclpy","www","）","发布者","对象","frame","古月","等待","打开","将","video","让","发布","self","spin","秒","转换成","timer","点","创建","名","logger","设置","函数","初始化","一个","publishing","文件","true","@","图像","进行","name","publisher","代码","配置","read","编译","info","super","imgmsg","8","python","utf","类型","env","args","长度","msgs","sensor","换成","class","主","points"],"title":"发布者代码解析","title_tokens":["代码","发布者","解析","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_17","text":"learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], },","text_tokens":["hsv","object","list","webcam","receiving","ros2","*","+","-","提示","cv","retr","continue","setup","回调","inrange","#","numpy","所在","xy","/","import","__","互相","关闭","入口","接口","img","90","ros","功能","shape","=","程序","py","[","、","左上角","w","计算","findcontours","父类","点画","一些","}","库","cvtcolor","x","者","苹果","如下","helloworld","宽",".","boundingrect","中心","下限","learning","1","python3","h","0","guyuehome","imshow",",","none","image","upper","detect","：","循环","np","com","与","知道","<","def","模型","_","初始","bridge","转换","contours","节点","用于","左上","出来","已","去除","node","类","信息","作者","销毁","255","面积","化成","subscription","像素","]","队列","150","消息","后","红色","red","in","颜色","选项","居","太小","转化成","for","二值化","数值","并","系统","话题","示例",":","及","circle","entry","!","10","hierarchy",")","approx","init","2","as","to","get","范围","轮廓","drawcontours","完成","\"","imagesubscriber","console","退出","from","得到","destroy","scripts","raw","chain","坐标","需要","包","mask","msg","cvbridge","图像处理","sub","usr","if","main","为","处理","的","（","说明","topic","，","data","coding","opencv","(","订阅","bin","噪声","效果","pub","128","callback","y","'"," ","日志","输出","{","cnt","bgr8","shutdown","编写","bgr2hsv","加入","cv2","create","rclpy","www","）","waitkey","array","对象","从","frame","color","古月","使用","阈值","等待","lower","上限","将","180","中","video","上角","让","打开","self","spin","勾勒","5","点","创建","名","logger","设置","listener","函数","初始化","一个","bgr","文件","@","图像","检测","进行","name","代码","配置","编译","info","super","进入","imgmsg","8","int","python","utf","转化","和","类型","env","高","显示","args","长度","msgs","sensor","class","主","points"],"title":"订阅者代码解析","title_tokens":["订阅","者","解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_18","text":"通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub","text_tokens":["webcam","集成","精简","install","ros2","-","就","率","对","好像","$","通用","感觉","一新","任何","这","刚才","接口","写","到","ros","功能","直接","常用","不行","无论","每换","只","humble","哪里","有","run","learning","提高","自己","！","呀","一行","不太","一般","这样","exe","进一步","。","好","sudo","_","目标","符合","节点","现在","接口协议","什么","识别","node","usb","么","得","似乎","不","不过","协议","了","话题","是不是","apt","例程","大家","当然","可以","得到","原本","换","一步","是","需要","对劲","都","解","驱动","sub","你","我们","可能","一句","什么样","的","topic","，","标准","通过","相机","视觉"," ","做","不是","？","焕然一新","安装","使用","还有","用","中","让","也","发布","复用","又","一个","焕然","图像","变化","代码","耦","cam","只要","软件","换成","指令"],"title":"案例三：机器视觉识别优化","title_tokens":["案例","：","识别","机器","优化","三","视觉"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_19","text":"话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息","text_tokens":["list","ros2","传输","：","#","$","<","发布","_","hz","type","msg","数据","操作","信息","常用","频率","命令","的","topic","data","消息","name","pub","info","如下"," ","bw","echo","话题","带宽",">","查看","列表"],"title":"话题命令行操作","title_tokens":["操作","命令","话题","命令行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_20","text":"关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？","text_tokens":["满足","周期性","据传","传递","完成","通信","传输","对于","：","是否","就","大家","数据传输","考题","实现","肯定","讲","无法","是","思考","来讲","留","到","数据","我们","例子","这里","一个","需求","几个","方法","的","机器人","所有","呢","，","关于","机器","适合","特性","原理","周期","给","这种","系统","话题","单向","复杂","举","和","？","思考题","能够"],"title":"思考题","title_tokens":["思考","思考题","考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_21","text":"https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["docs","understanding","en","tutorials","/",".","ros2",":","org","topics","-","humble","html","https","ros"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/","text":"服务 话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。 通信模型 在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。 客户端/服务器模型 从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。 同步通信 这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。 一对多通信 比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。 服务接口 和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。 案例一：加法求解器 大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 运行效果 我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3 客户端代码解析 我们来看下客户端的实现方法。 程序实现 learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口 服务端代码解析 至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。 程序实现 learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_server = learning_service.service_adder_server:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口 案例二：机器视觉识别 好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。 运行效果 此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client 客户端代码解析 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], }, 服务端代码解析 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], }, 服务命令行操作 服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求 思考题 话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["hsv","；","客户端","*","而是","-","提示","根据","对","inrange","#","$","xy","绝大","第一个","自定义","宕机","时候","/","查询","waiting","__","接口","时间","本","打印","py","至于","response","左上角","w","findcontours","访问","流程","一直","其中","原理","者","1.0","接收","run","宽",".","状态","once","python3","位置","guyuehome","while","列表","圈圈","exe","upper","并不知道","向","编程","来看","d","处","变成","出来","封装","链接","作者","255","docs","加法器","某个","发","二","物体","一种","同步","服务","红色","跟随","比比皆是","不","居","在生活中","服务端","随时","系统","单向","circle","应答","10","相对","更","done","as","满足","大部分","网络","拿到","scripts","成","chain","sys","坐标","都","我","设计","if","usr","回想","要","里程计","的","机器","上","(","订阅","效果","通过","argv","视觉","已经","编写","看到","加入","bgr2hsv","没有","跟踪","接口类","waitkey","发布者","数据类型","对象","frame","color","古月","lower","addtwoints","async","开始","当","180","中","上限","spin","adderclient","岂","之间","%","大部","en","初始化","of","two","务器","send","图像","有点","进行","基本","target","准确","info","传入","两个","tutorials","python","和","两种","args","下来","interface","msgs","sensor","invalid","简单","以上","转圈","附近","界面","list","集成","receiving","简称","不同","就","continue","课程","图像识别","认为","import","之前","但","入口","刚才","img","90","每","功能","程序","反应","一些","humble","cvtcolor","合理","命令行","准备","发送","那有","\\","learning","叫做","下限","发给","e","0","同样","硬件",",","这样","总结","np","com","此时","第二","与","知道","雷达","client","节点","操作","销毁","化成","运行","服务器","队列","server","选项","不过","更加","并","for","数值","话题","示例","entry","!","hierarchy",")","n","approx","二个","2","思考题","understanding","get","范围","drawcontours","类似","一","imagesubscriber","future","exception","退出","数据通信","可以","destroy","实现","raw","讲","需要","按照","图像处理","驱动","sub","我们","可能","为","（","提供","浏览","如果","传递数据","相机","available"," ","日志","输出","getobjectposition","cnt","上层","很多","并且","a","查看","create","cv2","分析","”","第二个","阈值","后者","还有","很","将","video","有所","发布","self","启动","call","名","时","出去","还是","文件","bgr","收到","方法","sec","ints","result","场景","name","service","command","控制指令","这种","super","感器","程序实现","env","经常","长度",">","生活","执行","传输","ros2","这个","电脑","是否","srv","啦","回调","好像","所在","了解","网页","通用","互相","传感","一次","ros","终端","shape","常用","[","命令","计算","方式","成为","except","各种","之后","x","苹果","如下","boundingrect","中心","控制","failed","image","案例","detect","again","3","循环","好","return","_","目标","初始","bridge","分别","现在","用于","左上","已","去除","面积","adder","subscription","这些","需求","]","后","“","一样","red","适合","颜色","参考","objecty","转化成","假设","所以","二值化","了","及","init","解析","不好","接下来","传递","多","数据通","\"","加法","例程","console","得到","from","接下","cvbridge","main","存在","你","incoming","一对","成功","最为","sum","法器","，","coding","opencv","噪声","针对","继续","周期","问","y","{","打印输出","不是","下","答","www","从","前者","某些","绝大部分","越快","并不需要","等待","打开","上角","异步","看","提到","—","第一","自定","学习","5","点","logger","上述","反馈","一个","true","检测","html","三个","r","浏览器","在","cam","int","utf","org","应该","类型","add","class","结果","wait","points","主","object","展现","+","当前","setup","cv","过程","retr","考题","numpy","域名","求和","type","比比","关闭","https","到","出现","objectclient","=","频率","会","转圈圈","不知","、","}","繁杂","父类","点画","库","机制","ok","b","有","objectx","给","器","半天","not","1","h","判断","imshow","一般","相比","request","none","break","越快越好","周期性","开发","软硬","或者","：","比如","。","形式","无法","<","def","模型","contours","else","timeout","转换","同步性","正常","什么","里程","识别","想要","node","类","信息","介绍","另外","运动","usb","try","通信模型","官方","像素","机器人","150","消息","请求","in","就是","太小","核心",":","服务器端","唯一","to","position","轮廓","完成","应用","通信","服务器发送","然后","大家","等","是","放到","包","思考","mask","msg","多个","尽快","通信接口","页面","之为","处理","越好","软硬件","说明","data","标准","具体","一问一答","bin","等等","网站","要求","但是","常见","callback","接口类型","'","128","部分","返回","shutdown","bgr8","）","rclpy","cs","adderserver","定义","50","array","获取","加数","一起","使用","这么","传感器","也","客户","希望","最新","让","services","人","...","就要","求解","数据","勾勒","称之为","创建","设置","listener","函数","@","代码","配置","编译","有所不同","用到","进入","8","imgmsg","转化","高","显示","后续","完全","指令"],"title":"服务","title_tokens":["服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_1","text":"话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。","text_tokens":["发布者","通信","传输","类似","一起","使用","是否","。","可以","实现","将","知道","讲","无法","发布","异步","节点","—","之间","学习","我","多个","数据","本","ros","你","另外","我们","常用","收到","的","方法","，","机制","消息","一种","同步","服务","订阅","效果","准确","者","问","这种"," ","话题","单向","答"],"title":"服务","title_tokens":["服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_2","text":"在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。","text_tokens":["附近","传输","不同","这个","而是","对","好像","课程","图像识别","时候","查询","之前","到","ros","频率","成为","机制","一直","其中","发送","发给","位置","这样","或者","比如","。","此时","形式","模型","目标","节点","变成","识别","信息","另外","运动","通信模型","发","物体","机器人","一样","请求","红色","跟随","服务","并","了","话题","单向","应答","更","应用","通信","然后","可以","得到","实现","是","需要","按照","我","驱动","尽快","你","我们","的","，","机器","订阅","相机","通过","继续","周期","问"," ","上层","答","使用","这么","并不需要","中","有所","希望","最新","发布","数据","反馈","一个","图像","service","有所不同","在","这种","和","高"],"title":"通信模型","title_tokens":["通信","模型","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_3","text":"从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。","text_tokens":["展现","从","简称","客户端","某些","通信","向","电脑","或者","服务器发送","就","比如","来看","。","形式","此时","实现","很","也","客户","网页","域名","模型","需要","/","时候","我","数据","操作","信息","页面","你","我们","为","处理","某个","会","反馈","收到","的","务器","服务器","，","机制","具体","上","浏览","请求","服务","之后","进行","针对","各种","通过","网站","常见","在生活中","浏览器","问","在","这种"," ","并","就是","发送","返回","叫做","应答","服务器端","经常","答","生活","cs"],"title":"客户端/服务器模型","title_tokens":["客户","模型","/","客户端","服务器","务器","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_4","text":"这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。","text_tokens":["一般","转圈","不好","相比","圈圈","越快越好","通信","客户端","这个","或者","越快","过程","网络","。","可以","中","也","客户","是","宕机","到","信息","你","称之为","我们","可能","之为","转圈圈","越好","反应","服务器","务器","的","，","浏览","同步","服务","一直","通过","要求","浏览器","假设","所以","在","了","接收","半天","话题","那有","状态","应答","服务器端","没有","判断"],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_5","text":"比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。","text_tokens":["界面","客户端","通信","这个","古月","大家","比如","。","可以","中","客户","模型","是","人","都","但","多个","每","存在","通信模型","一个","服务器","务器","的","访问","，","一样","服务","网站","但是","居","不","并","所以","看到","完全","服务器端","没有","同样","唯一"],"title":"一对多通信","title_tokens":["多","通信","一对"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_6","text":"和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。","text_tokens":["定义","传递","通信","类似","使用","srv","大家","比如","。","还有","中","也","是","坐标","变成","msg","数据","ros","介绍","我们","要","这些","会","反馈","还是","一个","命令","文件","的","方法","，","标准","消息","传递数据","请求","服务","一样","在","给","核心"," ","部分","了","两个","苹果","话题",".","和","位置","后续"],"title":"服务接口","title_tokens":["接口","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_7","text":"大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。","text_tokens":["客户端","这个","就","啦","对","了解","求和","ros","功能","计算","之后","有","给","器","发送","。","_","节点","现在","封装","简单","想要","官方","服务器","后","“","请求","服务","并","了","应答","相对","服务器端","接下来","通信","加法","例程","大家","可以","得到","实现","成","是","需要","接下","我们","的","提供","，","针对","通过"," ","编写","加数","从","”","开始","当","将","也","客户","就要","求解","数据","时","出去","还是","一个","反馈","two","收到","务器","ints","基本","进行","代码","两个","应该","下来","add","结果"],"title":"案例一：加法求解器","title_tokens":["器","案例","一","加法","：","求解"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_8","text":"我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3","text_tokens":["加数","客户端","ros2","一起","这个","第二个","3","例程","等待","。","第二","实现","$","客户","求和","第一个","_","是","看","节点","启动","第一","client","数据","操作","终端","功能","我们","adder","运行","一个","的","提供","，","请求","服务","代码","server","service","原理","并","服务端","如下"," ","传入","两个","发送","run","learning","下","并且","二个","2","结果"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_9","text":"我们来看下客户端的实现方法。","text_tokens":["我们","客户","客户端","方法","的","下","来看","。","实现"],"title":"客户端代码解析","title_tokens":["代码","客户","解析","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_10","text":"learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], },","text_tokens":["执行","ros2","*","客户端","+","-","是否","srv","setup","#","自定义","/","waiting","import","__","关闭","入口","接口","一次","功能","=","打印","py","[","response","程序","计算","方式","父类","}","except","库","ok","b","1.0","如下","接收","发送",".","not","learning","once","1","python3","e","failed","guyuehome","while",",","none","request","break","again","：","循环","add","com","d","知道","def","_","初始","timeout","else","client","节点","正常","node","类","信息","作者","销毁","加法器","adder","try","运行","服务器","]","后","请求","服务","选项","居","for","并","系统","示例","entry",":","!","服务器端",")","done","init","2","as","get","完成","\"","加法","console","future","exception","wait","from","destroy","scripts","sys","需要","包","if","usr","main","处理","成功","sum","的","法器","说明","（","，","文件","coding","(","bin","argv","available","接口类型","'"," ","输出","{","打印输出","shutdown","编写","加入","a","create","）","rclpy","www","接口类","定义","对象","加数","古月","等待","addtwoints","async","打开","将","让","客户","self","异步","spin","启动","adderclient","...","自定","数据","call","点","创建","%","名","logger","设置","函数","初始化","一个","反馈","of","two","收到","sec","@","务器","ints","send","result","进行","name","代码","service","配置","r","编译","info","super","8","两个","int","python","utf","类型","env","args","interface","class","points"],"title":"程序实现","title_tokens":["程序","实现","程序实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_11","text":"对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口","text_tokens":["以上","对象","客户端","：","编程","等待","对","实现","客户","初始","节点","关闭","想要","接口","数据","销毁","我们","创建","程序","初始化","一个","服务器","务器","流程","，","如果","进行","请求","服务","并","如下"," ","发送","应答","服务器端","分析"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_12","text":"至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。","text_tokens":["通信","类似","并不知道","回调","。","实现","知道","中","也","什么","数据","时间","出现","至于","不知","函数","服务器","务器","的","，","机制","有点","请求","服务","订阅","者","用到","了","话题","服务器端"],"title":"服务端代码解析","title_tokens":["代码","解析","服务端","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_13","text":"learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_server = learning_service.service_adder_server:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], },","text_tokens":["执行","ros2","*","+","-","提示","srv","setup","对","回调","#","求和","自定义","/","import","__","关闭","入口","接口","功能","=","程序","py","、","response","[","计算","}","父类","库","b","如下",".","\\","learning","python3","guyuehome",",","none","request","：","循环","add","com","d","知道","def","return","_","初始","节点","node","类","信息","作者","销毁","加法器","adder","服务器","]","后","server","服务","请求","选项","居","并","系统","示例","entry",":","!","应答",")","n","init","get","完成","\"","加法","console","退出","from","destroy","scripts","需要","放到","包","usr","main","incoming","处理","sum","的","提供","说明","法器","（","，","coding","(","bin","callback","接口类型","'","已经"," ","日志","输出","{","shutdown","编写","加入","a","create","）","rclpy","www","adderserver","定义","接口类","对象","古月","等待","addtwoints","打开","将","中","让","self","spin","自定","数据","点","创建","%","名","logger","设置","函数","初始化","反馈","文件","two","收到","务器","@","ints","进行","name","代码","service","配置","编译","info","super","8","python","utf","类型","env","args","interface","class","主","结果","points"],"title":"程序实现","title_tokens":["程序","实现","程序实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_14","text":"对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口","text_tokens":["以上","对象","客户端","向","：","编程","对","回调","实现","客户","处","初始","节点","关闭","想要","接口","销毁","我们","创建","程序","函数","初始化","一个","反馈","服务器","务器","流程","，","如果","进行","服务","通过","并","服务端","如下"," ","应答","服务器端","结果","分析"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_15","text":"好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。","text_tokens":["通信","加法","啦","。","实现","当","知道","好","目标","需要","时候","提到","岂","识别","求解","刚才","我们","回想","的","物体","流程","，","机制","服务","合理","通过","视觉","更加","已经","了","器","不是","下","位置"],"title":"案例二：机器视觉识别","title_tokens":["案例","二","：","识别","机器","视觉"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_16","text":"此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client","text_tokens":["object","；","集成","对象","exe","客户端","ros2","：","当前","然后","就","根据","拿到","。","此时","可以","$","当","客户","发布","_","目标","是","需要","client","节点","认为","启动","分别","识别","一次","数据","驱动","node","出现","终端","运动","我们","usb","上述","运行","会","时","一个","服务器","务器","提供","机器人","，","图像","的","机器","请求","服务","订阅","三个","service","server","相机","有","视觉","cam","准备"," ","了","随时","发送","run","learning","服务器端","并且","位置","跟踪"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_17","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], },","text_tokens":["object","ros2","*","-","srv","setup","#","自定义","/","waiting","import","__","关闭","入口","接口","功能","objectclient","=","程序","py","[","response","}","父类","except","库","ok","x","1.0","如下",".","not","\\","learning","once","python3","e","位置","failed","while","guyuehome",",","none","request","break","again","：","com","d","知道","def","_","目标","初始","timeout","client","节点","else","识别","node","类","作者","销毁","try","adder","]","后","请求","服务","选项","server","居","for","并","系统","示例","entry",":","!","应答",")","done","n","init","as","position","get","完成","\"","console","future","exception","wait","from","destroy","scripts","需要","包","if","usr","main","的","说明","，","coding","(","bin","available","y","'"," ","{","getobjectposition","shutdown","编写","加入","create","rclpy","www","定义","对象","古月","等待","async","打开","让","self","spin","...","自定","call","点","创建","%","logger","设置","初始化","of","文件","sec","@","send","true","result","进行","name","代码","service","配置","target","r","编译","info","super","8","python","utf","env","args","interface","class","points"],"title":"客户端代码解析","title_tokens":["代码","客户","解析","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_18","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], },","text_tokens":["object","hsv","list","receiving","执行","ros2","*","+","-","提示","srv","cv","retr","continue","setup","对","回调","inrange","#","numpy","所在","xy","自定义","/","import","__","互相","关闭","入口","接口","img","90","ros","功能","shape","=","程序","py","[","、","左上角","response","w","计算","findcontours","父类","点画","一些","}","库","cvtcolor","x","者","objectx","苹果","如下","宽",".","boundingrect","中心","下限","learning","\\","1","python3","h","0","guyuehome","imshow",",","none","request","image","upper","detect","：","循环","np","com","与","d","知道","<","def","模型","_","目标","bridge","转换","初始","节点","用于","contours","左上","else","出来","invalid","识别","client","已","去除","node","类","信息","作者","销毁","255","面积","化成","adder","subscription","像素","服务器","物体","]","队列","150","消息","后","server","服务","red","红色","颜色","in","请求","居","objecty","太小","转化成","选项","for","二值化","数值","并","系统","示例","话题",":","及","circle","entry","!","10","hierarchy",")","n","approx","init","2","as","to","position","get","范围","轮廓","drawcontours","完成","\"","imagesubscriber","console","退出","from","得到","return","destroy","raw","scripts","chain","坐标","需要","包","mask","msg","cvbridge","图像处理","sub","usr","if","main","为","处理","的","提供","说明","（","，","data","coding","opencv","(","订阅","bin","噪声","效果","128","callback","接口类型","'","y","已经"," ","日志","输出","{","getobjectposition","cnt","bgr8","shutdown","编写","bgr2hsv","加入","cv2","create","rclpy","www","）","定义","接口类","waitkey","array","50","对象","从","frame","color","古月","使用","阈值","等待","lower","上限","将","180","中","video","上角","让","打开","self","spin","自定","勾勒","5","数据","点","创建","%","名","logger","设置","listener","函数","初始化","一个","bgr","反馈","收到","文件","务器","@","true","图像","检测","进行","name","代码","service","command","配置","target","编译","info","super","进入","imgmsg","8","int","python","utf","转化","和","类型","env","高","显示","args","interface","msgs","sensor","长度","class","主","points"],"title":"服务端代码解析","title_tokens":["代码","解析","服务端","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_19","text":"服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求","text_tokens":["list","数据类型","ros2","：","#","$","<","_","type","数据","操作","call","常用","命令","的","data","请求","服务","name","service","如下"," ","发送","类型",">","查看","列表"],"title":"服务命令行操作","title_tokens":["操作","命令","命令行","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_20","text":"话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。","text_tokens":["传输","这个","过程","绝大","通用","自定义","时候","比比","传感","接口","到","ros","常用","、","繁杂","控制","硬件","位置","软硬","周期性","开发","比如","。","无法","雷达","目标","同步性","里程","识别","这些","需求","机器人","同步","服务","适合","比比皆是","不过","了","话题","单向","更","满足","数据通","大部分","应用","通信","类似","数据通信","等","是","都","设计","通信接口","我们","最为","软硬件","里程计","的","，","标准","一问一答","机器","针对","等等","要求","视觉","周期"," ","部分","很多","定义","数据类型","获取","前者","绝大部分","后者","中","传感器","也","自定","就要","数据","大部","方法","图像","场景","控制指令","在","感器","和","两种","高","类型","指令"],"title":"思考题","title_tokens":["思考","思考题","考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_21","text":"https://docs.ros.org/en/ humble /Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["docs","understanding","en"," ","services","tutorials","/",".","ros2",":","org","-","humble","html","https","ros"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/","text":"通信接口 在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。 接口的定义 接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。 ROS通信接口 接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。 语言无关 为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。 标准接口 大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。 案例一：服务接口的定义与使用 了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。 接口定义 在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ... 程序调用 我们在代码中再来重点看下接口的使用方法。 客户端接口调用 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 服务端接口调用 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 案例二：话题接口的定义与使用 话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。 运行效果 现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub 接口定义 在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ... 程序调用 我们在代码中再来重点看下接口的使用方法。 发布者接口调用 learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 订阅者接口调用 learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 接口命令行操作 接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义 参考链接 https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["hsv","；","package","客户端","添加","中间","而是","*","-","提示","根据","降低","对","inrange","#","$","xy","重要","第一个","诞生","做成","自定义","时候","/","查询","waiting","__","about","接口","cmakelists","形象","必须","打印","py","response","左上角","w","findcontours","键盘","摄像头","者","用来","1.0","一帧","宽","run",".","状态","once","建立","python3","甚至","位置","guyuehome","while","举个","列表","衍生","exe","upper","连接","编程","typec","d","可见","出来","封装","详细","链接","度","作者","255","docs","传输数据","某个","二","得","30","物体","一种","服务","红色","use","居","值","服务端","包装","系统","描述","图形","单向","重点","circle","应答","10","更","done","目的","广泛","as","只有","加","成","chain","坐标","研究","主要","都","设计","if","usr","一句","话","要","的","上","机器","接口定义","(","订阅","通过","效果","pub","视觉","已经","转到第","编写","看到","bgr2hsv","像头","没有","接口类","waitkey","发布者","对象","frame","color","古月","lower","async","以及","不用","开始","180","中","线速度","上限","define","种","spin","到底","参数","之间","路径","调用函数","group","它","interfaces","%","en","呢","of","初始化","exec","send","务器","图像","进行","语言","调用","才能","target","准确","方便","文件夹","info","两个","tutorials","python","区分","和","args","下来","interface","msgs","sensor","invalid","以上","list","receiving","int64","固定","不同","各个领域","关系","就","continue","看看","课程","这","bool","import","之前","但","入口","分成","90","每","depend","img","功能","直接","众多","程序","这里","约束","像素点","不管","一些","只","humble","cvtcolor","回到","命令行","发送","小海","default","\\","learning","下限","e","c++","硬件","0",",","这样","再","小海龟","那","np","com","此时","与","第二","知道","std","代码生成","符合","client","节点","上去","操作","销毁","减少","find","化成","concepts","运行","好奇","服务器","队列","关于","build","server","选项","回顾","并","for","数值","话题","示例","包中","!","hierarchy",")","n","approx","二个","2","get","范围","drawcontours","类似","一","imagesubscriber","旋转","future","exception","micro","退出","可以","generate","输入","实现","destroy","讲","raw","程序模块","各个","需要","看上去","进度","来","一下","图像处理","驱动","sub","我们","可能","为了","速度","为","几个","（","提供","topic","single","相机","available"," ","日志","输出","getobjectposition","cnt","txt","32","反正","里","并且","编写程序","布尔值","a","查看","create","cv2","看上","安装","手机","”","action","第二个","阈值","还有","很","将","video","发布","subscribernode","self","由于","启动","他们","call","名","时","bgr","还是","数","文件","收到","方法","sec","中来","出去","result","name","publisher","service","command","随处","一边","super","env",">","长度","string","换成","生活","执行","webcam","传输","ros2","这个","电脑","是否","srv","转","整型","回调","所在","了解","每隔","像是","两","互相","指令","一次","有没有","ros","终端","shape","常用","[","无论","例子","命令","计算","造","except","各种","角度","x","领域","苹果","如下","generators","boundingrect","中心","控制","failed","image","原色","案例","想","detect","again","循环","重复","第三个","好","return","_","目标","初始","bridge","分别","最终","用于","左上","现在","已","去除","软件开发","插头","自言自语","形状","转到","这些","g","subscription","面积","packages","字符","内容","]","后","“","red","参考","颜色","二维","objecty","转化成","所以","二值化","了","及","别人","xml","init","无论是","解析","摄像","传递","多","涵盖","接下来","\"","加法","例程","1s","from","得到","接下","cvbridge","main","你来我往","最为","sum","联系","中有","，","coding","opencv","噪声","更为","自语","继续","y","周期","{","上边","不是","下","包含","？","www","从","rosidl","member","图形化","关心","三种","编译器","等待","打开","肯定","上角","插座","找到","看","—","第一","还","自定","学习","字符串","5","主程序","logger","由","一个","反馈","对应","true","检测","html","三个","r","随处可见","有机","在","cam","int","只要","utf","体","org","却是","类型","class","wait","结果","主","object","and","匹配","当前","+","每个","cv","retr","过程","numpy","求和","坐标值","输入输出","表示","关闭","https","到","objectclient","=","、","会","把","}","父类","点画","库","机制","彼此","ok","b","有","objectx","给","project","not","自己","1","share","形象化","h","imshow","none","request","break","开发","件夹","如何","或者","：","工作","比如","20","。","两者","<","def","模型","contours","else","timeout","转换","正常","什么","识别","组成","node","类","信息","运动","另外","usb","try","64","数组","像素","机器人","150","消息","runtime","动作","将要","请求","数据结构","in","就是","太小","核心",":","publish","理解","to","position","轮廓","完成","应用","通信","大家","关注","标准接口","模块","的话","谁","等","是","包","---","概念","三原色","mask","msg","通信接口","之为","什么样","处理","objectposition","说明","data","标准","具体","bin","等等","show","128","交流","常见","callback","'","接口类型","部分","布尔","生成","shutdown","bgr8","）","rclpy","定义","第三","50","获取","array","位","一起","使用","三原","保证","依赖","让","也","相互","无关","客户","希望","人","int32","...","哪些","数据","勾勒","标值","称之为","创建","海龟","角速度","函数","listener","required","结构","@","代码","高效","个人","就行","配置","精髓","讲解","编译","用到","便于","8","进入","imgmsg","轮子","软件","转化","高","显示","后续","完全","自动"],"title":"通信接口","title_tokens":["通信接口","通信","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_1","text":"在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。","text_tokens":["定义","传递","多","通信","而是","或者","大家","。","可以","中","让","好","重要","是","人","—","什么","这","概念","都","学习","接口","数据","通信接口","ros","我们","自言自语","为了","你来我往","无论","会","还是","一个","呢","内容","的","结构","，","标准","？","动作","将要","服务","个人","自语","交流","就是","在","并","给","用到"," ","两个","系统","话题","不是","理解","更","甚至","后续"],"title":"通信接口","title_tokens":["通信接口","通信","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_2","text":"接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。","text_tokens":["；","固定","匹配","传输","各个领域","这个","电脑","-","关系","就","每个","所在","像是","诞生","输入输出","时候","这","但","接口","一次","到","每","ros","形象","必须","直接","程序","常用","、","无论","例子","把","约束","像素点","一些","机制","键盘","彼此","回到","b","有","摄像头","领域","给","自己","完全","建立","形象化","控制","硬件","举个","开发","原色","如何","连接","编程","那","工作","比如","。","typec","知道","两者","可见","好","符合","节点","正常","什么","出来","组成","上去","运动","软件开发","插头","usb","形状","这些","传输数据","g","运行","得","像素","内容","机器人","一种","关于","服务","就是","值","所以","包装","了","系统","图形","话题","更","目的","广泛","无论是","解析","只有","摄像","多","应用","通信","类似","大家","关注","micro","加","可以","输入","模块","实现","讲","程序模块","各个","等","是","看上去","主要","包","概念","都","三原色","驱动","通信接口","我们","一句","话","之为","要","速度","最为","什么样","的","提供","，","具体","标准","上","机器","更为","等等","通过","相机","常见"," ","输出","编写","反正","像头","并且","编写程序","？","看上","定义","安装","手机","一起","使用","图形化","三原","关心","很","不用","开始","中","也","让","插座","相互","线速度","发布","肯定","参数","他们","调用函数","数据","主程序","称之为","它","角速度","时","函数","还是","一个","由","反馈","呢","结构","图像","进行","代码","调用","高效","才能","配置","r","准确","随处可见","精髓","随处","在","两个","只要","软件","和","却是","生活","结果","指令"],"title":"接口的定义","title_tokens":["定义","的","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#ros","text":"接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。","text_tokens":["定义","通信","一起","使用","依赖","重复","三种","降低","。","可以","让","也","目标","是","种","分别","节点","这","之间","接口","到","每","ros","减少","我们","程序","常用","、","联系","的","造","，","机制","一种","各种","动作","服务","代码","才能","通过","有","方便","就是","有机","核心"," ","便于","轮子","话题","别人"],"title":"ROS通信接口","title_tokens":["通信接口","通信","ros","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_3","text":"为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。","text_tokens":["int64","不同","传输","中间","这个","当前","是否","srv","过程","转","整型","每隔","求和","做成","两","bool","表示","之前","接口","分成","到","每","90","ros","功能","、","会","这里","只","机制","x","b","用来","一帧","小海",".","状态","c++","小海龟","编程","比如","20","。","此时","知道","目标","节点","分别","最终","什么","度","另外","运动","转到","64","这些","数组","机器人","30","一种","“","动作","请求","服务","数据结构","二维","数值","了","描述","话题","单向","应答","10","完成","通信","加法","旋转","1s","可以","等","是","需要","坐标","---","进度","msg","设计","一下","通信接口","我们","为了","sum","的","，","机器","通过","y","周期"," ","部分","布尔","转到第","生成","看到","32","里","布尔值","包含","a","定义","”","位","action","使用","保证","还有","开始","将","中","让","无关","int32","由于","还","学习","数据","海龟","反馈","一个","数","对应","文件","还是","结构","语言","三个","就行","编译","在","一边","两个","python","体","和","区分","结果","自动"],"title":"语言无关","title_tokens":["语言","无关"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_4","text":"大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。","text_tokens":["定义","安装","件夹","涵盖","大家","看看","。","可以","打开","中","找到","哪些","到底","路径","接口","ros","我们","可能","众多","呢","几个","好奇","文件","的","，","标准","文件夹","在","给","了","系统","share","？"],"title":"标准接口","title_tokens":["标准","标准接口","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_5","text":"了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。","text_tokens":["定义","这样","第三","对象","接下来","从","再","通信","如何","使用","第二个","例程","就","以及","。","可以","课程","实现","了解","第二","中","第三个","位置","第一个","发布","目标","是","需要","时候","研究","节点","第一","查询","概念","识别","之前","来","接下","封装","接口","驱动","通信接口","我们","一个","收到","的","提供","，","图像","机器","请求","服务","代码","讲解","角度","三个","相机","有","进行","视觉","回顾","在","服务端"," ","了","发送","话题","编写","下来","下","二个"],"title":"案例一：服务接口的定义与使用","title_tokens":["定义","案例","一","的","：","使用","接口","服务","与"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_6","text":"在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ...","text_tokens":["package","不同","添加","这个","srv","就","过程","根据","#","$","/","bool","表示","指令","接口","一次","depend","cmakelists","功能","、","会","}","x","project","default",".","generators","learning","位置","：","。","<","_","目标","代码生成","find","packages","后","build","runtime","服务","选项","服务端","了",")","xml","get","完成","通信","\"","例程","generate","的话","是","坐标","需要","---","包","我们","为","的","中有","，","接口定义","(","y"," ","部分","{","getobjectposition","生成","上边","txt","定义","获取","member","rosidl","使用","编译器","依赖","中","让","也","int32","...","还","group","interfaces","反馈","of","文件","required","exec","true","语言","代码","name","配置","编译","在","两个","interface",">","自动"],"title":"接口定义","title_tokens":["定义","接口定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_7","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["我们","在","再","看","方法","的","重点","使用","来","下","接口","代码","。","中"],"title":"程序调用","title_tokens":["调用","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_8","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["object","ros2","*","-","srv","#","自定义","/","waiting","import","__","关闭","接口","objectclient","=","py","response","父类","except","库","ok","x","1.0",".","not","\\","learning","once","python3","e","位置","failed","while","guyuehome",",","none","request","break","again","com","d","def","_","目标","初始","timeout","client","节点","else","识别","node","类","作者","销毁","try","请求","服务","居","for","并","示例",":","!","应答",")","done","n","init","as","position","get","\"","future","exception","wait","from","destroy","if","usr","main","的","说明","，","coding","(","bin","available","y","'"," ","getobjectposition","shutdown","create","rclpy","www","定义","对象","古月","等待","async","self","spin","...","自定","call","创建","%","logger","初始化","of","sec","@","send","true","result","进行","name","service","target","r","info","super","8","python","utf","env","args","interface","class"],"title":"客户端接口调用","title_tokens":["客户","客户端","调用","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_9","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["object","hsv","list","receiving","执行","ros2","*","+","-","提示","srv","cv","retr","continue","对","回调","inrange","#","numpy","所在","xy","自定义","/","import","__","互相","关闭","入口","接口","img","90","ros","shape","=","py","[","、","左上角","response","w","计算","findcontours","父类","点画","一些","库","cvtcolor","x","者","objectx","苹果","宽",".","boundingrect","中心","下限","learning","\\","1","python3","h","0","guyuehome","imshow",",","none","request","image","upper","detect","循环","np","com","与","d","<","def","模型","_","目标","bridge","转换","初始","节点","用于","contours","左上","else","出来","invalid","识别","已","去除","node","类","信息","作者","销毁","255","面积","化成","subscription","像素","服务器","物体","]","队列","150","消息","后","server","服务","red","红色","颜色","in","请求","居","objecty","太小","转化成","for","二值化","数值","并","示例","话题",":","及","circle","!","10","hierarchy",")","n","approx","init","2","as","to","position","get","范围","轮廓","drawcontours","\"","imagesubscriber","退出","from","得到","return","destroy","raw","chain","坐标","mask","msg","cvbridge","图像处理","sub","usr","if","main","为","处理","的","提供","说明","（","，","data","coding","opencv","(","订阅","bin","噪声","效果","128","callback","接口类型","'","y","已经"," ","日志","输出","getobjectposition","cnt","bgr8","shutdown","bgr2hsv","cv2","create","rclpy","www","）","定义","接口类","waitkey","array","50","对象","从","frame","color","古月","使用","阈值","等待","lower","上限","将","180","中","video","上角","self","spin","自定","勾勒","5","数据","创建","%","名","logger","listener","函数","初始化","一个","bgr","反馈","收到","务器","@","true","图像","检测","进行","name","service","command","target","info","super","进入","imgmsg","8","int","python","utf","转化","和","类型","env","高","显示","args","interface","msgs","sensor","长度","class","主"],"title":"服务端接口调用","title_tokens":["调用","服务端","接口","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_10","text":"话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。","text_tokens":["定义","衍生","从","案例","想","通信","类似","。","也","位置","发布","目标","是","人","需要","识别","之前","接口","通信接口","有没有","我们","把","的","不管","中来","，","机器","服务","继续","视觉","周期","话题","没有","换成"],"title":"案例二：话题接口的定义与使用","title_tokens":["定义","案例","二","话题","的","：","使用","接口","与"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_11","text":"现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub","text_tokens":["以上","定义","第三","；","object","image","exe","ros2","这个","：","使用","第二个","就","。","此时","第二","$","将","成","中","第三个","位置","希望","谁","第一个","发布","目标","是","需要","_","节点","现在","第一","启动","分别","识别","来","封装","数据","驱动","到","node","sub","ros","功能","终端","我们","usb","打印","运行","会","出去","一个","的","topic","，","图像","标准","消息","订阅","三个","相机","pub","视觉","并","cam"," ","run","话题","learning","interface","二个"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_12","text":"在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ...","text_tokens":["package","不同","这个","过程","根据","#","$","坐标值","/","表示","接口","cmakelists","功能","、","}","x","project","default",".","generators","learning","位置","：","。","_","目标","find","内容","后","消息","服务","选项","了","描述","话题",")","完成","通信","\"","例程","generate","是","坐标","需要","包","msg","我们","的","objectposition","，","接口定义","(","y"," ","{","生成","txt","定义","rosidl","使用","编译器","中","让","int32","...","还","标值","interfaces","一个","required","进行","语言","代码","name","配置","编译","在","interface","自动"],"title":"接口定义","title_tokens":["定义","接口定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_13","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["我们","在","再","看","方法","的","重点","使用","来","下","接口","代码","。","中"],"title":"程序调用","title_tokens":["调用","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_14","text":"learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["object","hsv","list","receiving","webcam","ros2","*","+","-","提示","cv","retr","continue","回调","inrange","#","numpy","所在","xy","自定义","/","import","__","互相","关闭","入口","接口","img","90","ros","shape","=","py","[","、","左上角","w","计算","findcontours","父类","点画","一些","库","cvtcolor","x","者","objectx","苹果","宽",".","boundingrect","中心","下限","learning","1","python3","h","0","位置","guyuehome","imshow",",","none","image","upper","detect","循环","np","com","与","<","def","模型","_","目标","bridge","转换","初始","节点","用于","contours","左上","出来","已","去除","node","类","信息","作者","销毁","255","面积","化成","subscription","像素","]","队列","150","消息","后","红色","red","in","颜色","居","objecty","太小","转化成","for","二值化","数值","并","示例","话题",":","及","circle","publish","!","10","hierarchy",")","approx","init","2","as","to","position","get","范围","轮廓","drawcontours","\"","imagesubscriber","退出","from","得到","destroy","raw","chain","坐标","mask","msg","cvbridge","图像处理","sub","usr","if","main","为","处理","的","objectposition","说明","topic","（","，","data","coding","opencv","(","订阅","bin","噪声","效果","pub","128","callback","y","'"," ","日志","输出","cnt","bgr8","shutdown","bgr2hsv","cv2","create","rclpy","www","）","定义","发布者","waitkey","array","50","对象","从","frame","color","古月","使用","阈值","等待","lower","上限","将","180","中","video","上角","发布","self","spin","自定","勾勒","5","创建","名","logger","listener","函数","初始化","一个","bgr","@","图像","检测","进行","name","publisher","info","super","进入","imgmsg","8","int","python","utf","转化","和","类型","env","高","显示","args","interface","msgs","sensor","长度","class","主"],"title":"发布者接口调用","title_tokens":["发布者","调用","发布","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_15","text":"learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["object","执行","ros2","*","-","提示","对","回调","#","自定义","/","import","__","关闭","入口","接口","=","py","、","父类","库","x","者",".","\\","learning","python3","位置","guyuehome",",","none","循环","com","d","def","_","目标","std","初始","节点","node","类","信息","作者","销毁","subscription","字符","队列","后","消息","居","并","示例","话题",":","!","10",")","init","position","get","\"","退出","from","destroy","msg","sub","usr","main","处理","的","objectposition","说明","topic","（","，","coding","(","订阅","bin","callback","y","'"," ","日志","输出","shutdown","create","rclpy","www","定义","对象","古月","等待","subscribernode","self","spin","自定","字符串","数据","创建","%","名","logger","listener","函数","初始化","一个","收到","@","进行","name","target","info","super","8","python","utf","类型","env","args","interface","msgs","string","长度","class","主"],"title":"订阅者接口调用","title_tokens":["订阅","者","调用","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_16","text":"接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义","text_tokens":["定义","list","package","ros2","：","#","$","<","_","详细","接口","操作","功能","常用","某个","命令","的","接口定义","name","show","如下"," ","系统","包中","interface",">","查看","列表"],"title":"接口命令行操作","title_tokens":["操作","命令","命令行","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_17","text":"https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["package","and","-","define","/","about","https","ros","docs","interfaces","en","concepts","humble","html","single","use"," ","tutorials",".",":","org","interface"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/","text":"动作 机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。 通信模型 举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。 客户端/服务器模型 动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。 一对多通信 和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。 同步通信 既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。 由服务和话题合成 大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。 案例一：小海龟的动作 我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback 案例二：机器人画圆 如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。 运行效果 启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。 接口定义 例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是动作的目标，enable为true时，表示开始运动； 第二块是动作的执行结果，finish为true，表示动作执行完成； 第三块是动作的周期反馈，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ... 通信模型 通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。 服务端代码解析 learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], }, 客户端代码解析 learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], }, 动作命令行操作 动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["；","package","客户端","*","而是","控","-","根据","对","#","$","自定义","/","__","接口","时间","cmakelists","py","response","流程","键盘","哪里","原理","者","接收","run","合适",".","状态","所处","python3","位置","guyuehome","举个","列表","秘密","finish","编程","动","d","思路","圈","360","含义","封装","链接","度","作者","理","docs","turtle1","某个","二","得","30","第二块","一种","同步","服务","使","不","居","圆周运动","服务端","随时","系统","circle","送货","10","相对","是不是","done","目的","满足","只有","实时","被","送餐","scripts","handle","坐标","i","都","请","if","usr","顺利","的","没错","机器","上","接口定义","(","订阅","通过","效果","二块","编写","看到","加入","转个","没有","接口类","发布者","数据类型","负责","对象","--","古月","清楚","async","开始","当","中","spin","到底","圆周","interfaces","%","en","呢","初始化","publishing","务器","send","虽然","进行","语言","调用","才能","info","两个","tutorials","python","和","名字","args","下来","interface","简单","转圈","list","不同","管理","就","试一试","发出","一段","某一","这","bool","import","之前","但","入口","每","功能","直接","程序","拒绝","humble","其实","多少","送给","遥控","命令行","竟然","发送","小海","default","learning","0",",","这样","直到","再","小海龟","就此结束","那","com","第二","知道","一块","client","节点","操作","销毁","find","运行","服务器","基于","server","选项","并","一套","for","只能","起来","话题","示例","entry","feedback","!",")","发现","range","understanding","get","类似","一","机械","旋转","future","退出","可以","generate","实现","一点","第三块","destroy","读取","需要","进度","来","按照","拒绝执行","一下","合成","我们","可能","为","一点一点","（","如果","臂","succeed"," ","日志","输出","execute","txt","查看","分析","action","整个","很","sleep","发布","self","启动","enable","以下","名","时","文件","收到","方法","result","场景","name","这种","一边","teleop","super","env","根本",">","第一块","行为","received","执行","不仅仅","ros2","这个","是否","画圆","转","回调","movecircle","每隔","一次","取消","写","有没有","过","ros","终端","常用","[","例子","命令","方式","之后","当中","角度","姿态","如下","generators","控制","就此","想","案例","干什么","循环","好","应用层","state","return","_","目标","初始","分别","现在","最终","进度条","这些","毕竟","需求","]","后","一样","参考","再用","假设","actionserver","了","goal","init","解析","接下来","多","rotateabsolute","\"","例程","console","1s","from","动图","rejected","接下","actions","main","一对","成功","，","coding","更为","针对","其","周期","{","time","movecircleactionclient","上边","不是","下","隐藏","包含","？","0.5","www","从","rosidl","theta","编译器","等待","一段时间","打开","肯定","异步","看","常常","—","第一","还","自定","自动","又","rotate","点","logger","反馈","一个","由","true","实际","html","三个","在","仿真器","utf","org","类型","turtlesim","较长","class","结果","主","points","wait","add","accepted","当前","模拟","setup","过程","不仅","背后","type","表示","关闭","https","智能","到","处理函数","=","、","会","眼前","把","}","父类","库","机制","absolute","三块","不会","ok","有","多少度","project","还会","not","完整","结束","真器","导航","none","相比","同时","如何","：","比如","20","。","段时间","<","def","模型","告诉","什么","识别","node","类","信息","介绍","运动","另外","通信模型","机器人","像","消息","动作","请求","in","就是","turtle","复杂","达到",":","publish","理解","服务器端","moving","装","完成","应用","通信","某","大家","模块","move","等","是","指定","---","包","概念","msg","多个","通信接口","处理","应带","说明","data","标准","具体","bin","既然","但是","actionclient","1.57","callback","接口类型","'","部分","生成","shutdown","）","rclpy","定义","第三","获取","分拣","仿真","一起","使用","这么","也","让","客户","希望","int32","movecircleactionserver","...","底层","数据","能","仔细","海龟","创建","设置","函数","加深","required","发送给","@","先","抓取","代码","特性","配置","编译","用到","便于","8","key","仅仅","指令"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_1","text":"机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。","text_tokens":["满足","分拣","从","不仅仅","应用","通信","行为","这个","那","管理","就","这么","被","对","不仅","送餐","。","实现","可以","很","中","也","好","目标","是","需要","等","常常","—","某一","概念","识别","含义","目的","智能","ros","功能","运动","我们","另外","这些","、","某个","会","一个","需求","的","机器人","流程","，","具体","一种","机器","键盘","机制","场景","动作","上","进行","就是","遥控","并","在","这种"," ","用到","便于","系统","复杂","完整","送货","理解","名字","简单","仅仅"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_2","text":"举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。","text_tokens":["转圈","执行","当前","控","就","过程","转","每隔","发出","一段","这","表示","时间","到","有没有","取消","、","例子","眼前","把","命令","机制","哪里","之后","多少","当中","ok","多少度","发送","合适","结束","举个","这样","直到","想","再","比如","20","。","段时间","知道","告诉","圈","360","现在","度","信息","运动","进度条","得","机器人","30","像","后","动作","不","假设","并","了","随时","10","装","完成","通信","旋转","1s","可以","一点","是","需要","进度","一下","我们","的","一点一点","，","如果","机器","更为"," ","不是","转个","没有","？","使用","一段时间","开始","肯定","让","到底","还","反馈","一个","才能","在","根本","行为","指令"],"title":"通信模型","title_tokens":["通信","模型","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_3","text":"动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。","text_tokens":["执行","实时","就此","想","同时","客户端","类似","再","干什么","使用","当前","这个","动","就","机械","过程","就此结束","。","整个","开始","当","中","也","客户","让","模型","目标","是","坐标","什么","通信","又","信息","运动","可能","反馈","一个","收到","的","务器","服务器","机器人","，","后","如果","机器","动作","臂","服务","之后","抓取","姿态","周期","一边"," ","发送","起来","状态","和","所处","服务器端","结束","控制","导航","达到"],"title":"客户端/服务器模型","title_tokens":["客户","模型","/","客户端","服务器","务器","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_4","text":"和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。","text_tokens":["只有","执行","完成","通信","客户端","大家","。","可以","中","客户","都","多个","运动","一个","命令","毕竟","的","务器","服务器","机器人","，","机器","动作","一样","服务","先","才能","但是","有","只能","发送","和","服务器端","下"],"title":"一对多通信","title_tokens":["多","通信","一对"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_5","text":"既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。","text_tokens":["定义","通信","action","那","使用","过程","。","中","也","是","之前","接口","数据","通信接口","过","介绍","我们","反馈","文件","的","，","一种","同步","机制","动作","进行","既然","有","."],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_6","text":"大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。","text_tokens":["发布者","秘密","再","通信","客户端","应用","使用","大家","过程","。","模块","当","实现","也","客户","应用层","发布","目标","是","看","底层","动图","表示","来","运动","仔细","时","会","一个","反馈","命令","应带","的","务器","服务器","收到","，","没错","一种","机制","动作","请求","服务","其实","三个","调用","订阅","其","有","就是","周期","者"," ","竟然","两个","还会","发送","话题","和","上边","基于","不是","服务器端","下","是不是","发现","隐藏"],"title":"由服务和话题合成","title_tokens":["由","话题","和","服务","合成"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_7","text":"我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback","text_tokens":["接下来","仿真","案例","action","ros2","小海龟","一","使用","某","：","rotateabsolute","\"","theta","-","--","对","。","可以","$","让","_","/","指定","启动","概念","按照","接下","以下","控制","到","node","rotate","运动","我们","海龟","turtle1","命令","}","加深","的","send","，","absolute","动作","姿态","1.57","info","再用","turtle","teleop"," ","run","{","小海","仿真器",":","feedback","goal","理解","turtlesim","下来","真器","key"],"title":"案例一：小海龟的动作","title_tokens":["海龟","案例","小海","一","小海龟","：","的","动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_8","text":"如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。","text_tokens":["接下来","通信","客户端","如何","使用","编程","而是","就","一起","过程","试一试","。","实现","中","好","让","希望","客户","圈","是","请","来","但","封装","接下","接口","直接","我们","呢","一个","方法","的","机器人","虽然","务器","，","基于","实际","机器","动作","服务器","服务","代码","不会","针对","特性","通过","有","在","并","一套"," ","假设","话题","和","服务器端","下来","转个","？"],"title":"案例二：机器人画圆","title_tokens":["案例","二","机器人","：","画圆","机器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_9","text":"启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。","text_tokens":["接下来","完成","客户端","ros2","action","这个","：","模拟","就","例程","。","可以","背后","$","开始","实现","中","客户","move","_","目标","client","分别","启动","最终","接下","一下","一次","每","度","信息","终端","运动","我们","运行","反馈","命令","的","务器","服务器","机器人","，","30","机器","动作","server","服务","之后","原理","并","服务端"," ","两个","run","发送","示例","看到","和","learning","服务器端","结束","下来","下","分析"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_10","text":"例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是动作的目标，enable为true时，表示开始运动； 第二块是动作的执行结果，finish为true，表示动作执行完成； 第三块是动作的周期反馈，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ...","text_tokens":["；","执行","package","不同","当前","是否","过程","根据","#","movecircle","$","自定义","/","bool","表示","接口","到","ros","功能","cmakelists","}","三块","角度","project","default",".","generators","learning","位置","finish","：","。","第二","一块","state","_","目标","运动","find","机器人","第二块","后","动作","选项","并",")","完成","\"","例程","旋转","generate","第三块","是","需要","---","包","我们","为","成功","的","标准","，","机器","接口定义","(","通过","周期"," ","部分","二块","{","生成","txt","不是","包含","定义","第三","rosidl","action","使用","编译器","开始","中","让","int32","...","第一","自定","enable","还","自动","interfaces","时","反馈","required","true","进行","语言","三个","代码","配置","name","编译","在","interface","第一块","结果","指令"],"title":"接口定义","title_tokens":["定义","接口定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_11","text":"通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。","text_tokens":["这样","相比","接下来","通信","客户端","一","例程","清楚","。","开始","客户","模型","思路","目标","之前","接下","一下","写","信息","理","运动","我们","通信模型","程序","运行","反馈","一个","服务器","务器","发送给","机器人","，","后","的","机器","动作","服务","代码","送给","就是","周期","并"," ","发送","起来","话题","和","结束","相对","下来","控制","较长","分析"],"title":"通信模型","title_tokens":["通信","模型","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_12","text":"learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["执行","ros2","*","当前","-","setup","回调","#","movecircle","自定义","/","import","__","表示","关闭","入口","接口","到","功能","处理函数","=","程序","py","、","[","}","父类","库","之后","角度","如下",".","learning","python3","0","guyuehome",",","none","finish","：","循环","com","d","知道","state","def","return","_","初始","目标","360","节点","最终","node","类","信息","作者","度","销毁","运动","服务器","30","]","后","消息","动作","server","服务","选项","in","居","圆周运动","for","服务端","actionserver","并","系统","示例","entry",":","circle","feedback","goal","!","moving","publish",")","init","range","get","完成","\"","console","退出","from","destroy","scripts","handle","move","需要","i","包","msg","usr","main","处理","成功","（","的","说明","，","coding","(","bin","succeed","callback","接口类型","'","周期"," ","{","time","execute","shutdown","编写","加入","0.5","）","rclpy","www","接口类","定义","负责","对象","从","action","古月","等待","打开","让","sleep","发布","self","movecircleactionserver","...","spin","自定","圆周","点","创建","%","名","logger","设置","函数","初始化","一个","反馈","publishing","收到","文件","务器","@","true","result","进行","name","代码","配置","编译","info","super","8","python","utf","类型","env","args","interface","class","主","结果","points"],"title":"服务端代码解析","title_tokens":["代码","解析","服务端","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_13","text":"learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["received","执行","accepted","ros2","*","客户端","-","setup","回调","#","movecircle","自定义","/","import","__","关闭","入口","接口","功能","=","程序","py","、","response","[","}","方式","父类","拒绝","库","之后","如下","接收","发送",".","not","learning","python3","guyuehome",",","none","finish","：","循环","add","com","d","知道","state","def","return","_","初始","目标","client","节点","最终","node","类","作者","销毁","运动","服务器","机器人","]","后","消息","动作","请求","使","server","服务","选项","居","圆周运动","for","并","系统","示例","entry",":","circle","feedback","goal","!","服务器端",")","done","init","get","完成","\"","console","future","被","wait","退出","from","destroy","scripts","handle","move","读取","需要","包","rejected","拒绝执行","msg","if","usr","main","为","处理","顺利","的","（","说明","，","如果","coding","机器","(","bin","actionclient","callback","接口类型","'","周期"," ","日志","{","输出","movecircleactionclient","shutdown","编写","加入","）","rclpy","www","接口类","定义","获取","对象","action","古月","等待","async","开始","打开","让","客户","希望","self","异步","spin","启动","自定","enable","数据","圆周","能","点","创建","%","名","设置","logger","函数","初始化","一个","反馈","时","收到","文件","send","@","务器","result","true","进行","name","代码","配置","编译","info","super","8","python","utf","类型","env","args","interface","class","主","结果","points"],"title":"客户端代码解析","title_tokens":["代码","客户","解析","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_14","text":"动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求","text_tokens":["list","数据类型","ros2","action","：","#","$","<","_","type","数据","操作","常用","命令","的","send","data","动作","请求","服务","name","info","如下"," ","发送","类型","goal",">","查看","列表"],"title":"动作命令行操作","title_tokens":["操作","命令","命令行","动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["docs","understanding","en","tutorials","/",".","ros2",":","org","-","humble","html","https","actions","ros"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/","text":"参数 话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。 通信模型 比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。 全局字典 在ROS系统中，参数是以 全局字典 的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。 可动态监控 在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。 案例一：小海龟例程中的参数 在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 启动两个终端，分别运行小海龟仿真器和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看参数列表 当前系统中有哪些参数呢？我们可以启动一个终端，并使用如下命令查询： $ ros2 param list 参数查询与修改 如果想要查询或者修改某个参数的值，可以在param命令后边跟get或者set子命令： $ ros2 param describe turtlesim background_b # 查看某个参数的描述信息 $ ros2 param get turtlesim background_b # 查询某个参数的值 $ ros2 param set turtlesim background_b 10 # 修改某个参数的值 参数文件保存与加载 一个一个查询/修改参数太麻烦了，不如试一试参数文件，ROS中的参数文件使用yaml格式，可以在param命令后边跟dump子命令，将某个节点的参数都保存到文件中，或者通过load命令一次性加载某个参数文件中的所有内容： $ ros2 param dump turtlesim >> turtlesim.yaml # 将某个节点的参数保存到参数文件中 $ ros2 param load turtlesim turtlesim.yaml # 一次性加载某一个文件中的所有参数 案例二：参数编程 接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。 运行效果 启动一个终端，先运行第一句指令，启动param_declare节点，终端中可以看到循环打印的日志信息，其中的“mbot”就是我们设置的一个参数值，参数名称是“robot_name”，通过命令行修改这个参数，看下终端中会发生什么？ $ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle 代码解析 我们来看下在代码中，如何声明、创建、修改一个参数的值。 learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], }, 案例三：机器视觉应用 参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。 运行效果 启动三个终端，分别运行： 相机驱动节点 视觉识别节点 修改红色阈值 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180 在启动的视觉识别节点中，我们故意将视觉识别中红色阈值的上限设置为0，如果不修改参数，将无法实现目标识别。 为了便于调整阈值，我们在节点中将红色阈值的限位修改为了ROS参数，通过命令行修改该参数的值，就可以实现视觉识别啦。 代码解析 我们来看下在视觉识别的代码中，是如何通过参数来设置阈值的。 learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["hsv","格式","*","每次","-","提示","对","inrange","#","$","形态","xy","时候","/","查询","__","接口","一两句","本","立刻","打印","py","左上角","w","findcontours","访问","dump","参数设置","键盘","两句","其中","者","那个","run","宽",".","python3","guyuehome","列表","robot","exe","upper","连接","编程","辨率","保存","来看","d","不如","名称","出来","含义","链接","度","一两","作者","255","docs","某个","默认","二","物体","一种","服务","问题","红色","不","居","nodeb","值","系统","描述","circle","10","as","曝光","integer","scripts","修改","成","chain","坐标","键值","都","if","usr","一句","的","机器","单位","(","订阅","效果","通过","视觉","加载","已经","编写","看到","加入","bgr2hsv","waitkey","第一句","编码","对象","frame","color","古月","lower","清楚","开始","上限","180","中","spin","叫","参数","重新","%","en","呢","初始化","监控","图像","滑动","变化","进行","动态","体验","info","两个","tutorials","python","和","parameternode","args","下来","msgs","sensor","简单","list","receiving","作用","不同","就","continue","试一试","图像识别","这","import","入口","img","90","功能","程序","background","一些","humble","cvtcolor","多少","输入框","送给","命令行","哪个","发送","小海","load","yaml","端口","learning","叫做","下限","c++","0",",","再","小海龟","np","com","与","知道","set","节点","定时","调整","销毁","化成","运行","队列","选项","丰富","并","for","数值","起来","话题","示例","键和值","entry","!","hierarchy",")","approx","即可","2","understanding","get","范围","drawcontours","类似","一","imagesubscriber","退出","可以","destroy","输入","实现","raw","非常","读取","需要","来","一下","图像处理","驱动","合成","sub","我们","可能","子","为","为了","全局变量","几个","高级","提供","（","如果","相机"," ","日志","输出","cnt","很多","查看","create","cv2","”","new","阈值","整个","将","video","self","启动","all","名","bgr","文件","方法","其他","name","teleop","super","s","限位","env",">","长度","string","执行","declare","传输","ros2","这个","是否","比较","啦","回调","所在","了解","describe","易用性","互相","一次","写","ros","终端","shape","常用","[","命令","计算","方式","x","如下","苹果","boundingrect","中心","改变","提高","控制","不少","image","说干就干","案例","detect","循环","熟悉","分辨","光线","美颜","_","初始","目标","bridge","分别","用于","左上","中将","比较简单","已","去除","面积","subscription","这些","么","内容","定时器","]","后","跟","“","一样","red","mbot","颜色","参考","真实","转化成","二值化","了","及","从而","hello","init","解析","接下来","\"","例程","console","from","得到","很大","接下","cvbridge","main","存在","中有","，","coding","opencv","噪声","继续","变量","周期","节","y","条","{","不是","下","实现目标","？","www","从","某些","三种","等待","打开","上角","看","—","第一","还","5","一次性","timer","参数值","点","logger","由","一个","param","影响","检测","html","三个","在","cam","int","仿真器","utf","org","value","类型","turtlesim","全局","class","主","points","三","优化","object","当前","环境","+","setup","cv","过程","retr","后边","敏感","numpy","字典","type","表示","关闭","故意","https","到","=","、","会","号","把","}","父类","点画","库","机制","发生","b","有","1","h","真器","imshow","分辨率","考虑","none","该","易用","太","如何","或者","：","配置文件","比如","。","无法","<","def","模型","contours","转换","什么","识别","组成","想要","node","类","信息","介绍","usb","通信模型","像素","机器人","像","150","麻烦","消息","动作","in","就是","太小","turtle","核心","以","nodea","可","声明","办法",":","理解","to","轮廓","完成","大大提高","应用","通信","某","区域","然后","大家","关注","等","是","parameters","指定","包","mask","msg","多个","处理","传输方式","所有","说明","data","bin","parameter","等等","128","callback","提炼","'","部分","shutdown","bgr8","）","rclpy","50","获取","array","仿真","使用","默认值","也","让","最新","大大","挺","哪些","秒","就要","数据","勾勒","创建","海龟","设置","listener","函数","@","发送给","先","代码","配置","特性","编译","用到","便于","8","进入","imgmsg","转化","高","显示","共享","key","指令"],"title":"参数","title_tokens":["参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_1","text":"话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。","text_tokens":["再","通信","传输","类似","某些","编程","是否","大家","三种","清楚","。","可以","了解","知道","中","字典","是","节点","—","这","参数","来","多个","数据","本","ros","介绍","我们","程序","常用","全局变量","、","运行","方式","的","传输方式","机器人","，","机制","一种","机器","动作","服务","不","变量","节","在","已经"," ","便于","系统","话题","共享","c++","全局"],"title":"参数","title_tokens":["参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_2","text":"比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。","text_tokens":["执行","作用","格式","不同","是否","就","过程","图像识别","时候","这","到","功能","程序","会","一些","参数设置","多少","输入框","有","哪个","那个","端口","改变","分辨率","考虑","连接","或者","配置文件","辨率","分辨","比如","。","美颜","节点","分别","什么","识别","度","面积","usb","这些","像","后","一样","问题","nodeb","就是","核心","nodea","曝光","区域","关注","可以","输入","很大","是","需要","都","驱动","我们","的","，","机器","等等","相机","效果","通过","视觉"," ","部分","条","很多","编码","使用","阈值","整个","中","也","参数","设置","文件","图像","滑动","影响","进行","配置","在","和"],"title":"通信模型","title_tokens":["通信","模型","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_3","text":"在ROS系统中，参数是以 全局字典 的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。","text_tokens":["这个","或者","编程","然后","就","使用","。","可以","后边","字典","形态","中","也","等","是","时候","键值","名称","什么","叫","参数","组成","合成","存在","ros","参数值","我们","为","名","号","由","一个","的","像","访问","，","跟","一样","全局","真实","有","就是","在","数值"," ","以","了","系统","键和值","和","叫做","理解","即可","？"],"title":"全局字典","title_tokens":["全局","字典"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_4","text":"在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。","text_tokens":["获取","ros2","某","编程","大家","比如","对","。","可以","修改","知道","中","也","最新","非常","节点","这","参数","都","可能","立刻","会","一个","的","高级","访问","，","如果","其他","进行","特性","丰富","有","在","数值"," ","用到","了","办法","从而","共享"],"title":"可动态监控","title_tokens":["监控","动态","可"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_5","text":"在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 启动两个终端，分别运行小海龟仿真器和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["不少","仿真","ros2","小海龟","一","这个","使用","：","例程","熟悉","。","$","中","也","_","分别","启动","节点","参数","含义","控制","node","终端","我们","海龟","运行","命令","方法","的","提供","，","键盘","通过","在","命令行","turtle"," ","teleop","了","起来","两个","小海","仿真器","run","和","turtlesim","下","真器","key"],"title":"案例一：小海龟例程中的参数","title_tokens":["海龟","案例","小海","一","小海龟","：","的","参数","例程","中"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_6","text":"当前系统中有哪些参数呢？我们可以启动一个终端，并使用如下命令查询： $ ros2 param list","text_tokens":["list","ros2","当前","使用","：","可以","$","查询","启动","哪些","参数","终端","我们","呢","param","一个","命令","中有","，","并","如下"," ","系统","？"],"title":"查看参数列表","title_tokens":["参数","查看","列表"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_7","text":"如果想要查询或者修改某个参数的值，可以在param命令后边跟get或者set子命令： $ ros2 param describe turtlesim background_b # 查看某个参数的描述信息 $ ros2 param get turtlesim background_b # 查询某个参数的值 $ ros2 param set turtlesim background_b 10 # 修改某个参数的值","text_tokens":["get","ros2","或者","：","可以","后边","修改","$","#","describe","set","_","查询","参数","想要","信息","子","某个","param","命令","的","background","，","跟","如果","b","值","在"," ","描述","10","turtlesim","查看"],"title":"参数查询与修改","title_tokens":["参数","查询","与","修改"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_8","text":"一个一个查询/修改参数太麻烦了，不如试一试参数文件，ROS中的参数文件使用yaml格式，可以在param命令后边跟dump子命令，将某个节点的参数都保存到文件中，或者通过load命令一次性加载某个参数文件中的所有内容： $ ros2 param dump turtlesim >> turtlesim.yaml # 将某个节点的参数保存到参数文件中 $ ros2 param load turtlesim turtlesim.yaml # 一次性加载某一个文件中的所有参数","text_tokens":["格式","太","ros2","使用","或者","：","某","保存","试一试","可以","后边","修改","将","$","中","#","不如","/","查询","节点","参数","都","一次","到","一次性","ros","子","某个","param","一个","文件","命令","内容","的","所有","dump","，","麻烦","跟","通过","加载","在"," ","了","load",".","yaml","turtlesim",">"],"title":"参数文件保存与加载","title_tokens":["加载","文件","参数","保存","与"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_9","text":"接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。","text_tokens":["接下来","使用","就","比较","。","可以","开始","实现","中","读取","这","参数","都","来","就要","接下","比较简单","写","一两句","一下","一两","我们","程序","设置","函数","几个","方法","的","，","先","两句","体验","在","了","和","下来","简单"],"title":"案例二：参数编程","title_tokens":["案例","二","：","参数","编程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_10","text":"启动一个终端，先运行第一句指令，启动param_declare节点，终端中可以看到循环打印的日志信息，其中的“mbot”就是我们设置的一个参数值，参数名称是“robot_name”，通过命令行修改这个参数，看下终端中会发生什么？ $ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle","text_tokens":["第一句","declare","”","ros2","这个","循环","可以","修改","$","中","set","_","是","看","节点","启动","第一","名称","什么","参数","信息","终端","参数值","一句","我们","打印","运行","设置","会","param","一个","命令","的","，","“","先","发生","name","mbot","parameter","其中","通过","就是","命令行","数值","日志"," ","turtle","run","看到","learning","下","？","robot","指令"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_11","text":"我们来看下在代码中，如何声明、创建、修改一个参数的值。 learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], },","text_tokens":["执行","declare","ros2","*","-","setup","回调","#","/","type","import","__","关闭","入口","接口","到","功能","=","打印","py","、","[","程序","}","父类","库","送给","如下","发送",".","learning","python3","guyuehome","robot",",","列表","none","如何","：","循环","来看","。","com","知道","def","set","_","初始","节点","定时","node","类","信息","作者","销毁","默认","定时器","]","后","选项","mbot","居","值","并","数值","系统","示例","entry",":","声明","!",")","hello","2","init","get","完成","\"","console","退出","from","destroy","修改","scripts","读取","parameters","需要","指定","包","usr","main","我们","为","的","（","说明","，","coding","单位","(","bin","parameter","callback","周期","'"," ","日志","输出","{","shutdown","编写","加入","下","create","）","rclpy","www","对象","从","new","古月","等待","默认值","打开","将","中","让","self","spin","参数","秒","重新","all","timer","参数值","点","创建","%","logger","设置","函数","param","一个","初始化","文件","@","发送给","进行","代码","name","配置","编译","info","在","super","s","8","python","utf","value","env","parameternode","args","string","class","主","points"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_12","text":"参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。","text_tokens":["易用","大大提高","说干就干","应用","不同","再","如何","使用","环境","每次","阈值","大家","比较","就","过程","对","来看","。","光线","可以","敏感","修改","成","中","也","大大","不如","挺","易用性","是","看","还","参数","识别","我们","程序","设置","运行","么","会","呢","把","的","机器人","物体","，","麻烦","？","机器","先","变化","代码","动态","效果","继续","视觉","提炼","在","已经"," ","了","示例","提高","不是","下","优化"],"title":"案例三：机器视觉应用","title_tokens":["案例","应用","：","机器","三","视觉"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_13","text":"启动三个终端，分别运行： 相机驱动节点 视觉识别节点 修改红色阈值 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180 在启动的视觉识别节点中，我们故意将视觉识别中红色阈值的上限设置为0，如果不修改参数，将无法实现目标识别。 为了便于调整阈值，我们在节点中将红色阈值的限位修改为了ROS参数，通过命令行修改该参数的值，就可以实现视觉识别啦。","text_tokens":["object","该","exe","ros2","detect","upper","：","阈值","就","啦","。","可以","$","修改","180","中","将","上限","无法","实现","set","_","目标","分别","启动","节点","参数","识别","故意","中将","调整","node","驱动","ros","终端","我们","usb","为","设置","运行","为了","param","命令","的","，","如果","红色","red","三个","parameter","相机","不","通过","视觉","值","cam","在","命令行"," ","便于","run","限位","learning","h","实现目标","0"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_14","text":"我们来看下在视觉识别的代码中，是如何通过参数来设置阈值的。 learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], },","text_tokens":["object","hsv","list","receiving","declare","ros2","*","+","-","提示","cv","retr","continue","setup","回调","inrange","#","numpy","所在","xy","/","import","__","互相","表示","关闭","入口","接口","img","90","到","ros","功能","shape","=","打印","py","[","、","左上角","程序","w","计算","findcontours","父类","点画","一些","}","库","cvtcolor","x","者","苹果","如下","宽",".","boundingrect","中心","下限","learning","1","python3","h","0","guyuehome","imshow",",","none","image","upper","detect","如何","：","循环","np","来看","。","com","与","d","知道","<","def","模型","_","目标","bridge","转换","初始","节点","用于","contours","左上","出来","识别","已","去除","node","类","信息","作者","销毁","255","面积","化成","subscription","像素","]","队列","150","消息","后","红色","red","in","颜色","选项","居","太小","转化成","for","二值化","数值","并","系统","示例","话题",":","及","circle","entry","!","10","hierarchy",")","approx","init","2","as","to","get","范围","轮廓","drawcontours","完成","\"","imagesubscriber","console","退出","from","integer","得到","destroy","raw","scripts","chain","是","读取","坐标","需要","包","来","mask","msg","cvbridge","图像处理","sub","usr","if","main","我们","为","处理","的","（","说明","data","，","coding","opencv","(","订阅","bin","parameter","噪声","通过","效果","128","视觉","callback","y","'"," ","日志","输出","{","cnt","bgr8","shutdown","编写","bgr2hsv","加入","下","cv2","create","rclpy","www","）","waitkey","50","array","对象","从","frame","color","古月","使用","阈值","等待","lower","上限","将","180","中","video","上角","让","打开","self","spin","参数","勾勒","5","参数值","点","创建","%","名","设置","logger","listener","函数","param","一个","初始化","bgr","文件","@","图像","检测","进行","代码","name","配置","编译","info","在","super","进入","imgmsg","8","int","python","utf","转化","和","类型","env","value","高","显示","args","长度","msgs","sensor","class","主","points"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["docs","understanding","en","tutorials","parameters","/",".","ros2",":","org","-","humble","html","https","ros"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/","text":"分布式通信 智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。 分布式通信 什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。 分布式网络搭建 除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。 树莓派配置 在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。 装系统 我们先要给树莓派装系统，这里我们选择的是Ubuntu Mate针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/ 安装ROS2 在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。 编译代码 将我们课程的代码也下载到树莓派中，进行编译。 远程桌面 如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728 分布式数据传输 树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。 分布式网络分组 没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。 案例一：小海龟分布式控制 分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动： $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端 案例二：话题分布式通信 我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串： $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端 案例三：服务分布式通信 话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能： $ ros2 run learning_service service_adder_server # PC端 $ ros2 run learning_service service_adder_client 2 3 # 树莓派端 案例四：机器视觉分布式应用 以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体： $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 没有任何问题，视觉识别的效果如下。 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。 参考链接 https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["export","客户端","而是","-","#","$","/","任何","about","world","py","讲过","访问","流程","键盘","笔记","摄像头","者","helloworld","run",".","轻松","建立","虚拟机","四","exe","客户端程序","连接","变得","csdn","卡顿","繁多","远程桌面","桌面","链接","远程","桥接","docs","sd","二","之外","物体","分配","似乎","服务","问题","红色","不","系统","mate","消耗","实时","网络","ubuntu","修改","主要","同一","请","都","我","设计","所","一句","个","树莓","顺利","的","attention","机器","上","订阅","通过","效果","pub","视觉","已经","做","互通","编写","加入","计算能力","搭建","bashrc","像头","没有","download","放","发布者","中","控制器","叫","岂","之间","资源","服务器程序","en","呢","务器","电机","监控","变化","图像","有点","进行","基本","才能","方便","顺利实现","details","两个","试试","和","下来","小","基本一致","以上","不同","就","课程","不在","打通","框架","这","之前","算机","每","功能","直接","程序","确保","这里","一些","只","humble","命令行","小海","learning","发给","烧写","过来","这样","再","小海龟","talker","client","节点","上去","操作","拆解","concepts","运行","反过","服务器","事情","server","不过","并","测试","起来","话题","布式","即可","2","类似","一","频繁","任务分配","采用","可以","实现","更强","讲","article","非常","需要","看上去","平台","来","局域网络","一下","驱动","sub","一致","我们","可能","为","位于","提供","topic","分布式系统","如果","选择","整体"," ","步骤","net","里","很多","并且","看上","放置","安装","小组","放在","your","将","用","笔记本","发布","启动","他们","qq","nodes","还是","方法","全都","性能","domain","service","这种","感器","teleop","经常",">","经典","没","webcam","派里","传输","ros2","电脑","是否","局域网","比较","啦","分布式","demo","作为","传感","端","过","ros","命令","计算","各种","如此","之后","体积","如下","先要","处于","控制","之一","除了","据传","感受","案例","想","3","分布","同一个","好","_","系列","adder","遇到","这些","毕竟","字符","后","而言","一样","适合","参考","流畅","了","显示器","hello","反过来","情况","接下来","摄像","多","资料","加法","例程","数据传输","原本","典型","于是","接下","你","成功","中有","，","针对","继续","上边","不是","下","？","能力","122599728","—","还","学习","字符串","魅力","则","派装","由","一个","笔记本电脑","实际","html","在","cam","只要","仿真器","模式","org","turtlesim","pc","三","采集","派端","环境","模拟","小型","求和","感觉","cpp","https","智能","到","id","计算机","此外","出现","=","、","会","局域","镜像","分组","机制","发生","一切","支持","blog","有","带领","给","一系列","不在话下","真器","开发","较","：","或者","款","比如","。","两者","一系","无法","<","什么","端的","识别","组成","卡中","node","信息","如","另外","运动","usb","神奇","机器人","像","动作","互联","就是","turtle","友好","派","复杂",":","鼠标","装","任务","下载","完成","应用","通信","然后","大家","的话","不够","等","是","依然","减轻","多个","几乎","处理","安排","具体","网上","真有","分布式应用","仿真","使用","这么","简而言之","传感器","也","客户","相互","希望","挺","带来","52785580","数据","压力","海龟","listener","结构","先","代码","配置","编译","用到","显示","key","虚拟","完全"],"title":"分布式通信","title_tokens":["通信","布式","分布","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_1","text":"智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。","text_tokens":["能力","情况","多","放在","分布","任务分配","。","可以","分布式","将","实现","中","卡顿","不够","等","繁多","岂","这","减轻","平台","智能","算机","多个","到","计算机","出现","功能","拆解","压力","遇到","、","会","处理","一个","这些","计算","运行","的","机器人","全都","分配","，","分布式系统","如果","机器","？","上","就是"," ","系统","布式","计算能力","不是","经常","里","任务"],"title":"分布式通信","title_tokens":["通信","布式","分布","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_2","text":"什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。","text_tokens":["派里","不同","传输","电脑","环境","就","比较","分布式","作为","框架","这","任何","之前","传感","算机","到","每","过","计算机","ros","功能","此外","计算","只","各种","笔记","有","带领","体积","控制","之一","开发","感受","较","款","分布","比如","。","好","节点","什么","组成","上去","信息","远程","另外","运动","这些","运行","毕竟","机器人","分配","适合","不","就是","不过","派","了","起来","系统","复杂","布式","任务","消耗","接下来","多","应用","通信","一","大家","采用","可以","实现","更强","讲","原本","非常","等","是","典型","需要","看上去","主要","于是","平台","减轻","都","接下","设计","驱动","我们","可能","为","处理","树莓","位于","的","，","分布式系统","机器","上","视觉","已经"," ","做","上边","下","并且","？","看上","放","放在","将","中","也","传感器","笔记本","相互","挺","控制器","叫","还","之间","资源","数据","魅力","压力","由","一个","结构","电机","笔记本电脑","性能","监控","有点","变化","配置","方便","在","这种","感器","两个","和","下来","小","完全"],"title":"分布式通信","title_tokens":["通信","布式","分布","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_3","text":"除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。","text_tokens":["除了","使用","电脑","模拟","。","笔记本","控制器","平台","我","另外","我们","一个","之外","计算","树莓","的","机器人","，","笔记本电脑","选择","机器","上","笔记","在","派","了","控制","放置"],"title":"分布式网络搭建","title_tokens":["布式","搭建","分布","网络","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_4","text":"在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。","text_tokens":["开发","资料","环境","大家","。","可以","好","也","需要","都","之前","我们","树莓","的","，","先","参考","网上","配置","有","在","派","很多"],"title":"树莓派配置","title_tokens":["树莓","配置","派"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_5","text":"我们先要给树莓派装系统，这里我们选择的是Ubuntu Mate针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/","text_tokens":["下载","：","-","就","ubuntu","可以","。","是","/","启动","卡中","https","到","链接","我们","派装","sd","这里","树莓","的","镜像","，","选择","之后","针对","给"," ","派","了","系统",".",":","org","先要","mate","download","烧写"],"title":"装系统","title_tokens":["系统","装"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#ros2","text":"在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。","text_tokens":["好","在","安装"," ","系统","ros2","的","和","电脑","，","流程","。","一样","端","mate","ubuntu","中"],"title":"安装ROS2","title_tokens":["安装","ros2"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_6","text":"将我们课程的代码也下载到树莓派中，进行编译。","text_tokens":["我们","也","下载","派","树莓","的","，","。","进行","代码","到","编译","课程","将","中"],"title":"编译代码","title_tokens":["代码","编译"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_7","text":"如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728","text_tokens":["以上","连接","使用","电脑","就","大家","：","网络","。","可以","122599728","的话","csdn","也","好","article","_","/","远程桌面","桌面","52785580","https","端","操作","链接","远程","直接","一致","qq","树莓","的","访问","流程","，","如果","上","键盘","基本","参考","整体","配置","不","有","方便","通过","blog","details","在","如下"," ","派","了","显示器","系统","步骤",".",":","鼠标","和","显示","net","基本一致"],"title":"远程桌面","title_tokens":["桌面","远程","远程桌面"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_8","text":"树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。","text_tokens":["派端","ros2","而是","电脑","就","局域网","#","$","打通","demo","感觉","cpp","这","之前","端","算机","到","计算机","直接","确保","py","讲过","、","会","命令","计算","局域","分组","发生","者","命令行","如下","run","虚拟机","处于","这样","连接","：","同一个","。","talker","好","无法","_","节点","什么","如","桥接","神奇","事情","像","后","而言","动作","一样","服务","问题","互联","不","不过","并","测试","派","了","话题","接下来","完成","通信","网络","可以","修改","pc","实现","等","是","需要","同一","平台","都","请","局域网络","接下","一下","所","你","我们","个","为","树莓","的","attention","中有","，","具体","如果","订阅","效果","已经","做"," ","互通","里","很多","并且","？","能力","发布者","安装","小组","使用","简而言之","用","将","中","也","希望","发布","带来","启动","之间","他们","listener","呢","nodes","一个","配置","在","两个","只要","模式","和","下来","虚拟"],"title":"分布式数据传输","title_tokens":["据传","传输","布式","分布","数据传输","数据","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_9","text":"没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。","text_tokens":["export","这样","没","ros2","类似","通信","小组","电脑","：","不同","就","同一个","。","可以","your","将","实现","中","两者","无法","<","_","同一","端的","算机","到","id","计算机","ros","我们","一句","=","则","一个","树莓","计算","的","提供","分组","分配","，","机制","如果","一样","domain","问题","才能","配置","在"," ","派","了",".","和","加入","bashrc","处于",">","即可"],"title":"分布式网络分组","title_tokens":["布式","分组","分布","网络","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_10","text":"分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动： $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端","text_tokens":["过来","派端","仿真","想","案例","通信","ros2","小海龟","电脑","或者","是否","例程","这么","：","分布","网络","。","可以","#","分布式","$","pc","中","也","_","依然","节点","启动","—","之前","学习","来","端","控制","node","过","ros","运动","我们","海龟","成功","树莓","神奇","反过","的","一些","，","似乎","先","上","键盘","继续","流畅","在","turtle","已经","测试"," ","了","派","run","小海","仿真器","布式","teleop","试试","真有","建立","turtlesim","真器","key","经典","反过来"],"title":"案例一：小海龟分布式控制","title_tokens":["海龟","案例","小海","布式","一","小海龟","：","分布","控制","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_11","text":"我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串： $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端","text_tokens":["发布者","派端","情况","通信","ros2","使用","电脑","是否","例程","：","可以","#","修改","$","发布","_","作为","任何","之前","字符串","端","sub","world","直接","我们","呢","树莓","字符","的","topic","，","先","代码","订阅","不","pub","者","在"," ","派","helloworld","run","话题","编写","试试","learning","下","hello","？","pc"],"title":"案例二：话题分布式通信","title_tokens":["案例","二","话题","布式","通信","：","分布","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_12","text":"话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能： $ ros2 run learning_service service_adder_server # PC端 $ ros2 run learning_service service_adder_client 2 3 # 树莓派端","text_tokens":["派端","客户端","客户端程序","ros2","电脑","加法","：","3","。","可以","不在","实现","$","#","也","客户","求和","_","client","端","服务器程序","功能","我们","程序","adder","运行","2","树莓","还是","顺利","服务器","务器","，","server","服务","问题","service","顺利实现"," ","run","话题","learning","不在话下","没有","pc"],"title":"案例三：服务分布式通信","title_tokens":["案例","通信","布式","分布式","：","分布","服务","三"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_13","text":"以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体： $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 没有任何问题，视觉识别的效果如下。 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。","text_tokens":["以上","采集","没","派端","webcam","ros2","电脑","模拟","啦","小型","#","分布式","$","任何","端","ros","功能","会","如此","一切","支持","摄像头","如下","run","轻松","一系列","learning","发给","开发","exe","再","连接","：","分布","。","变得","一系","好","_","节点","端的","识别","node","usb","系列","这些","机器人","物体","红色","问题","不","友好","测试","派","了","系统","复杂","布式","实时","接下来","摄像","类似","频繁","然后","例程","网络","可以","修改","非常","不够","需要","都","接下","几乎","sub","我们","为","处理","安排","树莓","的","提供","topic","，","上","机器","通过","效果","视觉"," ","做","搭建","像头","没有","？","使用","将","中","也","还","一个","方法","图像","实际","代码","配置","cam","在","用到","只要","下来","pc"],"title":"案例四：机器视觉分布式应用","title_tokens":["四","案例","应用","布式","：","机器","分布","分布式应用","分布式","视觉"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_14","text":"https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["docs","en","concepts","/",".",":","org","-","humble","about","https","html","domain","id","ros"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2_%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/","text":"从本节开始，我们将进入第二个篇章，以ROS2的核心概念为线索，详细讲解ROS2的应用开发方法。","text_tokens":["开发","应用","ros2","第二个","开发方法","篇章","。","第二","开始","将","概念","详细","我们","为","线索","方法","的","，","讲解","从本节","核心","进入","以","本节","二个"],"title":"核心概念","title_tokens":["概念","核心"]}]}