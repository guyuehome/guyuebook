{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的电气时代。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的数字时代，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发，智能机器人时代正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。 教程链接 课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 博客泡泡： https://www.guyuehome.com/ 教程问答： https://www.guyuehome.com/bubble/index 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 参考资料： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["操作","agv","大","状","_","参考","计算机","参考资料","码","依然","2000","智能","感知","https","此时","劳动","源码","。","robot","爆发","八十"," ","我们","发展","伺服","要求","并","智能化","视频","人类","出现","必将","guyuehome","主要","俗称","、","送餐","没有","高","更加","成为","动作","这","有限","人工","但是","机器人","四足","拉开","控制器","提出","而言","不过","过程","八十年","工业","github","呈","驱动","十年","和","劳动力","教程","重要","最为","课程","层面","book","：","技术","传感器","丰富","baidu","后","序幕","视觉","工厂","com","汽车","的","驾驶","伺服电机","/","载体","于","七八十","计算","最佳","减速机","业生","年前","动力","也","随着","前夜","软件","数字","链接","时代","提取","应用","算机","图文","思考","环境","人工智能","电机","pan","之后","狗","多","了","传感","局部","index","更","服务","之一","七八","2015","检测","井喷","gitee","博客","经历","问答","1dvxugmhxlxnsnfdezuxw0g","21","tutorials","命令","快速","关注","s","帮助","类型","热点","工业生产","这是","system","控制","教器","太","ros2","就是","正式","按照","自动","不断","www","释放","只能","主角","感器","操控","生产","等","操作系统","驱动器",":","七八十年","—","减速","仿生","由示","设备","bubble","ai","时期","逐渐","开发","系统","执行","拉开序幕","operating","自主","三个","对","class","，","电气","年","exc6","机器","横跨","资料","泡泡",".","是","完全","家庭","缺少","不断丰富"],"title":"引言","title_tokens":["引言"]},{"location":"#_1","text":"课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 博客泡泡： https://www.guyuehome.com/ 教程问答： https://www.guyuehome.com/bubble/index 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 参考资料： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["参考资料","_","参考","教程","www","pan","课程","https","book","源码","："," ",":","baidu","index","视频","bubble","com","guyuehome","gitee","博客","问答","1dvxugmhxlxnsnfdezuxw0g","/","21","tutorials","class","s","exc6","链接","ros2","提取","资料","泡泡",".","图文","github","码"],"title":"教程链接","title_tokens":["教程","链接"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["不得","交流学习","追究","用户","将","赋能","上述","图书","源码","。","创新"," ","线上","知名","学习","违反","明者","校企","致力于","使用","视频","销售","guyuehome","、","出版","面向","究其","小时","超过","一体","有限","机器人","2011","至今","进行","未经","对本","众多","建立","1000","和","其它","平台","高校","人才培养","声明","课程","面向未来","brand","交流","版权","）","集","科技","（","社区","高质量","《","合作","抄录","产品","复制","com","的","高质","书面","实践","依法","构建","内容","法律责任","》","声明者","被","传播","优质","本","作品","古月","课件","有权","任何","创建","致力","或","联系","不","模式","仅限","许可","合法","通过","请","@","限于","提供","有限公司","如需","120","企业","培养","未来","拥有","ros","人才","努力","为","万人","包括","华语","+","所有","微控","及","畅销","武汉","修改","居","www","网站","法律","生态","单位","个人","等","均","学习者","精锋","责任","捆绑","但","上","累积","学","ai","地区","开发","授权","，","镜像","追究其","与","年","公司","机器",".","是","质量","万字"],"title":"关于教程","title_tokens":["教程","关于"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["交流学习","用户","赋能","图书","。","创新"," ","线上","知名","学习","校企","致力于","视频","guyuehome","、","出版","面向","小时","超过","一体","机器人","2011","至今","众多","建立","1000","平台","高校","人才培养","课程","面向未来","交流","）","集","（","社区","高质量","《","合作","com","的","高质","实践","构建","内容","》","优质","古月","创建","致力","模式","通过","提供","120","企业","培养","未来","ros","人才","努力","为","万人","华语","+","及","畅销","居","www","生态","等","学习者","累积","ai","地区","开发","，","与","年","机器",".","是","质量","万字"],"title":"学机器人，上古月居","title_tokens":["居","机器","上","学","，","古月","机器人"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["不得","追究","用户","将","上述","源码","。"," ","学习","违反","明者","使用","视频","销售","guyuehome","、","究其","有限","进行","未经","对本","和","其它","声明","brand","课程","版权","科技","抄录","产品","复制","com","的","书面","依法","法律责任","声明者","被","传播","本","作品","古月","课件","有权","任何","或","联系","不","仅限","许可","合法","请","@","限于","有限公司","如需","拥有","为","包括","所有","微控","武汉","修改","居","网站","法律","单位","个人","等","均","精锋","责任","捆绑","但","授权","，","镜像","追究其","与","公司","."],"title":"版权声明","title_tokens":["版权","声明"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/","text":"ROS/ROS2是什么 智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。 ROS的诞生 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS的发展 ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称ROSCon，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。 ROS的特点 ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的应用案例在社区中沉淀下来； ROS本身也是完全开源的，商业许可证非常宽松； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品，缩短了产品的上市时间； ROS也可以跨平台使用，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多支持工业应用的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。 参考资料 关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["针对","一大笔钱","价格","掀起","风险","用户","智能","原本","宽松","人","板块","此时","robot","历经","由","还有","绝对","低","剪头发","玩耍","人数","使用","到","主要","限性","神兵","没有","实验室","可能","希望","很多","存储","项目","野蛮","集合","尝试","一系列","用于","美妙","这一波","类似","turtlebot","当初","packages","willow","不仅","来自","引擎","更好","让","人形","图","整理","xbox","模块化","15","总称","一群","性能","不同","各种各样","繁荣","在","如果","数据","迎来","底盘","传感器","方向","快","新鲜","conference","浏览量","高效","产品","组成","官方","入门","的","一下","问题","长远","很","百科全书","外观","每年","多媒体","因","kinect","动力","做","入门教程","资源","软件","选择","部件","用","叫做","电脑","应用","暴露","此","亚马逊","后续","提问","当时","以","跟随","实验","无聊","找到","给","作为","一大步","好","设计","对于","第一个","迅猛","说干就干","向前走","开始","智慧","游戏","曲线","发表","时间轴","体感","快速","ubuntu","增长","帮助","大大","system","支持","开发工具","别人","2014","访问量","想法","居","情况","加上","手机","ros1","感器","重量","嵌入式","物体","生态","五年","为例","时候","初期","同学","局限","大笔","只要","齐聚一堂","有人","叠","两年","逐渐","着","回到","左右","系统","2","轮子","windows","强悍","这款","加快","同一","这里","单独","结晶","没想","下来","容易","年","一步","什么","万左右","横跨","今日","可为",".","不是","2010","毛巾","提高","大","时至今日","大学","斯坦福大学","做饭","向前","数据库","动机","标志","制造","。","讲解","家","统统","搜索","领域","多年","新增","又","100","没想到","humble","却步","视频","通常","2007","论坛","诞生","简单","怀揣","笔记本电脑","机器人","疫情","重量级","挑战","直到","b","款","终于","浏览","平台","维基","各项","便宜","不多","差不多","课程","其中","普及","各种","原型","跨平台","之王","趋势","代","成功","活跃","/","围绕","几百","模块","推荐","全人类","详细","最佳","内容","一起","随着","其他","方法","专业","日常","来到","所有人","方式","只","全书","上去","而且","稳定","百科","推进","任何","几百万","万","处理","之","成熟","年轻人","条","了","传感","洗衣","各样","早期","通过","扩展","提供","频繁","2015","首先","索引","全球","120","总而言之","几个","一系","问答","world","该","微软","神秘","算是","大有可为","这群","不开","40","进入","框架","人才","ros2","讨论","打","媒体","一套","这些","要","头发","踏上","5","不断","a","受限","具备","高度","等","聊天","现在","实现","来讲","全球化","150","而","解决","起点","有没有","真的","许可证","之上","新","，","衣服","受限于","图中","沉淀","普遍","才","泡泡","移动","肩负着","上边","所以","intel","配合","从中","查看","跑","之旅","自身","维基百","亚马","名称","熟悉","answers","革命","广泛","来看","维基百科","源码","体系","线上","成果","看到","我们","欢迎","发展","关于","场景","电路","加","充足","智能化","总体","、","生态系","一切","正式版","既然","完成","光靠","应用软件","成为","确定","事情","效率","四项","中","联合","精致","进行","至今","而言","这样","过程","面纱","工业","正在","github","变为","garage","来","元素","和","上图","居高不下","功能","臂","接下来","重要","最为","利器","掌握","层面","想到","同样","绝大部分","不到","生态系统","pr2","得到","2022","几年","木头","干","排名","discourse","改为","？","部分","研发","资本","只想","于","复合","望而却步","2012","整合","特性","游戏机","还是","无论是","认识一下","肩膀","团队","为了","一家","注意","台球","等等","度","提取","同时","统计","越来越","目标","远","古月","版本","了解","世界","roscon","从","你","创始","效果","第一","许可","给出","举办","多","斯坦福","出来","多媒体系统","一大","不断更新","长期","最后","水下","投了","两个","零部件","服务","更","每","分享","站","分钟","2017","记录","他们","经历","四大","每个","圈","推动","地域","；","研究","虽然","下","ros","扫地","这位","控制","以叠","包","主阵地","80","年轻","正式","为","万人","月底","有志","这个","起来","工程师","特点","wiki","商业","笔记","相关","然后","造","身影","个人","呢","因为","很快","代码","不下","基本","得以","—","一段","真正","进化","本身","局限性","c","绝大","万万","棒","零","一次","大家","学术","肯定","更为","年底","接下","一堂","公司","会","根据","如何","一些","系列","关键","近两年","以上","是","其实","基本上","操作","福大","做法","参考资料","参考","巨人","答案","将","第一次","代表","全人"," ","采购","据库","此后","核心","学习","或者","开源","机械","并","250","爆款","下载","人类","不乏","后期","有","适用","一定","这","上市","收拾","采用","多万","步伐","提出","但是","前","就","2011","全","personal","巨大","青年","进步","成本","乐意","程度","20","深知","正如","柔性","教程","都","缩短","同年","几乎","其次","：","使命","技术","增长速度","资金","托管","开发者","还","独立","做到","浪潮","社区","离不开","苹果","25","促使","汽车","工具","率","为什么","做出","基于","投资","笔记本","认识","个","可以","也","看中","知识","被","说明","时代","已有","更新","量级","最高","页面","本","一样","尽量","linux","同理","一款","无疑","移动机器人","熨烫","之内","轰动","明智","google","版","通信","张图","不","那","“","陪","限于","商业化","index","创意","访问","直接","一届","大步","多项","而生","大会","介于","嵌入","”","阵地","百万","发布","复杂","速度","这是","把","大量","涉及","就是","努力","已经","回答","所有","迭代","工程","重新","却","友好","非常","风险投资","比如","机制","网站","新鲜事","org","不要","标准","助推","次数","无论","操作系统","起","国家","简称","虽好","一个","复用","嘉宾","啦","上","做成","清晰","带领","所学","自己","近几年","开发","大部","向","operating","肩负","对","软件系统","价格便宜","能够","全新","月","甚至","一大笔","机器","大部分","资料","时间","活动","完全","推出","越来","案例","活跃度","不想","原因"],"title":"ROS和ROS2是什么","title_tokens":["和","什么","ros2","是","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#rosros2","text":"智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。","text_tokens":["操作","掀起","接下来","重量","智能","那","高度","了","。","呢","操作系统"," ","又","方向","我们","场景","嘉宾","智能化","带领","进化","？","的","一下","开发","而生","系统","神秘","这","向","对","认识","，","一起","提出","认识一下","机器人","ros","下来","就","大家","这位","中","接下","全","机器","什么","时代","ros2","挑战","重量级","巨大","应用","面纱","是","量级","正在"],"title":"ROS/ROS2是什么","title_tokens":["/","什么","ros2","是","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。","text_tokens":["操作","福大","大学","斯坦福大学","针对","做饭","答案","向前","第一次","智能","人","此时","。","robot","家"," ","看到","低","我们","剪头发","或者","100","玩耍","机械","并","电路","充足","后期","有","、","没有","实验室","可能","一切","很多","既然","完成","光靠","2007","应用软件","这","诞生","收拾","成为","尝试","事情","一系列","但是","机器人","用于","就","类似","效率","精致","联合","中","personal","这样","图","青年","整理","款","深知","和","柔性","平台","功能","一群","都","性能","重要","在","层面","如果","其中","：","技术","同样","资金","不到","还","独立","原型","pr2","高效","木头","干","苹果","组成","？","代","的","问题","很","为什么","做出","基于","外观","个","一起","可以","因","团队","也","做","软件","台球","专业","部件","所有人","用","应用","只","越来越","而且","一款","熨烫","之内","轰动","处理","你","当时","那","不","给出","第一","条","斯坦福","了","出来","实验","洗衣","无聊","找到","一大","多","最后","陪","一大步","零部件","服务","更","设计","分享","分钟","对于","他们","大步","一系","而生","说干就干","圈","向前走","推动","研究","虽然","帮助","ros","复杂","以叠","框架","涉及","就是","打","已经","一套","所有","有志","这个","别人","要","却","想法","非常","头发","5","手机","从中","标准","物体","个人","等","呢","为例","操作系统","因为","时候","初期","很快","聊天","得以","—","实现","一个","上","只要","有人","叠","自己","开发","系统","2","有没有","真的","强悍","这款","同一","软件系统","一次","，","容易","大家","年","甚至","肯定","学术","衣服","图中","机器","什么","如何","横跨","一些","才","系列","不是","是","所以","越来","毛巾","不想"],"title":"ROS的诞生","title_tokens":["的","诞生","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_1","text":"ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称ROSCon，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。","text_tokens":["操作","福大","大","大学","斯坦福大学","一大笔钱","价格","亚马","名称","风险","熟悉","标志","原本","人","。","robot","历经","讲解"," ","线上","多年","此后","我们","发展","没想到","开源","humble","却步","使用","爆款","到","不乏","后期","、","限性","适用","正式版","成为","这","2007","项目","野蛮","诞生","采用","确定","步伐","提出","但是","机器人","笔记本电脑","就","类似","turtlebot","前","当初","willow","2011","中","来自","疫情","不仅","进行","让","过程","直到","款","成本","xbox","变为","终于","garage","和","居高不下","教程","功能","便宜","同年","各种各样","重要","在","其中","想到","普及","使命","迎来","底盘","传感器","各种","绝大部分","开发者","原型","pr2","conference","2022","几年","intel","改为","官方","的","成功","问题","部分","资本","只想","于","几百","投资","笔记本","望而却步","2012","每年","游戏机","可以","kinect","也","团队","随着","做","为了","看中","一家","软件","注意","被","时代","提取","电脑","叫做","暴露","应用","越来越","亚马逊","本","一样","稳定","一款","版本","几百万","了解","roscon","从","版","成熟","创始","年轻人","第一","举办","多","斯坦福","了","传感","跟随","一大","出来","给","各样","早期","长期","限于","投了","更","每","服务","分享","设计","2015","直接","2017","他们","一届","全球","第一个","经历","开始","圈","world","每个","该","游戏","微软","大会","时间轴","介于","这群","体感","推动","快速","ubuntu","增长","百万","下","发布","ros","扫地","大大","这是","system","控制","进入","把","ros2","支持","年轻","正式","为","已经","所有","迭代","月底","这个","2014","商业","风险投资","笔记","5","加上","感器","身影","助推","受限","个人","等","因为","很快","操作系统","起","五年","不下","简称","现在","—","虽好","局限","大笔","一个","真正","齐聚一堂","两年","而","自己","逐渐","开发","着","回到","系统","起点","大部","局限性","绝大","万万","加快","operating","肩负","这里","之上","价格便宜","单独","，","没想","能够","全新","年","一大笔","受限于","一堂","年底","公司","机器","会","大部分","关键","近两年","时间","是","肩负着","2010","所以","推出","越来","原因"],"title":"ROS的发展","title_tokens":["的","发展","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_2","text":"ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的应用案例在社区中沉淀下来； ROS本身也是完全开源的，商业许可证非常宽松； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品，缩短了产品的上市时间； ROS也可以跨平台使用，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多支持工业应用的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["做法","时至今日","跑","巨人","自身","向前","动机","将","智能","代表","宽松","广泛","制造","全人","。","统统","家","体系","由","领域"," ","采购","成果","新增","看到","我们","核心","发展","开源","机械","并","使用","智能化","人类","到","有","、","生态系","很多","成为","通常","这","上市","简单","集合","怀揣","用于","机器人","就","至今","引擎","中","人形","这样","b","进步","工业","来","和","正如","模块化","平台","总称","功能","都","缩短","臂","繁荣","各种各样","在","：","技术","各种","还","生态系统","做到","社区","跨平台","产品","组成","促使","汽车","的","长远","工具","率","部分","复合","围绕","模块","全人类","整合","特性","多媒体","一起","还是","无论是","可以","肩膀","也","做","一家","软件","被","已有","同时","此","应用","目标","越来越","上去","远","尽量","同理","linux","推进","移动机器人","明智","之","从","通信","那","许可","以","多","了","“","多媒体系统","各样","给","水下","最后","商业化","创意","更","站","分享","设计","直接","他们","全球","多项","四大","向前走","智慧","快速","嵌入","”","；","ros","把","人才","ros2","就是","媒体","支持","已经","开发工具","重新","这些","这个","别人","特点","友好","商业","非常","比如","机制","a","造","ros1","嵌入式","不要","身影","标准","具备","生态","无论","实现","一个","来讲","复用","全球化","上","做成","本身","自己","开发","着","c","系统","轮子","windows","许可证","零","这里","结晶","对","新","，","下来","大家","沉淀","公司","机器","会","普遍","一步","今日","时间","移动","不是","是","完全","越来","案例","提高"],"title":"ROS的特点","title_tokens":["的","特点","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_3","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。","text_tokens":["大","参考","维基百","数据库","用户","answers","代表","来看","革命","维基百科","源码","人","。"," ","据库","绝对","看到","我们","核心","发展","学习","关于","人数","加","250","使用","下载","到","有","总体","、","神兵","希望","很多","存储","成为","这","论坛","多万","提出","机器人","这一波","就","packages","四项","中","而言","正在","乐意","程度","浏览","20","元素","和","上图","15","教程","维基","各项","功能","都","不同","重要","在","最为","不多","差不多","其中","如果","利器","：","数据","各种","增长速度","绝大部分","开发者","快","新鲜","得到","浪潮","浏览量","社区","几年","趋势","25","排名","discourse","？","的","问题","活跃","很","部分","研发","整合","最佳","可以","动力","也","其他","资源","说明","日常","等等","度","选择","方式","应用","统计","最高","页面","越来越","本","无疑","百科","任何","万","从","你","张图","不","多","了","给","通过","作为","index","两个","访问","每","记录","频繁","索引","全球","迅猛","总而言之","几个","问答","每个","曲线","发表","算是","大有可为","快速","地域","；","增长","40","发布","ros","速度","这是","讨论","包","就是","80","已经","回答","万人","这些","起来","访问量","wiki","非常","相关","比如","情况","网站","新鲜事","org","次数","助推","呢","等","国家","基本","现在","一个","上","清晰","150","近几年","开发","左右","大部","绝大","棒","这里","新","，","月","大家","更为","会","万左右","什么","大部分","机器","根据","可为",".","以上","是","上边","活动","其实","基本上","越来","活跃度","查看"],"title":"ROS的社区","title_tokens":["的","社区","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#_1","text":"关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["参考资料","参考","之旅","将","板块","。","还有","搜索"," ","我们","欢迎","学习","关于","开源","使用","视频","有","主要","一定","成为","这","项目","美妙","机器人","更好","中","github","和","教程","都","重要","最为","几乎","在","掌握","课程","其次","技术","托管","绝大部分","还","社区","之王","离不开","入门","的","工具","问题","部分","百科全书","推荐","详细","内容","一起","可以","也","方法","入门教程","知识","来到","更新","全书","本","后续","古月","百科","提问","世界","google","从","你","效果","找到","不断更新","扩展","作为","最后","提供","好","分享","首先","120","几个","开始","不开","阵地","ros","大量","ros2","努力","主阵地","万人","所有","工程","工程师","这个","要","居","踏上","然后","不断","网站","代码","同学","—","一个","一段","啦","所学","解决","开发","大部","绝大","这里","，","大家","会","机器","大部分","资料","泡泡","是","配合"],"title":"参考资料","title_tokens":["资料","参考资料","参考"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/","text":"ROS2对比ROS1 在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。 ROS1的局限性 首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。 全新的ROS2 ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。 ROS2 vs ROS1 系统架构 在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。 DDS通信 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。 核心概念 ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。 编码方式 再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。 命令行 最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随课程，你就会慢慢理解这些特性。","text_tokens":["至关","针对","自家","用户","风险","原本","智能","行人","换成","还有","前方","指挥","要求","便于","discovery","网络","使用","到","布式","主要","限性","面向","有且","没有","高","可能","部头","很多","标准化","项目","更换","运行","配置","运算","总结","用于","面对","下要","阶段","类似","更好","暂且","不仅","定性","让","里","差异","应该","省略","应用层","收","性能","不同","各种各样","先","在","如果","大幅度","作战","数据","联网","所示","毛坯房","面向对象","最终","过去","程序","它","陆续","产品","总之","编译器","指定","的","驾驶","问题","一下","长远","远比","格局","catkin","房子","python3","动力","做","角色","资源","软件","经常","更接","选择","可移植性","信息","先进","用","电脑","应用","毛坯","节点","叫做","依赖","环境","课时","后续","如","内","简单明了","或","诟病","run","c++","发现","似乎","之后","跟随","库会","是因为","找到","给","家庭","启动","乱麻","产品开发","好","稍安","接收","伙伴","设计","对于","第一个","当","条件","干扰","架构","开始","解算","动力学","交道","致使","可选项","系统工程","网络连接","小伙","以及","topic","加密","master","支持","算力","按照","ros1","之前","满足","需要","手机","高昂","嵌入式","强","python","原有","慢慢","时候","移植","考虑","局限","厂商","不用","只要","udp","良好","走向市场","选项","系统","图片","windows","减少","多个","这里","例子","较","wifi","以下","发布者","消费","用到","middleware","一步","什么","小伙伴","真实","不是","最","最大","编译","之外","一团","opensplice","提高","大","诸多","过来","管理","依然","更具","推倒重来","。","讲解","走向","含义","一团乱","5g","安全","搬","出现","道坎","话题","软件开发","除此","信号","诞生","简单","一行","各位","怀揣","有限","上手","机器人","分布式","想要","控制器","电脑系统","之初","周期","黑客","挑战","新一代","重来","性","款","导致","适配","驱动","揭秘","右侧","平台","底层","编码方式","课程","再","其中","普及","各种","大幅","以下几点","体验","深入","（","跨平台","后","切换","能","一本","成功","/","不爽","几百","实力","这台","amr","航天","表示","符合","确实","最佳","得","上升","随着","一代","方法","其他","唯一","很大","而已","方式","交给","稳定","任何","几百万","实时","处理","足够","继续","了","各样","通过","优化","提供","名字","有线","频繁","升级","首先","全球","搭载","受制于","相比","该","api","放在","比","保留","国际标准","明显","对比","最早","保证","类型","分散","怎样","框架","ros2","提","一套","实时性","这些","要","工作","不断","不好","全部","主角","通信接口","具备","某","纠结","二种","大部头","等","能力","行为","分解","成功经验","入侵","二代","实现","tcp","来讲","发送","但","完善","而","解决","第二个","难度","除了","单兵作战","之间","第二代","基本保障","之上","第二种","运动","1ms","，","涌现","一致","与","总体而言","受制","只有","会成","可读性","基础","客户端","大致","协议","所以","名称","熟悉","调试","来看","广泛","过","方案","面临","多功能","消失","我们","发展","场景","适合","无法","充足","迈过","可选","总体","现有","、","到底","一一","批量","主","开发方式","编程","完成","单兵","需求","why","两者","运动学","客户","对象","移植性","发成","中","进行","内部","调用","不过","而言","小","这样","过程","听","集成","协作","间层","来","和","功能","重要","最为","勿躁","层面","轻松","内存","颠覆性","同样","绝大部分","交付","一边","pr2","延迟","盖","级别","具体","保障","？","借助","部分","研发","于","图像","力学","接入","听说","定义","特性","举","为了","注意","一家","可读","同时","目标","越来越","不难","去","从而","担心","流程","版本","了解","不能","突然","从","你","一页","售价","时","第一","出错","ament","多","建筑","请","迁移","最后","fastrtps","只不过","两个","更","服务","也许","分布","完整性","对系统","语言","每","初次","他们","广泛应用","个体","vs","每个","企业","命令","；","未来","看","研究","虽然","理器","下","项目管理","ros","管理器","自","整体","控制","为","还会","macos","这个","变革","自动","产品化","角度","看看","商业","相关","尽力","翻地","然后","历史使命","是否","彼此","因为","呢","生产","通用","代码","基本","可靠","国际","—","第二","担忧","编程语言","真正","中间层","学","精力","rosbuild","局限性","一旦","么","绝大","工作站","陌生","命令行","三个","意义","概念","大家","学术","肯定","会","公司","如何","一些","以上","是","其实","接近","共享内存","操作","一团乱麻","没","答案","策略","接口","将","属性","rtos","复杂度","当然","宕机","开发成本","他"," ","借鉴","核心","学习","或者","ceo","rmw","开源","完整","并","新版","丢","哪些","有","一定","适用","封装","更加","这","测试","市场","但是","不难理解","就","可移植","通信协议","全","加入","带来","巨大","中间","消费市场","成本","建立","干掉","安全性","厂家","雷达","mcu","教程","印象","都","几乎","物","左侧","：","使命","）","理解","开发者","还","丰富","独立","层","做到","社区","编写","变化","打成","专注","部署","相对","不太","汽车","工具","率","为什么","基于","至关重要","计算","变得","下边","不断涌现","推倒","可以","尤其","也","经验","通用性","说明","链接","只是","时代","另外","成","常","本","linux","尽量","一样","发","一款","dds","通信","张图","不","那","装修","最新","解密","安装","方便","批量生产","走","微控制器","常用","翻新","连接","直接","由于","历史","嵌入","一种","不会","百万","二个","地方","发布","复杂","把","大量","幅度","写","就是","已经","所有","工程","结合","重新","几点","rostopic","另","修改","进程","非常","比如","机制","学术研究","切记","只能","接触","完","100ms","标准","不要","共享","灵活","colcon","android","无论","操作系统","颠覆","编译系统","简称","编码","稳定性","一个","复用","除此之外","啦","上","设备","做成","改","存在","带领","生活","自己","开发","大部","千差万别","对","打交道","软件系统","天翻地覆","强壮","能够","全新","是从","甚至","rosrun","细节","机器","不再","大部分","不够","可靠性","时间","体现","越来","即可"],"title":"ROS2对比ROS1","title_tokens":["ros1","ros2","对比"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2ros1","text":"在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。","text_tokens":["看看","大","和","或","之前","ros1","从","名称","你","在","不","来看","其中","多","过","。"," ","我们","学习","第二","二代","一个","也许","变化","使用","上","能","有","？","的","到底","第二代","么","听说","这","，","对比","ros","就","做","ros2","就是"],"title":"ROS2对比ROS1","title_tokens":["ros1","ros2","对比"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros1","text":"首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。","text_tokens":["针对","答案","风险","原本","来看","当然","。","走向","他"," ","我们","发展","或者","网络","并","适合","充足","丢","出现","有","批量","没有","更加","完成","这","单兵","运行","诞生","why","市场","运算","有限","用于","但是","机器人","就","类似","中","内部","小","这样","让","黑客","新一代","款","成本","和","平台","都","课程","在","：","普及","作战","数据","各种","绝大部分","独立","最终","pr2","它","产品","级别","具体","？","汽车","的","驾驶","问题","部分","为什么","实力","计算","这台","航天","不断涌现","可以","也","随着","为了","一代","资源","软件","先进","用","应用","目标","一款","实时","处理","从","足够","通信","似乎","售价","第一","那","不","了","是因为","找到","批量生产","服务","有线","设计","首先","连接","第一个","搭载","条件","干扰","由于","历史","嵌入","；","致使","研究","虽然","地方","最早","ros","保证","复杂","网络连接","类型","框架","ros2","就是","支持","已经","算力","要","自动","工作","比如","翻地","不断","ros1","学术研究","只能","主角","高昂","嵌入式","具备","因为","呢","生产","能力","可靠","—","入侵","担忧","一个","不用","设备","做成","上","自己","开发","良好","走向市场","系统","单兵作战","大部","绝大","工作站","天翻地覆","，","涌现","学术","甚至","会","机器","什么","大部分","不够","一些","可靠性","时间","是","家庭"],"title":"ROS1的局限性","title_tokens":["的","限性","局限性","ros1","局限"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2","text":"ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。","text_tokens":["针对","风险","智能","行人","原本","前方","要求","网络","使用","到","布式","没有","可能","很多","标准化","项目","运行","用于","面对","下要","阶段","类似","不仅","定性","让","差异","性能","不同","各种各样","在","数据","毛坯房","最终","过去","它","产品","编译器","的","驾驶","一下","长远","问题","远比","格局","catkin","房子","python3","动力","角色","软件","经常","选择","用","电脑","毛坯","应用","节点","叫做","环境","课时","后续","内","c++","发现","给","好","设计","第一个","架构","解算","动力学","系统工程","网络连接","以及","加密","master","算力","ros1","满足","手机","需要","强","python","原有","时候","移植","考虑","不用","系统","windows","较","wifi","以下","消费","不是","编译","大","诸多","管理","更具","推倒重来","。","走向","安全","出现","信号","简单","怀揣","机器人","分布式","控制器","电脑系统","之初","周期","黑客","挑战","重来","性","导致","平台","课程","各种","以下几点","体验","（","跨平台","后","能","成功","amr","最佳","得","方法","很大","稳定","任何","实时","继续","了","各样","优化","提供","升级","搭载","受制于","相比","api","比","保留","明显","怎样","框架","ros2","提","实时性","这些","要","工作","不好","全部","具备","纠结","二种","等","行为","分解","成功经验","入侵","实现","发送","但","除了","之间","基本保障","之上","第二种","运动","1ms","，","与","受制","基础","所以","调试","来看","方案","面临","我们","场景","适合","无法","、","完成","需求","运动学","中","进行","这样","协作","和","层面","颠覆性","盖","保障","具体","？","借助","研发","于","力学","特性","为了","同时","越来越","去","流程","不能","第一","出错","ament","多","建筑","两个","更","语言","分布","完整性","对系统","他们","个体","未来","虽然","理器","下","项目管理","ros","管理器","控制","为","还会","macos","这个","变革","自动","产品化","尽力","历史使命","通用","呢","代码","基本","可靠","第二","真正","rosbuild","一旦","大家","肯定","会","如何","是","操作","策略","接口","rtos","宕机"," ","借鉴","或者","完整","并","新版","有","一定","更加","这","测试","市场","但是","就","全","巨大","消费市场","安全性","mcu","都","：","使命","）","开发者","还","独立","做到","编写","变化","打成","部署","相对","汽车","工具","推倒","可以","尤其","也","经验","通用性","说明","链接","只是","时代","linux","尽量","一款","dds","通信","不","装修","那","最新","解密","方便","微控制器","翻新","连接","直接","历史","一种","不会","复杂","把","大量","就是","已经","所有","工程","结合","几点","重新","修改","比如","机制","100ms","标准","colcon","android","无论","操作系统","颠覆","编译系统","稳定性","一个","上","生活","自己","开发","千差万别","对","强壮","能够","全新","甚至","细节","机器","不再","体现","越来"],"title":"全新的ROS2","title_tokens":["的","ros2","全新"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2-vs-ros1","text":"","text_tokens":[],"title":"ROS2 vs ROS1","title_tokens":[" ","ros1","vs","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_1","text":"在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。","text_tokens":["操作","至关","一团乱麻","管理","接口","将","rtos","过","。","消失"," ","指挥","一团乱","我们","学习","ceo","discovery","并","哪些","可选","有","主要","、","有且","封装","更加","很多","这","更换","简单","两者","客户","不难理解","就","类似","通信协议","中","调用","进行","不过","让","里","这样","应该","中间","听","建立","驱动","间层","应用层","和","雷达","右侧","印象","底层","都","先","重要","在","再","如果","左侧","数据","内存","理解","深入","层","程序","它","变化","不太","的","图像","基于","至关重要","变得","下边","得","可以","也","方法","角色","注意","信息","另外","应用","节点","成","而已","方式","依赖","不难","从而","后续","一样","linux","稳定","内","简单明了","了解","dds","突然","发现","通信","张图","不","那","安装","了","库会","找到","请","通过","走","乱麻","提供","好","只不过","接收","名字","频繁","连接","架构","开始","交道","看","可选项","明显","理器","自","ros","管理器","发布","复杂","对比","整体","把","大量","框架","ros2","master","就是","写","一套","所有","这些","macos","这个","进程","比如","机制","ros1","需要","接触","通信接口","标准","共享","彼此","操作系统","时候","—","一个","tcp","但","中间层","上","完善","而","udp","开发","选项","系统","windows","打交道","，","是从","大家","肯定","只有","会成","公司","会","客户端","大致","协议","是","最","共享内存","一团"],"title":"系统架构","title_tokens":["架构","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#dds","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。","text_tokens":["提高","过来","自家","用户","接口","属性","熟悉","复杂度","广泛","当然","开发成本","。","还有"," ","5g","我们","rmw","开源","场景","并","无法","丢","、","适用","高","更加","这","更换","配置","需求","简单","一行","想要","机器人","就","类似","通信协议","发成","中","不过","加入","这样","让","带来","应该","适配","成本","省略","厂家","收","功能","性能","都","不同","底层","先","在","再","层面","物","如果","轻松","数据","联网","各种","丰富","交付","程序","延迟","社区","产品","变化","切换","专注","总之","部署","指定","？","的","问题","率","部分","/","不爽","于","基于","接入","听说","定义","符合","得","举","可以","也","做","其他","为了","一家","软件","唯一","选择","用","应用","目标","常","一样","发","交给","稳定","版本","诟病","dds","通信","时","不","多","了","安装","给","优化","fastrtps","产品开发","提供","好","更","每","频繁","设计","对于","广泛应用","相比","每个","该","其实","放在","一种","国际标准","ros","复杂","加密","把","ros2","master","就是","写","为","按照","重新","这个","这些","要","另","商业","比如","然后","ros1","满足","完","标准","某","灵活","纠结","是否","等","代码","移植","简称","基本","国际","实现","tcp","一个","厂商","复用","来讲","不用","只要","改","精力","udp","解决","除了","开发","系统","么","减少","多个","这里","软件系统","例子","三个","，","能够","肯定","middleware","会","机器","如何","一些","最","协议","是","不是","所以","最大","之外","opensplice"],"title":"DDS通信","title_tokens":["dds","通信"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_2","text":"ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。","text_tokens":["非常","和","几百万","ros1","从","依然","熟悉","课程","在","不","几乎","广泛","其中","如果","本","了","。","讲解","含义","过"," ","开发者","迁移","我们","学习","便于","第二","并","伙伴","不用","使用","存在","全球","到","有","第二个","的","开发","一一","部分","没有","几百","开发方式","很多","保留","陌生","这里","意义","，","百万","各位","一致","概念","也","二个","大家","就","方法","ros","以及","中","小伙","会","ros2","小伙伴","应用","已经","方式","应该","这些","尽量","担心"],"title":"核心概念","title_tokens":["核心","概念"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_3","text":"再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。","text_tokens":["操作","。"," ","我们","学习","搬","迈过","道坎","总体","软件开发","面向","部头","编程","这","项目","机器人","对象","就","可移植","移植性","更好","暂且","中","而言","不过","过程","来","和","教程","课程","在","勿躁","再","同样","所示","面向对象","程序","一边","具体","一本","的","特性","确实","也","方法","软件","更接","可读","可移植性","用","方式","后续","如","版本","从","发现","一页","之后","多","两个","稍安","更","语言","当","企业","发布","ros2","写","角度","看看","ros1","切记","不要","具备","大部头","移植","编码","实现","一个","编程语言","来讲","学","带领","难度","开发","图片","大部","，","发布者","总体而言","大家","用到","会","机器","可读性","一步","如何","一些","真实","是","接近","提高"],"title":"编码方式","title_tokens":["方式","编码方式","编码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_4","text":"最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随课程，你就会慢慢理解这些特性。","text_tokens":["没","换成","。","多功能"," ","我们","核心","话题","有","现有","除此","主","编程","总结","上手","就","中","而言","集成","干掉","揭秘","和","教程","印象","功能","都","课程","最为","在","再","如果","大幅度","：","理解","大幅","独立","陆续","变化","相对","的","工具","表示","特性","上升","也","做","选择","节点","后续","dds","run","你","通信","了","跟随","启动","最后","常用","好","更","每","初次","命令","一种","下","对比","ros","分散","topic","控制","幅度","把","ros2","master","就是","所有","这些","rostopic","相关","比如","ros1","某","慢慢","—","一个","除此之外","啦","难度","开发","命令行","对","，","概念","大家","rosrun","会","即可","大致","以上","是","之外"],"title":"命令行","title_tokens":["命令行","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/","text":"ROS2安装方法 本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。 Linux系统简介 时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。 Ubuntu系统简介 我们后续课程使用到的Linux发行版就是ubuntu系统。 Ubuntu诞生于2004年10月份，每六个月发布一个新版本，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。 Ubuntu虚拟机安装 虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下： 1. 下载系统镜像 下载链接： https://ubuntu.com/download/desktop 2. 在虚拟机中创建系统 3. 设置虚拟机硬盘大小 4. 设置Ubuntu镜像路径 5. 启动虚拟机 6. 设置用户名和密码 7. 等待系统安装 8. 完成安装 Ubuntu系统安装好后，大家可以先随意使用熟悉一下。 ROS2系统安装 接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下： 1. 设置编码 $ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8 2. 添加源 $ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844 3. 安装ROS2 $ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop 4. 设置环境变量 $ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。 ROS2示例测试 为了验证ROS2安装成功，我们可以通过以下示例进行测试。 示例一：命令行示例 先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。 示例二：小海龟仿真示例 再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。 附：虚拟机镜像 为了方便大家入门学习，我们也提供了预装好ROS2软件和教程代码的虚拟机镜像，有需要的小伙伴可以通过以下链接下载： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["占据","_","用户","比较","source","原本","智能","此时","互联","唯一标准","传输","绝对","试一试","地址","connect","网络","点击","使用","可视化","signed","到","主要","没有","应用程序","可能","很多","fedora","运行","d","packages","不仅","让","试试","install","爱好","应该","上下","编辑","性能","不同","各种各样","先","在","如果","dpkg","数据","联网","快","lts","程序","行列","demo","os","入门","的","一下","问题","字符","很","月份","--","每年","芬兰","做","软件","后缀","选择","电脑","叫做","应用","提交","节点","2004","依赖","后续","环境","all","或","run","任务","node","之后","内核","以","报错","给","teleop","启动","talker","好","伙伴","设计","简介","第一个","迅猛","8","说干就干","开始","普通","变动","快速","ubuntu","摩拳擦掌","turtlesim","其后","18","小伙","master","支持","俱全","并且","个人爱好","海龟","情况","之前","加上","需要","会加","原有","为例","时候","移植","考虑","sources","http","一位","两年","回到","六个月","系统","2","左右","windows","opt","多个","这里","by","以下","发布者","cpp","键盘","下来","浏览器","年","什么","小伙伴","林纳斯","开放","发行版",".","技术实力","提到","通讯","最","之外","最大","6","大","位置","大学","原理","etc","管理","依然","兼容","37844","。","讲解","环境变","外衣","仿真","指标","领域","二","擦掌","界面","humble","环境变量","虚拟机","redhat","文件","出现","软件开发","除此","准确","操作方法","诞生","有限","人工","机器人","想要","顺序","编号","源","蕴藏","一","浏览","en","|","小海","底层","课程","再","其中","deb","各种","codename","后","优先","成功","/","us","key","免费","实力","gen","最好","表示","[","一起","方法","其他","蓝色","唯一","传播","&&","算机","只","稳定","人工智能","探索","main","任何","成熟","pan","了","tee","各样","强大","通过","决定","正常","to","提供","名字","互联网","升级","04","目前","动手做","world","该","1dvxugmhxlxnsnfdezuxw0g","字符串","关注","光大","随意","保证","sudo","一石激起千层浪","ros2","一套","pro","看出","工作","紧随其后","5","listener","出","print","量","等","现在","实现","各个","来讲","但","gpg","第二个","除了","吧","之上","curl","千层","务器","运动","新","源代码","，","与","动手","dev","所以","尚","一句","码","出于","这套","计算机","打包","伴随","熟悉","https","精神","可视","指令","变量","看到","其他软件","我们","发展","关于","场景","适合","ssl","乐于","、","热情","成为","应用软件","每隔","完成","小海龟","一应俱全","中","进行","这样","过程","发行","10","来","和","建议","功能","接下来","重要","failed","最为","bug","激起","维护","ubuntu22.04","2022","绑定","apt","硬盘","ubuntu20.04","学生","com","centos","？","命名","lang","好后","于","前先要","还是","无论是","为了","\"","大学生","千层浪","数字","等等","提取","相同","同时","多人","越来越","list","4","版本","了解","如下","创建","从","多用户","何人","合适","你","时","效果","]","第一","等待","多","请","长期","多任务","仿真器","紧随","两个","更","发扬","每","服务","分享","准备",">","gnupg","企业","命令","未来","服务器","虽然","下","者","desktop","虚拟","ros","控制","unix","按键","设置","1991","bashrc","vmware","macos","release","这个","起来","products","好者","商业","=","背景","rosdistro","www","githubusercontent","上下左右","真器","是否","个人","通用","呢","因为","添加","代码",":","反馈","基本","—","第二","经典","o","usr","终端","architecture","archive","命令行","一次","镜像","概念","大家","exc6","一直","接下","公司","会","影响","如何","一些","html","是","操作","参考","locale","当中","将","第一次","示例","代表","吸引","爱好者","第二句","他"," ","编辑器","hello","核心","学习","或者","修复","开源","并","收费","本相","下载","guyuehome","有","放到","用户名","7","适用","一定","热爱","真理","这","arch","测试","采用","keyring","workstation","但是","步骤","就","加入","硬件","upgrade","raw","null","一应","3","locales","先要","(","教程","export","多用","都","华丽","：","nodes","技术","开发者","还","-","baidu","持续","任何人","不太","实践","计算","构建","evaluation","个","中将","可以","也",")","说明","py","链接","lc","附","已有","1","另外","更新","成","share","并用","介绍","本","linux","一样","上层","之内","dds","echo","版","通信","不","模式","安装","“","方便","衡量","密码","发扬光大","常用","自行","第一句","之一","直接","turtle","操作界面","setup","激发","基本相同","keyrings","奥义","预装","$","一种","”","s","如遇","二个","发布","其","把","大量","就是","大小","已经","download","重新","bash","比如","六个","分别","接触","org","可","标准","~","检验","无论","操作系统","编码","路径","一个","update","除此之外","发挥","啦","上","自己","节","开发","lsb","叫","户名","对","月","订阅","甚至","22","机器","至此","资料","时间","utf","二句","越来","一般","验证"],"title":"ROS2安装方法","title_tokens":["方法","安装","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2","text":"本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。","text_tokens":["操作","了解","底层","重要","先要","安装","。","操作系统","我们","—","的","节","一下","系统","一种","前先要","一起","，","ros2","本","最","linux"],"title":"ROS2安装方法","title_tokens":["方法","安装","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#linux","text":"时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。","text_tokens":["操作","大","大学","计算机","原理","参考","当中","管理","打包","用户","伴随","熟悉","原本","精神","吸引","爱好者","此时","兼容","可视","。","讲解","互联","外衣","唯一标准"," ","他","指标","看到","我们","核心","发展","或者","修复","开源","界面","提到","并","场景","适合","使用","收费","本相","可视化","redhat","到","出现","有","放到","乐于","主要","、","准确","热情","应用程序","没有","适用","热爱","操作方法","很多","fedora","真理","成为","这","应用软件","有限","就","不仅","中","加入","硬件","过程","爱好","应该","叫做","发行","和","教程","多用","功能","都","不同","性能","底层","先","重要","在","各种各样","华丽","其中","技术","联网","越来","各种","开发者","还","bug","激起","程序","维护","后","行列","绑定","学生","centos","任何人","命名","的","？","问题","不太","实践","免费","实力","计算","每年","最好","一起","芬兰","可以","也","方法","做","其他","唯一","大学生","千层浪","软件","传播","等等","已有","相同","另外","应用","算机","多人","提交","越来越","并用","依赖","本","成","linux","一样","稳定","版本","任何","或","多用户","任务","成熟","何人","之后","内核","不","出于","模式","多","了","安装","各样","给","强大","衡量","通过","决定","发扬光大","多任务","常用","名字","更","互联网","发扬","设计","分享","之一","每","服务","迅猛","目前","动手做","说干就干","企业","激发","基本相同","操作界面","快速","ubuntu","服务器","光大","虽然","下","其","unix","把","一石激起千层浪","大量","ros2","1991","就是","支持","已经","一套","重新","macos","并且","起来","这个","个人爱好","好者","商业","情况","比如","之前","加上","需要","标准","原有","检验","个人","通用","量","呢","操作系统","代码","等","反馈","基本","现在","—","实现","一个","来讲","但","上","所以","一位","自己","开发","回到","系统","windows","叫","之上","千层","对","务器","源代码","，","镜像","概念","与","年","甚至","公司","动手","会","什么","一些","时间","林纳斯","是","开放","技术实力","尚","发行版","最","一般","这套"],"title":"Linux系统简介","title_tokens":["简介","linux","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu","text":"我们后续课程使用到的Linux发行版就是ubuntu系统。 Ubuntu诞生于2004年10月份，每六个月发布一个新版本，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。","text_tokens":["占据","位置","参考","用户","比较","依然","熟悉","智能","代表","第一次","。","讲解","互联","领域"," ","绝对","编辑器","我们","试一试","擦掌","网络","虚拟机","使用","文件","到","出现","有","主要","、","软件开发","除此","一定","可能","很多","每隔","诞生","人工","但是","机器人","想要","一应俱全","就","顺序","中","进行","编号","硬件","这样","让","一应","发行","浏览","10","建议","教程","编辑","都","性能","不同","课程","在","重要","再","如果","其中","联网","各种","开发者","快","还","lts","维护","ubuntu22.04","2022","硬盘","ubuntu20.04","持续","优先","的","一下","很","于","月份","免费","表示","个","还是","可以","无论是","也","方法","为了","其他","软件","数字","后缀","选择","已有","电脑","更新","应用","只","2004","介绍","本","后续","环境","linux","上层","稳定","人工智能","4","版本","之内","或","从","版","合适","你","时","效果","之后","第一","以","多","了","安装","通过","长期","常用","紧随","好","自行","更","每","互联网","升级","直接","04","普通","变动","ubuntu","未来","关注","摩拳擦掌","其后","18","发布","保证","虚拟","就是","俱全","支持","已经","看出","紧随其后","六个","比如","5","之前","接触","出","会加","等","无论","因为","为例","时候","移植","考虑","一个","各个","除此之外","发挥","上","两年","自己","开发","六个月","除了","系统","windows","这里","新","一次","，","月","大家","浏览器","年","一直","22","会","机器","影响","如何","资料","最大","发行版","是","所以","通讯","之外"],"title":"Ubuntu系统简介","title_tokens":["ubuntu","简介","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu_1","text":"虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下：","text_tokens":["操作","和","工作","如下","www","在","https","安装","。","："," ",":","请","-","其他软件","我们","地址","自行","一个","后","并","虚拟机","啦","下载","准备","com","的","开始","系统","/","完成","构建","之上","运行","多个","这里","采用","evaluation","，","可以","workstation","步骤","虚拟","大家","其他","就","软件","让","已有","另外","同时","叫做","相同",".","是","html","pro","vmware","环境","products"],"title":"Ubuntu虚拟机安装","title_tokens":["ubuntu","安装","虚拟机","虚拟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1","text":"下载链接： https://ubuntu.com/download/desktop","text_tokens":[" ",":","/","链接","ubuntu",".","https","download","下载","：","com","desktop"],"title":"1. 下载系统镜像","title_tokens":[" ","系统","1",".","下载","镜像"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2","text":"","text_tokens":[],"title":"2. 在虚拟机中创建系统","title_tokens":["虚拟"," ","2","中","创建","系统",".","在","虚拟机"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3","text":"","text_tokens":[],"title":"3. 设置虚拟机硬盘大小","title_tokens":["虚拟"," ","设置","大小","3",".","虚拟机","硬盘"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4-ubuntu","text":"","text_tokens":[],"title":"4. 设置Ubuntu镜像路径","title_tokens":["4"," ","路径","设置","ubuntu",".","镜像"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#5","text":"","text_tokens":[],"title":"5. 启动虚拟机","title_tokens":["虚拟"," ","启动","5",".","虚拟机"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#6","text":"","text_tokens":[],"title":"6. 设置用户名和密码","title_tokens":["6"," ","和","用户名","密码","设置","用户",".","户名"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#7","text":"","text_tokens":[],"title":"7. 等待系统安装","title_tokens":[" ","7","系统",".","等待","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#8","text":"Ubuntu系统安装好后，大家可以先随意使用熟悉一下。","text_tokens":["大家","一下","系统","好后","ubuntu","先","熟悉","使用","安装","，","。","可以","随意"],"title":"8. 完成安装","title_tokens":[" ","完成",".","安装","8"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_1","text":"接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下：","text_tokens":["如下","接下来","安装","了","：","。","我们","到","系统","ubuntu","，","可以","步骤","下来","就","中","接下","把","ros2"],"title":"ROS2系统安装","title_tokens":["系统","安装","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1_1","text":"$ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8","text_tokens":["=","_","en","export","locale"," ","-","update","apt","lang","8","us","$","gen","sudo","lc","install","&&","locales",".","utf","all"],"title":"1. 设置编码","title_tokens":[" ","编码","设置","1","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2_1","text":"$ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844","text_tokens":["_","参考","etc","source","https","37844"," ","connect","ssl","signed","guyuehome","arch","keyring","d","packages","raw","install","null","(","|","failed","dpkg","deb","-","codename","os","apt","com","/","key","--","[","\"",")","&&","share","list","main","echo","]","“","tee","报错","to",">","gnupg","keyrings","ubuntu","$","”","如遇","ros","sudo","master","ros2","release","=","rosdistro","githubusercontent","www","org","可","print",":","sources","http","update","o","usr","gpg","lsb","architecture","curl","archive","by","，","dev","."],"title":"2. 添加源","title_tokens":[" ","2","源",".","添加"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3-ros2","text":"$ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop","text_tokens":[" ","sudo","-","desktop","upgrade","humble","install","update","$","apt","ros"],"title":"3. 安装ROS2","title_tokens":[" ","ros2","3",".","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4","text":"$ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。","text_tokens":["echo","source","在","~","安装","了","。"," ","好","humble",">","setup","系统","/","opt","$","，","ros","就","\"","中","bashrc","至此","ros2",".","已经","bash"],"title":"4. 设置环境变量","title_tokens":["4"," ","变量","设置","环境变量",".","环境","环境变"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_2","text":"为了验证ROS2安装成功，我们可以通过以下示例进行测试。","text_tokens":["为了","成功","通过","我们","进行","ros2","测试","示例","。","安装","，","以下","可以","验证"],"title":"ROS2示例测试","title_tokens":["测试","示例","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_1","text":"先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。","text_tokens":["_","dds","run","底层","listener","通信","先","重要","最为","第一","在","如果","是否","。","：","数据","nodes","“","传输"," ","启动","通过","talker","正常","hello","第二","两个","一个","demo","第一个","第二个","的","字符","终端","问题","系统","world","没有","吧","字符串","命令","$","”","，","以下","二个","发布者","发布","cpp","者","订阅","中","说明","py","ros2","试试","节点","来"],"title":"示例一：命令行示例","title_tokens":["命令","示例","命令行","一","："]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_2","text":"再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["上下","海龟","背景","_","如下","小海","探索","教程","分别","run","node","将","示例","在","第一","再","上下左右","真器","第二句","安装","。","仿真","：","“","指令","teleop"," ","启动","我们","—","仿真器","试一试","经典","两个","第一句","一个","第二","关于","点击","啦","上","turtle","持续","的","终端","左右","成功","该","key","奥义","小海龟","$","运行","”","turtlesim","运动","，","中将","可以","键盘","ros","就","蓝色","中","控制","按键","ros2","至此","蕴藏","节点","二句","一句","后续","来"],"title":"示例二：小海龟仿真示例","title_tokens":["海龟","小海","二","小海龟","示例","仿真","："]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_3","text":"为了方便大家入门学习，我们也提供了预装好ROS2软件和教程代码的虚拟机镜像，有需要的小伙伴可以通过以下链接下载： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["和","教程","需要","pan","https","了","：","方便","代码"," ",":","通过","我们","baidu","学习","提供","好","虚拟机","伙伴","下载","com","有","入门","的","1dvxugmhxlxnsnfdezuxw0g","/","预装","s","，","以下","镜像","可以","也","虚拟","大家","为了","小伙","软件","exc6","链接","ros2","小伙伴","提取",".","码"],"title":"附：虚拟机镜像","title_tokens":["虚拟","附","虚拟机","：","镜像"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/","text":"ROS2命令行操作 在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。 Linux中的命令行 类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。 启动方式 回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。 常用命令操作 我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。 ROS2中的命令行 ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。 运行节点程序 想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看节点信息 当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim 查看话题信息 当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose 发布话题消息 想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 发送服务请求 一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\" 发送动作目标 想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\" 录制控制命令 系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["有点","_","手","逛来逛去","用户","新建","record","y","此时","还有","由","绝对","哪","试一试","使用","可视化","到","主要","没有","实验室","可能","很多","动作","运行","0.0","尝试","一系列","类似","电影","精心设计","rate","让","播放","编辑","不同","先","在","如果","cp","send","数据","程序","它","cmd","拷贝到","指定","的","一下","问题","字符","窗口","很","当前","--","件夹","约束","所在","里边","软件","选择","rotate","信息","电脑","绝对路径","叫做","应用","用","此","节点","目标目录","则","或","run","node","不一","度高","}","语法","以","改名","死记","买","teleop","实验","启动","既","好","鼠标","设计","对于","呈现","并不一定","第一个","目录","35","查","turtlesim","炫酷","pwd","mv","topic","背","{","rotateabsolute","海龟","感兴","mkdir","之前","满足","加上","需要","转","原有","魅力","play","为例","慢慢","时候","兴趣","产生",",","打开","不用","选项","回到","系统","2","感受","自主","这里","多个","spawn","跟","忙","键盘","下来","容易","用到","angular","二十","一步","什么","文件名","深色",".","不是","随身","管理","科幻电影","地","。","仿真","搜索","geometry","bag","又","难以","文件","统管","话题","多种","体会","2.0","…","子目录","消息","笔记本电脑","想要","这种","科幻","cd","详细信息","srv","0.2","黑客","一","麻烦","小海","看似","每次","call","数量","再","目的","便捷","各种","深入","体验","改变","ls","17","后","一只","复制到","复制","适应","/","key","详细","[","确实","表示","内容","一起","随着","其他","某个","方式","定制","现出","一件","呀","及其","继续","了","段","若","通过","正常","pose","提供","商家","规则","做好","04","terminal","文件夹","一系","该","保持","权限","保留","40","列出","目","sudo","例如","ros2","11","改了","这些","及","要","工作","某","出","标目","商场","等","逛来","实现","来讲","源文件","发送","但","帮上","解决","0","pub","，","与","写字","衣服","大致","所以","twist","查看","快捷键","alt","名称","'","熟悉","调试","可视","十个","指令","看到","其上","我们","场景","进一步","系统管理员","theta","现有","、","参数","子目","turtle1","小海龟","完成","需求","动","x","逛去","msgs","拷贝","一点","必不可少","中","至今","进行","调用","不过","rosbag2","小","这样","感兴趣","很少","集成","来","总","想","和","功能","接下来","重要","轻松","移入","不到","复现","一边","t","找","2022","goal","具体","？","觉得","于","发指","还是","\"","相同","而是","目标","去","list","了解","创建","如下","linear","孤单","]","你","第一","精心","多","仿真器","更","服务","材料","右键","初次","每",">","不可","从来","什么样","多到","命令","令人发指","absolute","未来","虽然","下","ros","布料","控制","太","呈现出","一二十个","为","+","这个","起来","角度","看看","背景","笔记","感觉","硬","不变","真器","呢","因为","均","片段",":","—","体操","info","终端","执行","当前工作","命令行","一次","概念","主目录","大家","显示","一直","接下","会","根据","删除","系列","一些","如何","以上","是","操作","专门","将","第一次"," ","二十个","编辑器","核心","学习","或者","并","干什么","name","哪些","有","管理员","一定","这项","db3","这","vel","子","服装","但是","既定","就","3","至于","请求","看不到","快捷","常用命令","都","：","-","还","msg","本节","输入","不太","工具","1.8","为什么","笔记本","死记硬背","可以","枯燥","也","看中","文件名称","被","链接","只是","1","ctrl","成","本","linux","一样","z","想象","echo","某段","不","“","常用","rosbag","直接","turtle","一二十","随身带","action","死机","$","一种","<","总有","”","发布","令人","把","就是","已经","所有","结合","具体操作","另","比如","机制","接触","录制","gedit","灵活","无论","rm","记忆","路径","受","service","一个","后边","知道","啦","上","带领","列表","自己","异常","对","能够","怎么","一二","款式","完全","推出","案例","即可","原因"],"title":"ROS2命令行操作","title_tokens":["操作","命令行","ros2","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2","text":"在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。","text_tokens":["海龟","有点","小海","之前","接触","将","第一次","重要","在","调试","第一","如果","多","了","魅力","。","时候"," ","我们","深入","—","学习","本节","更","进一步","使用","带领","到","不太","的","工具","适应","一定","可能","小海龟","命令","运行","一种","命令行","感受","一次","，","可以","大家","随着","中","会","一步","ros2","案例"],"title":"ROS2命令行操作","title_tokens":["操作","命令行","ros2","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#linux","text":"类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。","text_tokens":["操作","手","逛来逛去","科幻电影","此时","可视","。"," ","看到","其上","我们","哪","场景","并","使用","可视化","现有","、","没有","一定","很多","需求","服装","逛去","但是","想要","既定","就","类似","电影","科幻","必不可少","中","至今","一点","这种","精心设计","小","这样","来","麻烦","和","看似","每次","功能","都","先","在","便捷","各种","？","的","工具","问题","为什么","于","约束","还是","可以","其他","看中","里边","软件","被","方式","定制","成","去","linux","一样","现出","一件","想象","呀","你","不一","度高","不","精心","多","了","买","服务","材料","商家","设计","规则","做好","对于","呈现","并不一定","不可","什么样","命令","一种","保留","总有","炫酷","虽然","ros","布料","就是","呈现出","为","已经","所有","结合","这些","起来","比如","满足","某","灵活","商场","呢","无论","等","片段","时候","逛来","受","一个","来讲","但","解决","自己","异常","命令行","自主","这里","，","能够","大家","容易","一直","衣服","会","根据","什么","一些","款式","是","不是","完全","推出"],"title":"Linux中的命令行","title_tokens":["的","中","命令","命令行","linux"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_1","text":"回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。","text_tokens":["快捷键","操作","专门","手","alt","熟悉","科幻电影","十个","。","搜索","指令"," ","二十个","看到","又","我们","难以","并","使用","到","有","多种","参数","体会","一定","这项","这","一系列","笔记本电脑","但是","就","科幻","电影","中","不过","很少","黑客","至于","来","看不到","快捷","功能","都","在","数量","：","不到","t","后","输入","的","字符","窗口","觉得","工具","很","一下","为什么","笔记本","发指","确实","所在","可以","枯燥","也","随着","其他","软件","选择","电脑","叫做","ctrl","方式","应用","用","而是","本","通过","启动","既","正常","常用","鼠标","右键","初次","terminal","一二十","一系","随身带","从来","死机","多到","命令","令人发指","令人","背","就是","一二十个","+","这个","及","背景","笔记","硬","需要","魅力","呢","因为","慢慢","记忆","时候","打开","不用","上","所以","列表","终端","回到","命令行","对","，","大家","怎么","用到","一二","写字","二十","会","什么","系列","深色","是","不是","随身","即可","原因"],"title":"启动方式","title_tokens":["方式","启动"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_2","text":"我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。","text_tokens":["管理","名称","用户","新建","将","熟悉","地","。","由","指令"," ","绝对","编辑器","我们","或者","系统管理员","文件","统管","管理员","没有","子目","…","子目录","拷贝","就","cd","中","一","来","编辑","常用命令","功能","先","目的","cp","：","移入","体验","改变","ls","一边","它","找","复制到","拷贝到","复制","指定","的","一下","/","当前","死记硬背","件夹","[","可以","也","文件名称","链接","只是","某个","用","绝对路径","此","目标","目标目录","linux","则","创建","或","及其","]","不","语法","以","多","了","改名","“","死记","若","常用","对于",">","文件夹","目录","该","保持","命令","权限","查","<","”","未来","pwd","下","列出","mv","目","sudo","把","为","所有","这些","及","另","感觉","工作","mkdir","不变","需要","出","gedit","标目","原有","均","rm","路径","一个","源文件","打开","列表","选项","回到","系统","执行","当前工作","多个","，","主目录","大家","显示","会","删除","文件名"],"title":"常用命令操作","title_tokens":["操作","常用","常用命令","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2_1","text":"ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。","text_tokens":["操作","总","海龟","比如","小海","了解","机制","功能","都","node","不同","接下来","在","第一","以","目的","继续","。","仿真","为例"," ","还","我们","核心","一个","后边","体操","干什么","第一个","具体","话题","有","的","一系","主要","参数","命令","小海龟","命令行","表示","对","感受","内容","，","跟","可以","一系列","一起","与","下来","就","下","也","概念","topic","中","具体操作","接下","不过","什么","ros2","系列","相同","节点","大致","所有","集成","linux"],"title":"ROS2中的命令行","title_tokens":["的","中","ros2","命令","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_3","text":"想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["操作","海龟","和","_","run","node","仿真","：","teleop"," ","我们","使用","turtle","key","命令","$","运行","turtlesim","，","可以","键盘","想要","中","进行","控制","例如","某个","ros2","节点","要"],"title":"运行节点程序","title_tokens":["程序","节点","运行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_4","text":"当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim","text_tokens":["感兴","加上","都","node","某","如果","：","呢","兴趣"," ","它","一个","知道","info","啦","哪些","？","有","的","系统","/","当前","命令","详细","$","运行","对","子","turtlesim","，","可以","ros","就","中","详细信息","这样","ros2","感兴趣","信息","节点","来","list","查看"],"title":"查看节点信息","title_tokens":["节点","信息","查看"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_5","text":"当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose","text_tokens":["想","如下","加上","echo","都","某","：","呢","数据"," ","看到","还","pose","试一试","一个","使用","话题","有","的","系统","/","当前","turtle1","命令","$","消息","子","，","topic","中","ros2","即可","list","查看"],"title":"查看话题信息","title_tokens":["信息","话题","查看"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_6","text":"想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":["海龟","z","_","linear","}","y","：","geometry","指令"," ",":","通过","还","我们","msg",",","cmd","直接","话题","1.8","/","--","turtle1","2.0","命令","$","0.0","命令行","vel","pub","动","x","，","可以","msgs","发布","想要","\"","topic","控制","angular","rate","ros2","1","{","twist","起来"],"title":"发布话题消息","title_tokens":["话题","消息","发布"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_7","text":"一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\"","text_tokens":["海龟","孤单","call","'","}","y","再","真器","仿真","："," ",":","产生","还","我们",",","仿真器","提供","—","试一试","service","一个","一只","服务","theta","name","2","/","$","turtlesim","spawn","x","，","\"","调用","太","srv","ros2","{","0.2","改了","来"],"title":"发送服务请求","title_tokens":["服务","发送","请求"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_8","text":"想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\"","text_tokens":["海龟","_","比如","转","真器","send","仿真","："," ",":","通过","仿真器","提供","一个","发送","帮上","theta","到","具体","指定","goal","的","action","/","turtle1","完成","动作","命令","$","absolute","命令行","turtlesim","，","忙","可以","想要","\"","中","让","这样","ros2","rotate","3","目标","rotateabsolute","这个","角度"],"title":"发送动作目标","title_tokens":["发送","目标","动作"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_9","text":"系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["看看","_","播放","功能","某段","record","录制","再","如果","段","轻松","：","实验","数据","play","还有"," ","bag","。","-","复现","我们","17","常用","好","实现","一个","2022","每","cmd","啦","rosbag","04","有","？","的","0","自己","回到","系统","很","实验室","/","db3","turtle1","很多","命令","这","$","运行","vel","35","子","，","还是","40","可以","尝试","想要","下来","与","大家","中","把","rosbag2","ros2","如何","用","就是","11",".","以上"],"title":"录制控制命令","title_tokens":["录制","命令","控制"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","text":"ROS2开发环境配置 ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。 Git git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git 下载教程源码 《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。 VSCode Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download VSCode插件配置 为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。 中文语言包 Python插件 C++插件 CMake插件 vscode-icons ROS插件 Msg Language Support Visual Studio IntelliCode URDF Markdown All in One VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["操作","urdf","冲突","_","非常简单","成千","之父","管理","in","网上","示例","调试","https","人","千万","广泛","源码","。","搜索","官方网站"," ","看到","编辑器","我们","icons","发展","便于","修复","开源","并","language","使用","文件","下载","cmake","guyuehome","有","、","神兵","可能","迅速","很多","成为","完成","这","项目","配置","一行","简单","插件","一系列","人工","机器人","就","中","进行","clone","硬件","让","这样","install","intellicode","管理工具","众多","github","集成","one","驱动","浏览","语言包","和","每次","教程","编辑","功能","都","不同","先","课程","重要","合并","在","如果","visual","利器","：","码云","开发者","还","丰富","bug","审核","哪里","visualstudio","-","msg","编写","高效","离不开","《","切换","apt","中文","具体","com","？","入门","的","工具","官方","喜欢","/","git","推荐","件夹","轻量","特性","markdown","内容","可以","因","vscode","也","》","做","几千","成千上万","方法","为了","软件","里边","被","链接","等等","已有","用","另外","应用","提交","方式","只","环境","后续","linux","all","一款","版本","c++","判断","功能强大","之后","不","安装","了","多","给","强大","无限","扩展","作为","增加","提供","变更","好","更","语言","设计","2015","直接","准备","gitee","广泛应用","文件夹","一系","而生","行","微软","21","tutorials","命令","快速","不开","$","不会","ros","上万","复杂","sudo","以及","大量","ros2","组件","下载方式","支持","有些","所有","download","千上万","开发工具","这些","记事","macos","自动","记事本","非常","比如","网站","需要","出","python","常听到","linus","个人","听到","呢","操作系统","代码","官方网",":","简称","自带","—","一个","但","略显","support","自己","开发","终端","系统","之间","搭建","windows","这款","多个","这里","新","国内","，","code","源代码","与","几千万","大家","管理软件","肯定","浏览器","年","studio","理工","会","机器","讲","中会","如何","一些","系列",".","以上","是","两款","所以","推出","最","贡献","编译","查看"],"title":"ROS2开发环境配置","title_tokens":["配置","开发","ros2","环境"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros2","text":"ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。","text_tokens":["和","需要","先","示例","课程","重要","源码","。","呢","代码","给","我们","—","提供","编写","离不开","准备","？","的","工具","开发","、","git","推荐","完成","不开","配置","，","vscode","ros","机器人","大家","做","肯定","大量","机器","中会","如何","一些","两款","开发工具","这些","环境","编译","查看"],"title":"ROS2开发环境配置","title_tokens":["配置","开发","ros2","环境"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#git","text":"git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git","text_tokens":["冲突","非常简单","成千","之父","管理","人","千万","广泛","。"," ","看到","我们","发展","修复","开源","并","使用","有","可能","迅速","完成","这","项目","一行","简单","人工","就","中","进行","硬件","让","install","管理工具","众多","github","驱动","和","每次","功能","都","不同","合并","在","码云","开发者","bug","审核","哪里","高效","切换","apt","具体","的","工具","git","特性","内容","可以","因","也","几千","方法","成千上万","软件","被","等等","已有","应用","提交","linux","一款","版本","判断","之后","不","安装","了","增加","变更","设计","直接","gitee","广泛应用","而生","行","命令","$","不会","上万","sudo","以及","有些","所有","千上万","这些","自动","非常","比如","网站","需要","常听到","linus","听到","代码","—","一个","开发","终端","系统","之间","这款","多个","新","国内","，","几千万","管理软件","大家","肯定","理工","会","是","所以","贡献"],"title":"Git","title_tokens":["git"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_1","text":"《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。","text_tokens":["和","_","课程","https","如果","源码","多","：","。","代码"," ",":","还","自带","—","好","一个","《","更","文件","略显","下载","com","gitee","guyuehome","入门","的","有","文件夹","开发","系统","/","git","很多","21","tutorials","件夹","推荐","$","这里","，","vscode","》","就","浏览器","记事本","复杂","里边","中","clone","会","讲","ros2","这样","用","另外","下载方式","方式",".","是","集成","环境","记事","浏览","查看"],"title":"下载教程源码","title_tokens":["教程","下载","源码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode","text":"Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download","text_tokens":["操作","非常","和","编辑","macos","功能","网站","功能强大","利器","visual","在","https","。","：","官方网站","操作系统","代码"," ","强大","官方网","扩展","简称","编辑器","丰富",":","visualstudio","一个","2015","但","下载","com","官方","的","、","开发","系统","神兵","/","搭建","微软","windows","成为","快速","轻量","项目","源代码","，","code","可以","vscode","年","studio","链接","组件","支持",".","是","download","推出","linux"],"title":"VSCode","title_tokens":["vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode_1","text":"为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。","text_tokens":["功能","调试","安装","。","无限","扩展","还","我们","便于","的","一系","开发","插件","，","一系列","可以","vscode","与","为了","ros2","系列","后续"],"title":"VSCode插件配置","title_tokens":["配置","vscode","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_2","text":"","text_tokens":[],"title":"中文语言包","title_tokens":["中文","语言","语言包"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#python","text":"","text_tokens":[],"title":"Python插件","title_tokens":["python","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#c","text":"","text_tokens":[],"title":"C++插件","title_tokens":["c++","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#cmake","text":"","text_tokens":[],"title":"CMake插件","title_tokens":["cmake","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode-icons","text":"","text_tokens":[],"title":"vscode-icons","title_tokens":["icons","-","vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros","text":"","text_tokens":[],"title":"ROS插件","title_tokens":["插件","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#msg-language-support","text":"","text_tokens":[],"title":"Msg Language Support","title_tokens":["support","msg","language"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#visual-studio-intellicode","text":"","text_tokens":[],"title":"Visual Studio IntelliCode","title_tokens":[" ","intellicode","visual","studio"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#urdf","text":"","text_tokens":[],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#markdown-all-in-one","text":"VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["网上","在","出","个人","。","搜索","作为","喜欢","的","自己","开发","推荐","配置","插件","，","可以","vscode","也","大家","环境","支持","以上","众多","只","最"],"title":"Markdown All in One","title_tokens":[" ","in","markdown","one","all"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/","text":"DDS Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。 通信模型 DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。 DDS DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。 什么是DDS 好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是Data Distribution Service，也就是数据分发服务，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。 DDS在ROS2中的应用 DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。 质量服务策略QoS DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是Domain，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为数据提供者和接收者之间的合约。 具体会有哪些策略？比如这个列表中描述的DEADLINE策略，表示通信数据必须要在每次截止时间内完成一次通信，HISTORY策略，表示针对历史数据的一个缓存大小，RELIABILITY策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式。 还有这个DURABILITY，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。 案例一：在命令行中配置DDS 我们先来试一试在命令行中配置DDS的参数。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort $ ros2 topic info /chatter --verbose 案例二：DDS编程示例 接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。 运行效果 $ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub 发布者代码解析 learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , }, 订阅者代码解析 learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], }, 参考链接 DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们课上主要带领大家认识DDS，更多使用方法和相关内容，课程配套的教程中会有介绍，大家也可以参考这里的链接进行学习。 https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["有点","_","至关","针对","第四种","用户","none","此时","还有","由","传输","scripts","强调","哪","地址","转移","要求","便于","网络","焕然","试一试","qosreliabilitypolicy","使用","建设","处理速度","顺利","到","布式","distribution","data","主要","缓存","没有","应用程序","可能","很多","高速","动作","配置","运行","尝试","类似","bilibili","更好","派","corba","concepts","让","输出","图","它们","应该","def","主讲","性能","分发","不同","入口","先","集中处理","在","如果","重大","数据","程序","过去","它","高效","about","瓶颈","组成","bin","指定","入门","的","驾驶","问题","一下","任","很","合约","字符","with","--","__","医疗","处","许多","python3","靠","做","选用","角色","资源","软件","一条","选择","信息","先进","美国","用","节点","应用","电脑","2004","环境","前边","刚才","相当","内","42","或","交换","chatter","run","无论如何","node","回调","不感兴趣","}","以","effort","找到","给","作为","处于","好","1989","接收","焕然一新","第三","设计","destroy","当","8","兼容性问题","架构","所","模型","行","原则","快速","讲到","增长","大大","topic","加密","{","points","占用","shutdown","有些","按照","并且","增多","居","情况","感兴","黑入","通道","之前","ros1","满足","需要","主讲人","火锅","qoshistorypolicy","生态","python","单位","某一","为例","兴趣","时候",",","厂商","三种","统一","不用","销毁","打开","有人","具体地址","选项","系统","组成部分","helloworld","数据通","双方","掉","授权","这里","发生","单独","多个","同一","例子","行业","发布者","下来","年","middleware","一步","讲","什么","收到",".","真实","不是","质量","提到","提高","编译","位置","管理","地","兼容","。","无用","课上","领域","国防","5g","spin","publisher","二","import","综合","humble","视频","文件","尽可","并行","出现","话题","发生变化","通常","当于","消息","guides","好吃","机器人","分布式","这种","秒","神经网","周期","黑客","multiple","性","关闭","众多","导致","get","一","成立","驱动","终于","麻烦","en","每次","强制","logger","半天","底层","课程","entry","延时","各种","无人","articles","（","后","通路","历史数据","init","适应","边","/","模块","交通","表示","符合","[","得","日志","一起","同一个","内容","体","方法","其他","蓝色","门","来到","所有人","方式","只","而且","必须","一新","main","退出","实时","处理","之","容性","初始","qosprofile","string","了","说了半天","名","on","通过","@","正常","优化","提供","to","可信","频繁","升级","qos","last","送给","world","int32","保证数据","字符串","放在","明显","最早","保证","类型","sysml","列出","进入","框架","该用","ros2","提","profile","全局","航拍","一套","这些","技术标准","要","定位","才能","垂直","截止","不好","listener","vendors","二种","纠结","等","能力","行为","现在","服务质量","实现","各个","%","发送","但","结构","啥意思","初始化","解决","reliable","publishing","bv12z4y167w2","之间","华为","宗旨","每条","那个","之上","务器","第二种","pub","运动","新","，","大大提高","接收者","与","只有","我","verbose","env","中会","客户端","包含","上边","所以","帧","拿","架构图","'","感知","https","广泛","来看","发送给","过","指令","流畅性","冰山一角","不管","我们","欢迎","供者","场景","无法","进一步","docs","这么","from","、","到底","参数","互相","主","编程","成为","完成","既然","需求","那该","构图","像","args","建模语言","客户","msgs","对象","效率","带","0.5","中","进行","super","不过","而言","这样","感兴趣","过程","工业","broker","接口标准","来","集中","history","想","关心","和","规模","遥控","功能","接下来","重要","最为","中心","维护","绑定","具体","保障","？","uml","的话","借助","com","部分","非常复杂","于","图像","听说","定义","特性","4g","还是","举","working","为了","\"","像是","库","服务端","数以千计","best","古月","版本","如下","创建","旋转","合适","你","]","时","效果","第一","等待","!","depth","多","小组","传送","填充","different","几种","更","服务","语言","分布","每","完整性","他们","广泛应用","四大","每个","企业","无人机","*","21","解析","命令","优势","服务器","数据通信","广播","下","者","ros","控制","设置","包","timer","为","callback","这个","自动","商业","=","相关","omg","尽力","www","不变","丢失","忽略","个人","呢","代码","关系",":","基本","预测","—","第二","样","第一种","info","真正","第三种","usr","#","本身","建模","一旦","执行","入个","命令行","class","太多","一次","大家","keep","肯定","接下","会","根据","影响","如何","生变","一些","html","兼容性","是","其实","专门","reliability","树莓","办法","参考","专利","没","神经网络","策略","接口","将","示例","当然","父类"," ","hello","self","核心","学习","rmw","开源","完整","并","name","哪些","guyuehome","有","create","函数","一定","更加","第四","神经","这","能响","红色","可见","分组","但是","就","受到","std","加入","subscribernode","回忆","中间","建立","请求","sub","程度","全称","(","提示","能源","教程","console","都","提供者","海军","heard","连接数","：","使命","高通","技术","domain","理解","）","deadline","-","丰富","msg","《","编写","配套","变化","coding","durability","至关重要","下边","认识","implementations","可以","》","也","publishernode","learning","可信赖",")","说明","py","链接","只是","1","另外","publish","成","介绍","点对点","一样","尽量","上层","dds","echo","默认","通信","不","那","模式","“","课","整个","遥控器","design","意思","通信模型","how","video","常用","描述","连接","直接","人机","setup","空间","由于","历史","在于","一种","$","”","就行","s","id","晚","发布","复杂","速度","把","大量","定时","相当于","subscription","就是","大小","已经","所有","吃","信赖","rclpy","非常","比如","\\","databus","作者","可","org","四种","标准","灵活","i","中间件","尽可能","无论","避免","service","流畅","一个","舰船","知道","复用","啦","上","存在","价值","带领","列表","自己","开发","组织","差别","异常","冰山","对应","向","对","航空","能够","定时器","订阅","运转","循环","点","机器","类","时间","utf","决策","一角","案例"],"title":"**DDS**","title_tokens":["*","dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds","text":"Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。","text_tokens":["相当","dds","底层","都","神经网络","主讲人","通信","课程","最为","在","。","重大"," ","hello","我们","欢迎","—","学习","好","实现","它","《","服务","网络","变化","他们","具体","话题","入门","的","、","系统","21","动作","完成","当于","神经","讲到","来","，","》","靠","大家","ros","机器人","中","我","讲","来到","ros2","相当于","过程","机器","神经网","是","终于","前边","古月","主讲"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_1","text":"DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。","text_tokens":["有点","拿","针对","第四种","。","由"," ","我们","核心","地址","并","无法","进一步","使用","处理速度","到","并行","一定","没有","可能","发生变化","很多","第四","成为","更加","这","能响","可见","消息","客户","但是","好吃","就","效率","类似","这种","受到","中","进行","不过","这样","感兴趣","应该","导致","建立","请求","broker","程度","集中","麻烦","想","关心","和","规模","每次","都","性能","集中处理","在","如果","连接数","数据","中心","各种","它","通路","变化","瓶颈","具体","的","问题","很","处","许多","可以","也","其他","角色","软件","像是","一条","所有人","先进","服务端","节点","只","点对点","而且","必须","dds","处理","之","旋转","通信","时","不感兴趣","第一","以","多","了","找到","传送","整个","作为","正常","通信模型","优化","常用","提供","几种","更","服务","第三","连接","当","架构","每个","模型","所","行","在于","一种","优势","服务器","增长","明显","广播","发布","速度","列出","框架","就是","为","有些","所有","并且","这个","吃","非常","增多","感兴","databus","通道","之前","ros1","需要","火锅","四种","忽略","二种","兴趣","关系","第二","实现","一个","第一种","知道","不用","真正","三种","第三种","上","但","有人","解决","自己","具体地址","一旦","系统","异常","双方","每条","务器","这里","发生","第二种","单独","太多","，","能够","与","订阅","运转","会","一步","影响","收到","客户端","生变","包含","是","其实"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_1","text":"DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。","text_tokens":["能源","和","定位","比如","非常","dds","交换","之前","满足","都","需要","通信","在","感知","地","广泛","。","等","数据","领域","国防"," ","预测","好","一个","并","频繁","存在","广泛应用","的","驾驶","借助","很","很多","模块","通常","高速","交通","需求","医疗","新","，","航空","可以","会","ros2","方式","已经","应用","不是","决策","它们","这些","自动"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_2","text":"好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是Data Distribution Service，也就是数据分发服务，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。","text_tokens":["专门","管理","策略","地","当然","兼容","过","。","还有","由"," ","我们","强调","完整","网络","布式","distribution","data","、","到底","可能","成为","需求","建模语言","对象","分布式","中","进行","corba","中间","成立","来","全称","和","强制","半天","分发","海军","数据","中心","使命","技术","各种","丰富","维护","它","高效","保障","uml","？","的","一下","问题","/","于","听说","可以","也","做","软件","美国","应用","数以千计","2004","介绍","环境","实时","dds","容性","通信","以","说了半天","课","意思","提供","好","1989","服务","语言","分布","设计","升级","兼容性问题","发布","最早","复杂","sysml","大量","提","就是","为","一套","已经","技术标准","比如","omg","垂直","满足","可","标准","灵活","中间件","呢","等","现在","服务质量","service","一个","舰船","统一","啦","啥意思","价值","解决","建模","开发","系统","组织","这里","，","行业","订阅","大家","年","兼容性","是","质量","真实"],"title":"什么是DDS","title_tokens":["什么","是","dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#ddsros2","text":"DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。","text_tokens":["至关","位置","专利","没","架构图","用户","接口","此时","兼容","。"," ","5g","不管","我们","哪","转移","开源","综合","场景","使用","建设","这么","布式","有","、","函数","可能","很多","编程","既然","红色","构图","像","分布式","机器人","就","中","而言","加入","让","这样","过程","性","中间","工业","建立","接口标准","驱动","来","想","和","功能","都","性能","重要","在","如果","高通","技术","组成","具体","？","任","的","问题","部分","边","至关重要","模块","下边","符合","得","4g","还是","可以","也","选用","蓝色","为了","其他","软件","选择","用","应用","一样","尽量","上层","刚才","版本","或","dds","容性","无论如何","你","通信","不","那","多","了","给","更","每","分布","设计","他们","架构","四大","企业","原则","由于","放在","一种","就行","ros","保证","大大","进入","把","该用","ros2","就是","所有","按照","这个","要","商业","比如","不变","需要","可","标准","生态","纠结","中间件","个人","呢","无论","某一","能力","代码","基本","实现","一个","厂商","统一","复用","但","上","自己","开发","系统","组织","华为","差别","组成部分","宗旨","对应","那个","之上","授权","这里","对","多个","，","大大提高","能够","大家","肯定","middleware","会","根据","机器","影响","如何","时间","兼容性","是","上边","所以","提到","提高"],"title":"DDS在ROS2中的应用","title_tokens":["的","中","dds","ros2","应用","在"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#qos","text":"DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是Domain，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为数据提供者和接收者之间的合约。 具体会有哪些策略？比如这个列表中描述的DEADLINE策略，表示通信数据必须要在每次截止时间内完成一次通信，HISTORY策略，表示针对历史数据的一个缓存大小，RELIABILITY策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式。 还有这个DURABILITY，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。","text_tokens":["_","reliability","树莓","办法","针对","策略","将","地","来看","发送给","此时","。","无用","还有","指令","传输"," ","流畅性","我们","供者","要求","便于","完整","网络","场景","焕然","使用","视频","尽可","顺利","哪些","出现","这么","有","缓存","参数","一定","应用程序","可能","互相","没有","完成","需求","配置","那该","分组","客户","但是","机器人","这种","类似","带","更好","中","进行","派","加入","这样","让","黑客","图","过程","回忆","众多","导致","history","遥控","和","每次","功能","都","提供者","不同","先","重要","在","如果","数据","延时","理解","domain","无人","deadline","程序","过去","绑定","历史数据","具体","指定","？","的话","的","合约","适应","图像","durability","定义","特性","表示","一起","同一个","可以","举","也","体","可信赖","门","资源","选择","电脑","另外","用","应用","节点","成","best","尽量","必须","一新","内","dds","合适","默认","通信","不","模式","effort","了","多","小组","给","遥控器","通过","通信模型","处于","提供","可信","好","接收","服务","描述","每","完整性","焕然一新","直接","qos","人机","送给","无人机","所","模型","空间","保证数据","历史","命令","快速","一种","数据通信","下","id","晚","ros","保证","控制","加密","ros2","就是","占用","大小","全局","为","航拍","所有","这些","这个","信赖","要","才能","比如","尽力","情况","黑入","截止","之前","满足","不好","需要","丢失","呢","尽可能","行为","时候","关系","基本","避免","流畅","实现","各个","一个","样","发送","啦","结构","列表","reliable","系统","之间","数据通","那个","掉","向","入个","例子","对","同一","运动","一次","新","，","接收者","大家","只有","会","根据","机器","如何","一些","时间","是","质量","帧"],"title":"质量服务策略QoS","title_tokens":["服务","策略","质量","qos"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_3","text":"我们先来试一试在命令行中配置DDS的参数。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort $ ros2 topic info /chatter --verbose","text_tokens":["_","42","chatter","dds","reliability","echo","先","在","effort","。"," ",":","-","我们","msg","试一试","info","qos","的","data","reliable","参数","int32","/","--","命令","配置","$","命令行","pub","msgs","\"","topic","中","std","verbose","ros2","best","来"],"title":"案例一：在命令行中配置DDS","title_tokens":["中","dds","命令","配置","在","命令行","一","案例","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_4","text":"接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。","text_tokens":["dds","之前","通信","接下来","在","以","。","为例","代码"," ","hello","我们","话题","world","配置","，","尝试","下来","中","接下"],"title":"案例二：DDS编程示例","title_tokens":["dds","案例","二","编程","示例","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_2","text":"$ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub","text_tokens":[" ","learning","_","helloworld","run","ros2","sub","$","pub","qos"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_3","text":"learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , },","text_tokens":["_","reliability","'","接口","示例","none","父类","spin"," ","scripts","hello","self","publisher","qosreliabilitypolicy","import","并","文件","name","guyuehome","话题","create","from","data","、","函数","主","完成","配置","消息","args","msgs","对象","0.5","super","std","中","进行","秒","加入","周期","让","输出","关闭","get","def","初始","history","(","提示","logger","console","功能","入口","entry","：","数据","）","-","msg","程序","（","后","编写","coding","bin","com","init","的","字符","/","__","[","日志","python3","publishernode","learning","\"",")","说明","py","1","信息","库","节点","best","publish","古月","main","退出","如下","创建","chatter","node","qosprofile","回调","}","等待","!","string","effort","depth","“","名","填充","@","qos","destroy","8","last","setup","world","原则","字符串","*","”","s","发布","类型","定时","ros2","profile","shutdown","设置","包","timer","为","已经","points","{","callback","rclpy","=","居","作者","www","需要","qoshistorypolicy","python","单位","代码",":",",","一个","%","销毁","info","usr","知道","打开","#","初始化","publishing","reliable","选项","系统","helloworld","执行","pub","class","，","发布者","定时器","keep","循环","点","env","类",".","utf","编译"],"title":"发布者代码解析","title_tokens":["代码","解析","发布者","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_4","text":"learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], },","text_tokens":["_","reliability","'","接口","示例","none","父类","spin"," ","scripts","hello","self","qosreliabilitypolicy","import","并","文件","name","guyuehome","话题","create","from","data","、","函数","主","完成","配置","消息","args","msgs","对象","super","std","进行","加入","subscribernode","让","输出","关闭","get","def","sub","初始","history","(","提示","logger","console","功能","入口","entry","heard","：","数据","）","-","msg","程序","（","后","编写","coding","bin","com","init","的","/","定义","__","[","日志","python3","learning","\"",")","说明","py","1","信息","库","节点","best","古月","main","退出","如下","创建","chatter","处理","node","]","qosprofile","回调","}","等待","!","string","effort","depth","“","名","@","qos","destroy","8","last","setup","world","原则","*","”","s","者","类型","ros2","profile","subscription","shutdown","设置","包","points","{","callback","rclpy","=","居","\\","作者","www","需要","listener","标准","qoshistorypolicy","python","i","代码",":",",","一个","%","销毁","info","usr","知道","打开","#","初始化","reliable","选项","系统","helloworld","执行","对","class","pub","，","订阅","keep","循环","点","env","收到","类",".","utf","编译"],"title":"订阅者代码解析","title_tokens":["代码","订阅","者","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_5","text":"DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们课上主要带领大家认识DDS，更多使用方法和相关内容，课程配套的教程中会有介绍，大家也可以参考这里的链接进行学习。 https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["非常","和","相关","_","en","dds","参考","教程","www","org","课程","https","vendors","多","。","课上"," ","冰山一角",":","design","on","-","我们","how","different","学习","articles","to","video","rmw","一个","更","humble","配套","about","使用","docs","带领","com","本身","有","的","主要","bv12z4y167w2","系统","非常复杂","/","with","冰山","认识","这里","内容","，","guides","可以","working","implementations","也","ros","复杂","大家","方法","bilibili","进行","middleware","只是","链接","ros2","中会","concepts","html","multiple",".","是","一角","介绍"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/","text":"工作空间：开发过程的大本营 大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是工程。 工作空间是什么 类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做工作空间。 所以工作空间是一个存放项目开发相关文件的文件夹，也是开发过程中存放所有资料的大本营。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。 创建工作空间 了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 自动安装依赖 我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init & rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y 编译工作空间 依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。 设置环境变量 编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["操作","sh","_","参考","针对","管理","名称","creator","工具栏","source","https","y","此时","过","。","环境变","html"," ","变量","看到","我们","强调","学习","或者","humble","环境变量","并","点击","空间结构","使用","文件","docs","下载","存放","到","w","guyuehome","有","错误","总体","&","、","参数","from","pip","子目","完成","这","项目","子目录","运行","配置","子","creating","用于","机器人","想要","就","类似","一点","一部","cd","中","进行","clone","让","里","很少","过程","install","结果","3","应该","中间","log","b","集成","rosdep","和","..","en","教程","功能","都","接下来","一部分","在","visual","数量","如果","：","各种","绝大部分","允许","所示","-","还","程序","得到","后","社区","编写","警告","p","apt","手动","大本","com","init","的","工具","成功","部分","/","git","当前","--","件夹","src","定义","四个","b2","日志","内容","完全","可以","python3","也","否则","至此","为了","\"","里边","唯一","像是","链接","信息","用","叫做","1","另外","根目录","依赖","后续","环境","一样","任何","了解","创建","放置","如下","ws","echo","从","workspace","时","编写程序","安装","了","“","找到","报错","人为","两个","自动生产","出现",">","当","文件夹","gitee","local","目录","开始","空间","setup","仅","21","tutorials","命令","$","”","未来","；","不会","ros","大本营","sudo","以及","某些","ros2","设置","就是","包","bashrc","所有","工程","这些","并且","这个","可执行文件","要","自动","中会","工作","相关","比如","情况","mkdir","rosdistro","之前","a","需要","接触","org","某","~","保存","qt","i","colcon","等","生产","均","代码","build","关系","产生",":","一个","来讲","update","啦","结构","生效","存在","#","eclipse","自己","开发","选项","终端","系统","2","大部","rosdepc","典型","执行","绝大","多个","这里","新","行文","，","概念","能够","下来","大家","多少","studio","脚本","并列","会","机器","什么","dev","大部分","接下","资料","一些","pip3",".","以上","是","如图所示","不是","所以","path","缺少","编译"],"title":"**工作空间：开发过程的大本营**","title_tokens":["的","大本营","开发","工作","空间","*","过程","大本","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_1","text":"大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是工程。","text_tokens":["和","工作","比如","创建","放置","之前","都","接触","creator","工具栏","在","visual","编写程序","qt","此时","过","。","等","“"," ","产生","我们","学习","程序","一个","编写","点击","文件","eclipse","有","当","的","工具","开发","、","选项","文件夹","件夹","”","新","内容","，","想要","大家","就","以及","中","studio","里边","某些","会","后续","叫做","应该","是","所有","工程","集成","这些","环境","这个"],"title":"工作空间：开发过程的大本营","title_tokens":["的","大本营","开发","工作","空间","过程","大本","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_2","text":"类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做工作空间。 所以工作空间是一个存放项目开发相关文件的文件夹，也是开发过程中存放所有资料的大本营。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。","text_tokens":["操作","_","针对","管理","名称","。"," ","我们","强调","或者","并","空间结构","文件","存放","到","w","有","错误","总体","、","参数","子目","这","项目","子目录","运行","子","用于","机器人","就","类似","一点","一部","中","进行","里","很少","过程","install","结果","3","b","中间","log","集成","和","功能","都","一部分","在","数量","：","各种","绝大部分","允许","所示","得到","后","编写","警告","大本","的","成功","部分","件夹","src","定义","四个","b2","日志","完全","可以","也","里边","唯一","像是","信息","用","叫做","1","另外","根目录","环境","一样","放置","创建","ws","时","安装","了","人为","两个","文件夹","目录","开始","空间","未来","；","ros","大本营","某些","就是","所有","工程","这个","可执行文件","要","工作","相关","比如","情况","a","需要","某","保存","等","代码","build","关系","产生","一个","来讲","结构","存在","自己","开发","系统","2","大部","典型","执行","绝大","多个","这里","行文","新","，","脚本","并列","会","机器","dev","大部分","资料","一些","以上","是","如图所示","不是","所以","编译"],"title":"工作空间是什么","title_tokens":["是","工作","什么","空间"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_3","text":"了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git","text_tokens":["工作","和","了解","如下","创建","mkdir","教程","_","ws","接下来","https","~","了","：","代码"," ",":","-","我们","一个","p","使用","下载","com","gitee","guyuehome","的","空间","/","git","21","tutorials","命令","src","$","，","可以","概念","下来","cd","接下","clone","dev","ros2","结果",".","并且"],"title":"创建工作空间","title_tokens":["工作","空间","创建"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_4","text":"我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init & rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y","text_tokens":["..","rosdistro","从","都","y","i","安装","：","代码"," ","各种","-","我们","社区","一个","humble","update","使用","apt","手动","下载","&","init","有","的","工具","from","rosdepc","pip","--","src","$","，","可以","python3","也","sudo","cd","中","多少","pip3","会","一些","install","rosdep","依赖","path","自动"],"title":"自动安装依赖","title_tokens":["安装","自动","依赖"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_5","text":"依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。","text_tokens":["工作","任何","如下","_","ws","在","~","如果","安装","colcon","：","生产","了","。","报错","代码"," ","build","-","看到","或者","后","啦","自动生产","使用","apt","文件","出现","有","错误","的","文件夹","成功","、","空间","/","件夹","完成","命令","$","不会","，","可以","自动","否则","python3","ros","就","sudo","cd","中","dev","中会","过程","install","应该","log","依赖","缺少","编译"],"title":"编译工作空间","title_tokens":["工作","空间","编译"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_6","text":"编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。","text_tokens":["和","_","sh","工作","创建","ws","echo","功能","需要","source","在","~","了","：","环境变","均","找到","。"," ","变量","还","我们","后","环境变量","文件","#","生效",">","的","成功","终端","setup","系统","空间","/","、","当前","执行","仅","完成","$","配置","行文","，","能够","就","为了","\"","dev","让","包","设置","bashrc","install","至此",".","所有","local","环境","可执行文件","编译"],"title":"设置环境变量","title_tokens":["变量","设置","环境变量","环境","环境变"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_7","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":[" ",":","en","-","/","a","workspace","tutorials","org","humble","html",".","https","creating","docs","ros"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/","text":"功能包：开发过程的大本营 在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做功能包。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。 创建功能包 如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python 编译功能包 在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash 功能包的结构 功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。 C++功能包 首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。 Python功能包 C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["编译","导航","_","拿","之外","原理","参考","名称","新建","将","source","感知","袋子","当然","https","源码","头疼","。","环境变","还有","讲解","指令"," ","package","变量","看到","我们","或者","环境变量","humble","并","使用","文件","name","下载","docs","到","cmake","有","放到","create","主要","、","黄豆","除此","可能","很多","编程","your","完成","这","很难","配置","运行","译成","豆子","cmakelists","creating","但是","机器人","包该","就","cd","中","包并","cmakerlists","是不是","里","过程","install","拆分","假设","红豆","来","想","和","en","教程","功能","都","不同","声明","入口","重要","在","数量","entry","如果","其中","pkg","：","版权","txt","各种","-","程序","社区","找","编写","包是","五颜六色","视觉","型","大本","？","的","划分","率","/","只想","--","件夹","src","表示","得","内容","一起","还是","可以","也","方法","learning","type","软件","分析","里边","说明","py","链接","新创","信息","用","叫做","而是","只","依赖","介绍","环境","后续","一样","尽量","刚才","必须","版本","first","如下","创建","ws","c++","workspace","发现","混合","时","你","之后","判断","不","那","ament","语法","多","了","出来","继续","“","给","正常","xml","好","两个","名字","之一","描述","语言","分享","首先","规则","他们",">","当","文件夹","立刻","每个","空间","setup","该","普通","解析","放在","命令","tutorials","$","；","<","看","”","下","类型","ros","大本营","控制","把","某些","包","ros2","就是","设置","points","所有","这些","这个","别人","起来","bash","要","可执行文件","才能","相关","比如","工作","机制","分别","a","需要","org","~","python","降低","是否","某种","colcon","等","耦合","很快","呢","代码","时候","关系","build",":","一个","复用","除此之外","但","拿出","结构","#","存在","颜色","手上","举个","开发","终端","c","之间","么","执行","绿豆","包中","例子","自主","三个","这里","编译成","行文","，","一颗","跟","大家","会","机器","新创建","dev","如何","一些","html","包含","越","移动","不是","是",".","所以","local","必然","是否是","提高"],"title":"**功能包：开发过程的大本营**","title_tokens":["的","大本营","开发","功能","*","包","过程","大本","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_1","text":"在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做功能包。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。","text_tokens":["导航","拿","原理","名称","感知","袋子","当然","源码","头疼","。"," ","看到","我们","并","使用","文件","下载","到","有","放到","、","黄豆","可能","很多","很难","豆子","但是","机器人","包该","就","中","是不是","里","拆分","假设","红豆","想","教程","功能","都","不同","重要","在","数量","如果","其中","社区","找","五颜六色","视觉","的","划分","率","只想","件夹","得","一起","可以","也","方法","软件","说明","用","叫做","而是","只","尽量","发现","混合","时","你","不","多","了","出来","给","之一","分享","他们","当","文件夹","立刻","每个","普通","放在","；","ros","控制","把","某些","ros2","包","就是","这些","这个","别人","起来","比如","机制","需要","降低","某种","等","耦合","很快","代码","时候","关系","一个","复用","拿出","颜色","手上","举个","之间","么","绿豆","包中","例子","自主","三个","，","一颗","大家","会","机器","如何","越","移动","不是","是","所以","提高"],"title":"功能包：开发过程的大本营","title_tokens":["的","大本营","开发","功能","包","过程","大本","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_2","text":"如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python","text_tokens":["和","_","相关","创建","比如","版本","分别","ws","功能","c++","新建","在","那","python","如果","ament","~","pkg","：","呢","。","指令","build"," ","package","-","我们","或者","一个","名字","包是","使用","name",">","#","cmake","？","create","的","终端","c","/","--","命令","src","$","<","表示","；","这里","，","还是","可以","跟","就","learning","type","cd","中","新创建","新创","ros2","包","如何","dev","这个"],"title":"创建功能包","title_tokens":["包","功能","创建"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_3","text":"在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash","text_tokens":["和","才能","_","创建","工作","ws","功能","需要","之后","在","source","~","继续","colcon","：","环境变","代码"," ","变量","build","正常","我们","好","环境变量","编写","#","的","setup","空间","/","完成","src","配置","包中","运行","$","，","可以","cd","dev","包","bash","install",".","所有","local","环境","编译"],"title":"编译功能包","title_tokens":["包","功能","编译"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_4","text":"功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。","text_tokens":["刚才","创建","功能","判断","那","是否","。","呢","我们","两个","一个","结构","文件","？","文件夹","的","普通","件夹","，","下","包并","分析","新创建","新创","包","如何","不是","是否是","来"],"title":"功能包的结构","title_tokens":["的","功能","包","结构"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#c","text":"首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。","text_tokens":["必须","和","才能","如下","c++","功能","需要","声明","在","其中","语法","：","。","版权","txt","代码"," ","package","各种","xml","两个","描述","首先","规则","文件","存在","使用","cmake","的","主要","该","要","运行","看","cmakelists","内容","，","下","类型","中","cmakerlists","包","设置","如何","包含",".","是","必然","依赖","所以","编译"],"title":"C++功能包","title_tokens":["c++","功能","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#python","text":"C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。","text_tokens":["之外","和","版本","_","c++","功能","需要","不同","声明","将","入口","entry","不","在","python","源码","：","。","版权","还有","“","讲解"," ","package","各种","给","xml","我们","程序","两个","描述","语言","除此之外","但","使用","文件","型","有","的","主要","除此","setup","执行","解析","编程","这","介绍","译成","配置","编译成","”","行文","内容","，","但是","也","大家","一样","里边","中","会","py","包","信息","points","一些","如何","包含",".","是","依赖","所以","后续","可执行文件","编译"],"title":"Python功能包","title_tokens":["功能","包","python"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_5","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["first","en","a","workspace","org","https"," ",":","package","-","humble","docs","/","tutorials","your","creating","ros","ros2","html","."],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/","text":"节点 机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。 通信模型 完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。 案例一：Hello World节点（面向过程） ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。 运行效果 大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ], 创建节点流程 代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。 案例二：Hello World节点（面向对象） 所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。 运行效果 下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ], 创建节点流程 所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。 案例三：物体识别节点 没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。 运行效果 在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。 代码解析 在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ], 案例四：机器视觉识别节点 用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。 运行效果 启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 注意：如果是在虚拟机中操作，需要进行以下设置： 把虚拟机设置为兼容USB3.1； 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。 代码解析 相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ], 节点命令行操作 节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息 思考题 现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["_","每一项","更多要","none","y","还有","没错","scripts","负责","使用","可视化","到","布式","面向","高","可能","配置","运行","远程","总结","来源","保持联系","类似","更好","让","里","输出","install","应该","def","模块化","坐标","不同","入口","先","在","如果","一节","二值化","考题","面向对象","程序","它","组成","摄像","bin","的","字符","一下","窗口","waitkey","查询","很","int","问题","例程","__","四个","所以然","detect","usb3.1","所在","python3","做","经常","可移植性","信息","用","叫做","后勤部门","节点","电脑","boundingrect","imread","环境","刚才","run","ws","c++","任务","node","发现","勾勒","findcontours","噪声","以","找到","细胞","给","启动","好","设计","点画","对于","destroy","当","8","cv2","开始","模型","桌子","time","home","改成","{","points","shutdown","并且","apple","居","之前","需要","ok","image","物体","python","某种","为例","时候","移植",",","webcam","思考题","销毁","打开","不用","drawcontours","选项","左右","上角","系统","helloworld","图片","2","回到","轮子","这款","这里","发生","以下","下来","用到","一张","bgr","收到","更多","实际","即可",".","不是","各不相同","最大","宽","之外","编译","inrange","过来","依然","兼容","。","spin","二","import","综合","while","humble","虚拟机","文件","出现","w","多种","除此","简单","相机","机器人","想要","分布式","这种","numpy","周期","ruby","50","b","众多","get","关闭","一","共同","驱动","en","logger","编码方式","数值","马","课程","entry","身体","再","其中","像素","各种","改变","255","（","后","图像识别","着急","工厂","init","approx","获取","成功","/","载体","模块","推荐","框会","[","表示","动态","日志","得","一起","方法","唯一","方式","算机","而已","上去","java","main","退出","理过","实时","处理","重点","呀","contours","合体","编写程序","circle","了","通过","@","正常","提供","名字","图像处理","检测","位于","搭载","阈值","180","该","world","相比","字符串","保持","算是","放在","tutorials","一线","jpg","关注","转换","sudo","某些","框架","ros2","眼睛","这些","及","轮廓","要","难","工作","5","a","具备","某","出","纠结","等","摇杆","现在","前后左右","red","实现","发送","但","结构","150","初始化","0","之间","吧","知其然","upper","运动","，","总体而言","去除","后勤部","左上角","一台","env","这座","可读性","dev","移动","所以","稍微","查看","计算机","continue","名称","'","网上","熟悉","调试","https","来看","模拟","可视","过","指令","看到","我们","一项","关于","read","综合体","for","docs","绿色","from","总体","、","参数","到底","读取","识别","摄像头","互相","主","编程","成为","既然","完成","hierarchy","岂","像","args","x","对象","移植性","一点","0.5","中","进行","super","hsv","而言","不过","这样","是不是","if","过程","结果","sleep","初始","来","和","云端","功能","imshow","接下来","重要","最为","想到","中心","自然","得到","apt","视觉","具体","保障","监控","命名","？","com","的话","下限","true","shape","图像","cap","还是","\"","注意","可读","四","cvtcolor","xy","相同","库","思考","去","部门","古月","list","流程","如下","创建","看上","不能","从","]","你","调整","前后","时","效果","等待","!","as","多","出来","lower","孤立","请","只不过","retr","两个","更","每","语言","分布","他们",">","就让","每个","*","解析","21","推动","命令","一帧","；","看","未来","虽然","下","整体","ros","虚拟","控制","生成","状态","太","设置","包","90","为","还会","+","这个","角度","可执行文件","起来","疑惑","看看","=","三","hcx","此处","然后","范围","www","是否","呢","代码",":","np","—","先拉","destroyallwindows","编程语言","info","usr","#","颜色","物理","终端","腿","执行","命令行","class","绿点","概念","大家","显示","更为","接下","会","职责","根据","如何","一些","html","是","中心点","操作","乃至","参考","pyhton","没","in","接口","将","示例","当然","父类"," ","object","hello","self","学习","或者","chain","完整","并","name","guyuehome","有","函数","至","更加","这","打印","红色","array","但是","步骤","可移植","就","前","休眠","加入","硬件","cnt","中间","(","框架图","img","console","合理","都","知其所以然","上限","：","为止","nodes","）","理解","mask","-","还","独立","骡子","做到","编写","变化","苹果","后勤","coding","工人","看上去","h","会弹","计算","src","认识","中将","可以","也","这份","learning","分析",")","说明","py","只是","被","链接","1","另外","介绍","一样","同理","处理过程","联系","通信","不","那","安装","“","方便","太小","通信模型","人为","常用","连接","面积","color","比喻","setup","取","$","一种","”","<","地方","发布","复杂","速度","心里","bgr2hsv","把","videocapture","就是","重新","厂房","ret","却","rclpy","进程","修改","understanding","比如","机制","作者","分别","可","好像","不要","org","操作系统","编码","路径","一个","知道","除此之外","溜溜","helloworldnode","上","啦","设备","列表","开发","opencv","行文","像头","循环","点","机器","128","类","utf","时间","案例","左上","外界"],"title":"**节点**","title_tokens":["节点","*"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_1","text":"机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。","text_tokens":["工作","机制","功能","每一项","合体","在","那","了","。","“","细胞","给"," ","各种","通过","我们","一项","综合","一个","名字","综合体","连接","到","的","成为","取","”","像","，","一起","整体","机器人","ros","就","中","机器","就是","一些","节点","是","众多","这些"],"title":"节点","title_tokens":["节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_2","text":"完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。","text_tokens":["操作","编译","乃至","计算机","名称","来看","。","还有"," ","看到","我们","或者","完整","并","文件","到","布式","有","除此","参数","、","到底","可能","摄像头","互相","编程","既然","完成","这","配置","运行","远程","机器人","想要","就","分布式","中","硬件","这样","里","让","ruby","结果","b","共同","来","和","云端","功能","都","不同","接下来","在","身体","：","想到","自然","还","独立","程序","得到","它","后勤","组成","摄像","工人","具体","保障","监控","命名","的","工厂","获取","查询","载体","计算","认识","一起","可以","也","做","唯一","信息","另外","叫做","节点","算机","相同","后勤部门","去","环境","部门","java","从","任务","c++","你","前后","时","不","那","多","了","“","找到","细胞","通过","人为","提供","更","外界","语言","分布","设计","连接","每","他们","位于","搭载","当","比喻","每个","该","桌子","算是","放在","推动","一线","；","”","虽然","地方","整体","复杂","速度","控制","生成","某些","状态","就是","眼睛","还会","这些","这个","角度","可执行文件","厂房","却","进程","看看","工作","比如","分别","a","需要","某","python","等","操作系统","时候","摇杆","—","前后左右","实现","一个","编程语言","除此之外","但","上","物理","左右","腿","系统","执行","轮子","这款","运动","行文","，","像头","下来","后勤部","更为","一台","接下","机器","职责","根据","这座","如何","移动","不是","是","各不相同","之外"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world","text":"ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。","text_tokens":["从","功能","需要","先","编写程序","最为","不","当然","了","。","“"," ","hello","我们","程序","实现","一个","编写","并","到","的","字符","终端","开始","world","字符串","例程","打印","”","简单","，","复杂","循环","中","ros2","就是","节点","是","来"],"title":"案例一：Hello World节点（面向过程）","title_tokens":[" ","面向","world","hello","（","过程","节点","一","案例","：","）"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_3","text":"大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["_","然后","run","node","先","不要","马","课程","效果","再","知其所以然","在","出来","。","“","代码"," ","通过","看到","hello","我们","骡子","先拉","好","实现","做到","后","溜溜","着急","的","字符","成功","终端","world","helloworld","执行","字符串","命令","知其然","$","运行","打印","看","来","所以然","”","，","下","可以","也","大家","learning","循环","中","分析","ros2","如何","过程","节点","是","所以","这个","编译"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_4","text":"这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ],","text_tokens":["_","'","接口","示例","none","来看","。"," ","scripts","hello","我们","import","while","并","使用","文件","guyuehome","from","函数","面向","主","完成","配置","运行","args","对象","0.5","休眠","进行","加入","让","输出","过程","sleep","关闭","get","def","初始","(","logger","console","功能","入口","entry","：","-","程序","后","编写","coding","bin","com","init","？","的","/","[","日志","python3","learning","\"",")","说明","py","信息","库","节点","方式","古月","main","如下","创建","node","]","!","“","@","正常","destroy","8","setup","world","*","”","下","time","发布","控制","ros2","设置","shutdown","包","points","{","这个","rclpy","=","居","作者","www","需要","ok","python","是否","呢","代码",":",",","实现","销毁","info","usr","知道","打开","#","初始化","选项","系统","helloworld","，","循环","点","env","如何","类",".","utf","是","时间","编译"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_5","text":"代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。","text_tokens":["难","流程","创建","模块化","pyhton","功能","c++","发现","接口","先","重要","如果","纠结","过","。","：","代码","理解"," ","编码","我们","学习","或者","做到","实现","一个","更","并","不用","销毁","使用","对于","出现","具体","初始化","有","的话","的","一下","函数","面向","系统","很","模块","编程","未来","这里","简单","就","，","总结","可以","虽然","但是","想要","机器人","大家","方法","用到","做","这种","中","经常","复杂","一点","会","机器","这样","过程","节点","方式","关闭","是","应该","初始","稍微"],"title":"创建节点流程","title_tokens":["节点","流程","创建"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world_1","text":"所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。","text_tokens":["刚才","和","比如","看上","具备","在","调试","起来","了","。","方便","代码"," ","移植","我们","面向对象","更","使用","看上去","的","开发","面向","更加","推荐","编程","也","，","虽然","可以","但是","对象","可移植","大家","就","复杂","更好","移植性","中","改成","可读","会","可读性","ros2","这样","可移植性","一些","方式","所以","上去"],"title":"案例二：Hello World节点（面向对象）","title_tokens":[" ","面向","world","hello","案例","面向对象","二","（","）","节点","：","对象"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_6","text":"下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["_","run","node","调整","效果","在","：","“","。"," ","看到","hello","后","的","一下","成功","终端","字符","world","helloworld","字符串","$","运行","打印","”","class","，","还是","可以","下来","learning","循环","中","ros2","节点"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_7","text":"功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ],","text_tokens":["_","'","接口","示例","none","。","父类","spin"," ","scripts","hello","我们","self","import","while","并","使用","文件","name","guyuehome","from","函数","面向","主","完成","配置","运行","args","但是","对象","0.5","休眠","super","进行","加入","让","输出","sleep","关闭","get","def","初始","(","logger","console","功能","入口","entry","：","-","面向对象","程序","后","编写","变化","coding","bin","具体","com","init","的","一下","/","__","[","日志","python3","这份","learning","\"",")","说明","py","信息","库","节点","方式","一样","古月","main","退出","如下","创建","node","]","时","等待","!","了","“","@","正常","destroy","8","setup","world","*","”","看","虽然","time","发布","控制","ros2","设置","shutdown","包","points","{","rclpy","=","居","作者","www","需要","ok","python","是否","代码",":",",","实现","一个","销毁","info","usr","helloworldnode","结构","知道","#","打开","初始化","选项","系统","helloworld","发生","class","，","循环","点","env","类",".","utf","时间","编译"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_8","text":"所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。","text_tokens":["创建","不能","编码方式","功能","任务","接口","依然","了","。","还有","为止"," ","编码","hello","改变","只不过","实现","一个","并","销毁","初始化","到","具体","总体","的","world","吧","编程","完成","这","打印","四个","这里","得","，","总体而言","步骤","机器人","做","大家","心里","中","而言","不过","机器","是不是","只是","一些","节点","方式","而已","是","关闭","不是","所以","初始","疑惑"],"title":"创建节点流程","title_tokens":["节点","流程","创建"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_9","text":"没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。","text_tokens":["从","任务","网上","接下来","先","模拟","以","。","为例","找到","没错"," ","通过","我们","实现","一个","编写","苹果","视觉","的","图片","识别","，","机器人","下来","就","一张","中","接下","机器","过程","实际","节点","来"],"title":"案例三：物体识别节点","title_tokens":["案例","识别","节点","物体","：","三"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_10","text":"在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。","text_tokens":["编译","_","'","将","可视","。","指令"," ","object","看到","我们","使用","可视化","绿色","识别","运行","前","就","中","install","中间","(","在","：","中心","-","后","苹果","apt","的","窗口","成功","会弹","/","图像","src","例程","框会","表示","可以","python3","learning","注意",")","被","py","库","imread","如下","处理","run","ws","node","勾勒","安装","出来","请","图像处理","cv2","21","tutorials","$","jpg","sudo","home","把","ros2","为","重新","这个","apple","轮廓","修改","=","hcx","然后","需要","image","出","代码","路径","—","一个","啦","#","图片","opencv","绿点","，","用到","dev","实际",".","中心点","即可"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_11","text":"在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ],","text_tokens":["_","continue","in","'","接口","更多要","示例","none","将","y","模拟","。","spin"," ","object","scripts","我们","chain","关于","import","并","使用","for","文件","出现","w","guyuehome","from","函数","高","识别","主","读取","hierarchy","完成","配置","红色","x","args","array","机器人","numpy","对象","中","进行","hsv","加入","if","让","过程","cnt","关闭","get","def","初始","来","(","和","img","logger","console","功能","坐标","数值","imshow","入口","在","上限","entry","像素","：","中心","mask","-","二值化","255","程序","得到","后","编写","图像识别","苹果","coding","bin","h","具体","com","init","approx","的","waitkey","下限","/","shape","int","图像","计算","src","例程","[","detect","所在","python3","learning","\"",")","说明","py","cvtcolor","xy","1","库","节点","boundingrect","imread","古月","list","处理过程","main","退出","如下","理过","创建","处理","重点","噪声","从","node","]","勾勒","contours","findcontours","效果","ws","等待","circle","!","as","了","出来","lower","太小","通过","@","retr","面积","点画","图像处理","destroy","检测","color","宽","8","cv2","阈值","180","模型","setup","*","21","tutorials","<","关注","jpg","转换","home","bgr2hsv","ros2","90","shutdown","设置","包","points","为","{","+","这个","及","轮廓","apple","此处","rclpy","=","居","hcx","作者","www","范围","5","需要","image","python","代码",":","np",",","red","实现","一个","destroyallwindows","销毁","info","usr","知道","drawcontours","打开","#","150","颜色","初始化","0","选项","上角","2","系统","图片","helloworld","opencv","upper","class","，","概念","大家","显示","循环","bgr","去除","左上角","点","机器","env","dev","128","如何","更多","类","一些",".","utf","不是","是","左上","编译","inrange"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_12","text":"用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。","text_tokens":["呀","合理","没","好像","接下来","不","物体","其中","。","还","我们","或者","苹果","摄像","颜色","就让","有","的","问题","图片","识别","读取","摄像头","图像","动态","，","像头","机器人","下来","类似","进行","接下","太","机器","用","节点","应该","眼睛"],"title":"案例四：机器视觉识别节点","title_tokens":["识别","四","机器","节点","视觉","案例","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_13","text":"启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 注意：如果是在虚拟机中操作，需要进行以下设置： 把虚拟机设置为兼容USB3.1； 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。","text_tokens":["操作","_","如下","实时","run","node","需要","可","在","物体","如果","兼容","：","。"," ","object","启动","webcam","后","一个","虚拟机","啦","连接","设备","#","摄像","的","终端","成功","该","至","摄像头","识别","$","运行","；","红色","usb3.1","，","以下","中将","可以","像头","虚拟","就","learning","注意","中","进行","把","ros2","设置","节点","为","移动","是","并且","驱动"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_14","text":"相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ],","text_tokens":["_","continue","in","'","接口","将","示例","none","y","。"," ","object","scripts","chain","read","import","while","并","使用","for","文件","出现","w","guyuehome","from","函数","高","识别","摄像头","主","读取","hierarchy","完成","配置","红色","x","相机","来源","array","args","对象","numpy","中","进行","hsv","加入","周期","if","50","让","cnt","关闭","get","def","驱动","初始","来","(","和","img","logger","console","功能","坐标","数值","imshow","入口","上限","entry","像素","：","中心","mask","-","二值化","程序","255","得到","后","编写","变化","苹果","coding","bin","摄像","h","com","init","approx","的","waitkey","下限","/","shape","int","图像","true","计算","cap","[","detect","所在","python3","learning","\"",")","说明","py","cvtcolor","xy","信息","1","库","节点","boundingrect","古月","list","main","如下","创建","处理","噪声","从","node","]","勾勒","contours","findcontours","效果","circle","!","as","了","出来","lower","太小","通过","@","retr","面积","点画","图像处理","destroy","检测","color","宽","8","相比","cv2","阈值","180","模型","setup","*","一帧","<","转换","bgr2hsv","videocapture","ros2","90","shutdown","设置","包","points","为","{","+","并且","及","轮廓","ret","rclpy","修改","=","居","作者","www","之前","范围","5","需要","ok","image","python","代码",":","np",",","webcam","red","销毁","info","usr","知道","drawcontours","打开","#","150","颜色","初始化","0","选项","上角","2","系统","图片","helloworld","这里","opencv","upper","class","，","像头","显示","bgr","去除","左上角","点","env","128","类","一些",".","utf","是","最大","左上","编译","inrange"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_15","text":"节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息","text_tokens":["操作","_","如下","node","："," ","常用","info","name","#",">","列表","的","命令","$","<","ros2","信息","节点","list","查看"],"title":"节点命令行操作","title_tokens":["操作","节点","命令行","命令"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_16","text":"现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。","text_tokens":["过来","将","熟悉","。","指令"," ","没错","看到","我们","负责","并","有","多种","参数","摄像头","这","岂","配置","保持联系","机器人","想要","就","中","应该","b","框架图","和","在","最为","如果","一节","改变","后","摄像","的","问题","很","图像","得","方法","电脑","另外","节点","介绍","同理","联系","发现","了","孤立","细胞","给","常用","两个","连接","他们","开始","保持","一种","下","ros","速度","控制","把","框架","还会","这些","这个","要","工作","比如","机制","a","某种","摇杆","现在","实现","一个","发送","回到","系统","之间","运动","，","像头","概念","大家","显示","会","机器","收到","不是"],"title":"思考题","title_tokens":["思考题","考题","思考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_17","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":[":","understanding","en","-","/","ros2","tutorials","org","humble","html",".","https","docs","nodes","ros"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/","text":"话题 节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。 通信模型 以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。 发布/订阅模型 从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为发布者，接收数据的对象称之为订阅者，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。 多对多通信 大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。 异步通信 话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。 消息接口 最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过.msg后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。 案例一：Hello World话题通信 了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 运行效果 启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。 发布者代码解析 我们来看下发布者的实现方法。 程序实现 learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口 订阅者代码解析 我们再来看下订阅者的实现方法。 程序实现 learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。 案例二：机器视觉识别 在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。 运行效果 这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。 发布者代码解析 learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], }, 订阅者代码解析 learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], }, 案例三：机器视觉识别优化 通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub 话题命令行操作 话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息 思考题 关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？ 参考链接 https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["_","用户","none","bgr8","y","挺","人","换成","此时","原本","换","还有","传输","没错","scripts","要求","焕然","使用","可视化","报纸","到","逻辑性","data","没有","高","可能","很多","更换","配置","运行","小编","总结","用于","类似","更好","优先级","在生活中","让","里","输出","install","应该","def","发送数据","模块化","号","坐标","各种各样","入口","先","在","如果","数据","传感器","二值化","方向","杂志","考题","哪里","程序","它","传递数据","组成","bin","的","一下","字符","问题","waitkey","int","例程","__","转化成","detect","所在","python3","做","英文","软件","后缀","可移植性","信息","用","叫做","节点","值","boundingrect","刚才","内","chatter","渲染","报社","run","噪声","node","传递","勾勒","单向","似乎","回调","之后","}","findcontours","以","给","启动","联系方式","作为","好","接收","焕然一新","设计","点画","对于","destroy","第一个","已","8","cv2","开始","模型","说干就干","topic","就要","{","points","shutdown","说","并且","居","感兴","frame","之前","满足","需要","感器","image","物体","python","单位","某种","为例","兴趣","时候","移植","无关","同学","hz",",","webcam","思考题","统一","销毁","打开","频率","只要","drawcontours","留","根本","选项","上角","2","系统","helloworld","多个","这里","例子","转化","以下","发布者","想下","过瘾","下来","bgr","一步","什么","讲","收到",".","不是","最","宽","编译","inrange","提高","原理","不然","数据结构","平时","千丝","rgb","。","讲解","spin","又","publisher","据传","一般","二","import","humble","桥梁","视频","文件","w","话题","imgmsg","发出","消息","一行","相机","微信","机器人","想要","这种","sensor","numpy","秒","周期","b","格式","get","关闭","一","驱动","en","logger","数值","数量","entry","再","其中","像素","各种","随处","255","后","（","init","优先","approx","画面","获取","成功","/","模块","[","符合","得","日志","方法","间","唯一","方式","只","一新","main","退出","任何","实时","处理","呀","contours","出去","circle","string","继续","了","传感","各样","名","通过","@","优化","to","名字","topics","图像处理","检测","几个","阈值","180","该","并不知道","world","字符串","保持","tutorials","转换","类型","保证","sudo","进入","某些","cv","ros2","词","打","usb","这些","及","要","轮廓","才能","5","万缕","a","程序实现","指","listener","称之为","bridge","某","0.1","不行","cam","摇杆","现在","red","实现","%","来讲","每换","发送","但","结构","150","初始化","第二个","publishing","放入","0","之间","东西","随处可见","pub","运动","采集","upper","，","与","接口定义","去除","左上角","比方","env","固定","包含","积木","协议","精简","一句","化成","查看","continue","名称","'","https","来看","可视","指令","看到","我们","read","关于","适合","无法","进一步","for","docs","imagesubscriber","from","、","参数","读取","识别","主","互相","编程","成为","既然","完成","hierarchy","需求","像","args","x","msgs","对象","移植性","0.5","中","进行","super","hsv","不过","是不是","数据传输","这样","感兴趣","过程","if","听","集成","初始","来","10","对劲","想","和","建议","功能","imshow","接下来","重要","基本原理","中心","自然","同样","得到","长宽","receiving","apt","视觉","的话","com","监控","？","cvbridge","下限","true","shape","图像","听说","定义","cap","bw","特性","还是","举","\"","type","注意","等等","cvtcolor","xy","库","目标","思考","他会","从而","古月","中是","list","流程","了解","不能","创建","如下","从","合适","你","]","效果","第一","等待","!","as","多","出来","lower","填充","文章","最后","带宽","retr","两个","更","每","语言","稍后",">","区分","每个","什么样","*","解析","一帧","命令","未来","看","一篇","虽然","者","下","ros","控制","太","设置","包","90","timer","为","+","callback","这个","角度","三","=","排版","感觉","范围","www","不变","是否","呢","因为","通用","代码","关系",":","np","基本","第二","编程语言","所谓","info","usr","#","颜色","本身","转换成","终端","执行","么","命令行","长度","class","一次","概念","大家","显示","！","肯定","接下","会","如何","一些","html","以上","是","必然","控制指令","周期性","块","操作","参考","拼接","没","in","接口","将","第一次","示例","思想","当然","父类","不知"," ","object","hello","self","chain","并","name","guyuehome","有","create","拍摄","函数","一定","谁","一份","这","红色","可见","array","但是","可移植","就","耦","std","加入","硬件","subscribernode","raw","3","cnt","sub","(","提示","img","console","接收数据","都","几乎","heard","上限","：","）","理解","mask","-","还","独立","较强","msg","做到","编写","接口协议","变化","苹果","coding","中文","h","不太","率","本原","基于","计算","个","可以","也","publishernode","learning","解","分析","知识","之为","被","py",")","说明","1","链接","另外","publish","成","仔细","一样","异步","dds","想象","联系","echo","队列","通信","不","那","安装","“","太小","通信模型","video","常用","自行","描述","逻辑","面积","直接","color","setup","imagepublisher","$","一种","”","<","s","二个","发布","复杂","bgr2hsv","把","videocapture","定时","写","subscription","就是","exe","已经","所有","ret","另","修改","rclpy","阅读","比如","\\","understanding","作者","分别","魔性","org","好像","标准","i","无论","一个","知道","复用","数据类型","啦","设备","上","存在","做成","生活","列表","自己","开发","公众","组织","千丝万缕","对应","叫","对","opencv","定时器","是从","能够","订阅","循环","点","机器","128","类","utf","完全","案例","左上","即可"],"title":"**话题**","title_tokens":["*","话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_1","text":"节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。","text_tokens":["联系","万缕","功能","传递","各种各样","重要","其中","千丝","了","。","数据","各样"," ","各种","联系方式","独立","它","实现","并","传递数据","但","桥梁","有","话题","的","之间","千丝万缕","一种","，","机器人","间","会","机器","就是","节点","方式","不是","是","这些","最"],"title":"话题","title_tokens":["话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_2","text":"以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。","text_tokens":["用户","将","可视","此时","。","传输"," ","没错","我们","据传","桥梁","视频","可视化","到","有","话题","拍摄","这","相机","机器人","就","中","硬件","是不是","数据传输","这样","b","驱动","想","功能","在","数据","方向","得到","它","监控","？","的","一下","获取","图像","可以","做","之为","信息","节点","方式","实时","渲染","从","传递","以","了","给","作为","两个","ros","这个","要","才能","a","称之为","某","某种","为例","关系","实现","一个","设备","上","存在","之间","，","大家","显示","机器","是","不是","必然","查看"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_3","text":"从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为发布者，接收数据的对象称之为订阅者，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。","text_tokens":["名称","来看","平时","。","传输"," ","据传","要求","无法","使用","报纸","到","话题","有","、","没有","成为","可见","小编","微信","对象","机器人","就","类似","在生活中","数据传输","感兴趣","这样","应该","格式","发送数据","和","号","接收数据","都","如果","数据","自然","杂志","随处","它","的话","？","的","/","基于","特性","可以","也","知识","之为","等等","另外","叫做","节点","成","他会","古月","dds","从","出去","之后","了","“","文章","好","接收","每","名字","模型","”","看","者","发布","类型","把","就是","打","这个","角度","排版","居","比如","感兴","需要","称之为","呢","兴趣","实现","一个","发送","数据类型","本身","生活","公众","组织","叫","随处可见","对","，","发布者","是从","订阅","大家","比方","会","机器","什么","收到","固定","是"],"title":"发布/订阅模型","title_tokens":["订阅","模型","发布","/"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_4","text":"大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。","text_tokens":["不然","挺","人","。","指令","没错"," ","我们","并","报纸","话题","有","、","谁","可能","很多","机器人","优先级","是不是","里","3","听","和","建议","号","数量","再","如果","杂志","优先","的","一下","画面","个","还是","可以","也","注意","唯一","被","之为","1","节点","仔细","一样","想象","通信","似乎","不","多","了","通信模型","区分","每个","模型","该","者","发布","ros","控制","这些","这个","要","魔性","称之为","因为","摇杆","一个","发送","知道","存在","2","公众","东西","多个","对","，","发布者","想下","大家","订阅","机器","不是","是","控制指令"],"title":"多对多通信","title_tokens":["多","对","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_5","text":"话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。","text_tokens":["第一次","。","还有","不知","指令","传输"," ","适合","报纸","有","话题","逻辑性","发出","参数","可能","一份","这","用于","就","类似","让","周期","号","如果","数据","传感器","较强","后","？","的","听说","特性","可以","也","等等","用","叫做","异步","古月","报社","合适","你","通信","第一","那","不","了","传感","文章","更","逻辑","并不知道","一篇","者","发布","控制","某些","太","就是","词","这个","修改","居","阅读","比如","指","感器","某","时候","同学","一个","所谓","知道","只要","根本","公众","运动","一次","，","发布者","订阅","什么","收到","一些","是"],"title":"异步通信","title_tokens":["异步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_6","text":"最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过.msg后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。","text_tokens":["拼接","接口","数据结构","rgb","。","传输"," ","我们","据传","文件","话题","有","、","编程","既然","消息","像","机器人","就","中","进行","数据传输","这样","格式","和","都","各种各样","在","像素","数据","理解","各种","msg","长宽","组成","中文","的","图像","定义","得","可以","也","英文","之为","后缀","等等","成","方式","节点","值","一样","不能","通信","了","各样","通过","最后","自行","描述","语言","每个","一种","者","发布","ros","复杂","说","比如","称之为","标准","无关","一个","编程语言","统一","结构","系统","对应","这里","，","发布者","概念","与","订阅","接口定义","会","机器","包含",".","积木","是","块"],"title":"消息接口","title_tokens":["消息","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#hello-world","text":"了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。","text_tokens":["了解","创建","原理","chatter","从","接下来","标准","再","string","基本原理","了","。","“","代码"," ","基本","hello","我们","一个","编写","接收","发送","啦","到","话题","的","字符","本原","开始","world","字符串","定义","例程","”","消息","，","还是","者","发布者","发布","类型","下来","ros","订阅","中","接下","就要","周期","是","从而","这个","来"],"title":"案例一：Hello World话题通信","title_tokens":[" ","world","hello","通信","一","案例","：","话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_7","text":"启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。","text_tokens":["_","run","几乎","第一","以","：","“","数据","。","同样"," ","启动","看到","hello","第二","一个","频率","第一个","话题","第二个","的","字符","终端","world","helloworld","该","字符串","$","运行","”","pub","消息","，","二个","者","发布者","发布","可以","也","订阅","learning","循环","topic","ros2","收到","节点","sub"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_8","text":"我们来看下发布者的实现方法。","text_tokens":["的","方法","我们","实现","来看","。","下","发布者","发布"],"title":"发布者代码解析","title_tokens":["代码","解析","发布者","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_9","text":"learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], },","text_tokens":["_","'","接口","示例","none","父类","spin"," ","scripts","hello","self","publisher","import","并","文件","name","guyuehome","话题","create","from","data","、","函数","主","完成","配置","消息","args","msgs","对象","0.5","super","std","中","进行","秒","加入","周期","让","输出","关闭","get","def","初始","10","(","提示","logger","console","功能","入口","entry","：","数据","）","-","msg","程序","（","后","编写","coding","bin","com","init","的","字符","/","__","[","日志","python3","publishernode","learning","\"",")","说明","py","信息","库","节点","publish","古月","main","退出","如下","创建","chatter","队列","node","]","回调","}","等待","!","string","“","名","填充","@","destroy","8","setup","world","字符串","*","”","s","发布","类型","topic","定时","ros2","设置","shutdown","包","points","timer","为","已经","{","callback","rclpy","=","居","作者","www","需要","python","单位","代码",":",",","一个","%","销毁","info","usr","知道","打开","#","初始化","publishing","选项","系统","helloworld","执行","长度","pub","class","，","发布者","定时器","循环","点","env","类",".","utf","编译"],"title":"程序实现","title_tokens":["程序","实现","程序实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_10","text":"对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口","text_tokens":["流程","如下","创建","接口","如果","："," ","填充","我们","程序","实现","一个","并","销毁","初始化","话题","编程","对","消息","，","发布者","发布","想要","对象","分析","进行","节点","以上","关闭","初始"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_11","text":"我们再来看下订阅者的实现方法。","text_tokens":["的","订阅","方法","我们","实现","再","来看","者","。","下"],"title":"订阅者代码解析","title_tokens":["代码","订阅","者","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_12","text":"learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], },","text_tokens":["_","'","接口","示例","none","父类","spin"," ","scripts","hello","self","import","并","文件","name","guyuehome","话题","create","from","data","、","函数","主","完成","配置","消息","args","msgs","对象","super","std","进行","加入","subscribernode","让","输出","关闭","get","def","sub","初始","(","10","提示","logger","console","功能","入口","entry","heard","：","数据","）","-","msg","程序","（","后","编写","coding","bin","com","init","的","/","定义","__","[","日志","python3","learning","\"",")","说明","py","信息","库","节点","古月","main","退出","如下","创建","chatter","处理","队列","node","]","回调","}","等待","!","string","“","名","@","destroy","8","setup","world","*","”","s","者","类型","topic","ros2","subscription","shutdown","设置","包","points","{","callback","rclpy","=","居","\\","作者","www","需要","listener","标准","python","i","代码",":",",","一个","%","销毁","info","usr","知道","打开","#","初始化","选项","系统","helloworld","执行","长度","class","对","pub","，","订阅","循环","点","env","收到","类",".","utf","编译"],"title":"程序实现","title_tokens":["程序","实现","程序实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_13","text":"对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。","text_tokens":["流程","如下","创建","处理","之前","接口","接下来","回调","通信","不","如果","继续","：","。","数据"," ","hello","我们","还","优化","程序","好","实现","一个","并","销毁","啦","视觉","初始化","话题","的","函数","world","一定","基于","编程","例程","对","，","者","过瘾","下","想要","对象","订阅","大家","下来","分析","进行","接下","机器","节点","以上","关闭","初始"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_14","text":"在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。","text_tokens":["和","模块化","联系","功能","没","将","在","这个","物体","了","。","讲解","数据","传输","通过","我们","程序","做到","实现","一个","来讲","两个","并","做成","对于","视觉","话题","的","问题","开发","没有","识别","图像","模块","红色","对","相机","，","虽然","概念","但是","机器人","更好","间","中","机器","周期","就是","过程","节点","方式","是","并且","驱动","即可"],"title":"案例二：机器视觉识别","title_tokens":["案例","识别","机器","二","视觉","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_15","text":"这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。","text_tokens":["_","将","思想","来看","。"," ","看到","我们","并","话题","识别","更换","运行","红色","消息","相机","可移植","就","这种","移植性","更好","sub","驱动","模块化","功能","先","在","如果","视觉","？","的","图像","模块","定义","可以","learning","软件","可移植性","节点","只","中是","内","run","效果","第一","了","启动","好","两个","设计","第一个","说干就干","保持","$","未来","二个","下","发布","ros","保证","topic","ros2","这个","要","另","修改","范围","分别","需要","不变","标准","物体","移植","webcam","第二","实现","一个","啦","第二个","放入","终端","pub","，","以下","订阅","如何","是","完全","即可"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_16","text":"learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], },","text_tokens":["_","'","接口","将","示例","none","bgr8","换成","父类","spin"," ","scripts","self","publisher","import","read","并","视频","name","文件","guyuehome","话题","create","from","imgmsg","、","函数","读取","主","完成","配置","消息","args","相机","msgs","用于","对象","sensor","super","进行","秒","加入","周期","if","输出","raw","让","关闭","get","def","sub","初始","驱动","(","10","提示","logger","号","console","功能","入口","entry","如果","：","）","-","msg","程序","（","后","编写","coding","bin","com","cvbridge","init","的","成功","/","true","图像","__","cap","[","日志","python3","learning","\"",")","说明","py","信息","库","节点","publish","古月","main","退出","如下","创建","处理","队列","node","]","回调","}","等待","!","名","@","video","to","稍后","图像处理","destroy","8","cv2","setup","imagepublisher","*","一帧","转换","发布","类型","ros","topic","cv","videocapture","定时","ros2","设置","shutdown","包","points","timer","为","已经","{","callback","ret","rclpy","=","居","作者","www","frame","需要","bridge","image","python","0.1","单位","代码",":",",","webcam","一个","销毁","info","usr","知道","设备","打开","#","初始化","publishing","0","转换成","选项","系统","helloworld","执行","长度","pub","opencv","class","采集","，","发布者","定时器","与","循环","点","env","类",".","utf","编译"],"title":"发布者代码解析","title_tokens":["代码","解析","发布者","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_17","text":"learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], },","text_tokens":["编译","_","continue","'","in","接口","将","示例","none","bgr8","y","父类","spin"," ","object","scripts","self","chain","import","并","使用","for","name","文件","imagesubscriber","w","guyuehome","话题","create","from","data","、","函数","imgmsg","高","互相","主","hierarchy","完成","配置","红色","消息","x","args","array","msgs","用于","对象","numpy","sensor","super","中","hsv","进行","加入","if","让","输出","raw","cnt","关闭","get","def","sub","初始","(","10","提示","和","img","logger","console","功能","坐标","数值","imshow","入口","上限","entry","像素","：","中心","）","mask","-","二值化","msg","255","程序","得到","（","后","编写","receiving","苹果","coding","bin","h","com","cvbridge","init","approx","的","waitkey","下限","/","shape","int","图像","计算","__","[","转化成","detect","日志","所在","python3","learning","\"",")","说明","py","cvtcolor","xy","1","信息","库","节点","boundingrect","古月","list","main","退出","如下","创建","处理","噪声","队列","node","]","从","contours","findcontours","回调","勾勒","效果","}","等待","circle","!","as","出来","lower","太小","名","@","video","to","retr","面积","点画","图像处理","destroy","检测","color","宽","已","8","cv2","阈值","180","模型","setup","*","<","转换","者","类型","ros","topic","进入","bgr2hsv","cv","ros2","90","subscription","shutdown","设置","包","为","points","{","+","callback","及","轮廓","rclpy","=","居","作者","www","范围","5","frame","需要","listener","bridge","image","python","代码",":","np",",","webcam","red","一个","销毁","info","usr","知道","drawcontours","打开","#","150","初始化","颜色","0","选项","上角","2","系统","helloworld","长度","opencv","upper","class","转化","，","pub","与","订阅","显示","循环","bgr","去除","左上角","点","env","128","类","一些",".","utf","左上","化成","inrange"],"title":"订阅者代码解析","title_tokens":["代码","订阅","者","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_18","text":"通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub","text_tokens":["_","接口","原本","当然","换成","换","。","还有","指令"," ","又","我们","humble","焕然","进一步","使用","到","话题","有","识别","可能","这","一行","相机","就","耦","中","不过","让","是不是","这样","install","集成","sub","驱动","对劲","功能","都","-","哪里","得到","接口协议","变化","apt","视觉","不太","？","的","率","图像","例程","符合","得","可以","也","做","解","learning","软件","用","节点","只","目标","刚才","一新","任何","呀","run","node","你","似乎","不","安装","了","通过","常用","好","焕然一新","直接","什么样","$","发布","ros","sudo","topic","写","ros2","exe","usb","感觉","需要","好像","标准","不行","cam","通用","无论","代码","现在","webcam","一个","每换","复用","只要","自己","么","对","，","大家","！","一步","什么","精简","协议","不是","是","一句","一般","提高"],"title":"案例三：机器视觉识别优化","title_tokens":["案例","识别","优化","机器","视觉","：","三"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_19","text":"话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息","text_tokens":["操作","_","如下","echo","：","数据","传输"," ","hz","带宽","常用","msg","info","频率","name","#",">","列表","话题","的","data","命令","$","bw","<","pub","消息","发布","type","topic","ros2","信息","list","查看"],"title":"话题命令行操作","title_tokens":["操作","命令行","话题","命令"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_20","text":"关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？","text_tokens":["和","原理","单向","满足","传递","通信","是否","：","呢","数据","给","传输","考题","我们","据传","思考题","关于","实现","一个","来讲","适合","无法","留","对于","到","话题","几个","的","？","系统","完成","需求","特性","这里","例子","，","举","能够","机器人","方法","就","大家","复杂","这种","肯定","机器","讲","周期","数据传输","是","思考","所有","周期性"],"title":"思考题","title_tokens":["思考题","考题","思考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_21","text":"https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":[":","understanding","en","-","/","ros2","tutorials","org","humble","html",".","https","topics","docs","ros"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/","text":"服务 话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。 通信模型 在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。 客户端/服务器模型 从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。 同步通信 这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。 一对多通信 比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。 服务接口 和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。 案例一：加法求解器 大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 运行效果 我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3 客户端代码解析 我们来看下客户端的实现方法。 程序实现 learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口 服务端代码解析 至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。 程序实现 learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_server = learning_service.service_adder_server:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口 案例二：机器视觉识别 好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。 运行效果 此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client 客户端代码解析 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], }, 服务端代码解析 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], }, 服务命令行操作 服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求 思考题 话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["有点","_","针对","async","none","bgr8","y","人","此时","还有","传输","scripts","要求","网络","使用","到","data","没有","高","希望","可能","很多","配置","运行","总结","用于","d","类似","result","sys","服务器端","在生活中","让","输出","应该","def","一对","假设","坐标","不同","入口","在","越快越好","如果","send","数据","传感器","二值化","考题","程序","传递数据","bin","waiting","官方","的","waitkey","查询","很","int","当前","available","例程","__","转化成","detect","所在","尽快","处","python3","加法器","经常","信息","电脑","叫做","节点","应用","boundingrect","后续","1.0","刚才","run","噪声","单向","node","传递","勾勒","findcontours","回调","之后","}","发给","跟随","给","启动","好","接收","设计","加数","点画","destroy","第一个","加法","当","8","已","cv2","开始","模型","ints","就要","{","圈圈","shutdown","points","按照","并且","居","frame","之前","满足","求解","需要","again","感器","ok","image","物体","python","时候",",","思考题","自定","销毁","打开","频率","drawcontours","选项","上角","2","系统","数据通","多个","转化","发布者","下来","同步","浏览器","用到","bgr","讲","什么","收到",".","不是","提到","宽","编译","inrange","位置","原理","...","。","spin","一般","二","import","while","界面","humble","文件","出现","w","话题","imgmsg","准确","自定义","返回","消息","简单","相机","有所不同","机器人","想要","这种","sensor","numpy","srv","周期","50","b","get","关闭","里程计","一","sum","驱动","浏览","en","logger","半天","call","数值","课程","entry","答","其中","像素","各种","255","求和","后","（","图像识别","interface","展现","init","approx","法器","成功","获取","/","[","日志","一起","方法","唯一","try","某个","方式","传入","main","退出","处理","contours","出去","circle","继续","了","传感","名","通过","@","正常","提供","to","认为","server","网页","图像处理","检测","相比","阈值","180","并不知道","tutorials","return","转换","类型","软硬","进入","跟踪","某些","cv","ros2","usb","这些","及","要","轮廓","addtwoints","except","5","程序实现","a","不好","listener","通信接口","称之为","附近","bridge","cam","等","of","现在","red","实现","%","发送","但","150","初始化","第二个","0","之间","wait","务器","upper","运动","，","与","去除","左上角","我","env","客户端","所以","化成","查看","continue","'","https","来看","指令","timeout","看到","我们","adder","同步性","response","场景","适合","无法","for","docs","这么","imagesubscriber","from","、","识别","主","互相","编程","成为","完成","hierarchy","需求","岂","adderserver","前者","args","x","客户","msgs","对象","中","进行","super","e","hsv","不过","services","这样","if","过程","结果","集成","器","初始","10","和","后者","功能","imshow","接下来","failed","最为","常见","中心","同样","绝大部分","getobjectposition","得到","sec","receiving","视觉","具体","com","cvbridge","exception","objectclient","部分","下限","true","shape","图像","定义","一问一答","r","n","转圈","还是","\"","type","cvtcolor","xy","等等","域名","两种","应答","服务端","库","而是","目标","思考","古月","list","流程","了解","如下","创建","从","]","你","判断","时","效果","第一","等待","!","as","多","出来","lower","并不需要","软硬件","retr","两个","更","服务","每","准备",">","add","*","解析","命令","；","看","服务器","问","数据通信","者","下","ros","adderclient","控制","状态","设置","包","90","为","+","callback","这个","request","=","回想","然后","objecty","www","范围","是否","通用","代码",":","np","反馈","基本","—","第二","info","usr","#","颜色","done","终端","拿到","执行","绝大","变成","命令行","长度","class","三个","一次","比比皆是","大家","显示","一直","接下","会","根据","一些","html","以上","是","转圈圈","繁杂","控制指令","周期性","操作","接口类","参考","那有","in","接口","将","示例","宕机","上述","父类","不知"," ","object","client","self","核心","学习","或者","chain","并","name","else","guyuehome","有","create","放到","越快","函数","封装","更加","打印","红色","array","但是","就","接口类型","加入","硬件","raw","3","cnt","至于","sub","请求","(","提示","img","雷达","console","合理","都","上限","：","）","argv","反应","mask","-","invalid","msg","编写","苹果","coding","h","相对","计算","形式","可以","比比","也","learning","分析",")","之为","cs","py","说明","objectx","1","链接","另外","成","页面","介绍","本","发","异步","上层","一样","position","队列","通信","不","最新","“","太小","服务器发送","通信模型","video","常用","有所","访问","随时","面积","color","incoming","setup","not","$","一种","”","<","二个","发布","bgr2hsv","subscription","就是","exe","已经","rclpy","understanding","比如","\\","机制","作者","网站","分别","org","好像","标准","里程","简称","service","一个","知道","越好","啦","数据类型","上","存在","生活","command","列表","开发","大部","向","对","opencv","future","break","订阅","循环","点","机器","once","大部分","128","类","two","utf","时间","完全","target","案例","左上","打印输出"],"title":"**服务**","title_tokens":["服务","*"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_1","text":"话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。","text_tokens":["机制","单向","你","通信","将","效果","答","是否","。","数据","传输"," ","我们","学习","常用","—","实现","服务","知道","无法","使用","话题","的","准确","之间","一种","多个","消息","问","，","一起","可以","发布者","发布","ros","者","这种","订阅","方法","类似","同步","我","讲","收到","另外","节点","本","异步"],"title":"服务","title_tokens":["服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_2","text":"在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。","text_tokens":["位置","此时","。","传输"," ","我们","或者","并","使用","到","这么","话题","高","识别","希望","成为","红色","相机","有所不同","机器人","这种","中","周期","这样","请求","驱动","和","不同","课程","在","其中","答","数据","得到","图像识别","的","查询","图像","形式","尽快","可以","信息","另外","应答","节点","应用","而是","目标","发","一样","上层","单向","你","通信","发给","最新","继续","了","跟随","并不需要","通过","通信模型","有所","更","服务","模型","问","发布","ros","按照","这个","比如","然后","机制","之前","需要","好像","附近","物体","时候","反馈","service","实现","一个","发送","频率","变成","对","运动","，","订阅","一直","机器","我","是"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_3","text":"从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。","text_tokens":["操作","比如","机制","处理","针对","网站","从","页面","需要","你","通信","之后","在","来看","答","常见","此时","。","数据"," ","时候","各种","通过","简称","反馈","我们","服务器发送","或者","实现","服务","发送","并","网页","上","展现","具体","生活","的","模型","很","/","返回","在生活中","向","务器","服务器","问","形式","，","客户","也","这种","就","浏览器","经常","进行","服务器端","cs","我","某些","某个","信息","收到","叫做","客户端","会","为","应答","电脑","就是","域名","请求","浏览"],"title":"客户端/服务器模型","title_tokens":["模型","/","客户端","服务","务器","服务器","客户"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_4","text":"这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。","text_tokens":["那有","半天","不好","你","通信","判断","称之为","这个","越快越好","在","宕机","了","。","反应","通过","我们","或者","要求","接收","服务","越好","网络","所以","到","话题","的","越快","相比","没有","可能","务器","服务器","转圈","，","客户","可以","也","浏览器","同步","中","一直","服务器端","状态","假设","之为","圈圈","信息","过程","客户端","应答","是","转圈圈","一般","浏览"],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_5","text":"比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。","text_tokens":["居","比如","网站","都","通信","不","人","。","同样","看到","通信模型","一个","访问","服务","并","每","界面","但","存在","所以","的","模型","没有","务器","多个","服务器","，","客户","可以","但是","大家","唯一","中","服务器端","客户端","是","完全","这个","一样","古月"],"title":"一对多通信","title_tokens":["多","一对","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_6","text":"和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。","text_tokens":["和","比如","位置","坐标","传递","通信","标准","在","了","。","还有","数据","给"," ","反馈","我们","核心","msg","两个","一个","服务","传递数据","苹果","使用","文件","话题","的","部分","变成","命令","定义","消息","，","还是","ros","也","大家","类似","方法","中","后续","srv","会",".","是","介绍","这些","请求","一样","要"],"title":"服务接口","title_tokens":["服务","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_7","text":"大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。","text_tokens":["_","针对","将","。"," ","我们","并","有","封装","简单","客户","想要","就","进行","服务器端","结果","应该","器","请求","功能","接下来","数据","求和","得到","后","编写","相对","官方","的","计算","例程","还是","可以","也","应答","节点","成","了解","从","通信","时","出去","之后","了","“","给","通过","提供","两个","服务","加数","加法","当","add","开始","ints","”","服务器","ros","就要","这个","求解","需要","代码","基本","反馈","现在","实现","一个","发送","啦","务器","对","，","下来","大家","接下","收到","客户端","two","是"],"title":"案例一：加法求解器","title_tokens":["求解","加法","一","器","案例","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_8","text":"我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3","text_tokens":["操作","_","如下","原理","run","功能","第一","等待","请求","。","数据","代码"," ","启动","client","我们","adder","提供","求和","第二","实现","两个","一个","服务","并","发送","service","server","加数","第一个","第二个","的","终端","2","例程","运行","$","看","，","一起","下","二个","客户","learning","ros2","客户端","结果","节点","服务端","3","是","传入","并且","这个"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_9","text":"我们来看下客户端的实现方法。","text_tokens":["的","方法","我们","实现","客户端","来看","。","客户","下"],"title":"客户端代码解析","title_tokens":["客户端","客户","解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_10","text":"learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], },","text_tokens":["接口类","_","async","'","接口","...","示例","none","将","父类","spin"," ","timeout","scripts","client","self","adder","import","while","response","并","for","name","else","文件","guyuehome","create","from","函数","自定义","完成","打印","运行","配置","args","客户","对象","d","super","接口类型","sys","服务器端","进行","srv","result","if","e","输出","让","加入","b","get","def","关闭","sum","请求","初始","(","logger","console","功能","call","入口","failed","entry","send","：","数据","）","argv","-","程序","sec","（","后","编写","coding","bin","interface","com","init","waiting","exception","的","法器","成功","/","int","available","计算","定义","__","[","r","python3","加法器","learning","\"",")","说明","py","try","1","信息","库","节点","方式","异步","古月","1.0","main","如下","创建","处理","node","]","}","等待","!","as","名","启动","@","正常","两个","接收","服务","加数","destroy","add","加法","8","setup","ints","*","not","服务器","类型","adderclient","ros2","设置","shutdown","包","points","{","+","rclpy","request","=","居","addtwoints","作者","www","a","except","需要","again","ok","python","是否","代码",":","of","反馈",",","service","自定","一个","%","发送","info","usr","销毁","知道","打开","#","初始化","done","选项","2","系统","执行","wait","务器","class","一次","，","future","break","循环","点","once","env","收到","类","客户端","two",".","utf","编译","打印输出"],"title":"程序实现","title_tokens":["程序","实现","程序实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_11","text":"对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口","text_tokens":["流程","如下","创建","接口","等待","如果","：","数据"," ","我们","程序","实现","一个","服务","并","发送","销毁","初始化","编程","务器","对","服务器","，","客户","想要","对象","分析","进行","服务器端","客户端","应答","节点","以上","关闭","请求","初始"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_12","text":"至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。","text_tokens":["有点","机制","通信","回调","了","。","不知","数据","实现","服务","知道","出现","话题","的","函数","并不知道","务器","服务器","，","者","也","订阅","类似","用到","中","服务器端","什么","时间","至于","请求"],"title":"服务端代码解析","title_tokens":["代码","服务","服务端","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_13","text":"learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_server = learning_service.service_adder_server:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], },","text_tokens":["接口类","_","'","接口","将","示例","none","父类","spin"," ","scripts","self","adder","import","response","并","文件","name","guyuehome","create","from","放到","、","函数","自定义","主","完成","配置","adderserver","args","对象","d","super","接口类型","中","进行","加入","srv","让","输出","结果","b","get","def","关闭","sum","请求","初始","(","提示","logger","console","功能","入口","entry","：","数据","）","-","程序","求和","（","后","编写","coding","bin","interface","com","init","的","法器","/","计算","定义","__","[","n","日志","python3","加法器","learning","\"",")","说明","py","信息","库","节点","应答","古月","main","退出","如下","创建","处理","node","]","回调","}","等待","!","名","@","提供","服务","server","destroy","加法","add","8","incoming","setup","ints","*","服务器","return","类型","ros2","设置","shutdown","包","points","{","已经","+","callback","rclpy","request","=","居","addtwoints","\\","作者","www","a","需要","python","代码",":","反馈",",","service","自定","%","销毁","info","usr","知道","打开","#","初始化","选项","系统","执行","务器","对","class","，","循环","点","env","收到","类","two",".","utf","编译"],"title":"程序实现","title_tokens":["程序","实现","程序实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_14","text":"对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口","text_tokens":["流程","如下","创建","接口","回调","如果","："," ","通过","反馈","我们","程序","实现","一个","服务","并","销毁","初始化","函数","编程","向","务器","对","服务器","，","处","客户","想要","对象","分析","进行","服务器端","客户端","应答","服务端","节点","以上","结果","关闭","初始"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_15","text":"好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。","text_tokens":["刚才","回想","流程","位置","机制","合理","求解","需要","通信","物体","了","。","时候","通过","我们","好","实现","服务","知道","啦","视觉","加法","当","的","识别","更加","岂","，","下","已经","不是","目标","器","提到"],"title":"案例二：机器视觉识别","title_tokens":["案例","识别","机器","二","视觉","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_16","text":"此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client","text_tokens":["_","位置","然后","分别","run","node","需要","时","请求","上述","此时","cam","了","：","。","数据"," ","object","启动","client","我们","提供","service","认为","一个","服务","发送","server","随时","视觉","准备","出现","当","有","的","终端","拿到","识别","当前","图像","$","运行","；","务器","三个","服务器","运动","相机","，","客户","可以","一次","发布","对象","机器人","订阅","就","learning","跟踪","服务器端","会","机器","根据","ros2","客户端","exe","节点","是","目标","usb","集成","并且","驱动"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_17","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], },","text_tokens":["_","位置","async","'","接口","...","示例","none","y","父类","spin","object"," ","timeout","scripts","client","self","adder","import","while","response","并","for","name","else","文件","guyuehome","create","from","自定义","识别","完成","配置","args","x","对象","d","super","进行","result","e","加入","srv","if","让","关闭","get","def","请求","初始","(","logger","console","功能","call","入口","failed","entry","send","：","-","getobjectposition","程序","sec","后","编写","coding","bin","interface","com","init","waiting","exception","的","objectclient","/","true","available","定义","__","[","r","n","python3","learning","\"",")","说明","py","try","应答","库","节点","目标","古月","1.0","main","如下","创建","position","node","]","}","等待","!","as","@","服务","server","destroy","8","setup","*","not","ros2","设置","shutdown","包","points","{","rclpy","request","=","居","\\","作者","www","except","需要","again","ok","python","代码",":","of",",","service","自定","%","销毁","info","usr","知道","打开","#","初始化","done","选项","系统","wait","class","，","future","break","点","once","env","类",".","utf","target","编译"],"title":"客户端代码解析","title_tokens":["客户端","客户","解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_18","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], },","text_tokens":["接口类","编译","_","continue","'","in","接口","将","示例","none","bgr8","y","父类","spin","object"," ","scripts","client","self","adder","chain","import","response","并","使用","for","name","else","文件","imagesubscriber","w","guyuehome","话题","create","from","data","、","函数","imgmsg","自定义","识别","互相","高","主","hierarchy","完成","配置","红色","消息","x","args","array","msgs","用于","对象","numpy","sensor","d","super","接口类型","hsv","中","进行","srv","加入","if","50","输出","raw","让","cnt","关闭","get","def","sub","请求","初始","(","10","提示","和","img","logger","console","功能","坐标","数值","imshow","入口","上限","entry","像素","：","数据","中心","）","mask","-","二值化","invalid","msg","getobjectposition","255","得到","程序","（","后","编写","receiving","苹果","coding","bin","interface","h","com","cvbridge","init","approx","的","waitkey","下限","/","shape","int","图像","true","计算","定义","__","[","转化成","detect","日志","n","所在","python3","learning","\"","objectx",")","说明","py","cvtcolor","xy","1","信息","库","节点","目标","boundingrect","古月","list","main","退出","如下","创建","处理","噪声","队列","node","]","position","从","contours","回调","findcontours","勾勒","效果","等待","circle","!","as","}","出来","lower","太小","名","@","video","提供","to","retr","服务","server","面积","点画","图像处理","destroy","检测","color","宽","已","8","cv2","阈值","180","模型","setup","*","<","服务器","return","转换","者","类型","ros","进入","bgr2hsv","cv","ros2","90","subscription","shutdown","设置","包","为","已经","points","{","+","callback","及","轮廓","rclpy","request","=","居","\\","作者","www","objecty","范围","5","frame","listener","需要","bridge","image","物体","python","代码",":","np","反馈",",","red","service","自定","一个","%","销毁","info","usr","知道","drawcontours","打开","#","150","初始化","颜色","command","0","选项","上角","2","系统","执行","务器","长度","opencv","upper","class","转化","，","对","与","订阅","显示","循环","bgr","去除","左上角","点","env","128","类","一些","收到",".","utf","target","左上","化成","inrange"],"title":"服务端代码解析","title_tokens":["代码","服务","服务端","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_19","text":"服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求","text_tokens":["操作","_","如下","call","：","数据"," ","常用","service","服务","发送","数据类型","name","#",">","列表","的","data","命令","$","<","类型","type","ros2","请求","list","查看"],"title":"服务命令行操作","title_tokens":["操作","服务","命令行","命令"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_20","text":"话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。","text_tokens":["位置","针对","接口","。","指令","传输"," ","同步性","我们","要求","场景","适合","无法","到","话题","、","高","识别","自定义","很多","需求","前者","机器人","类似","中","不过","硬件","周期","过程","里程计","和","雷达","后者","都","最为","在","数据","传感器","绝大部分","视觉","的","获取","部分","图像","定义","一问一答","比比","也","方法","等等","两种","应用","目标","单向","通信","了","传感","软硬件","常用","更","服务","设计","数据通信","类型","ros","软硬","控制","就要","这些","这个","比如","满足","通信接口","感器","标准","等","通用","里程","时候","自定","数据类型","开发","大部","数据通","绝大","比比皆是","，","同步","机器","大部分","是","繁杂","控制指令","周期性"],"title":"思考题","title_tokens":["思考题","考题","思考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_21","text":"https://docs.ros.org/en/ humble /Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":[" ",":","understanding","en","-","/","services","ros2","tutorials","org","humble","html",".","https","docs","ros"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/","text":"通信接口 在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。 接口的定义 接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。 ROS通信接口 接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。 语言无关 为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。 标准接口 大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。 案例一：服务接口的定义与使用 了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。 接口定义 在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ... 程序调用 我们在代码中再来重点看下接口的使用方法。 客户端接口调用 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 服务端接口调用 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 案例二：话题接口的定义与使用 话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。 运行效果 现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub 接口定义 在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ... 程序调用 我们在代码中再来重点看下接口的使用方法。 发布者接口调用 learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 订阅者接口调用 learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 接口命令行操作 接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义 参考链接 https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["_","typec","async","none","bgr8","y","人","换成","此时","还有","由","传输","便于","use","使用","三原","到","主要","data","没有","高","可能","希望","动作","配置","运行","用于","d","类似","packages","各个领域","result","concepts","让","里","输出","def","坐标","不同","project","入口","在","形象","send","交流","数据","txt","二值化","程序","最终","它","高效","about","组成","摄像","编译器","bin","waiting","的","一下","waitkey","字符","很","查询","int","当前","available","件夹","约束","g","例程","__","第三个","转化成","detect","所在","python3","软件","信息","电脑","应用","节点","值","boundingrect","依赖","后续","1.0","run","噪声","c++","单向","传递","node","勾勒","findcontours","回调","}","却是","找到","传输数据","给","启动","xml","好","find","设计","第三","点画","destroy","第一个","加法","将要","8","已","cv2","开始","模型","位","以及","topic","三原色","{","shutdown","程序模块","并且","别人","海龟","居","frame","之前","手机","需要","again","ok","image","转","物体","python","降低","时候","无关",",","webcam","自定","用来","三种","销毁","不用","打开","只要","drawcontours","举个","选项","回到","上角","系统","2","轮子","减少","标准接口","例子","这里","自言自语","转化","发布者","键盘","下来","用到","bgr","什么","讲","图形","种","收到",".","不是","两","宽","编译","inrange","位置","...","数据结构","。","讲解","像素点","领域","spin","publisher","二","import","while","humble","文件","w","话题","imgmsg","软件开发","准确","自定义","形象化","诞生","消息","相机","机器人","numpy","sensor","输入输出","srv","周期","转到第","50","b","众多","get","关闭","一","sum","驱动","小海","en","logger","call","数值","课程","再","目的","像素","各种","随处","255","求和","后","（","interface","32","init","approx","获取","objectposition","/","模块","布尔值","详细","表示","符合","[","得","内容","一起","rosidl","包装","日志","体","方法","try","某个","只","上去","必须","main","退出","处理","重点","contours","出去","编写程序","circle","string","继续","了","名","通过","@","正常","提供","to","坐标值","server","图像处理","检测","文件夹","几个","阈值","180","int32","required","字符串","tutorials","single","关注","return","转换","类型","保证","show","进入","cv","ros2","usb","这些","及","要","轮廓","才能","工作","except","5","a","listener","通信接口","插座","称之为","bridge","cam","exec","等","匹配","build","of","现在","red","实现","各个","%","发送","但","结构","150","初始化","第二个","0","之间","有没有","涵盖","wait","and","随处可见","务器","upper","运动","pub","，","与","generators","接口定义","去除","左上角","只有","env","客户端","固定","包含","上边","布尔","所以","一句","化成","查看","continue","'","https","广泛","指令","package","timeout","不管","看到","线速度","我们","代码生成","关于","response","加","进度","for","docs","imagesubscriber","from","、","参数","到底","识别","摄像头","互相","主","编程","hierarchy","小海龟","完成","每隔","回顾","两者","x","cmakelists","args","图形化","客户","msgs","对象","中","调用","进行","super","e","hsv","这样","if","过程","结果","中有","member","初始","来","10","想","关心","和","功能","imshow","接下来","重要","最为","failed","常见","中心","主程序","depend","getobjectposition","一边","sec","得到","receiving","define","视觉","具体","好奇","？","的话","com","objectclient","exception","重复","cvbridge","部分","下限","原色","true","shape","图像","定义","r","n","还是","无论是","角速度","为了","\"","像是","等等","度","cvtcolor","xy","应答","服务端","库","而是","目标","古月","list","看上","了解","runtime","创建","如下","旋转","从","]","时","效果","第一","等待","!","as","多","出来","lower","有机","retr","两个","更","服务","每","语言","他们",">","区分","每个","什么样","*","解析","一帧","命令","标值","；","看","服务器","精髓","研究","下","者","ros","控制","生成","状态","包","90","为","+","callback","这个","角度","自动","看看","=","request","objecty","www","范围","造","是否","个人","彼此","呢","添加","代码","关系",":","np","反馈","—","第二","info","usr","#","颜色","转到","done","终端","执行","包中","命令行","长度","三个","class","一次","概念","大家","显示","肯定","自语","更为","bool","接下","会","根据","如何","一些","html","以上","是","接口类","操作","数组","参考","in","接口","将","示例","---","父类"," ","object","client","self","核心","学习","或者","chain","并","name","else","哪些","guyuehome","有","create","函数","谁","封装","这","打印","红色","可见","array","group","就","接口类型","std","相互","硬件","二维","subscribernode","raw","cnt","中间","建立","请求","sub","20","1s","(","提示","img","你来我往","都","上限","：","）","理解","mask","-","还","invalid","msg","编写","苹果","coding","看上去","h","输入","计算","可以","64","也","learning","objectx",")","之为","py","说明","链接","1","中来","另外","publish","成","share","generate","联系","position","队列","通信","那","安装","方便","“","太小","video","常用","描述","连接","面积","直接","color","整型","action","由于","调用函数","not","$","一种","话","”","<","就行","二个","发布","速度","bgr2hsv","把","micro","subscription","就是","exe","反正","已经","30","default","rclpy","比如","\\","机制","作者","分别","org","标准","无论","数","int64","路径","形状","service","一个","衍生","知道","分成","上","做成","生活","command","列表","自己","开发","interfaces","插头","对应","对","opencv","future","break","像头","订阅","甚至","循环","机器","once","128","类","utf","完全","target","案例","左上"],"title":"**通信接口**","title_tokens":["通信接口","接口","*","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_1","text":"在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。","text_tokens":["你来我往","都","传递","通信","接口","通信接口","重要","在","标准","人","多","个人","。","交流","无论","呢","数据","理解"," ","给","我们","学习","或者","—","好","两个","一个","更","服务","并","结构","将要","话题","？","的","系统","动作","定义","这","自言自语","内容","，","还是","可以","概念","ros","大家","为了","用到","甚至","自语","中","会","什么","让","就是","不是","而是","是","后续"],"title":"通信接口","title_tokens":["通信接口","接口","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_2","text":"接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。","text_tokens":["typec","接口","广泛","。","由","像素点","领域"," ","传输","指令","线速度","我们","关于","加","使用","三原","到","有","话题","主要","完全","软件开发","、","函数","准确","参数","摄像头","编程","这","配置","形象化","诞生","可见","运行","两者","相机","图形化","机器人","就","类似","各个领域","调用","中","输入输出","相互","硬件","进行","让","输出","结果","b","建立","驱动","关心","和","都","在","最为","形象","常见","目的","像素","数据","主程序","-","随处","程序","它","编写","高效","组成","摄像","看上去","具体","输入","？","的","很","原色","图像","模块","定义","g","约束","符合","r","得","内容","一起","还是","无论是","包装","可以","也","角速度","所在","软件","像是","之为","等等","电脑","应用","节点","值","上去","必须","看上","通信","时","编写程序","那","却是","多","了","出来","安装","传输数据","给","通过","正常","常用","提供","好","两个","更","每","服务","连接","直接","他们","每个","开始","什么样","调用函数","解析","一种","话","关注","；","精髓","发布","ros","速度","控制","把","micro","三原色","包","就是","反正","程序模块","usb","这些","并且","这个","要","才能","工作","比如","机制","手机","通信接口","插座","称之为","标准","彼此","等","无论","匹配","呢","代码","时候","关系","反馈","形状","实现","各个","一个","知道","不用","但","结构","上","只要","生活","举个","自己","开发","回到","系统","插头","随处可见","例子","运动","一次","，","概念","像头","键盘","大家","肯定","更为","只有","机器","什么","讲","图形","如何","一些","固定","是","所以","一句"],"title":"接口的定义","title_tokens":["的","定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#ros","text":"接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。","text_tokens":["才能","机制","联系","分别","造","接口","通信","降低","。","方便","有机","代码"," ","各种","通过","我们","核心","程序","常用","便于","三种","服务","每","使用","到","有","话题","的","、","重复","之间","轮子","减少","动作","这","定义","一种","，","一起","可以","ros","也","让","就是","种","节点","是","目标","依赖","别人"],"title":"ROS通信接口","title_tokens":["通信接口","接口","通信","ros"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_3","text":"为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。","text_tokens":["数组","接口","将","数据结构","y","此时","---","。","还有","传输"," ","看到","我们","学习","进度","使用","文件","到","话题","、","编程","动作","小海龟","完成","每隔","x","机器人","中","srv","二维","让","里","周期","过程","结果","转到第","b","中间","sum","请求","10","1s","20","和","小海","功能","坐标","不同","数值","在","数据","还","msg","一边","求和","最终","32","的","一下","部分","当前","布尔值","定义","表示","还是","可以","64","体","为了","度","另外","应答","节点","只","目标","c++","单向","旋转","通信","了","“","通过","两个","每","语言","描述","设计","服务","加法","区分","整型","action","开始","int32","由于","一帧","一种","”","就行","位","ros","保证","生成","状态","90","这些","这个","30","自动","海龟","比如","机制","分别","之前","a","需要","通信接口","转","python","是否","等","数","int64","无关","反馈","一个","用来","知道","分成","结构","做成","转到","对应","这里","三个","运动","，","bool","会","机器","什么","包含",".","是","布尔","两","编译"],"title":"语言无关","title_tokens":["语言","无关"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_4","text":"大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。","text_tokens":["看看","接口","标准","在","安装","了","。","呢","找到","给","路径","我们","打开","文件","哪些","好奇","？","文件夹","的","几个","到底","系统","可能","涵盖","件夹","定义","，","可以","ros","大家","中","share","众多"],"title":"标准接口","title_tokens":["标准","标准接口","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_5","text":"了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。","text_tokens":["了解","位置","之前","从","需要","通信接口","接口","通信","接下来","在","课程","再","第一","了","。","讲解","代码"," ","时候","我们","提供","第二","实现","一个","编写","服务","发送","第三","使用","视觉","第一个","有","话题","的","第二个","查询","识别","封装","图像","定义","例程","第三个","回顾","三个","研究","，","相机","下","二个","概念","发布","下来","对象","就","可以","以及","中","进行","接下","机器","这样","收到","如何","节点","服务端","是","目标","请求","驱动","角度","来"],"title":"案例一：服务接口的定义与使用","title_tokens":["的","接口","定义","服务","使用","一","案例","：","与"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_6","text":"在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ...","text_tokens":["_","位置","接口","...","y","---","。","指令"," ","package","我们","代码生成","使用","文件","name","、","完成","配置","x","cmakelists","group","就","packages","中","srv","让","过程","中有","get","member","(","功能","坐标","不同","project","在","：","txt","还","depend","getobjectposition","后","编译器","interface","的话","的","获取","部分","/","true","定义","例程","表示","rosidl","也","learning","\"",")","服务端","目标","依赖","generate","runtime","通信","}","了","xml","两个","find","服务","语言",">","int32","required","$","<","生成","包","{","为","这个","default","自动","需要","exec","添加","代码","build","of","反馈","#","选项","interfaces","一次","，","generators","接口定义","bool","会","根据",".","是","上边","编译"],"title":"接口定义","title_tokens":["定义","接口定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_7","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["代码","的","方法","中","我们","重点","接口","在","再","看","使用","。","下","来"],"title":"程序调用","title_tokens":["程序","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_8","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["_","位置","async","'","接口","...","示例","none","y","父类","spin","object"," ","timeout","client","self","import","while","response","并","for","name","else","guyuehome","create","from","自定义","识别","args","x","对象","d","super","进行","result","e","srv","if","关闭","get","def","请求","初始","(","logger","call","failed","send","-","getobjectposition","sec","coding","bin","interface","com","init","waiting","exception","的","objectclient","/","true","available","定义","__","r","n","python3","learning","\"",")","说明","py","try","应答","库","节点","目标","古月","1.0","main","创建","position","node","等待","!","as","@","服务","destroy","8","*","not","ros2","shutdown","rclpy","request","=","居","\\","作者","www","except","again","ok","python",":","of",",","service","自定","%","销毁","info","usr","#","初始化","done","wait","class","，","future","break","once","env","类",".","utf","target"],"title":"客户端接口调用","title_tokens":["客户端","客户","调用","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_9","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["接口类","_","continue","'","in","接口","将","示例","none","bgr8","y","父类","spin","object"," ","self","chain","import","response","并","使用","for","name","else","imagesubscriber","w","guyuehome","话题","create","from","data","、","函数","imgmsg","自定义","识别","互相","高","主","hierarchy","红色","消息","x","args","array","msgs","用于","对象","numpy","sensor","d","super","接口类型","hsv","中","进行","srv","if","50","输出","raw","cnt","关闭","get","def","sub","请求","初始","(","10","提示","和","img","logger","坐标","数值","imshow","入口","上限","像素","数据","中心","）","mask","-","二值化","invalid","msg","getobjectposition","255","得到","（","后","receiving","苹果","coding","bin","interface","h","com","cvbridge","init","approx","的","waitkey","下限","/","shape","int","图像","true","计算","定义","__","[","转化成","detect","日志","n","所在","python3","learning","\"","objectx",")","说明","py","cvtcolor","xy","1","信息","库","节点","目标","boundingrect","古月","list","main","退出","创建","处理","噪声","队列","node","]","position","从","contours","回调","findcontours","勾勒","效果","等待","circle","!","as","出来","lower","太小","名","@","video","提供","to","retr","服务","server","面积","点画","图像处理","destroy","检测","color","宽","已","8","cv2","阈值","180","模型","*","<","服务器","return","转换","者","类型","ros","进入","bgr2hsv","cv","ros2","90","subscription","shutdown","为","已经","+","callback","及","轮廓","rclpy","request","=","居","\\","作者","www","objecty","范围","5","frame","listener","bridge","image","物体","python",":","np","反馈",",","red","service","自定","一个","%","销毁","info","usr","drawcontours","#","150","初始化","颜色","command","0","上角","2","执行","务器","长度","opencv","upper","class","转化","，","对","与","订阅","显示","循环","bgr","去除","左上角","env","128","类","一些","收到",".","utf","target","左上","化成","inrange"],"title":"服务端接口调用","title_tokens":["服务","服务端","调用","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_10","text":"话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。","text_tokens":["想","位置","之前","从","需要","通信接口","接口","通信","换成","人","继续","。","不管","我们","衍生","服务","视觉","话题","的","没有","识别","有没有","定义","，","发布","也","类似","把","机器","周期","中来","是","目标","案例"],"title":"案例二：话题接口的定义与使用","title_tokens":["的","案例","二","接口","定义","使用","：","话题","与"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_11","text":"现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub","text_tokens":["_","位置","分别","run","功能","node","需要","将","出去","标准","image","第一","这个","此时","cam","：","。","数据"," ","object","启动","我们","现在","第二","一个","并","第三","使用","视觉","interface","第一个","到","话题","第二个","的","终端","谁","识别","希望","图像","封装","定义","打印","运行","；","第三个","三个","消息","$","相机","，","二个","pub","发布","ros","就","订阅","learning","topic","中","会","ros2","exe","节点","成","以上","是","目标","usb","sub","驱动","来"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_12","text":"在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ...","text_tokens":["_","位置","接口","...","y","。"," ","package","我们","使用","name","话题","、","完成","配置","消息","x","cmakelists","中","进行","让","过程","(","功能","坐标","不同","project","在","：","txt","还","msg","后","编译器","interface","的","objectposition","/","定义","例程","表示","内容","rosidl","learning","\"",")","目标","generate","通信","}","了","坐标值","find","服务","描述","语言","int32","required","标值","$","生成","包","{","这个","default","自动","需要","代码","一个","#","选项","interfaces","，","generators","接口定义","根据",".","是","编译"],"title":"接口定义","title_tokens":["定义","接口定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_13","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["代码","的","方法","中","我们","重点","接口","在","再","看","使用","。","下","来"],"title":"程序调用","title_tokens":["程序","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_14","text":"learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["_","位置","continue","'","in","接口","将","示例","none","bgr8","y","父类","spin","object"," ","self","publisher","chain","import","并","使用","for","name","imagesubscriber","w","guyuehome","话题","create","from","data","、","函数","imgmsg","自定义","高","互相","主","hierarchy","红色","消息","x","args","array","msgs","用于","对象","numpy","sensor","super","中","hsv","进行","if","50","输出","raw","cnt","关闭","get","def","sub","初始","(","10","提示","和","img","logger","坐标","数值","imshow","入口","上限","像素","中心","）","mask","-","二值化","msg","255","得到","（","后","receiving","苹果","coding","bin","interface","h","com","cvbridge","init","approx","的","waitkey","objectposition","下限","/","shape","int","图像","计算","定义","__","[","转化成","detect","日志","所在","python3","learning","\"","objectx",")","说明","py","cvtcolor","xy","1","信息","库","节点","publish","目标","boundingrect","古月","list","main","退出","创建","处理","噪声","队列","node","]","position","从","contours","回调","findcontours","勾勒","效果","等待","circle","!","as","出来","lower","太小","名","@","video","to","retr","面积","点画","图像处理","destroy","检测","color","宽","已","8","cv2","阈值","180","模型","*","<","转换","者","发布","类型","ros","topic","进入","bgr2hsv","cv","ros2","90","subscription","shutdown","为","+","callback","及","轮廓","rclpy","=","居","作者","www","objecty","范围","5","frame","listener","bridge","image","python",":","np",",","red","webcam","自定","一个","销毁","info","usr","drawcontours","#","150","初始化","颜色","0","上角","2","长度","pub","opencv","upper","class","，","转化","发布者","与","订阅","显示","循环","bgr","去除","左上角","env","128","类","一些",".","utf","左上","化成","inrange"],"title":"发布者接口调用","title_tokens":["调用","发布者","发布","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_15","text":"learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["_","位置","'","接口","示例","none","y","父类","spin","object"," ","self","import","并","name","guyuehome","话题","create","from","、","函数","自定义","主","消息","x","args","msgs","对象","d","super","std","进行","subscribernode","输出","关闭","get","def","sub","初始","(","10","提示","logger","入口","数据","-","msg","（","后","coding","bin","interface","com","init","的","字符","objectposition","/","定义","__","日志","python3","learning","\"",")","说明","py","信息","库","节点","目标","古月","main","退出","创建","处理","position","node","队列","回调","等待","!","string","名","@","destroy","8","字符串","*","者","类型","topic","ros2","subscription","shutdown","callback","rclpy","=","居","\\","作者","www","listener","python",":",",","自定","一个","%","销毁","info","usr","#","初始化","执行","长度","class","对","，","订阅","循环","env","收到","类",".","utf","target"],"title":"订阅者接口调用","title_tokens":["订阅","者","调用","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_16","text":"接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义","text_tokens":["操作","_","如下","功能","接口","："," ","package","常用","#","name","interface",">","列表","show","的","系统","命令","定义","详细","$","包中","<","接口定义","ros2","某个","list","查看"],"title":"接口命令行操作","title_tokens":["操作","命令行","命令","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_17","text":"https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["en","org","https"," ",":","package","-","use","humble","about","define","docs","interface","single","/","interfaces","tutorials","and","ros","concepts","html","."],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/","text":"动作 机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。 通信模型 举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。 客户端/服务器模型 动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。 一对多通信 和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。 同步通信 既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。 由服务和话题合成 大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。 案例一：小海龟的动作 我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback 案例二：机器人画圆 如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。 运行效果 启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。 接口定义 例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是动作的目标，enable为true时，表示开始运动； 第二块是动作的执行结果，finish为true，表示动作执行完成； 第三块是动作的周期反馈，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ... 通信模型 通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。 服务端代码解析 learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], }, 客户端代码解析 learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], }, 动作命令行操作 动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["_","姿态","针对","async","none","智能","由","没错","scripts","负责","便于","试一试","使用","succeed","顺利","到","data","送餐","没有","可能","希望","动作","配置","运行","d","类似","不仅","result","服务器端","让","输出","def","一对","假设","应用层","坐标","不同","project","先","入口","在","如果","send","数据","txt","enable","哪里","最终","程序","bin","编译器","指定","的","一下","很","抓取","当前","--","例程","__","python3","rotate","信息","应用","节点","第二块","run","node","发现","回调","之后","}","teleop","启动","好","find","接收","一点一点","第三","destroy","movecircleactionclient","当","8","开始","模型","turtlesim","time","{","points","shutdown","rotateabsolute","按照","海龟","居","之前","满足","需要","一块","ok","转","python","moving","某一",",","自定","销毁","打开","举个","根本","一段时间","选项","仅仅","系统","例子","多个","以下","发布者","键盘","下来","常常","用到","同步","二块","什么","收到","实际",".","不是","编译","位置","原理","管理","...","拒绝","。","含义","结束","控","仿真","spin","又","眼前","二","import","humble","文件","话题","发出","自定义","简单","消息","机器人","这种","圆周运动","周期","直到","关闭","get","一","就此","小海","en","画圆","logger","底层","毕竟","entry","再","目的","后","（","interface","能","init","竟然","成功","获取","/","key","模块","表示","[","得","日志","一起","rosidl","秘密","方法","某个","方式","main","退出","实时","处理","circle","了","名","通过","@","取消","名字","拒绝执行","server","execute","送货","送给","相比","int32","required","tutorials","return","类型","就此结束","ros2","一套","这些","才能","达到","通信接口","某","不仅仅","等","行为","现在","实现","%","发送","但","初始化","装","publishing","0","有没有","三块","wait","务器","运动","再用","，","generators","接口定义","多少","只有","env","客户端","包含","分拣","上边","查看","'","https","模拟","发送给","过","圆周","指令","package","看到","我们","合成","response","场景","进度","for","theta","docs","这么","from","、","到底","读取","识别","主","turtle1","编程","既然","完成","每隔","需求","小海龟","received","像","动","隐藏","cmakelists","客户","args","对象","一点","0.5","中","进行","调用","super","这样","是不是","if","过程","结果","所处","sleep","初始","来","10","想","遥控","和","功能","臂","多少度","接下来","较长","一边","state","goal","具体","com","？","部分","true","定义","清楚","特性","转圈","\"","type","度","同时","服务端","库","而是","目标","古月","list","流程","如下","创建","从","旋转","告诉","合适","]","时","效果","movecircleactionserver","第一","等待","!","多","请","仿真器","两个","服务","每","语言","actionclient",">","add","第三块","圈","*","解析","命令","absolute","；","看","服务器","movecircle","虽然","下","者","ros","进度条","控制","生成","actionserver","状态","包","设置","为","还会","callback","这个","起来","角度","自动","=","www","accepted","真器","是否","处理函数","呢","代码",":","反馈","—","第二","一段","info","usr","#","done","终端","执行","命令行","三个","class","一次","概念","大家","肯定","更为","bool","接下","会","根据","如何","html","是","finish","其实","接口类","操作","导航","参考","当中","in","接口","示例","---","父类"," ","动图","client","self","actions","完整","机械","并","handle","干什么","name","guyuehome","有","函数","1.57","rejected","封装","这","使","range","但是","就","接口类型","加入","请求","20","1s","(","console","都","move","：","）","理解","feedback","-","还","背后","msg","编写","coding","相对","基于","可以","也","learning","分析",")","被","py","说明","链接","另外","publish","介绍","仔细","一样","异步","generate","理","通信","不","那","应带","整个","通信模型","第一块","常用","随时","直接","turtle","action","setup","not","$","一种","<","不会","发布","复杂","其","把","写","就是","30","default","rclpy","understanding","比如","机制","作者","分别","只能","org","思路","标准","i","360","一个","知道","数据类型","上","加深","列表","interfaces","对","future","订阅","循环","点","机器","类","时间","utf","段时间","案例","转个"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_1","text":"机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。","text_tokens":["遥控","流程","机制","满足","功能","需要","从","通信","管理","智能","不仅仅","在","那","目的","。","等","含义","某一","理解"," ","行为","我们","—","便于","好","实现","一个","名字","场景","并","完整","上","这么","具体","的","送货","、","仅仅","送餐","系统","很","概念","识别","动作","需求","一种","对","简单","运动","，","可以","键盘","机器人","ros","复杂","也","常常","用到","就","不仅","中","这种","被","会","机器","进行","某个","就是","另外","应用","是","目标","分拣","这些","这个"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_2","text":"举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。","text_tokens":["当中","。","结束","控","指令"," ","我们","眼前","并","进度","使用","到","发出","到底","、","没有","完成","这","每隔","动作","像","机器人","就","一点","让","这样","直到","过程","假设","20","10","想","1s","多少度","在","再","如果","还","哪里","后","？","的","一下","当前","表示","得","转圈","可以","度","信息","旋转","告诉","合适","通信","之后","不","了","取消","一点一点","随时","开始","圈","命令","进度条","把","30","才能","比如","机制","需要","ok","转","360","行为","反馈","现在","一个","一段","知道","发送","装","举个","根本","一段时间","有没有","执行","例子","运动","，","肯定","多少","更为","机器","时间","不是","是","段时间","转个"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_3","text":"动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。","text_tokens":["想","和","导航","就此","实时","姿态","达到","坐标","臂","通信","之后","再","如果","。","结束"," ","整个","反馈","又","一边","后","一个","机械","服务","发送","使用","干什么","当","的","开始","模型","抓取","可能","当前","执行","动作","务器","服务器","运动","动","，","客户","也","机器人","就","类似","就此结束","中","控制","服务器端","状态","机器","什么","让","周期","收到","客户端","过程","同时","所处","信息","是","目标","这个","起来"],"title":"客户端/服务器模型","title_tokens":["模型","/","客户端","服务","务器","服务器","客户"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_4","text":"和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。","text_tokens":["和","才能","都","只能","毕竟","通信","先","。","一个","服务","发送","有","的","执行","动作","命令","完成","多个","务器","服务器","运动","，","客户","可以","下","但是","机器人","大家","中","只有","服务器端","机器","客户端","一样"],"title":"一对多通信","title_tokens":["多","一对","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_5","text":"既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。","text_tokens":["机制","之前","通信","接口","通信接口","那","过","。","数据","反馈","我们","使用","文件","有","的","action","既然","动作","定义","一种","，","也","同步","中","进行","过程",".","是","介绍"],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_6","text":"大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。","text_tokens":["应用层","和","机制","底层","发现","通信","时","再","请求","应带","。"," ","没错","动图","反馈","两个","一个","实现","服务","发送","使用","当","有","话题","的","竟然","其实","基于","模块","动作","命令","一种","务器","看","三个","隐藏","运动","服务器","，","客户","下","表示","发布","也","发布者","大家","秘密","订阅","者","调用","其","服务器端","会","是不是","收到","就是","客户端","过程","周期","应用","不是","上边","还会","是","仔细","目标","来"],"title":"由服务和话题合成","title_tokens":["和","合成","服务","由","话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_7","text":"我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback","text_tokens":["海龟","_","小海","姿态","run","node","接下来","某","}","真器","send","仿真","。","：","teleop","理解"," ",":","启动","feedback","-","我们","仿真器","info","使用","turtle","theta","到","加深","指定","goal","的","action","1.57","key","/","turtle1","--","小海龟","动作","命令","$","absolute","对","turtlesim","运动","再用","，","以下","可以","概念","下来","\"","控制","接下","让","ros2","rotate","{","rotateabsolute","一","按照","案例"],"title":"案例一：小海龟的动作","title_tokens":["的","海龟","小海","小海龟","动作","一","案例","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_8","text":"如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。","text_tokens":["和","针对","接口","接下来","通信","在","。","呢","代码"," ","通过","请","我们","试一试","好","实现","一个","服务","并","但","使用","直接","话题","？","的","有","圈","希望","封装","基于","编程","动作","特性","务器","不会","服务器","，","虽然","一起","客户","机器人","下来","方法","就","中","接下","服务器端","机器","让","如何","客户端","实际","过程","一套","是","而是","假设","转个","来"],"title":"案例二：机器人画圆","title_tokens":["案例","画圆","机器","二","：","机器人"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_9","text":"启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。","text_tokens":["和","_","原理","分别","run","move","接下来","示例","之后","这个","模拟","：","。","结束"," ","启动","client","看到","我们","反馈","背后","最终","两个","实现","服务","发送","server","每","并","的","一下","终端","action","开始","命令","动作","完成","$","运行","务器","例程","服务器","运动","一次","，","客户","可以","下","机器人","下来","就","learning","中","分析","接下","服务器端","机器","度","ros2","信息","客户端","服务端","目标","30"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_10","text":"例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是动作的目标，enable为true时，表示开始运动； 第二块是动作的执行结果，finish为true，表示动作执行完成； 第三块是动作的周期反馈，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ...","text_tokens":["_","位置","接口","...","---","。","指令"," ","package","我们","并","使用","name","到","自定义","动作","完成","配置","cmakelists","机器人","中","进行","周期","让","过程","结果","(","功能","不同","project","在","：","txt","enable","还","后","state","编译器","interface","的","成功","部分","/","true","当前","定义","例程","表示","rosidl","learning","\"",")","目标","generate","第二块","旋转","时","}","第一","通过","第一块","find","语言","第三","第三块","action","开始","int32","required","$","；","movecircle","ros","生成","包","{","为","角度","自动","default","一块","需要","标准","是否","代码","反馈","第二","自定","#","选项","interfaces","三块","执行","三个","运动","，","generators","接口定义","bool","二块","机器","根据","包含",".","不是","finish","是","编译"],"title":"接口定义","title_tokens":["定义","接口定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_11","text":"通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。","text_tokens":["和","理","之前","通信","思路","接下来","发送给","。","结束","代码"," ","反馈","通信模型","我们","较长","程序","后","一个","服务","发送","并","相对","话题","的","送给","一下","相比","开始","模型","动作","清楚","例程","运行","务器","服务器","运动","，","客户","机器人","下来","控制","接下","分析","机器","这样","周期","就是","客户端","信息","写","目标","一","起来"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_12","text":"learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["接口类","_","'","in","接口","...","示例","none","圆周","父类","spin"," ","scripts","self","负责","import","并","handle","for","name","succeed","文件","到","guyuehome","from","、","函数","自定义","主","动作","完成","配置","消息","range","args","d","对象","0.5","super","接口类型","result","进行","圆周运动","加入","周期","让","结果","sleep","关闭","get","def","初始","(","logger","console","功能","move","入口","entry","：","）","feedback","-","msg","最终","程序","（","后","编写","coding","bin","state","interface","goal","com","init","的","成功","/","true","当前","定义","__","表示","[","python3","learning","\"",")","说明","py","度","信息","库","服务端","节点","publish","目标","古月","main","退出","如下","创建","处理","从","node","]","movecircleactionserver","回调","之后","}","等待","circle","!","名","@","服务","server","destroy","execute","8","action","setup","*","服务器","return","movecircle","time","类型","发布","actionserver","ros2","设置","shutdown","包","points","{","callback","30","角度","rclpy","=","居","作者","www","需要","python","i","处理函数","360","moving","代码",":","反馈",",","自定","一个","%","销毁","info","usr","知道","打开","#","初始化","publishing","0","选项","系统","执行","务器","class","运动","，","循环","点","env","收到","类",".","utf","finish","编译"],"title":"服务端代码解析","title_tokens":["代码","服务","服务端","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_13","text":"learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["接口类","_","async","'","接口","示例","拒绝","none","圆周","父类","spin"," ","scripts","client","self","import","response","并","handle","for","name","文件","顺利","guyuehome","from","、","函数","自定义","希望","rejected","读取","主","动作","完成","配置","received","消息","使","args","客户","机器人","d","对象","super","接口类型","result","服务器端","圆周运动","进行","加入","周期","if","输出","让","结果","关闭","get","def","请求","初始","(","logger","console","功能","move","入口","entry","如果","send","：","数据","）","enable","feedback","-","msg","最终","程序","（","后","编写","coding","bin","state","interface","goal","com","init","能","的","获取","/","true","定义","__","[","日志","python3","learning","\"",")","说明","py","被","库","节点","方式","目标","异步","古月","main","退出","如下","创建","处理","node","]","时","回调","之后","}","等待","circle","!","名","启动","@","接收","服务","拒绝执行","server","actionclient","movecircleactionclient","destroy","add","8","action","开始","setup","*","not","服务器","return","movecircle","类型","ros2","设置","{","shutdown","包","points","为","callback","rclpy","=","居","作者","www","需要","accepted","python","代码",":","反馈",",","自定","一个","%","发送","info","usr","销毁","知道","打开","#","初始化","done","选项","系统","执行","wait","务器","class","运动","，","future","循环","点","机器","env","收到","类","客户端",".","utf","finish","编译"],"title":"客户端代码解析","title_tokens":["客户端","客户","解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_14","text":"动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求","text_tokens":["操作","_","如下","send","：","数据"," ","常用","服务","发送","info","数据类型","#","name",">","goal","列表","的","data","action","命令","动作","$","<","类型","type","ros2","请求","list","查看"],"title":"动作命令行操作","title_tokens":["操作","命令行","命令","动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":[":","understanding","en","-","/","actions","ros2","tutorials","org","humble","html",".","https","docs","ros"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/","text":"参数 话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。 通信模型 比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。 全局字典 在ROS系统中，参数是以全局字典的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。 可动态监控 在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。 案例一：小海龟例程中的参数 在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 参数列表 参数查询与修改 $ ros2 param describe turtlesim background_b $ ros2 param get turtlesim background_b $ ros2 param set turtlesim background_b 10 参数文件保存与加载 $ ros2 param dump turtlesim >> turtlesim.yaml $ ros2 param load turtlesim turtlesim.yaml 案例二：参数编程 接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。 运行效果 $ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle 代码解析 learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], }, 案例三：机器视觉应用 参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。 运行效果 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180 代码解析 learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["_","比较","none","bgr8","y","挺","robot","由","传输","scripts","便于","使用","到","data","高","可能","new","很多","动作","传输方式","配置","运行","用于","d","类似","让","输出","def","号","坐标","不同","入口","先","在","如果","数据","二值化","程序","参数设置","组成","bin","指定","的","一下","问题","waitkey","查询","int","例程","__","转化成","detect","所在","python3","信息","叫做","节点","应用","值","boundingrect","环境","all","run","噪声","c++","node","勾勒","findcontours","回调","}","以","teleop","load","点画","destroy","已","8","cv2","开始","模型","说干就干","turtlesim","大大","就要","{","points","shutdown","输入框","两句","海龟","居","frame","需要","分辨","image","物体","python","单位","时候","考虑",",","三种","销毁","打开","drawcontours","选项","上角","系统","2","多个","转化","跟","提炼","下来","用到","bgr","什么",".","真实","不是","宽","编译","提高","inrange","。","仿真","含义","spin","二","import","humble","文件","w","话题","imgmsg","integer","简单","消息","相机","机器人","numpy","sensor","配置文件","作用","秒","周期","50","格式","b","get","关闭","一","驱动","麻烦","小海","每次","en","logger","数值","entry","再","像素","区域","体验","改变","255","后","（","图像识别","init","approx","获取","key","/","辨率","[","表示","动态","日志","方法","其他","高级","方式","很大","main","退出","处理","contours","条","circle","string","继续","了","名","通过","@","优化","端口","提供","to","图像处理","检测","几个","送给","滑动","阈值","180","键和值","tutorials","关注","转换","类型","进入","某些","cv","ros2","全局","usb","这些","及","轮廓","param","5","listener","bridge","某","保存","cam","等","red","参数值","实现","%","发送","比较简单","易用","150","初始化","0","那个","upper","，","大大提高","与","value","多少","去除","左上角","env","化成","continue","名称","'","熟悉","https","来看","发送给","变量","我们","合成","for","docs","imagesubscriber","from","、","参数","读取","识别","主","互相","编程","hierarchy","小海龟","完成","像","args","x","msgs","对象","中","进行","super","hsv","if","parameter","过程","初始","来","10","和","功能","imshow","接下来","中心","键值","得到","receiving","视觉","默认值","光线","com","字典","？","监控","cvbridge","部分","下限","shape","图像","清楚","特性","dump","parameters","\"","type","一两句","度","等等","cvtcolor","xy","库","目标","从而","古月","list","了解","创建","如下","从","]","效果","易用性","等待","!","as","出来","lower","仿真器","retr","服务",">","*","解析","命令","看","下","者","ros","不少","set","设置","包","90","timer","为","+","callback","这个","起来","三","=","然后","范围","www","真器","是否","呢","代码",":","np","—","info","usr","nodeb","#","全局变量","颜色","分辨率","执行","么","parameternode","命令行","长度","class","哪个","大家","显示","接下","会","影响","如何","一些","html","是","办法","参考","in","接口","将","示例","nodea","父类"," ","object","self","hello","核心","chain","或者","并","name","guyuehome","有","create","函数","这","打印","红色","array","就","不如","加入","raw","cnt","sub","(","提示","img","console","都","上限","：","）","理解","mask","-","还","丰富","msg","编写","变化","苹果","coding","h","输入","计算","曝光","可以","也","learning",")","说明","py","链接","declare","1","成","background","介绍","本","一样","形态","describe","队列","默认","通信","不","最新","太小","整个","通信模型","video","常用","访问","连接","面积","turtle","color","立刻","setup","$","一种","<","s","bgr2hsv","把","定时","写","subscription","就是","exe","已经","重新","修改","rclpy","非常","understanding","比如","机制","作者","分别","可","敏感","org","mbot","共享","编码","美颜","一个","后边","知道","yaml","存在","一两","列表","节","叫","对","opencv","定时器","订阅","循环","点","机器","128","类","utf","加载","案例","左上","即可"],"title":"**参数**","title_tokens":["参数","*"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_1","text":"话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。","text_tokens":["了解","机制","c++","通信","在","不","再","共享","是否","。","数据","传输"," ","变量","我们","常用","—","便于","程序","服务","知道","三种","全局变量","字典","话题","的","节","、","参数","系统","编程","动作","这","清楚","传输方式","一种","多个","运行","，","可以","ros","机器人","大家","类似","中","某些","机器","方式","已经","全局","是","节点","介绍","本","来"],"title":"参数","title_tokens":["参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_2","text":"比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。","text_tokens":["nodea","。"," ","我们","核心","或者","使用","文件","到","有","参数","识别","很多","这","配置","像","相机","就","配置文件","中","进行","作用","过程","格式","驱动","和","功能","都","不同","在","区域","改变","程序","参数设置","后","图像识别","视觉","输入","的","问题","部分","图像","辨率","曝光","可以","也","度","等等","节点","很大","一样","效果","条","整个","通过","端口","连接","面积","滑动","阈值","关注","设置","就是","输入框","usb","这些","比如","分别","需要","分辨","是否","时候","编码","美颜","考虑","nodeb","分辨率","执行","那个","，","哪个","多少","会","机器","什么","影响","一些","是"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_3","text":"在ROS系统中，参数是以全局字典的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。","text_tokens":["和","然后","号","名称","数值","在","以","了","。","等","由","理解"," ","名","时候","键值","合成","我们","或者","参数值","一个","后边","访问","使用","组成","存在","字典","？","有","的","参数","系统","编程","叫","键和值","像","，","跟","可以","ros","也","就","一样","中","什么","就是","叫做","全局","为","真实","是","这个","形态","即可"],"title":"全局字典","title_tokens":["全局","字典"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_4","text":"在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。","text_tokens":["非常","比如","办法","都","数值","在","某","共享","如果","最新","了","。"," ","丰富","一个","访问","知道","有","的","获取","参数","立刻","可能","编程","这","特性","对","，","可以","也","大家","其他","用到","中","进行","会","ros2","高级","节点","从而","修改"],"title":"可动态监控","title_tokens":["动态","监控","可"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_5","text":"在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["海龟","和","_","小海","run","node","熟悉","在","真器","了","仿真","含义","。","teleop"," ","通过","我们","仿真器","提供","使用","turtle","的","参数","key","小海龟","命令","例程","$","命令行","turtlesim","，","下","也","方法","不少","中","ros2","一","这个","起来"],"title":"案例一：小海龟例程中的参数","title_tokens":["的","海龟","参数","小海","中","小海龟","例程","一","案例","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_6","text":"","text_tokens":[],"title":"参数列表","title_tokens":["参数","列表"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_7","text":"$ ros2 param describe turtlesim background_b $ ros2 param get turtlesim background_b $ ros2 param set turtlesim background_b 10","text_tokens":[" ","_","param","describe","set","ros2","$","background","b","turtlesim","get","10"],"title":"参数查询与修改","title_tokens":["参数","修改","查询","与"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_8","text":"$ ros2 param dump turtlesim >> turtlesim.yaml $ ros2 param load turtlesim turtlesim.yaml","text_tokens":[" ","load","param","ros2","$",".","yaml","dump","turtlesim",">"],"title":"参数文件保存与加载","title_tokens":["参数","保存","文件","加载","与"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_9","text":"接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。","text_tokens":["和","都","接下来","比较","先","在","了","。","我们","体验","程序","实现","使用","比较简单","一两","几个","的","一下","参数","开始","函数","读取","这","简单","，","可以","下来","就","方法","中","一两句","接下","就要","写","设置","两句","来"],"title":"案例二：参数编程","title_tokens":["参数","案例","二","编程","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_10","text":"$ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle","text_tokens":[" ","learning","_","param","run","declare","ros2","parameter","set","$","turtle","name","robot"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_11","text":"learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], },","text_tokens":["_","'","接口","将","示例","none","发送给","父类","robot","spin"," ","scripts","self","hello","import","并","文件","name","到","guyuehome","create","from","、","参数","函数","读取","new","主","完成","打印","配置","args","对象","super","中","进行","秒","加入","周期","parameter","输出","让","关闭","get","def","初始","(","logger","console","功能","数值","入口","entry","：","）","-","程序","（","后","编写","coding","bin","默认值","com","init","指定","的","/","__","[","parameters","日志","python3","learning","\"","type",")","说明","py","declare","信息","库","节点","值","古月","all","main","退出","如下","创建","从","node","]","默认","回调","}","等待","!","string","@","destroy","8","送给","setup","*","s","定时","ros2","设置","set","shutdown","包","timer","为","points","{","callback","重新","rclpy","修改","=","居","param","作者","www","需要","mbot","python","单位","代码",":",",","参数值","一个","%","发送","info","usr","销毁","知道","打开","#","初始化","列表","选项","2","系统","执行","parameternode","class","，","定时器","循环","value","点","env","类",".","utf","编译"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_12","text":"参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。","text_tokens":["每次","不同","比较","示例","敏感","在","易用性","物体","挺","先","来看","继续","了","再","呢","。","代码"," ","还","我们","优化","程序","变化","使用","视觉","易用","光线","？","效果","的","参数","阈值","说干就干","识别","么","运行","对","看","动态","，","大大提高","提炼","可以","下","机器人","也","大家","就","大大","不如","中","把","会","机器","设置","如何","过程","应用","已经","成","是","不是","环境","提高","麻烦","修改"],"title":"案例三：机器视觉应用","title_tokens":["案例","机器","应用","视觉","：","三"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_13","text":"$ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180","text_tokens":["_","param","run","node","cam"," ","object","red","h","180","$","upper","detect","learning","set","ros2","parameter","exe","usb"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_14","text":"learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], },","text_tokens":["编译","_","continue","'","in","接口","将","示例","none","bgr8","y","父类","spin","object"," ","scripts","self","chain","import","并","使用","for","name","文件","imagesubscriber","到","guyuehome","话题","create","from","w","、","参数","函数","integer","data","读取","识别","互相","高","imgmsg","主","hierarchy","完成","打印","配置","红色","消息","x","args","array","msgs","用于","对象","numpy","sensor","d","super","中","hsv","进行","加入","if","parameter","50","raw","输出","让","cnt","关闭","get","def","sub","初始","(","10","提示","和","img","logger","console","功能","坐标","数值","imshow","入口","上限","entry","像素","：","中心","）","mask","-","二值化","msg","255","程序","得到","（","后","编写","receiving","苹果","coding","bin","h","com","cvbridge","init","approx","的","waitkey","下限","/","shape","int","图像","计算","__","[","表示","转化成","detect","日志","所在","python3","learning","\"",")","说明","py","declare","cvtcolor","xy","1","信息","库","节点","目标","boundingrect","古月","list","main","退出","如下","创建","处理","噪声","队列","node","]","从","contours","findcontours","回调","勾勒","效果","}","等待","circle","!","as","出来","lower","太小","名","通过","@","video","to","retr","面积","点画","图像处理","destroy","检测","color","宽","已","8","阈值","cv2","180","模型","setup","*","<","转换","者","类型","ros","进入","bgr2hsv","cv","ros2","设置","90","subscription","shutdown","包","为","points","{","+","callback","及","轮廓","rclpy","=","居","param","作者","www","范围","5","frame","需要","listener","bridge","image","python","代码",":","np",",","red","参数值","一个","%","销毁","info","usr","知道","drawcontours","打开","#","150","颜色","初始化","0","选项","上角","2","系统","长度","opencv","upper","class","转化","，","与","订阅","显示","循环","value","bgr","去除","左上角","点","env","128","类","一些",".","utf","左上","化成","inrange"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":[":","understanding","en","-","/","ros2","tutorials","org","humble","html",".","https","parameters","docs","ros"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/","text":"分布式通信 智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统，可以实现多计算平台上的任务分配。 分布式通信 什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。 分布式网络搭建 除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。 树莓派配置 在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。 装系统 我们先要给树莓派装系统，这里我们选择的是Ubuntu Mate针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/ 装ROS2 在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。 编译代码 将我们课程的代码也下载到树莓派中，进行编译。 远程桌面 如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728 分布式数据传输 树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 * 如使用虚拟机，请将虚拟机网络修改为桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。 分布式网络分组 没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。 案例一：小海龟分布式控制 分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动。 $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端 案例二：话题分布式通信 我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串。 $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端 案例三：服务分布式通信 话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能。 案例四：机器视觉分布式应用 以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体。 $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。 参考链接 https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["有点","_","针对","比较","端","智能","原本","挺","由","互联","传输","网络","桥接","使用","顺利","到","布式","主要","没有","可能","希望","很多","动作","配置","运行","小型","远程","一系列","details","类似","派","concepts","里","试试","性能","不同","先","在","如果","数据","传感器","程序","net","demo","about","组成","摄像","的","一下","问题","字符","例程","做","资源","经常","选择","信息","电脑","用","节点","应用","卡中","环境","如","则","run","任务","node","似乎","之后","发给","teleop","给","启动","作为","talker","处于","好","鼠标","设计","加法","所","ubuntu","turtlesim","topic","支持","并且","海龟","情况","卡顿","之前","需要","感器","物体","魅力","如此","webcam","只要","系统","helloworld","典型","反过","多个","发生","感受","这里","较","同一","顺利实现","发布者","键盘","cpp","下来","用到","什么","讲","体积","实际","消耗",".","不是","编译","之外","简而言之","过来","依然","。","仿真","于是","据传","二","不在","humble","虚拟机","出现","话题","your","服务器程序","笔记本电脑","机器人","分布式","这种","控制器","sd","款","一","驱动","小海","en","平台","毕竟","课程","再","全都","反过来","各种","求和","后","成功","/","key","同一个","方法","算机","只","上去","计算能力","任何","放置","实时","电机","处理","继续","了","传感","端的","通过","提供","频繁","位于","一系","world","字符串","放在","分配","互通","框架","ros2","usb","这些","才能","listener","cam","等","能力","实现","结构","装","除了","之间","搭建","真有","务器","pub","运动","采集","，","一致","我","客户端","显示器","上边","一句","计算机","网上","https","模拟","过","我们","适合","分布式系统","无法","docs","压力","这么","、","识别","摄像头","一切","完成","小海龟","岂","安排","像","两者","客户","事情","中","进行","不过","而言","小","数据传输","这样","此外","中有","来","想","和","功能","接下来","轻松","放","pc","视觉","的话","具体","？","监控","图像","遇到","还是","不在话下","四","article","而是","qq","流程","看上","如下","你","效果","多","小组","请","仿真器","两个","每","服务","分布","他们",">","讲过","mate","*","命令","服务器","下","者","整体","ros","虚拟","控制","派装","bashrc","为","起来","三","=","感觉","笔记","csdn","然后","122599728","真器","是否","呢","代码",":","基本","减轻","确保","—","经典","#","局域网络","命令行","镜像","远程桌面","大家","显示","接下","会","系列","一些","html","以上","是","操作","树莓","参考","没","将","派里"," ","hello","学习","或者","并","下载","有","神奇","拆解","更强","这","测试","红色","采用","派端","分组","步骤","打通","就","相互","加入","带来","繁多","建立","先要","sub","分布式应用","export","都","几乎","：","nodes","domain","-","还","编写","变化","看上去","笔记本","计算","变得","个","可以","也","learning","py","链接","基本一致","另外","一样","通信","不","模式","安装","方便","访问","之一","连接","直接","turtle","任务分配","52785580","$","<","id","发布","复杂","就是","exe","已经","download","修改","友好","非常","比如","机制","org","流畅","一个","桌面","啦","上","客户端程序","带领","烧写","开发","blog","叫","像头","订阅","机器","不够","资料","局域网","局域","完全","案例","即可"],"title":"**分布式通信**","title_tokens":["*","通信","分布","布式","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_1","text":"智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统，可以实现多计算平台上的任务分配。","text_tokens":["计算能力","情况","计算机","处理","卡顿","平台","功能","任务","将","智能","如果","多","。","等","全都","能力"," ","减轻","实现","一个","分布","分布式系统","上","压力","出现","到","布式","？","任务分配","的","、","拆解","系统","计算","放在","这","岂","运行","多个","遇到","，","可以","机器人","分布式","经常","分配","中","会","机器","里","不够","就是","算机","繁多","不是","这些"],"title":"分布式通信","title_tokens":["通信","分布","布式","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_2","text":"什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。","text_tokens":["有点","树莓","计算机","将","比较","原本","挺","派里","过","。","由","于是","传输"," ","我们","适合","分布式系统","压力","到","布式","有","主要","更强","可能","这","配置","运行","采用","远程","笔记本电脑","机器人","分布式","这种","控制器","就","中","派","相互","不过","小","此外","款","一","驱动","和","平台","功能","性能","毕竟","不同","都","接下来","在","数据","传感器","各种","还","放","变化","组成","视觉","看上去","？","监控","的","笔记本","计算","可以","也","做","资源","信息","电脑","另外","节点","算机","应用","只","环境","上去","任何","看上","电机","处理","任务","通信","不","多","了","传感","方便","作为","好","两个","之一","每","分布","设计","位于","放在","下","ros","复杂","分配","控制","框架","就是","已经","为","这些","并且","起来","非常","笔记","比如","之前","需要","感器","魅力","等","减轻","实现","一个","结构","上","带领","开发","系统","之间","典型","叫","感受","较","运动","，","下来","大家","接下","机器","什么","讲","体积","消耗","是","上边","完全"],"title":"分布式通信","title_tokens":["通信","分布","布式","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_3","text":"除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。","text_tokens":["笔记","树莓","放置","平台","在","模拟","了","。","我们","一个","使用","上","的","除了","笔记本","计算","，","笔记本电脑","机器人","控制器","派","控制","我","选择","机器","电脑","另外","之外"],"title":"分布式网络搭建","title_tokens":["搭建","网络","分布","布式","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_4","text":"在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。","text_tokens":["树莓","参考","之前","都","需要","网上","先","在","。","我们","好","有","的","开发","很多","配置","，","可以","也","大家","派","资料","环境"],"title":"树莓派配置","title_tokens":["配置","树莓","派"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_5","text":"我们先要给树莓派装系统，这里我们选择的是Ubuntu Mate针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/","text_tokens":["树莓","针对","org","之后","https","了","。","：","给"," ",":","启动","-","我们","下载","到","烧写","的","系统","/","mate","ubuntu","这里","，","镜像","可以","就","派装","派","链接","选择","sd","卡中","是",".","download","先要"],"title":"装系统","title_tokens":["系统","装"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#ros2","text":"在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。","text_tokens":["的"," ","和","流程","系统","中","mate","好","ros2","电脑","ubuntu","端","在","安装","，","。","一样"],"title":"装ROS2","title_tokens":["ros2","装"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_6","text":"将我们课程的代码也下载到树莓派中，进行编译。","text_tokens":["的","代码","树莓","中","我们","派","进行","将","课程","。","下载","，","到","编译","也"],"title":"编译代码","title_tokens":["代码","编译"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_7","text":"如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728","text_tokens":["操作","流程","和","如下","树莓","参考","csdn","_","122599728","端","在","不","https","如果","了","。","方便","："," ",":","通过","基本","好","net","鼠标","访问","桌面","网络","连接","上","直接","使用","的话","有","的","系统","/","52785580","blog","配置","远程","，","可以","远程桌面","键盘","也","步骤","大家","显示","就","整体","一致","details","派","链接","电脑","基本一致","article",".","显示器","以上","qq"],"title":"远程桌面","title_tokens":["远程","桌面","远程桌面"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_8","text":"树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 * 如使用虚拟机，请将虚拟机网络修改为桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。","text_tokens":["_","树莓","计算机","将","端","。","互联"," ","我们","网络","并","虚拟机","桥接","无法","使用","到","话题","神奇","、","希望","很多","完成","测试","动作","配置","这","像","派端","分组","事情","打通","就","中","派","而言","不过","这样","里","带来","中有","和","平台","都","接下来","在","如果","：","nodes","后","pc","demo","具体","？","的","一下","问题","计算","个","同一个","可以","也","做","py","电脑","用","节点","算机","而是","一样","如","如下","run","你","通信","效果","不","模式","安装","了","小组","请","启动","talker","处于","好","两个","服务","连接","直接","他们","讲过","所","*","命令","$","者","发布","虚拟","互通","ros2","已经","为","并且","修改","感觉","之前","需要","listener","呢","等","能力","确保","实现","一个","只要","#","局域网络","之间","命令行","同一","发生","，","发布者","cpp","下来","订阅","接下","会","什么","局域网","是","局域","简而言之"],"title":"分布式数据传输","title_tokens":["传输","据传","数据传输","分布","布式","数据","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_9","text":"没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。","text_tokens":["=","才能","和","_","树莓","则","机制","计算机","export","没","不同","通信","将","在","如果","了","：","。","小组","domain","端的"," ","我们","处于","提供","实现","一个","无法",">","到","的","问题","计算","your","配置","<","同一","两者","分组","同一个","，","可以","id","ros","就","类似","中","派","分配","加入","ros2","bashrc","电脑","这样","算机",".","一句","一样","即可"],"title":"分布式网络分组","title_tokens":["网络","分布","分组","布式","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_10","text":"分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动。 $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端","text_tokens":["想","海龟","_","小海","树莓","过来","之前","run","node","通信","似乎","先","端","在","依然","真器","是否","继续","了","过","。","仿真","反过来","teleop"," ","启动","我们","学习","—","仿真器","经典","或者","流畅","pc","网络","分布","上","#","turtle","这么","布式","的","神奇","成功","key","真有","小海龟","测试","反过","例程","$","turtlesim","运动","派端","，","可以","键盘","分布式","ros","也","中","派","控制","ros2","试试","一些","电脑","节点","已经","建立","案例","来"],"title":"案例一：小海龟分布式控制","title_tokens":["海龟","小海","控制","布式","小海龟","分布","一","案例","：","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_11","text":"我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串。 $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端","text_tokens":["任何","情况","树莓","_","run","之前","通信","先","端","在","不","是否","。","呢","代码"," ","作为","hello","我们","编写","pc","使用","直接","#","？","话题","的","字符","world","helloworld","字符串","例程","$","pub","派端","，","下","可以","发布","发布者","者","订阅","learning","topic","派","ros2","试试","电脑","sub","修改"],"title":"案例二：话题分布式通信","title_tokens":["案例","二","通信","分布","：","布式","话题","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_12","text":"话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能。","text_tokens":["树莓","功能","端","。"," ","我们","程序","求和","不在","实现","服务","客户端程序","顺利","加法","话题","问题","没有","运行","务器","服务器程序","服务器","派端","，","客户","还是","可以","顺利实现","也","不在话下","电脑","客户端"],"title":"案例三：服务分布式通信","title_tokens":["案例","布式","通信","服务","分布","：","三","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_13","text":"以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体。 $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。","text_tokens":["_","树莓","没","将","端","模拟","。"," ","我们","网络","使用","布式","没有","识别","摄像头","一切","测试","安排","配置","小型","红色","派端","一系列","机器人","分布式","类似","中","派","sub","功能","都","接下来","在","几乎","再","轻松","还","pc","视觉","摄像","？","的","问题","图像","变得","例程","可以","也","方法","learning","做","电脑","节点","任何","实时","处理","run","node","不","发给","了","端的","通过","提供","好","分布","频繁","连接","一系","$","ros","复杂","topic","ros2","exe","支持","为","usb","这些","友好","修改","非常","然后","需要","物体","cam","代码","如此","webcam","一个","啦","上","只要","#","开发","系统","搭建","采集","，","像头","下来","用到","接下","会","机器","不够","系列","实际","以上"],"title":"案例四：机器视觉分布式应用","title_tokens":["四","机器","布式","应用","分布","视觉","案例","：","分布式应用","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_14","text":"https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["domain",":","en","-","/","concepts","org","humble","html","about",".","https","docs","id","ros"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2_%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/","text":"从本节开始，我们将进入第二个篇章，以ROS2的核心概念为线索，详细讲解ROS2的应用开发方法。","text_tokens":["线索","开发方法","将","以","。","讲解","我们","篇章","核心","第二","本节","从本节","第二个","的","开发","开始","详细","，","二个","概念","方法","进入","ros2","应用","为"],"title":"2 核心概念","title_tokens":[" ","2","概念","核心"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/","text":"Launch：多节点启动与配置脚本 到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是Launch启动文件。 它是ROS系统中多节点启动与配置的一种脚本。 Launch文件 这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。 多节点启动 运行效果 文件解析 learning_launch/simple.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'learning_topic' , executable = 'topic_helloworld_pub' , ), Node ( package = 'learning_topic' , executable = 'topic_helloworld_sub' , ), ]) 命令行参数配置 运行效果 文件解析 learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): rviz_config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ Node ( package = 'rviz2' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' , rviz_config ] ) ]) 资源重映射 运行效果 文件解析 learning_launch/remapping.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , namespace = 'turtlesim2' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , executable = 'mimic' , name = 'mimic' , remappings = [ ( '/input/pose' , '/turtlesim1/turtle1/pose' ), ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), ] ) ]) ROS参数设置 运行效果 文件解析 learning_launch/parameters.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node def generate_launch_description (): background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) ) return LaunchDescription ([ background_r_launch_arg , background_g_launch_arg , background_b_launch_arg , Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [{ 'background_r' : LaunchConfiguration ( 'background_r' ), 'background_g' : LaunchConfiguration ( 'background_g' ), 'background_b' : LaunchConfiguration ( 'background_b' ), }] ), ]) learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , namespace = 'turtlesim2' , name = 'sim' , parameters = [ config ] ) ]) Launch文件包含 运行效果 文件解析 learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction from launch_ros.actions import PushRosNamespace def generate_launch_description (): parameter_yaml = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ parameter_yaml_with_namespace ]) learning_launch/parameters_nonamespace.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [ config ] ) ]) 功能包编译配置 ... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ... 参考链接 https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docsros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["_","参考","答案","'","...","https","当然","。"," ","没错","package","我们","核心","或者","自由","多样化","import","actions","完整","textsubstitution","humble","arguments","使用","文件","name","turtlesim2","docs","到","出现","for","from","data","rviz2","参数","turtlesim1","没有","directory","turtle1","很多","编程","模版","配置","运行","重","description","vel","像","一系列","docsros","机器人","d","就","类似","packages","中","进行","output","executable","这样","parameter","过程","b","get","def","includelaunchdescription","sub","来","麻烦","launch","(","和","en","每次","功能","都","在","目的","：","pythonlaunchdescriptionsource","为止","declarelaunchargument","各种","-","还","丰富","remapping","参数设置","它","files","编写","cmd","os","projects","看上去","输入","？","的","nonamespace","/","with","基于","g","例程","[","parameters","r","可以","也","sim","learning","资源","resource",")","py","config","链接","节点","方式","share","background","上去","一样","generate","相当","main","看上","了解","呀","node","]","效果","}","那","ament","多","了","join","rviz","启动","通过","simple","xml","pose","好","index","描述","turtle","large","前为","粘合","目前","一系","input","一次性","*","组装","解析","命令","tutorials","using","一种","中多","之高","turtlesim","return","多样","ros","大大","arg","这是","topic","合剂","ros2","设置","就是","{","包","乍","所有","remappings","+","每当","default","映射","=","122","阅读","namespaces","需要","org","好像","粘合剂","python","原有","呢","launchdescription","代码",":",",","sources","一个","各个","目前为止","打开","substitutions","yaml","groupaction","pushrosnamespace","glob","带领","0","终端","系统","helloworld","有没有","命令行","pub","新","一次","，","与","namespace","大家","肯定","甚至","mimic","value","text","脚本","机器","如何","系列","html","包含",".","launchconfiguration","是","频次","path","编译","84"],"title":"**Launch：多节点启动与配置脚本**","title_tokens":["启动","脚本","*","节点","配置","多","：","launch","与"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch","text":"到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是Launch启动文件。 它是ROS系统中多节点启动与配置的一种脚本。","text_tokens":["每次","呀","都","需要","答案","那","当然","。","呢","为止"," ","启动","我们","好","它","一个","目前为止","打开","文件","到","前为","？","目前","的","终端","系统","没有","一次性","有没有","很多","命令","配置","运行","一种","中多","新","一次","，","launch","可以","ros","机器人","与","肯定","中","脚本","机器","这样","就是","节点","方式","是","所有","每当","麻烦"],"title":"Launch：多节点启动与配置脚本","title_tokens":["启动","脚本","节点","配置","多","：","launch","与"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_1","text":"这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。","text_tokens":["。","没错"," ","我们","核心","或者","自由","多样化","完整","使用","文件","出现","参数","很多","编程","模版","配置","像","一系列","就","类似","中","进行","这样","过程","来","launch","和","功能","在","目的","各种","还","丰富","它","编写","看上去","输入","的","基于","例程","可以","也","节点","一样","上去","相当","看上","了解","呀","那","了","启动","通过","描述","粘合","一系","组装","命令","之高","多样","ros","大大","这是","ros2","就是","乍","阅读","好像","粘合剂","python","原有","呢","代码","频次","一个","各个","带领","系统","命令行","，","大家","甚至","如何","系列","是","合剂"],"title":"Launch文件","title_tokens":["launch","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_1","text":"","text_tokens":[],"title":"多节点启动","title_tokens":["多","节点","启动"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_2","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_3","text":"learning_launch/simple.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'learning_topic' , executable = 'topic_helloworld_pub' , ), Node ( package = 'learning_topic' , executable = 'topic_helloworld_sub' , ), ])","text_tokens":["generate","=","_","node","'","]","launchdescription"," ",":","package","simple",",","actions","import","from","helloworld","/","[","description","pub","return","launch","ros","learning","topic",")","py","executable",".","def","sub","("],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_4","text":"","text_tokens":[],"title":"命令行参数配置","title_tokens":["配置","参数","命令行","命令"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_5","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_6","text":"learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): rviz_config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ Node ( package = 'rviz2' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' , rviz_config ] ) ])","text_tokens":["generate","=","_","node","'","]","ament","python","launchdescription","join"," ","rviz","package",":","-",",","actions","index","import","os","arguments","turtle","name","from","rviz2","/","directory","[","description","return","ros","d","learning","packages",")","py","(","config","executable",".","share","get","def","path","launch"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_7","text":"","text_tokens":[],"title":"资源重映射","title_tokens":["重","资源","映射"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_8","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_9","text":"learning_launch/remapping.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , namespace = 'turtlesim2' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , executable = 'mimic' , name = 'mimic' , remappings = [ ( '/input/pose' , '/turtlesim1/turtle1/pose' ), ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), ] ) ])","text_tokens":["generate","=","_","node","'","]","launchdescription"," ",":","package","remapping","pose",",","actions","import","cmd","name","turtlesim2","from","turtlesim1","input","/","turtle1","[","description","turtlesim","return","vel","launch","ros","namespace","sim","learning","mimic",")","output","py","executable",".","def","remappings","("],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#ros","text":"","text_tokens":[],"title":"ROS参数设置","title_tokens":["参数","参数设置","设置","ros"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_10","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_11","text":"learning_launch/parameters.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node def generate_launch_description (): background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) ) return LaunchDescription ([ background_r_launch_arg , background_g_launch_arg , background_b_launch_arg , Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [{ 'background_r' : LaunchConfiguration ( 'background_r' ), 'background_g' : LaunchConfiguration ( 'background_g' ), 'background_b' : LaunchConfiguration ( 'background_b' ), }] ), ]) learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , namespace = 'turtlesim2' , name = 'sim' , parameters = [ config ] ) ])","text_tokens":["generate","=","122","_","node","'","]","}","ament","python","launchdescription","join","declarelaunchargument"," ",":","package",",","actions","textsubstitution","index","import","yaml","substitutions","os","name","turtlesim2","from","0","/","directory","g","[","description","turtlesim","parameters","r","return","path","ros","sim","namespace","learning","arg","text","value","packages",")","py","(","executable","{","config",".","launchconfiguration","background","def","b","get","share","default","launch","84"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_2","text":"","text_tokens":[],"title":"Launch文件包含","title_tokens":["包含","launch","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_12","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_13","text":"learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction from launch_ros.actions import PushRosNamespace def generate_launch_description (): parameter_yaml = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ parameter_yaml_with_namespace ]) learning_launch/parameters_nonamespace.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [ config ] ) ])","text_tokens":["generate","=","_","namespaces","node","'","]","ament","python","launchdescription","pythonlaunchdescriptionsource","join"," ","package",":","sources",",","actions","index","import","yaml","os","groupaction","pushrosnamespace","turtlesim2","name","from","nonamespace","/","with","directory","[","description","turtlesim","parameters","return","ros","namespace","sim","learning","packages",")","py","(","config","executable","parameter",".","share","get","includelaunchdescription","def","path","launch"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_14","text":"... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ...","text_tokens":["=","_","'","]","...","ament","join"," ","package","rviz","xml",",","files","index","os","name","glob","data","/","*","[","launch","packages","resource",")","py","config","share",".","+","path","("],"title":"功能包编译配置","title_tokens":["编译","配置","功能","包"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docsros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["main","en","org","https"," ",":","-","humble","projects","for","docs","large","/","using","tutorials","docsros","ros","ros2","html",".","launch"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/","text":"TF：机器人坐标系管理神器 坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器——TF。 机器人中的坐标系 机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做基坐标系Base Frame，机器人安装位置在外部环境下的参考系叫做世界坐标系World Frame，机器人末端夹爪的位置叫做工具坐标系，外部被操作物体的位置叫做工件坐标系，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是基坐标系Base Link，雷达所在的位置叫做雷达坐标系laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做里程计坐标系odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做地图坐标系map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为平移和旋转两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实向量的数学描述。 ROS中TF功能的底层原理，其实就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。 TF命令行操作 ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。 小海龟跟随例程 这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 查看TF树 $ ros2 run tf2_tools view_frames 查询坐标变换信息 $ ros2 run tf2_ros tf2_echo turtle2 turtle1 坐标系可视化 $ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。 静态TF广播 我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为静态TF变换，我们来看看在程序中该如何实现？ 运行效果 $ ros2 run learning_tf static_tf_broadcaster 代码解析 learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？ TF监听 我们再来学习下如何查询两个坐标系之间的位置关系。 运行效果 $ ros2 run learning_tf tf_listener 代码解析 learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。 海龟跟随功能解析 运行效果 $ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 原理解析 在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？这两个向量我们可以根据海龟的位置话题计算出来，那这个位置向量不就容易得到了么。 我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心是这个向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。 Launch文件解析 learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ]) 坐标系动态广播 learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 海龟跟随 learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":["有点","_","至关","姿态","async","map","none","source","y","the","scripts","绝对","ex","试一试","便于","欧拉角","使用","可视化","到","向量","主要","没有","很多","存储","translation","turtlename","配置","运行","0.0","理论知识","缓冲区","d","result","矩阵","executable","rate","让","试试","install","应该","def","坐标","入口","先","在","如果","转变","send","数据","底盘","tflistener","方向","程序","roll","demo","cmd","bin","的","很","抓取","查询","当前","--","例程","frames","__","所在","child","房子","距离","python3","sim","做","信息","用","叫做","节点","环境","1.0","内","base","run","node","回调","之后","}","跟随","teleop","给","rviz","启动","参考系","atan2","好","又会有","destroy","8","漂移","转变成","turtlesim","位","time","house","管理系统","{","points","shutdown","说","math","按照","误差","海龟","神器","居","情况","frame",".__","需要","scale","物体","python","慢慢","时候","产生","tools",",","finished","销毁","打开","只要","计算出来","良好","选项","系统","2","末端","中该","发生","spawn","transformlistener","容易","statictransformbroadcaster","缓冲","angular",".","不是","编译","位置","原理","管理","动机","10.0","依然","标志","。","讲解","geometry","仿真","spin","又","publisher","时刻","import","humble","文件","变得复杂","w","话题","高中","发生变化","ready","sendtransform","description","简单","消息","pitch","机器人","这种","作用","srv","周期","源","挑战","关闭","get","里程计","小海","看似","en","clock","logger","底层","call","数值","entry","再","其中","sqrt","（","后","一只","着急","一本","平移","turtle2","init","优先","获取","成功","key","/","broadcaster","四乘","详细","[","表示","动态","得","内容","一起","pos","否则","方法","tf","激光雷达","工件","header","try","broadcaster2","following","main","退出","处理","turtletfbroadcaster","string","继续","了","段","名","on","通过","@","拆","pose","提供","to","外部环境","算出","该","world","保持","tutorials","return","转换","transformation","准备就绪","could","sudo","怎样","进入","spawned","ros2","link","全局","这些","要","四元","不断","except","5","listener","随便","称之为","出","某","保存","分解","现在","view","实现","参数值","%","发送","格外","初始化","解决","0","之间","is","务器","运动","，","器类","与","value","stamp","你家","env","基础","trans","客户端","固定","移动","所以","twist","查看","quat","'","名称","spawning","熟悉","https","人学","跟随运动","可视","指令","package","线速度","我们","连线","呗","关于","加","失败","theta","docs","from","、","参数","turtle1","小海龟","完成","spawner","两者","x","管理系","args","动","客户","msgs","对象","中","进行","super","这样","parameter","是不是","过程","if","坐标系","器","初始","来","odom","launch","和","successfully","功能","臂","重要","最为","常见","pkg","中心","declarelaunchargument","得到","quaternion","static","apt","默认值","具体","com","？","就绪","rel","部分","statictfbroadcaster","true","外部","定义","清楚","parameters","forward","f","角速度","\"","四","xy","库","目标","古月","turtlefollowing","4","了解","创建","世界","transformations","如下","linear","旋转","]","时","效果","等待","!","as","出来","想起","仿真器","两个","每","yaw","服务",">","相应","5.0","lookup","准备","*","解析","命令","speed","看","服务器","广播","下","者","ros","broadcaster1","控制","生成","包","设置","timer","为","监听器","q","还会","+","callback","这个","角度","自动","起来","看看","=","request","及时","然后","范围","www","报告","不变","两只","euler","真器","是否","呢","代码","关系",":","基本","变换","—","静态","info","usr","substitutions","累积","#","done","怎么样","么","变成","命令行","长度","class","教材","三个","概念","哪个","大家","两者之间","会","根据","如何","一些","生变","html","launchconfiguration","是","其实","transformbroadcaster","中心点","操作","参考","没","接口","将","示例","父类"," ","client","self","核心","学习","actions","完整","机械","并","name","else","哪些","显得","guyuehome","有","左边","create","rviz2","函数","laser","封装","这","vel","树","transform","夹","爪","就","加入","transformstamped","3","中间","请求","now","(","提示","雷达","戳","console","都","算法","：","）","理解","经过","-","背后","还","msg","编写","监听","变化","coding","相对","工具","箭头","false","一层","基于","至关重要","计算","变得","可以","也","learning","知识","被","py",")","之为","说明","1","declare","另外","更新","publish","share","链接","地图","形态","一样","同理","generate","z","移动机器人","rotation","float","echo","默认","不","那","安装","意思","tf2","有所","描述","turtle","setup","空间","机器人学","not","$","一种","不会","中画","s","id","发布","复杂","速度","定时","subscription","就是","已经","包括","default","rclpy","非常","比如","作者","org","不要","transformexception","里程","launchdescription","数","service","一个","知道","buffer","啦","上","存在","激光","欧拉","异常","基","向","对","prefix","定时器","订阅","怎么","循环","点","机器","数学","类","utf","时间","target","理论","案例"],"title":"**TF：机器人坐标系管理神器**","title_tokens":["神器","tf","机器","*","坐标","管理","坐标系","：","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf","text":"坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器——TF。","text_tokens":["非常","神器","位置","坐标","管理","熟悉","重要","在","人学","了","。","给","关系"," ","我们","—","提供","一个","完整","存在","？","的","系统","之间","该","很多","机器人学","，","概念","机器人","也","ros","中","tf","会","机器","基础","如何","坐标系","是","这些"],"title":"TF：机器人坐标系管理神器","title_tokens":["神器","tf","机器","坐标","管理","坐标系","：","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_1","text":"机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做基坐标系Base Frame，机器人安装位置在外部环境下的参考系叫做世界坐标系World Frame，机器人末端夹爪的位置叫做工具坐标系，外部被操作物体的位置叫做工件坐标系，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是基坐标系Base Link，雷达所在的位置叫做雷达坐标系laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做里程计坐标系odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做地图坐标系map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为平移和旋转两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实向量的数学描述。 ROS中TF功能的底层原理，其实就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。","text_tokens":["操作","至关","位置","参考","原理","map","管理","动机","人学","。","讲解"," ","绝对","我们","关于","机械","使用","变得复杂","哪些","显得","有","向量","主要","laser","封装","简单","两者","管理系","理论知识","夹","机器人","爪","就","中","进行","矩阵","过程","坐标系","里程计","odom","和","雷达","看似","功能","都","坐标","底层","臂","重要","在","中心","变化","一本","相对","？","平移","的","工具","部分","抓取","一层","四乘","至关重要","外部","变得","详细","所在","可以","也","方法","tf","工件","被","四","知识","叫做","环境","地图","一样","形态","移动机器人","内","世界","base","旋转","那","安装","了","跟随","通过","参考系","两个","每","描述","又会有","漂移","外部环境","world","空间","机器人学","中画","下","ros","复杂","管理系统","就是","link","为","这些","这个","要","误差","比如","frame","不断","范围","出","物体","呢","里程","关系","基本","变换","分解","一个","格外","累积","良好","系统","之间","末端","基","对","教材","，","大家","两者之间","会","机器","数学","一些","固定","移动","是","其实","理论","中心点"],"title":"机器人中的坐标系","title_tokens":["的","中","机器","坐标","坐标系","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_1","text":"ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。","text_tokens":["海龟","了解","小海","坐标","先","示例","两只","算法","跟随","呢","。","通过","我们","使用","？","的","该","基于","小海龟","一种","，","下","ros","机器人","tf","中","机器","如何","坐标系"],"title":"TF命令行操作","title_tokens":["操作","命令行","tf","命令"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_2","text":"这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key","text_tokens":["海龟","_","小海","然后","run","功能","需要","先","示例","之后","效果","其中","跟随运动","安装","跟随","。","teleop"," ","通过","启动","-","tf2","我们","tools","试一试","一个","一只","humble","demo","apt","文件","turtle","相应","具体","？","的","key","小海龟","$","运行","来","turtlesim","运动","，","可以","ros","就","sudo","控制","会","py","包","ros2","如何","另外","install",".","这个","自动","launch"],"title":"小海龟跟随例程","title_tokens":["海龟","小海","小海龟","例程","跟随"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_2","text":"$ ros2 run tf2_tools view_frames","text_tokens":[" ","_","tf2","run","tools","ros2","view","$","frames"],"title":"查看TF树","title_tokens":["树","tf","查看"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_3","text":"$ ros2 run tf2_ros tf2_echo turtle2 turtle1","text_tokens":[" ","_","tf2","run","echo","turtle1","ros2","$","turtle2","ros"],"title":"查询坐标变换信息","title_tokens":["坐标","查询","变换","信息"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_4","text":"$ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。","text_tokens":["海龟","有点","_","了解","小海","原理","run","先","不要","pkg","跟随","呢","。","慢慢"," ","rviz","理解","-","tf2","意思","背后","我们","便于","使用","着急","turtle","？","的","rviz2","/","--","小海龟","这","$","prefix","，","下","d","大家","方法","怎样","tf",")","py","ros2","share",".","是","案例","来","("],"title":"坐标系可视化","title_tokens":["可视","可视化","坐标系","坐标"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_3","text":"我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为静态TF变换，我们来看看在程序中该如何实现？","text_tokens":["看看","和","雷达","情况","位置","比如","坐标","管理","称之为","之后","最为","不","那","在","常见","安装","。"," ","底盘","关系","基本","变换","我们","拆","静态","程序","呗","好","一个","实现","变化","只要","相对","？","的","主要","系统","很","激光","之间","发生变化","中该","对","简单","发生","不会","，","房子","哪个","机器人","就","也","这种","作用","tf","进行","中","激光雷达","之为","你家","机器","试试","说","生变","如何","坐标系","应该","是","这个","来"],"title":"静态TF广播","title_tokens":["静态","广播","tf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_5","text":"$ ros2 run learning_tf static_tf_broadcaster","text_tokens":[" ","learning","_","tf","run","broadcaster","ros2","static","$"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_6","text":"learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？","text_tokens":["_","quat","位置","'","接口","10.0","示例","将","none","y","geometry","父类","spin"," ","scripts","又","self","我们","欧拉角","import","并","使用","文件","name","到","w","guyuehome","from","、","translation","完成","这","sendtransform","配置","0.0","消息","pitch","transform","x","args","msgs","对象","super","中","进行","加入","transformstamped","让","源","3","坐标系","get","def","器","初始","now","(","戳","clock","console","功能","坐标","入口","entry","：","）","经过","-","msg","程序","quaternion","static","（","roll","后","编写","变化","coding","bin","com","init","平移","？","的","查询","statictfbroadcaster","/","broadcaster","清楚","__","[","child","python3","learning","\"","tf",")","说明","py","1","库","节点","目标","古月","z","main","rotation","退出","创建","transformations","如下","旋转","node","]","}","等待","!","段","了","@","tf2","to","两个","yaw","描述","destroy","5.0","8","setup","world","该","*","保持","广播","id","转换","ros","house","ros2","设置","shutdown","包","points","{","为","四元","rclpy","=","居","作者","www","frame","不变","需要","python","euler","呢","代码","数",":","关系","时候","变换",",","静态","一个","销毁","知道","usr","打开","#","初始化","0","选项","2","系统","欧拉","向","class","，","器类","循环","statictransformbroadcaster","stamp","点","env","类","如何",".","utf","时间","是","header","编译"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_4","text":"我们再来学习下如何查询两个坐标系之间的位置关系。","text_tokens":["的","关系","查询","之间","我们","位置","学习","坐标","两个","如何","坐标系","再","。","下","来"],"title":"TF监听","title_tokens":["监听","tf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_7","text":"$ ros2 run learning_tf tf_listener","text_tokens":[" ","learning","_","tf","run","ros2","listener","$"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_8","text":"learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。","text_tokens":["_","quat","位置","姿态","'","接口","示例","source","none","y","。","父类","spin"," ","scripts","self","我们","ex","时刻","import","并","使用","失败","name","文件","到","w","guyuehome","左边","create","from","参数","存储","translation","完成","配置","transform","x","args","缓冲区","对象","super","进行","加入","周期","parameter","源","让","挑战","坐标系","关闭","get","def","初始","now","(","logger","console","功能","坐标","数值","入口","entry","如果","：","）","tflistener","-","程序","quaternion","（","后","编写","监听","static","coding","bin","默认值","com","init","优先","的","获取","/","当前","--","broadcaster","外部","__","[","pos","python3","否则","f","learning","\"","tf",")","说明","py","try","declare","信息","用","1","库","节点","目标","古月","1.0","z","main","rotation","退出","创建","transformations","如下","处理","了解","node","]","默认","}","等待","!","string","as","了","继续","跟随","名","on","@","tf2","to","有所","好","两个",">","lookup","destroy","8","setup","world","*","not","return","s","time","ros","could","进入","house","定时","ros2","设置","{","shutdown","包","timer","监听器","points","四元","rclpy","=","海龟","居","作者","www","frame","except","报告","需要","listener","两只","某","python","保存","euler","transformexception","代码","数",":","基本","变换",",","现在","参数值","一个","%","销毁","info","usr","buffer","知道","打开","#","啦","初始化","0","选项","系统","之间","2","异常","对","class","，","定时器","transformlistener","大家","循环","value","点","缓冲","env","trans","类","固定",".","utf","时间","target","案例","编译"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_9","text":"","text_tokens":[],"title":"海龟跟随功能解析","title_tokens":["海龟","跟随","功能","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_10","text":"$ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key","text_tokens":[" ","learning","_","tf","key","run","py","ros2","following","$","demo",".","turtlesim","turtle","launch","teleop"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_11","text":"在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？这两个向量我们可以根据海龟的位置话题计算出来，那这个位置向量不就容易得到了么。 我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心是这个向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。","text_tokens":["位置","参考","仿真","。"," ","我们","核心","学习","连线","加","话题","有","向量","高中","封装","turtle1","这","两者","动","就","中","这样","是不是","周期","坐标系","中间","和","坐标","在","再","中心","方向","得到","监听","相对","turtle2","？","的","箭头","很","计算","定义","例程","表示","动态","得","一起","距离","可以","也","做","方法","tf","1","用","叫做","同理","时","不","那","了","出来","跟随","想起","参考系","仿真器","好","两个","描述","算出","world","该","看","广播","下","发布","速度","设置","就是","说","全局","还会","按照","这个","角度","要","起来","海龟","比如","然后","不断","随便","两只","某","真器","代码","变换","实现","一个","上","计算出来","解决","怎么样","2","么","向","长度","三个","运动","，","与","容易","怎么","根据","如何","时间","不是","是","所以","中心点"],"title":"原理解析","title_tokens":["解析","原理"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#launch","text":"learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ])","text_tokens":["generate","=","_","frame","node","'","]","listener","}","launchdescription","declarelaunchargument"," ",":","package",",","actions","import","demo","substitutions","turtle","name","turtle2","from","/","broadcaster","turtle1","turtlename","[","description","turtlesim","return","parameters","ros","sim","learning","broadcaster1","value","tf",")","py","(","executable","{","broadcaster2","following",".","launchconfiguration","def","target","default","launch"],"title":"Launch文件解析","title_tokens":["解析","launch","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_12","text":"learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], },","text_tokens":["_","位置","'","名称","接口","将","示例","none","y","the","geometry","父类","spin"," ","scripts","self","欧拉角","import","并","使用","文件","name","theta","到","w","guyuehome","create","from","、","参数","函数","turtlename","translation","小海龟","完成","sendtransform","配置","0.0","消息","pitch","transform","x","args","msgs","对象","super","中","进行","加入","transformstamped","让","parameter","源","3","坐标系","关闭","get","def","器","初始","now","(","小海","戳","clock","console","功能","坐标","数值","入口","entry","转变","send","：","）","-","msg","程序","quaternion","（","roll","后","编写","static","变化","coding","bin","默认值","com","init","优先","平移","的","获取","/","broadcaster","外部","__","[","动态","child","python3","否则","f","learning","\"","tf",")","说明","py","declare","1","用","更新","库","节点","信息","目标","古月","z","main","rotation","退出","创建","transformations","如下","处理","旋转","node","]","默认","回调","}","等待","turtletfbroadcaster","!","string","@","tf2","pose","to","yaw","turtle","destroy","8","setup","world","*","转变成","turtlesim","广播","者","id","转换","ros","transformation","ros2","设置","subscription","{","shutdown","包","为","q","points","callback","四元","rclpy","海龟","=","居","及时","作者","www","frame","需要","listener","python","euler","代码","数",":","变换",",","参数值","一个","销毁","知道","usr","打开","#","初始化","0","选项","2","系统","欧拉","变成","向","class","，","订阅","循环","value","stamp","点","env","类",".","utf","时间","transformbroadcaster","header","编译"],"title":"坐标系动态广播","title_tokens":["广播","坐标系","坐标","动态"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_13","text":"learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], },","text_tokens":["_","位置","姿态","async","没","'","spawning","接口","依然","示例","source","标志","y","none","跟随运动","geometry","父类","指令","spin"," ","scripts","client","self","publisher","线速度","ex","时刻","import","并","使用","失败","name","else","theta","到","文件","guyuehome","左边","create","from","话题","、","参数","没有","turtle1","存储","ready","translation","完成","配置","vel","spawner","消息","transform","x","args","客户","msgs","缓冲区","对象","super","result","进行","加入","srv","rate","周期","parameter","源","if","让","points","坐标系","关闭","get","def","请求","初始","now","(","提示","logger","successfully","console","功能","坐标","call","数值","入口","entry","如果","：","数据","sqrt","-","还","msg","程序","后","static","编写","监听","cmd","变化","coding","bin","默认值","com","init","优先","turtle2","的","就绪","成功","获取","rel","/","true","false","当前","broadcaster","计算","外部","__","表示","[","forward","内容","距离","python3","否则","f","角速度","learning","\"","tf",")","说明","py","try","declare","xy","信息","用","1","following","库","节点","publish","目标","古月","turtlefollowing","z","4","rotation","float","创建","transformations","main","linear","退出","如下","node","]","默认","}","等待","!","string","as","跟随","名","on","通过","@","tf2","atan2","to","服务","turtle","准备","lookup","destroy","8","setup","*","not","speed","turtlesim","return","服务器","位","time","发布","ros","速度","spawned","could","准备就绪","进入","控制","生成","定时","ros2","设置","{","shutdown","包","timer","math","监听器","已经","包括","+","角度","rclpy","request","海龟","=","居","作者","www",".__","frame","except","报告","listener","scale","5","需要","python","保存","transformexception","是否","代码",":","产生","变换",",","service","finished","实现","一个","参数值","发送","info","usr","buffer","销毁","知道","#","打开","初始化","done","0","选项","系统","2","is","异常","务器","class","spawn","运动","，","定时器","transformlistener","循环","value","点","缓冲","angular","根据","env","trans","类","客户端","固定",".","utf","时间","twist","编译","查看"],"title":"海龟跟随","title_tokens":["海龟","跟随"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_14","text":"https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":[":","main","en","tf2","/","-","tutorials","org","humble","html",".","https","docs","ros"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/","text":"URDF：机器人建模方法 ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法——URDF，用来描述机器人外观、性能等各方面属性。 机器人的组成 建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由硬件结构、驱动系统、传感器系统、控制系统四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备，驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等，传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境，控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。 URDF ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是XML格式，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为连杆Link，手肘就类似于机器人电机驱动部分，称为关节joint。 所以在URDF建模过程中，关键任务就是通过这里的 和 ，理清楚每一个连杆和关节的描述信息。 连杆Link的描述 标签用来描述机器人某个刚体部分的外观和物理属性，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。Link里边的 部分用来描述机器人的外观，比如 表示几何形状，里边使用 调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的。 表示坐标系相对初始位置的偏移，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分 ，描述碰撞参数，里边的内容似乎和 一样，也有 和 ，看似相同，其实区别还是比较大的。 部分重在描述机器人看上去的状态，也就是视觉效果， 部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过 来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是 里边 描述的形状。 坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。 关节Joint描述 机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 第一种continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 第二种revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 第三种prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 第四种是fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 第五种Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 既然是运动，就是相对的，parent标签描述父连杆，child标签描述子连杆，子连杆会相对父连杆发生运动。 这里的origin表示两个连杆坐标系之间的关系，也就是这个向量，可以理解为这两个连杆该如何安装到一起。 Axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的。 Limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等，大家注意单位，ROS中关于平移的默认单位都是m，旋转是弧度，不是度，所以这里3.14就表示可以在-180度到180度之间运动，速度也是m/s，或者rad/s。 完整机器人模型 最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。 创建机器人模型 好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。 功能包结构 urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件 查看URDF模型结构 $ urdf_to_graphiz mbot_base.urdf # 在模型文件夹下 模型可视化效果 模型文件解析 learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot> 参考链接 https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":["父","有点","3.14","_","手","第四种","比较","y","此时","robot","由","便于","要求","哪","0.025","使用","front","可视化","到","主要","向量","meshes","0.95","高","重在","配置","sphere","碰撞","一系列","类似","不仅","派","矩阵","让","0.16","性能","坐标","先","在","带有","如果","m","传感器","底盘","方向","revolute","最终","它","roll","组成","摄像","的","件夹","外观","1.5707","child","origin","里边","软件","信息","电脑","叫做","用","应用","环境","质心","1.0","则","或","渲染","base","任务","似乎","之后","以","给","rviz","启动","xml","好","极限","设计","括号","第三","模型","外壳","0.06","桌子","第六","prismatic","有点像","关节","以及","管理系统","算力","按照","称为","之前","0.4","需要","一块","感器","单位","为例","时候","产生","right","planar","自定","用来","三种","统一","left","系统","组成部分","xyz","提前","轮子","这款","back","这里","发生","较","标签","什么","讲","0.05","实际",".","真实","组合","质量","不是","最大","rpy","大","偏移","位置","管理","动机","?","手肘","。","geometry","驱使","humble","graphiz","弧度","文件","自定义","0.18","pitch","fixed","相机","机器人","这种","区别","配置文件","看下","格式","组合而成","驱动","floating","en","看似","右侧","平台","visual","再","其中","全都","0.19","肘关节","着急","轴","平移","沿某","rad","xacro","/","载体","围绕","表示","得","内容","一起","方法","蓝色","唯一","某个","方式","0.20","上去","必须","main","放置","电机","continuous","了","三维","传感","通过","无限","正常","提供","尖括号","limit","to","名字","频繁","网页","检测","文件夹","一系","外部环境","滑动","框","该","180","相对运动","放在","caster","tutorials","类型","电源","version","小臂","形成","link","这些","要","才能","某","保存","joint","二种","等","手臂","分解","装置","结构","第二个","0","之间","第二种","运动","源代码","，","一致","与","固定","等于","移动","尺寸","所以","查看","自身","名称","少","熟悉","感知","https","可视","看到","我们","关于","无法","docs","绿色","这么","惯性","、","参数","为此","摄像头","应用软件","既然","完成","x","管理系","建模语言","第五","第六种","连杆","中","进行","调用","不过","这样","过程","坐标系","rgba","初始","来","launch","和","控制系统","功能","臂","码器","全为","常见","包围","实打实","允许","平面","找","视觉","的话","？","yellow","0.015","部分","局","于","外部","定义","axis","清楚","还是","无论是","为了","\"","type","注意","等等","度","模型简化","两种","相同","而是","正","看上","如下","不能","了解","创建","旋转","板载","时","效果","第一","多","直线","两个","每","语言","他们",">","四大","每个","radius","解析","单位向量","未来","看","柱体","下","ros","控制","状态","包","为","乍","这个","起来","角度","=","相关","呢","black","驱动器","代码","关系",":","方面","—","第二","算作","第一种","一段","第三种","#","颜色","建模","物理","属于","大家","会","如何","碰撞检测","一些","系列","关键","第五种","是","html","其实","操作","parent","urdf","专门","树莓","参考","stl","属性","将","示例","当然","五种","简化"," ","或者","机械","完整","name","存放","哪些","有","编码器","第四","这","material","子","就","先来","硬件","raw","cylinder","全称","雷达","都","：","理解","-","还","圆柱","独立","转关","变化","看上去","相对","市面","计算","认识","可以","也","white","learning","几何","链接","1","介绍","圆柱体","一样","z","移动机器人","理","限制","默认","不","安装","描述","面上","连接","小车","color","最小","在于","一种","$","<","不会","度到","s","wheel","二个","复杂","速度","0.9","旋转关节","把","就是","各","包括","所有","0.095","市面上","比如","大臂","分别","浮动","视觉效果","接触","思路","引用","四种","mbot","org","无论","操作系统","编码","形状","一个","啦","车体","设备","上","清晰","自己","刚体","开发","叫","对","独自","像头","细节","imu","length","机器","肌肉","六种","完全","一般","外界"],"title":"**URDF：机器人建模方法**","title_tokens":["建模","方法","urdf","机器","*","：","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf","text":"ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法——URDF，用来描述机器人外观、性能等各方面属性。","text_tokens":["操作","urdf","专门","之前","性能","属性","在","当然","了","。","呢","等","操作系统","给"," ","还","我们","方面","—","提供","一个","用来","描述","啦","使用","？","的","建模","、","系统","为此","一种","外观","认识","得","，","下","ros","机器人","方法","把","不过","机器","让","如何","各","是","介绍","要"],"title":"URDF：机器人建模方法","title_tokens":["建模","方法","urdf","机器","：","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_1","text":"建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由硬件结构、驱动系统、传感器系统、控制系统四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备，驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等，传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境，控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。","text_tokens":["操作","树莓","管理","动机","熟悉","感知","。","由"," ","看到","驱使","我们","便于","机械","使用","主要","、","参数","编码器","摄像头","应用软件","这","管理系","建模语言","机器人","类似","中","进行","派","硬件","过程","驱动","和","控制系统","雷达","平台","都","臂","先","码器","再","常见","实打实","传感器","底盘","组成","摄像","的","市面","部分","载体","计算","外部","清楚","还是","无论是","可以","里边","软件","等等","电脑","应用","环境","移动机器人","电机","板载","安装","了","传感","通过","正常","描述","语言","面上","每","四大","外壳","电源","以及","控制","把","状态","管理系统","就是","包括","这些","按照","起来","市面上","比如","需要","感器","思路","等","无论","操作系统","驱动器","编码","分解","装置","一个","结构","设备","上","建模","自己","开发","系统","组成部分","，","像头","imu","机器","一些","移动","是","组合","其实","一般"],"title":"机器人的组成","title_tokens":["的","组成","机器","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_1","text":"ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是XML格式，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为连杆Link，手肘就类似于机器人电机驱动部分，称为关节joint。 所以在URDF建模过程中，关键任务就是通过这里的 和 ，理清楚每一个连杆和关节的描述信息。","text_tokens":["urdf","有点","自身","手","属性","手肘","。","由"," ","我们","机械","无法","使用","文件","一系列","机器人","就","类似","连杆","中","不仅","这样","过程","格式","组合而成","驱动","全称","和","右侧","都","臂","在","其中","包围","还","独立","组成","肘关节","看上去","相对","？","的","部分","于","外部","清楚","可以","也","方法","信息","叫做","环境","上去","必须","看上","理","电机","任务","之后","通过","xml","尖括号","描述","每","网页","括号","连接","他们","一系","外部环境","模型","桌子","相对运动","有点像","看","下","ros","关节","小臂","就是","link","乍","这些","这个","称为","才能","比如","大臂","joint","呢","手臂","代码","产生","一个","算作","统一","清晰","建模","自己","开发","刚体","这里","独自","运动","源代码","，","大家","标签","机器","系列","如何","关键","肌肉","是","组合","所以"],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#link","text":"标签用来描述机器人某个刚体部分的外观和物理属性，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。Link里边的 部分用来描述机器人的外观，比如 表示几何形状，里边使用 调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的。 表示坐标系相对初始位置的偏移，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分 ，描述碰撞参数，里边的内容似乎和 一样，也有 和 ，看似相同，其实区别还是比较大的。 部分重在描述机器人看上去的状态，也就是视觉效果， 部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过 来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是 里边 描述的形状。 坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。","text_tokens":["大","偏移","位置","stl","名称","属性","比较","将","动机","y","。","简化"," ","我们","要求","机械","使用","文件","name","绿色","到","有","惯性","、","参数","自定义","高","重在","碰撞","pitch","x","机器人","就","区别","类似","连杆","中","调用","矩阵","这样","raw","过程","坐标系","初始","来","和","看似","坐标","臂","在","全为","如果","：","方向","圆柱","它","roll","视觉","看上去","的话","相对","平移","的","部分","计算","定义","外观","表示","内容","还是","可以","也","蓝色","几何","为了","里边","软件","某个","模型简化","用","相同","圆柱体","上去","一样","质心","z","移动机器人","如下","看上","则","旋转","似乎","效果","时","不","以","了","三维","通过","好","描述","设计","连接","小车","检测","框","该","模型","未来","二个","柱体","复杂","控制","状态","就是","link","算力","包括","这个","比如","分别","需要","视觉效果","接触","joint","等","为例","时候","形状","第二","自定","一个","用来","算作","车体","上","颜色","第二个","刚体","物理","0","提前","轮子","运动","较","，","一致","与","标签","会","机器","如何","碰撞检测","实际","真实","质量","尺寸","是","其实","移动","外界"],"title":"连杆Link的描述","title_tokens":["的","link","连杆","描述"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#joint","text":"机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 第一种continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 第二种revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 第三种prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 第四种是fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 第五种Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 既然是运动，就是相对的，parent标签描述父连杆，child标签描述子连杆，子连杆会相对父连杆发生运动。 这里的origin表示两个连杆坐标系之间的关系，也就是这个向量，可以理解为这两个连杆该如何安装到一起。 Axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的。 Limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等，大家注意单位，ROS中关于平移的默认单位都是m，旋转是弧度，不是度，所以这里3.14就表示可以在-180度到180度之间运动，速度也是m/s，或者rad/s。","text_tokens":["父","parent","urdf","3.14","位置","第四种","少","比较","此时","五种","。"," ","或者","哪","关于","机械","使用","弧度","到","有","向量","第四","既然","这","fixed","子","相机","第五","机器人","就","这种","区别","第六种","连杆","中","进行","不过","这样","坐标系","和","floating","都","坐标","臂","在","带有","m","理解","允许","-","revolute","方向","最终","转关","平面","变化","轴","相对","沿某","平移","的","rad","/","围绕","axis","表示","内容","child","还是","可以","origin","一起","也","注意","唯一","度","1","两种","方式","而是","z","正","不能","限制","电机","旋转","默认","continuous","之后","第一","不","安装","了","通过","无限","直线","xml","limit","两个","名字","描述","极限","频繁","第三","连接","每","小车","最小","滑动","180","模型","该","相对运动","第六","单位向量","在于","一种","prismatic","不会","度到","s","类型","ros","速度","关节","旋转关节","就是","link","为","这个","角度","要","才能","比如","浮动","四种","某","joint","二种","单位","等","关系","产生","第二","planar","一个","第一种","三种","一段","第三种","上","刚体","属于","之间","轮子","叫","第二种","发生","运动","较","这里","，","大家","标签","会","机器","什么","如何","一些","固定","第五种","等于","是","六种","不是","所以","最大","一般"],"title":"关节Joint描述","title_tokens":["描述","关节","joint"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_2","text":"最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。","text_tokens":["和","urdf","了解","一块","时","先","之后","在","某","不","再","joint","了","。","robot","由","全都","代码"," ","最终","一个","完整","描述","每","找","着急","组成","哪些","的","每个","部分","模型","局","放在","完成","对","看","完全","，","下","机器人","就","大家","标签","中","细节","先来","机器","形成","link","组合","所有","是","所以","这个"],"title":"完整机器人模型","title_tokens":["完整","机器","模型","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_3","text":"好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。","text_tokens":["urdf","移动机器人","动机","示例","以","多","了","。","为例"," ","我们","好","它","一个","完整","啦","这么","的","建模","模型","这款","看","，","还是","一起","机器人","机器","讲","看下","过程","移动","要"],"title":"创建机器人模型","title_tokens":["机器","模型","创建","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_4","text":"urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件","text_tokens":["urdf","相关","或","放置","渲染","引用","保存","："," ","rviz","启动","文件","存放","的","xacro","meshes","模型","配置","机器人","配置文件","中","机器","launch"],"title":"功能包结构","title_tokens":["功能","包","结构"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_2","text":"$ urdf_to_graphiz mbot_base.urdf # 在模型文件夹下","text_tokens":[" ","urdf","_","模型","base","to","件夹","$","graphiz","mbot",".","在","文件","#","下","文件夹"],"title":"查看URDF模型结构","title_tokens":["urdf","模型","结构","查看"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_5","text":"","text_tokens":[],"title":"模型可视化效果","title_tokens":["可视","效果","可视化","模型"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_6","text":"learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot>","text_tokens":["1.0","=","urdf","_","parent","base","0.4","continuous","?","mbot","visual","joint","robot","geometry","black"," ","0.19","-","xml","right","0.025","rgba","name",">","front","color","left","0","yellow","0.015","xyz","0.95","/","0.06","radius","axis","caster","material","0.18","<","sphere","back","wheel","1.5707","origin","child","white","learning","version","\"","type","0.9","length","1","0.05","link",".","0.20","0.095","cylinder","0.16","rpy"],"title":"模型文件解析","title_tokens":["解析","模型","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_7","text":"https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":[":","urdf","main","en","-","/","tutorials","org","humble","html",".","https","docs","ros"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/","text":"Gazebo：三维物理仿真平台 ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台Gazebo，了解一下。 Gazebo仿真平台 介绍 Gazebo是ROS系统中最为常用的三维物理仿真平台，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。 安装 Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-* 运行 通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py 注意：为保证模型顺利加载，请将离线模型文件库下载并放置到~/.gazebo/models路径下， https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。 XACRO机器人模型优化 我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本——XACRO文件。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro 常量定义 一些常用的XACRO文件语法，大家了解下。 标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。 数学计算 如果需要做数学计算，同样是在$加大括号中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 注意：所有数学运算都会转换成浮点数进行，以保证运算精度 宏定义 机器人的轮子我们也做成宏定义，定义方式是通过这个 标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。 文件包含 宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。 机器人仿真模型配置 完善物理参数 第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。 添加Gazebo标签 第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。 配置传动装置 第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。 添加控制器插件 第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。 构建仿真环境 接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ]) 机器人运动仿真 万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard 注意：虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。 Ignition：下一代Gazebo 随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为Ignition，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/ 附录：机器人完整模型 learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["有点","_","针对","want","source","原本","y","the","换成","此时","robot","怎么办","传动装置","use","摩擦力","0.025","使用","front","顺利","到","主要","0.95","没有","可能","很多","公式","配置","运行","0.0","碰撞","sphere","运算","尝试","类似","装上","packages","引擎","不仅","enabled","executable","rate","让","试试","install","def","0.16","不同","先","弹性","在","如果","必备","m","数据","底盘","传感器","想不起来","参数设置","它","传递数据","cmd","os","摄像","官方","的","一下","问题","弹性系数","很","spwan","--","三步","origin","child","动力","sim","做","第一步","里边","信息","用","应用","节点","环境","all","1.0","izz","周边环境","渲染","run","base","node","传递","}","语法","以","实验","only","teleop","给","启动","load","turngravityoff","xml","reference","好","find","设计","括号","第三","加法","当","条件","模型","where","0.06","动力学","torque","火星","常量","有点像","帮助","time","值为","关节","topic","改成","{","支持","camera","两句","海龟","frame","之前","0.4","需要","感器","想不起","python","gazebo","时候","right","考虑","sources",",","http","用来","mechanicalreduction","left","根本","名为","火星车","系统","2","xyz","轮子","items","back","separation","这里","by","spawn","键盘","motor","下来","用到","标签","一步","reflect","图形","0.05",".","质量","不是","rpy","位置","footprint","动机","?","仿真","。","结束","于是","neighborhood","俱备","官方网站","geometry","publisher","时刻","import","humble","虚拟机","文件","出现","inertia","diff","directory","matrix","odometry","0.18","force","description","简单","一行","插件","fixed","acceleration","机器人","这种","控制器","libgazebo","0.2","新一代","格式","b","导致","get","关闭","限飞","our","语句","小海","平台","数值","不多","差不多","课程","实物","再","visual","点数","切分","无人","0.19","entity","ixx","相识","interface","them","不妨","xacro","val","differential","/","高质","模块","vgpu10","actuator","mass","[","这句","得","一起","方法","一代","随着","tf","方式","0.20","交给","万事","放置","电机","上来","continuous","property","第三步","了","三维","传感","diameter","通过","keyboard","优化","pose","blue","提供","to","ixz","we","加速","名字","3.1415926","频繁","升级","几个","该","world","刚好","比","caster","collision","return","转换","保证","version","pi","sudo","分配","3.14159","某些","传动","ros2","link","这些","手边","及","要","不断","5","a","主角","bridge","box","某","joint","宏","等","装置","实现","0.75","似曾","完善","0","colors","is","and","运动","再用","新","，","value","trans","包含","sure","移动","尺寸","所以","一句","twist","附录","跑","名称","'","表面","加大","https","模拟","size","include","iyy","变量","浮点数","package","我们","场景","arguments","for","macro","hardwareinterface","总体","惯性","、","参数","from","ignitionrobotics","xmlns","12","drive","互相","摄像头","编程","完成","小海龟","spawner","像","x","svga","周边","中","调用","进行","不过","这样","是不是","if","过程","结果","github","includelaunchdescription","rgba","来","launch","odom","和","冗余","params","功能","接下来","c语言","最为","velocityjointinterface","pkg","同样","除法","得到","t","找","apt","state","com","single","？","命名","yellow","重复","0.015","true","力学","定义","axis","r","认识一下","为了","\"","type","注意","可编程","important","度","into","库","同时","ixy","见证","去","you","list","4","版本","流程","了解","不能","创建","从","]","你","时","效果","第一","ament","!","多","join","请","仿真器","really","两个","ign","更","每","语言","yaw","gray",">","区分","无人机","每个","this","radius","*","命令","correctly","未来","provided","可编","下","ros","虚拟","第四步","控制","set","包","设置","万事俱备","bashrc","0.001","为","较大","+","这个","起来","角度","filename","wiki","=","相关","然后","www","transmission","models","真器","used","呢","因为","添加","black","代码","关系",":","simpletransmission","基本","确保","—","第二","#","颜色","还要","物理","建模","转换成","c","have","奇迹","么","四步","screen","镜像","大家","更为","接下","demos","会","如何","一些","change","是","以上","parent","urdf","办法","试一下","参考","没","in","属性","将","接口","当然","记得","worlds","---","第二句"," ","actions","完整","并","name","下载","硬件加速","有","放到","函数","一定","第四","测试","这","material","vel","hardware","就","output","加入","硬件","3","plugin","进步","cylinder","(","20","重复使用","inertial","export","摩擦","都","算法","：","pythonlaunchdescriptionsource","为止","下一代","理解","技术","-","还","丰富","精度","高质量","变化","部署","h","相对","输入","文件格式","系数","false","controller","计算","构建","认识","个","me","可以","浮点","离线","也","defining","learning",")","py","1","另外","publish","差速","share","make","so","介绍","一样","尽量","generate","z","移动机器人","很长","echo","数学计算","joints","不","那","安装","嵌套","“","方便","整个","常用","index","第一句","描述","二步","直接","小车","color","人机","max","似曾相识","own","file","$","”","<","不会","wheel","复杂","速度","必要","把","iyz","rgbd","写","就是","已经","所有","ignition","迭代","30","友好","修改","osrf","matter","比如","网站","可","org","mbot","~","launchdescription","be","官方网","路径","流畅","一个","update","啦","上","做成","command","开发","续航","叫","doesn","对","第二步","prefix","像头","怎么","甚至","length","机器","数学","二句","加载","path","化","验证"],"title":"**Gazebo：三维物理仿真平台**","title_tokens":["物理","平台","*","仿真","三维","：","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo","text":"ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台Gazebo，了解一下。","text_tokens":["了解","平台","没","主角","实物","当然","如果","三维","呢","仿真","怎么办","gazebo","。","我们","？","物理","一下","开发","问题","没有","，","ros","机器人","怎么","机器","是","手边"],"title":"Gazebo：三维物理仿真平台","title_tokens":["物理","平台","仿真","三维","：","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_1","text":"","text_tokens":[],"title":"Gazebo仿真平台","title_tokens":["平台","仿真","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_1","text":"Gazebo是ROS系统中最为常用的三维物理仿真平台，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。","text_tokens":["办法","属性","表面","模拟","此时","仿真","。"," ","我们","场景","摩擦力","使用","到","、","没有","可能","测试","运行","周边","机器人","就","类似","中","引擎","不仅","加入","这样","导致","限飞","和","平台","摩擦","都","先","弹性","最为","在","再","实物","算法","不多","差不多","无人","还","高质量","部署","不妨","的","弹性系数","系数","高质","力学","可以","动力","做","用","应用","环境","周边环境","渲染","上来","那","多","了","三维","实验","优化","常用","提供","更","频繁","设计","人机","无人机","动力学","火星","帮助","ros","支持","为","及","要","比如","等","gazebo","实现","一个","物理","开发","火星车","系统","续航","，","机器","图形","是","质量","所以","验证"],"title":"介绍","title_tokens":["介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_2","text":"Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-*","text_tokens":["和","跑","相关","功能","都","先","安装","了","。","呢","：","gazebo","给"," ","通过","-","我们","确保","它","一个","完整","humble","使用","直接","apt","？","不妨","的","一下","系统","互相","*","命令","$","认识","简单","，","可以","认识一下","ros","大家","为了","装上","sudo","中","把","包","这样","如何","install","已经","起来"],"title":"安装","title_tokens":["安装"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_3","text":"通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py 注意：为保证模型顺利加载，请将离线模型文件库下载并放置到~/.gazebo/models路径下， https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。","text_tokens":["_","动机","将","https","记得","仿真","。"," ","我们","并","文件","下载","顺利","到","放到","尝试","机器人","就","中","是不是","试试","github","launch","接下来","课程","在","：","还","它","com","？","的","/","认识","这句","一起","可以","离线","注意","py","库","环境","移动机器人","放置","了","通过","启动","请","设计","模型","该","命令","$","下","ros","保证","控制","把","ros2","为","osrf","之前","models","~","gazebo",":","路径","啦","还要","么","运动","，","下来","大家","接下","机器",".","移动","不是","加载"],"title":"运行","title_tokens":["运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#xacro","text":"我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本——XACRO文件。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro","text_tokens":["urdf","没","接口","动机","此时","。"," ","变量","我们","humble","使用","文件","有","放到","总体","、","函数","没有","可能","摄像头","编程","像","机器人","就","中","调用","加入","让","过程","install","格式","b","重复使用","语句","功能","都","不同","接下来","先","在","如果","：","数据","同样","切分","底盘","传感器","-","还","丰富","传递数据","apt","摄像","的","文件格式","xacro","重复","一下","模块","计算","定义","个","这句","可以","也","做","方法","为了","可编程","介绍","一样","4","版本","很长","移动机器人","不能","创建","放置","传递","你","多","了","安装","传感","给","通过","优化","好","更","描述","设计","升级","直接","小车","条件","每个","模型","命令","$","常量","可编","ros","复杂","sudo","必要","把","写","包","link","要","友好","比如","然后","之前","a","需要","可","感器","宏","gazebo","代码","时候","—","实现","一个","建模","轮子","叫","这里","对","再用","，","像头","下来","大家","甚至","更为","接下","会","机器","一些","包含","移动","是","尺寸","化"],"title":"XACRO机器人模型优化","title_tokens":["xacro","模型","优化","机器","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_4","text":"一些常用的XACRO文件语法，大家了解下。 标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。","text_tokens":["urdf","_","了解","比如","移动机器人","位置","针对","都","需要","动机","加大","在","原本","不","语法","m","安装","了","。","“","数据","方便"," ","时候","通过","底盘","我们","常用","好","一个","用来","找","变化","括号","使用","文件","的","xacro","名为","、","很","模型","轮子","定义","$","常量","”","未来","不会","一行","，","下","可以","机器人","也","大家","值为","pi","就","标签","里边","调用","3.14159","把","中","机器","这样","一些","移动","质量","尺寸","这些","修改"],"title":"常量定义","title_tokens":["常量","定义"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_5","text":"如果需要做数学计算，同样是在$加大括号中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 注意：所有数学运算都会转换成浮点数进行，以保证运算精度","text_tokens":["位置","动机","加大","换成","。"," ","浮点数","我们","有","可能","很多","这","公式","运算","机器人","就","中","进行","加入","结果","来","和","都","数值","在","如果","点数","：","数据","同样","除法","精度","想不起来","得到","相对","的","计算","可以","浮点","做","注意","尽量","移动机器人","数学计算","以","了","通过","两个","括号","直接","加法","模型","$","常量","未来","转换","保证","改成","写","所有","这个","起来","修改","比如","需要","想不起","某","关系","时候","一个","根本","转换成","，","怎么","会","机器","数学","移动","是"],"title":"数学计算","title_tokens":["数学计算","计算","数学"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_6","text":"机器人的轮子我们也做成宏定义，定义方式是通过这个 标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。","text_tokens":["和","比如","位置","a","需要","名称","在","记得","joint","宏","了","。"," ","时候","通过","关系","-","还","我们","参数设置","好","两个","一个","名字","描述","使用","做成","出现","当","输入","几个","的","区分","、","函数","参数","c","模型","轮子","要","刚好","定义","这","这里","像","，","可以","镜像","也","机器人","就","用到","关节","标签","里边","调用","中","把","会","机器","设置","这样","1","一些","同时","方式","包含","b","是","link","两句","这个","一样","来"],"title":"宏定义","title_tokens":["宏","定义"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_7","text":"宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。","text_tokens":["流程","和","然后","接下来","c语言","再","必备","嵌套","宏","了","。","为止","于是","include","仿真","底盘"," ","结束","还","我们","优化","一个","语言","使用","做成","文件","似曾","相识","到","的","函数","参数","模型","很","没有","似曾相识","模块","定义","对","这里","像","得","，","可以","也","机器人","做","这种","下来","中","调用","里边","把","某些","机器","接下","是不是","加入","另外","一些","包含","是","不是","去"],"title":"文件包含","title_tokens":["包含","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_8","text":"","text_tokens":[],"title":"机器人仿真模型配置","title_tokens":["模型","机器","配置","仿真","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_9","text":"第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。","text_tokens":["和","平台","都","需要","属性","第一","仿真","因为","。","gazebo","确保","一个","每","有","物理","惯性","的","参数","一定","碰撞","，","第一步","必要","一步","link","是"],"title":"完善物理参数","title_tokens":["完善","参数","物理"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_2","text":"第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。","text_tokens":["urdf","和","冗余","渲染","不同","在","。","添加","因为","gazebo","第二","一个","每","二步","颜色","主要","的","系统","配置","第二步","得","，","可以","做","为了","标签","中","一步","这样","link","为","是","所以"],"title":"添加Gazebo标签","title_tokens":["添加","标签","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_10","text":"第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。","text_tokens":["电机","joint","第三步","了","仿真","。","给","理解","装置","传动装置","一个","第三","的","三步","配置","运动","，","可以","传动","为","是","要"],"title":"配置传动装置","title_tokens":["传动装置","配置","传动","装置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_11","text":"第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。","text_tokens":["电机","交给","不同","在","那","了","。","添加","gazebo","两个","一个","小车","的","四步","第四","完成","来","插件","，","下","可以","就","控制器","速度","第四步","分配","控制","这样","差速","是","角度","要"],"title":"添加控制器插件","title_tokens":["控制器","添加","插件","控制"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_12","text":"接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ])","text_tokens":["urdf","_","want","'","y","the","worlds","---","。","robot","neighborhood","include"," ","package","publisher","actions","import","use","arguments","name","到","from","directory","force","0.0","description","spawner","x","就","packages","中","enabled","output","executable","if","get","includelaunchdescription","def","(","launch","our","功能","接下来","pkg","pythonlaunchdescriptionsource","-","entity","t","os","state","single","them","的","val","spwan","/","true","[","me","sim","learning",")","py","into","节点","share","make","you","all","generate","z","run","node","]","}","ament","!","了","join","only","load","pose","提供","to","index","we","really","yaw","模型","world","where","own","correctly","file","provided","<","return","time","ros","topic","把","set","{","=","matter","a","需要","mbot","python","launchdescription","gazebo","be",":","考虑","sources",",","一个","#","have","doesn","screen","items","by","spawn","，","下来","用到","接下","如何","sure",".","change","加载","path"],"title":"构建仿真环境","title_tokens":["构建","环境","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_13","text":"万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard 注意：虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。","text_tokens":["urdf","_","有点","此时","第二句","。","仿真","俱备"," ","我们","时刻","虚拟机","硬件加速","很多","小海龟","运行","svga","机器人","中","不过","硬件","过程","关闭","launch","和","小海","export","接下来","：","的","/","vgpu10","learning","\"","注意","py","into","节点","见证","环境","流程","万事","run","echo","时","第一","了","teleop","整个","启动","load","keyboard","第一句","加速",">","命令","比","$","有点像","虚拟","复杂","控制","ros2","万事俱备","就是","bashrc","已经","两句","=","海龟","需要","~","gazebo","基本","第二","0","奇迹","，","键盘","下来","接下","机器",".","二句","以上","一句","twist"],"title":"机器人运动仿真","title_tokens":["仿真","运动","机器","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#ignitiongazebo","text":"随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为Ignition，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/","text_tokens":["和","_","版本","试一下","参考","平台","不断","渲染","从","都","网站","www","org","效果","bridge","在","真器","多","仿真","。","官方网站","gazebo","技术"," ","官方网",":","-","我们","仿真器","流畅","ign","humble","更","变化","上","apt","有","命名","的","不妨","一下","官方","ignitionrobotics","/","$","新","，","可以","也","ros","随着","一代","camera","sudo","大家","demos","py","度","ros2","rgbd","信息","新一代","install","为","较大","进步","迭代","ignition",".","来","launch"],"title":"Ignition：下一代Gazebo","title_tokens":["一代","ignition","：","下一代","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_14","text":"learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["parent","urdf","_","in","footprint","?","source","y","the","size","robot","geometry","include"," ","iyy","0.025","for","name","macro","front","hardwareinterface","12","inertia","xmlns","0.95","drive","diff","matrix","odometry","0.18","material","sphere","vel","fixed","hardware","x","acceleration","libgazebo","0.2","rate","3","plugin","rgba","cylinder","0.16","(","20","odom","inertial","params","visual","velocityjointinterface","m","0.19","-","ixx","cmd","h","interface","xacro","yellow","0.015","differential","/","true","false","--","controller","axis","actuator","mass","r","origin","child","defining","learning","\"","type","tf",")","important","1","publish","0.20","ixy","so","list","1.0","z","izz","base","continuous","joints","}","property","!","diameter","turngravityoff","xml","reference","blue","to","ixz","find","3.1415926","gray",">","color","0.06","this","max","radius","torque","*","caster","collision","$","<","wheel","ros","version","pi","topic","iyz","{","link","0.001","+","30","filename","wiki","=","5","www","transmission","frame","0.4","org","box","mbot","joint","used","simpletransmission","black","gazebo",":","right","http","update","0.75","mechanicalreduction","left","command","0","colors","2","xyz","is","and","back","separation","prefix","motor","value","length","reflect","trans","0.05",".","rpy"],"title":"附录：机器人完整模型","title_tokens":["模型","机器","完整","：","附录","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/","text":"Rviz：三维可视化显示平台 大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾——Rviz，一款三维可视化显示的神器。 Rviz三维可视化平台 机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。 Rviz介绍 一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。 运行方法 $ ros2 run rviz2 rviz2 彩色相机仿真与可视化 摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。 仿真插件配置 关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 主要配置项如下： 标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 标签：加载摄像头仿真插件 运行仿真环境 模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py 图像数据可视化 $ ros2 run rviz2 rviz2 三维相机仿真与可视化 二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。 仿真插件配置 运行仿真环境 $ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py 点云数据可视化 $ ros2 run rviz2 rviz2 激光雷达仿真与可视化 除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。 仿真插件配置 运行仿真环境 $ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py 点云数据可视化 $ ros2 run rviz2 rviz2 Rviz vs Gazebo 好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下，Gazebo是仿真平台，核心功能是创造数据，我们没有机器人或者传感器，它可以帮我们做一个虚拟的，Rviz是可视化平台，核心功能是显示数据，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。 参考链接 https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":["_","价格","人","还有","强调","自由","试一试","使用","可视化","到","主要","没有","希望","很多","配置","运行","类似","试试","玩起","想不到","坐标","各种各样","在","如果","数据","传感器","它","摄像","官方","的","驾驶","问题","kinect","做","软件","信息","用","叫做","环境","渲染","run","分钱","满意","搞定","给","rviz","load","启动","会用","混淆","好","设计","模型","对照","打造","一分钱","巧妇难为无米之炊","快速","体感","大大","camera","按照","并且","神器","一脸","需要","玩起来","感器","重量","分辨","qt","gazebo","时候","用来","不用","只要","一位","巧妇","可贵","自主","这里","过瘾","长","标签","什么","讲","图形",".","开放","不是","真实","提高","位置","啥","动机","。","仿真","一目","话题","消息","插件","相机","stereolabs","机器人","这种","libgazebo","重量级","格式","众多","平台","再","点云","全都","各种","255","能","成功","获取","/","辨率","项","内容","方法","激光雷达","噪音","了","三维","传感","各样","通过","提供","几个","外部环境","拭目","类型","框架","某些","ros2","usb","这些","等","但","手上","装","0","除了","有没有","运动","新","，","大大提高","与","只有","才","移动","intel","所以","懵","一句","熟悉","https","可视","过","看到","我们","彩色","关于","场景","以待","docs","、","参数","摄像头","岂","周边","图形化","效率","中","内部","不过","这样","是不是","过程","坐标系","创造","github","这幅","来","launch","想","realsense","和","功能","臂","最为","层面","不到","具体","的话","？","命名","com","图像","外部","还是","type","数字","等等","into","去","流程","如下","不能","世界","了解","从","你","效果","多","出来","拭目以待","两个","更","vs","什么样","看","问","出厂","下","ros","虚拟","不少","设置","这个","起来","常备","自动","范围","www","呢","添加","价格比","代码",":","自带","—","样","上位","了然","一分","颜色","分辨率","开放式","么","大家","显示","肯定","会","如何","一些","是","导航","眼中","参考","难为","当然"," ","核心","或者","机械","name","哪些","有","rviz2","拍摄","laser","这","很难","就","先来","二维","雷达","规划","都","：","相信","理解","汽车","工具","基于","计算","可以","也","learning","分析","说明","py","只是","链接","so","量级","介绍","本","一款","移动机器人","不","方便","常用","描述","一堆","机","$","话","一种","发布","把","rgbd","涉及","就是","已经","包括","非常","比如","mbot","编码","路径","畅想","一个","帮","知道","嘉宾","啦","上","自己","开发","范畴","激光","对应","对","能够","像头","机器","一目了然","加载","案例","不想"],"title":"**Rviz：三维可视化显示平台**","title_tokens":["rviz","显示","平台","*","可视","可视化","三维","："]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz","text":"大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾——Rviz，一款三维可视化显示的神器。","text_tokens":["一款","神器","眼中","世界","重量","可视","过","了","呢","三维","。"," ","rviz","看到","畅想","我们","—","一个","嘉宾","摄像","可视化","到","一位","？","的","问题","拍摄","没有","什么样","有没有","摄像头","图像","范畴","这","，","能够","机器人","像头","大家","就","显示","ros","中","机器","什么","涉及","讲","如何","重量级","是","量级","介绍","本"],"title":"Rviz：三维可视化显示平台","title_tokens":["rviz","显示","平台","可视","可视化","三维","："]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_1","text":"机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。","text_tokens":["导航","位置","啥","动机","当然","人","可视","。","还有"," ","一目","看到","我们","机械","场景","可视化","到","哪些","、","希望","摄像头","很多","很难","岂","相机","周边","机器人","就","类似","效率","中","内部","这样","过程","坐标系","众多","这幅","和","雷达","规划","功能","坐标","都","各种各样","臂","在","再","如果","层面","数据","全都","理解","传感器","各种","255","摄像","？","的","图像","计算","内容","可以","做","激光雷达","分析","软件","数字","只是","等等","信息","去","环境","一款","移动机器人","渲染","从","你","效果","不","出来","传感","三维","搞定","各样","给","rviz","通过","描述","设计","一堆","模型","快速","看","问","大大","把","就是","这些","比如","一脸","需要","感器","路径","样","用来","了然","知道","但","所以","颜色","自己","0","开发","激光","么","自主","这里","运动","，","大大提高","像头","长","肯定","机器","什么","一目了然","才","移动","是","懵","提高"],"title":"Rviz三维可视化平台","title_tokens":["rviz","平台","可视","可视化","三维"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_2","text":"一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。","text_tokens":["想","平台","功能","效果","在","不","如果","可视","qt","了","。","满意","数据","添加","多","方便"," ","rviz","不到","看到","我们","核心","自带","常用","或者","它","一个","更","上位","只要","可视化","有","官方","的","工具","话题","开发","自己","没有","开放式","基于","很多","打造","对应","机","话","对","消息","插件","新","项","，","图形化","可以","出厂","发布","机器人","ros","就","做","显示","也","中","只有","说明","框架","机器","按照","某些","图形","想不到","开放","是","一句","这个"],"title":"Rviz介绍","title_tokens":["介绍","rviz"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_1","text":"$ ros2 run rviz2 rviz2","text_tokens":[" ","rviz2","run","ros2","$"],"title":"运行方法","title_tokens":["方法","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_2","text":"摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。","text_tokens":["感器","最为","了","。","传感","给","传感器","我们","常用","上","摄像","装","的","摄像头","一种","，","像头","机器人","肯定","先来","机器","是"],"title":"彩色相机仿真与可视化","title_tokens":["彩色","可视","相机","可视化","仿真","与"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_3","text":"关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 主要配置项如下： 标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 标签：加载摄像头仿真插件","text_tokens":["_","如下","范围","噪音","都","需要","感器","分辨","加载","仿真","传感","。","：","gazebo","代码","传感器","给"," ","等","编码","我们","提供","自由","关于","描述","使用","摄像","name","命名","的","主要","参数","模型","分辨率","摄像头","图像","对照","对应","辨率","配置","项","插件","，","像头","ros","类型","大家","方法","type","标签","libgazebo","设置","叫做",".","so","格式","camera","介绍","这个"],"title":"仿真插件配置","title_tokens":["配置","仿真","插件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_4","text":"模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py","text_tokens":["_","不能","mbot","在","出来","仿真","拭目以待","。","gazebo"," ","rviz","load","看到","我们","好","啦","以待","摄像","能","成功","模型","拭目","摄像头","图像","配置","$","，","像头","learning","中","把","py","ros2","信息","into","已经",".","camera","并且","launch"],"title":"运行仿真环境","title_tokens":["仿真","环境","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_5","text":"$ ros2 run rviz2 rviz2","text_tokens":[" ","rviz2","run","ros2","$"],"title":"图像数据可视化","title_tokens":["可视","可视化","图像","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_6","text":"二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。","text_tokens":["想","realsense","比如","分钱","价格","玩起来","感器","不","三维","传感","点云","数据","。","价格比","传感器","仿真","通过","我们","常用","或者","不用","摄像","一分","的","获取","外部环境","可贵","摄像头","一分钱","外部","体感","相机","，","可以","kinect","过瘾","像头","也","这种","就","不少","不过","二维","试试","玩起","usb","intel","环境","起来","不想"],"title":"三维相机仿真与可视化","title_tokens":["三维","可视","相机","可视化","仿真","与"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_7","text":"","text_tokens":[],"title":"仿真插件配置","title_tokens":["配置","仿真","插件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_8","text":"$ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py","text_tokens":[" ","learning","_","load","py","rgbd","ros2","into","$","mbot",".","launch","gazebo"],"title":"运行仿真环境","title_tokens":["仿真","环境","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_9","text":"$ ros2 run rviz2 rviz2","text_tokens":[" ","rviz2","run","ros2","$"],"title":"点云数据可视化","title_tokens":["可视","可视化","点云","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_10","text":"除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。","text_tokens":["和","雷达","移动机器人","动机","感器","三维","传感","。","传感器","我们","试一试","摄像","汽车","的","驾驶","除了","激光","摄像头","很多","来","相机","，","自动","像头","机器人","也","激光雷达","机器","移动","是","包括","常备"],"title":"激光雷达仿真与可视化","title_tokens":["雷达","激光雷达","激光","可视","可视化","仿真","与"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_11","text":"","text_tokens":[],"title":"仿真插件配置","title_tokens":["配置","仿真","插件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_12","text":"$ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py","text_tokens":[" ","learning","_","load","laser","py","ros2","into","$","mbot",".","launch","gazebo"],"title":"运行仿真环境","title_tokens":["仿真","环境","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_13","text":"$ ros2 run rviz2 rviz2","text_tokens":[" ","rviz2","run","ros2","$"],"title":"点云数据可视化","title_tokens":["可视","可视化","点云","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz-vs-gazebo","text":"好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下，Gazebo是仿真平台，核心功能是创造数据，我们没有机器人或者传感器，它可以帮我们做一个虚拟的，Rviz是可视化平台，核心功能是显示数据，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。","text_tokens":["难为","熟悉","可视","仿真","。"," ","我们","强调","核心","或者","使用","可视化","到","有","没有","很多","这","机器人","就","不过","是不是","创造","来","和","平台","功能","在","再","如果","相信","数据","传感器","不到","它","具体","的话","的","还是","可以","也","方法","做","软件","信息","用","环境","流程","了解","了","传感","rviz","通过","启动","会用","常用","混淆","好","两个","几个","巧妇难为无米之炊","下","虚拟","已经","非常","感器","gazebo","时候","一个","帮","啦","手上","自己","巧妇","对","这里","，","大家","显示","会","机器","讲","一些","真实","不是","是","所以","案例"],"title":"Rviz vs Gazebo","title_tokens":[" ","rviz","vs","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_14","text":"https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":[" ",":","rviz","rviz2","/","www","ros2",".","https","github","docs","stereolabs","com"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/","text":"RQT：模块化可视化工具 ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具——rqt。 rqt介绍 正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，接下来，大家就可以跟随我的思路，我们一起来试一试。 日志显示 图像显示 接口控制 数据曲线 数据包管理 节点可视化 参考资料 https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":["操作","有点","参考资料","参考","管理","接口","https","可视","此时","。","指令"," ","我们","试一试","humble","界面","场景","使用","可视化","docs","可能","摄像头","很多","简单","前","就","类似","中","进行","不过","小","这样","concepts","install","一","来","麻烦","和","正如","模块化","en","console","功能","都","难免会","接下来","在","：","数据","-","它","about","apt","摄像","的话","具体","命名","工具","的","觉得","很","/","图像","基于","模块","日志","可以","也","里边","难免","另外","节点","只","介绍","一样","安装","了","跟随","强大","rviz","通过","启动","rqt","提供","更","每个","曲线","using","tutorials","命令","$","一种","下","ros","sudo","控制","已经","数据包","有些","这个","起来","比如","然后","需要","org","思路","qt",":","—","实现","一个","而","开发","，","像头","下来","大家","显示","用到","接下","会","我","一些","资料","html",".","是","加载","一句"],"title":"**RQT：模块化可视化工具**","title_tokens":["工具","模块化","rqt","*","模块","可视","可视化","："]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt","text":"ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具——rqt。","text_tokens":["操作","有点","比如","模块化","功能","需要","难免会","可视","此时","了","。","强大","rviz"," ","我们","rqt","—","提供","一个","更","场景","使用","可视化","摄像","的话","的","工具","觉得","很","可能","摄像头","图像","模块","一种","简单","，","下","像头","ros","就","显示","用到","中","不过","难免","会","一些","另外","已经","有些","只","麻烦"],"title":"RQT：模块化可视化工具","title_tokens":["工具","模块化","rqt","模块","可视","可视化","："]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt_1","text":"正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，接下来，大家就可以跟随我的思路，我们一起来试一试。","text_tokens":["和","正如","然后","功能","都","需要","接下来","思路","在","qt","可视","安装","了","。","跟随","起来","指令"," ","rviz","通过","启动","-","rqt","我们","试一试","它","实现","humble","界面","一个","使用","apt","可视化","具体","而","命名","的","工具","开发","每个","基于","很多","模块","命令","$","，","可以","前","也","ros","就","类似","下来","sudo","大家","里边","进行","接下","我","小","这样","一","install","是","加载","一句","这个","一样","来"],"title":"rqt介绍","title_tokens":["介绍","rqt"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_1","text":"","text_tokens":[],"title":"日志显示","title_tokens":["日志","显示"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_2","text":"","text_tokens":[],"title":"图像显示","title_tokens":["显示","图像"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_3","text":"","text_tokens":[],"title":"接口控制","title_tokens":["控制","接口"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_4","text":"","text_tokens":[],"title":"数据曲线","title_tokens":["曲线","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_5","text":"","text_tokens":[],"title":"数据包管理","title_tokens":["数据包","管理","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_6","text":"","text_tokens":[],"title":"节点可视化","title_tokens":["可视","可视化","节点"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_7","text":"https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":[" ",":","en","-","/","rqt","console","concepts","using","tutorials","org","humble","html","about",".","https","docs","ros"],"title":"参考资料","title_tokens":["资料","参考资料","参考"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/","text":"资源汇总 常用框架 自主导航 比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/ 自动驾驶 自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/ 路径规划 此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/ 机器人学 ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。 视频课程 斯坦福大学公开课 —— 机器人学 台大机器人学之运动学 Self-Driving Cars with ROS2 & Autoware 古月学院 常用链接 ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":["福大","导航","参考","每一","自身","大学","gitlab","斯坦福大学","动机","https","感知","人学","书籍","本书","。","还有","汇总"," ","cars","self","我们","学习","humble","完整","机械","使用","视频","docs","&","guyuehome","有","、","除此","重在","很多","热门","这","碰撞","公开","人手","运动学","理论知识","机器人","就","导航系统","中","进行","感兴趣","此外","内功","至于","github","著作","技能","和","en","规划","功能","都","臂","课程","在","最为","如果","算法","必备","：","各种","-","丰富","修炼","auto","社区","《","driving","视觉","中文","台大","一本","com","的","驾驶","工具","/","with","gazebosim","模块","推荐","得","内容","可以","也","》","资源","知识","被","链接","选择","应用","cn","仔细","moveit","古月","版本","移动机器人","任何","之","roscon","著名","不","多","了","斯坦福","找到","导论","常用","提供","navigation","好","商业化","index","更","之一","检测","基本功能","几个","机器人学","快速","ubuntu","一种","ros","documentation","经典著作","控制","框架","ros2","基本功","工程","工程师","这些","这个","称为","自动","要","结合","公开课","非常","商业","相关","比如","感兴","阅读","仔细阅读","情况","www","居","即便","org","具备","等","gazebo","代码","兴趣",":","基本","路径","—","开课","http","经典","实现","一个","wiki","除此之外","上","autoware","学院","autowareauto","实操","自己","开发","autowarefoundation","系统","2","io","典型","对应","当今","自主","对","运动","classic","，","行业","大家","会","机器","碰撞检测","html","包含",".","移动","是","分拣","robots","理论","之外","这套"],"title":"**资源汇总**","title_tokens":["汇总","*","资源"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_1","text":"","text_tokens":[],"title":"资源汇总","title_tokens":["汇总","资源"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_2","text":"","text_tokens":[],"title":"常用框架","title_tokens":["常用","框架"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_3","text":"比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/","text_tokens":["导航","移动机器人","比如","和","任何","相关","参考","功能","都","即便","动机","org","具备","在","不","https","如果","算法","了","。","：","代码"," ","各种",":","基本","我们","navigation","提供","好","实现","完整","上","使用","基本功能","的","自己","开发","系统","/","快速","自主","内容","，","可以","机器人","也","大家","ros","导航系统","中","进行","会","机器","框架","ros2","链接","应用",".","移动","基本功","这个","要","这套"],"title":"自主导航","title_tokens":["导航","自主"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_4","text":"自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/","text_tokens":["非常","和","商业","感兴","规划","参考","www","gitlab","功能","org","著名","最为","在","感知","如果","https","了","。","等","：","兴趣"," ",":","丰富","—","商业化","auto","实现","社区","一个","之一","autoware","autowareauto","有","几个","的","驾驶","、","autowarefoundation","系统","/","io","典型","模块","当今","很多","热门","这","一种","对","，","可以","行业","机器人","也","ros","大家","中","控制","框架","机器","链接","感兴趣","应用","包含",".","是","这个","自动"],"title":"自动驾驶","title_tokens":["驾驶","自动"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_5","text":"此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/","text_tokens":["非常","相关","规划","功能","都","臂","org","在","https","多","。","等","还有","找到"," ",":","经典","机械","更","使用","视觉","检测","的","、","/","这","碰撞","运动","内容","，","可以","也","ros","大家","中","框架","链接","碰撞检测","此外",".","分拣","是","这个","moveit"],"title":"路径规划","title_tokens":["规划","路径"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_6","text":"ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。","text_tokens":["版本","相关","比如","阅读","情况","仔细阅读","每一","自身","都","人学","书籍","必备","仔细","本书","。"," ","导论","著作","修炼","学习","经典","《","这些","除此之外","称为","实操","中文","一本","有","的","工具","开发","除此","重在","对应","机器人学","推荐","结合","得","人手","，","理论知识","可以","ros","机器人","就","》","大家","经典著作","知识","被","机器","选择","内功","是","至于","工程","工程师","理论","技能","之外"],"title":"机器人学","title_tokens":["机器","机器人学","人学","机器人"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_7","text":"斯坦福大学公开课 —— 机器人学 台大机器人学之运动学 Self-Driving Cars with ROS2 & Autoware 古月学院","text_tokens":["福大","大学","斯坦福大学","之","人学","斯坦福","cars"," ","-","self","—","开课","driving","学院","autoware","台大","&","with","机器人学","公开","运动","运动学","机器人","机器","ros2","公开课","古月"],"title":"视频课程","title_tokens":["课程","视频"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_8","text":"ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":["wiki","居","en","www","roscon","org","https","：","gazebo"," ",":","http","index","humble","docs","com","guyuehome","2","/","gazebosim","ubuntu","classic","ros","documentation","ros2","html","robots",".","cn","github","古月"],"title":"常用链接","title_tokens":["常用","链接"]}]}