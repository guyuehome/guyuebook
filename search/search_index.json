{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"引言 机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的电气时代。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的数字时代，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发，智能机器人时代正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。 教程链接汇总 课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/90 博客泡圈： https://www.guyuehome.com/","text_tokens":["拉开序幕","人类","：","电气","主要",".","七八","环境","要求","教器","三个","工业","机器人","之后","博客","劳动力","后","并","高","发展","这是","id","自动","最为","驱动器","机器","提出","操作","执行","计算机","应用","动作","人工","劳动","重要","于","人工智能","book","system","2000","之一","引言","电机","也","图文","驾驶","爆发","不断","https","guyuehome","最佳","年前","释放","开发","，","课程","八十","七八十年","序幕","家庭","视频","年","github","的","快速","伺服","伺服电机","—","太","依然","七八十","更加","呈","热点","算机","技术","过程","横跨","仿生","必将","减速机","正式","十年","而言","自主","井喷","逐渐","命令","智能","俗称","www","时期","成为","不过","按照","由示","完全","ai","有限","链接","主角","操控","等","控制","gitee","这","时代","减速","传感器","circledetail","感器","就是","智能化","前夜","驱动","服务","对","狗","丰富","教程"," ","层面","汇总","系统","21","和","随着","视觉","缺少","控制器","检测","robot","业生","_","不断丰富","更","软件","出现","经历","只能","此时","计算","ros2","汽车","动力","局部","工业生产","没有","、","帮助","tutorials","90","大",":","拉开","我们","生产","/","送餐","四足","是","了","载体","多","但是","2015","思考","类型","感知","数字","关注","问答","operating","八十年","传感","bubble","设备","操作系统","com","。","状","工厂","class","源码","泡圈","agv"],"title":"引言","title_tokens":["引言"]},{"location":"#_1","text":"机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的电气时代。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的数字时代，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发，智能机器人时代正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。","text_tokens":["拉开序幕","人类","电气","主要","七八","环境","要求","教器","三个","工业","机器人","之后","劳动力","后","并","高","发展","这是","自动","最为","驱动器","机器","提出","操作","执行","计算机","应用","动作","人工","劳动","重要","于","人工智能","system","2000","之一","也","电机","驾驶","爆发","不断","最佳","年前","释放","开发","，","课程","八十","七八十年","序幕","家庭","年","的","快速","伺服","伺服电机","—","太","依然","七八十","更加","呈","热点","算机","技术","过程","横跨","仿生","必将","减速机","正式","十年","而言","自主","井喷","逐渐","命令","智能","俗称","时期","成为","不过","按照","由示","完全","ai","有限","主角","操控","等","控制","这","时代","减速","传感器","感器","就是","智能化","前夜","驱动","服务","对","狗","丰富"," ","层面","系统","和","随着","视觉","缺少","控制器","检测","robot","业生","不断丰富","更","软件","出现","经历","只能","此时","计算","汽车","动力","局部","工业生产","没有","、","帮助","大","拉开","我们","生产","送餐","四足","是","了","载体","多","但是","2015","思考","类型","感知","数字","关注","operating","八十年","传感","设备","操作系统","。","状","工厂","agv"],"title":"引言","title_tokens":["引言"]},{"location":"#_2","text":"课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/90 博客泡圈： https://www.guyuehome.com/","text_tokens":["guyuehome","https","：","ros2","课程",".","视频","github","tutorials","90",":","/","gitee","博客","circledetail","id","教程"," ","21","问答","_","www","bubble","book","com","class","源码","泡圈","图文"],"title":"教程链接汇总","title_tokens":["教程","汇总","链接"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["联系","人才","但","课件","地区","抄录",".","或","社区","2011","仅限","机器人","传播","致力于","面向","声明者","限于","努力","（","机器","学","古月","销售","交流学习","上述","致力","线上","复制","不","brand","将","建立","依法","平台","guyuehome","开发","）","，","课程","包括","武汉","面向未来","视频","年","追究其","的","《","学习者","及","声明","作品","版权","拥有","追究","公司","1000","提供","修改","居","合法","未经","被","www","畅销","对本","授权","企业","任何","》","创建","优质","小时","高质","生态","通过","高质量","精锋","交流","ai","有限","均","有限公司","单位","明者","赋能","使用","+","网站","ros","等","上","所有","与","一体","书面","捆绑","高校","如需"," ","图书","人才培养","学习","和","责任","究其","镜像","创新","为","个人","科技","法律","120","进行","集","其它","培养","合作","违反","模式","构建","、","万人","万字","超过","微控","本","华语","是","法律责任","校企","未来","@","有权","累积","知名","用户","质量","产品","许可","实践","不得","众多","com","至今","出版","。","源码","请","内容"],"title":"关于我们","title_tokens":["我们","关于"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["人才","地区",".","社区","2011","机器人","致力于","面向","努力","（","机器","古月","交流学习","致力","线上","建立","平台","guyuehome","开发","）","，","课程","面向未来","视频","年","的","《","学习者","及","1000","提供","居","www","畅销","企业","》","创建","优质","小时","高质","生态","通过","高质量","交流","ai","赋能","+","ros","等","与","一体","高校"," ","图书","人才培养","学习","创新","为","120","集","培养","合作","模式","构建","、","万人","万字","超过","华语","是","校企","未来","累积","知名","用户","质量","实践","众多","com","至今","出版","。","内容"],"title":"学机器人，上古月居","title_tokens":["居","上","机器","机器人","学","，","古月"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["联系","但","课件",".","或","仅限","源码","声明者","限于","古月","销售","上述","复制","不","brand","将","依法","guyuehome","，","课程","包括","武汉","追究其","视频","的","声明","作品","拥有","版权","追究","公司","修改","居","合法","未经","被","对本","授权","任何","精锋","有限","单位","均","有限公司","明者","使用","网站","等","所有","与","书面","捆绑","如需"," ","学习","和","责任","究其","镜像","为","个人","科技","法律","其它","进行","违反","、","微控","本","法律责任","@","有权","用户","产品","许可","不得","com","。","传播","请","抄录"],"title":"版权声明","title_tokens":["版权","声明"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/","text":"ROS/ROS2是什么 智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。 ROS的诞生 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人—— PR2 ，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS的发展 ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称 ROSCon ，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。 ROS的特点 ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。 参考资料 关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["还是","以叠","步伐","疫情","c","：","能够","制造","为什么","活动","什么","在","增长","近几年","2014","年轻","说干就干","看到","不多","后期","社区","工业","两个","该","机器人","联合","改为","2017","上去","举办","今日","wiki","效果","努力","重量","做出","扫地","全新","臂","早期","简单","虽然","笔记本电脑","机器","注意","玩耍","创意","真正","回答","受限","轰动","ubuntu","第一次","应用","可能","world","于","不","采购","打","体感","想到","诞生","同样","从中","工具","希望","光靠","知识","跨平台","图","配合","，","深知","记录","年","万左右","的","相关","利器","一段","可以","都","四项","亚马逊","如何","度","介于","其实","基本上","发表","起来","技术","肩负着","低","过程","居","一步","轮子","游戏机","两年","无论是","让","用","围绕","？","助推","尽量","直接","这群","商业化","下","现在","离不开","无疑","使命","底盘","完全","而","万万","聊天","方法","踏上","原因","核心","网站","目标","算是","访问","控制","上边","最高","传感器","40","为了","宽松","感器","ros1","论坛","对","真的","托管","年底","组成","就","时至今日","大部分","随着","同时","进化","b","身影","开始","想法","新增","充足","来自","统计","才","引擎","系列","此","此时","本身","参考资料","笔记","2012","进步","功能","汽车","动力","参考","水下","帮助","很快","只想","一大笔","大量","活跃度","作为","野蛮","好","熨烫","一切","以","无聊","清晰","新","多","采用","部件","投资","支持","对于","长远","80","向","起点","生态系统","部分","处理","根据","大大","一个","代","四大","源码","这位","roscon","首先","了解","其他","越来越","这个","大学","局限性","名称","第一个","主要","巨大","肯定",".","自己","媒体","一家","明智","越来","全球化","却","等等","2011","移动","确定","具备","并","年轻人","发展","成熟","一定","活跃","物体","有志","官方","场景","最为","单独","回到","提出","这些","还有","古月","操作","线上","方式","既然","扩展","针对","system","团队","事情","你","平台","来到","不断","却步","电路","实验","月底","有人","精致","正在","速度","给","快速","比如","青年","元素","packages","之内","—","价格","“","更好","数据库","推出","特点","推荐","后续","提供","不仅","很多","到","正式","时间","此后","乐意","逐渐","discourse","智慧","下载","神兵","任何","友好","分享","着","生态","绝大","总而言之","提高","陪","游戏","使用","关键","跟随","曲线","这","近两年","几乎","；","之旅","或者","如果","洗衣","一系列","木头","教程","福大","每个","层面","受限于","最后","系统","普及","方向","和","第一","由","干","大步","因为","所以","找到","各种各样","个人","发布","世界","远","趋势","快","领域","微软","迅猛","上市","独立","复杂","讲解","ros2","叠","迭代","、","以上","认识一下","可为","新鲜","学术","叫做","是","查看","不要","代表","了","模块化","同一","但是","多项","板块","没想","接下","初期","认识","神秘","当初","不开","所学","用户","问答","棒","重量级","几个","主阵地","许可","嵌入式","不想","暴露","操作系统","25","条","。","整合","一下","几年","时候","人类","人才","之王","机械","几百万","实验室","基本","来看","美妙","标准","百科","进入","头发","投了","答案","情况","同年","这样","这是","实现","看中","全","统统","浪潮","大有可为","把","每年","下来","personal","一款","重要","呢","变为","a","同学","上图","全人","集合","也","掌握","差不多","2","conference","linux","最佳","详细","阵地","应用软件","简称","开发","维基","5","望而却步","一大步","人数","windows","家","不乏","然后","answers","分钟","讨论","专业","不到","公司","万","横跨","项目","会","稳定","程度","更为","而言","百科全书","index","造","高效","类似","普遍","2010","已有","许可证","强悍","整理","创始","通信","维基百科","通过","已经","自身","一大","缩短","来讲","电脑","绝对","多年","入门","外观","ros","等","资金","garage","不是","所有","嘉宾","就是","服务","因","加","增长速度","”","没想到"," ","甚至","所有人","成本","苹果","学习","设计","有没有","只","张图","这里","款","浏览","做成","为","衣服","终于","进行","大会","一堂","资源","intel","限性","排名","完成","多媒体","怀揣","浏览量","工程","一大笔钱","复用","不下","做","还","开发者","带领","万人","不同","这款","我们","/","当时","各种","啦","中","用于","总称","google","org","几百","正如","来","面纱","做饭","operating","移动机器人","产品","一系","每","剪头发","笔记本","肩负","跑","至今","为例","问题","版","而生","零","内容","风险","模块","一样","圈","向前","直到","有","要","动机","起","又","willow","限于","15","体系","多万","通常","pr2","别人","量级","广泛","之上","率","入门教程","只要","次数","其中","重新","沉淀","资本","生态系","框架","斯坦福大学","将","访问量","很","加上","开发工具","人","五年","柔性","局限","据库","日常","存储","亚马","长期","涉及","迎来","做法","100","其次","非常","课程","页面","github","视频","原本","humble","前","向前走","毛巾","turtlebot","结晶","2022","包","得以","索引","价格便宜","大家","推进","这一波","一起","促使","左右","加快","说明","维基百","全书","250","便宜","机制","大笔","嵌入","一些","新鲜事","被","智能","原型","台球","选择","巨人","成为","频繁","多媒体系统","地域","爆款","繁荣","成功","掀起","版本","提取","各项","研发","百万","熟悉","齐聚一堂","上","案例","时代","容易","提问","接下来","特性","从","智能化","开源","工程师","基于","给出","复合","正式版","出来","个","软件系统","robot","更","站","风险投资","图中","挑战","性能","推动","标志","之","得到","软件","手机","同理","解决","泡泡","120","效率","经历","虽好","无论","全人类","总体","他们","关于","150","高度","xbox","更新","尝试","肩膀","没有","零部件","那","全球","资料","收拾","革命","大","欢迎","本","各样","绝大部分","适用","居高不下","不断更新","而且","时间轴","历经","代码","数据","月","搜索","kinect","2007","2015","做到","一次","商业","成果","传感","斯坦福","人形","国家","20","一群","大部","研究","一套","一届"],"title":"ROS和ROS2是什么","title_tokens":["ros","ros2","什么","和","是"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#rosros2","text":"智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。","text_tokens":["这位","高度","ros2","开发","掀起","，","什么","巨大","一下","那","正在","的","带领","认识一下","ros","我们","机器人","这","时代","接下来","又","是","大家","智能化","对","嘉宾","中","一起","重量","场景","了","全"," ","就","量级","机器","接下","系统","提出","认识","方向","神秘","操作","向","进化","？","下来","面纱","应用","重量级","智能","呢","挑战","操作系统","。","而生"],"title":"ROS/ROS2是什么","title_tokens":["ros","ros2","/","什么","是"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人—— PR2 ，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。","text_tokens":["时候","以叠","越来越","机械","这个","大学","：","为什么","什么","在","实验室","肯定","圈","自己","向前","标准","说干就干","看到","越来","有","却","后期","要","头发","答案","机器人","联合","并","这样","实现","物体","有志","做出","pr2","别人","虽然","机器","操作","玩耍","只要","轰动","既然","personal","一款","可能","其中","应用","针对","第一次","重要","不","呢","打","框架","斯坦福大学","团队","很","事情","诞生","你","人","平台","也","同样","从中","2","柔性","光靠","电路","实验","应用软件","开发","涉及","，","深知","有人","精致","图","非常","100","年","5","的","一大步","青年","可以","都","—","之内","家","毛巾","一系列","向前走","得以","如何","大家","分钟","一起","专业","不到","技术","横跨","低","很多","用","一些","？","高效","类似","智能","原型","台球","强悍","成为","分享","整理","已经","一大","陪","聊天","外观","ros","等","资金","上","不是","这","容易","所有","就是","服务","真的","因","或者","如果","组成","洗衣","基于","木头"," ","福大","给出","甚至","所有人","层面","就","苹果","最后","出来","系统","个","和","设计","有没有","第一","只","软件系统","干","大步","robot","款","因为","所以","找到","想法","更","充足","才","个人","图中","性能","衣服","推动","软件","手机","系列","效率","此时","独立","复杂","完成","他们","功能","叠","尝试","没有","零部件","那","做","还","帮助","、","收拾","很快","这款","我们","学术","当时","是","而且","熨烫","一切","中","了","无聊","同一","但是","多","用于","部件","2007","对于","初期","一次","做饭","一系","处理","斯坦福","剪头发","一个","一群","不想","操作系统","一套","研究","。","代","条","为例","问题","而生"],"title":"ROS的诞生","title_tokens":["诞生","的","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_1","text":"ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称 ROSCon ，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。","text_tokens":["roscon","了解","风险","步伐","越来越","疫情","这个","大学","几百万","名称","局限性","能够","增长","在","一样","第一个","圈","自己","2014","年轻","一家","进入","越来","直到","后期","2011","投了","起","该","机器人","确定","改为","2017","同年","举办","willow","年轻人","成熟","这是","限于","发展","官方","扫地","全新","pr2","看中","早期","之上","笔记本电脑","机器","单独","回到","提出","注意","操作","每年","真正","把","受限","线上","ubuntu","其中","一款","应用","world","于","重要","变为","资本","system","斯坦福大学","体感","团队","想到","诞生","加上","人","五年","也","局限","conference","却步","简称","亚马","开发","长期","，","月底","迎来","年","望而却步","的","5","给","快速","原本","humble","可以","前","—","turtlebot","2022","亚马逊","价格便宜","不乏","价格","介于","推出","公司","加快","肩负着","项目","会","稳定","过程","不仅","到","正式","游戏机","便宜","两年","时间","此后","大笔","让","助推","逐渐","被","直接","类似","这群","2010","原型","下","现在","使命","成为","分享","创始","着","已经","爆款","一大","绝大","底盘","而","成功","电脑","万万","游戏","版本","多年","原因","使用","关键","提取","跟随","ros","百万","等","熟悉","控制","齐聚一堂","garage","这","传感器","所有","时代","为了","近两年","感器","从","开源","服务","年底","没想到","教程"," ","福大","就","大部分","成本","每个","受限于","正式版","出来","系统","普及","第一","和","设计","随着","这里","款","robot","所以","身影","因为","开始","各种各样","更","来自","风险投资","为","发布","标志","推动","个人","终于","软件","进行","大会","微软","一堂","经历","虽好","intel","限性","他们","笔记","2012","讲解","功能","xbox","ros2","一大笔钱","不下","开发者","、","迭代","全球","做","很快","大","只想","一大笔","本","我们","各样","绝大部分","叫做","各种","野蛮","适用","居高不下","是","时间轴","历经","中","了","多","但是","采用","kinect","投资","支持","2007","没想","2015","当初","几百","起点","商业","operating","部分","传感","斯坦福","大大","每","笔记本","肩负","一个","大部","暴露","操作系统","一届","。","问题","版","几年"],"title":"ROS的发展","title_tokens":["的","ros","发展"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_2","text":"ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["还是","人类","越来越","人才","c","机械","这个","制造","：","模块","在","自己","媒体","向前","看到","标准","一家","明智","全球化","越来","有","社区","动机","移动","工业","机器人","具备","上去","今日","并","发展","这样","实现","体系","通常","臂","简单","别人","统统","广泛","率","机器","这些","把","创意","下来","重新","沉淀","应用","a","采购","生态系","将","全人","集合","开发工具","平台","也","工具","跨平台","linux","开发","，","做法","非常","的","快速","给","比如","都","可以","windows","向前走","家","结晶","大家","“","推进","促使","一起","特点","公司","技术","会","一步","轮子","很多","到","时间","机制","无论是","围绕","嵌入","造","尽量","被","直接","普遍","智慧","智能","商业化","已有","友好","巨人","许可证","成为","分享","多媒体系统","着","通信","生态","已经","自身","缩短","繁荣","来讲","提高","完全","核心","使用","目标","ros","案例","上","不是","这","宽松","特性","ros1","就是","从","智能化","；","开源","对","”","组成"," ","时至今日","复合","就","最后","系统","和","设计","同时","由","b","这里","身影","新增","各种各样","更","做成","站","引擎","之","远","软件","领域","同理","无论","此","全人类","本身","上市","他们","多媒体","进步","怀揣","功能","汽车","ros2","肩膀","复用","水下","、","做","还","全球","那","我们","各样","各种","是","不要","代表","中","以","了","模块化","新","多","多项","用于","总称","支持","做到","长远","正如","来","移动机器人","生态系统","部分","成果","商业","产品","人形","许可","跑","一个","嵌入式","至今","。","四大","整合","零"],"title":"ROS的特点","title_tokens":["的","ros","特点"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_3","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。","text_tokens":["其他","越来越","：","活动","什么","在","增长","近几年",".","基本","来看","不多","看到","百科","越来","有","等等","两个","社区","情况","机器人","wiki","发展","这是","15","活跃","多万","最为","浪潮","大有可为","机器","提出","这些","回答","方式","次数","其中","应用","重要","呢","不","访问量","上图","很","你","人","也","差不多","希望","据库","日常","最佳","存储","开发","，","记录","非常","维基","页面","万左右","正在","的","相关","快速","比如","元素","速度","packages","给","人数","都","可以","四项","包","索引","大家","answers","度","其实","基本上","这一波","发表","数据库","讨论","起来","左右","说明","维基百","万","会","程度","250","很多","到","更为","而言","index","乐意","？","新鲜事","助推","discourse","下载","选择","现在","神兵","任何","无疑","成为","频繁","维基百科","地域","已经","通过","绝大","总而言之","绝对","核心","使用","网站","各项","曲线","算是","研发","ros","等","访问","上边","上","最高","这","40","论坛","就是","从","；","加","增长速度","如果","教程"," ","就","大部分","每个","学习","和","张图","这里","浏览","统计","发布","趋势","快","得到","迅猛","资源","总体","排名","关于","150","功能","浏览量","参考","动力","、","开发者","全球","万人","以上","革命","不同","大","可为","本","新鲜","我们","活跃度","作为","绝大部分","各种","是","查看","代表","中","数据","月","了","清晰","新","多","利器","org","80","用户","问答","部分","棒","根据","几个","国家","每","20","一个","大部","25","。","源码","问题","整合","几年"],"title":"ROS的社区","title_tokens":["的","ros","社区"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#_1","text":"关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["首先","之王","这个","主要","在","美妙","百科","有","要","社区","机器人","一定","效果","努力","最为","入门教程","机器","还有","古月","扩展","重要","将","同学","你","也","掌握","工具","来到","不断","知识","详细","阵地","开发","配合","，","其次","课程","github","视频","一段","的","都","可以","—","大家","然后","更好","一起","推荐","后续","技术","提供","项目","会","居","全书","百科全书","离不开","成为","分享","绝大","方法","踏上","使用","入门","网站","ros","这","所有","提问","几乎","从","开源","托管","之旅","工程师","教程"," ","大部分","最后","学习","和","这里","找到","开始","世界","解决","120","泡泡","参考资料","关于","ros2","更新","参考","工程","还","资料","万人","欢迎","本","大量","我们","作为","绝大部分","好","是","不断更新","代码","啦","中","搜索","板块","google","不开","所学","部分","几个","主阵地","一个","大部","。","问题","内容"],"title":"参考资料","title_tokens":["资料","参考","参考资料"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/","text":"ROS2对比ROS1 在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。 ROS1的局限性 首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。 全新的ROS2 ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。 ROS2 vs ROS1 系统架构 在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。 DDS通信 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。 核心概念 ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。 编码方式 再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。 命令行 最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随教程，你就会慢慢理解这些特性。","text_tokens":["装修","一团乱麻","具体","：","能够","为什么","什么","在","一种","勿躁","环境","天翻地覆","过来","两个","社区","三个","该","机器人","100ms","左侧","进程","生活","入侵","全新","优化","推倒重来","简单","自动","（","虽然","机器","保证","学","受制","注意","真正","应用","mcu","可能","细节","没","于","不","力学","成","诞生","wifi","同样","工具","搬","跨平台","精力","协作","国际","，","而已","二个","家庭","的","相关","不能","盖","看看","可以","都","最新","ament","举","借鉴","run","诸多","如何","突然","一致","其实","灵活","运行","middleware","过程","移植性","右侧","再","一步","二代","图片","搭载","所示","让","用","信息","？","经常","尽量","需求","直接","除了","方便","master","下","看","收","使命","不太","不用","库会","以下","catkin","而","有限","方法","动力学","核心","初次","目标","听说","控制","为了","经验","ros1","图像","对","似乎","哪些","就","大部分","小","便于","分散","调用","随着","同时","ceo","一页","想要","控制器","如","架构","开始","乱麻","充足","之间","历史使命","至关重要","房子","它","启动","对系统","通信接口","稍安","层","成功经验","计算","功能","汽车","动力","接触","最大","完","尽力","大量","生产","提","好","上手","下要","物","简单明了","加入","中间层","可靠","管理器","多","不爽","干扰","可选","支持","当然","rosbuild","对于","编程","揭秘","测试","长远","类型","省略","致使","不难","重来","部分","基础","换成","处理","实时","结合","一个","迈过","一边","编程语言","首先","标准化","了解","其他","越来越","专注","市场","局限性","第一个","rtos","名称","这个","写","但","主要","巨大","肯定","或","自己","单兵作战","过去","一家","运动","复杂度","上升","越来","颠覆","管理","具备","常","走向市场","并","一定","发展","走向","比","开发成本","用到","集成","编码","场景","下边","最为","是否","除此","这些","还有","操作","尤其","方式","电脑系统","针对","topic","指定","实时性","工作","面向对象","你","只是","能","平台","算力","不断","差异","唯一","先","）","不难理解","良好","延迟","给","比如","之前","—","强","amr","周期","交付","对比","更加","编写","最早","更好","伙伴","rmw","后续","提供","体现","稳定性","彼此","不仅","客户","很多","消失","到","时间","强壮","项目管理","python","概念","总结","会成","rosrun","陌生","调试","存在","企业","任何","放在","理解","按照","远比","通信协议","单兵","绝大","分解","提高","链接","无法","主角","打成","翻新","软件开发","使用","理器","只不过","售价","跟随","只有","一团乱","两者","相对","这","python3","与","几乎","得","小伙","；","1ms","或者","如果","他","教程","每个","层面","另","最后","系统","普及","第一","和","不会","很大","一行","也许","现有","因为","所以","相比","找到","借助","可移植","各种各样","发布","安全性","多个","编译系统","干掉","时","独立","可靠性","复杂","discovery","讲解","ros2","发成","最","消费市场","担忧","、","性","以上","切记","学术","大幅","叫做","涌现","客户端","是","原有","opensplice","不要","级别","封装","了","未来","共享","名字","以下几点","交给","c++","但是","雷达","至关","减少","以及","发现","用户","总之","接入","听","策略","嵌入式","面临","操作系统","深入","。","几点","请","一下","时候","colcon","大致","全部","变得","个体","几百万","不够","来看","基本","安装","标准","广泛应用","答案","道坎","应用层","更换","面向","高","这样","去","实现","建筑","改","幅度","全","命令行","解密","千差万别","把","一款","重要","呢","中间","当","内部","建立","印象","过","体验","也","明显","驾驶","开发方式","翻地","linux","最佳","简称","开发","加密","网络连接","行为","意义","windows","高昂","满足","协议","依然","然后","宕机","变化","rostopic","公司","到底","会","学术研究","稳定","项目","修改","移植","打交道","而言","通用","类似","内存","保留","产品化","新版","通信","通过","已经","选项","来讲","电脑","应该","大幅度","一一","作战","联网","ros","等","受制于","不是","所有","有线","诟病","就是","适配","服务","消费","升级","有且","驱动","第二种","多功能","丰富"," ","甚至","暂且","成本","轻松","android","发","学习","么","设计","张图","航天","这里","款","毛坯","做成","编译器","为","条件","进行","安全","只能","资源","限性","内","编译","完成","运算","怀揣","完整性","第二个","工程","系统工程","复用","做","还","开发者","带领","行人","不同","编码方式","自","我们","/","各种","表示","对象","保障","节点","中","啦","迁移","用于","why","部署","新一代","macos","即可","几百","来","产品","流程","各位","每","发布者","问题","出错","风险","连接","角色","小伙伴","之初","一本","另外","一样","更具","第二代","要求","有","要","纠结","之后","不断涌现","后","语言","pr2","程序","角度","广泛","之上","率","担心","完善","前方","解算","之外","大部头","不再","只要","配置","其中","重新","dds","主","框架","将","继续","地方","共享内存","指挥","局限","先进","这台","还会","课程","非常","vs","接口","运动学","实力","原本","底层","陆续","切换","确实","大家","不好","说明","定义","部头","厂家","机制","嵌入","某","一些","例子","命令","阶段","从而","可读","考虑","智能","选择","导致","5g","丢","不过","频繁","除此之外","方案","api","怎样","成功","版本","批量生产","适合","发送","自家","话题","可读性","微控制器","走","定性","课时","整体","研发","百万","熟悉","上","工作站","时代","特性","从","是因为","颠覆性","开源","较","网络","基于","产品开发","更接","一旦","接近","最终","总体而言","二种","接收","软件系统","真实","基本保障","更","国际标准","完整","性能","挑战","推倒","变革","软件","手机","udp","出现","解决","慢慢","无论","里","属性","格局","是从","总体","可移植性","交道","他们","常用","能力","可选项","没有","需要","那","分布式","全球","大","本","通用性","各样","绝大部分","适用","黑客","代码","数据","fastrtps","难度","历史","tcp","批量","面对","做到","由于","信号","布式","足够","商业","依赖","符合","带来","第二","设备","一团","大部","间层","毛坯房","研究","一套","厂商","含义","一代","分布"],"title":"ROS2对比ROS1","title_tokens":["ros2","对比","ros1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2ros1","text":"在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。","text_tokens":["ros2","名称","，","在","做","来看","使用","或","的","第二代","大","看看","之前","ros","听说","有","我们","上","对比","这","ros1","从","就是","变化","到底"," ","就","多","学习","二代","么","和","也许","？","其中","不","第二","一个","。","过","你","能"],"title":"ROS2对比ROS1","title_tokens":["ros2","对比","ros1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros1","text":"首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。","text_tokens":["首先","风险","连接","具体","：","第一个","市场","为什么","不够","什么","在","来看","自己","单兵作战","天翻地覆","有","要","答案","机器人","具备","走向市场","不断涌现","并","发展","这样","入侵","走向","pr2","自动","虽然","机器","保证","一款","应用","针对","呢","不","框架","内部","工作","地方","诞生","平台","也","驾驶","算力","先进","不断","这台","翻地","开发","，","课程","家庭","良好","的","实力","原本","比如","网络连接","可以","都","—","高昂","更加","最早","运行","会","学术研究","时间","搭载","让","用","嵌入","一些","？","类似","丢","通信","不用","已经","单兵","绝大","有限","主角","批量生产","适合","售价","目标","作战","ros","上","工作站","这","为了","有线","ros1","是因为","从","就是","服务","；","或者","似乎","他","网络"," ","就","大部分","小","成本","甚至","最终","系统","普及","第一","和","设计","随着","航天","款","因为","找到","充足","做成","条件","软件","它","出现","只能","资源","独立","可靠性","复杂","完成","能力","ros2","计算","运算","汽车","担忧","没有","那","我们","生产","绝大部分","学术","各种","涌现","黑客","是","中","级别","数据","了","历史","可靠","批量","但是","干扰","用于","why","支持","当然","新一代","由于","类型","致使","足够","部分","产品","处理","实时","一个","设备","嵌入式","大部","研究","。","一代","问题"],"title":"ROS1的局限性","title_tokens":["限性","局限","局限性","ros1","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2","text":"ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。","text_tokens":["装修","具体","：","能够","在","一种","环境","两个","机器人","100ms","生活","入侵","推倒重来","优化","全新","简单","自动","（","虽然","机器","受制","真正","应用","mcu","可能","细节","于","不","力学","wifi","工具","跨平台","协作","，","的","不能","盖","都","可以","最新","ament","借鉴","诸多","如何","运行","搭载","让","用","经常","？","尽量","需求","直接","除了","方便","master","下","使命","不用","以下","catkin","方法","动力学","控制","为了","经验","ros1","对","就","同时","控制器","架构","之间","历史使命","房子","它","对系统","成功经验","汽车","动力","尽力","大量","提","好","下要","可靠","管理器","多","rosbuild","测试","长远","重来","基础","实时","结合","一个","标准化","越来越","市场","第一个","rtos","这个","但","巨大","肯定","自己","过去","运动","越来","颠覆","管理","具备","并","一定","走向","比","场景","这些","操作","尤其","电脑系统","针对","实时性","工作","只是","平台","能","算力","差异","）","给","比如","强","周期","amr","更加","编写","后续","提供","体现","稳定性","不仅","很多","到","强壮","项目管理","python","调试","任何","远比","分解","链接","无法","打成","翻新","使用","理器","相对","这","python3","与","得","1ms","或者","层面","系统","第一","和","不会","很大","所以","相比","借助","各种各样","安全性","编译系统","独立","复杂","ros2","消费市场","、","性","叫做","是","原有","未来","了","以下几点","c++","但是","以及","发现","策略","面临","操作系统","。","几点","一下","时候","colcon","全部","个体","基本","来看","标准","这样","去","实现","建筑","全","解密","千差万别","把","一款","呢","体验","也","明显","驾驶","linux","最佳","开发","加密","行为","网络连接","windows","满足","宕机","变化","会","项目","稳定","修改","移植","通用","类似","保留","产品化","新版","通信","已经","电脑","ros","等","受制于","不是","所有","就是","消费","升级","第二种"," ","甚至","android","设计","毛坯","编译器","为","进行","安全","内","编译","完成","怀揣","完整性","工程","系统工程","开发者","还","行人","不同","我们","各种","保障","节点","中","用于","部署","macos","产品","流程","问题","出错","风险","连接","角色","之初","更具","要求","有","要","纠结","后","语言","之上","前方","解算","不再","dds","重新","框架","继续","还会","课程","接口","运动学","原本","大家","不好","说明","机制","阶段","考虑","智能","选择","导致","方案","api","怎样","成功","发送","适合","微控制器","定性","课时","研发","上","时代","特性","颠覆性","较","网络","一旦","最终","二种","基本保障","更","完整","性能","挑战","推倒","变革","软件","手机","出现","无论","格局","他们","没有","需要","那","分布式","大","通用性","各样","黑客","代码","数据","历史","面对","做到","信号","布式","第二","毛坯房","分布"],"title":"全新的ROS2","title_tokens":["ros2","的","全新"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2-vs-ros1","text":"","text_tokens":[],"title":"ROS2 vs ROS1","title_tokens":["ros2","ros1"," ","vs"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_1","text":"在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。","text_tokens":["时候","大致","了解","一团乱麻","角色","连接","变得","这个","rtos","写","但","在","另外","一样","主要","肯定","安装","标准","有","管理","左侧","进程","应用层","更换","并","这样","程序","简单","下边","完善","这些","注意","把","操作","方式","dds","应用","重要","不","中间","框架","将","建立","成","印象","共享内存","过","也","明显","指挥","linux","开发","先","，","不难理解","而已","接口","的","比如","都","可以","—","底层","windows","对比","协议","更加","突然","大家","变化","公司","后续","提供","会","稳定","右侧","彼此","客户","再","很多","消失","机制","打交道","让","信息","从而","类似","内存","会成","master","看","理解","不过","频繁","通信","通信协议","通过","不太","选项","库会","而","方法","应该","理器","走","只不过","只有","整体","一团乱","两者","ros","上","这","所有","得","ros1","就是","图像","驱动","有且","如果","哪些","基于"," ","就","学习","系统","和","调用","张图","接收","ceo","架构","找到","开始","乱麻","至关重要","发布","udp","它","进行","通信接口","里","是从","交道","复杂","discovery","内","层","ros2","可选项","接触","最","需要","那","、","自","大量","我们","客户端","好","是","节点","中","封装","数据","简单明了","了","共享","名字","tcp","中间层","管理器","可选","macos","雷达","至关","发现","不难","依赖","听","一个","一团","间层","操作系统","一套","深入","。","请"],"title":"系统架构","title_tokens":["架构","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#dds","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。","text_tokens":["其他","专注","这个","能够","写","在","一样","肯定","一种","安装","基本","复杂度","标准","广泛应用","一家","过来","要","社区","三个","该","机器人","纠结","常","更换","并","开发成本","这样","高","实现","场景","改","优化","程序","简单","广泛","率","是否","机器","之外","这些","还有","把","只要","配置","dds","应用","重新","于","指定","不","也","唯一","精力","简称","开发","国际","，","先","接口","延迟","的","给","比如","加密","可以","都","底层","举","切换","交付","满足","协议","更加","如何","然后","其实","变化","灵活","middleware","rmw","提供","会","定义","稳定","再","移植","厂家","让","用","某","一些","？","例子","需求","除了","类似","master","选择","5g","放在","收","丢","不过","频繁","按照","通信","通信协议","不用","来讲","提高","无法","版本","自家","应该","目标","联网","ros","等","听说","熟悉","不是","这","为了","得","ros1","就是","诟病","适配","开源","如果","基于","丰富","就"," ","产品开发","每个","轻松","层面","成本","发","另","系统","么","设计","软件系统","这里","想要","一行","所以","相比","国际标准","更","为","性能","多个","解决","软件","udp","属性","时","复杂","ros2","功能","发成","最","复用","最大","、","完","做","不同","我们","/","各种","适用","好","是","opensplice","代码","物","中","数据","fastrtps","加入","了","交给","tcp","多","不爽","部署","当然","对于","减少","省略","总之","用户","商业","部分","接入","产品","符合","带来","每","一个","厂商","。","问题"],"title":"DDS通信","title_tokens":["dds","通信"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_2","text":"ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。","text_tokens":["不用","已经","讲解","开发方式","小伙伴","ros2","几百万","开发","第二个","，","课程","在","二个","方法","非常","应该","开发者","使用","没有","全球","的","一一","意义","有","百万","本","ros","熟悉","我们","依然","大家","几乎","ros1","从","并","一致","小伙","中","了","迁移","如果","伙伴"," ","就","便于","广泛","会","担心","很多","学习","到","这些","和","几百","以及","这里","方式","部分","尽量","其中","应用","概念","各位","保留","不","第二","陌生","存在","含义","。","过","也"],"title":"核心概念","title_tokens":["概念","核心"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_3","text":"再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。","text_tokens":["编程语言","具体","一本","写","在","勿躁","两个","道坎","机器人","具备","之后","面向","用到","实现","编码","语言","程序","角度","机器","学","大部头","操作","方式","当","面向对象","同样","也","搬","开发","，","课程","的","看看","确实","如何","大家","更好","后续","过程","会","移植性","部头","项目","再","移植","一步","图片","而言","所示","用","一些","可读","企业","不过","来讲","提高","版本","方法","软件开发","可读性","这","特性","ros1","从","教程"," ","就","暂且","更接","接近","学习","总体而言","和","一页","如","真实","可移植","更","发布","软件","稍安","可移植性","总体","ros2","带领","切记","我们","对象","是","不要","中","难度","多","编程","来","发现","一个","大部","迈过","。","发布者","一边"],"title":"编码方式","title_tokens":["编码方式","方式","编码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_4","text":"最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随教程，你就会慢慢理解这些特性。","text_tokens":["大致","：","在","一种","上升","有","集成","幅度","最为","命令行","除此","之外","这些","把","dds","topic","没","主","印象","你","也","工具","开发","，","的","相关","比如","都","—","陆续","run","对比","大家","变化","rostopic","后续","会","再","而言","某","命令","概念","总结","rosrun","master","选择","下","理解","除此之外","通信","话题","核心","大幅度","跟随","初次","ros","相对","控制","所有","特性","ros1","就是","对","如果","多功能","教程"," ","就","最后","分散","和","现有","更","干掉","启动","慢慢","独立","常用","功能","ros2","做","以上","我们","大幅","表示","好","是","上手","节点","啦","中","难度","了","即可","揭秘","编程","换成","每","一个","。"],"title":"命令行","title_tokens":["命令","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/","text":"ROS2安装方法 本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。 Linux系统简介 时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。 Ubuntu系统简介 我们后续课程使用到的Linux发行版就是 ubuntu系统 。 Ubuntu诞生于2004年10月份， 每六个月发布一个新版本 ，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。 Ubuntu虚拟机安装 虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下： 1. 下载系统镜像 下载链接： https://ubuntu.com/download/desktop 2. 在虚拟机中创建系统 3. 设置虚拟机硬盘大小 4. 设置Ubuntu镜像路径 5. 启动虚拟机 6. 设置用户名和密码 7. 等待系统安装 8. 完成安装 Ubuntu系统安装好后，大家可以先随意使用熟悉一下。 ROS2系统安装 接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下： 1. 设置编码 $ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8 2. 添加源 $ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844 3. 安装ROS2 $ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop 4. 设置环境变量 $ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。 ROS2示例测试 为了验证ROS2安装成功，我们可以通过以下示例进行测试。 示例一：命令行示例 先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。 示例二：小海龟仿真示例 再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["还是","紧随","--","keyring","print","：","小海龟","什么","在","仿真","一种","all","占据","说干就干","看到","环境","apt","两个","keyrings","该","机器人","林纳斯","raw","效果","添加","node","每隔","虽然","机器","保证","变动","connect","architecture","ubuntu","第一次","应用","可能","人工","其","world","于","不","务器","成","诞生","千层","并且","by","locale","，","二个","发行版","光大","年","的","报错","可以","都","虚拟","bash","二句","run","如何","免费","上层","运行","起来","算机","3","技术","过程","擦掌","再","两年","无论是","让","顺序","？","源","通讯","直接","除了","一位","master","下","键盘","现在","相同","创建","不太","以下","有限","方法","热情","核心","编辑","随意",">","setup","控制","为了","对","俱全","turtle","就","提交","同时","发挥","想要","开始","archive","teleop","upgrade","githubusercontent","启动","六个月","此时","计算","功能","参考","接触","一直","模式","source","最大","products","最好","好者","大量","如下","bashrc","好","~","加入","以","tee","编号","新","多","采用","1991","支持","优先","测试","个人爱好","目前","关注","04","22","密码","一个","一般","传播","nodes","一应","了解","其他","越来越","这个","大学","locales","第一个","主要","但",".","或","自己","运动","越来","硬件","管理","等等","7","动手做","发扬光大","sudo","路径","并","一定","成熟","发展","伴随","自行","上下","编码","场景","echo","最为","hello","环境变量","是否","回到","本相","除此","反馈","终端","操作","仿真器","计算机","虚拟机","比较","浏览器","乐于","人工智能","之一","工作","你","lang","节","唯一","guyuehome","量","先","介绍","快速","给","比如","packages","fedora","之前","之内","—","开放","影响","“","多任务","字符串","lts","evaluation","后续","不仅","等待","很多","sources","如遇","到","其他软件","时间","上下左右","各个","turtlesim","概念","下载","1","www","探索","企业","任何","这套","=","分享","(","订阅","动手","unix","试一试","链接","failed","芬兰","互联网","精神","使用","软件开发","[","这","与","绑定","第二句","或者","如果","正常","他","教程","系统","第一","和","源代码","所以","因为","download","arch","各种各样","个人","发布","多个","快","领域","迅猛","建议","lc","普通","紧随其后","时","讲解","ros2","py","最","、","share","任何人",":","小海","点击","叫做","是","原有","代表","了","名字","未来","但是","至此","大学生","接下","合适","内核","数字","key","用户","强大","激发","者","应用程序","实践","cpp","其后","二","操作系统","。","原理","看出","请","一下","时候","尚","前先要","安装","基本","标准","talker","d","行列","情况","demo","这样","实现","界面","提到","命令行","把","每年","指标","先要","下来","dpkg","37844","重要","呢","真器","rosdistro","一","分别","也","指令","摩拳擦掌","2","学生","linux","蕴藏","应用软件","开发","一石激起千层浪","出","5","第一句","utf","并用","windows","打包","依然","步骤","gpg","衡量","公司","修复","会","稳定","main","试试","移植","o","技术实力","list","通用","验证","用户名","唯一标准","叫","一句","已有","检验","-","月份","发扬","文件","通信","通过","已经","来讲","电脑","绝对","curl","应该","lsb","|","联网","激起","等","pro","ros","signed","就是","opt","服务","升级","兼容","户名","”"," ","甚至","ubuntu22.04","listener","设计","en","只","http","这里","会加","可视化","多人","镜像","浏览","好后","设置","进行","\"",")","编辑器","2004","完成","第二个","ssl","做","还","开发者","不同","]","usr","我们","海龟","/","os","各种","表示","简介","准备","啦","节点","中","多用户","操作界面","macos","org","来","任务","18","每","奥义","deb","决定","install","null","为例","发布者","位置","问题","版","中将","操作方法","环境变","另外","一样","有","可视","desktop","蓝色","之后","ubuntu20.04","后","何人","按键","程序","维护","之上","之外","其中","重新","多用","dds","服务器","将","gnupg","很","加上","吧","发行","workstation","https","背景","长期","课程","千层浪","release","实力","原本","humble","准确","8","底层","2022","大家","gen","一起","放到","左右","说明","可","一些","一应俱全","爱好者","命令","考虑","智能","选择","$","成为","除此之外","export","vmware","硬盘","us","地址","成功","命名","华丽","版本","传输","适合","持续","吸引","redhat","dev","etc","熟悉","热爱","上","html","接下来","从","开源","外衣","网络","爱好","个","centos","bug","收费","六个","6","字符","_","codename","更","性能","软件","出现","无论","后缀","update","大小","变量","常用","关于","示例","更新","没有","需要","构建","资料","大","本","各样","适用","10","代码","&&","to","数据","4","经典","月","当中","互联","基本相同","一次","商业","依赖","真理","出于","第二","com","一套"],"title":"ROS2安装方法","title_tokens":["安装","方法","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2","text":"本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。","text_tokens":["了解","linux","ros2","，","最","前先要","安装","一种","的","本","底层","—","我们","一起","系统","操作","先要","重要","操作系统","。","一下","节"],"title":"ROS2安装方法","title_tokens":["安装","方法","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#linux","text":"时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。","text_tokens":["其他","越来越","尚","这个","大学","操作方法","主要","但","在","另外","什么","一样","或","自己","基本","安装","标准","说干就干","看到","越来","硬件","行列","管理","可视","等等","情况","有","动手做","发扬光大","之后","林纳斯","后","并","成熟","何人","伴随","实现","发展","界面","场景","程序","维护","提到","虽然","之上","回到","本相","反馈","操作","把","每年","指标","ubuntu","计算机","其中","重新","多用","应用","其","重要","不","呢","服务器","乐于","务器","成","之一","加上","也","发行","千层","并且","学生","唯一","量","linux","应用软件","开发","先","，","一石激起千层浪","千层浪","发行版","光大","年","的","实力","原本","快速","给","比如","fedora","之前","可以","并用","windows","都","底层","开放","—","准确","打包","免费","衡量","多任务","一起","起来","算机","公司","放到","技术","过程","修复","会","稳定","不仅","很多","到","技术实力","时间","通用","一些","？","唯一标准","爱好者","叫","概念","一位","下","企业","现在","已有","检验","这套","任何","发扬","成为","分享","相同","不太","动手","通过","unix","已经","来讲","命名","有限","华丽","方法","热情","适合","版本","芬兰","互联网","精神","使用","应该","核心","吸引","redhat","联网","激起","等","熟悉","热爱","上","这","与","绑定","就是","开源","对","服务","兼容","外衣","或者","他","教程"," ","就","甚至","提交","系统","爱好","和","设计","源代码","centos","bug","收费","所以","可视化","各种各样","多人","更","镜像","个人","性能","软件","出现","迅猛","此时","讲解","常用","计算","功能","ros2","参考","最","模式","没有","需要","、","还","做","开发者","最好","好者","不同","任何人","大","本","大量","我们","各样","叫做","各种","适用","是","原有","代码","中","加入","了","名字","多","多用户","大学生","操作界面","1991","当中","macos","支持","互联","个人爱好","内核","目前","基本相同","用户","强大","商业","激发","依赖","真理","任务","出于","应用程序","每","一个","实践","一般","操作系统","决定","一套","。","原理","传播","问题"],"title":"Linux系统简介","title_tokens":["linux","简介","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu","text":"我们后续课程使用到的Linux发行版就是 ubuntu系统 。 Ubuntu诞生于2004年10月份， 每六个月发布一个新版本 ，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。","text_tokens":["还是","一应","时候","紧随","其他","主要","在","安装","自己","占据","或","环境","硬件","有","机器人","之后","ubuntu20.04","一定","效果","这样","自行","每隔","维护","机器","保证","变动","除此","之外","ubuntu","其中","应用","比较","人工","浏览器","可能","于","重要","第一次","虚拟机","人工智能","很","诞生","你","也","发行","摩拳擦掌","linux","开发","长期","，","课程","出","发行版","介绍","年","5","的","比如","之前","可以","都","之内","windows","虚拟","2022","依然","如何","免费","大家","影响","上层","lts","后续","会","稳定","擦掌","移植","再","很多","到","两年","无论是","让","各个","一应俱全","顺序","通讯","直接","除了","考虑","智能","选择","已有","月份","文件","除此之外","通过","已经","硬盘","试一试","电脑","绝对","版本","方法","持续","软件开发","互联网","使用","编辑","联网","等","熟悉","上","为了","就是","从","升级","如果","俱全","教程","网络"," ","就","ubuntu22.04","系统","个","第一","只","六个","发挥","会加","想要","这里","因为","所以","浏览","更","发布","性能","快","软件","领域","进行","出现","建议","无论","后缀","六个月","紧随其后","编辑器","普通","时","2004","常用","讲解","更新","参考","接触","一直","最大","、","还","开发者","资料","不同","本","我们","各种","表示","好","是","10","代表","中","4","月","以","编号","了","未来","新","但是","多","支持","优先","互联","合适","数字","关注","用户","一次","04","22","18","每","一个","其后","。","为例","看出","位置","版","一下"],"title":"Ubuntu系统简介","title_tokens":["简介","ubuntu","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu_1","text":"虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下：","text_tokens":["workstation","vmware","其他","https","完成","地址","：","，","在","另外","构建","products",".","安装","的","环境",":","虚拟","可以","pro","我们","/","叫做","如下","html","大家","是","步骤","并","自行","准备","后","运行","啦","evaluation","请"," ","就","采用","之上","系统","其他软件","和","操作","让","同时","这里","虚拟机","开始","下载","www","一个","多个","已有","com","。","-","软件","工作","相同"],"title":"Ubuntu虚拟机安装","title_tokens":["虚拟机","安装","ubuntu","虚拟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1","text":"下载链接： https://ubuntu.com/download/desktop","text_tokens":["download",":","https"," ","下载","desktop","：","/","链接","com",".","ubuntu"],"title":"1. 下载系统镜像","title_tokens":[" ","下载","1","镜像","系统","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2","text":"","text_tokens":[],"title":"2. 在虚拟机中创建系统","title_tokens":["虚拟机","2","虚拟"," ","系统","在",".","中","创建"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3","text":"","text_tokens":[],"title":"3. 设置虚拟机硬盘大小","title_tokens":["3","虚拟机","大小","虚拟"," ","硬盘","设置","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4-ubuntu","text":"","text_tokens":[],"title":"4. 设置Ubuntu镜像路径","title_tokens":["4"," ","镜像","路径","设置",".","ubuntu"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#5","text":"","text_tokens":[],"title":"5. 启动虚拟机","title_tokens":["虚拟机","虚拟"," ","启动",".","5"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#6","text":"","text_tokens":[],"title":"6. 设置用户名和密码","title_tokens":["密码"," ","6","和","设置",".","用户名","用户","户名"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#7","text":"","text_tokens":[],"title":"7. 等待系统安装","title_tokens":[" ","7","等待","系统",".","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#8","text":"Ubuntu系统安装好后，大家可以先随意使用熟悉一下。","text_tokens":["可以","熟悉","先","好后","，","系统","大家","使用","。","安装","随意","ubuntu","一下"],"title":"8. 完成安装","title_tokens":["8"," ","完成",".","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_1","text":"接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下：","text_tokens":["ros2","：","，","安装","可以","我们","如下","接下来","步骤","中","了","就","接下","到","系统","把","ubuntu","下来","。"],"title":"ROS2系统安装","title_tokens":["安装","ros2","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1_1","text":"$ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8","text_tokens":["export","us","locale","locales",".","all","utf","apt","8","sudo","&&","gen"," ","en","_","install","-","$","=","lang","lc","update"],"title":"1. 设置编码","title_tokens":[" ","1","设置",".","编码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2_1","text":"$ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844","text_tokens":["--","keyring","print",".","apt","d","keyrings","raw","sudo","echo","connect","architecture","ubuntu","dpkg","37844","rosdistro","gnupg","by","https","guyuehome","，","release","报错","packages","gpg","“","main","o","sources","如遇","list","可","www","master","-","$","=","(","curl","failed","lsb","[","|",">","dev","ros","etc","signed","”"," ","http","archive","arch","_","codename","githubusercontent","\"",")","update","ros2","参考","source","ssl","share","]",":","usr","/","os","&&","to","tee","org","key","deb","install","com","null"],"title":"2. 添加源","title_tokens":["2"," ",".","源","添加"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3-ros2","text":"$ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop","text_tokens":["humble","ros"," ","desktop","upgrade","install","sudo","-","$","apt","update"],"title":"3. 安装ROS2","title_tokens":["3"," ","ros2",".","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4","text":"$ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。","text_tokens":["已经","ros2","，","source","在",".","安装","humble",">","ros","setup","bash","/","bashrc","~","好","opt","中","echo","了"," ","就","至此","系统","。","$","\""],"title":"4. 设置环境变量","title_tokens":[" ","变量","环境变量","环境变","设置",".","4","环境"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_2","text":"为了验证ROS2安装成功，我们可以通过以下示例进行测试。","text_tokens":["通过","可以","以下","我们","示例","ros2","成功","，","为了","测试","。","进行","验证","安装"],"title":"ROS2示例测试","title_tokens":["示例","ros2","测试"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_1","text":"先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。","text_tokens":["通信","订阅","通过","nodes","以下","ros2","第一个","：","第二个","先","py","，","$","在","二个","传输","没有","的","talker","底层","两个","run","demo","“","节点","中","数据","字符串","”","正常","如果","说明","试试","最为"," ","hello","是否","listener","系统","终端","第一","来","字符","dds","命令","者","_","world","重要","第二","一个","cpp","发布","。","发布者","启动","问题","吧"],"title":"示例一：命令行示例","title_tokens":["命令","示例","：","命令行","一"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_2","text":"再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["关于","示例","试一试","小海龟","：","ros2","背景","蕴藏","，","中将","在","成功","持续","仿真","安装","第一句","的","运动","ros","可以","—","两个","二句","run","小海","海龟","如下","蓝色","控制","该","点击","上","“","第二句","节点","啦","中","经典","运行","上下","按键","”","node","左右","turtle","后续","教程"," ","就","至此","再","上下左右","终端","第一","来","仿真器","key","turtlesim","_","一句","第二","奥义","一个","teleop","键盘","探索","真器","将","。","我们","$","启动","分别","指令"],"title":"示例二：小海龟仿真示例","title_tokens":["示例","小海","：","海龟","小海龟","二","仿真"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/","text":"ROS2命令行操作 在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。 Linux中的命令行 类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。 启动方式 回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。 常用命令操作 我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。 ROS2中的命令行 ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。 运行节点程序 想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看节点信息 当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim 查看话题信息 当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose 发布话题消息 想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 发送服务请求 一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\" 发送动作目标 想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\" 录制控制命令 系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["还是","--","具体","：","小海龟","能够","为什么","什么","在","geometry","仿真","一种","看到","twist","该","不一","里边","'","send","一二","node","虽然","既","笔记本电脑","y","麻烦","保持","哪","第一次","可能","其上","应用","文件名称","于","不","cd","成","常用命令","目录","工具","帮上","，","体会","的","播放","所在","看看","可以","都","run","材料","有点","pose","死记","如何","灵活","运行","删除","起来","3","一步","再","自主","用","拷贝","后边","信息","让","？","需求","直接","跟","下","键盘","请求","相同","创建","现出","不太","不用","完全","忙","若","均","linear","权限","原因","核心","db3","编辑","初次",">","目标","控制","40","对","随身","专门","turtle","哪些","就","小","调用","随着","想要","例如","定制","则","teleop","它","启动","系列","标目","一只","语法","此","此时","笔记","功能","文件名","接触","一直","异常","rm","如下","好","alt","新建","以","多","对于","看似","04","根据","结合","一个","逛来","片段","一边","商场","mkdir","其他","了解","炫酷","这个","第一个","名称","主要","但","t",".","或","自己","统管","管理","想象","sudo","路径","觉得","并","一定","用到","集成","场景","echo","动","消息","回到","终端","这些","0.0","还有","操作","仿真器","执行","info","方式","动作","当前","topic","指定","rate","一二十个","窗口","工作","你","只是","写字","gedit","体操","实验","本节","先","比如","列表","之前","—","从来","太","知道","pub","随身带","记忆","“","{","详细信息","推出","背","提供","很多","到","很少","科幻电影","turtlesim","打开","概念","枯燥","0","1","调试","感觉","这种","约束","angular","试一试","链接","找","使用","+","[","11","这","与","或者","如果","正常","一系列","发指","另","系统","第一","和","源文件","由","现有","因为","所以","做好","msg","看不到","action","服装","件夹","发布","多个","x","数量","地",",","ros2","逛去","产生","、","rotateabsolute","死机","以上",":","小海","叫做","是","原有","查看","鼠标","了","未来","但是","goal","接下","key","用户","款式","转","商家","呈现","深入","。","一下","时候","大致","z","子目","mv","实验室","terminal","这样","去","二十个","实现","看中","什么样","命令行","把","便捷","孤单","下来","重要","呢","令人","rosbag2","真器","一","体验","也","指令","2","linux","详细","出","感受","呀","令人发指","}","ctrl","满足","显示","录制","srv","不到","改名","会","rotate","list","bag","逛来逛去","类似","保留","msgs","-","文件","查","<","通过","适应","已经","选项","来讲","电脑","规则","绝对","目","复现","必不可少","ros","等","不是","所有","进一步","电影","就是","服务","pwd","”"," ","难以","轻松","学习","设计","…","干什么","这里","35","可视化","为","衣服","精心","进行","某个","\"","编辑器","完成","spawn","还","带领","不同","]","theta","我们","海龟","并不一定","/","移入","各种","表示","总","节点","啦","中","即可","turtle1","来","手","每次","一系","多到","十个","想","name","每","笔记本","1.8","至今","为例","问题","内容","参数","ls","record","管理员","改了","一样","目的","不可","怎么","有","可视","多种","死记硬背","要","又","后","受","二十","程序","角度","当前工作","度高","具体操作","复制","call","将","继续","很","加上","vel","背景","复制到","2022","一二十","确实","列出","大家","及","子","科幻","一起","魅力","右键","至于","机制","0.2","某","感兴","一些","改变","被","命令","absolute","选择","输入","快捷键","快捷","$","不过","感兴趣","话题","发送","rosbag","及其","而是","拷贝到","深色","绝对路径","文件夹","熟悉","案例","上","容易","接下来","cp","布料","系统管理员","play","呈现出","总有","字符","_","更","cmd","既定","解决","软件","慢慢","2.0","无论","常用","段","尝试","没有","需要","某段","子目录","主目录","兴趣","本","精心设计","黑客","一件","买","数据","硬","搜索","17","一点","一次","这项","service","不变","目标目录"],"title":"ROS2命令行操作","title_tokens":["命令","命令行","ros2","操作"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2","text":"在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。","text_tokens":["时候","工具","不太","适应","ros2","小海龟","本节","接触","，","在","感受","一种","使用","的","带领","之前","可以","—","我们","案例","海龟","小海","有点","进一步","大家","一定","中","运行","了","如果","魅力"," ","会","多","一步","命令行","学习","到","第一","随着","一次","命令","第一次","可能","重要","更","调试","将","深入","。"],"title":"ROS2命令行操作","title_tokens":["命令","命令行","ros2","操作"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#linux","text":"类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。","text_tokens":["还是","时候","其他","炫酷","能够","为什么","什么","但","在","一样","一种","自己","看到","不可","可视","想象","不一","并","里边","这样","去","受","一定","场景","看中","什么样","命令行","虽然","麻烦","这些","操作","便捷","度高","方式","哪","其上","于","不","呢","成","你","工具","linux","先","，","的","呀","比如","都","可以","材料","满足","大家","灵活","科幻","起来","推出","会","很多","自主","科幻电影","某","一些","？","被","命令","需求","逛来逛去","类似","保留","这种","现出","已经","约束","完全","来讲","规则","使用","必不可少","ros","等","不是","容易","所有","电影","就是","服务","布料"," ","就","小","呈现出","总有","设计","和","这里","想要","现有","可视化","定制","做好","服装","为","衣服","精心","既定","解决","软件","无论","此时","功能","一直","逛去","没有","、","异常","精心设计","我们","并不一定","各种","是","一件","买","中","了","但是","多","对于","来","一点","看似","手","每次","款式","根据","结合","一个","商家","逛来","呈现","至今","。","片段","问题","商场"],"title":"Linux中的命令行","title_tokens":["命令","linux","命令行","中","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_1","text":"回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。","text_tokens":["时候","其他","：","这个","为什么","什么","在","t","看到","怎么","有","多种","又","terminal","并","后","用到","一定","觉得","二十","二十个","一二","命令行","既","笔记本电脑","回到","终端","操作","方式","应用","呢","令人","一二十个","窗口","很","也","指令","工具","写字","背景","，","体会","的","令人发指","所在","ctrl","列表","都","可以","从来","随身带","确实","记忆","大家","一二十","及","科幻","不到","背","魅力","会","右键","至于","到","很少","用","科幻电影","打开","命令","枯燥","选择","输入","快捷键","快捷","不过","通过","不用","电脑","原因","使用","而是","+","初次","深色","熟悉","上","不是","这","电影","就是","对","随身","专门","正常","一系列"," ","就","难以","发指","随着","字符","因为","所以","看不到","数量","软件","慢慢","启动","系列","笔记","常用","功能","需要","一下","死机","本","我们","叫做","黑客","是","alt","中","鼠标","硬","搜索","但是","即可","来","手","这项","一系","多到","十个","笔记本","。","参数"],"title":"启动方式","title_tokens":["启动","方式"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_2","text":"我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。","text_tokens":["ls","mkdir","子目","：","mv","管理员","名称","或","目的","统管","管理","死记硬背","该","sudo","路径","回到","这些","当前工作","保持","把","执行","文件名称","当前","复制","指定","cd","不","将","一","工作","常用命令","体验","目录","只是","也","指令","linux","gedit","先","，","出","复制到","的","列表","可以","显示","死记","列出","大家","“","及","删除","改名","会","用","拷贝","改变","打开","命令","下","感觉","文件","创建","查","<","选项","若","绝对","找","均","链接","权限","目","编辑","及其","[","拷贝到",">","目标","绝对路径","文件夹","熟悉","所有","cp","pwd","或者","”"," ","就","系统管理员","另","系统","源文件","…","由","则","件夹","为","多个","它","地","某个","标目","此","语法","编辑器","常用","功能","文件名","没有","需要","子目录","主目录","]","rm","我们","移入","/","原有","新建","中","以","了","未来","多","对于","来","用户","不变","目标目录","一个","。","一边","一下"],"title":"常用命令操作","title_tokens":["命令","常用命令","操作","常用"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2_1","text":"ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。","text_tokens":["大致","了解","linux","具体","ros2","第一个","体操","小海龟","功能","，","什么","在","话题","主要","核心","仿真","感受","还","也","的","目的","比如","不同","都","可以","有","我们","小海","海龟","所有","与","总","表示","接下来","对","节点","中","一起","集成","node","以","一系列"," ","就","命令行","接下","机制","第一","干什么","操作","后边","具体操作","下来","命令","一系","概念","topic","一个","跟","下","继续","。","为例","系列","相同","不过","内容","参数"],"title":"ROS2中的命令行","title_tokens":["命令","命令行","ros2","中","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_3","text":"想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["ros2","：","，","$","仿真","使用","可以","要","我们","run","海龟","控制","节点","中","运行","node","turtle"," ","和","操作","key","想要","turtlesim","命令","例如","_","teleop","键盘","进行","某个"],"title":"运行节点程序","title_tokens":["运行","程序","节点"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_4","text":"当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim","text_tokens":["：","ros2","详细","，","的","兴趣","ros","都","有","可以","它","知道","/","查看","这样","节点","中","运行","对","子","详细信息","啦","node","如果","哪些"," ","就","系统","来","list","某","感兴","info","？","信息","turtlesim","命令","当前","呢","一个","$","加上","感兴趣"],"title":"查看节点信息","title_tokens":["信息","查看","节点"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_5","text":"当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose","text_tokens":["：","ros2","试一试","，","话题","使用","还","的","看到","都","有","/","如下","pose","查看","子","中","数据","echo"," ","消息","即可","系统","turtle1","list","某","命令","当前","topic","想","呢","一个","$","加上"],"title":"查看话题信息","title_tokens":["信息","话题","查看"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_6","text":"想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":[",","z","通过","angular","--","：","ros2","linear","，","话题","geometry","还","}",":","可以","twist","我们","控制","海龟","pub","/","{","起来","动"," ","命令行","y","0.0","turtle1","想要","命令","直接","topic","rate","_","1","msgs","msg","cmd","发布","x","1.8","$","\"","2.0","vel","指令"],"title":"发布话题消息","title_tokens":["发布","话题","消息"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_7","text":"一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\"","text_tokens":[",","2","\"","试一试","：","ros2","改了","，","产生","spawn","仿真","还","}",":","theta","—","太","我们","海龟","/","服务","{","srv","'","提供"," ","再","y","调用","来","孤单","0.2","仿真器","turtlesim","service","name","call","一个","真器","x","$","一只"],"title":"发送服务请求","title_tokens":["发送","请求","服务"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_8","text":"想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\"","text_tokens":["通过","完成","具体","帮上","这个","忙","：","ros2","，","发送","仿真","rotateabsolute","的","比如","目标",":","theta","可以","海龟","/","这样","中","send","3","提供"," ","角度","命令行","goal","到","turtle1","rotate","让","仿真器","想要","turtlesim","转","动作","命令","absolute","_","指定","action","一个","真器","$","\""],"title":"发送动作目标","title_tokens":["动作","发送","目标"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_9","text":"系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["还是","常用","record","ros2","实验","段","功能","：","尝试","，","实验室","rosbag",".","复现","某段","db3","的","播放","以上","自己","看看","有","可以","11","我们","/","2022","这","录制","如何","好","与","40","大家","就是","啦","子","中","运行","数据","实现","如果"," ","再","轻松","play","很多","回到","系统","turtle1","还有","把","17","用","想要","下来","？","bag","04","命令","35","_","0","每","一个","cmd","rosbag2","-","。","很","$","vel"],"title":"录制控制命令","title_tokens":["命令","控制","录制"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","text":"ROS2开发环境配置 ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。 Git git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git 下载教程源码 《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。 VSCode Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download VSCode插件配置 为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。 中文语言包 Python插件 C++插件 CMake插件 vscode-icons ROS插件 Msg Language Support Visual Studio IntelliCode URDF Markdown All in One VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["visualstudio","具体","：","语言包","intellicode","studio","但","在","另外","肯定","安装",".","all","自己","环境","看到","广泛应用","apt","迅速","硬件","有","管理","上万","等等","成千上万","机器人","cmake","之后","sudo","并","里边","发展","这样","官方","集成","语言","简单","自动","有些","广泛","机器","终端","这些","判断","操作","审核","方式","配置","一款","可能","应用","人工","浏览器","扩展","重要","呢","不","自带","轻量","开发工具","人","也","记事","工具","guyuehome","https","搭建","linux","行","简称","开发","先","，","课程","出","非常","github","年","利器","的","给","比如","快速","理工","《","都","可以","—","听到","windows","切换","support","one","中会","编写","如何","大家","推出","推荐","后续","中文","提供","会","修复","项目","很多","喜欢","让","用","只","一些","？","略显","python","被","命令","管理工具","直接","高效","code","下载","国内","非常简单","插件","调试","神兵","已有","-","离不开","$","文件","成为","icons","》","管理软件","组件","官方网站","链接","版本","方法","网上","千万","增加","使用","入门","编辑","网站","ros","记事本","文件夹","gitee","这","所有","visual","为了","特性","码云","与","开源","因","驱动","几千","clone","如果","教程","丰富"," ","就","便于","一系列","vscode","提交","系统","21","和","不会","之父","冲突","设计","bug","git","常听到","成千","一行","这里","源代码","所以","download","_","更","之间","哪里","浏览","件夹","msg","个人","多个","软件","进行","系列","贡献","微软","urdf","编辑器","编译","完成","复杂","示例","ros2","功能","讲","最","下载方式","in","需要","、","做","开发者","还","tutorials","以上","不同",":","这款","大量","我们","作为","/","好","是","查看","代码","准备","合并","中","功能强大","搜索","了","无限","新","c++","多","支持","2015","macos","不开","language","markdown","以及","强大","每次","一系","几千万","一个","官方网","两款","众多","install","com","操作系统","。","千上万","源码","linus","内容","而生","变更"],"title":"ROS2开发环境配置","title_tokens":["ros2","环境","开发","配置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros2","text":"ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。","text_tokens":["工具","编译","完成","示例","开发","先","，","课程","需要","肯定","、","做","的","环境","给","ros","大量","—","我们","机器人","中会","编写","如何","大家","查看","代码","准备","推荐","提供","vscode","机器","不开","这些","和","git","一些","？","配置","重要","呢","两款","离不开","。","源码","开发工具"],"title":"ROS2开发环境配置","title_tokens":["ros2","环境","开发","配置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#git","text":"git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git","text_tokens":["具体","在","肯定","安装","看到","广泛应用","apt","迅速","硬件","有","管理","上万","等等","成千上万","之后","sudo","并","发展","简单","自动","有些","广泛","终端","这些","判断","审核","一款","可能","应用","人工","不","人","也","工具","linux","行","开发","，","非常","github","的","比如","理工","都","可以","—","听到","切换","大家","会","修复","项目","让","被","命令","管理工具","直接","高效","国内","非常简单","已有","$","管理软件","版本","方法","千万","增加","使用","网站","gitee","这","所有","特性","码云","开源","因","驱动","几千"," ","就","提交","系统","和","不会","之父","冲突","设计","bug","git","常听到","成千","一行","所以","之间","哪里","多个","软件","进行","贡献","完成","功能","需要","开发者","不同","这款","我们","是","合并","代码","中","了","新","以及","每次","几千万","一个","众多","install","。","千上万","linus","内容","而生","变更"],"title":"Git","title_tokens":["git"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_1","text":"《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。","text_tokens":["guyuehome","https","复杂","ros2","：","讲","开发","，","课程","下载方式","另外",".","入门","还","的","tutorials","环境","《",":","有","记事本","文件夹","—","/","gitee","好","是","里边","代码","这样","查看","中","clone","集成","如果","推荐"," ","文件","会","多","就","vscode","很多","系统","21","和","用","git","这里","方式","略显","_","浏览器","下载","更","浏览","一个","件夹","com","自带","。","$","源码","》","记事"],"title":"下载教程源码","title_tokens":["源码","教程","下载"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode","text":"Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download","text_tokens":["编辑器","visualstudio","https","搭建","linux","功能","：","简称","组件","开发","官方网站","studio","，","在","但","链接","非常","、",".","年","编辑","的","利器","快速","网站",":","可以","windows","/","visual","是","代码","功能强大","官方","推出","丰富"," ","项目","vscode","支持","2015","macos","系统","和","源代码","操作","强大","成为","download","扩展","code","下载","一个","官方网","操作系统","神兵","com","。","轻量","微软"],"title":"VSCode","title_tokens":["vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode_1","text":"为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。","text_tokens":["ros2","功能","开发","，","还","安装","的","可以","我们","与","为了","后续","一系列","无限","便于","vscode","一系","扩展","调试","插件","。","系列"],"title":"VSCode插件配置","title_tokens":["vscode","插件","配置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_2","text":"","text_tokens":[],"title":"中文语言包","title_tokens":["语言包","中文","语言"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#python","text":"","text_tokens":[],"title":"Python插件","title_tokens":["python","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#c","text":"","text_tokens":[],"title":"C++插件","title_tokens":["插件","c++"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#cmake","text":"","text_tokens":[],"title":"CMake插件","title_tokens":["cmake","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode-icons","text":"","text_tokens":[],"title":"vscode-icons","title_tokens":["icons","vscode","-"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros","text":"","text_tokens":[],"title":"ROS插件","title_tokens":["ros","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#msg-language-support","text":"","text_tokens":[],"title":"Msg Language Support","title_tokens":["support","msg","language"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#visual-studio-intellicode","text":"","text_tokens":[],"title":"Visual Studio IntelliCode","title_tokens":["visual","studio","intellicode"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#urdf","text":"","text_tokens":[],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#markdown-all-in-one","text":"VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["开发","，","最","在","网上","出","自己","的","环境","以上","可以","作为","大家","搜索","推荐","vscode","支持","喜欢","只","配置","插件","个人","众多","。","也"],"title":"Markdown All in One","title_tokens":[" ","one","in","markdown","all"]}]}