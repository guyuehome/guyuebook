{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的电气时代。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的数字时代，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发，智能机器人时代正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。 教程链接 课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 博客泡泡： https://www.guyuehome.com/ 教程问答： https://www.guyuehome.com/bubble/index 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 参考资料： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["pan","由示","exc6","大","算机","robot","人工智能","机器","计算","s","更加","、","book","局部","正式","gitee","最为","智能","狗","视觉","家庭","系统","https","我们","github","于","视频","bubble","而言","主角","送餐","过程","。","关注","四足","教器","俗称","这是","拉开","的","减速","class","汽车","并","问答","按照","应用","—","动力","21","八十","工业生产","之后","baidu","agv","拉开序幕","操作","驱动器","缺少","只能",".","层面","智能化","人工","操作系统","载体","检测","对","等","完全","，","2000","就是","前夜","经历"," ","动作","人类","也","服务","参考资料","电机","ai","提出","设备","最佳","减速机","快速","index","教程","ros2","三个","状","劳动力","逐渐","主要","数字","伺服","发展","后","不断丰富","传感器","执行","时代","伺服电机","感知","这","七八十年","太","泡泡","横跨","出现","七八","工厂","_","www","提取","operating","资料","控制","思考","没有","重要","工业","1dvxugmhxlxnsnfdezuxw0g","类型","业生","依然","帮助","课程","和","不过","/","技术","要求","控制器","操控","计算机","博客","自主","软件","多","是","更","成为","机器人","2015","之一","丰富","驾驶","不断","tutorials","自动","命令","年","年前","参考","电气","码","释放","链接","感器","com","必将","七八十","井喷","高","guyuehome","图文","源码","此时","有限","时期","爆发","开发","生产","随着","仿生","传感","劳动","system","十年","了","环境","序幕","驱动","呈",":","：","但是","八十年","热点"],"title":"引言","title_tokens":["引言"]},{"location":"#_1","text":"课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 博客泡泡： https://www.guyuehome.com/ 教程问答： https://www.guyuehome.com/bubble/index 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 参考资料： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["pan","class","问答","exc6","index","21","教程","ros2","baidu","tutorials","s","参考","码","book",".","泡泡","com","链接","gitee","提取","图文","guyuehome","www","源码","_","资料","https","1dvxugmhxlxnsnfdezuxw0g","github","视频","bubble","课程",":","：","/"," ","参考资料","博客"],"title":"教程链接","title_tokens":["教程","链接"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["+","至今","提供","用户","追究其","有权","古月","地区","众多","一体","建立","优质","机器","高质","创建","责任","及","、","本","学习","图书","复制","课件","如需","作品","2011","法律","进行","社区","累积","视频","模式","明者","线上","声明者","brand","。","将","授权","但","实践","知名","均","对本","未来","的","追究","书面","高质量","网站","面向","产品","学习者","包括","单位","与","合作","交流学习","出版","《","究其","所有","上","培养",".","华语","生态","通过","》","联系","ros","等","居","人才","，","构建","捆绑","限于","抄录"," ","上述","ai","赋能","企业","使用","未经","许可","人才培养","请","@","质量","（","科技","微控","致力","学","集","被","致力于","www","其它","内容","有限公司","1000","创新","万字","精锋","拥有","课程","和","或","校企","小时","为","仅限","传播","不得","是","机器人","畅销","交流","超过","法律责任","个人","武汉","不","高校","平台","销售","年","公司","修改","合法","万人","com","guyuehome","违反","）","源码","版权","有限","声明","开发","镜像","努力","依法","面向未来","任何","120"],"title":"关于教程","title_tokens":["关于","教程"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["+","至今","提供","用户","古月","地区","众多","一体","建立","优质","机器","高质","创建","及","、","学习","图书","2011","社区","累积","视频","模式","线上","。","实践","知名","未来","的","高质量","面向","学习者","与","合作","交流学习","出版","《","培养",".","华语","生态","通过","》","ros","等","居","人才","，","构建"," ","ai","赋能","企业","人才培养","质量","（","致力","集","致力于","www","内容","1000","创新","万字","课程","校企","小时","为","是","机器人","畅销","交流","超过","高校","平台","年","万人","com","guyuehome","）","开发","努力","面向未来","120"],"title":"学机器人，上古月居","title_tokens":["，","机器","机器人","上","学","居","古月"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["用户","追究其","有权","古月","责任","、","本","学习","复制","课件","如需","作品","法律","进行","视频","明者","声明者","brand","。","将","授权","但","均","对本","的","追究","书面","网站","产品","包括","单位","与","究其","所有",".","联系","等","居","，","捆绑","限于","抄录"," ","上述","使用","未经","许可","请","@","科技","微控","被","其它","有限公司","精锋","拥有","课程","和","或","为","传播","仅限","不得","法律责任","个人","武汉","不","销售","公司","修改","合法","com","guyuehome","违反","源码","版权","有限","声明","镜像","依法","任何"],"title":"版权声明","title_tokens":["声明","版权"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/","text":"ROS/ROS2是什么 智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。 ROS的诞生 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS的发展 ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称ROSCon，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。 ROS的特点 ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的应用案例在社区中沉淀下来； ROS本身也是完全开源的，商业许可证非常宽松； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品，缩短了产品的上市时间； ROS也可以跨平台使用，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多支持工业应用的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。 参考资料 关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["衣服","微软","google","迭代","项目","基本","这里","活跃","所有人","官方","独立","百万","齐聚一堂","尽量","robot","一定","电脑","绝大","斯坦福大学","开发者","事情","多年","百科","org","代码","算是","回到","要","欢迎","智慧","物体","正式版","智能","研究","无论","系统","后期","intel","浏览量","光靠","做出","2011","此后","得到","于","原型","250","第一个","25","越来","图","生态系统","设计","排名","下载","绝大部分","目标","几年","应用","移动","维基百科","页面","不多","改为","起","配合","操作","引擎","每","上","好","发表","初期","以上","进步","斯坦福","人","通过","能够","肩负着","模块化","详细","等","不是","一步","人才","掌握","很","大步","通常","willow","挑战","进化","提高","制造","经历","扩展","关于"," ","参考资料","接下来","年轻人","想法","最佳","index","上图","根据","却","月底","知识","多万","不断更新","传感器","多项","之内","尝试","今日","机制","虽好","便宜","？","次数","被","真正","可以","一起","同学","资料","控制","才","一次","重要","稳定","一系列","大大","别人","带领","而且","叠","实现","课程","/","非常","真的","笔记本","为","从","着","简称","创意","软件","多","来讲","是","普遍","软件系统","全新","推出","garage","组成","总体","肯定","查看","笔记本电脑","变为","不断","加","而","不乏","标志","适用","不开","系列","因为","精致","圈","家","方法","围绕","步伐","人形","据库","生态系","这款","近几年","特点","此时","维基百","开源","150","资金","加上","全球化","从中","实验室","windows","整理","聊天","浪潮","上边","很快","革命","增长速度","至今","没想到","单独","world","用户","基于","上去","古月","80","一大笔钱","浏览","机器","台球","了解","繁荣","主阵地","巨人","跑","高效","一个","5","、","本","因","收拾","学习","ubuntu","最为","大笔","结晶","居高不下","基本上","张图","望而却步","零部件","github","受限于","又","而言","大有可为","成本","说干就干","过程","入门教程","对于","想到","。","下来","记录","轰动","c","无疑","团队","向前","早期","呢","苹果","肩膀","出来","自己","—","亚马","一样","各项","选择","其他","当初","几个","既然","整合","类似","轮子","一些","缩短","游戏机","到","明智","2014","打","生态","有志","托管","近两年","操作系统","万左右","pr2","却步","四项","美妙","左右","就是","投资","关键","迎来","价格","新鲜","服务","助推","原本","跨平台","大部分","数据","友好","一大步","不仅","日常","统统","动机","两个","时间","资源","疫情","熨烫","增长","场景","15","逐渐","局限性","代表","主要","更好","所以","支持","发展","20","时代","一届","几百","柔性","大量","采购","100","举办","成熟","嵌入式","维基","内容","起点","曲线","一段","discourse","没有","许可证","已有","性能","本身","实验","帮助","臂","掀起","做","和","神兵","论坛","认识","方向","媒体","毛巾","野蛮","万","更","领域","机器人","青年","复合","一大","大部","各种","不","看中","平台","讨论","年","b","促使","长期","”","针对","世界","做饭","为什么","来看","嘉宾","历经","这个","比如","向","同理","由","巨大","kinect","强悍","这些","效果","重量级","传感","这位","效率","条","爆款","任何","速度","中","120","手机","2007","时间轴","开始","“","2017","不下","多媒体","几百万","给","大","ros1","乐意","程度","answers","福大","统计","诞生","只要","陪","离不开","搜索","还","率","长远","体感","问题","来自","简单","wiki","同样","一大笔","正如","其次","答案","现在","数据库","我们","月","工程","使命","为了","社区","剪头发","不同","推荐","线上","深知","集合","将","各种各样","版本","甚至","应用软件","阵地","的","推进","网站","问答","时候","趋势","humble","水下","一群","动力","四大","2","注意","前","做法","如果","几乎","所有","案例",".","越来越","复用","棒","之旅","40","更为","零","处理","怀揣","居","工程师","迅猛","完全","代","不想","活动","限于","也","提出","不到","每年","快速","说明","同时","一下","高度","ros2","直接","教程","亚马逊","远","各样","只","加快","直到","在","给出","商业","进入","新鲜事","这","访问","泡泡","价格便宜","横跨","无论是","作为","operating","第一","很多","工业","希望","自身","绝对","第一次","清晰","虽然","跟随","国家","最后","终于","技术","下","电路","那","你","复杂","嵌入","来到","面纱","其中","存储","2015","访问量","还是","机械","找到","一堂","参考","风险投资","用","万人","感器","之上","多媒体系统","开发工具","conference","正在","xbox","源码","大家","同年","木头","有人","这样","可能","首先","分钟","洗衣","一家","roscon","个","就","地域","一款","标准","有没有","来","不要","；","叫做","全球","有","新增","分享","提供","联合","商业化","或者","板块","一切","肩负","部分","大学","年底","其实","正式","差不多","版","情况","大会","风险","只想","包","进行","一系","视频","接下","资本","元素","为例","工具","上市","专业","通信","已经","广泛","低","这是","投了","底盘","无聊","全书","让","汽车","并","还有","图中","重新","产品","所学","快","神秘","之","成果","量级","2010","万万","每个","层面","采用","最高","智能化","如何","功能","回答","推动","后续","限性","personal","linux","ros","对","当时","认识一下","完成","，","讲解","这一波","解决","笔记","百科全书","玩耍","一套","packages","做到","具备","人类","利器","部件","两年","提问","使用","许可","频繁","没想","熟悉","起来","2012","活跃度","确定","重量","索引","看到","介于","名称","等等","充足","可为","提取","游戏","普及","入门","框架","站","宽松","更新","把","年轻","涉及","款","做成","以","移动机器人","研发","模块","体系","人数","新","这群","成为","啦","外观","什么","造","特性","相关","该","个人","头发","踏上","而生","局限","用于","他们","此","公司","总而言之","容易","创始","向前走","核心","身影","会","全","a","度","全人类","暴露","学术","原因","开发","随着","成功","扫地","五年","得以","system","2022","都","总称","发布","了","之王","然后","以叠","努力","：","时至今日","但是","受限","沉淀","全人","方式","同一","干","turtlebot"],"title":"ROS和ROS2是什么","title_tokens":["是","和","ros","什么","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#rosros2","text":"智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。","text_tokens":["的","提出","那","是","面纱","应用","机器人","呢","一下","什么","高度","ros2","而生","场景","机器","神秘","操作","量级","重量","时代","这","？","嘉宾","智能化","正在","智能","向","操作系统","一起","全","大家","巨大","系统","对","ros","认识","开发","我们","认识一下","带领","重量级","，","又","这位","接下","掀起","挑战","了","。","进化","就","中","下来"," ","接下来","方向"],"title":"ROS/ROS2是什么","title_tokens":["是","/","ros","什么","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。","text_tokens":["衣服","有","分享","所有人","独立","联合","基于","福大","robot","诞生","只要","陪","斯坦福大学","机器","台球","或者","事情","还","一切","高效","问题","一个","大学","5","、","同样","要","收拾","因","答案","物体","智能","研究","系统","后期","有没有","我们","光靠","做出","零部件","剪头发","原型","一系","深知","说干就干","为例","对于","。","专业","甚至","越来","已经","应用软件","图","轰动","低","的","无聊","设计","团队","并","图中","时候","向前","呢","应用","苹果","一群","出来","自己","—","2","操作","既然","如果","类似","所有","上","一些","初期","越来越","层面","如何","功能","打","推动","有志","斯坦福","人","操作系统","pr2","personal","ros","等","不是","完成","当时","处理","，","很","大步","就是","代","玩耍","不想","一套"," ","也","服务","想法","部件","不到","一大步","却","熨烫","干","只","所以","在","看到","给出","之内","尝试","这","？","柔性","横跨","充足","100","可以","一起","才","很多","第一","没有","重要","一次","一系列","第一次","别人","性能","虽然","框架","实验","帮助","而且","叠","做","实现","最后","和","技术","非常","真的","涉及","款","软件","电路","多","那","是","毛巾","你","复杂","更","软件系统","组成","成为","机器人","青年","其中","肯定","外观","什么","一大","个人","头发","不","而生","机械","找到","平台","用于","他们","系列","因为","年","精致","圈","家","容易","针对","做饭","为什么","用","这个","这款","向前走","此时","大家","木头","有人","同一","资金","强悍","开发","这样","学术","得以","可能","都","分钟","从中","了","洗衣","效率","实验室","个","就","：","以叠","条","整理","聊天","中","但是","一款","标准","手机","2007","很快"],"title":"ROS的诞生","title_tokens":["的","ros","诞生"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_1","text":"ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称ROSCon，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。","text_tokens":["微软","2017","不下","此后","迭代","叫做","几百万","全球","没想到","项目","分享","给","大","这里","单独","world","官方","百万","齐聚一堂","福大","robot","诞生","一大笔钱","电脑","绝大","斯坦福大学","开发者","机器","了解","多年","体感","肩负","部分","问题","大学","来自","一个","年底","5","、","回到","本","一大笔","正式","ubuntu","正式版","现在","大笔","居高不下","系统","后期","版","intel","望而却步","风险","2011","大会","只想","使命","为了","于","我们","原型","受限于","进行","资本","成本","线上","过程","想到","。","各种各样","第一个","版本","越来","已经","投了","这是","底盘","的","设计","绝大部分","让","团队","几年","早期","应用","humble","—","自己","亚马","出来","一样","开始","改为","起","当初","注意","前","操作","每","类似","所有","2010","游戏机","万万","到","采用","越来越","每个","功能","2014","推动","斯坦福","操作系统","人","pr2","近两年","限性","能够","肩负着","却步","ros","等","，","讲解","笔记","willow","投资","关键","迎来","价格","经历","限于","也"," ","年轻人","服务","助推","原本","提出","两年","大部分","每年","使用","快速","不仅","没想","直接","ros2","时间","月底","亚马逊","熟悉","疫情","增长","2012","教程","逐渐","局限性","各样","所以","确定","支持","加快","在","发展","传感器","直到","商业","进入","时代","一届","名称","介于","这","虽好","几百","便宜","价格便宜","被","举办","成熟","提取","真正","可以","游戏","起点","operating","控制","第一","普及","稳定","重要","大大","跟随","做","和","把","年轻","终于","下","笔记本","款","为","从","着","简称","软件","多","是","时间轴","野蛮","这群","更","全新","推出","garage","成为","机器人","其中","一大","2015","笔记本电脑","该","大部","变为","个人","各种","看中","局限","而","不乏","标志","适用","他们","因为","一堂","年","公司","圈","长期","风险投资","感器","创始","之上","步伐","历经","这个","conference","xbox","身影","会","同年","开源","暴露","kinect","原因","加上","开发","随着","成功","传感","扫地","五年","system","2022","发布","了","一家","roscon","爆款","就","但是","受限","中","一款","2007","turtlebot","很快"],"title":"ROS的发展","title_tokens":["发展","的","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_2","text":"ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的应用案例在社区中沉淀下来； ROS本身也是完全开源的，商业许可证非常宽松； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品，缩短了产品的上市时间； ROS也可以跨平台使用，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多支持工业应用的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["“","来","不要","；","至今","多媒体","全球","有","新增","分享","给","ros1","这里","上去","尽量","商业化","机器","繁荣","率","还","巨人","跑","长远","部分","一个","简单","、","正如","智慧","智能","无论","结晶","系统","我们","社区","集合","。","将","工具","各种各样","上市","下来","通信","已经","广泛","c","越来","生态系统","的","设计","推进","汽车","目标","并","向前","肩膀","移动","水下","重新","应用","自己","产品","四大","做法","引擎","整合","之","成果","轮子","上","案例","缩短","明智","到","复用","越来越","智能化","功能","进步","生态","零","linux","模块化","ros","对","不是","怀揣","一步","人才","完全","，","通常","就是","提高","制造","做到"," ","也","具备","人类","跨平台","友好","使用","快速","统统","许可","动机","同时","ros2","直接","时间","远","各样","代表","支持","发展","在","看到","多项","商业","今日","机制","这","采购","被","无论是","嵌入式","可以","一起","很多","许可证","工业","自身","已有","别人","站","本身","宽松","臂","做","实现","最后","和","把","技术","非常","从","做成","创意","着","以","媒体","软件","移动机器人","来讲","多","普遍","体系","模块","是","那","更","领域","嵌入","新","组成","成为","机器人","复合","造","特性","各种","还是","用于","机械","平台","他们","b","促使","公司","此","”","家","围绕","多媒体系统","开发工具","人形","这个","生态系","比如","向前走","核心","身影","会","a","同理","大家","由","特点","全人类","开源","开发","这些","这样","全球化","总称","都","了","一家","就","：","时至今日","沉淀","全人","中","windows","标准"],"title":"ROS的特点","title_tokens":["的","特点","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_3","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。","text_tokens":["增长速度","；","全球","有","基本","给","大","这里","活跃","用户","程度","answers","统计","80","绝大","浏览","开发者","机器","百科","org","问题","一个","部分","wiki","算是","其实","、","本","学习","最为","现在","基本上","差不多","数据库","情况","张图","我们","浏览量","月","包","得到","社区","不同","而言","大有可为","元素","250","。","25","记录","越来","已经","这是","的","排名","无疑","网站","绝大部分","下载","问答","几年","趋势","呢","应用","维基百科","页面","不多","动力","各项","选择","其他","快","几个","整合","每","如果","上","发表",".","最高","每个","到","越来越","功能","棒","以上","40","回答","更为","人","万左右","通过","ros","等","迅猛","，","四项","很","左右","这一波","就是","packages","活动","新鲜","关于"," ","也","利器","助推","提出","最佳","大部分","数据","使用","快速","说明","日常","index","频繁","两个","上图","根据","教程","资源","起来","增长","15","活跃度","代表","多万","发展","在","索引","20","看到","新鲜事","这","访问","？","等等","次数","可为","作为","可以","维基","曲线","很多","discourse","重要","希望","绝对","清晰","国家","和","神兵","非常","从","论坛","研发","多","是","人数","新","万","你","总体","成为","机器人","其中","存储","什么","相关","查看","大部","各种","访问量","不","浪潮","加","讨论","参考","总而言之","来看","万人","比如","据库","源码","正在","核心","近几年","会","大家","度","维基百","150","开发","这些","都","发布","了","任何","就","：","速度","地域","方式","中","乐意","上边","革命"],"title":"ROS的社区","title_tokens":["的","ros","社区"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#_1","text":"关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["google","提供","有","项目","分享","这里","古月","一定","离不开","绝大","搜索","机器","板块","主阵地","还","百科","问题","部分","一个","代码","本","要","学习","欢迎","其次","最为","我们","工程","github","推荐","社区","视频","入门教程","。","将","工具","全书","阵地","的","网站","绝大部分","还有","—","所学","几个","配合","几乎","所有","好","之旅","后续","托管","ros","详细","居","工程师","掌握","，","解决","美妙","百科全书","扩展","关于","也"," ","参考资料","大部分","提问","使用","教程","ros2","知识","主要","更好","在","不断更新","这","大量","泡泡","作为","可以","一起","内容","一段","同学","资料","重要","入门","更新","课程","和","最后","技术","从","是","你","来到","成为","机器人","啦","大部","踏上","不断","找到","不开","参考","方法","世界","万人","这个","会","大家","开源","开发","效果","之王","努力","首先","都","然后","中","120","开始"],"title":"参考资料","title_tokens":["参考","参考资料","资料"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/","text":"ROS2对比ROS1 在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。 ROS1的局限性 首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。 全新的ROS2 ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。 ROS2 vs ROS1 系统架构 在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。 DDS通信 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。 核心概念 ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。 编码方式 再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。 命令行 最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随课程，你就会慢慢理解这些特性。","text_tokens":["单兵作战","一种","较","基本","项目","是从","物","移植性","这里","启动","性","独立","看","百万","只不过","尽量","一定","电脑","建立","绝大","涌现","开发者","雷达","原有","新版","受制于","深入","更加","调试","代码","加入","一边","要","分布式","智能","研究","无论","以及","系统","可靠","api","学术研究","5g","于","国际","多功能","编程","第一个","暂且","第二","它","越来","设计","rostopic","绝大部分","目标","售价","应用","库会","格局","先","项目管理","航天","编写","操作","大部头","每","只能","可读性","上","好","分布","内部","变得","迈过","指挥","一页","主","建筑","天翻地覆","面对","借助","中间","以上","干掉","总结","通过","能够","开发方式","升级","底层","工作站","一代","等","不是","依赖","一步","小伙","道坎","挑战","信号","更接","除了","提高","揭秘","广泛应用","作战"," ","最佳","企业","通用","接收","运动","各位","微控制器","消费市场","历史","迁移","听","交付","丢","选项","相对","机制","学","？","run","真正","可以","体验","控制","保证","批量生产","完善","稳定","重要","测试","带领","成功经验","实现","课程","/","要求","非常","控制器","从","为","延迟","简称","解算","例子","软件","多","最终","是","一团乱麻","来讲","全新","软件系统","总体","再","盖","肯定","下要","连接","经常","编译器","编译系统","通信接口","初次","完整","不断","发布者","而","可移植性","走","适用","因为","命令","程序","地方","修改","方法","省略","这台","接入","发现","打交道","理器","幅度","开源","不难","专注","难度","网络连接","环境","驱动","windows","一团乱","方便","所示","干扰","图片","搬","算力","宕机","colcon","用户","基于","联网","udp","机器","计算","1ms","周期","了解","多个","分解","一个","理解","过去","、","本","学习","优化","安装","最为","突然","张图","精力","而言","成本","过程","对于","。","翻新","内","二种","面向","按照","相比","呢","—","自己","远比","行人","一样","存在","走向市场","选择","其他","小伙伴","力学","类似","一些","一致","保障","到","对系统","左侧","操作系统","pr2","彼此","流程","完整性","课时","是否","运行","借鉴","客户端","搭载","就是","why","得","重来","中间层","ament","进程","服务","原本","改","跨平台","大部分","考虑","数据","不仅","走向","最","之间","两个","请","符合","减少","middleware","时间","资源","架构","三个","完","场景","局限性","主要","更好","支持","（","所以","带来","发展","小","布式","后","举","时代","印象","几百","大量","嵌入式","没有","听说","很大","性能","阶段","opensplice","乱麻","做","消失","和","真实","毛坯","发成","不会","没","部署","discovery","足够","更","更具","除此之外","机器人","另外","定义","amr","大部","丰富","话题","各种","不","一团","单兵","平台","下边","二个","共享内存","稍安","指定","针对","复杂度","为什么","来看","比","链接","第二个","实力","不好","比如","这个","里","高","两者","可选项","巨大","不能","集成","这些","生产","唯一","尤其","适配","运算","厂家","任何","颠覆性","哪些","中","手机","出错","开始","编程语言","解密","千差万别","几百万","管理器","ros1","大","给","python3","陆续","诞生","只要","除此","还","率","担忧","常","策略","长远","问题","自","交给","简单","经验","同样","也许","只有","最大","答案","工作","当然","继续","master","我们","定性","工程","二代","为了","使命","不同","社区","语言","行为","生活","厂商","主角","一一","换成","共享","通信协议","各种各样","将","放在","可靠性","版本","但","甚至","会成","的","总之","不用","一旦","至关","时候","名字","配置","想要","纠结","动力","切记","与","注意","如果","几乎","实时性","轻松","调用","所有","之前","打成","越来越","复用","伙伴","明显","大致","对象","么","过","细节","第二种","处理","怀揣","之初","全部","接口","也","可选","设备","有线","rosbuild","现有","翻地","如","说明","命令行","整体","同时","确实","一下","ros2","直接","教程","大幅度","良好","推倒","属性","各样","编码","信息","topic","在","面临","商业","这","安全性","封装","上升","保留","看看","诸多","发","之外","个体","节点","接近","第一","能","很多","macos","提","类型","而已","通用性","虽然","当","以下几点","跟随","致使","最后","不断涌现","右侧","系统工程","下","从而","某","时","尽力","不难理解","那","你","复杂","嵌入","编码方式","其中","成","担心","驾驶","管理","概念","找到","用","不太","之上","结合","大家","应该","对比","这样","一行","发送","可能","首先","差异","怎样","一家","编译","就","历史使命","间层","一款","标准","过来","上手","能力","基础","来","rmw","；","不要","提供","叫做","有","全球","强壮","总体而言","灵活","协作","需求","慢慢","交道","或者","标准化","可移植","部分","面向对象","其实","另","即可","常用","陌生","家庭","最新","协议","几点","不够","条件","风险","消费","具体","变革","进行","高昂","还会","工具","通信","已经","广泛","未来","体现","wifi","tcp","让","汽车","并","还有","稳定性","产品","重新","移植","勿躁","市场","角色","ceo","之后","安全","产品开发","android","接触","层面","每个","应用层","100ms","如何","以下","功能","后续","限性","大幅","rtos","新一代","颠覆","linux","级别","ros","对","完成","收","更换","，","只是","解决","变化","讲解","网络","便于","满足","一套","开发成本","一本","做到","入侵","具备","装修","层","有且","使用","房子","推倒重来","频繁","mcu","软件开发","rosrun","熟悉","电脑系统","产品化","毛坯房","似乎","c++","不爽","由于","名称","至关重要","适合","意义","充足","出现","需要","fastrtps","表示","基本保障","普及","受制","切换","可读","简单明了","框架","前方","依然","无法","dds","把","不过","或","到底","款","做成","去","研发","国际标准","含义","强","部头","啦","不再","什么","特性","相关","该","导致","局限","用于","他们","自动","方案","python","公司","动力学","vs","图像","角度","实时","客户","黑客","写","是因为","）","核心","用到","会","全","有限","批量","他","先进","开发","学术","加密","catkin","随着","运动学","成功","第二代","都","自家","发布","了","然后","分散","最早","：","但是","方式","内存","诟病"],"title":"ROS2对比ROS1","title_tokens":["ros1","对比","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2ros1","text":"在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。","text_tokens":["的","多","使用","你","有","ros1","大","其中","ros2","不"," ","在","之前","上","一个","名称","这","也许","来看","学习","？","看看","么","过","能","ros","听说","我们","对比","二代","，","第二代","变化","做","就是","和","或","就","。","到底","第二","从"],"title":"ROS2对比ROS1","title_tokens":["ros1","对比","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros1","text":"首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。","text_tokens":["能力","干扰","；","单兵作战","算力","有","ros1","独立","诞生","绝大","涌现","机器","计算","或者","担忧","问题","部分","一个","更加","要","答案","工作","研究","当然","家庭","系统","可靠","不够","条件","学术研究","我们","风险","具体","为了","成本","主角","高昂","。","第一个","可靠性","它","通信","已经","甚至","的","设计","不用","绝大部分","让","汽车","目标","并","售价","呢","应用","产品","—","自己","航天","走向市场","市场","只能","类似","上","一些","内部","天翻地覆","pr2","新一代","级别","ros","工作站","处理","完成","一代","运行","，","搭载","网络","就是","why","作战"," ","具备","入侵","服务","也","原本","设备","有线","大部分","数据","翻地","走向","历史","ros2","时间","资源","良好","支持","丢","发展","小","似乎","在","由于","这","适合","？","充足","出现","嵌入式","可以","第一","保证","批量生产","没有","普及","类型","虽然","框架","致使","课程","和","不断涌现","款","从","做成","软件","最终","那","是","复杂","足够","嵌入","机器人","什么","连接","大部","驾驶","各种","不","不断","找到","单兵","平台","用于","因为","自动","地方","针对","实时","这台","为什么","来看","用","黑客","实力","是因为","比如","会","有限","批量","他","先进","开发","这样","生产","学术","随着","网络连接","运算","首先","都","了","最早","：","就","但是","中","一款"],"title":"ROS1的局限性","title_tokens":["的","局限","局限性","限性","ros1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2","text":"ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。","text_tokens":["一种","较","基本","项目","性","独立","尽量","一定","电脑","开发者","原有","新版","受制于","更加","调试","代码","要","分布式","智能","无论","以及","系统","可靠","api","于","第一个","第二","它","越来","设计","应用","格局","项目管理","编写","操作","上","好","分布","建筑","借助","面对","能够","升级","等","不是","挑战","信号","除了"," ","最佳","通用","运动","微控制器","消费市场","历史","相对","机制","？","真正","可以","体验","控制","稳定","测试","成功经验","实现","课程","要求","控制器","为","解算","软件","多","最终","是","全新","盖","肯定","下要","连接","经常","编译器","编译系统","完整","修改","方法","发现","理器","网络连接","环境","windows","方便","算力","宕机","colcon","机器","1ms","周期","分解","一个","过去","、","优化","。","翻新","内","二种","相比","呢","自己","远比","行人","选择","力学","类似","保障","到","对系统","操作系统","流程","完整性","课时","运行","借鉴","搭载","就是","得","重来","ament","原本","跨平台","考虑","数据","不仅","走向","之间","两个","架构","场景","（","所以","后","布式","时代","大量","没有","很大","性能","阶段","和","毛坯","不会","部署","更","更具","机器人","amr","各种","不","平台","针对","比","来看","链接","不好","比如","这个","巨大","不能","这些","尤其","任何","颠覆性","中","手机","出错","解密","千差万别","管理器","ros1","大","给","python3","还","策略","长远","问题","简单","经验","工作","继续","master","我们","定性","工程","使命","为了","不同","语言","行为","生活","各种各样","但","甚至","的","不用","一旦","时候","纠结","动力","与","实时性","所有","打成","越来越","明显","细节","第二种","怀揣","之初","全部","接口","也","rosbuild","说明","同时","一下","ros2","直接","推倒","各样","在","面临","这","安全性","保留","诸多","个体","节点","第一","很多","能","macos","提","通用性","虽然","以下几点","系统工程","下","尽力","那","复杂","驾驶","管理","用","之上","结合","大家","这样","发送","可能","差异","怎样","编译","就","历史使命","一款","标准","基础","提供","叫做","有","强壮","协作","需求","或者","标准化","最新","几点","风险","消费","变革","进行","具体","还会","工具","通信","已经","未来","体现","wifi","让","汽车","并","稳定性","产品","重新","移植","市场","角色","安全","android","层面","100ms","如何","以下","后续","rtos","颠覆","linux","ros","对","完成","，","只是","变化","网络","满足","做到","入侵","具备","装修","使用","房子","推倒重来","mcu","电脑系统","产品化","毛坯房","c++","适合","出现","需要","基本保障","受制","框架","前方","无法","dds","把","去","研发","强","不再","特性","导致","用于","他们","自动","方案","python","动力学","实时","黑客","）","会","全","开发","加密","catkin","运动学","成功","都","了","：","但是"],"title":"全新的ROS2","title_tokens":["的","ros2","全新"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2-vs-ros1","text":"","text_tokens":[],"title":"ROS2 vs ROS1","title_tokens":["ros1"," ","ros2","vs"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_1","text":"在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。","text_tokens":["提供","有","管理器","ros1","是从","看","基于","只不过","建立","交道","雷达","udp","了解","自","一个","理解","简单","更加","深入","、","学习","只有","安装","突然","协议","系统","张图","master","我们","进行","。","通信协议","共享","将","但","它","内","通信","会成","的","tcp","让","至关","并","时候","应用","库会","名字","先","—","一样","角色","ceo","注意","操作","如果","类似","调用","所有","上","好","变得","指挥","接触","应用层","明显","左侧","大致","中间","后续","操作系统","rtos","彼此","通过","过","linux","底层","ros","依赖","更换","，","客户端","变化","就是","一套","接口","得"," ","中间层","也","进程","层","可选","有且","数据","最","接收","频繁","请","整体","ros2","架构","主要","听","信息","在","选项","印象","机制","这","至关重要","封装","大量","需要","可以","节点","完善","很多","稳定","重要","macos","而已","简单明了","框架","dds","乱麻","消失","把","和","不过","右侧","从而","不难理解","一团乱麻","那","是","discovery","复杂","再","另外","成","肯定","连接","通信接口","管理","不","一团","找到","而","走","下边","共享内存","程序","公司","图像","方法","客户","写","不太","这个","比如","里","两者","发现","会","打交道","大家","可选项","理器","应该","不难","这些","开发","这样","对比","都","发布","了","驱动","哪些","就","windows","中","一团乱","间层","内存","标准","方式","开始"],"title":"系统架构","title_tokens":["系统","架构"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#dds","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。","text_tokens":["rmw","提供","一种","基本","物","ros1","给","这里","诟病","用户","灵活","基于","需求","联网","只要","udp","机器","率","常","多个","问题","部分","一个","交给","简单","代码","加入","更加","、","其实","另","要","最大","优化","安装","当然","系统","协议","master","我们","精力","5g","于","国际","不同","为了","社区","厂商","成本","对于","。","通信协议","放在","版本","通信","广泛","的","设计","总之","不用","tcp","让","并","还有","目标","按照","相比","应用","重新","想要","配置","产品","先","纠结","一样","移植","选择","其他","每","类似","如果","轻松","好","一些","产品开发","每个","层面","复用","功能","如何","么","能够","底层","ros","等","不是","收","是否","更换","，","解决","变化","就是","除了","提高","满足","广泛应用","接口","得","开发成本"," ","也","改","数据","最","频繁","符合","减少","ros2","middleware","三个","熟悉","完","场景","属性","所以","带来","交付","丢","在","举","商业","不爽","这","？","fastrtps","可以","发","之外","切换","稳定","听说","性能","opensplice","无法","dds","做","实现","不过","把","/","某","发成","为","延迟","时","简称","例子","软件","多","国际标准","是","来讲","部署","复杂","软件系统","更","再","机器人","定义","肯定","该","丰富","各种","不","适用","程序","指定","省略","复杂度","写","接入","用","比如","这个","高","会","开源","应该","唯一","加密","这样","这些","一行","开发","专注","适配","自家","都","厂家","然后","了","一家","就","中","标准","过来"],"title":"DDS通信","title_tokens":["通信","dds"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_2","text":"ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。","text_tokens":["的","不用","含义","使用","并","全球","有","几百万","各位","ros1","应用","这里","其中","担心","百万","ros2","存在","熟悉","尽量","概念","迁移","不"," ","开发者","小伙伴","如果","几乎","在","二个","部分","一致","方法","本","意义","几百","到","学习","伙伴","保留","第二个","也","以及","陌生","会","大家","开发方式","过","很多","没有","应该","ros","开发","这些","我们","小伙","依然","，","讲解","一一","了","便于","课程","和","。","就","方式","中","第二","非常","从","已经","广泛"],"title":"核心概念","title_tokens":["概念","核心"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_3","text":"再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。","text_tokens":["来","图片","编程语言","不要","搬","项目","ros1","移植性","总体而言","机器","可移植","面向对象","一个","一边","同样","学习","我们","具体","语言","而言","过程","编程","。","暂且","版本","的","面向","切记","移植","勿躁","之后","操作","大部头","可读性","一些","迈过","一页","如何","后续","对象","一步","，","道坎","更接","提高","一本","也"," ","具备","企业","如","两个","确实","软件开发","ros2","教程","编码","更好","在","学","这","看看","接近","可读","带领","当","实现","课程","和","不过","真实","从","软件","多","来讲","是","更","总体","部头","再","机器人","特性","大部","发布者","可移植性","程序","稍安","方法","角度","写","用","发现","用到","会","大家","开发","难度","发布","就","中","所示","方式"],"title":"编码方式","title_tokens":["编码方式","编码","方式"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_4","text":"最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随课程，你就会慢慢理解这些特性。","text_tokens":["一种","有","ros1","启动","独立","陆续","慢慢","除此","一个","理解","即可","最为","常用","master","我们","多功能","而言","换成","编程","。","工具","通信","的","rostopic","—","选择","每","如果","所有","好","功能","主","以上","大致","干掉","后续","总结","大幅","ros","对","，","变化","就是","揭秘","也"," ","现有","命令行","rosrun","ros2","教程","大幅度","topic","在","相对","印象","上升","run","表示","之外","节点","控制","dds","跟随","做","最后","把","和","课程","下","某","是","没","除此之外","你","更","再","啦","相关","特性","话题","初次","概念","命令","比如","核心","会","大家","集成","幅度","开发","对比","难度","这些","都","了","分散","就","：","中","上手"],"title":"命令行","title_tokens":["命令","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/","text":"ROS2安装方法 本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。 Linux系统简介 时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。 Ubuntu系统简介 我们后续课程使用到的Linux发行版就是ubuntu系统。 Ubuntu诞生于2004年10月份，每六个月发布一个新版本，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。 Ubuntu虚拟机安装 虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下： 1. 下载系统镜像 下载链接： https://ubuntu.com/download/desktop 2. 在虚拟机中创建系统 3. 设置虚拟机硬盘大小 4. 设置Ubuntu镜像路径 5. 启动虚拟机 6. 设置用户名和密码 7. 等待系统安装 8. 完成安装 Ubuntu系统安装好后，大家可以先随意使用熟悉一下。 ROS2系统安装 接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下： 1. 设置编码 $ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8 2. 添加源 $ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844 3. 安装ROS2 $ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop 4. 设置环境变量 $ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。 ROS2示例测试 为了验证ROS2安装成功，我们可以通过以下示例进行测试。 示例一：命令行示例 先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。 示例二：小海龟仿真示例 再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。 附：虚拟机镜像 为了方便大家入门学习，我们也提供了预装好ROS2软件和教程代码的虚拟机镜像，有需要的小伙伴可以通过以下链接下载： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["蓝色","dev","一种","vmware","基本","raw","启动","这里","编辑","算机","一定","电脑","开发者","原有","终端","节","org","加入","代码","回到","通讯","智能","无论","gen","系统","环境变量","update","bug","按键","当中","于","utf","第一个","关注","第二","实践","收费","越来","互联","开放","设计","下载","7","应用","先","前先要","服务器","redhat","操作","每","上","好","可视化","通过","升级","蕴藏","底层","任何人","等","依赖","小伙","很","占据","除了","关于"," ","接下来","发挥","变量","企业","通用","-","优先","运动","热情","键盘","4",")","之内","evaluation","nodes","？","run","可","o","报错","可以","提交","一起","基本相同","centos","资料","控制","保证","稳定","重要","放到","一次","测试","户名","opt","真器","实现","课程","热爱","分别","仿真","/","从","指令","多用户","软件","多","来讲","是","可视","demo","再","千层浪","预装","发扬光大","点击","发布者","适用","因为","命令","程序","编号","deb","方法","一位","githubusercontent","com","准确","叫","此时","04","开源","每隔","加上","bash","摩拳擦掌","小海龟","null","环境","兼容","windows","方便","signed","1991","衡量","指标","10","world","用户","联网","浏览","了解","计算","机器","光大","多个","操作界面","s","一个","创建","5","本","、","会加","学习","强大","&&","安装","ubuntu","最为","list","密码","unix","https","listener","添加","~","说干就干","过程","。","订阅","一句","下来","3","37844","share","并且","呢","—","自己","一样","curl","选择","其他","如下","小伙伴","比较","一些","release","locale","到","目前","浏览器","http","源","hello","原理","者","cpp","tee","操作系统","出于","操作方法","乐于","六个月","仿真器","是否","运行","download","环境变","左右","就是","验证","服务","海龟","原本","提到","考虑","数据","发行","不仅","动手","最","dpkg","林纳斯","两个","一石激起千层浪","请","持续","时间","场景","代表","主要","六个","支持","最好","所以","数字","后","发展","一般","大量","至此","成熟","www","22","sources","没有","维护","已有","性能","反馈","字符串","做","和","by","--","除此之外","failed","更","领域","自行","机器人","另外","apt","各种","不","二个","字符","内核","年","长期","”","链接","第二个","实力","这个","比如","地址","虚拟","变动","一","唯一","效果","免费","os","upgrade","吸引","talker","大小","吧",":","任何","products","中","export","经典","这套","html","开始","决定","“","exc6","给","大","archive","诞生","人工智能","除此","还","ssl","问题","本相","最大","现在","工作","唯一标准","master","我们","紧随","月","turtlesim","为了","不同","华丽","模式","将","各种各样","版本","architecture","但","甚至","应用软件","正常","的","示例","时候","名字","humble","想要","出","好者","与","编辑器","2","install","千层","二","如果","步骤","之前",".","越来越","伙伴","人工","1","如遇","建议","workstation","迅猛","第二句","codename","应用程序","行列","紧随其后","擦掌","]","也","俱全","修复","每年","合适","快速","说明","命令行","同时","一下","ros2","教程","直接","2004","各样","编码","只","在","source","商业","附","源代码","多人","这","无论是","之外","节点","第一","很多","macos","1dvxugmhxlxnsnfdezuxw0g","绝对","第一次","虽然","随意","en","技术","下","ubuntu20.04","arch","node","计算机","时","keyring","真理","gpg","打包","你","试试","奥义","任务","其中","成","务器","管理","其","概念","还是","teleop","参考","码","量","不太","bashrc","之上","keyrings","guyuehome","connect","路径","一应俱全","大家","应该","lsb","这样","中将","py","可能","爱好者","二句","us","影响","个","就","上下","命名","伴随","一应","标准","界面","pan","\"","技术实力","来","叫做","提供","有","分享","检验","main","或者","硬盘","[","大学","文件","简介","常用","何人","情况","版","个人爱好","进行","多任务","用户名","接下","为例","激起","=","|","设置","已经","上层","未来","通信","8","让","并","重新","小海","移植","setup","硬件","激发","快","之后","baidu","等待","locales","gnupg","学生","desktop","其他软件","ubuntu22.04","动手做","lts","etc","接触","采用","lang","功能","如何","以下","sudo","后续","其后","看出","linux","对","6","ros","发扬","完成","传输","，","讲解","构建","尚","网络","芬兰","一套","介绍","packages","to","准备","两年","pro","使用","顺序","后缀","背景","软件开发","月份","绑定","熟悉","起来","发行版","多用","虚拟机","print","探索","看到","互联网","适合","等等","出现","提取","_","需要","表示","好后","入门","精神","依然","更新","dds","rosdistro","外衣","把","或",">","位置","d","先要","usr","以","传播","相同","上下左右","turtle","新","爱好","成为","啦","all","什么","之一","该","试一试","个人","一直","各个","普通","18","公司","fedora","并用","核心","$","会","echo","有限","他","开发","镜像","成功","key","2022","第一句","都","发布","了","lc","：","但是","大学生","("],"title":"ROS2安装方法","title_tokens":["方法","ros2","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2","text":"本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。","text_tokens":["的","一种","最","—","一下","前先要","ros2","了解","操作","节","本","安装","一起","操作系统","系统","linux","底层","重要","我们","，","。","先要"],"title":"ROS2安装方法","title_tokens":["方法","ros2","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#linux","text":"时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。","text_tokens":["决定","技术实力","指标","叫做","有","分享","基本","给","大","检验","用户","算机","联网","开发者","计算","原有","光大","还","或者","操作界面","问题","本相","一个","大学","加入","代码","回到","、","本","强大","安装","ubuntu","现在","常用","唯一标准","unix","系统","何人","情况","bug","我们","个人爱好","当中","不同","多任务","华丽","模式","说干就干","过程","激起","。","各种各样","版本","但","实践","收费","越来","甚至","互联","开放","已经","应用软件","的","设计","并","应用","重新","名字","并且","先","自己","—","呢","一样","硬件","激发","其他","之后","服务器","好者","与","redhat","操作","千层","学生","每","上","动手做","一些","之前","到","越来越","目前","功能","原理","伴随","可视化","操作系统","出于","通过","操作方法","linux","乐于","任何人","对","底层","发扬","等","依赖","迅猛","，","讲解","尚","应用程序","行列","芬兰","就是","一套"," ","也","服务","原本","提到","修复","企业","通用","每年","不仅","动手","快速","使用","最","发行","林纳斯","一石激起千层浪","热情","ros2","教程","时间","绑定","熟悉","起来","发行版","场景","多用","各样","主要","支持","最好","所以","在","后","发展","看到","商业","源代码","互联网","一般","多人","这","适合","大量","？","等等","出现","成熟","需要","可以","提交","基本相同","一起","centos","很多","macos","重要","稳定","维护","没有","已有","放到","性能","反馈","虽然","精神","做","实现","外衣","热爱","和","把","或","技术","下","计算机","多用户","传播","软件","相同","多","来讲","是","真理","可视","打包","更","任务","爱好","成为","另外","千层浪","其中","成","什么","之一","务器","个人","管理","各种","概念","不","发扬光大","其","适用","年","参考","内核","程序","公司","方法","量","一位","不太","实力","之上","fedora","这个","并用","比如","核心","准确","会","此时","叫","有限","开源","应该","他","加上","唯一","开发","镜像","免费","吸引","爱好者","都","了","兼容","任何","就","windows","中","大学生","命名","标准","1991","这套","衡量","界面"],"title":"Linux系统简介","title_tokens":["系统","linux","简介"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu","text":"我们后续课程使用到的Linux发行版就是ubuntu系统。 Ubuntu诞生于2004年10月份，每六个月发布一个新版本，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。","text_tokens":["10","有","这里","用户","编辑","联网","诞生","人工智能","一定","除此","浏览","开发者","机器","电脑","还","硬盘","一个","5","文件","、","本","会加","最大","通讯","安装","ubuntu","常用","智能","无论","系统","版","我们","紧随","月","进行","为了","于","不同","为例","。","关注","版本","已经","互联","上层","未来","的","让","时候","应用","想要","自己","移植","选择","其他","快","出","硬件","之后","编辑器","每","如果","比较","ubuntu22.04","上","好","之前","lts","到","浏览器","接触","人工","如何","后续","其后","通过","建议","看出","linux","升级","六个月","等","，","讲解","很","网络","就是","占据","紧随其后","除了","擦掌","介绍"," ","也","俱全","发挥","两年","考虑","发行","使用","合适","顺序","后缀","优先","一下","持续","软件开发","直接","月份","教程","发行版","熟悉","2004","4","代表","六个","数字","所以","支持","只","虚拟机","在","主要","之内","互联网","出现","无论是","可以","22","表示","之外","资料","保证","很多","第一","稳定","重要","一次","绝对","维护","第一次","已有","性能","依然","更新","课程","或","位置","ubuntu20.04","从","时","以","软件","多","是","新","除此之外","更","领域","你","自行","机器人","再","其中","试一试","各种","还是","一直","各个","普通","因为","年","18","参考","编号","长期","方法","比如","虚拟","会","04","一应俱全","大家","变动","每隔","开发","效果","这样","免费","摩拳擦掌","2022","可能","都","发布","环境","了","影响","个","就","windows","但是","中","一应"],"title":"Ubuntu系统简介","title_tokens":["系统","简介","ubuntu"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu_1","text":"虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下：","text_tokens":["软件","的","相同","下载","是","让","-","叫做","并","pro","vmware","自行","啦","另外","同时","这里","请","其他","如下","操作","虚拟机","步骤","多个","在","其他软件","后","一个","evaluation",".","采用","com","之上","安装","地址","www","工作","可以","虚拟","大家","系统","https","workstation","准备","已有","我们","完成","运行","，","构建","环境","和",":","。","：","products","就","/"," ","html","开始"],"title":"Ubuntu虚拟机安装","title_tokens":["虚拟","虚拟机","ubuntu","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1","text":"下载链接： https://ubuntu.com/download/desktop","text_tokens":["download","ubuntu","下载","com",":","desktop","：","https","/"," ",".","链接"],"title":"1. 下载系统镜像","title_tokens":["1","下载","系统"," ",".","镜像"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2","text":"","text_tokens":[],"title":"2. 在虚拟机中创建系统","title_tokens":["2","虚拟","虚拟机","在","系统","中","创建"," ","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3","text":"","text_tokens":[],"title":"3. 设置虚拟机硬盘大小","title_tokens":["大小","虚拟","虚拟机","硬盘","3"," ","设置","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4-ubuntu","text":"","text_tokens":[],"title":"4. 设置Ubuntu镜像路径","title_tokens":["ubuntu","4","路径"," ","设置",".","镜像"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#5","text":"","text_tokens":[],"title":"5. 启动虚拟机","title_tokens":["虚拟","虚拟机","启动","5"," ","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#6","text":"","text_tokens":[],"title":"6. 设置用户名和密码","title_tokens":["用户名","和","密码","用户","6"," ","设置",".","户名"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#7","text":"","text_tokens":[],"title":"7. 等待系统安装","title_tokens":["安装","等待","7","系统"," ","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#8","text":"Ubuntu系统安装好后，大家可以先随意使用熟悉一下。","text_tokens":["，","安装","ubuntu","随意","可以","使用","大家","系统","。","先","好后","一下","熟悉"],"title":"8. 完成安装","title_tokens":["8","安装"," ",".","完成"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_1","text":"接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下：","text_tokens":["ros2","如下","步骤","到","安装","ubuntu","可以","系统","我们","，","接下","了","把","就","。","：","中","下来","接下来"],"title":"ROS2系统安装","title_tokens":["系统","ros2","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1_1","text":"$ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8","text_tokens":["8","-","all","apt","locales","install","locale",".","lang","&&","sudo","_","$","gen","update","en","lc","us","utf","=","export"," "],"title":"1. 设置编码","title_tokens":["1","编码"," ","设置","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2_1","text":"$ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844","text_tokens":["“","\"","dev","raw","main","archive","ssl","[","org","&&","ubuntu","list","https","master","update","=","architecture","|","37844","share","curl","install","gnupg","release","etc",".","http","sudo","如遇","tee","ros","，","codename","packages","to","]"," ","-","dpkg","ros2","print","source",")","可","o","www","_","报错","sources","rosdistro",">","d","/","arch","usr","by","keyring","--","gpg","failed","apt","参考","deb","”","githubusercontent","com","keyrings","guyuehome","$","connect","echo","lsb","os","key","null",":","signed","("],"title":"2. 添加源","title_tokens":["源","2","."," ","添加"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3-ros2","text":"$ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop","text_tokens":["sudo","-","$","install","desktop","humble","ros","update"," ","upgrade","apt"],"title":"3. 安装ROS2","title_tokens":["安装",".","3"," ","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4","text":"$ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。","text_tokens":["\"","humble","ros2","setup","在","source","好",".","bashrc","至此","安装","$","echo","系统","ros","bash","~","opt","，","了",">","就","。","/","中"," ","已经"],"title":"4. 设置环境变量","title_tokens":["环境变","变量","4","环境","环境变量"," ","设置","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_2","text":"为了验证ROS2安装成功，我们可以通过以下示例进行测试。","text_tokens":["成功","以下","示例","，","安装","可以","验证","通过","。","测试","我们","ros2","进行","为了"],"title":"ROS2示例测试","title_tokens":["示例","ros2","测试"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_1","text":"先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。","text_tokens":["“","的","来","数据","试试","说明","启动","demo","两个","先","world","ros2","发布者","如果","终端","命令","二个","字符","在","一个","问题","nodes","”","第二个","以下","run","hello","_","最为","者","cpp","$","节点","通过","系统","第一","没有","重要","底层","listener","传输","talker","是否","py","，","dds","字符串","吧","发布","。","：","订阅","第一个","中","第二"," ","通信","正常"],"title":"示例一：命令行示例","title_tokens":["示例","：","命令行","命令","一"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_2","text":"再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["“","的","示例","来","蓝色","上下左右","turtle","奥义","背景","运动","启动","再","小海","两个","—","啦","持续","键盘","ros2","该","教程","试一试","关于","如下","点击","teleop","探索","终端","在","一个","上","”","run","至此","安装","_","后续","可以","$","节点","控制","第一","蕴藏","ros","我们","仿真器","按键","中将","turtlesim","运行","成功","小海龟","，","key","真器","第一句","二句","第二句","左右","分别","仿真","。","：","将","上下","就","中","一句","node","经典","第二"," ","指令","海龟"],"title":"示例二：小海龟仿真示例","title_tokens":["示例","小海龟","二","仿真","：","小海","海龟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_3","text":"为了方便大家入门学习，我们也提供了预装好ROS2软件和教程代码的虚拟机镜像，有需要的小伙伴可以通过以下链接下载： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["软件","的","pan","下载","提供","exc6","有","预装","教程","ros2","baidu","小伙伴"," ","虚拟机","s","好","代码","码",".","学习","伙伴","链接","com","以下","提取","需要","可以","虚拟","大家","通过","https","1dvxugmhxlxnsnfdezuxw0g","入门","我们","镜像","为了","小伙","，","了","和",":","：","/","方便","也"],"title":"附：虚拟机镜像","title_tokens":["虚拟","虚拟机","：","附","镜像"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/","text":"ROS2命令行操作 在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。 Linux中的命令行 类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。 启动方式 回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。 常用命令操作 我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。 ROS2中的命令行 ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。 运行节点程序 想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看节点信息 当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim 查看话题信息 当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose 发布话题消息 想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 发送服务请求 一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\" 发送动作目标 想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\" 录制控制命令 系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["衣服","+","一种","启动","这里","编辑","一定","电脑","主目录","原有","目的","终端","深入","调试","t","回到","一件","及","一边","要","复制","文件名称","例如","无论","受","系统","写字","于","这项","第一个","均","硬","它","令人","系统管理员","设计","目标","多种","应用","先","段","info","spawn","操作","逛来","每","异常","上","好","逛去","打开","以上","很少","文件名","可视化","布料","能够","通过","详细","等","一步","不是","度高","子目","很","精心","db3"," ","接下来","兴趣","theta","科幻","-","每次","管理员","某个","根据","键盘","35","里边","商家","当前工作","cp","请求","选项","尝试","机制","}","11","？","被","run","可以","一起","体验","子目录","控制","一次","重要","一系列","带领","真器","产生","实现","仿真","/","二十","笔记本","为","指令","软件","多","来讲","是","可视","其上","推出","改变","再","而是","查看","笔记本电脑","初次","片段","系列","因为","命令","找","快捷键","程序","进一步","04","此时","专门","加上","小海龟","alt","实验室","科幻电影","改了","动","鼠标","至今","gedit","ls","转","用户","逛来逛去","所在","了解","便捷","多个","一个","创建","件夹","新建","、","本","学习","若","看不到","list","统管","某段","又","令人发指","则","对于","。","下来","3","name","输入","呢","—","自己","一样","删除","选择","其他","如下","0.2","知道","拷贝到","srv","类似","一些","到","随身带","仿真器","跟","运行","总","一只","就是","目标目录","显示","海龟","服务","'","rosbag","数据","魅力","列表","后边","z","场景","主要","觉得","所以","保持","小","后","执行","语法","孤单","内容","没有","电影","实验","和","自主","{","terminal","复现","一二十","--","帮上","录制","更","死机","msgs","cmd","<","话题","各种","常用命令","不","看中","权限","字符","难以","指定","”","为什么","链接","比如","这个","死记硬背","精心设计","由","集成","一","这些","二十个","目录","哪些",":","中","1.8","“","目","记忆","bag","死记","搜索","文件夹","还","问题","pose","工作","现出","service","继续","rate","我们","turtlesim","不同","17","并不一定","手","将","但","地","正常","列出","的","感觉","不用","具体操作","时候","想要","发指","出","编辑器","与","干什么","2","goal","如果","轻松","调用","所有","之前","案例","y","子",".","及其","send","1","大致","40","完全","感兴","linear","geometry","至于","]","也","2.0","什么样","现有","不到","命令行","从来","确实","一下","ros2","直接","…","topic","信息","在","买","复制到","这","消息","保留","感兴趣","angular","看看","节点","第一","很多","多到","绝对","第一次","随身","虽然","右键","标目","商场","下","node","某","record","服装","你","成","ctrl","管理","移入","概念","action","还是","想","teleop","不太","用","适应","结合","忙","路径","大家","这样","twist","怎么","快捷","发送","可能","rm","就","turtle1","来","\"","叫做","提供","有","哪","总有","灵活","款式","做好","需求","慢慢","或者",",","[","pub","cd","文件","另","即可","不可","常用","约束","规则","一二十个","具体","进行","详细信息","一系","接下","为例","背","工具","rotateabsolute","已经","未来","想象","体会","源文件","让","并","还有","absolute","小海","炫酷","一点","接触","功能","如何","sudo","本节","0","麻烦","0.0","linux","ros","对","体操","mv","看似","当前","完成","，","解决","只是","笔记","一二","满足","改名","枯燥","动作","mkdir","材料","使用","背景","查","呈现","起来","熟悉","绝对路径","数量","窗口","深色","看到","名称","呈现出","既定","既","太","_","需要","x","表示","不过","把","参数",">","或","感受","这种","去","有点","以","相同","play","turtle","播放","必不可少","啦","呀","什么","定制","vel","msg","该","试一试","pwd","call","一直","十个","此","容易","角度","黑客","rosbag2","rotate","用到","核心","会","$","echo","原因","随着","不变","key","2022","都","发布","了","：","但是","不一","方式","拷贝"],"title":"ROS2命令行操作","title_tokens":["命令","命令行","操作","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2","text":"在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。","text_tokens":["的","多","使用","一种","更","魅力","时候","命令行","小海","—","ros2","一定","如果","在","命令","之前","深入","案例","调试","接触","到","不太","学习","适应","本节","进一步","可以","会","大家","第一","一次","重要","我们","第一次","一步","带领","随着","运行","小海龟","，","可能","了","将","。","工具","感受","中"," ","有点","海龟"],"title":"ROS2命令行操作","title_tokens":["命令","命令行","操作","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#linux","text":"类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。","text_tokens":["衣服","来","至今","一种","哪","这里","总有","逛来逛去","灵活","款式","做好","需求","一定","便捷","问题","一个","、","一件","不可","现出","无论","约束","受","规则","我们","于","并不一定","手","对于","。","工具","但","已经","的","想象","设计","并","时候","呢","想要","先","自己","一样","其他","炫酷","操作","逛来","类似","异常","所有","一些","一点","逛去","功能","可视化","麻烦","能够","布料","linux","ros","等","不是","看似","度高","完全","，","解决","就是","精心","满足"," ","服务","什么样","材料","现有","科幻","使用","每次","命令行","根据","呈现","起来","场景","里边","商家","在","小","看到","买","呈现出","既定","？","保留","被","可以","很多","没有","电影","虽然","和","商场","这种","某","去","为","自主","软件","服装","来讲","多","是","可视","你","其上","推出","必不可少","成","呀","什么","定制","各种","不","看中","还是","一直","片段","命令","容易","为什么","比如","结合","会","此时","精心设计","大家","这些","这样","都","了","就","但是","不一","中","方式","科幻电影"],"title":"Linux中的命令行","title_tokens":["的","命令","命令行","linux","中"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_1","text":"回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。","text_tokens":["+","来","鼠标","叫做","有","记忆","启动","一定","慢慢","电脑","所在","搜索","终端","t","及","回到","本","即可","看不到","常用","写字","我们","一二十个","一系","又","手","令人发指","这项","。","背","工具","硬","正常","令人","的","体会","不用","并","多种","时候","输入","呢","应用","发指","选择","其他","操作","上","打开","到","功能","很少","通过","随身带","对","不是","，","很","笔记","就是","至于","一二","枯燥","也"," ","科幻","不到","使用","列表","背景","魅力","命令行","从来","确实","一下","熟悉","数量","窗口","觉得","所以","深色","在","后","看到","既","这","需要","可以","电影","多到","一系列","随身","右键","不过","参数","二十","笔记本","指令","软件","terminal","一二十","是","死机","而是","什么","ctrl","笔记本电脑","初次","十个","系列","字符","命令","因为","难以","快捷键","为什么","黑客","用","这个","用到","会","大家","专门","原因","随着","怎么","快捷","alt","都","二十个","就","：","但是","方式","中","科幻电影"],"title":"启动方式","title_tokens":["启动","方式"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_2","text":"我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。","text_tokens":["“","目","来","gedit","死记","ls","用户","编辑","主目录","文件夹","或者","目的","原有","多个","[","一个","创建","cd","件夹","新建","文件","回到","另","及","一边","复制","若","常用","工作","文件名称","系统","统管","我们","则","对于","。","将","均","它","地","列出","系统管理员","未来","的","感觉","源文件","目标","先","删除","出","编辑器","拷贝到","所有","打开","功能","及其","sudo","文件名","linux","mv","当前","子目","，","只是","目标目录","改名","]"," ","显示","也","mkdir","列表","查","管理员","一下","某个","绝对路径","熟悉","…","当前工作","cp","保持","选项","执行","名称","复制到","语法","需要","可以","体验","子目录","没有","绝对","把","标目",">","或","/","下","为","指令","以","多","改变","该","<","管理","移入","常用命令","不","pwd","权限","命令","找","此","指定","”","用","链接","死记硬背","会","路径","由","大家","一","这些","不变","rm","了","目录","就","：","拷贝","中"],"title":"常用命令操作","title_tokens":["常用","常用命令","命令","操作"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2_1","text":"ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。","text_tokens":["的","相同","具体操作","有","命令行","小海","什么","ros2","后边","话题","概念","与","干什么","了解","操作","目的","topic","还","系列","主要","命令","在","所有","一个","机制","功能","海龟","比如","也","大致","可以","核心","表示","内容","节点","继续","一起","第一","集成","linux","对","一系列","体操","我们","跟","具体","不同","一系","总","，","小海龟","接下","都","为例","不过","参数","。","就","仿真","第一个","感受","中","下","node","下来"," ","接下来","以"],"title":"ROS2中的命令行","title_tokens":["的","命令","命令行","中","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_3","text":"想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["使用","turtle","想要","某个","键盘","ros2","操作","teleop","命令","要","run","_","例如","可以","$","节点","控制","我们","进行","运行","turtlesim","，","key","和","仿真","：","中","node"," ","海龟"],"title":"运行节点程序","title_tokens":["程序","节点","运行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_4","text":"当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim","text_tokens":["的","来","有","呢","啦","查看","ros2","info","知道","信息","如果","命令","一个","子","？","感兴趣","可以","$","list","节点","系统","ros","对","加上","详细","这样","当前","turtlesim","运行","详细信息","感兴","，","都","哪些","就","：","/","中","node","某","它"," ","兴趣"],"title":"查看节点信息","title_tokens":["信息","查看","节点"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_5","text":"当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose","text_tokens":["的","数据","使用","有","呢","查看","ros2","试一试","话题","如下","想","topic","还","命令","看到","一个","子","消息","pose","即可","$","list","echo","系统","加上","当前","，","都","：","/","中","某"," ","turtle1"],"title":"查看话题信息","title_tokens":["信息","查看","话题"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_6","text":"想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":["动","\"","--","2.0","命令行","msgs","想要","cmd","vel","直接","ros2","msg","话题","起来","z","还","topic",",","命令","pub","y","}","1","_","angular","x","可以","$","通过","控制","0.0","rate","{","我们","twist","，","linear","geometry","发布",":","：","/"," ","指令","海龟","1.8","turtle1"],"title":"发布话题消息","title_tokens":["发布","消息","话题"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_7","text":"一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\"","text_tokens":["theta","来","\"","name","提供","再","—","ros2","试一试","0.2","2","call","spawn","还",",","srv","调用","一个","y","}","改了","太","海龟","孤单","service","x","$","'","我们","仿真器","turtlesim","一只","，","真器","产生",":","仿真","：","/"," ","服务","{"],"title":"发送服务请求","title_tokens":["服务","请求","发送"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_8","text":"想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\"","text_tokens":["的","theta","\"","帮上","让","提供","目标","命令行","absolute","想要","转","ros2","action","goal","命令","一个","指定","角度","到","send","rotate","比如","这个","_","可以","忙","$","通过","这样","仿真器","完成","具体","发送","turtlesim","，","真器",":","仿真","：","/","中","rotateabsolute","3"," ","动作","海龟","turtle1"],"title":"发送动作目标","title_tokens":["动作","目标","发送"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_9","text":"系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["的","复现","rosbag","record","数据","录制","play","播放","-","有","还有","再","想要","bag","cmd","啦","自己","vel","ros2","段","35","与","还是","如果","每","轻松","命令","一个","好","尝试","子","回到","这","11","？","用",".","如何","功能","rosbag2","以上","_","40","0","常用","可以","$","看看","04","大家","系统","很多","某段","我们","运行","17","，","实验","很","2022","实现","就是","把","实验室","。","：","/","中","db3","下来"," ","turtle1"],"title":"录制控制命令","title_tokens":["录制","控制","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","text":"ROS2开发环境配置 ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。 Git git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git 下载教程源码 《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。 VSCode Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download VSCode插件配置 为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。 中文语言包 Python插件 C++插件 CMake插件 vscode-icons ROS插件 Msg Language Support Visual Studio IntelliCode URDF Markdown All in One VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["微软","linus","提供","有","官方网站","变更","项目","给","language","这里","讲","官方","编辑","众多","离不开","浏览","开发者","机器","文件夹","搜索","还","多个","终端","高效","一个","件夹","常听到","代码","简单","文件","、","code","调试","因","urdf","强大","in","gitee","安装","以及","support","系统","https","我们","bug","搭建","千万","具体","推荐","不同","github","国内","进行","为了","一系","语言","中文","intellicode","studio","管理软件","。","工具","贡献","冲突","版本","语言包","但","广泛","的","示例","设计","下载","网站","让","码云","并","非常简单","中会","呢","配置","应用","先","—","插件","哪里","自己","21","visual","硬件","编写","出","之后","编辑器","与","理工","操作","install","《","clone","如果","所有","一些","好",".","浏览器","人工","如何","git","功能","合并","sudo","以上","后续","人","操作系统","》","linux","ros","轻量","完成","download","，","行","便于","扩展","几千万","广泛应用","自带","也","准备"," ","利器","修复","-","使用","快速","之父","之间","最","每次","visualstudio","听到","ros2","直接","教程","icons","里边","记事","所以","支持","管理工具","只","发展","在","c++","看到","源代码","记事本","这","大量","？","等等","增加","被","网上","_","需要","作为","可以","提交","内容","切换","很多","macos","重要","入门","已有","一系列","上万","做","下载方式","课程","和","神兵","/","非常","千上万","简称","不会","软件","多","是","新","复杂","更","推出","成为","机器人","另外","all","判断","肯定","几千","2015","特性","查看","msg","vscode","审核","管理","apt","丰富","而生","不","个人","tutorials","成千上万","不开","略显","系列","自动","命令","年","功能强大","官方网","python","方法","cmake","用","com","链接","开发工具","比如","guyuehome","源码","这款","$","会","大家","one","集成","迅速","开源","开发","这些","一行","这样","有些","markdown","喜欢","两款","可能","都","环境","了","编译","驱动","成千","就","：",":","windows","中","方式","组件","一款","无限"],"title":"ROS2开发环境配置","title_tokens":["开发","环境","ros2","配置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros2","text":"ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。","text_tokens":["的","示例","提供","中会","给","呢","机器人","配置","先","—","肯定","查看","vscode","编写","离不开","机器","不开","一些","代码","、","大量","？","如何","开发工具","git","源码","需要","大家","重要","ros","我们","开发","这些","完成","推荐","，","两款","做","环境","课程","和","编译","。","工具","准备"],"title":"ROS2开发环境配置","title_tokens":["开发","环境","ros2","配置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#git","text":"git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git","text_tokens":["linus","有","变更","项目","众多","开发者","多个","终端","高效","一个","常听到","代码","简单","因","gitee","安装","以及","系统","bug","我们","千万","具体","github","不同","国内","进行","管理软件","。","工具","贡献","冲突","版本","广泛","的","设计","网站","让","码云","并","非常简单","应用","—","哪里","硬件","之后","理工","install","所有","人工","功能","git","合并","sudo","人","linux","完成","，","行","几千万","广泛应用"," ","也","修复","使用","之父","之间","每次","听到","直接","所以","管理工具","发展","在","看到","这","等等","增加","被","需要","可以","提交","内容","切换","已有","上万","和","非常","千上万","不会","软件","是","新","判断","肯定","几千","特性","审核","管理","apt","而生","不","成千上万","自动","命令","方法","比如","这款","$","会","大家","迅速","开源","这些","开发","一行","有些","可能","都","了","驱动","成千","就","中","一款"],"title":"Git","title_tokens":["git"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_1","text":"《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。","text_tokens":["的","多","下载","是","复杂","有","更","这里","另外","—","讲","21","ros2","查看","vscode","浏览","里边","tutorials","文件夹","clone","《","还","如果","记事","略显","一个","好","件夹","代码","记事本","文件",".","浏览器","用","com","git","gitee","guyuehome","_","源码","$","会","系统","》","https","很多","集成","入门","开发","这样","推荐","，","下载方式","环境","课程","和",":","就","：","。","/","方式","中","自带"," "],"title":"下载教程源码","title_tokens":["教程","下载","源码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode","text":"Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download","text_tokens":["的","微软","下载","是","网站","快速","官方网站","推出","项目","成为","visualstudio","2015","官方","编辑","vscode","visual","丰富","编辑器","操作","支持","功能强大","在","年","官方网","一个","源代码","代码","code","、",".","强大","com","功能","链接","可以","操作系统","系统","https","linux","macos","轻量","开发","搭建","非常","download","，","studio","和",":","windows","。","扩展","神兵","：","组件","/","但"," ","利器","简称"],"title":"VSCode","title_tokens":["vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode_1","text":"为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。","text_tokens":["的","插件","ros2","vscode","与","还","系列","调试","功能","安装","后续","可以","一系列","我们","开发","为了","一系","，","便于","。","扩展","无限"],"title":"VSCode插件配置","title_tokens":["插件","vscode","配置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_2","text":"","text_tokens":[],"title":"中文语言包","title_tokens":["语言","语言包","中文"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#python","text":"","text_tokens":[],"title":"Python插件","title_tokens":["python","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#c","text":"","text_tokens":[],"title":"C++插件","title_tokens":["c++","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#cmake","text":"","text_tokens":[],"title":"CMake插件","title_tokens":["cmake","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode-icons","text":"","text_tokens":[],"title":"vscode-icons","title_tokens":["icons","vscode","-"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros","text":"","text_tokens":[],"title":"ROS插件","title_tokens":["插件","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#msg-language-support","text":"","text_tokens":[],"title":"Msg Language Support","title_tokens":[" ","support","msg","language"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#visual-studio-intellicode","text":"","text_tokens":[],"title":"Visual Studio IntelliCode","title_tokens":["intellicode"," ","studio","visual"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#urdf","text":"","text_tokens":[],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#markdown-all-in-one","text":"VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["的","最","插件","配置","自己","vscode","出","个人","众多","搜索","只","支持","在","以上","网上","作为","可以","大家","开发","推荐","喜欢","，","环境","。","也"],"title":"Markdown All in One","title_tokens":["markdown","one","all"," ","in"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/","text":"DDS Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。 通信模型 DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。 DDS DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。 什么是DDS 好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是Data Distribution Service，也就是数据分发服务，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。 DDS在ROS2中的应用 DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。 质量服务策略QoS DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是Domain，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为数据提供者和接收者之间的合约。 具体会有哪些策略？比如这个列表中描述的DEADLINE策略，表示通信数据必须要在每次截止时间内完成一次通信，HISTORY策略，表示针对历史数据的一个缓存大小，RELIABILITY策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式。 还有这个DURABILITY，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。 案例一：在命令行中配置DDS 我们先来试一试在命令行中配置DDS的参数。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort $ ros2 topic info /chatter --verbose 案例二：DDS编程示例 接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。 运行效果 $ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub 发布者代码解析 learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , }, 订阅者代码解析 learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], }, 参考链接 DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们课上主要带领大家认识DDS，更多使用方法和相关内容，课程配套的教程中会有介绍，大家也可以参考这里的链接进行学习。 https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["蓝色","库","bilibili","一种","神经网","基本","回忆","这里","性","所有人","重大","尽量","一定","电脑","靠","建立","作者","服务质量","供者","org","更加","代码","加入","欢迎","要","rclpy","选用","所","第三","分布式","尽可","std","无论","系统","高速","一角","第一种","5g","于","每条","无用","一条","编程","utf","交通","集中处理","通信模型","互相","about","第二","它","图","设计","帧","许多","应用","神经网络","先","heard","编写","info","服务器","articles","掉","拿","相当","延时","每","异常","上","好","旋转","分布","profile","点对点","建设","打开","主","借助","顺利","中间","火锅","publishing","reliable","通过","能够","》","升级","底层","等","一步","不是","data","很","通常","综合","domain","提高","关心","广泛应用","受到"," ","points","on","接下来","主讲人","兴趣","deadline","design","企业","-","接收","运动","每次","前边","docs","get","callback","根据","接收者","历史","helloworld","退出","subscribernode","请求","边","相当于",")","选项","尝试","入口","}","id","？","databus","run","可","working","真正","可以","一起","控制","sysml","保证","effort","决策","重要","一次","输出","大大","整个","带领","而且","实现","课程","/","要求","sub","描述","非常","init","为","指令","destroy","例子","软件","0.5","coding","多","是","丢失","组成","太多","肯定","连接","完整","保证数据","忽略","组织","发布者","命令","程序","方法","定位","logger","com","进一步","此时","专门","开源","有些","通路","环境","entry","兼容","驱动","接口标准","verbose","定时","上边","几种","某一","运转","增多","__","单独","海军","world","用户","古月","无论如何","%","机器","冰山","周期","多个","s","高效","一个","理解","可信赖","创建","过去","、","填充","学习","优化","最为","https","服务端","listener","这么","omg","而言","建模语言","过程","。","订阅","concepts","内","下来","二种","name","初始化","按照","中会","并且","呢","—","自己","垂直","存在","构图","一样","选择","其他","如下","implementations","知道","预测","既然","类似","def","一些","保障","到","hello","对应","生态","者","遥控器","强调","空间","timer","完整性","当于","运行","客户端","并行","双方","配套","课","就是","不管","得","bin","guides","服务","能源","统一","提到","类","'","数据","history","提供者","列表","之间","符合","bv12z4y167w2","销毁","middleware","架构","时间","资源","增长","场景","合约","航拍","强制","所以","默认","更好","发生","举","（","布式","后","在于","分组","执行","args","大量","www","内容","没有","维护","听说","性能","本身","字符串","做","和","真实","broker","解析","四种","{","认识","行业","--","没","更","领域","机器人","另外","定义","msgs","!","全称","话题","丰富","各种","不","下边","字符","医疗","年","指定","”","针对","红色","来看","链接","不好","地址","这个","比如","向","就行","由","keep","任","一","提示","包含","传送","这些","美国","效果","大小","数以千计","效率",":","哪些","冰山一角","速度","中","数据通","html","“","ros1","给","组成部分","讲","python3","程度","策略","问题","\\","缓存","神经","只有","差别","像是","service","现在","当然","无人机","durability","我们","create","使命","为了","厂商","不同","语言","行为","模式","42","import","reliability","架构图","将","#","放在","版本","qos","但","地","列出","正常","uml","入个","转移","的","示例","讲到","回调","class","一旦","不用","点","课上","至关","console","时候","配置","humble","纠结","历史数据","初始","交换","单位","四大","样","具体地址","与","关闭","定时器","《","二","如果","意思","能响","的话","所有","之前","一新","分发","案例","publisher","learning",".","复用","明显","*","1","对象","处","过","该用","第二种","处理","居","感兴","行","瓶颈","容性","应用程序","publish","连接数","宗旨","接口","处于","]","也","合适","快速","说明","命令行","截止","一下","数据通信","ros2","直接","@","教程","收到","2004","质量","只","topic","信息","在","distribution","商业","进入","专利","那个","优势","super","这","none","消息","技术标准","不感兴趣","感兴趣","作为","节点","第一","很多","流畅","第三种","工业","提","i","国防","类型","办法","当","全局","集中","en","半天","终于","技术","下","node","小组","时","建模","尽力","模型","无人","那","来到","复杂","你","成","务器","规模","驾驶","管理","还是","corba","找到","想","best","原则","shutdown","different","参考","how","送给","焕然一新","用","适应","之上","我","guyuehome","qosprofile","大家","华为","有人","应该","同一个","啥意思","这样","派","发送","py","from","可能","影响","编译","就","标准","必须","树莓","刚才","能力","来","\"","rmw","提供","有","第四种","main","哪","可信","spin","灵活","vendors","需求","众多","晚",",","pub","部分","[","它们","其实","成立","env","文件","multiple","尽可能","舰船","常用","避免","人机","情况","第四","包","具体","进行","占用","视频","int32","接下","为例","授权","=","循环","结构","那该","通信","已经","广泛","上层","像","父类","设置","8","让","并","还有","关系","非常复杂","三种","21","setup","角色","兼容性","等待","with","之","中间件","video","每个","函数","功能","如何","信赖","self","麻烦","日志","发生变化","ros","对","scripts","完成","生变","传输","string","，","解决","只是","变化","网络","4g","广播","便于","主要","满足","介绍","一套","to","动作","流畅性","价值","使用","qoshistorypolicy","频繁","1989","说了半天","绑定","秒","才能","last","由于","qosreliabilitypolicy","感知","至关重要","门","出现","_","需要","depth","名","表示","好吃","通道","可见","入门","框架","无法","dds","不过","把","或","参数","处理速度","这种","到底","位置","吃","usr","有点","以","chatter","高通","主讲","模块","新","遥控","publishernode","黑入","成为","啦","大大提高","什么","特性","msg","相关","试一试","个人","导致","subscription","航空","兼容性问题","各个","他们","自动","python","带","图像","焕然","客户","实时","体","黑客","）","核心","$","会","发送给","echo","先进","开发","加密","不变","中心","都","发布","了","最早","：","但是","方式","同一","("],"title":"**DDS**","title_tokens":["*","dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds","text":"Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。","text_tokens":["的","讲到","来","是","主讲","来到","神经网","前边","机器人","神经网络","—","讲","21","ros2","重大","古月","话题","靠","机器","相当","《","他们","在","相当于","好","、","欢迎","学习","神经","hello","我","最为","大家","系统","》","底层","通信","ros","入门","我们","当于","完成","具体","，","dds","变化","都","实现","网络","过程","课程","。","终于","中","它"," ","动作","服务","主讲人"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_1","text":"DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。","text_tokens":["运转","提供","一种","增多","第四种","ros1","这里","单独","所有人","程度","一定","建立","问题","一个","更加","其实","优化","所","第三","像是","常用","系统","服务端","第四","我们","第一种","具体","进行","每条","一条","。","订阅","集中处理","通信模型","第二","但","它","通信","列出","二种","正常","的","一旦","不用","并","关系","许多","并且","自己","三种","其他","角色","服务器","具体地址","知道","与","拿","之","如果","类似","能响","异常","所有","之前","上","旋转","点对点","到","每个","明显","火锅","麻烦","能够","处","发生变化","第二种","感兴","处理","一步","生变","，","客户端","很","变化","瓶颈","双方","解决","并行","就是","广播","连接数","关心","受到","也"," ","服务","兴趣","数据","使用","每次","架构","收到","增长","只","请求","发生","在","在于","优势","这","消息","不感兴趣","databus","感兴趣","需要","真正","作为","可以","好吃","节点","通道","第一","很多","第三种","没有","可见","行","整个","性能","框架","当","集中","无法","dds","而且","实现","和","不过","broker","处理速度","这种","四种","非常","吃","为","有点","时","以","模型","软件","多","是","更","成为","太多","务器","连接","规模","导致","各种","忽略","找到","想","针对","客户","地址","这个","进一步","核心","会","由","有人","应该","包含","传送","先进","这样","有些","中心","可能","都","发布","了","通路","效率","影响","就","速度","但是","中","必须","几种"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_1","text":"DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。","text_tokens":["的","模块","数据","并","新","领域","应用","频繁","存在","ros2","交换","驾驶","需求","航空","预测","自动","在","医疗","一个","之前","好","定位","感知","它们","借助","比如","需要","可以","地","会","很多","高速","决策","国防","等","不是","这些","，","dds","很","通常","都","和","。","交通","满足","方式","广泛应用","非常"," ","通信","已经","广泛","能源"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_2","text":"好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是Data Distribution Service，也就是数据分发服务，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。","text_tokens":["来","提供","这里","海军","灵活","需求","服务质量","策略","问题","高效","一个","、","成立","舰船","分布式","现在","service","当然","系统","我们","omg","进行","使命","于","语言","建模语言","。","订阅","它","通信","已经","地","uml","的","设计","还有","呢","应用","垂直","兼容性","中间件","意思","好","分布","分发","保障","中间","对象","强调","过","升级","等","data","，","解决","容性","网络","课","就是","介绍","一套","满足","也"," ","服务","价值","统一","数据","1989","说了半天","一下","2004","质量","强制","distribution","布式","技术标准","？","大量","可","可以","sysml","提","维护","听说","dds","做","半天","和","真实","到底","/","技术","为","以","建模","软件","行业","是","复杂","成为","啦","全称","丰富","完整","管理","各种","组织","兼容性问题","corba","年","实时","比如","由","大家","专门","啥意思","美国","开发","中心","可能","发布","环境","数以千计","兼容","最早","中","标准"],"title":"什么是DDS","title_tokens":["什么","dds","是"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#ddsros2","text":"DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。","text_tokens":["能力","蓝色","来","一种","有","基本","给","这里","哪","组成部分","性","用户","尽量","无论如何","建立","机器","多个","部分","问题","一个","代码","加入","、","要","选用","分布式","差别","无论","系统","我们","这么","具体","5g","为了","厂商","而言","过程","编程","架构图","。","授权","放在","版本","但","通信","像","上层","转移","的","设计","让","至关","按照","呢","应用","纠结","自己","一样","构图","选择","其他","四大","兼容性","既然","中间件","每","如果","所有","上","分布","建设","函数","复用","功能","如何","对应","中间","生态","能够","该用","对","ros","，","容性","综合","4g","就是","不管","提高","宗旨","接口","得","也"," ","统一","提到","企业","使用","符合","根据","ros2","middleware","架构","时间","场景","所以","边","在","布式","商业","进入","专利","那个","由于","至关重要","？","可","需要","可以","保证","很多","重要","工业","大大","性能","dds","实现","和","把","或","位置","技术","软件","上边","高通","那","是","模块","多","你","没","更","组成","大大提高","机器人","肯定","个人","不","还是","组织","想","下边","原则","他们","红色","用","之上","这个","比如","就行","会","此时","大家","华为","任","开源","开发","这样","不变","可能","都","了","兼容","驱动","接口标准","就","影响","中","标准","刚才","某一"],"title":"DDS在ROS2中的应用","title_tokens":["的","dds","在","应用","中","ros2"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#qos","text":"DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是Domain，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为数据提供者和接收者之间的合约。 具体会有哪些策略？比如这个列表中描述的DEADLINE策略，表示通信数据必须要在每次截止时间内完成一次通信，HISTORY策略，表示针对历史数据的一个缓存大小，RELIABILITY策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式。 还有这个DURABILITY，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。","text_tokens":["提供","一种","有","基本","回忆","给","可信","需求","尽量","一定","电脑","众多","机器","晚","策略","供者","一个","理解","可信赖","加入","过去","缓存","要","只有","尽可能","所","避免","尽可","系统","人机","情况","无人机","durability","我们","这么","进行","具体","不同","占用","视频","无用","行为","模式","过程","reliability","。","将","通信模型","互相","结构","qos","那该","内","通信","地","入个","图","的","帧","让","还有","时候","关系","呢","应用","配置","历史数据","先","选择","样","掉","延时","如果","类似","每","的话","所有","之前","一些","一新","好","信赖","功能","顺利","如何","reliable","遥控器","通过","空间","ros","对","完整性","传输","完成","，","应用程序","网络","就是","便于","domain","满足","处于"," ","也","服务","流畅性","deadline","数据","history","合适","提供者","列表","接收","之间","快速","每次","使用","运动","截止","数据通信","根据","接收者","历史","ros2","直接","时间","绑定","资源","质量","场景","合约","航拍","才能","更好","默认","在","举","分组","那个","门","id","？","出现","_","需要","可以","一起","表示","节点","控制","保证","effort","一次","重要","流畅","没有","办法","全局","dds","实现","和","参数","这种","要求","下","描述","为","小组","指令","尽力","例子","模型","无人","多","是","新","遥控","丢失","黑入","机器人","另外","定义","成","啦","特性","导致","保证数据","完整","不","各个","best","命令","程序","带","指定","送给","图像","针对","客户","体","黑客","来看","用","焕然","适应","不好","焕然一新","这个","比如","向","会","此时","发送给","大家","同一个","这些","这样","加密","派","发送","大小","可能","都","了","哪些","但是","中","数据通","同一","必须","树莓"],"title":"质量服务策略QoS","title_tokens":["策略","qos","质量","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_3","text":"我们先来试一试在命令行中配置DDS的参数。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort $ ros2 topic info /chatter --verbose","text_tokens":["的","chatter","来","\"","--","-","命令行","配置","msgs","先","ros2","msg","试一试","info","best","topic","在","命令","pub","std","_","$","reliable","echo","effort","我们","data","int32","42","dds","reliability",":","参数","。","verbose","/","中","qos"," "],"title":"案例一：在命令行中配置DDS","title_tokens":["dds","：","命令","在","一","命令行","中","案例","配置"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_4","text":"接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。","text_tokens":["配置","world","话题","在","之前","代码","尝试","hello","我们","，","dds","接下","为例","。","中","下来"," ","通信","接下来","以"],"title":"案例二：DDS编程示例","title_tokens":["示例","dds","编程","二","：","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_2","text":"$ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub","text_tokens":["run","_","$","learning","pub","qos","sub"," ","helloworld","ros2"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_3","text":"learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , },","text_tokens":["“","\"","库","__","main","world","python3","spin","古月","%","作者","周期",",","s","pub","[","一个","创建","代码","加入","文件","env","、","填充","rclpy","std","系统","create","包","进行","import","reliability","utf","#","=","循环","qos","设置","已经","父类","回调","的","示例","点","8","class","name","初始化","并","让","console","配置","初始","setup","单位","编写","info","如下","等待","知道","关闭","定时器","def","profile","publisher",".","learning","函数","打开","功能","主","*","hello","1","对象","publishing","reliable","self","日志","timer","scripts","居","string","data","完成","，","publish","接口"," ","bin","points","类","'","-","数据","history","说明","qoshistorypolicy","get","callback","退出","销毁","helloworld","@","ros2","秒","信息","（","后","last",")","super","执行","args","none","qosreliabilitypolicy","入口","选项","}","消息","_","www","需要","depth","名","节点","输出","effort","类型","字符串","/","node","init","usr","为","destroy","{","chatter","0.5","coding","publishernode","msgs","!","msg","话题","发布者","best","shutdown","原则","字符","python","程序","”","logger","com","guyuehome","）","qosprofile","keep","提示","py","from","发布","entry",":","编译","：","定时","中","("],"title":"发布者代码解析","title_tokens":["发布者","发布","解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_4","text":"learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], },","text_tokens":["“","\"","库","__","main","world","python3","spin","古月","%","作者",",","s","[","pub","一个","创建","\\","代码","文件","env","、","加入","rclpy","std","系统","create","listener","包","进行","import","reliability","utf","订阅","#","=","循环","qos","设置","父类","回调","的","示例","点","8","class","name","初始化","并","让","console","配置","初始","heard","setup","编写","info","如下","等待","知道","关闭","def","profile",".","learning","函数","打开","功能","主","*","hello","1","者","对象","reliable","self","日志","对","scripts","处理","居","string","data","完成","，","接口","]"," ","bin","points","类","'","-","数据","history","说明","qoshistorypolicy","get","callback","退出","销毁","helloworld","@","ros2","subscribernode","收到","信息","（","后","last",")","super","执行","args","none","qosreliabilitypolicy","入口","选项","}","消息","_","www","需要","depth","名","节点","输出","effort","i","类型","/","sub","node","init","usr","destroy","{","chatter","coding","msgs","定义","!","msg","话题","subscription","best","shutdown","原则","python","程序","”","logger","com","guyuehome","）","qosprofile","keep","提示","py","from","entry",":","编译","：","标准","("],"title":"订阅者代码解析","title_tokens":["订阅","解析","代码","者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_5","text":"DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们课上主要带领大家认识DDS，更多使用方法和相关内容，课程配套的教程中会有介绍，大家也可以参考这里的链接进行学习。 https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["的","课上","design","多","rmw","是","-","使用","bilibili","复杂","更","有","中会","humble","非常复杂","这里","docs","bv12z4y167w2","相关","ros2","教程","middleware","vendors","guides","articles"," ","implementations","冰山","with","主要","different","参考","org","how","一个","方法","video",".","学习","multiple","链接","com","working","_","www","可以","内容","大家","系统","https","一角","ros","我们","带领","本身","进行","，","dds","只是","en","配套","课程","和",":","冰山一角","。","介绍","about","/","concepts","to","非常","也","on","html","认识"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/","text":"工作空间：开发过程的大本营 大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是工程。 工作空间是什么 类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做工作空间。 所以工作空间是一个存放项目开发相关文件的文件夹，也是开发过程中存放所有资料的大本营。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。 创建工作空间 了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 自动安装依赖 我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init & rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y 编译工作空间 依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。 设置环境变量 编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["“","rosdepc","\"","dev","；","叫做","有","项目","这里","colcon","sh","eclipse","python3","某些","多少","p","绝大","机器","文件夹","或者","了解","还","大本","多个","终端","部分","org","一个","创建","件夹","代码","行文","文件","、","cd","学习","要","pip","gitee","安装","像是","工作","自动生产","以及","结果","系统","https","如图所示","情况","环境变量","错误","update","我们","工程","得到","进行","~","w","社区","为了","包","接下","过程","studio","。","工具","#","生效","编写程序","结构","下来","3","四个","设置","均","未来","的","下载","绝大部分","让","b2","并","&","人为","关系","一部分","并且","脚本","想要","手动","humble","自己","中会","配置","一样","存在","21","visual","setup","编写","如下","2","操作","install","clone","允许","如果","类似","缺少","并列","所有","之前","一些","path","一点","子","y",".","接触","creator","到","功能","git","以上","1","sudo","后续","中间","很少","强调","日志","过","能够","空间","ros","等","不是","依赖","完成","当前","运行","保存","子目","，","ws","完全","环境变","就是"," ","也","接下来","log","mkdir","放置","变量","大部分","-","使用","两个","docs","教程","ros2","workspace","数量","里边","信息","所以","一部","..","src","在","后","否则","选项","看到","执行","source","creating","名称","这","rosdep","典型","出现","至此","_","报错","需要","可以","仅","内容","资料","子目录","i","可执行文件","当","警告","pip3","rosdistro","产生","local","en","和","参数",">","build","/","根目录","某","从","init","时","不会","空间结构","来讲","--","是","新","总体","机器人","另外","定义","啦","什么","相关","大部","qt","管理","各种","概念","apt","点击","用于","tutorials","找到","自动","命令","参考","程序","b","”","针对","用","com","bashrc","链接","比如","这个","里","guyuehome","存放","a","会","此时","$","大家","echo","集成","应该","开发","大本营","这些","工具栏","唯一","生产","成功","from","都","环境","了","目录","编译","就","：",":","任何","中","所示","html","开始"],"title":"**工作空间：开发过程的大本营**","title_tokens":["的","*","工作","过程","大本","：","空间","开发","大本营"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_1","text":"大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是工程。","text_tokens":["“","的","放置","是","新","叫做","有","想要","eclipse","某些","visual","qt","编写","点击","里边","文件夹","在","程序","选项","之前","一个","创建","”","件夹","文件","、","所有","接触","学习","creator","比如","这个","后续","工作","以及","会","此时","内容","大家","过","集成","应该","开发","等","我们","这些","工具栏","工程","当","，","都","产生","环境","studio","和","就","。","工具","中","编写程序"," "],"title":"工作空间：开发过程的大本营","title_tokens":["的","工作","过程","大本","：","空间","开发","大本营"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_2","text":"类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做工作空间。 所以工作空间是一个存放项目开发相关文件的文件夹，也是开发过程中存放所有资料的大本营。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。","text_tokens":["dev","；","叫做","有","项目","这里","某些","绝大","机器","文件夹","或者","大本","多个","部分","一个","件夹","行文","代码","创建","文件","、","要","安装","像是","工作","结果","系统","如图所示","情况","错误","我们","工程","得到","进行","w","过程","。","结构","3","四个","未来","的","绝大部分","b2","并","人为","关系","一部分","脚本","自己","一样","存在","编写","2","操作","install","允许","类似","并列","所有","一些","一点","子","到","功能","以上","1","中间","很少","强调","日志","空间","ros","等","不是","运行","保存","子目","，","ws","完全","就是"," ","也","log","放置","大部分","两个","数量","里边","信息","所以","一部","src","在","后","执行","名称","这","典型","_","需要","可以","资料","子目录","可执行文件","警告","产生","和","参数","build","根目录","某","时","空间结构","来讲","是","新","总体","机器人","另外","定义","相关","大部","管理","各种","用于","b","针对","用","这个","比如","里","存放","a","会","集成","开发","大本营","唯一","成功","都","环境","了","目录","编译","就","：","中","所示","开始"],"title":"工作空间是什么","title_tokens":["工作","空间","什么","是"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_3","text":"了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git","text_tokens":["的","下载","-","dev","使用","并且","21","教程","ros2","概念","如下","p","了解","tutorials","clone","src","命令","一个","创建","cd","代码",".","com","git","gitee","_","guyuehome","工作","可以","$","结果","https","空间","我们","~","，","ws","接下","了","和",":","：","/","下来"," ","接下来","mkdir"],"title":"创建工作空间","title_tokens":["工作","空间","创建"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_4","text":"我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init & rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y","text_tokens":["的","rosdepc","--","下载","-","使用","&","有","humble","手动","python3","多少","apt","各种"," ","init","install","..","自动","src","一个","一些","cd","代码","y","path","rosdep","pip","安装","也","sudo","可以","$","会","i","update","我们","依赖","社区","from","，","pip3","都","rosdistro","：","工具","中","从"],"title":"自动安装依赖","title_tokens":["依赖","安装","自动"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_5","text":"依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。","text_tokens":["的","dev","-","使用","有","中会","啦","colcon","python3","apt","如下","文件夹","或者","install","如果","缺少","后","命令","否则","在","看到","自动","cd","代码","件夹","文件","、","出现","log","安装","sudo","报错","_","工作","可以","$","自动生产","空间","应该","错误","ros","生产","依赖","完成","~","成功","，","ws","过程","了","编译","任何","就","：","build","。","/","中"," ","不会"],"title":"编译工作空间","title_tokens":["工作","空间","编译"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_6","text":"编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。","text_tokens":["的","\"","变量","dev","让","配置","sh","setup","找到","还","install","终端","后","source","在","所有","行文","执行","创建","文件","、",".","bashrc","功能","至此","_","需要","工作","$","仅","echo","系统","能够","空间","环境变量","可执行文件","我们","当前","完成","包","为了","成功","~","，","环境变","ws","local","环境","了","和","编译",">","就","：","#","生效","/","。","均"," ","设置"],"title":"设置环境变量","title_tokens":["环境变","变量","环境","环境变量","设置"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_7","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["en","-","tutorials","html","workspace","a",":","https","org","/","docs","humble","ros","creating"," ","."],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/","text":"功能包：开发过程的大本营 在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做功能包。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。 创建功能包 如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python 编译功能包 在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash 功能包的结构 功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。 C++功能包 首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。 Python功能包 C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["“","来","；","dev","叫做","有","分享","五颜六色","给","这里","colcon","某些","看","很难","包并","first","尽量","头疼","除此","机器","文件夹","或者","type","率","大本","黄豆","终端","某种","org","一个","件夹","创建","代码","新建","文件","、","cd","行文","要","txt","型","工作","当然","your","视觉","继续","https","颜色","package","规则","环境变量","译成","xml","create","我们","只想","包","包中","社区","不同","~","语言","cmakerlists","过程","编程","。","将","#","放在","版本","结构","但","设置","c","正常","的","下载","name","并","还有","时候","关系","呢","移动","名字","配置","出来","humble","一样","存在","setup","编写","之后","如下","拿","是不是","install","拆分","如果","所有","好","一些","learning","每个","到","复用",".","功能","如何","原理","后续","么","空间","ros","越","等","不是","完成","跟","是否","依赖","运行","，","ws","环境变","讲解","就是","提高","介绍","得","也"," ","ament","分析","points","豆子","变量","是否是","-","使用","说明","之间","新创","两个","包是","docs","绿豆","教程","ros2","三个","起来","workspace","数量","袋子","里边","主要","只","所以","才能","必然","src","在","source","c++","看到","信息","执行","creating","名称","机制","感知","这","入口","？","编译成","语法","_","需要","可以","一起","包该","表示","内容","之外","控制","很多","放到","重要","类型","别人","可执行文件","新创建","当","pkg","降低","local","en","把","分别",">","和","build","/","举个","下","描述","解析","指令","时","例子","自主","软件","拿出","多","--","是","那","红豆","你","除此之外","划分","机器人","其中","判断","而是","之一","相关","该","<","各种","不","还是","tutorials","普通","想","他们","命令","参考","找","python","程序","”","方法","cmake","耦合","用","链接","一颗","比如","混合","源码","里","导航","发现","手上","会","立刻","这个","大家","$","版权","a","声明","包含","假设","开发","大本营","这些","bash","py","可能","都","首先","entry","了","环境","编译",":","就","：","但是","中","cmakelists","必须","html","刚才","很快"],"title":"**功能包：开发过程的大本营**","title_tokens":["功能","的","*","过程","大本","：","开发","大本营","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_1","text":"在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做功能包。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。","text_tokens":["；","叫做","有","分享","五颜六色","给","某些","很难","尽量","头疼","机器","文件夹","率","黄豆","某种","一个","件夹","代码","文件","、","当然","视觉","颜色","我们","只想","包","包中","社区","不同","。","放在","的","下载","并","时候","关系","移动","出来","拿","是不是","拆分","如果","每个","到","复用","功能","如何","原理","么","ros","越","等","不是","，","就是","提高","得","也"," ","豆子","使用","说明","之间","绿豆","ros2","教程","三个","起来","数量","袋子","只","所以","在","看到","名称","机制","感知","需要","可以","一起","包该","控制","很多","放到","重要","别人","当","降低","把","举个","时","例子","自主","软件","拿出","多","是","红豆","你","划分","机器人","其中","而是","之一","不","普通","想","他们","找","方法","耦合","用","一颗","比如","混合","源码","里","导航","发现","手上","会","立刻","这个","大家","假设","这些","可能","都","了","就","但是","中","很快"],"title":"功能包：开发过程的大本营","title_tokens":["功能","的","过程","大本","：","开发","大本营","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_2","text":"如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python","text_tokens":["的","--","；","-","name","使用","那","dev","呢","新创","这里","包是","名字","相关","ros2","<","c","还是","或者","type","如果","终端","在","命令","c++","python","一个","创建","cd","src","新建","cmake","learning","？","如何","功能","这个","_","比如","可以","$","表示","package","create","我们","新创建","包","跟","~","，","pkg","ws","和","分别",">","就","：","build","。","/","中","版本","#"," ","ament","指令"],"title":"创建功能包","title_tokens":["功能","包","创建"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_3","text":"在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash","text_tokens":["的","变量","dev","配置","colcon","setup","编写","之后","才能","install","src","在","source","所有","创建","好","代码","cd",".","功能","_","需要","工作","可以","$","继续","空间","环境变量","我们","bash","完成","包中","包","运行","~","，","环境变","ws","local","环境","和","编译","：","build","#","/"," ","正常"],"title":"编译功能包","title_tokens":["功能","包","编译"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_4","text":"功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。","text_tokens":["的","来","那","是否是","呢","新创","两个","判断","包并","文件夹","普通","一个","件夹","创建","文件","？","功能","如何","我们","不是","新创建","包","是否","，","。","结构","下","分析","刚才"],"title":"功能包的结构","title_tokens":["功能","的","结构","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#c","text":"首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。","text_tokens":["的","是","使用","两个","其中","设置","存在","看","该","各种","如下","主要","才能","必然","所以","在","c++","代码","文件","cmake",".","要","txt","功能","如何","语法","需要","内容","版权","package","规则","声明","包含","xml","类型","依赖","包","运行","，","cmakerlists","首先","和","编译","。","：","中","下","描述","cmakelists"," ","必须"],"title":"C++功能包","title_tokens":["功能","c++","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#python","text":"C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。","text_tokens":["“","的","是","使用","除此之外","还有","有","给","两个","配置","一样","setup","各种","不","除此"," ","points","里边","主要","信息","所以","在","c++","python","行文","执行","一些","”","程序","文件","型","这",".","入口","功能","编译成","如何","_","需要","源码","后续","会","内容","版权","之外","大家","package","译成","包含","声明","xml","可执行文件","我们","依赖","包","不同","py","，","语言","讲解","entry","和","编译","编程","将","：","。","但是","介绍","解析","版本","描述","但","中","也"],"title":"Python功能包","title_tokens":["功能","python","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_5","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["-","humble","docs","ros2","first","tutorials","workspace","org","creating",".","a","https","package","ros","en",":","/"," ","html","your"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/","text":"节点 机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。 通信模型 完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。 案例一：Hello World节点（面向过程） ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。 运行效果 大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ], 创建节点流程 代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。 案例二：Hello World节点（面向对象） 所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。 运行效果 下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ], 创建节点流程 所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。 案例三：物体识别节点 没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。 运行效果 在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。 代码解析 在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ], 案例四：机器视觉识别节点 用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。 运行效果 启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 注意：如果是在虚拟机中操作，需要进行以下设置： 把虚拟机设置为兼容USB3.1； 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。 代码解析 相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ], 节点命令行操作 节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息 思考题 现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["+","框会","dev","库","sleep","一种","waitkey","启动","移植性","眼睛","这里","某些","独立","看","算机","只不过","电脑","作者","腿","终端","apple","org","行文","代码","加入","算是","调试","更加","及","回到","要","rclpy","分布式","物体","系统","颜色","得到","w","编程","circle","来源","utf","通信模型","互相","关注","查询","它","四个","设计","多种","移动","先","合理","approx","编写","info","操作","是不是","每","看上","可读性","上","分布","好","后勤部门","打开","主","while","hsv","中间","cnt","总结","可视化","二值化","通过","载体","模块化","一台","等","不是","object","很","综合","去除","color","关于"," ","points","接下来","as","-","usb3.1","运动","模拟","就让","面积","get","docs","退出","根据","helloworld","却","下限",")","选项","nodes","入口","细胞","机制","？","没错","被","run","可","负责","可以","一起","打印","控制","输出","重要","综合体","90","着急","实现","课程","分别","坐标","/","身体","一节","从","init","指令","为","destroy","hierarchy","太小","0.5","思考题","coding","多","是","可视","数值","总体","组成","再","改变","状态","连接","经常","查看","完整","可移植性","tutorials","命令","程序","地方","修改","方法","logger","com","马","这款","发现","后勤","中心点","150","entry","环境","前后左右","兼容","驱动","方便","findcontours","图片","上限","__","这份","world","后勤部","上去","古月","所在","机器","计算","周期","稍微","远程","某种","一个","创建","理解","5","、","学习","安装","最为","list","结果","255","视觉","https","好像","home","而言","过程","detect","对于","想到","。","下来","一帧","自然","初始化","name","面向","相比","呢","苹果","并且","—","出来","一样","img","如下","一项","知道","既然","类似","def","轮子","numpy","一些","保障","读取","到","hello","操作系统","red","联系","流程","检测","是否","运行","搭载","左右","就是","动态","厂房","得","bin","显示","进程","hcx","类","'","h","列表","之间","两个","请","销毁","时间","理过","更好","（","所以","发生","比喻","后","布式","保持","获取","执行","args","点画","工厂","www","前后","外界","合体","勾勒","字符串","做","和","更多","解析","np","更多要","认识","{","没","除此之外","更","职责","机器人","另外","这座","!","shape","<","为止","apt","各种","不","监控","java","xy","字符","b","”","来看","红色","upper","链接","比如","这个","里","高","虚拟","左上角","同理","不能","一","心里","这些","唯一","效果","drawcontours","至","吧",":","速度","中","左上","ret","html","开始","“","编程语言","给","python3","岂","除此","chain","还","问题","云端","简单","in","所以然","最大","疑惑","现在","工作","当然","opencv","轮廓","我们","推荐","不同","三","语言","import","相机","bgr","将","#","放在","但","imread","正常","destroyallwindows","的","示例","点","class","不用","console","人为","时候","名字","配置","想要","纠结","初始","cvtcolor","humble","出","注意","2","前","关闭","install","二","如果","步骤","骡子","的话","保持联系","之前","案例","y","learning",".","*","1","更为","对象","调整","图像识别","过","mask","范围","int","处理","居","50","ws","read","接口","]","也","此处","设备","说明","命令行","整体","一下","true","ros2","@","收到","编码","信息","bgr2hsv","src","在","super","none","这","摇杆","看看","摄像","节点","之外","一张","思考","ok","cv2","而已","虽然","当","en","先拉","下","node","某","计算机","时","取","模型","那","你","复杂","处理过程","任务","编码方式","休眠","其中","绿点","知其然","概念","还是","找到","宽","shutdown","识别","绿色","参考","videocapture","转换","乃至","用","jpg","guyuehome","contours","路径","大家","应该","这样","中将","发送","py","from","看上去","可能","编译","webcam","就","命名","过来","刚才","来","\"","不要","；","boundingrect","叫做","提供","有","main","四","spin","总体而言","180","众多","共同","或者","understanding","可移植",",","改成","[","面向对象","文件","env","即可","难","常用","inrange","包","具体","进行","接下","为例","helloworldnode","还会","循环","=","编写程序","结构","通信","设置","像","未来","父类","ruby","8","让","并","还有","for","重新","生成","21","移植","setup","硬件","等待","重点","一线","阈值","框架图","一点","imshow","每个","函数","array","像素","会弹","功能","如何","以下","摄像头","sudo","0","推动","噪声","self","日志","部门","ros","scripts","完成","，","只是","变化","介绍","做到","具备","分析","if","使用","例程","上角","起来","熟悉","窗口","虚拟机","c++","看到","cap","名称","各不相同","lower","太","出现","网上","_","需要","x","time","表示","桌子","可执行文件","可读","框架","依然","不过","把","参数",">","到底","知其所以然","这种","实际","去","usr","考题","以","retr","相同","128","模块","成为","啦","位于","每一项","呀","该","物理","他们","python","角度","图像","实时","）","pyhton","$","a","工人","会","用到","image","开发","成功","中心","溜溜","都","然后","发布","了","continue","孤立","：","像头","但是","方式","图像处理","("],"title":"**节点**","title_tokens":["*","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_1","text":"机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。","text_tokens":["“","的","取","那","是","给","成为","机器人","整体","每一项","名字","连接","各种","众多","一项","机器","在","一个","一些","”","细胞","机制","到","功能","工作","一起","节点","通过","综合体","ros","我们","这些","合体","，","综合","了","就是","就","。","中"," ","像"],"title":"节点","title_tokens":["节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_2","text":"完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。","text_tokens":["“","来","；","编程语言","叫做","提供","有","眼睛","某些","独立","后勤部","算机","除此","共同","机器","计算","或者","腿","还","远程","云端","一个","行文","文件","算是","、","分布式","工作","结果","系统","我们","得到","具体","不同","语言","接下","编程","还会","想到","。","互相","放在","但","它","查询","下来","ruby","的","设计","自然","让","并","还有","人为","时候","移动","想要","配置","—","生成","硬件","操作","既然","每","一线","轮子","上","分布","后勤部门","保障","到","每个","功能","如何","摄像头","推动","更为","操作系统","通过","载体","部门","一台","等","不是","完成","运行","，","搭载","左右","就是","厂房","也"," ","进程","接下来","运动","整体","根据","却","信息","在","比喻","c++","看到","获取","执行","布式","名称","细胞","这","各不相同","摇杆","工厂","看看","需要","可以","前后","一起","摄像","外界","之外","节点","控制","桌子","可执行文件","虽然","当","做","实现","和","分别","参数","到底","身体","某","从","去","计算机","时","认识","相同","多","那","是","除此之外","你","更","任务","职责","复杂","组成","机器人","另外","位于","状态","这座","连接","该","完整","不","监控","java","找到","物理","他们","b","python","程序","地方","”","角度","乃至","来看","比如","这个","里","这款","a","工人","后勤","这些","这样","唯一","可能","都","了","环境","前后左右","编译","就","：","像头","速度","中","命名"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world","text":"ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。","text_tokens":["“","的","来","是","并","复杂","先","例程","world","ros2","编写","不","从","字符","终端","程序","一个","简单","”","到","功能","hello","最为","需要","当然","打印","节点","我们","，","字符串","实现","了","就是","。","循环","中","编写程序"," ","开始"],"title":"案例一：Hello World节点（面向过程）","title_tokens":["hello","）","过程","（","节点","面向","：","一","案例","world"," "]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_3","text":"大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["“","的","来","不要","是","字符","再","先","出来","world","知其然","helloworld","ros2","看","所以","终端","骡子","命令","后","在","看到","好","执行","代码","”","learning","所以然","如何","run","马","这个","也","_","hello","可以","$","打印","节点","大家","通过","我们","效果","运行","成功","溜溜","，","着急","字符串","先拉","然后","实现","过程","课程","编译","。","循环","知其所以然","中","下","node","做到"," ","分析"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_4","text":"这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ],","text_tokens":["“","\"","库","sleep","main","world","python3","古月","作者",",","[","创建","代码","加入","文件","env","rclpy","系统","我们","包","进行","import","过程","。","utf","#","=","循环","设置","正常","的","示例","点","8","初始化","让","并","面向","console","呢","配置","初始","setup","编写","info","如下","知道","关闭","def","learning",".","函数","打开","如何","主","*","hello","while","功能","对象","日志","scripts","居","完成","是否","运行","，","接口","]","bin"," ","points","类","'","-","使用","说明","get","销毁","helloworld","@","ros2","时间","信息","后",")","选项","args","none","入口","？","_","www","需要","time","节点","输出","控制","ok","实现","/","下","node","init","usr","destroy","{","0.5","coding","是","休眠","!","shutdown","python","程序","”","来看","logger","com","这个","guyuehome","py","from","发布","entry",":","编译","：","方式","("],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_5","text":"代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。","text_tokens":["的","不用","是","初始化","使用","并","复杂","更","有","面向","模块","机器人","想要","先","纠结","初始","一下","销毁","经常","这里","机器","或者","编码","关闭","稍微","如果","的话","c++","一个","理解","创建","代码","方法","简单","一点","函数","学习","功能","出现","难","pyhton","用到","总结","会","节点","可以","大家","发现","过","系统","流程","重要","应该","模块化","我们","这样","具体","虽然","，","很","做","实现","过程","编程","对于","。","：","就","这种","但是","中","接口","方式","做到"," ","未来"],"title":"创建节点流程","title_tokens":["流程","节点","创建"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world_1","text":"所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。","text_tokens":["的","使用","复杂","更","面向","移植性","ros2","移植","上去","起来","可移植性","更好","所以","可移植","看上","改成","在","面向对象","可读性","一些","代码","调试","更加","比如","也","可以","对象","会","大家","我们","开发","这样","可读","虽然","推荐","，","看上去","了","编程","和","就","。","但是","中","方式","方便"," ","具备","刚才"],"title":"案例二：Hello World节点（面向对象）","title_tokens":["hello","）","对象","（","二","节点","面向","：","面向对象","案例","world"," "]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_6","text":"下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["“","的","class","一下","world","helloworld","ros2","还是","终端","后","在","字符","看到","”","learning","run","hello","_","可以","$","调整","打印","节点","效果","运行","成功","，","字符串","。","：","循环","中","node","下来"," "],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_7","text":"功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ],","text_tokens":["“","\"","库","sleep","__","这份","main","world","python3","spin","看","古月","作者",",","[","面向对象","一个","创建","代码","加入","文件","env","rclpy","系统","我们","包","具体","进行","import","helloworldnode","。","utf","#","循环","=","结构","设置","正常","父类","的","示例","点","8","class","初始化","name","并","让","面向","console","配置","初始","一样","setup","编写","info","如下","等待","知道","关闭","def","learning",".","函数","打开","功能","主","*","hello","while","对象","self","日志","scripts","居","完成","是否","运行","，","变化","接口","]","bin"," ","points","类","'","-","使用","说明","get","一下","退出","销毁","helloworld","@","ros2","时间","信息","发生","后",")","super","args","选项","none","入口","_","www","需要","time","节点","输出","控制","ok","虽然","实现","/","node","init","usr","时","destroy","{","0.5","coding","休眠","!","shutdown","程序","python","”","logger","com","guyuehome","py","from","发布","了","entry",":","编译","：","但是","方式","("],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_8","text":"所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。","text_tokens":["的","是","初始化","并","还有","总体","任务","编码方式","改变","这里","机器人","初始","world","销毁","总体而言","只不过","为止"," ","机器","编码","关闭","所以","是不是","步骤","一个","一些","创建","这","到","功能","疑惑","hello","打印","节点","大家","不能","心里","而已","不是","完成","具体","依然","，","只是","而言","做","实现","吧","了","不过","编程","。","方式","接口","中","得","四个"],"title":"创建节点流程","title_tokens":["流程","节点","创建"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_9","text":"没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。","text_tokens":["的","来","图片","任务","模拟","苹果","机器人","先","编写","机器","找到","从","识别","一个","没错","网上","一张","节点","视觉","通过","我们","，","接下","下来","实现","为例","过程","就","。","中","实际"," ","接下来","以"],"title":"案例三：物体识别节点","title_tokens":["三","物体","识别","节点","：","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_10","text":"在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。","text_tokens":["框会","图片","dev","库","python3","apple","一个","代码","即可","安装","opencv","home","我们","轮廓","将","。","#","=","imread","的","苹果","重新","—","出来","21","出","如下","注意","前","install","learning",".","会弹","sudo","中间","可视化","处理","object","运行","，","ws"," ","hcx","'","-","使用","请","例程","ros2","窗口","src","在","后",")","看到","被","run","_","需要","可以","表示","cv2","勾勒","把","/","node","实际","为","指令","可视","啦","绿点","apt","tutorials","识别","绿色","修改","图像","jpg","这个","用到","$","路径","中心点","image","成功","py","中心","然后","编译","就","：","中","图像处理","("],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_11","text":"在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ],","text_tokens":["+","来","\"","图片","boundingrect","库","dev","上限","waitkey","main","python3","spin","180","古月","所在","作者","机器","计算","chain",",","apple","[","一个","创建","加入","5","及","env","in","代码","文件","rclpy","list","255","opencv","系统","颜色","轮廓","我们","inrange","home","得到","具体","进行","w","包","import","过程","detect","bgr","circle","。","utf","#","=","将","关注","循环","设置","imread","destroyallwindows","的","示例","点","8","class","初始化","让","并","console","for","苹果","配置","cvtcolor","出来","初始","21","img","approx","setup","编写","info","如下","重点","2","等待","知道","关闭","def","numpy","阈值","一些","y","imshow","读取","learning",".","array","像素","函数","打开","功能","如何","*","1","0","hsv","主","cnt","二值化","噪声","图像识别","对象","通过","red","检测","mask","范围","int","scripts","处理","不是","居","完成","object","，","ws","去除","接口","color","]","关于"," ","bin","显示","points","hcx","此处","类","'","as","-","if","h","使用","说明","模拟","面积","例程","上角","get","退出","销毁","helloworld","@","ros2","理过","下限","bgr2hsv","src","在","后",")","选项","args","none","入口","lower","点画","出现","_","www","x","需要","节点","cv2","90","勾勒","实现","更多","和","坐标","/","np","node","从","usr","更多要","为","hierarchy","init","destroy","{","模型","retr","太小","coding","128","是","数值","处理过程","机器人","!","shape","<","概念","tutorials","xy","宽","shutdown","识别","python","程序","图像","转换","红色","logger","com","upper","jpg","这个","guyuehome","高","contours","左上角","大家","image","150","效果","drawcontours","中心","py","from","continue","entry","了",":","编译","：","中","左上","findcontours","图像处理","("],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_12","text":"用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。","text_tokens":["的","图片","没","有","就让","苹果","机器人","眼睛","其中","合理","呀","不","机器","或者","还","识别","类似","问题","图像","读取","用","太","摄像头","物体","摄像","节点","颜色","好像","应该","我们","进行","，","接下","动态","。","像头","下来","接下来"],"title":"案例四：机器视觉识别节点","title_tokens":["机器","识别","视觉","节点","：","四","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_13","text":"启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 注意：如果是在虚拟机中操作，需要进行以下设置： 把虚拟机设置为兼容USB3.1； 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。","text_tokens":["的","设备","；","是","usb3.1","启动","并且","移动","啦","连接","ros2","该","如下","注意","操作","虚拟机","识别","如果","终端","在","后","一个","实时","learning","红色","以下","run","可","摄像头","_","物体","需要","可以","$","虚拟","摄像","节点","中将","object","运行","进行","成功","，","至","把","webcam","为","兼容","：","#","像头","。","中","就","node","驱动"," ","设置"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_14","text":"相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ],","text_tokens":["+","来","\"","图片","boundingrect","库","上限","waitkey","main","这里","python3","180","古月","所在","作者","计算","周期","chain",",","[","创建","5","代码","及","env","in","文件","加入","rclpy","最大","list","255","opencv","系统","颜色","轮廓","inrange","得到","进行","包","w","相机","import","bgr","detect","circle","来源","。","utf","#","=","将","设置","一帧","的","示例","点","8","class","初始化","让","并","console","for","相比","并且","苹果","配置","cvtcolor","出来","初始","img","approx","setup","编写","info","如下","2","知道","关闭","def","numpy","之前","阈值","一些","y","imshow","读取","learning",".","array","像素","函数","打开","功能","主","*","摄像头","0","hsv","1","while","cnt","二值化","噪声","对象","通过","red","检测","mask","范围","int","scripts","处理","居","完成","object","，","50","变化","去除","read","接口","color","]","bin"," ","显示","points","类","'","as","-","if","使用","h","说明","面积","get","上角","销毁","true","@","ros2","helloworld","信息","下限","bgr2hsv","后",")","cap","args","选项","none","入口","lower","点画","出现","_","www","x","需要","摄像","节点","cv2","ok","90","勾勒","和","坐标","/","np","node","从","usr","为","hierarchy","init","destroy","{","模型","retr","太小","coding","128","是","数值","!","shape","<","xy","宽","shutdown","识别","程序","videocapture","python","修改","图像","转换","红色","logger","com","upper","guyuehome","高","contours","左上角","image","150","效果","drawcontours","中心","py","from","continue","entry","了",":","驱动","webcam","：","像头","编译","中","左上","findcontours","ret","图像处理","("],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_15","text":"节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息","text_tokens":["的","name","列表","查看","ros2","<","info","如下","操作","信息","命令","_","常用","$","list","节点",">","：","#","node"," "],"title":"节点命令行操作","title_tokens":["命令","命令行","操作","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_16","text":"现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。","text_tokens":["一种","有","给","电脑","岂","机器","问题","某种","一个","回到","要","最为","现在","工作","常用","系统","我们","还会","。","将","的","并","多种","配置","想要","如果","保持联系","框架图","摄像头","联系","ros","不是","，","很","介绍","得"," ","显示","运动","之间","两个","熟悉","收到","保持","后","在","看到","细胞","这","机制","没错","摇杆","负责","摄像","节点","控制","框架","实现","和","把","参数","下","一节","指令","机器人","另外","改变","连接","概念","他们","b","方法","图像","这个","比如","发现","a","会","同理","大家","应该","这些","发送","了","孤立","就","速度","像头","中","过来","开始"],"title":"思考题","title_tokens":["思考","思考题","考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_17","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["en","-","tutorials","understanding","html",":","ros2","https","org","/","docs","humble","ros","nodes","."],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/","text":"话题 节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。 通信模型 以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。 发布/订阅模型 从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为发布者，接收数据的对象称之为订阅者，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。 多对多通信 大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。 异步通信 话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。 消息接口 最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过.msg后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。 案例一：Hello World话题通信 了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 运行效果 启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。 发布者代码解析 我们来看下发布者的实现方法。 程序实现 learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口 订阅者代码解析 我们再来看下订阅者的实现方法。 程序实现 learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。 案例二：机器视觉识别 在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。 运行效果 这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。 发布者代码解析 learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], }, 订阅者代码解析 learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], }, 案例三：机器视觉识别优化 通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub 话题命令行操作 话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息 思考题 关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？ 参考链接 https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["+","带宽","库","一种","waitkey","raw","基本","是从","启动","移植性","这里","想下","bgr8","独立","看","某些","一定","作者","对劲","终端","org","代码","加入","及","要","rclpy","std","物体","无论","系统","颜色","得到","w","编程","circle","utf","通信模型","第一个","互相","第二","它","拼接","设计","目标","先","哪里","heard","approx","编写","info","接收数据","是不是","操作","比方","每","上","好","打开","发出","主","以上","魔性","bridge","hsv","cnt","可视化","人","publishing","总结","二值化","通过","能够","模块化","hz","不是","data","一步","object","队列","去除","提高","color","关于"," ","points","接下来","耦","兴趣","topics","as","-","通用","接收","优先","运动","面积","get","docs","区分","callback","退出","helloworld","万缕","subscribernode","知识","接口定义","听","下限","传感器","数据传输",")","选项","入口","}","？","没错","长宽","被","run","可以","同学","控制","优先级","输出","保证","一次","重要","90","东西","较强","bw","实现","分别","采集","坐标","/","要求","sub","描述","从","init","指令","为","英文","destroy","hierarchy","例子","软件","0.5","太小","coding","多","来讲","是","可视","数值","思考题","号","组成","再","每换","渲染","肯定","出去","查看","格式","逻辑性","组织","发布者","可移植性","tutorials","因为","命令","程序","修改","方法","logger","com","数据类型","进一步","叫","此时","间","150","！","entry","驱动","定时","findcontours","imagepublisher","10","上限","__","称之为","排版","world","用户","基于","古月","所在","控制指令","%","机器","了解","周期","计算","多个","s","某种","一个","理解","创建","5","、","填充","挺","单向","优化","安装","list","255","视觉","https","好像","listener","又","不然","过程","说干就干","detect","拍摄","对于","。","订阅","一句","usb","下来","3","内","一帧","自然","随处","传递数据","name","初始化","随处可见","呢","并且","苹果","出来","自己","一样","存在","img","之为","如下","几个","知道","既然","画面","类似","def","numpy","一些","不行","读取","sensor","到","打","hello","原理","者","对应","据传","cam","red","联系","流程","timer","检测","是否","运行","就是","得","bin","显示","平时","类","统一","'","原本","数据","转化","h","列表","最","之间","两个","符合","销毁","更好","（","保持","后","举","获取","执行","args","一般","点画","www","本原","没有","听说","本身","公众","勾勒","字符串","做","和","无关","解析","np","方向","{","转换成","没","接口协议","更","自行","机器人","另外","定义","msgs","!","shape","<","话题","apt","各种","不","监控","cv","0.1","xy","字符","二个","b","”","来看","红色","upper","第二个","链接","这个","比如","里","高","左上角","不能","一","千丝万缕","包含","提示","集成","这些","唯一","效果","drawcontours","传感",":","任何","中","ret","左上","所谓","过瘾","html","值","开始","“","编程语言","imagesubscriber","周期性","给","python3","讲","只要","chain","还","率","问题","一份","\\","同样","in","现在","当然","继续","opencv","create","我们","轮廓","词","相机","语言","生活","import","三","换成","bgr","阅读","将","各种各样","#","但","在生活中","回调","的","示例","点","感觉","class","console","时候","传递","名字","配置","想要","humble","就要","初始","cvtcolor","根本","单位","2","注意","与","关闭","定时器","install","二","如果","几乎","的话","所有","之前","案例","publisher","y","一新",".","learning","复用","*","1","对象","么","建议","mask","范围","int","处理","居","完全","感兴","publish","联系方式","read","文章","接口","数据结构","]","也","什么样","异步","设备","合适","说明","基本原理","逻辑","命令行","一下","说","精简","true","ros2","@","直接","收到","解","各样","信息","topic","只","bgr2hsv","块","在","super","进入","none","这","消息","转化成","感兴趣","摇杆","留","作为","节点","换","思考","第一","很多","cv2","i","imgmsg","类型","第一次","并不知道","虽然","en","最后","从而","下","某","node","rgb","模型","那","你","复杂","千丝","其中","成","一篇","概念","还是","想","shutdown","宽","识别","参考","videocapture","转换","焕然一新","用","不太","感器","谁","guyuehome","contours","大家","中是","应该","这样","一行","发送","py","from","可能","编译","个","就","webcam","标准","思想","刚才","来","\"","boundingrect","叫做","有","main","receiving","spin","180","需求","understanding","type","可移植",",","pub","[","文件","env","另","即可","常用","协议","inrange","包","进行","视频","接下","中文","为例","循环","=","结构","通信","仔细","像","已经","父类","设置","未来","想象","8","让","并","还有","关系","for","移植","setup","硬件","发送数据","之后","等待","阈值","放入","imshow","video","每个","函数","像素","固定","程序实现","功能","如何","以下","array","0","化成","sudo","噪声","self","日志","ros","对","scripts","传输","string","完成","frame","更换","，","讲解","变化","to","满足","做到","分析","微信","if","使用","后缀","小编","例程","上角","报纸","秒","数量","才能","必然","长度","似乎","看到","cap","名称","适合","等等","太","lower","_","需要","x","名","可见","exe","已","无法","dds","把","不过","参数",">","他会","这种","积木","频率","usr","做成","考题","以","chatter","retr","128","模块","桥梁","publishernode","成为","啦","呀","什么","特性","msg","该","subscription","杂志","用于","python","不知","图像","角度","实时","指","焕然","写","cvbridge","报社","）","$","a","会","echo","image","开发","不变","成功","中心","都","continue","发布","了","：","但是","方式","图像处理","稍后","("],"title":"**话题**","title_tokens":["*","话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_1","text":"节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。","text_tokens":["的","传递数据","是","数据","桥梁","并","一种","有","最","之间","传递","机器人","千丝","其中","独立","万缕","话题","各种","机器","各样","功能","会","节点","间","联系","千丝万缕","重要","这些","不是","，","实现","了","就是","联系方式","。","各种各样","方式","但","它"," "],"title":"话题","title_tokens":["话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_2","text":"以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。","text_tokens":["有","给","称之为","用户","机器","某种","一个","要","我们","得到","相机","视频","为例","拍摄","。","将","它","的","关系","传递","存在","硬件","之为","是不是","上","到","功能","据传","可视化","ros","不是","传输","，"," ","显示","设备","数据","之间","两个","一下","信息","必然","才能","在","数据传输","获取","这","？","没错","作为","可以","节点","做","实现","某","从","以","方向","是","可视","桥梁","机器人","渲染","查看","话题","监控","想","b","图像","实时","这个","a","此时","大家","这样","了","驱动","就","方式","中"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_3","text":"从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为发布者，接收数据的对象称之为订阅者，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。","text_tokens":["“","叫做","有","是从","称之为","排版","看","基于","古月","机器","一个","、","生活","。","订阅","它","在生活中","的","自然","随处","随处可见","呢","名字","发送数据","之为","之后","接收数据","比方","每","如果","类似","的话","好","到","固定","打","者","据传","对象","对","传输","居","，","感兴","就是","文章","也"," ","平时","微信","兴趣","数据","使用","接收","小编","报纸","收到","知识","数据传输","名称","？","等等","感兴趣","需要","可以","节点","没有","可见","类型","本身","公众","无法","dds","实现","和","把","他会","/","要求","从","模型","是","号","成为","机器人","另外","成","什么","出去","特性","话题","格式","杂志","组织","发布者","”","角度","来看","这个","比如","数据类型","叫","会","大家","应该","这样","发送","都","发布","了","就"],"title":"发布/订阅模型","title_tokens":["订阅","发布","模型","/"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_4","text":"大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。","text_tokens":["有","想下","称之为","控制指令","机器","多个","一个","、","要","挺","我们","不然","。","订阅","通信模型","3","通信","仔细","的","想象","并","一样","存在","之为","2","注意","知道","是不是","画面","如果","每个","1","魔性","者","人","建议","ros","对","不是","，"," ","也","优先","一下","区分","报纸","数量","听","似乎","没错","被","摇杆","可以","节点","控制","优先级","很多","公众","东西","和","指令","模型","多","是","号","再","机器人","该","话题","杂志","不","还是","发布者","因为","谁","这个","里","大家","这些","唯一","发送","可能","发布","了","个"],"title":"多对多通信","title_tokens":["通信","多","对"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_5","text":"话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。","text_tokens":["叫做","有","某些","古月","只要","周期","一个","一份","词","阅读","。","订阅","通信","的","让","还有","时候","根本","知道","如果","类似","一些","发出","者","居","传输","，","就是","文章"," ","也","异步","数据","合适","逻辑","运动","报纸","收到","后","传感器","这","适合","？","等等","太","可以","同学","控制","第一","一次","听说","第一次","并不知道","公众","较强","参数","某","指令","那","是","你","更","号","什么","特性","一篇","话题","逻辑性","不","发布者","用于","不知","修改","指","用","感器","报社","这个","比如","传感","可能","发布","了","就","所谓"],"title":"异步通信","title_tokens":["异步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_6","text":"最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过.msg后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。","text_tokens":["编程语言","一种","有","这里","称之为","机器","一个","理解","文件","、","系统","我们","进行","语言","中文","编程","。","订阅","各种各样","结构","通信","像","的","拼接","一样","之为","与","既然",".","每个","像素","者","对应","据传","通过","ros","传输","，","接口","得","数据结构","也"," ","统一","数据","后缀","说","接口定义","各样","块","在","数据传输","消息","等等","长宽","可以","节点","最后","和","无关","积木","描述","rgb","英文","是","复杂","自行","组成","机器人","定义","成","msg","格式","话题","各种","概念","发布者","图像","比如","会","不能","包含","这样","都","发布","了","就","中","方式","标准","值"],"title":"消息接口","title_tokens":["消息","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#hello-world","text":"了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。","text_tokens":["“","的","chatter","来","是","基本原理","接收","基本","啦","再","定义","就要","例程","world","话题","编写","还是","了解","发布者","从","周期","字符","一个","创建","代码","”","消息","到","hello","原理","这个","者","本原","ros","我们","类型","string","发送","，","字符串","接下","发布","了","。","订阅","中","从而","下来","标准"," ","接下来","开始"],"title":"案例一：Hello World话题通信","title_tokens":["hello","：","一","案例","world"," ","通信","话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_7","text":"启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。","text_tokens":["“","的","数据","启动","world","helloworld","ros2","该","话题","收到","发布者","topic","终端","二个","pub","字符","看到","一个","几乎","”","同样","learning","消息","第二个","run","hello","_","也","者","可以","$","节点","第一","运行","，","字符串","发布","。","：","订阅","第一个","循环","sub","第二","频率"," ","以"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_8","text":"我们来看下发布者的实现方法。","text_tokens":["的","发布者","发布","实现","。","下","方法","我们","来看"],"title":"发布者代码解析","title_tokens":["发布者","发布","解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_9","text":"learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], },","text_tokens":["“","\"","库","10","__","main","world","python3","spin","古月","%","作者","周期",",","s","pub","[","一个","创建","代码","加入","文件","env","、","填充","rclpy","std","系统","create","包","进行","import","utf","#","=","循环","设置","已经","父类","回调","的","示例","点","8","class","name","初始化","并","让","console","配置","初始","setup","单位","编写","info","如下","等待","知道","关闭","定时器","def","publisher",".","learning","函数","打开","功能","主","*","hello","对象","publishing","self","日志","timer","scripts","居","string","data","完成","，","队列","publish","接口","]"," ","bin","points","类","'","-","数据","说明","get","callback","退出","销毁","helloworld","@","ros2","秒","topic","（","长度","信息","后",")","super","执行","args","none","入口","选项","}","消息","_","www","需要","名","节点","输出","类型","字符串","/","node","init","usr","为","destroy","{","chatter","0.5","coding","publishernode","msgs","!","msg","话题","发布者","shutdown","字符","python","程序","”","logger","com","guyuehome","）","提示","py","from","发布","entry",":","编译","：","定时","中","("],"title":"程序实现","title_tokens":["实现","程序","程序实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_10","text":"对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口","text_tokens":["初始化","并","想要","初始","销毁","话题","如下","发布者","关闭","如果","程序","一个","创建","填充","消息","以上","对象","节点","流程","对","我们","进行","，","实现","发布","编程","：","接口"," ","分析"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_11","text":"我们再来看下订阅者的实现方法。","text_tokens":["的","者","实现","。","订阅","再","下","方法","我们","来看"],"title":"订阅者代码解析","title_tokens":["订阅","解析","代码","者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_12","text":"learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], },","text_tokens":["“","\"","库","10","__","main","world","python3","spin","古月","%","作者",",","s","[","pub","一个","创建","\\","代码","文件","env","、","加入","rclpy","std","系统","create","listener","包","进行","import","utf","订阅","#","=","循环","设置","父类","回调","的","示例","点","8","class","name","初始化","并","让","console","配置","初始","heard","setup","编写","info","如下","等待","知道","关闭","def",".","learning","函数","打开","功能","主","*","hello","者","对象","self","日志","对","scripts","处理","居","string","data","完成","，","队列","接口","]"," ","bin","points","类","'","-","数据","说明","get","callback","退出","销毁","helloworld","@","ros2","subscribernode","收到","topic","（","长度","信息","后",")","super","执行","args","none","入口","选项","}","消息","_","www","需要","名","节点","输出","i","类型","/","sub","node","init","usr","destroy","{","chatter","coding","msgs","定义","!","msg","话题","subscription","shutdown","python","程序","”","logger","com","guyuehome","）","提示","py","from","entry",":","编译","：","标准","("],"title":"程序实现","title_tokens":["实现","程序","程序实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_13","text":"对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。","text_tokens":["的","数据","初始化","并","啦","想要","初始","例程","world","销毁","基于","话题","一定","如下","不","机器","关闭","还","如果","程序","一个","创建","好","之前","函数","过瘾","优化","以上","hello","者","对象","节点","继续","大家","视觉","流程","对","我们","处理","进行","，","接下","实现","编程","。","订阅","：","接口","下","下来"," ","通信","分析","接下来","回调"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_14","text":"在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。","text_tokens":["的","来讲","模块","是","没","并","数据","并且","机器人","两个","话题","概念","机器","周期","更好","识别","在","问题","程序","一个","图像","红色","即可","功能","物体","这个","节点","视觉","通过","间","联系","没有","模块化","对","我们","开发","传输","虽然","相机","，","讲解","实现","过程","了","和","驱动","对于","。","将","就是","但是","中","方式","做到","做成"],"title":"案例二：机器视觉识别","title_tokens":["机器","二","视觉","识别","：","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_15","text":"这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。","text_tokens":["启动","移植性","可移植","终端","pub","一个","另","要","即可","物体","视觉","我们","相机","说干就干","。","订阅","将","第一个","第二","内","未来","的","设计","并","先","移植","如果","好","放入","learning","功能","如何","以下","模块化","ros","范围","运行","更换","，","完全"," ","两个","ros2","更好","只","topic","保持","在","看到","消息","？","run","_","需要","可以","节点","保证","第一","实现","分别","这种","下","sub","软件","是","模块","啦","定义","话题","可移植性","识别","二个","修改","图像","来看","红色","第二个","这个","$","中是","效果","不变","发布","了","驱动","webcam","就","标准","思想"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_16","text":"learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], },","text_tokens":["imagepublisher","\"","库","10","__","raw","main","bgr8","python3","spin","古月","作者","周期",",","pub","[","一个","创建","代码","加入","文件","env","、","rclpy","opencv","系统","create","包","进行","视频","import","相机","换成","utf","将","#","=","循环","设置","已经","一帧","父类","回调","的","示例","点","8","class","name","初始化","并","让","console","配置","初始","setup","单位","编写","info","如下","与","等待","知道","关闭","定时器","如果","def","publisher","video","读取",".","learning","sensor","函数","打开","功能","主","*","bridge","0","对象","publishing","self","日志","timer","ros","scripts","处理","居","完成","frame","，","队列","publish","read","to","接口","]"," ","bin","points","类","'","设备","-","if","说明","get","callback","退出","销毁","true","@","ros2","helloworld","秒","topic","（","长度","信息","后",")","super","执行","cap","args","none","入口","选项","}","消息","_","www","需要","名","节点","输出","cv2","imgmsg","类型","采集","/","sub","node","init","usr","为","destroy","{","coding","转换成","号","msgs","!","msg","话题","cv","发布者","0.1","用于","shutdown","python","videocapture","程序","图像","转换","logger","com","cvbridge","guyuehome","）","image","提示","成功","py","from","发布","entry","webcam",":","驱动","编译","定时","：","ret","图像处理","稍后","("],"title":"发布者代码解析","title_tokens":["发布者","发布","解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_17","text":"learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], },","text_tokens":["+","\"","boundingrect","库","10","上限","__","waitkey","imagesubscriber","raw","main","bgr8","receiving","python3","spin","180","古月","所在","作者","计算","chain",",","[","pub","一个","创建","5","代码","及","env","、","in","文件","加入","rclpy","list","255","opencv","系统","颜色","create","listener","inrange","轮廓","得到","进行","包","w","import","bgr","detect","circle","utf","订阅","#","=","互相","将","循环","设置","父类","回调","的","示例","点","8","class","name","初始化","并","让","console","for","苹果","配置","初始","cvtcolor","出来","img","approx","setup","编写","info","如下","与","2","等待","知道","关闭","功能","def","numpy","阈值","一些","y","imshow","video",".","array","learning","sensor","函数","像素","化成","主","*","1","bridge","0","hsv","者","cnt","对象","二值化","噪声","self","red","日志","检测","mask","ros","范围","int","处理","scripts","居","data","完成","object","frame","，","队列","去除","to","打开","接口","color","]"," ","bin","显示","points","类","'","as","-","if","h","使用","说明","转化","面积","get","上角","callback","退出","销毁","helloworld","@","ros2","topic","下限","（","长度","bgr2hsv","后","信息",")","super","进入","args","none","入口","选项","}","消息","lower","转化成","点画","_","www","x","需要","名","节点","输出","cv2","imgmsg","类型","90","已","勾勒","和","坐标","/","sub","node","np","init","usr","从","为","hierarchy","destroy","{","模型","retr","太小","coding","128","数值","msgs","!","shape","msg","<","话题","subscription","cv","用于","xy","宽","shutdown","python","程序","图像","转换","红色","logger","com","cvbridge","upper","guyuehome","高","）","contours","左上角","image","150","提示","效果","drawcontours","中心","py","from","continue","entry","webcam",":","编译","：","中","左上","findcontours","图像处理","("],"title":"订阅者代码解析","title_tokens":["订阅","解析","代码","者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_18","text":"通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub","text_tokens":["有","只要","对劲","率","一个","代码","安装","现在","常用","当然","无论","视觉","协议","好像","我们","得到","相机","又","换成","。","一句","usb","的","感觉","让","目标","还有","humble","自己","哪里","是不是","install","好","一新","不行","learning","到","复用","功能","sudo","么","cam","通过","对","ros","不是","一步","，","变化","提高","接口","得","也"," ","耦","什么样","原本","通用","-","使用","符合","例程","精简","直接","ros2","解","只","topic","似乎","一般","这","？","run","_","需要","可以","节点","换","exe","做","不过","sub","node","指令","软件","是","接口协议","你","每换","呀","什么","话题","apt","不","识别","焕然","图像","焕然一新","不太","用","写","进一步","$","大家","集成","这样","一行","！","可能","都","发布","了","驱动","任何","就","webcam","中","标准","刚才"],"title":"案例三：机器视觉识别优化","title_tokens":["三","优化","机器","识别","视觉","：","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_19","text":"话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息","text_tokens":["的","带宽","数据","name","列表","查看","ros2","msg","<","话题","info","如下","操作","topic","信息","type","命令","pub","消息","_","常用","$","list","echo","hz","传输","data","bw","发布",">","：","#","频率"," "],"title":"话题命令行操作","title_tokens":["命令","命令行","操作","话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_20","text":"关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？","text_tokens":["的","思考题","来讲","是","数据","复杂","周期性","给","传递","机器人","这里","呢","肯定","讲","特性","话题","需求","几个","机器","周期","举","所有","一个","数据传输","方法","到","适合","？","单向","原理","留","据传","大家","思考","系统","能够","我们","传输","完成","是否","无法","，","实现","和","对于","就","：","满足","这种","关于","通信","考题","例子"],"title":"思考题","title_tokens":["思考","思考题","考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_21","text":"https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["topics","en","-","tutorials","understanding","html",":","ros2","https","org","/","docs","humble","ros","."],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/","text":"服务 话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。 通信模型 在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。 客户端/服务器模型 从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。 同步通信 这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。 一对多通信 比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。 服务接口 和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。 案例一：加法求解器 大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 运行效果 我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3 客户端代码解析 我们来看下客户端的实现方法。 程序实现 learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口 服务端代码解析 至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。 程序实现 learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_server = learning_service.service_adder_server:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口 案例二：机器视觉识别 好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。 运行效果 此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client 客户端代码解析 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], }, 服务端代码解析 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], }, 服务命令行操作 服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求 思考题 话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["objectclient","+","库","一种","client","raw","基本","waitkey","启动","bgr8","前者","官方","某些","看","target","电脑","绝大","雷达","作者","打印输出","终端","services","org","代码","加入","更加","附近","及","要","rclpy","加法器","物体","系统","颜色","得到","w","编程","circle","utf","通信模型","第一个","互相","第二","查询","incoming","设计","绝大部分","目标","1.0","应用","页面","合理","command","timeout","approx","编写","info","server","服务器","...","操作","每","上","好","invalid","变成","打开","主","以上","while","bridge","hsv","cnt","总结","人","二值化","问","通过","等","不是","data","返回","object","里程计","常见","很","队列","去除","color"," ","interface","points","接下来","argv","as","-","通用","接收","运动","面积","get","docs","某个","add","callback","退出","根据","请求","下限","传感器",")","选项","回想","相对","入口","机制","}","run","可以","一起","打印","后者","网页","输出","控制","一次","放到","90","except","实现","课程","分别","坐标","/","要求","sub","繁杂","从","为","init","hierarchy","简称","destroy","指令","太小","思考题","coding","多","是","数值","状态","而是","经常","出去","查看","一问一答","通信接口","里程","发布者","tutorials","命令","程序","方法","logger","com","数据类型","准确","此时","反应","150","假设","尽快","一对","response","entry","驱动","findcontours","认为","10","上限","宕机","__","拿到","器","称之为","古月","所在","控制指令","浏览","%","机器","了解","周期","计算","多个","一个","创建","5","越快越好","done","本","、","学习","单向","最为","list","结果","255","视觉","https","好像","服务端","listener","这么","sum","过程","detect","服务器端","。","订阅","接口类","usb","下来","3","软硬","传递数据","name","初始化","按照","相比","苹果","并且","wait","—","出来","一样","存在","img","之为","如下","知道","position","软硬件","srv","类似","求解","def","随时","numpy","一些","sensor","到","浏览器","原理","者","cam","again","red","流程","检测","是否","运行","e","客户端","就是","bin","显示","服务","类","'","提到","大部分","数据","转化","h","列表","之间","两个","销毁","时间","域名","三个","应答","场景","所以","（","后","adder","获取","args","一般","执行","点画","www","没有","反馈","勾勒","和","解析","np","{","圈圈","failed","更","机器人","另外","定义","msgs","!","request","shape","<","话题","大部","各种","不","cv","xy","二个","objectx","b","async","”","针对","红色","来看","upper","第二个","不好","比比皆是","链接","这个","比如","高","向","左上角","集成","一","提示","唯一","效果","这些","drawcontours","传感",":","跟踪","else","中","左上","数据通","html","开始","“","imagesubscriber","周期性","给","讲","python3","once","岂","展现","chain","return","自定义","adderserver","简单","\\","同样","in","现在","service","继续","opencv","create","我们","轮廓","不同","相机","import","生活","bgr","将","#","但","正常","在生活中","回调","的","示例","点","class","网站","console","时候","传递","配置","想要","humble","就要","初始","cvtcolor","传入","同步性","发给","2","与","那有","关闭","二","如果","adderclient","sys","之前","案例","y",".","learning","available","*","send","1","对象","图像识别","r","处","mask","int","范围","处理","居","完全","50","至于","接口","]","有所不同","也","异步","说明","命令行","addtwoints","数据通信","true","ros2","@","收到","信息","bgr2hsv","在","super","进入","none","访问","消息","封装","转化成","发","节点","思考","第一","很多","ok","希望","cv2","imgmsg","类型","加数","并不知道","当","跟随","break","en","半天","比比","下","node","时","模型","你","其中","成","务器","还是","宽","shutdown","识别","参考","转换","形式","感器","我","guyuehome","objecty","contours","大家","not","求和","应该","越快","这样","发送","py","from","可能","编译","就","标准","刚才","界面","\"","；","boundingrect","叫做","提供","有","main","receiving","spin","180","需求","result","或者","type","understanding",",","of","[","部分","文件","env","答","常用","two","最新","sec","inrange","包","具体","进行","接下","=","循环","通信","设置","上层","已经","父类","8","getobjectposition","让","并","还有","for","setup","硬件","之后","等待","服务器发送","阈值","imshow","future","video","函数","array","程序实现","像素","化成","功能","0","后续","噪声","self","日志","ros","对","接口类型","scripts","传输","完成","当前","frame","，","ints","网络","转圈","try","介绍","to","满足","准备","分析","同步","上述","if","使用","例程","上角","并不需要","长度","看到","适合","lower","等等","出现","_","需要","x","名","waiting","加法","exe","已","无法","不过",">","cs","自定","这种","位置","d","频率","usr","有点","考题","retr","exception","越好","128","两种","成为","啦","判断","什么","msg","subscription","call","一直","用于","python","不知","图像","有所","客户","n","法器","cvbridge","）","核心","$","会","a","用到","image","转圈圈","开发","成功","中心","都","然后","发布","了","continue","：","但是","方式","图像处理","("],"title":"**服务**","title_tokens":["*","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_1","text":"话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。","text_tokens":["的","异步","数据","使用","你","一种","之间","另外","—","讲","话题","收到","知道","发布者","多个","类似","方法","机制","本","消息","学习","单向","我","答","者","常用","可以","准确","一起","节点","问","ros","我们","效果","传输","是否","无法","，","同步","实现","发布","将","订阅","。","这种"," ","通信","服务"],"title":"服务","title_tokens":["服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_2","text":"在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。","text_tokens":["机器","周期","或者","一个","附近","单向","物体","答","service","继续","最新","好像","我们","这么","得到","不同","相机","。","订阅","通信模型","查询","通信","上层","的","并","目标","按照","时候","应用","一样","发给","之前","变成","到","图像识别","通过","问","对","ros","传输","，","有所不同"," ","服务","数据","使用","运动","并不需要","应答","信息","请求","在","机制","需要","可以","发","节点","希望","反馈","跟随","实现","课程","和","位置","这种","频率","模型","是","你","更","成为","机器人","另外","其中","而是","话题","一直","识别","图像","有所","红色","形式","这个","比如","高","我","此时","尽快","这样","发送","然后","发布","了","驱动","中"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_3","text":"从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。","text_tokens":["的","模型","数据","网站","你","叫做","并","时候","页面","某个","务器","经常","某些","域名","收到","各种","之后","电脑","服务器","应答","浏览","展现","从","或者","信息","请求","操作","在","服务器发送","上","机制","客户","针对","来看","形式","浏览器","我","答","需要","也","比如","向","会","此时","问","网页","通过","通信","处理","我们","返回","具体","发送","进行","反馈","，","客户端","生活","很","常见","实现","就是","服务器端","就","cs","。","这种","/"," ","为","服务","简称","在生活中"],"title":"客户端/服务器模型","title_tokens":["模型","客户端","服务器","/","务器","客户","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_4","text":"这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。","text_tokens":["的","圈圈","越好","是","你","宕机","接收","相比","状态","判断","称之为","务器","话题","之为","服务器","浏览","应答","一直","那有","或者","信息","所以","在","一般","越快越好","客户","到","浏览器","不好","这个","可以","反应","通过","没有","假设","越快","转圈圈","我们","，","客户端","同步","可能","半天","网络","过程","了","转圈","服务器端","。","要求","中","也","通信","服务"],"title":"同步通信","title_tokens":["通信","同步"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_5","text":"比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。","text_tokens":["的","模型","网站","是","并","务器","一样","存在","古月","不","服务器","所以","每","多个","看到","一个","访问","客户","同样","这个","比如","可以","人","大家","没有","唯一","居","完全","，","客户端","都","服务器端","。","但是","通信模型","中","但","通信","服务","界面"],"title":"一对多通信","title_tokens":["一对","通信","多"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_6","text":"和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。","text_tokens":["的","传递数据","数据","是","使用","还有","传递","苹果","两个","给","定义","一样","msg","话题","还是","请求","srv","类似","命令","在","部分","一个","方法","文件","变成","消息","要",".","比如","也","后续","核心","会","大家","ros","这些","我们","反馈","，","了","和","坐标","。","介绍","位置","中","标准"," ","通信","服务"],"title":"服务接口","title_tokens":["服务","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_7","text":"大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。","text_tokens":["“","提供","有","基本","给","器","官方","了解","计算","一个","简单","代码","现在","two","结果","我们","得到","进行","接下","服务器端","。","将","下来","通信","的","并","想要","就要","编写","之后","服务器","求解","功能","通过","ros","对","，","客户端","ints"," ","也","服务","接下来","数据","两个","例程","add","收到","应答","请求","后","相对","封装","_","需要","可以","节点","加法","加数","反馈","当","实现","从","时","是","啦","成","务器","出去","还是","”","针对","客户","这个","大家","求和","应该","发送","了","就","开始"],"title":"案例一：加法求解器","title_tokens":["加法","：","求解","器","一","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_8","text":"我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3","text_tokens":["的","是","数据","并","提供","client","启动","并且","两个","例程","看","传入","ros2","如下","server","等待","2","操作","请求","终端","二个","adder","一个","代码","客户","learning","第二个","功能","run","这个","原理","_","service","$","一起","结果","节点","第一","求和","服务端","我们","加数","运行","发送","，","客户端","实现","。","第一个","下","第二","3"," ","服务"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_9","text":"我们来看下客户端的实现方法。","text_tokens":["的","客户端","实现","。","下","方法","我们","客户","来看"],"title":"客户端代码解析","title_tokens":["解析","客户","客户端","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_10","text":"learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], },","text_tokens":["+","\"","库","client","__","启动","main","python3","spin","once","古月","%","作者","result","计算","打印输出",",","of","[","自定义","一个","创建","代码","done","文件","env","加入","rclpy","加法器","service","two","系统","sec","create","包","进行","sum","import","服务器端","utf","将","#","=","接口类","循环","设置","正常","父类","的","示例","点","8","class","name","初始化","并","让","console","for","1.0","配置","wait","初始","timeout","setup","编写","info","如下","服务器","等待","...","2","知道","关闭","srv","adderclient","def","sys","future",".","learning","函数","打开","功能","available","*","send","while","1","对象","r","self","again","int","接口类型","scripts","处理","居","完成","是否","运行","，","客户端","e","ints","try","接口","]"," ","interface","bin","服务","points","'","类","异步","argv","as","-","数据","if","说明","接收","两个","get","addtwoints","add","销毁","@","ros2","收到","信息","请求","（","adder","后",")","super","args","执行","none","选项","入口","}","_","www","需要","名","waiting","打印","节点","加法","输出","ok","一次","类型","加数","反馈","break","except","自定","d","/","node","init","usr","destroy","{","coding","exception","failed","定义","!","request","务器","call","shutdown","python","b","程序","async","客户","logger","法器","com","guyuehome","）","a","not","发送","成功","py","from","response","entry",":","编译","：","else","方式","("],"title":"程序实现","title_tokens":["实现","程序","程序实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_11","text":"对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口","text_tokens":["数据","初始化","并","想要","初始","务器","销毁","如下","服务器","等待","应答","关闭","请求","如果","程序","一个","创建","客户","以上","对象","节点","流程","对","我们","进行","发送","，","客户端","实现","编程","服务器端","：","接口"," ","分析","服务"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_12","text":"至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。","text_tokens":["的","数据","务器","什么","时间","话题","服务器","知道","请求","类似","不知","机制","函数","出现","者","用到","并不知道","，","实现","了","服务器端","至于","订阅","。","中","也","通信","有点","服务","回调"],"title":"服务端代码解析","title_tokens":["解析","服务","服务端","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_13","text":"learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_server = learning_service.service_adder_server:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], },","text_tokens":["+","\"","库","提供","__","main","python3","spin","古月","%","作者","计算",",","return","自定义","adderserver","[","创建","\\","代码","文件","env","、","加入","rclpy","加法器","service","two","结果","系统","create","包","进行","sum","import","utf","将","#","=","接口类","循环","设置","已经","incoming","父类","回调","的","示例","点","8","class","name","初始化","并","让","console","配置","初始","setup","编写","info","server","服务器","等待","知道","如下","关闭","srv","def",".","learning","函数","打开","功能","主","*","对象","self","日志","对","接口类型","scripts","处理","居","完成","，","ints","接口","]"," ","interface","bin","服务","points","'","类","-","数据","说明","get","addtwoints","callback","add","退出","销毁","@","ros2","收到","应答","信息","（","请求","adder","后",")","super","执行","args","none","入口","选项","}","_","www","需要","名","节点","加法","输出","放到","类型","反馈","自定","d","/","node","init","usr","destroy","{","coding","定义","!","request","务器","shutdown","python","b","程序","logger","法器","com","n","guyuehome","）","a","求和","提示","response","py","from","entry",":","编译","：","中","("],"title":"程序实现","title_tokens":["实现","程序","程序实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_14","text":"对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口","text_tokens":["初始化","并","想要","初始","务器","销毁","如下","服务器","应答","关闭","如果","程序","一个","创建","客户","函数","以上","向","对象","结果","节点","通过","处","流程","服务端","对","我们","进行","反馈","，","客户端","实现","编程","服务器端","：","接口"," ","分析","服务","回调"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_15","text":"好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。","text_tokens":["提到","的","目标","时候","啦","器","合理","岂","知道","识别","求解","回想","好","更加","机制","物体","需要","视觉","加法","通过","流程","我们","不是","当","，","实现","了","。","位置","下","通信","已经","服务","刚才"],"title":"案例二：机器视觉识别","title_tokens":["机器","二","视觉","识别","：","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_16","text":"此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client","text_tokens":["的","；","数据","是","提供","目标","有","client","运动","拿到","启动","并且","机器人","务器","根据","ros2","三个","server","服务器","机器","请求","识别","终端","随时","一个","图像","客户","learning","出现","run","_","需要","service","可以","对象","$","会","此时","节点","视觉","cam","集成","一次","准备","时","我们","当前","exe","object","当","发送","运行","相机","，","客户端","然后","发布","了","驱动","服务器端","跟踪","：","订阅","位置","就","。","分别","usb","node"," ","上述","服务","认为"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_17","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], },","text_tokens":["objectclient","\"","库","client","__","main","python3","spin","once","古月","target","%","作者","result",",","of","[","自定义","创建","\\","done","代码","env","文件","加入","rclpy","service","系统","sec","create","包","进行","import","utf","#","=","设置","父类","的","示例","点","8","class","getobjectposition","name","初始化","目标","并","让","console","for","1.0","配置","wait","初始","timeout","setup","编写","info","如下","...","等待","知道","server","关闭","position","srv","def","y","future",".","learning","打开","功能","available","*","send","while","对象","r","self","again","scripts","居","完成","object","，","e","try","接口","]"," ","interface","bin","服务","points","'","类","as","-","if","说明","get","销毁","true","@","ros2","应答","请求","后","adder",")","super","args","选项","none","入口","}","_","www","x","需要","waiting","节点","ok","break","except","自定","位置","/","d","node","init","usr","destroy","{","coding","exception","failed","定义","!","request","call","shutdown","识别","python","程序","async","logger","n","com","guyuehome","not","response","py","from","entry",":","编译","：","else","("],"title":"客户端代码解析","title_tokens":["解析","客户","客户端","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_18","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], },","text_tokens":["+","\"","boundingrect","库","10","提供","上限","__","imagesubscriber","raw","waitkey","client","main","bgr8","receiving","python3","spin","180","古月","target","所在","%","作者","计算","chain",",","[","自定义","return","一个","创建","5","\\","及","env","、","in","代码","文件","加入","rclpy","物体","service","list","255","opencv","系统","颜色","create","listener","inrange","轮廓","得到","进行","包","w","import","bgr","detect","circle","utf","订阅","#","=","互相","接口类","将","循环","设置","已经","父类","回调","的","示例","点","8","class","getobjectposition","name","初始化","目标","并","让","console","for","苹果","配置","初始","cvtcolor","出来","command","img","approx","setup","编写","info","server","服务器","与","2","等待","知道","如下","关闭","position","srv","功能","def","numpy","阈值","一些","invalid","y","imshow","video",".","learning","sensor","array","函数","像素","化成","主","*","1","bridge","0","hsv","者","cnt","对象","二值化","噪声","self","red","日志","检测","mask","ros","接口类型","范围","处理","int","居","data","对","object","完成","frame","，","50","队列","scripts","去除","to","打开","接口","color","]"," ","interface","bin","服务","显示","points","类","'","as","-","if","h","使用","说明","转化","数据","面积","get","上角","callback","退出","销毁","true","@","ros2","收到","信息","下限","（","长度","bgr2hsv","后","请求","adder",")","super","进入","执行","none","args","入口","选项","}","消息","lower","转化成","点画","_","www","x","需要","名","节点","输出","cv2","imgmsg","类型","90","反馈","已","勾勒","和","坐标","自定","d","/","np","node","sub","init","usr","从","为","hierarchy","destroy","{","模型","retr","太小","coding","128","数值","msgs","定义","!","shape","务器","request","msg","<","话题","subscription","cv","用于","xy","宽","shutdown","识别","objectx","python","程序","图像","转换","红色","logger","com","cvbridge","upper","n","guyuehome","高","）","objecty","contours","左上角","image","150","提示","效果","drawcontours","中心","py","from","response","continue","entry",":","编译","：","else","中","左上","findcontours","图像处理","("],"title":"服务端代码解析","title_tokens":["解析","服务","服务端","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_19","text":"服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求","text_tokens":["的","数据","name","列表","查看","ros2","<","如下","call","操作","type","请求","命令","_","数据类型","常用","service","$","list","类型","data","发送",">","：","#"," ","服务"],"title":"服务命令行操作","title_tokens":["命令","命令行","操作","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_20","text":"话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。","text_tokens":["周期性","前者","需求","控制指令","绝大","雷达","机器","周期","部分","自定义","、","单向","最为","常用","视觉","我们","过程","。","软硬","通信","的","设计","绝大部分","目标","时候","应用","就要","同步性","硬件","软硬件","类似","到","ros","等","传输","里程计","，","满足","接口"," ","也","同步","服务","大部分","数据","通用","数据通信","场景","在","传感器","获取","适合","等等","后者","控制","很多","类型","无法","和","不过","自定","位置","比比","要求","繁杂","指令","是","更","两种","机器人","定义","一问一答","大部","话题","通信接口","里程","识别","方法","针对","图像","感器","比比皆是","比如","高","数据类型","这个","开发","这些","传感","都","了","中","数据通","标准"],"title":"思考题","title_tokens":["思考","思考题","考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_21","text":"https://docs.ros.org/en/ humble /Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["en","-","tutorials","understanding","html",":","ros2","https","org","/","docs","humble","ros","services"," ","."],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/","text":"通信接口 在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。 接口的定义 接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。 ROS通信接口 接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。 语言无关 为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。 标准接口 大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。 案例一：服务接口的定义与使用 了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。 接口定义 在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ... 程序调用 我们在代码中再来重点看下接口的使用方法。 客户端接口调用 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 服务端接口调用 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 案例二：话题接口的定义与使用 话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。 运行效果 现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub 接口定义 在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ... 程序调用 我们在代码中再来重点看下接口的使用方法。 发布者接口调用 learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 订阅者接口调用 learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 接口命令行操作 接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义 参考链接 https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["objectclient","+","库","一种","client","raw","waitkey","启动","这里","bgr8","看","target","电脑","建立","作者","目的","终端","org","代码","一边","回到","及","要","rclpy","第三","物体","std","研究","无论","以及","自语","系统","package","颜色","得到","w","编程","circle","utf","about","第一个","互相","关注","第二","查询","它","传输数据","设计","目标","程序模块","1.0","应用","command","timeout","approx","编写","info","server","...","服务器","转到","操作","每","看上","上","好","旋转","invalid","打开","主","以上","while","bridge","中间","hsv","cnt","二值化","人","and","通过","种","详细","等","不是","依赖","data","调用函数","object","常见","int64","很","队列","相互","去除","关心","color","关于"," ","interface","接下来","各个领域","as","-","generators","运动","面积","get","docs","区分","根据","callback","键盘","退出","某个","subscribernode","接口定义","请求","下限","选项",")","入口","机制","自言自语","}","？","run","可以","一起","打印","输出","控制","保证","一次","重要","别人","90","布尔","except","实现","课程","分别","坐标","build","/","sub","描述","从","为","指令","init","destroy","hierarchy","例子","软件","太小","coding","多","最终","是","插座","数值","数","组成","再","状态","肯定","而是","连接","精髓","编译器","出去","查看","通信接口","加","发布者","tutorials","命令","程序","方法","logger","com","准确","此时","每隔","150","二维","response","小海龟","驱动","方便","findcontours","上边","10","上限","__","称之为","转","上去","古月","bool","所在","%","机器","了解","周期","计算","高效","一个","理解","件夹","创建","done","5","、","布尔值","学习","txt","单向","安装","最为","图形","list","结果","255","视觉","转到第","https","服务端","xml","typec","listener","添加","sum","过程","detect","。","订阅","接口类","concepts","一句","usb","下来","一帧","整型","group","随处","衍生","name","初始化","share","随处可见","输入","呢","并且","苹果","wait","—","自己","出来","img","好奇","之为","代码生成","几个","如下","知道","project","position","srv","类似","def","轮子","numpy","一些","sensor","到","对应","者","cam","彼此","again","red","联系","检测","是否","运行","e","客户端","就是","不管","主程序","得","bin","显示","服务","海龟","类","'","数据","转化","h","列表","之间","两个","符合","减少","销毁","三个","应答","形状","主要","所以","（","后","20","获取","1s","args","执行","点画","www","内容","涵盖","没有","反馈","勾勒","降低","字符串","和","无关","解析","np","default","single","{","failed","更","领域","机器人","另外","定义","msgs","交流","!","request","shape","<","话题","show","各种","cv","xy","反正","二个","objectx","b","字符","async","”","红色","upper","第二个","链接","比如","这个","里","高","两者","就行","左上角","话","由","一","提示","包含","这些","效果","像素点","drawcontours",":","哪些","速度","else","中","左上","objectposition","手机","html","depend","值","开始","原色","“","角速度","第三个","imagesubscriber","给","讲","python3","once","use","诞生","只要","文件夹","chain","还","中来","32","return","自定义","interfaces","\\","in","只有","像是","工作","service","现在","继续","opencv","create","我们","轮廓","generate","为了","不同","相机","语言","生活","required","import","换成","bgr","将","#","但","甚至","正常","回调","的","示例","class","不用","时候","传递","配置","humble","初始","cvtcolor","与","2","关闭","---","二","的话","调用","插头","之前","案例","publisher","y",".","learning","available","*","send","1","更为","对象","r","mask","范围","int","处理","居","完全","50","publish","exec","接口","数据结构","]","也","什么样","坐标值","你来我往","说明","命令行","一下","true","直接","@","形象化","ros2","收到","只","信息","topic","bgr2hsv","在","super","进入","none","这","消息","封装","转化成","无论是","看看","摄像","节点","第一","ok","cv2","imgmsg","希望","类型","break","en","分成","下","node","时","模型","30","那","find","匹配","成","务器","概念","重复","action","还是","找到","用来","shutdown","宽","识别","想","参考","三原色","转换","谁","guyuehome","objecty","contours","路径","大家","not","define","求和","这样","回顾","发送","py","from","看上去","可能","编译","webcam","就","member","cmakelists","标准","必须","有没有","来","\"","；","boundingrect","提供","有机","有","runtime","main","64","receiving","spin","180","众多","数组","result","或者",",","of","[","部分","输入输出","pub","文件","env","常用","约束","sec","inrange","包中","包","具体","进行","int32","接下","线速度","=","结构","编写程序","循环","通信","两","广泛","已经","父类","8","getobjectposition","让","并","还有","关系","位","for","小海","生成","三种","却是","硬件","重点","等待","标值","阈值","imshow","future","video","函数","每个","像素","固定","array","如何","功能","化成","摄像头","0","后续","噪声","self","日志","ros","接口类型","对","传输","当前","完成","string","frame","，","讲解","便于","try","packages","to","动作","if","使用","例程","上角","软件开发","标准接口","将要","才能","长度","包装","进度","c++","看到","由于","等等","lower","_","需要","x","名","形象","表示","waiting","加法","可见","exe","已","rosidl","把","参数",">","自定","到底","位置","举个","d","三原","做成","usr","retr","exception","128","模块","什么","造","msg","个人","subscription","中有","call","各个","用于","他们","自动","python","图像","角度","客户","体","n","cvbridge","）","用到","核心","会","g","图形化","a","度","$","image","开发","中心","都","continue","发布","了","micro","像头","：","图像处理","("],"title":"**通信接口**","title_tokens":["通信","*","接口","通信接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_1","text":"在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。","text_tokens":["的","多","是","让","数据","并","你来我往","更","给","呢","两个","传递","定义","—","交流","而是","什么","通信接口","话题","将要","个人","概念","还是","或者","在","一个","好","理解","自言自语","这","学习","？","甚至","后续","可以","无论","用到","会","人","内容","自语","系统","大家","重要","ros","通信","我们","不是","为了","，","都","就是","。","中","接口","结构","标准"," ","动作","服务"],"title":"通信接口","title_tokens":["通信","接口","通信接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_2","text":"接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。","text_tokens":["角速度","；","提供","一种","有","给","称之为","讲","上去","诞生","电脑","建立","所在","只要","机器","目的","高效","输入输出","一个","代码","、","回到","要","只有","安装","最为","像是","工作","图形","无论","常用","结果","约束","系统","typec","我们","包","具体","进行","相机","生活","编程","。","线速度","结构","编写程序","usb","但","它","关注","通信","一句","广泛","正常","传输数据","的","随处","不用","让","时候","随处可见","输入","应用","程序模块","关系","并且","配置","自己","出来","呢","却是","开始","硬件","编写","之为","知道","每","类似","看上","调用","插头","上","好","一些","函数","到","每个","固定","像素","如何","摄像头","更为","r","彼此","通过","ros","等","传输","调用函数","运行","完全","，","常见","很","相互","就是","主程序","关心","接口","得","关于","也"," ","服务","各个领域","什么样","-","数据","使用","运动","两个","符合","软件开发","直接","键盘","形象化","形状","主要","才能","所以","包装","在","机制","这","？","等等","无论是","可以","一起","形象","内容","摄像","节点","输出","控制","一次","可见","反馈","实现","和","把","参数","解析","举个","三原","指令","时","例子","软件","多","那","是","插座","模块","更","领域","组成","机器人","匹配","定义","肯定","什么","连接","精髓","通信接口","话题","概念","还是","各个","加","他们","反正","程序","b","图像","三原色","比如","这个","两者","准确","g","话","图形化","大家","由","开发","这些","像素点","看上去","都","发布","了","驱动","就","micro","像头","速度","中","标准","手机","必须","值","原色"],"title":"接口的定义","title_tokens":["的","定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#ros","text":"接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。","text_tokens":["的","是","让","使用","目标","一种","有","有机","之间","减少","定义","造","三种","动作","话题","各种","重复"," ","才能","每","程序","轮子","代码","机制","这","、","到","常用","可以","核心","一起","节点","通过","联系","种","ros","我们","别人","依赖","，","降低","便于","就是","分别","。","接口","方便","也","通信","服务"],"title":"ROS通信接口","title_tokens":["通信","通信接口","接口","ros"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_3","text":"为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。","text_tokens":["“","10","一种","这里","64","转","bool","数组","机器","周期","还","32","部分","一个","文件","、","布尔值","一边","学习","单向","结果","转到第","我们","为了","不同","sum","int32","语言","过程","编程","将","。","结构","通信","两","一帧","整型","的","设计","让","目标","还有","位","小海","生成","知道","转到","---","每","srv","之前","旋转","y",".","到","功能","对应","中间","通过","ros","等","传输","当前","是否","完成","，","int64","接口","数据结构"," ","动作","服务","海龟","数据","使用","运动","两个","区分","一下","三个","应答","只","请求","在","进度","c++","看到","20","1s","由于","机制","需要","x","可以","表示","节点","加法","保证","90","反馈","布尔","和","分别","坐标","分成","无关","描述","做成","最终","30","是","数值","数","机器人","另外","定义","状态","什么","msg","通信接口","话题","action","还是","用来","自动","python","b","”","体","比如","这个","里","就行","会","a","此时","度","求和","包含","每隔","二维","这些","小海龟","了","编译","中","开始"],"title":"语言无关","title_tokens":["无关","语言"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_4","text":"大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。","text_tokens":["的","share","给","呢","定义","好奇","众多","几个","文件夹","找到","在","件夹","文件","打开","？","安装","看看","可以","路径","大家","系统","涵盖","ros","我们","，","可能","了","哪些","。","到底","中","接口","标准"],"title":"标准接口","title_tokens":["标准","标准接口","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_5","text":"了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。","text_tokens":["的","来","是","使用","提供","目标","有","第三个","时候","再","定义","例程","查询","三个","通信接口","话题","编写","收到","概念"," ","了解","机器","请求","识别","二个","在","一个","之前","代码","角度","图像","封装","第二个","如何","服务","第三","需要","研究","以及","对象","可以","节点","视觉","第一","服务端","我们","这样","回顾","进行","发送","相机","，","讲解","接下","实现","发布","了","课程","驱动","。","就","第一个","位置","中","接口","下","下来","第二","从","通信","接下来"],"title":"案例一：服务接口的定义与使用","title_tokens":["的","与","使用","：","一","定义","接口","案例","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_6","text":"在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ...","text_tokens":["\"","runtime","bool","还","of","部分","代码","interfaces","文件","、","txt","package","服务端","xml","我们","generate","添加","包","不同","int32","语言","required","过程","。","#","通信","的","group","getobjectposition","让","name","目标","配置","生成","代码生成","...","project","---","srv","的话","y","learning",".","功能","depend","完成","依赖","，","exec","packages","接口","interface"," ","也","服务","使用","generators","两个","例程","get","根据","true","接口定义","在","后","选项","获取",")","}","_","x","需要","表示","一次","反馈","rosidl","坐标",">","build","位置","/","为","指令","default","{","是","find","定义","编译器","<","中有","自动","这个","$","会","了","编译","就","：","member","中","cmakelists","(","上边"],"title":"接口定义","title_tokens":["接口定义","定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_7","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["的","来","重点","使用","。","在","再","中","下","接口","代码","方法","我们","看"],"title":"程序调用","title_tokens":["调用","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_8","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["objectclient","\"","库","client","__","main","python3","spin","once","古月","target","%","作者","result",",","of","自定义","创建","\\","done","env","rclpy","service","sec","create","进行","import","utf","#","=","父类","的","示例","8","class","getobjectposition","name","初始化","目标","并","for","1.0","wait","初始","timeout","info","...","等待","关闭","position","srv","def","y","future",".","learning","available","*","send","while","对象","r","self","again","居","object","，","e","try","接口"," ","interface","bin","服务","'","类","as","-","if","说明","get","销毁","true","@","ros2","应答","请求",")","super","args","none","_","www","x","waiting","节点","ok","break","except","自定","位置","/","d","node","init","usr","destroy","coding","exception","failed","定义","!","request","call","shutdown","识别","python","async","logger","n","com","guyuehome","not","response","py","from",":","else","("],"title":"客户端接口调用","title_tokens":["调用","客户","客户端","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_9","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["+","\"","boundingrect","库","10","提供","上限","__","imagesubscriber","raw","waitkey","main","bgr8","receiving","python3","spin","180","古月","target","所在","%","作者","计算","chain",",","[","自定义","return","一个","创建","5","\\","及","env","、","in","rclpy","物体","service","list","255","opencv","颜色","create","listener","inrange","轮廓","得到","进行","w","import","bgr","detect","circle","utf","订阅","#","=","互相","接口类","将","循环","已经","父类","回调","的","示例","8","class","getobjectposition","name","初始化","目标","并","for","苹果","初始","cvtcolor","出来","command","img","approx","info","server","服务器","与","2","等待","关闭","position","srv","def","numpy","阈值","一些","invalid","y","imshow","video",".","learning","sensor","array","函数","像素","化成","主","*","1","bridge","0","hsv","者","cnt","对象","二值化","噪声","self","red","日志","检测","mask","ros","接口类型","范围","处理","int","居","data","对","object","frame","，","50","队列","去除","to","接口","color","]"," ","interface","bin","服务","显示","类","'","as","-","if","h","使用","说明","转化","数据","面积","get","上角","callback","退出","销毁","true","@","ros2","收到","信息","下限","（","长度","bgr2hsv","后","请求",")","super","进入","执行","none","args","入口","消息","lower","转化成","点画","_","www","x","名","节点","输出","cv2","imgmsg","类型","90","反馈","已","勾勒","和","坐标","自定","d","/","np","node","sub","init","usr","从","为","hierarchy","destroy","模型","retr","太小","coding","128","数值","msgs","定义","!","shape","务器","request","msg","<","话题","subscription","cv","用于","xy","宽","shutdown","识别","objectx","python","图像","转换","红色","logger","com","cvbridge","upper","n","guyuehome","高","）","objecty","contours","左上角","image","150","提示","效果","drawcontours","中心","py","from","response","continue",":","else","中","左上","findcontours","图像处理","("],"title":"服务端接口调用","title_tokens":["接口","调用","服务","服务端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_10","text":"话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。","text_tokens":["的","是","衍生","目标","定义","通信接口","话题","机器","周期","想","识别","中来","类似","之前","案例","也","需要","人","继续","视觉","没有","我们","，","换成","发布","把","不管","。","位置","接口","从","通信","有没有","服务"],"title":"案例二：话题接口的定义与使用","title_tokens":["的","与","使用","二","：","定义","接口","案例","话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_11","text":"现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub","text_tokens":["的","来","；","数据","是","使用","并","目标","第三个","启动","定义","成","出去","ros2","三个","话题","topic","识别","二个","终端","pub","一个","图像","learning","消息","封装","到","第二个","功能","run","谁","以上","这个","第三","现在","需要","_","$","会","节点","此时","视觉","打印","第一","cam","image","希望","ros","我们","exe","object","运行","相机","，","interface","发布","驱动","分别","将","：","就","第一个","位置","中","订阅","第二","。","标准"," ","usb","node","sub"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_12","text":"在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ...","text_tokens":["\"","还","一个","代码","interfaces","、","txt","package","我们","generate","包","进行","不同","int32","语言","required","过程","。","#","通信","的","让","name","目标","配置","生成","...","标值","project","y","learning",".","功能","完成","，","接口","interface"," ","服务","坐标值","使用","generators","例程","根据","接口定义","在","后","选项",")","}","消息","_","x","需要","表示","内容","rosidl","坐标","位置","/","描述","default","{","是","find","定义","编译器","msg","话题","自动","这个","$","了","编译","：","objectposition","中","cmakelists","("],"title":"接口定义","title_tokens":["接口定义","定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_13","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["的","来","重点","使用","。","在","再","中","下","接口","代码","方法","我们","看"],"title":"程序调用","title_tokens":["调用","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_14","text":"learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["+","\"","boundingrect","库","10","上限","__","waitkey","imagesubscriber","raw","main","bgr8","receiving","python3","spin","180","古月","所在","作者","计算","chain",",","pub","自定义","[","一个","创建","5","及","env","、","in","rclpy","list","255","opencv","颜色","create","listener","inrange","轮廓","得到","进行","w","import","bgr","detect","circle","utf","订阅","#","=","互相","将","循环","父类","回调","的","示例","8","class","name","初始化","目标","并","for","苹果","初始","cvtcolor","出来","img","approx","info","与","2","等待","关闭","position","def","numpy","阈值","一些","publisher","y","imshow","video",".","learning","sensor","array","函数","像素","化成","主","*","1","bridge","0","hsv","者","cnt","对象","二值化","噪声","self","red","日志","检测","mask","ros","范围","int","处理","居","data","object","frame","，","50","队列","publish","去除","to","接口","color","]","bin","interface"," ","显示","类","'","as","-","if","h","使用","说明","转化","面积","get","上角","callback","退出","销毁","@","ros2","topic","下限","（","长度","bgr2hsv","后","信息",")","super","进入","args","none","入口","消息","lower","转化成","点画","_","www","x","名","节点","输出","cv2","imgmsg","类型","90","已","勾勒","和","坐标","自定","位置","/","np","node","sub","init","usr","从","为","hierarchy","destroy","模型","retr","太小","coding","128","数值","msgs","定义","!","shape","msg","<","话题","subscription","cv","发布者","用于","xy","宽","shutdown","objectx","python","图像","转换","红色","logger","com","cvbridge","upper","guyuehome","高","）","objecty","contours","左上角","image","150","提示","效果","drawcontours","中心","py","from","continue","发布",":","webcam","objectposition","中","左上","findcontours","图像处理","("],"title":"发布者接口调用","title_tokens":["发布者","发布","调用","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_15","text":"learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["\"","库","10","__","main","python3","spin","古月","target","%","作者",",","自定义","一个","创建","\\","env","、","rclpy","std","create","listener","进行","import","utf","订阅","#","=","循环","父类","回调","的","示例","8","class","name","初始化","目标","并","初始","info","等待","关闭","position","def","y",".","learning","函数","主","*","者","对象","self","日志","对","处理","居","string","object","，","队列","接口","bin","interface"," ","类","'","-","数据","说明","get","callback","退出","销毁","@","ros2","subscribernode","收到","topic","（","长度","信息","后",")","super","执行","args","none","入口","消息","_","www","x","名","节点","输出","类型","字符串","自定","位置","/","d","sub","node","init","usr","destroy","coding","msgs","定义","!","msg","话题","subscription","shutdown","字符","python","logger","com","guyuehome","提示","py","from",":","objectposition","("],"title":"订阅者接口调用","title_tokens":["订阅","调用","接口","者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_16","text":"接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义","text_tokens":["的","name","列表","定义","某个","查看","ros2","<","show","如下"," ","接口定义","操作","命令","功能","_","常用","$","list","系统","package","详细","包中",">","：","#","接口","interface"],"title":"接口命令行操作","title_tokens":["命令","命令行","操作","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_17","text":"https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["-","humble","docs","use","tutorials","org","interfaces",".","and","define","https","package","ros","interface","en",":","about","/","concepts"," ","html","single"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/","text":"动作 机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。 通信模型 举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。 客户端/服务器模型 动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。 一对多通信 和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。 同步通信 既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。 由服务和话题合成 大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。 案例一：小海龟的动作 我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback 案例二：机器人画圆 如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。 运行效果 启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。 接口定义 例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是动作的目标，enable为true时，表示开始运动； 第二块是动作的执行结果，finish为true，表示动作执行完成； 第三块是动作的周期反馈，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ... 通信模型 通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。 服务端代码解析 learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], }, 客户端代码解析 learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], }, 动作命令行操作 动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["range","state","库","sleep","一种","client","启动","多少","看","作者","目的","终端","分拣","org","代码","加入","一边","rclpy","第三","智能","系统","package","当中","handle","送餐","处理函数","编程","circle","utf","通信模型","合成","第二","succeed","目标","应用","先","move","哪里","movecircleactionserver","编写","info","server","服务器","...","是不是","操作","每","只能","多少度","上","好","旋转","打开","发出","达到","圆周","主","顺利","二块","较长","publishing","通过","底层","等","不是","data","很","送货"," ","interface","points","接下来","theta","一点一点","-","generators","运动","模拟","接收","docs","get","秘密","某个","根据","callback","键盘","退出","add","received","接口定义","请求","选项",")","相对","入口","机制","}","转个","？","没错","被","run","负责","可以","一起","控制","输出","一次","整个","取消","真器","实现","分别","坐标","仿真","/","从","为","指令","姿态","init","destroy","例子","0.5","coding","多","最终","是","圆周运动","再","状态","肯定","而是","编译器","查看","通信接口","完整","发布者","tutorials","命令","程序","圈","方法","logger","com","数据类型","发现","movecircleactionclient","每隔","控","假设","一对","response","小海龟","entry","上边","某一","动","movecircle","10","__","背后","转","所处","基于","古月","bool","%","机器","周期","多个","feedback","一个","理解","创建","done","、","txt","list","结果","第三块","https","服务端","这么","又","过程","服务器端","。","订阅","接口类","再用","下来","name","初始化","按照","相比","呢","wait","—","一样","如下","思路","知道","project","既然","类似","装","随时","def","动图","读取","到","原理","者","moving","流程","仿真器","是否","1.57","运行","客户端","就是","得","bin","服务","海龟","类","'","数据","不仅","列表","两个","请","销毁","毕竟","时间","三个","场景","（","后","20","获取","1s","执行","args","www","一段","没有","反馈","臂","和","解析","default","{","不会","--","常常","360","机器人","另外","定义","!","<","话题","不","async","指定","针对","链接","一块","这个","比如","导航","由","一","包含","这些","效果",":","中","html","一段时间","开始","python3","还","return","自定义","简单","进度条","interfaces","in","只有","rejected","现在","我们","三块","generate","turtlesim","不同","语言","行为","required","import","#","但","回调","的","示例","点","class","console","名字","配置","humble","初始","根本","就此结束","干什么","goal","关闭","---","二","如果","调用","accepted","之前","案例",".","learning","send","*","更为","对象","过","处理","居","publish","隐藏","接口","拒绝执行","]","也","异步","合适","说明","命令行","同时","一下","true","ros2","直接","@","收到","信息","直到","在","super","竟然","none","这","使","消息","封装","节点","第一","能","ok","希望","i","类型","眼前","虽然","当","en","下","node","某","时","模型","30","那","复杂","find","务器","管理","其","概念","action","机械","想","teleop","shutdown","识别","参考","送给","guyuehome","actionserver","大家","not","画圆","这样","发送","py","from","可能","编译","就","cmakelists","标准","有没有","turtle1","来","\"","；","有","main","抓取","spin","需求","result","understanding","type",",","[","部分","文件","其实","env","常用","不仅仅","finish","包","具体","进行","int32","接下","actions","还会","actionclient","=","循环","rotateabsolute","通信","仔细","像","设置","父类","8","让","并","告诉","for","absolute","小海","生成","setup","之后","等待","一点","future","enable","函数","应用层","功能","以下","如何","0","self","日志","加深","结束","ros","对","接口类型","scripts","完成","当前","，","便于","转圈","满足","介绍","一套","动作","分析","同步","execute","清楚","if","使用","段时间","例程","起来","才能","进度","看到","_","需要","名","表示","time","第二块","rosidl","把",">","自定","这种","到底","举个","位置","d","实际","usr","仅仅","含义","就此","模块","遥控","turtle","第一块","理","什么","特性","msg","试一试","自动","python","应带","角度","客户","实时","写","rotate","）","用到","$","会","发送给","度","成功","key","都","发布","了","：","拒绝","但是","方式","("],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_1","text":"机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。","text_tokens":["的","仅仅","是","那","不仅","并","复杂","遥控","目标","运动","一种","常常","应用","机器人","另外","名字","—","某个","键盘","动作","需求","完整","管理","概念","场景","机器","从","目的","识别","在","分拣","一个","上","简单","好","理解","机制","、","功能","被","也","这个","需要","智能","可以","用到","会","系统","不仅仅","流程","ros","对","我们","等","这么","这些","具体","进行","含义","，","行为","很","实现","送餐","就是","便于","。","就","满足","这种","中","送货"," ","通信","某一"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_2","text":"举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。","text_tokens":["10","转","多少","机器","还","一个","进度条","、","现在","我们","当中","行为","过程","。","通信","像","的","让","并","告诉","哪里","根本","之后","知道","如果","多少度","装","随时","旋转","一点","到","发出","更为","结束","不是","完成","当前","，","转圈","得"," ","动作","一点一点","使用","合适","段时间","运动","一下","时间","才能","信息","直到","在","后","进度","20","1s","执行","机制","这","转个","？","需要","可以","表示","一段","没有","ok","眼前","反馈","取消","把","到底","举个","指令","例子","30","是","360","机器人","再","肯定","不","想","命令","圈","比如","度","每隔","控","假设","这样","发送","了","就","有没有","一段时间","开始"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_3","text":"动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。","text_tokens":["的","模型","动","是","让","使用","目标","就此","运动","机器人","再","同时","状态","抓取","务器","什么","所处","起来","收到","就此结束","之后","服务器","干什么"," ","机器","机械","周期","想","信息","如果","类似","后","一个","执行","姿态","一边","客户","实时","达到","这个","导航","控制","结束","通信","整个","当前","反馈","发送","当","，","客户端","臂","可能","又","过程","和","服务器端","。","就","坐标","中","也","动作","服务","开始"],"title":"客户端/服务器模型","title_tokens":["模型","客户端","服务器","/","务器","客户","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_4","text":"和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。","text_tokens":["的","有","运动","机器人","先","务器","一样","动作","毕竟","服务器","机器","才能","多个","命令","只能","一个","执行","客户","只有","可以","大家","完成","发送","，","客户端","都","和","服务器端","。","但是","中","下","通信","服务"],"title":"一对多通信","title_tokens":["一对","通信","多"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_5","text":"既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。","text_tokens":["的","那","是","数据","使用","一种","有","定义","动作","通信接口","action","既然","之前","机制","文件",".","过","我们","反馈","进行","，","过程","。","介绍","中","接口","也","通信","同步"],"title":"同步通信","title_tokens":["通信","同步"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_6","text":"大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。","text_tokens":["的","来","模块","是","使用","目标","一种","有","运动","应用","再","两个","秘密","仔细","务器","看","基于","三个","话题","收到","其","服务器","发布者","周期","是不是","请求","命令","调用","一个","竟然","应带","动图","客户","其实","机制","没错","应用层","也","者","发现","表示","会","大家","底层","通信","时","不是","反馈","当","发送","，","客户端","实现","发布","过程","就是","和","还会","服务器端","。","订阅","隐藏","下"," ","动作","服务","上边"],"title":"由服务和话题合成","title_tokens":["和","由","合成","服务","话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_7","text":"我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback","text_tokens":["的","theta","\"","--","-","让","使用","turtle","按照","运动","启动","absolute","小海","ros2","概念","info","action","goal","teleop","turtle1","feedback","命令","理解","案例","指定","姿态","}","到","以下","run","rotate","send","_","可以","$","控制","加深","一","对","{","我们","仿真器","turtlesim","1.57","小海龟","，","key","真器","接下",":","仿真","。","：","/","再用","接下来","node","下来","rotateabsolute"," ","动作","海龟","某"],"title":"案例一：小海龟的动作","title_tokens":["的","小海龟","：","一","小海","案例","动作","海龟"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_8","text":"如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。","text_tokens":["的","来","是","让","使用","并","有","实际","呢","机器人","请","而是","务器","特性","直接","基于","试一试","话题","服务器","机器","在","一个","好","圈","代码","方法","针对","客户","转个","？","封装","如何","一起","通过","希望","通信","假设","我们","虽然","，","客户端","接下","下来","实现","过程","编程","和","服务器端","就","。","一套","中","接口","接下来","但"," ","动作","服务","不会"],"title":"案例二：机器人画圆","title_tokens":["机器","二","：","机器人","案例","画圆"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_9","text":"启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。","text_tokens":["的","示例","30","最终","目标","client","并","模拟","运动","启动","背后","两个","机器人","例程","move","一下","务器","ros2","之后","server","服务器","action","机器","信息","每","终端","命令","看到","客户","learning","run","_","这个","原理","可以","$","度","一次","服务端","结束","我们","完成","反馈","运行","发送","，","客户端","接下","实现","和","分别","服务器端","。","：","就","中","接下来","下","下来"," ","动作","分析","服务","开始"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_10","text":"例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是动作的目标，enable为true时，表示开始运动； 第二块是动作的执行结果，finish为true，表示动作执行完成； 第三块是动作的周期反馈，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ...","text_tokens":["\"","state","movecircle","；","bool","机器","周期","还","自定义","部分","代码","interfaces","txt","第三","结果","第三块","package","finish","我们","三块","generate","包","进行","不同","int32","语言","required","过程","。","#","第二","的","让","name","并","目标","配置","生成","...","project","---","旋转",".","learning","enable","到","功能","二块","通过","ros","不是","当前","完成","是否","，","接口","interface"," ","动作","使用","generators","运动","例程","根据","true","三个","接口定义","后","在","选项",")","执行","}","_","需要","表示","第一","第二块","反馈","rosidl","自定","位置","/","为","指令","时","default","{","是","第一块","机器人","find","定义","编译器","action","自动","角度","一块","$","包含","成功","编译","：","中","cmakelists","标准","(","开始"],"title":"接口定义","title_tokens":["接口定义","定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_11","text":"通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。","text_tokens":["模型","清楚","的","目标","并","理","运动","相比","机器人","例程","一下","务器","话题","起来","服务器","思路","机器","周期","信息","后","程序","一个","之前","送给","代码","相对","客户","写","较长","发送给","控制","一","结束","通信","我们","这样","反馈","发送","运行","，","客户端","接下","就是","和","。","通信模型","接下来","下来"," ","动作","分析","服务","开始"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_12","text":"learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["\"","range","state","库","movecircle","sleep","__","main","python3","spin","古月","%","作者","result","周期",",","feedback","return","自定义","[","一个","创建","代码","加入","文件","env","、","in","rclpy","结果","系统","finish","服务端","包","进行","import","handle","处理函数","circle","utf","#","=","接口类","循环","设置","父类","回调","的","示例","点","8","class","name","初始化","目标","并","succeed","让","for","console","配置","初始","move","movecircleactionserver","setup","编写","之后","server","服务器","info","...","等待","知道","goal","关闭","如下","def",".","learning","圆周","函数","到","打开","功能","主","*","0","对象","publishing","moving","self","接口类型","scripts","处理","居","当前","完成","，","publish","接口","]"," ","动作","interface","服务","bin","execute","类","'","points","-","说明","运动","get","callback","退出","销毁","true","@","ros2","收到","信息","（","后",")","super","执行","args","none","入口","选项","}","消息","_","www","负责","需要","名","time","表示","节点","i","类型","反馈","自定","d","/","node","init","usr","从","destroy","{","0.5","coding","30","最终","圆周运动","360","定义","!","务器","msg","action","shutdown","python","程序","角度","logger","com","guyuehome","）","actionserver","度","成功","py","from","发布","entry",":","编译","：","("],"title":"服务端代码解析","title_tokens":["解析","服务","服务端","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_13","text":"learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["\"","state","库","movecircle","client","__","启动","main","python3","spin","古月","%","作者","机器","result","周期",",","feedback","return","自定义","[","一个","创建","代码","done","文件","env","、","加入","rclpy","rejected","结果","系统","finish","包","进行","import","handle","circle","服务器端","utf","actionclient","#","=","接口类","循环","设置","父类","回调","的","示例","点","8","class","name","初始化","目标","并","让","console","for","配置","wait","初始","move","setup","编写","之后","server","服务器","等待","info","知道","如下","goal","关闭","如果","def","accepted","future","读取",".","learning","圆周","enable","函数","打开","功能","主","*","send","顺利","对象","self","日志","接口类型","scripts","处理","居","完成","，","客户端","接口","拒绝执行","]"," ","动作","interface","bin","服务","points","类","'","异步","-","if","数据","说明","接收","运动","get","callback","add","received","true","@","ros2","退出","销毁","收到","请求","（","后",")","super","执行","获取","args","none","}","使","入口","消息","被","_","www","需要","名","节点","输出","能","希望","类型","反馈","自定","d","/","node","init","usr","为","时","destroy","{","coding","最终","选项","圆周运动","机器人","定义","!","务器","msg","action","shutdown","python","程序","async","客户","logger","com","guyuehome","）","not","movecircleactionclient","发送","response","py","from","entry",":","编译","拒绝","：","方式","(","开始"],"title":"客户端代码解析","title_tokens":["解析","客户","客户端","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_14","text":"动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求","text_tokens":["的","数据","name","列表","查看","ros2","<","info","如下","action","goal","操作","type","请求","命令","send","_","数据类型","常用","$","list","类型","data","发送",">","：","#"," ","动作","服务"],"title":"动作命令行操作","title_tokens":["命令","命令行","动作","操作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["en","-","tutorials","understanding","actions","html",":","ros2","https","org","/","docs","humble","ros","."],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/","text":"参数 话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。 通信模型 比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。 全局字典 在ROS系统中，参数是以全局字典的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。 可动态监控 在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。 案例一：小海龟例程中的参数 在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 参数列表 参数查询与修改 $ ros2 param describe turtlesim background_b $ ros2 param get turtlesim background_b $ ros2 param set turtlesim background_b 10 参数文件保存与加载 $ ros2 param dump turtlesim >> turtlesim.yaml $ ros2 param load turtlesim turtlesim.yaml 案例二：参数编程 接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。 运行效果 $ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle 代码解析 learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], }, 案例三：机器视觉应用 参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。 运行效果 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180 代码解析 learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["+","库","一种","waitkey","raw","bgr8","某些","多少","看","set","robot","作者","nodea","integer","节","org","代码","加入","及","rclpy","物体","系统","颜色","得到","w","编程","circle","utf","通信模型","互相","关注","合成","查询","目标","应用","先","approx","编写","info","易用","打开","分辨率","主","bridge","hsv","cnt","二值化","配置文件","通过","等","不是","data","object","保存","队列","去除","提高","color"," ","points","接下来","字典","变量","as","-","每次","面积","get","docs","callback","退出","参数设置","下限","美颜",")","选项","入口","机制","}","？","run","可","可以","打印","体验","输出","大大","整个","参数值","90","parameters","真器","实现","分别","仿真","坐标","/","sub","哪个","非常","init","为","从","hierarchy","destroy","太小","coding","background","是","数值","组成","号","再","改变","连接","辨率","格式","tutorials","命令","程序","修改","方法","logger","com","立刻","叫","150","小海龟","entry","环境","驱动","定时","findcontours","dump","10","上限","__","古月","所在","%","了解","机器","周期","不如","计算","多个","s","一个","理解","创建","5","本","、","挺","load","优化","yaml","list","255","视觉","比较简单","https","listener","作用","过程","说干就干","detect","。","订阅","usb","下来","name","初始化","输入","呢","苹果","—","出来","一样","存在","img","param","其他","几个","如下","知道","曝光","类似","比较","区域","def","numpy","一些","读取","sensor","到","hello","者","cam","red","检测","timer","仿真器","跟","是否","运行","就是","动态","bin","显示","服务","海龟","类","'","考虑","数据","转化","h","列表","销毁","后边","（","默认","后","获取","端口","执行","滑动","args","点画","www","很大","勾勒","和","真实","解析","np","{","机器人","msgs","!","shape","<","话题","丰富","不","监控","cv","xy","b","指定","来看","红色","upper","链接","比如","这个","高","左上角","由","一","提示","这些","效果","drawcontours","条",":","全局变量","中","左上","html","值","开始","imagesubscriber","python3","默认值","chain","还","问题","简单","in","继续","opencv","create","我们","轮廓","turtlesim","不同","相机","import","三","敏感","bgr","共享","将","#","回调","的","示例","点","class","console","时候","配置","humble","就要","初始","cvtcolor","单位","与","2","关闭","定时器","二","如果","案例","y",".","learning","*","1","对象","么","图像识别","mask","范围","int","处理","居","一两","50","接口","]","也","说明","命令行","提炼","一下","ros2","@","编码","传输方式","信息","bgr2hsv","在","super","进入","那个","none","这","访问","消息","转化成","高级","节点","很多","cv2","imgmsg","类型","办法","全局","en","从而","下","某","node","输入框","parameternode","模型","成","宽","teleop","shutdown","识别","参考","parameter","送给","转换","光线","键值","guyuehome","contours","declare","大家","发送","py","from","可能","影响","编译","就","来","\"","boundingrect","叫做","提供","有","main","receiving","spin","180","或者","type","understanding","键和值",",","[","部分","一两句","文件","env","即可","常用","最新","inrange","包","进行","不少","接下","=","循环","通信","已经","设置","像","父类","8","加载","让","并","for","重新","小海","三种","setup","describe","等待","阈值","imshow","video","函数","array","像素","化成","功能","如何","0","噪声","self","麻烦","日志","ros","对","scripts","传输","string","完成","frame","，","变化","便于","介绍","mbot","to","动作","清楚","if","使用","例程","上角","起来","熟悉","秒","nodeb","长度","c++","名称","value","等等","lower","_","两句","需要","x","名","表示","new","exe","已","把","参数",">","d","usr","以","retr","分辨","128","含义","turtle","all","大大提高","什么","特性","msg","subscription","用于","python","图像","写","易用性","cvbridge","）","核心","用到","会","$","发送给","度","形态","image","中心","key","都","然后","continue","了","：","方式","图像处理","("],"title":"**参数**","title_tokens":["*","参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_1","text":"话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。","text_tokens":["的","清楚","来","变量","数据","是","一种","再","机器人","—","三种","某些","话题","不","知道","了解","机器","传输方式","类似","在","多个","节","c++","程序","机制","这","本","、","常用","可以","节点","大家","系统","通信","ros","我们","传输","是否","全局","运行","，","便于","编程","参数","。","共享","介绍","全局变量","中","方式"," ","动作","已经","服务","字典"],"title":"参数","title_tokens":["参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_2","text":"比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。","text_tokens":["有","多少","机器","或者","nodea","问题","部分","文件","视觉","我们","进行","不同","相机","作用","过程","。","关注","usb","设置","像","的","时候","输入","配置","一样","曝光","区域","阈值","一些","到","分辨率","功能","配置文件","图像识别","通过","是否","，","就是","也"," ","考虑","使用","面积","参数设置","编码","nodeb","在","美颜","后","端口","那个","滑动","执行","这","等等","需要","可以","节点","很多","很大","整个","和","分别","参数","哪个","输入框","分辨","是","改变","什么","连接","辨率","格式","识别","程序","图像","比如","核心","会","度","这些","效果","都","影响","驱动","就","条","中"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_3","text":"在ROS系统中，参数是以全局字典的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。","text_tokens":["的","是","数值","使用","叫做","有","时候","组成","号","什么","一样","存在","后边"," ","或者","键和值","在","一个","理解","名称","访问","？","键值","即可","这个","可以","名","叫","形态","系统","由","ros","我们","等","跟","参数值","全局","，","然后","了","就是","和","编程","参数","就","真实","。","中","合成","也","为","像","以","字典"],"title":"全局字典","title_tokens":["字典","全局"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_4","text":"在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。","text_tokens":["的","数值","有","特性","ros2","丰富","其他"," ","知道","如果","在","一个","获取","修改","访问","这","比如","立刻","可以","用到","高级","节点","会","最新","大家","对","进行","非常","办法","，","可能","都","了","编程","参数","共享","。","中","从而","某","也"],"title":"可动态监控","title_tokens":["可","监控","动态"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_5","text":"在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["的","含义","使用","提供","turtle","命令行","小海","例程","ros2","起来","熟悉"," ","teleop","在","命令","方法","run","这个","_","$","通过","一","我们","仿真器","turtlesim","小海龟","，","key","真器","不少","了","和","仿真","参数","。","中","下","node","也","海龟"],"title":"案例一：小海龟例程中的参数","title_tokens":["的","小海龟","参数","：","一","小海","例程","案例","中","海龟"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_6","text":"","text_tokens":[],"title":"参数列表","title_tokens":["列表","参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_7","text":"$ ros2 param describe turtlesim background_b $ ros2 param get turtlesim background_b $ ros2 param set turtlesim background_b 10","text_tokens":["_","background","10","$","b","get"," ","ros2","set","param","turtlesim","describe"],"title":"参数查询与修改","title_tokens":["修改","与","参数","查询"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_8","text":"$ ros2 param dump turtlesim >> turtlesim.yaml $ ros2 param load turtlesim turtlesim.yaml","text_tokens":["load","dump","yaml","$",".",">"," ","ros2","param","turtlesim"],"title":"参数文件保存与加载","title_tokens":["保存","与","加载","参数","文件"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_9","text":"接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。","text_tokens":["的","来","使用","先","就要","一下","几个","在","比较","程序","简单","一两句","方法","读取","这","函数","写","两句","可以","比较简单","体验","我们","一两","，","接下","都","实现","了","和","参数","就","。","中","下来","设置","接下来","开始"],"title":"案例二：参数编程","title_tokens":["编程","二","参数","：","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_10","text":"$ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle","text_tokens":["robot","run","_","name","turtle","$","learning","declare","parameter"," ","ros2","param","set"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_11","text":"learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], },","text_tokens":["\"","库","__","main","python3","spin","古月","set","robot","默认值","作者","%","周期","type",",","s","[","一个","创建","代码","加入","文件","env","、","rclpy","系统","create","包","进行","import","utf","将","#","=","循环","设置","父类","回调","的","示例","点","8","class","name","初始化","并","让","console","重新","配置","初始","param","setup","单位","编写","info","如下","2","等待","知道","关闭","定时器","def","读取",".","learning","函数","到","打开","功能","主","*","hello","对象","self","日志","timer","scripts","居","string","完成","，","mbot","接口","]"," ","bin","points","类","'","-","说明","列表","get","callback","退出","销毁","@","ros2","秒","信息","（","默认","后",")","super","执行","args","none","value","入口","选项","}","_","www","需要","打印","节点","输出","new","参数值","parameters","参数","/","node","init","为","usr","parameternode","从","destroy","{","coding","数值","all","!","shutdown","python","程序","parameter","修改","指定","送给","logger","com","guyuehome","）","发送给","declare","发送","py","from","entry",":","编译","：","定时","中","(","值"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_12","text":"参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。","text_tokens":["的","示例","是","使用","每次","应用","机器人","呢","提炼","成","大大提高","先","再","看","易用","机器","不如","还","识别","在","比较","程序","阈值","修改","代码","？","光线","挺","易用性","如何","优化","来看","物体","也","可以","么","会","继续","大家","视觉","麻烦","对","大大","我们","不是","效果","运行","不同","，","敏感","变化","了","环境","把","过程","参数","就","动态","提高","说干就干","。","中","下"," ","设置","已经"],"title":"案例三：机器视觉应用","title_tokens":["三","机器","视觉","：","应用","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_13","text":"$ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180","text_tokens":["h","180","ros2","param","set","parameter","learning","upper","run","_","$","cam","red","exe","object","detect","usb","node"," "],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_14","text":"learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], },","text_tokens":["+","\"","boundingrect","库","10","上限","__","waitkey","imagesubscriber","raw","main","bgr8","receiving","python3","spin","180","古月","所在","%","作者","计算","chain","integer",",","[","一个","创建","5","代码","及","env","、","in","文件","加入","rclpy","list","255","opencv","系统","颜色","create","listener","inrange","轮廓","得到","进行","包","w","import","bgr","detect","circle","utf","订阅","#","=","互相","将","化成","循环","设置","父类","回调","的","示例","点","8","class","name","初始化","目标","并","让","console","for","苹果","配置","初始","cvtcolor","出来","img","param","approx","setup","编写","info","如下","与","2","等待","知道","关闭","功能","def","阈值","numpy","一些","y","imshow","读取",".","array","learning","sensor","函数","到","像素","video","*","1","bridge","0","hsv","者","cnt","对象","二值化","噪声","self","通过","red","日志","检测","mask","ros","范围","int","处理","scripts","居","data","完成","object","frame","，","50","队列","去除","to","打开","接口","color","]"," ","bin","显示","points","类","'","as","-","if","h","使用","说明","转化","主","面积","get","上角","callback","退出","销毁","@","ros2","信息","下限","（","长度","bgr2hsv","后",")","super","进入","args","none","value","入口","选项","}","消息","lower","转化成","点画","_","www","x","需要","名","表示","打印","节点","输出","cv2","imgmsg","类型","90","参数值","已","勾勒","和","参数","坐标","d","/","np","node","sub","init","usr","从","为","hierarchy","destroy","{","模型","retr","太小","coding","128","数值","msgs","!","shape","msg","<","话题","subscription","cv","用于","xy","宽","shutdown","识别","python","程序","parameter","图像","转换","红色","logger","com","cvbridge","upper","guyuehome","高","）","contours","左上角","declare","image","150","提示","效果","drawcontours","中心","py","from","continue","entry",":","编译","：","中","左上","findcontours","图像处理","("],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["parameters","en","-","tutorials","understanding","html",":","ros2","https","org","/","docs","humble","ros","."],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/","text":"分布式通信 智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统，可以实现多计算平台上的任务分配。 分布式通信 什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。 分布式网络搭建 除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。 树莓派配置 在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。 装系统 我们先要给树莓派装系统，这里我们选择的是Ubuntu Mate针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/ 装ROS2 在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。 编译代码 将我们课程的代码也下载到树莓派中，进行编译。 远程桌面 如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728 分布式数据传输 树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 * 如使用虚拟机，请将虚拟机网络修改为桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。 分布式网络分组 没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。 案例一：小海龟分布式控制 分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动。 $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端 案例二：话题分布式通信 我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串。 $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端 案例三：服务分布式通信 话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能。 案例四：机器视觉分布式应用 以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体。 $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。 参考链接 https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["sd","较","基本","启动","这里","算机","电脑","建立","事情","遇到","org","代码","加入","分布式","所","物体","智能","系统","122599728","客户端程序","about","互联","mate","设计","下载","应用","分布式应用","先","编写","服务器","操作","看上","每","上","分布","好","变得","以上","顺利","通过","等","不是","相互","domain","除了"," ","神奇","接下来","-","运动","模拟","简而言之","docs","键盘","helloworld","传感器","数据传输","nodes","机制","id","？","典型","run","可以","资料","控制","测试","一系列","带领","此外","显示器","真器","派端","实现","互通","课程","仿真","采集","/","sub","笔记本","控制器","非常","为","多","是","组成","demo","再","而是","经常","连接","笔记本电脑","发布者","系列","命令","程序","修改","方法","叫","全都","小海龟","环境","分布式系统","消耗","驱动","方便","上边","your","鼠标","不在","world","上去","机器","计算","多个","远程","一个","局域网","、","学习","挺","安装","ubuntu","视觉","https","远程桌面","反过来","listener","搭建","这么","更强","基本一致","而言","则","。","订阅","concepts","一句","usb","下来","并且","呢","—","一样","选择","blog","如下","安排","类似","比较","装","一些","一致","到","hello","者","cpp","据传","cam","打通","流程","仿真器","是否","运行","download","客户端","就是","卡中","显示","放","服务","海龟","原本","放置","数据","友好","魅力","之间","两个","请","毕竟","资源","主要","支持","带来","发生","小","后","布式","分组","article","details","小型","没有","性能","字符串","做","确保","和","没","拆解","机器人","另外","net","<","话题","体积","各种","不","监控","平台","字符","针对","计算能力","红色","链接","真有","比如","里","两者","虚拟","由","一","这些","效果","talker","传感",":","任何","中","export","经典","html","端的","减轻","给","局域","讲","只要","岂","还","问题","csdn","继续","我们","turtlesim","不同","服务器程序","三","模式","将","#","放在","卡顿","的","端","感觉","pc","配置","humble","发给","二","如果","步骤","几乎","的话","轻松","之前","案例",".","learning","52785580","*","过","局域网络","处理","完全","处于","也","电机","如","命令行","整体","一下","ros2","直接","信息","只","topic","在","这","访问","不在话下","作为","之外","节点","摄像","分配","很多","流畅","希望","en","下","node","计算机","小组","你","复杂","试试","任务","务器","还是","想","teleop","桌面","顺利实现","识别","参考","繁多","用","感器","bashrc","我","大家","求和","讲过","同一个","这样","派","py","看上去","可能","编译","个","就","webcam","过来","树莓","能力","来","提供","有","任务分配","四","或者","一切","pub","即可","如此","不够","情况","进行","具体","一系","烧写","接下","=","结构","通信","已经","像","桥接","并","派里","小海","之后","压力","采用","反过","功能","摄像头","ros","传输","完成","，","变化","笔记","网络","动作","于是","使用","频繁","例程","起来","才能","虚拟机","似乎","适合","出现","网上","_","需要","加法","exe","框架","依然","无法","不过",">","感受","这种","先要","实际","款","有点","turtle","啦","位于","什么","之一","中有","他们","qq","图像","客户","实时","$","用到","会","开发","镜像","成功","key","派装","都","然后","发布","了","：","像头","同一"],"title":"**分布式通信**","title_tokens":["*","分布式","布式","分布","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_1","text":"智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统，可以实现多计算平台上的任务分配。","text_tokens":["卡顿","的","能力","多","拆解","减轻","任务","任务分配","机器人","经常","算机","岂","机器","计算","平台","如果","多个","遇到","布式","一个","分布","繁多","上","压力","计算能力","、","到","？","这","功能","出现","分布式","里","智能","可以","会","分配","系统","不够","情况","处理","等","这些","不是","全都","运行","，","实现","就是","分布式系统","将","。","放在","中"," ","计算机"],"title":"分布式通信","title_tokens":["布式","分布式","分布","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_2","text":"什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。","text_tokens":["减轻","较","有","讲","算机","上去","电脑","机器","计算","还","远程","一个","挺","分布式","视觉","系统","我们","更强","不同","接下","将","。","结构","放在","下来","通信","已经","的","设计","派里","应用","并且","配置","看上","每","比较","之前","分布","上","好","压力","到","采用","功能","过","ros","等","处理","传输","运行","完全","，","变化","笔记","相互","就是"," ","也","放","接下来","电机","原本","于是","数据","魅力","运动","之间","两个","毕竟","资源","起来","主要","信息","只","在","小","布式","传感器","这","适合","？","典型","作为","需要","可以","节点","分配","控制","性能","框架","此外","带领","做","实现","和","不过","感受","这种","下","笔记本","控制器","款","为","计算机","有点","非常","多","是","复杂","任务","组成","机器人","位于","另外","什么","之一","笔记本电脑","体积","各种","不","监控","平台","感器","比如","叫","由","大家","一","这些","开发","派","传感","看上去","可能","都","了","环境","消耗","驱动","任何","就","分布式系统","中","方便","树莓","上边"],"title":"分布式通信","title_tokens":["布式","分布式","分布","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_3","text":"除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。","text_tokens":["的","放置","使用","模拟","机器人","另外","笔记本电脑","选择","电脑","机器","计算","平台","在","一个","上","我","之外","控制","我们","派","，","笔记","了","。","除了","笔记本","控制器","树莓"],"title":"分布式网络搭建","title_tokens":["分布式","网络","布式","分布","搭建"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_4","text":"在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。","text_tokens":["的","有","配置","先","在","参考","之前","好","网上","需要","可以","资料","大家","很多","我们","开发","派","，","都","环境","。","也","树莓"],"title":"树莓派配置","title_tokens":["配置","树莓","派"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_5","text":"我们先要给树莓派装系统，这里我们选择的是Ubuntu Mate针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/","text_tokens":["mate","的","sd","下载","是","-","给","启动","这里","选择","之后","org","针对",".","到","链接","ubuntu","可以","系统","https","镜像","我们","派","烧写","，","download","派装","了",":","就","。","：","卡中","/","先要"," ","树莓"],"title":"装系统","title_tokens":["系统","装"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#ros2","text":"在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。","text_tokens":["mate","的","电脑","，","安装","ubuntu","端","和","。","在","系统","一样","中","好","流程"," ","ros2"],"title":"装ROS2","title_tokens":["装","ros2"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_6","text":"将我们课程的代码也下载到树莓派中，进行编译。","text_tokens":["的","，","也","下载","进行","树莓","课程","编译","将","。","中","代码","我们","到","派"],"title":"编译代码","title_tokens":["编译","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_7","text":"如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728","text_tokens":["的","端","鼠标","使用","有","基本","配置","整体","net","连接","键盘","直接","blog","电脑","不","如下"," ","操作","桌面","如果","步骤","在","的话","远程","参考","上","好","csdn","一致","qq","article","访问",".","details","链接","52785580","以上","_","可以","大家","通过","远程桌面","系统","https","流程","基本一致","派","显示器","，","网络","122599728","了","和",":","就","。","：","/","方便","也","显示","树莓"],"title":"远程桌面","title_tokens":["远程","远程桌面","桌面"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_8","text":"树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 * 如使用虚拟机，请将虚拟机网络修改为桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。","text_tokens":["能力","启动","局域","算机","电脑","只要","计算","事情","问题","一个","局域网","、","安装","所","我们","listener","具体","模式","接下","而言","。","将","#","订阅","下来","通信","已经","像","互联","的","端","感觉","桥接","并","pc","呢","配置","并且","一样","如下","如果","之前","好","到","*","者","cpp","打通","局域网络","等","完成","，","网络","处于"," ","神奇","动作","接下来","服务","也","使用","如","之间","命令行","两个","请","简而言之","一下","直接","ros2","虚拟机","带来","发生","后","在","分组","nodes","这","？","run","_","需要","可以","节点","很多","希望","测试","无法","派端","做","确保","实现","互通","和","不过","为","计算机","小组","是","你","demo","什么","连接","而是","话题","中有","不","发布者","平台","他们","命令","修改","用","里","$","虚拟","会","讲过","同一个","效果","这样","talker","派","py","都","发布","了","个","就","：","中","同一","树莓"],"title":"分布式数据传输","title_tokens":["分布式","数据","据传","布式","数据传输","分布","传输"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_9","text":"没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。","text_tokens":["的","端的","没","提供","配置","一样","ros2","算机","<","电脑","计算","才能","如果","类似","在","问题","一个","分组","加入","机制",".","到","id","bashrc","即可","_","可以","两者","分配","小组","同一个","ros","我们","这样","派","不同","无法","，","实现","了","则","和","domain",">","就","将","：","=","。","中","处于","一句","同一","export"," ","通信","计算机","树莓","your"],"title":"分布式网络分组","title_tokens":["分布式","网络","布式","分组","分布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_10","text":"分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动。 $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端","text_tokens":["的","端","来","turtle","试试","pc","运动","启动","小海","先","例程","—","键盘","ros2","树莓","电脑","建立","或者","想","teleop","在","布式","似乎","之前","分布","一些","案例","上","学习","反过","真有","run","分布式","也","_","可以","$","节点","继续","过来","控制","过","流畅","反过来","通信","测试","ros","我们","这么","仿真器","是否","派","turtlesim","成功","依然","小海龟","，","key","真器","派端","网络","了","仿真","。","#","中","node","经典"," ","神奇","已经","海龟"],"title":"案例一：小海龟分布式控制","title_tokens":["小海龟","分布式","：","控制","布式","一","小海","分布","案例","海龟"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_11","text":"我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串。 $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端","text_tokens":["的","端","使用","试试","pc","呢","先","例程","world","helloworld","直接","ros2","话题","编写","电脑","不","发布者","topic","字符","在","pub","之前","修改","代码","learning","？","run","hello","_","作为","者","可以","$","情况","我们","是否","派","，","字符串","派端","发布","任何","。","订阅","#","下","sub"," ","通信","树莓"],"title":"案例二：话题分布式通信","title_tokens":["分布式","二","：","布式","分布","案例","通信","话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_12","text":"话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能。","text_tokens":["端","不在","务器","话题","电脑","服务器","还是","顺利实现","问题","程序","客户","功能","不在话下","顺利","服务","也","可以","加法","没有","求和","我们","运行","服务器程序","，","客户端","派端","实现","客户端程序","。"," ","树莓"],"title":"案例三：服务分布式通信","title_tokens":["三","分布式","：","布式","分布","案例","通信","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_13","text":"以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体。 $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。","text_tokens":["端的","提供","电脑","只要","机器","还","一切","问题","一个","代码","分布式","物体","视觉","系统","如此","不够","我们","搭建","一系","接下","。","将","#","usb","下来","的","端","pc","配置","发给","安排","类似","几乎","轻松","上","分布","好","变得","learning","功能","以上","摄像头","cam","通过","ros","处理","，","网络"," ","也","接下来","友好","使用","模拟","频繁","例程","ros2","topic","支持","在","布式","？","run","_","需要","小型","可以","摄像","节点","没有","测试","一系列","exe","派端","做","采集","sub","node","实际","非常","为","没","复杂","机器人","再","啦","连接","不","识别","系列","修改","图像","方法","实时","红色","$","用到","会","这些","开发","派","都","然后","了","webcam","任何","像头","中","树莓"],"title":"案例四：机器视觉分布式应用","title_tokens":["分布式","机器","视觉","：","应用","布式","分布式应用","四","案例","分布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_14","text":"https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["en","-","html",":","domain","https","org","/","docs","humble","ros","concepts","about","id","."],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2_%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/","text":"从本节开始，我们将进入第二个篇章，以ROS2的核心概念为线索，详细讲解ROS2的应用开发方法。","text_tokens":["的","应用","从本节","ros2","概念","二个","线索","进入","方法","第二个","本节","核心","详细","我们","开发","篇章","，","讲解","将","。","第二","开发方法","为","以","开始"],"title":"2 核心概念","title_tokens":["概念"," ","核心","2"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/","text":"Launch：多节点启动与配置脚本 到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是Launch启动文件。 它是ROS系统中多节点启动与配置的一种脚本。 Launch文件 这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。 多节点启动 运行效果 文件解析 learning_launch/simple.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'learning_topic' , executable = 'topic_helloworld_pub' , ), Node ( package = 'learning_topic' , executable = 'topic_helloworld_sub' , ), ]) 命令行参数配置 运行效果 文件解析 learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): rviz_config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ Node ( package = 'rviz2' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' , rviz_config ] ) ]) 资源重映射 运行效果 文件解析 learning_launch/remapping.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , namespace = 'turtlesim2' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , executable = 'mimic' , name = 'mimic' , remappings = [ ( '/input/pose' , '/turtlesim1/turtle1/pose' ), ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), ] ) ]) ROS参数设置 运行效果 文件解析 learning_launch/parameters.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node def generate_launch_description (): background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) ) return LaunchDescription ([ background_r_launch_arg , background_g_launch_arg , background_b_launch_arg , Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [{ 'background_r' : LaunchConfiguration ( 'background_r' ), 'background_g' : LaunchConfiguration ( 'background_g' ), 'background_b' : LaunchConfiguration ( 'background_b' ), }] ), ]) learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , namespace = 'turtlesim2' , name = 'sim' , parameters = [ config ] ) ]) Launch文件包含 运行效果 文件解析 learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction from launch_ros.actions import PushRosNamespace def generate_launch_description (): parameter_yaml = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ parameter_yaml_with_namespace ]) learning_launch/parameters_nonamespace.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [ config ] ) ]) 功能包编译配置 ... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ... 参考链接 https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docsros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["+","来","一种","122","projects","启动","input","main","groupaction","基于","上去","机器","了解","原有","目的","还","或者",",","终端","executable","return","乍","[","一个","pub","turtlesim1","代码","org","文件","resource","pose","textsubstitution","答案","html","yaml","当然","自由","系统","https","package","好像","xml","我们","generate","包","进行","turtlesim","一系","import","actions","text","过程","编程","阅读","。","=","declarelaunchargument","它","甚至","设置","像","这是","launchdescription","的","sim","name","share","for","输入","呢","配置","脚本","目前为止","join","turtlesim2","pythonlaunchdescriptionsource","files","一样","humble","large","编写","launch","粘合剂","...","与","namespace","with","相当","substitutions","看上","类似","def","所有","好","path","learning","目前","到","打开","每当",".","功能","如何","*","0","r","麻烦","通过","映射","ros","mimic","data","运行","，","description","84","就是","includelaunchdescription","packages","]","中多"," ","也","ament","'","using","-","使用","每次","命令行","模版","index","rviz2","例程","合剂","get","docs","helloworld","ros2","资源","重","参数设置","remapping","topic","前为","在","pushrosnamespace",")","nonamespace","value","}","？","没错","出现","docsros","launchconfiguration","_","directory","需要","可以","sources","节点","很多","没有","一次","大大","一系列","带领","parameters","组装","en","和","参数","多样","glob","d","/","解析","sub","描述","node","default","{","多","那","是","background","turtle","新","机器人","cmd","肯定","呀","vel","粘合","为止","完整","各种","丰富","各个","tutorials","系列","命令","参考","python","arg","b","parameter","output","链接","rviz","namespaces","config","核心","g","大家","包含","这样","效果","os","remappings","频次","py","from","看上去","都","多样化","之高","了","arguments",":","编译","就","：","一次性","simple","中","方式","有没有","(","turtle1"],"title":"**Launch：多节点启动与配置脚本**","title_tokens":["launch","*","多","与","节点","：","启动","配置","脚本"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch","text":"到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是Launch启动文件。 它是ROS系统中多节点启动与配置的一种脚本。","text_tokens":["的","那","是","新","一种","每次","启动","机器人","呢","目前为止","配置","肯定","呀","脚本","为止","launch","与","机器","前为","终端","命令","所有","一个","好","文件","到","打开","目前","每当","？","答案","需要","可以","当然","节点","麻烦","系统","很多","没有","一次","ros","我们","这样","运行","中多","，","都","就是","。","一次性","中","方式","它"," ","有没有"],"title":"Launch：多节点启动与配置脚本","title_tokens":["launch","多","与","节点","：","启动","配置","脚本"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_1","text":"这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。","text_tokens":["来","启动","基于","上去","了解","原有","目的","还","或者","乍","一个","代码","文件","自由","系统","好像","我们","进行","一系","过程","编程","阅读","。","它","甚至","像","这是","的","输入","呢","配置","一样","编写","launch","粘合剂","相当","看上","类似","功能","如何","通过","ros","，","就是","也"," ","使用","模版","命令行","例程","合剂","ros2","在","没错","出现","可以","节点","很多","大大","一系列","带领","组装","和","参数","多样","描述","那","是","呀","粘合","丰富","完整","各种","各个","系列","命令","python","核心","大家","这样","频次","看上去","多样化","之高","了","就","中"],"title":"Launch文件","title_tokens":["launch","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_1","text":"","text_tokens":[],"title":"多节点启动","title_tokens":["启动","节点","多"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_2","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_3","text":"learning_launch/simple.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'learning_topic' , executable = 'topic_helloworld_pub' , ), Node ( package = 'learning_topic' , executable = 'topic_helloworld_sub' , ), ])","text_tokens":["launchdescription","helloworld","launch","topic",",","executable","def","return",")","[","pub",".","learning","_","package","ros","generate","py","from","import","description","actions",":","simple","=","/","sub","node","]"," ","(","'"],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_4","text":"","text_tokens":[],"title":"命令行参数配置","title_tokens":["命令","命令行","配置","参数"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_5","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_6","text":"learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): rviz_config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ Node ( package = 'rviz2' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' , rviz_config ] ) ])","text_tokens":["launchdescription","-","name","turtle","share","index","join","get","rviz2","launch",",","executable","def","python",")","return","path","[",".","learning","rviz","_","directory","config","package","ros","generate","os","py","from","import","description","actions","arguments",":","packages","=","/","d","node","]"," ","ament","(","'"],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_7","text":"","text_tokens":[],"title":"资源重映射","title_tokens":["映射","资源","重"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_8","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_9","text":"learning_launch/remapping.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , namespace = 'turtlesim2' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , executable = 'mimic' , name = 'mimic' , remappings = [ ( '/input/pose' , '/turtlesim1/turtle1/pose' ), ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), ] ) ])","text_tokens":["launchdescription","sim","name","turtlesim2","input","cmd","vel","launch","remapping","namespace","turtle1",",","executable","def","return",")","[","turtlesim1",".","learning","output","pose","_","package","ros","mimic","generate","remappings","turtlesim","py","from","import","description","actions",":","=","/","node","]"," ","(","'"],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#ros","text":"","text_tokens":[],"title":"ROS参数设置","title_tokens":["参数","参数设置","设置","ros"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_10","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_11","text":"learning_launch/parameters.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node def generate_launch_description (): background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) ) return LaunchDescription ([ background_r_launch_arg , background_g_launch_arg , background_b_launch_arg , Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [{ 'background_r' : LaunchConfiguration ( 'background_r' ), 'background_g' : LaunchConfiguration ( 'background_g' ), 'background_b' : LaunchConfiguration ( 'background_b' ), }] ), ]) learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , namespace = 'turtlesim2' , name = 'sim' , parameters = [ config ] ) ])","text_tokens":["launchdescription","sim","background","name","122","share","index","turtlesim2","join","get","launch","namespace","substitutions",",","executable","def","b",")","arg","return","[","python","value","}","path",".","learning","]","textsubstitution","launchconfiguration","_","0","directory","default","yaml","config","r","g","package","ros","{","generate","os","turtlesim","py","parameters","from","import","description","actions","text","84",":","packages","=","/","declarelaunchargument","node"," ","ament","(","'"],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_2","text":"","text_tokens":[],"title":"Launch文件包含","title_tokens":["launch","包含","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_12","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_13","text":"learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction from launch_ros.actions import PushRosNamespace def generate_launch_description (): parameter_yaml = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ parameter_yaml_with_namespace ]) learning_launch/parameters_nonamespace.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [ config ] ) ])","text_tokens":["launchdescription","sim","name","share","index","turtlesim2","join","get","pythonlaunchdescriptionsource","groupaction","launch","with","namespace",",","executable","def","python","pushrosnamespace",")","[","parameter","path","nonamespace","return",".","learning","namespaces","_","directory","config","yaml","sources","package","ros","generate","os","turtlesim","py","from","import","description","parameters","actions",":","includelaunchdescription","packages","=","/","node","]"," ","ament","(","'"],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_14","text":"... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ...","text_tokens":["+","name","share","index","files","join","launch","...",",","[",")","path",".","resource","rviz","*","_","config","package","xml","data","os","py","glob","packages","=","/","]"," ","ament","(","'"],"title":"功能包编译配置","title_tokens":["功能","编译","包","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docsros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["using","-","for","projects","humble","main","docs","large","ros2","launch","tutorials","org",".","docsros","https","ros","en",":","/"," ","html"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/","text":"TF：机器人坐标系管理神器 坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器——TF。 机器人中的坐标系 机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做基坐标系Base Frame，机器人安装位置在外部环境下的参考系叫做世界坐标系World Frame，机器人末端夹爪的位置叫做工具坐标系，外部被操作物体的位置叫做工件坐标系，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是基坐标系Base Link，雷达所在的位置叫做雷达坐标系laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做里程计坐标系odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做地图坐标系map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为平移和旋转两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实向量的数学描述。 ROS中TF功能的底层原理，其实就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。 TF命令行操作 ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。 小海龟跟随例程 这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 查看TF树 $ ros2 run tf2_tools view_frames 查询坐标变换信息 $ ros2 run tf2_ros tf2_echo turtle2 turtle1 坐标系可视化 $ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。 静态TF广播 我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为静态TF变换，我们来看看在程序中该如何实现？ 运行效果 $ ros2 run learning_tf static_tf_broadcaster 代码解析 learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？ TF监听 我们再来学习下如何查询两个坐标系之间的位置关系。 运行效果 $ ros2 run learning_tf tf_listener 代码解析 learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。 海龟跟随功能解析 运行效果 $ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 原理解析 在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？这两个向量我们可以根据海龟的位置话题计算出来，那这个位置向量不就容易得到了么。 我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心是这个向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。 Launch文件解析 learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ]) 坐标系动态广播 learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 海龟跟随 learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":["+","turtletfbroadcaster","库","一种","client","基本","house","启动","trans","看","target","雷达","作者","相应","向量","失败","org","代码","加入","转变","要","rclpy","物体","系统","package","base","你家","矩阵","得到","w","utf","declarelaunchargument","查询","左边","理论","目标","1.0","q","移动","rel","先","段","编写","info","服务器","spawn","操作","是不是","每","异常","上","好","旋转","变得","变成","打开","中间","可视化","监听器","通过","底层","详细","不是","里程计","保存","常见","很","挑战","教材","关于"," ","points","on","theta","broadcaster","as","-","优先","运动","连线","docs","get","退出","根据","外部","callback","statictfbroadcaster","4","知识","就绪","f","请求","否则",")","选项","相对","入口","}","id","？","被","map","run","可以","一起","控制","重要","理论知识","参数值","parameters","着急","except","真器","实现","产生","坐标","仿真","/","描述","非常","哪个","init","为","指令","姿态","destroy","coding","算出","是","可视","漂移","数","数值","demo","再","查看","跟随运动","完整","不断","加","里程","随便","标志","tutorials","broadcaster1","命令","程序","方法","logger","com","报告","中心点",".__","math","外部环境","小海龟","quaternion","entry","环境","怎么样","定时","header","turtle2","动","__","背后","器","称之为","world","the","基于","古月","所在","静态","%","机器","了解","周期","计算","lookup","s","分解","一个","理解","创建","5","done","、","学习","安装","最为","https","listener","累积","作用","又","stamp","过程","。","laser","订阅","内","3","name","初始化","share","按照","呢","—","出来","一样","存在","包括","之为","如下","知道","srv","def","拆","一些","到","buffer","tf2","源","原理","者","工件","空间","timer","仿真器","spawned","是否","运行","speed","一只","客户端","pos","就是","动态","机器人学","数学","地图","得","bin","海龟","服务","两者之间","类","'","数据","之间","动机","两个","transformlistener","销毁","时间","三个","z","监听","器类","主要","人学","（","默认","发生","后","保持","所以","夹","prefix","args","获取","www","戳","内容","变得复杂","没有","spawner","臂","做","和","解析","transformations","following","spawning","default","不会","{","方向","--","时刻","没","link","机器人","另外","msgs","定义","!","cmd","request","quat","apt","话题","不","xy","child","async","世界","链接","rviz","比如","这个","向","两者","turtlefollowing","中该","同理","提示","坐标系","这些","效果","turtlename","爪",":","哪些","速度","else","中","管理系","箭头","html","角速度","给","broadcaster2","python3","两只","只要","默认值","还","executable","return","简单","pose","现在","service","继续","rate","create","我们","generate","turtlesim","import","将","#","回调","的","示例","点","class","至关","console","时候","humble","配置","初始","变换","出","launch","2","与","关闭","install","定时器","substitutions","意思","如果","案例","publisher","y",".","learning","*","1","send","距离","对象","么","想起","transformation","范围","处理","居","ex","linear","geometry","publish","四乘","接口","]","也","激光雷达","说明","缓冲区","命令行","说","statictransformbroadcaster","ros2","@","true","良好","ready","信息","在","source","super","进入","none","这","消息","封装","看看","launchconfiguration","神器","angular","odom","rotation","节点","很多","绝对","transform","roll","全局","跟随","pkg","en","下","node","某","时","误差","那","复杂","试试","false","经过","管理系统","其中","存储","务器","管理","概念","机械","teleop","shutdown","参考","末端","tools","parameter","转换","用","finished","guyuehome","又会有","transformbroadcaster","declare","大家","not","tflistener","view","应该","这样","twist","怎么","发送","py","from","怎样","显得","could","编译","就","turtle1","基础","来","不要","\"","提供","叫做","有","main","四","yaw","抓取","spin","一层","算法","慢慢","result",",","[","部分","文件","其实","env","情况","包","进行","基","具体","scale","atan2","actions","及时","还会","工具","=","循环","线速度","设置","已经","5.0","底盘","父类","launchdescription","sim","8","让","并","关系","位","小海","生成","树","setup","平移","之后","static","等待","计算出来","transformstamped","函数","固定","激光","如何","功能","sudo","0","self","0.0","发生变化","ros","对","scripts","看似","生变","完成","string","当前","frame","successfully","，","讲解","解决","变化","description","便于","广播","try","to","一本","准备","清楚","if","使用","房子","now","rviz2","例程","缓冲","transformexception","熟悉","起来","长度","value","名称","至关重要","_","需要","x","名","time","表示","转变成","sqrt","依然","更新","呗","forward","translation","参数",">","位置","d","这种","usr","有点","移动机器人","turtle","欧拉","四元","10.0","啦","euler","tf","vel","msg","该","试一试","subscription","欧拉角","call","sendtransform","自动","python","有所","容易","角度","客户","float","pitch","clock","）","$","核心","会","echo","形态","高中","准备就绪","中画","不变","中心","成功","key","都","参考系","格外","了","然后","发布","：","frames","is","("],"title":"**TF：机器人坐标系管理神器**","title_tokens":["管理","*","神器","机器","坐标","：","机器人","坐标系","tf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf","text":"坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器——TF。","text_tokens":["的","基础","是","提供","之间","关系","给","机器人","—","tf","存在","该","熟悉","完整","管理","概念"," ","机器","人学","在","一个","？","如何","神器","会","系统","很多","重要","ros","坐标系","我们","这些","，","了","坐标","。","机器人学","位置","中","非常","也"],"title":"TF：机器人坐标系管理神器","title_tokens":["管理","神器","机器","坐标","：","机器人","坐标系","tf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_1","text":"机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做基坐标系Base Frame，机器人安装位置在外部环境下的参考系叫做世界坐标系World Frame，机器人末端夹爪的位置叫做工具坐标系，外部被操作物体的位置叫做工件坐标系，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是基坐标系Base Link，雷达所在的位置叫做雷达坐标系laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做里程计坐标系odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做地图坐标系map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为平移和旋转两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实向量的数学描述。 ROS中TF功能的底层原理，其实就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。","text_tokens":["叫做","有","基本","四","world","抓取","一层","所在","雷达","机器","向量","分解","部分","一个","简单","其实","要","安装","物体","系统","base","矩阵","我们","进行","基","累积","过程","。","laser","工具","内","的","理论","至关","关系","呢","移动","变换","一样","出","平移","操作","每","一些","旋转","变得","固定","功能","原理","工件","通过","空间","底层","范围","ros","对","详细","看似","frame","里程计","，","讲解","变化","就是","四乘","机器人学","教材","一本","地图","数学","关于","也"," ","两者之间","使用","之间","动机","两个","外部","良好","知识","主要","人学","在","夹","相对","至关重要","？","封装","被","map","可以","odom","变得复杂","重要","绝对","理论知识","臂","跟随","和","坐标","位置","下","描述","为","误差","移动机器人","那","是","漂移","复杂","管理系统","link","机器人","tf","管理","不断","里程","机械","参考","末端","方法","世界","比如","这个","又会有","两者","会","形态","大家","中心点","坐标系","这些","外部环境","中画","中心","都","参考系","爪","环境","显得","格外","了","哪些","就","中","管理系"],"title":"机器人中的坐标系","title_tokens":["的","机器","坐标","机器人","中","坐标系"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_1","text":"ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。","text_tokens":["的","示例","使用","一种","呢","机器人","小海","先","tf","该","基于","两只","算法","了解","机器","？","如何","通过","ros","坐标系","我们","小海龟","，","跟随","坐标","。","中","下","海龟"],"title":"TF命令行操作","title_tokens":["tf","命令行","操作","命令"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_2","text":"这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key","text_tokens":["的","示例","来","-","turtle","运动","启动","demo","humble","小海","先","其中","另外","ros2","试一试","跟随运动","apt","launch","之后","相应","install","teleop","自动","一个","tools","文件",".","？","功能","tf2","如何","安装","这个","sudo","需要","_","可以","$","run","会","通过","控制","ros","我们","效果","包","具体","运行","turtlesim","py","小海龟","，","一只","跟随","key","然后","就","。"," ","海龟"],"title":"小海龟跟随例程","title_tokens":["小海龟","跟随","小海","例程","海龟"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_2","text":"$ ros2 run tf2_tools view_frames","text_tokens":["tf2","run","_","$","frames","tools","view"," ","ros2"],"title":"查看TF树","title_tokens":["tf","查看","树"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_3","text":"$ ros2 run tf2_ros tf2_echo turtle2 turtle1","text_tokens":["tf2","run","_","$","echo","ros"," ","ros2","turtle2","turtle1"],"title":"查询坐标变换信息","title_tokens":["变换","信息","坐标","查询"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_4","text":"$ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。","text_tokens":["的","来","--","不要","-","是","turtle","使用","share","背后","呢","小海","rviz2","先","tf","ros2","慢慢","了解","意思","prefix",")","理解","案例","方法","这",".","？","rviz","tf2","run","海龟","_","原理","$","大家","我们","py","小海龟","，","pkg","跟随","着急","怎样","便于","。","d","/","下"," ","有点","("],"title":"坐标系可视化","title_tokens":["坐标系","可视化","可视","坐标"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_3","text":"我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为静态TF变换，我们来看看在程序中该如何实现？","text_tokens":["的","来","那","是","房子","试试","之间","关系","基本","机器人","称之为","说","tf","变换","之为","管理","只要","不","雷达","之后","静态","机器","主要","发生","在","拆","程序","一个","好","简单","相对","？","激光","如何","安装","比如","最为","这个","也","看看","中该","系统","发生变化","应该","对","情况","坐标系","我们","你家","生变","进行","作用","，","常见","呗","变化","很","实现","和","坐标","就","。","位置","这种","中","哪个"," ","激光雷达","底盘","不会"],"title":"静态TF广播","title_tokens":["tf","广播","静态"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_5","text":"$ ros2 run learning_tf static_tf_broadcaster","text_tokens":["run","static","_","broadcaster","$","learning","tf"," ","ros2"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_6","text":"learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？","text_tokens":["\"","库","__","house","器","main","yaw","world","python3","spin","古月","静态","作者",",","[","一个","创建","代码","加入","文件","env","、","rclpy","系统","我们","包","进行","w","import","又","stamp","utf","将","#","=","循环","查询","3","设置","5.0","父类","的","示例","点","8","class","name","初始化","目标","并","让","console","关系","时候","呢","配置","初始","变换","段","setup","编写","平移","static","如下","2","等待","知道","transformstamped","def","旋转","y",".","learning","打开","到","tf2","功能","*","源","0","1","如何","对象","self","0.0","ros","scripts","居","完成","frame","，","geometry","变化","广播","to","接口","]"," ","bin","points","类","'","清楚","broadcaster","-","使用","now","说明","两个","get","退出","销毁","statictransformbroadcaster","@","ros2","时间","z","statictfbroadcaster","器类","（","保持","后",")","super","args","选项","none","入口","}","这","id","消息","？","_","www","戳","x","需要","rotation","节点","transform","roll","translation","坐标","位置","/","node","描述","transformations","init","usr","为","destroy","{","coding","是","欧拉","四元","数","经过","10.0","msgs","!","euler","tf","quat","msg","该","欧拉角","sendtransform","shutdown","python","child","程序","转换","com","pitch","clock","guyuehome","）","向","坐标系","不变","py","from","quaternion","entry","了",":","编译","：","header","中","("],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_4","text":"我们再来学习下如何查询两个坐标系之间的位置关系。","text_tokens":["如何","的","来","坐标","之间","关系","。","再","两个","位置","下","查询","坐标系","我们","学习"],"title":"TF监听","title_tokens":["tf","监听"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_7","text":"$ ros2 run learning_tf tf_listener","text_tokens":["run","_","$","learning","listener","tf"," ","ros2"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_8","text":"learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。","text_tokens":["\"","库","__","基本","house","main","world","python3","spin","trans","古月","target","两只","默认值","作者","%","了解","周期","lookup",",","失败","s","return","[","一个","创建","代码","加入","文件","env","rclpy","现在","继续","系统","create","listener","我们","包","进行","w","import","utf","。","#","=","循环","设置","父类","左边","的","示例","点","8","class","name","初始化","目标","并","让","console","1.0","配置","初始","变换","setup","编写","info","如下","static","2","等待","知道","关闭","定时器","如果","异常","def","好","案例","y",".","learning","到","buffer","固定","打开","tf2","功能","*","源","0","1","对象","监听器","self","timer","ros","scripts","对","处理","居","string","当前","完成","ex","frame","保存","，","pos","挑战","try","to","接口","]","bin"," ","on","points","海龟","类","'","broadcaster","as","-","使用","now","说明","优先","之间","缓冲区","两个","get","transformlistener","退出","缓冲","外部","销毁","@","ros2","transformexception","时间","z","监听","信息","f","默认","否则","（","后","source",")","super","获取","进入","args","value","}","none","选项","入口","_","www","x","需要","名","time","rotation","节点","transform","参数值","跟随","except","translation","坐标","参数",">","位置","/","node","某","transformations","init","usr","姿态","destroy","{","coding","--","数值","时刻","四元","数","啦","!","存储","tf","quat","euler","shutdown","python","程序","parameter","有所","logger","用","com","guyuehome","）","报告","declare","大家","not","tflistener","坐标系","py","from","quaternion","could","entry","了",":","编译","：","定时","("],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_9","text":"","text_tokens":[],"title":"海龟跟随功能解析","title_tokens":["跟随","功能","海龟","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_10","text":"$ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key","text_tokens":["launch","py","run","key","_","turtle","$","teleop","learning",".","demo","tf"," ","ros2","following","turtlesim"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_11","text":"在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？这两个向量我们可以根据海龟的位置话题计算出来，那这个位置向量不就容易得到了么。 我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心是这个向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。","text_tokens":["动","叫做","有","world","看","两只","计算","周期","向量","一个","代码","要","学习","我们","得到","还会","。","设置","的","按照","出来","变换","2","与","是不是","计算出来","上","好","如何","1","中间","距离","么","想起","不是","仿真器","，","解决","很","就是","广播","动态","得"," ","也","海龟","运动","两个","连线","例程","说","根据","三个","时间","起来","监听","所以","长度","在","相对","这","？","封装","可以","表示","一起","全局","跟随","真器","做","实现","和","仿真","坐标","位置","下","描述","某","时","方向","算出","那","是","再","定义","tf","该","话题","不","不断","加","随便","参考","容易","方法","角度","用","比如","这个","向","两者","核心","同理","中心点","高中","坐标系","这样","怎么","中心","参考系","然后","发布","了","怎么样","就","速度","中","箭头","turtle2","turtle1"],"title":"原理解析","title_tokens":["解析","原理"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#launch","text":"learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ])","text_tokens":["launchdescription","sim","broadcaster","name","turtle","demo","broadcaster2","tf","target","launch","turtle1","broadcaster1","substitutions",",","executable","def","return",")","[","value","following","}",".","learning","]","launchconfiguration","_","default","package","ros","{","listener","generate","turtlesim","frame","py","from","import","description","parameters","turtlename","actions",":","=","/","declarelaunchargument","node"," ","(","turtle2","'"],"title":"Launch文件解析","title_tokens":["launch","解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_12","text":"learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], },","text_tokens":["\"","turtletfbroadcaster","库","__","器","main","yaw","world","python3","the","spin","古月","默认值","作者",",","[","一个","创建","代码","加入","文件","env","转变","、","pose","rclpy","系统","create","listener","包","turtlesim","进行","w","import","stamp","及时","utf","订阅","#","=","将","循环","3","设置","父类","回调","的","示例","点","8","class","name","初始化","并","目标","让","console","q","配置","小海","初始","变换","setup","编写","平移","如下","static","2","等待","知道","关闭","transformstamped","def","旋转","y",".","learning","到","函数","变成","打开","tf2","功能","*","1","源","0","者","send","对象","self","0.0","transformation","ros","scripts","处理","居","string","完成","frame","，","geometry","变化","广播","动态","to","接口","]"," ","bin","points","海龟","类","'","theta","broadcaster","-","使用","now","说明","优先","get","callback","退出","外部","销毁","@","ros2","时间","z","f","（","默认","否则","信息","后",")","super","获取","args","none","名称","value","}","id","消息","入口","_","www","戳","x","需要","rotation","节点","转变成","transform","参数值","roll","更新","translation","坐标","参数","位置","/","node","transformations","init","usr","为","destroy","{","coding","数值","turtle","欧拉","四元","数","选项","msgs","!","euler","tf","msg","subscription","欧拉角","sendtransform","shutdown","python","child","程序","parameter","转换","用","com","pitch","clock","guyuehome","）","transformbroadcaster","向","declare","坐标系","py","from","小海龟","turtlename","quaternion","entry",":","编译","：","header","中","("],"title":"坐标系动态广播","title_tokens":["坐标系","广播","坐标","动态"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_13","text":"learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], },","text_tokens":["+","\"","角速度","库","__","client","main","python3","spin","trans","古月","默认值","作者","result","计算","周期","还","lookup",",","失败","return","[","一个","创建","5","done","代码","env","、","文件","加入","rclpy","service","系统","rate","create","listener","包","turtlesim","atan2","进行","scale","import","utf","#","=","线速度","循环","设置","已经","左边","父类","的","示例","点","8","class","name","初始化","目标","并","让","console","位","rel","配置","生成","初始","变换","包括","setup","编写","info","如下","服务器","2","等待","知道","static","spawn","关闭","定时器","srv","如果","异常","def","publisher","y",".","learning","到","buffer","固定","打开","功能","tf2","*","源","1","0","距离","对象","监听器","self","通过","timer","ros","scripts","居","string","是否","spawned","当前","frame","保存","ex","，","客户端","speed","变化","geometry","linear","successfully","publish","try","to","接口","]","bin"," ","on","海龟","服务","准备","类","'","points","theta","broadcaster","as","-","if","使用","now","说明","数据","优先","缓冲区","运动","get","transformlistener","退出","缓冲","外部","根据","@","ros2","transformexception","时间","true","z","监听","ready","4","就绪","信息","请求","默认","否则","f","后","source",")","super","获取","进入","args","value","}","none","选项","消息","入口","angular","_","www","x","需要","名","time","rotation","节点","内容","sqrt","控制","表示","没有","transform","参数值","依然","spawner","跟随","except","完成","forward","实现","产生","translation","坐标","参数","位置","/","node","transformations","following","usr","init","spawning","指令","姿态","{","destroy","coding","数值","时刻","turtle","没","false","销毁","msgs","cmd","!","存储","tf","vel","务器","msg","查看","request","跟随运动","话题","call","标志","xy","shutdown","python","程序","async","parameter","角度","float","客户","logger","用","com","finished","guyuehome","turtlefollowing","报告","declare","not","提示","准备就绪",".__","math","坐标系","twist","发送","成功","py","from","could","发布","entry",":","编译","：","速度","定时","else","is","(","turtle2","turtle1"],"title":"海龟跟随","title_tokens":["跟随","海龟"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_14","text":"https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":["tf2","en","-","tutorials","html",":","https","org","/","docs","humble","ros","main","."],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/","text":"URDF：机器人建模方法 ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法——URDF，用来描述机器人外观、性能等各方面属性。 机器人的组成 建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由硬件结构、驱动系统、传感器系统、控制系统四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备，驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等，传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境，控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。 URDF ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是XML格式，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为连杆Link，手肘就类似于机器人电机驱动部分，称为关节joint。 所以在URDF建模过程中，关键任务就是通过这里的 和 ，理清楚每一个连杆和关节的描述信息。 连杆Link的描述 标签用来描述机器人某个刚体部分的外观和物理属性，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。Link里边的 部分用来描述机器人的外观，比如 表示几何形状，里边使用 调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的。 表示坐标系相对初始位置的偏移，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分 ，描述碰撞参数，里边的内容似乎和 一样，也有 和 ，看似相同，其实区别还是比较大的。 部分重在描述机器人看上去的状态，也就是视觉效果， 部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过 来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是 里边 描述的形状。 坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。 关节Joint描述 机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 第一种continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 第二种revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 第三种prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 第四种是fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 第五种Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 既然是运动，就是相对的，parent标签描述父连杆，child标签描述子连杆，子连杆会相对父连杆发生运动。 这里的origin表示两个连杆坐标系之间的关系，也就是这个向量，可以理解为这两个连杆该如何安装到一起。 Axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的。 Limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等，大家注意单位，ROS中关于平移的默认单位都是m，旋转是弧度，不是度，所以这里3.14就表示可以在-180度到180度之间运动，速度也是m/s，或者rad/s。 完整机器人模型 最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。 创建机器人模型 好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。 功能包结构 urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件 查看URDF模型结构 $ urdf_to_graphiz mbot_base.urdf # 在模型文件夹下 模型可视化效果 模型文件解析 learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot> 参考链接 https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":["m","蓝色","一种","raw","较","启动","这里","平面","独立","看","少","graphiz","robot","电脑","雷达","向量","org","代码","要","视觉效果","第三","无论","以及","系统","颜色","base","圆柱","矩阵","第一种","于","version","第二","它","设计","1.0","应用","移动","先","属于","origin","操作","驱动器","允许","每","看上","上","好","旋转","尖括号","可视化","配置文件","通过","载体","0.4","惯性","等","不是","先来","保存","常见","1.5707","continuous","0.9","color","关于"," ","带有","形成","-","驱使","运动","docs","某个","板载","外部","看下","里边","传感器","相对","？","第五","极限","可以","一起","网页","控制","一系列","简化","着急","产生","0.18","分别","坐标","框","/","要求","描述","小臂","为","软件","最终","多","是","可视","组成","提前","再","prismatic","状态","渲染","大臂","而是","连接","查看","格式","完整","cylinder","tutorials","系列","找","小车","方法","围绕","xyz","这款","0.19","叫","此时","相对运动","专门","外部环境","全都","back","环境","驱动","wheel","市面上","连杆","算力","上去","机器","计算","几何","了解","s","分解","一个","理解","创建","件夹","、","urdf","标签","独自","安装","视觉","https","xml","limit","这么","建模语言","过程","则","。","二种","name","按照","呢","imu","—","自己","一样","包括","0.05","如下","思路","既然","类似","比较","轮子","一些","一致","0.20","到","偏移","操作系统","单位向量","检测","六种","就是","关键","算作","得","肘关节","radius","转关","统一","放置","不仅","之间","动机","两个","z","形状","主要","所以","默认","发生","在于","一般","滑动","0.16","内容","外界","一段","市面","性能","各","臂","和","真实","解析","四种","认识","方向","不会","link","机器人","车体","定义","质心","全称","<","不","引用","平台","二个","child","链接","为此","第二个","一块","rviz","left","比如","这个","高","由","?","不能","坐标系","这些","效果","唯一","传感","正","尺寸","0.095",":","哪些","速度","中","管理系","html","称为","给","大","组成部分","五种","讲","0.95","文件夹","还","parent","乍","自定义","最大","当然","我们","为了","相机","语言","手","将","black","#","放在","material","应用软件","面上","正常","的","示例","时候","0.06","名字","配置","humble","初始","单位","launch","四大","与","注意","如果","第五种","的话","调用","所有","之前","y","子",".","learning","right","1","第六","细节","第二种","完全","geometry","浮动","码器","也","电机","joint","设备","rpy","front","控制系统","质量","属性","编码","信息","在","源代码","这","无论是","等于","摄像","第一","最小","第三种","自身","清晰","类型","roll","en","右侧","下","某","planar","时","建模","模型","复杂","任务","管理系统","弧度","其中","关节","管理","还是","机械","用来","绿色","meshes","参考","重在","用","感器","sphere","括号","存放","大家","第六种","这样","派","看上去","组合","就","rad","无限","3.14","必须","树莓","0.025","来","\"","提供","叫做","有","white","第四种","外壳","哪","main","180","或者","type","包围","全为","部分","柱体","文件","其实","实打实","0.015","第四","限制","包","进行","一系","肌肉","度到","revolute","为例","=","结构","有点像","碰撞","底盘","未来","让","关系","三种","三维","visual","硬件","组合而成","平移","之后","stl","axis","length","接触","每个","xacro","固定","如何","功能","摄像头","0","ros","对","看似","完成","，","变化","编码器","便于","局","介绍","轴","to","mbot","清楚","使用","刚体","频繁","手肘","fixed","方面","熟悉","起来","装置","yellow","才能","rgba","似乎","看到","名称","感知","等等","_","需要","x","表示","桌子","电源","无法","不过","把","参数","或",">","自定","位置","这种","实际","有点","以","沿某","caster","父","移动机器人","相同","理","两种","啦","外观","什么","相关","该","直线","圆柱体","floating","区别","物理","他们","角度","pitch","手臂","$","会","度","开发","都","了","模型简化","：","像头","旋转关节","方式","碰撞检测"],"title":"**URDF：机器人建模方法**","title_tokens":["*","机器","：","机器人","方法","urdf","建模"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf","text":"ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法——URDF，用来描述机器人外观、性能等各方面属性。","text_tokens":["的","是","让","使用","提供","一种","给","呢","机器人","啦","—","外观","方面","机器","属性","操作","还","用来","在","之前","一个","方法","、","urdf","要","？","为此","如何","当然","操作系统","系统","专门","ros","我们","等","性能","各","，","了","不过","把","。","介绍","下","得","描述"," ","建模","认识"],"title":"URDF：机器人建模方法","title_tokens":["机器","：","机器人","方法","urdf","建模"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_1","text":"建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由硬件结构、驱动系统、传感器系统、控制系统四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备，驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等，传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境，控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。","text_tokens":["市面上","外壳","组成部分","电脑","雷达","机器","计算","部分","分解","一个","、","其实","实打实","安装","无论","以及","系统","我们","进行","语言","建模语言","过程","。","结构","应用软件","正常","面上","底盘","的","按照","应用","移动","imu","先","自己","包括","硬件","四大","思路","操作","驱动器","每","类似","上","一些","摄像头","操作系统","通过","载体","等","，","常见","编码器","就是","便于","码器"," ","电机","清楚","设备","使用","驱使","动机","控制系统","板载","外部","熟悉","起来","装置","里边","编码","主要","传感器","看到","一般","这","感知","等等","无论是","需要","可以","摄像","控制","市面","电源","臂","和","把","参数","描述","建模","软件","移动机器人","是","组成","管理系统","机器人","再","状态","管理","还是","机械","平台","感器","比如","由","这些","开发","派","传感","组合","都","环境","了","驱动","像头","中","管理系","树莓"],"title":"机器人的组成","title_tokens":["组成","的","机器人","机器"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_1","text":"ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是XML格式，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为连杆Link，手肘就类似于机器人电机驱动部分，称为关节joint。 所以在URDF建模过程中，关键任务就是通过这里的 和 ，理清楚每一个连杆和关节的描述信息。","text_tokens":["连杆","叫做","称为","这里","独立","看","上去","机器","还","包围","乍","部分","一个","代码","文件","urdf","标签","独自","xml","我们","于","一系","肌肉","手","过程","。","有点像","的","呢","自己","组合而成","之后","看上","类似","每","尖括号","如何","通过","ros","，","就是","关键","算作","肘关节","也"," ","电机","统一","joint","清楚","不仅","使用","运动","刚体","手肘","外部","属性","才能","所以","信息","在","源代码","相对","？","可以","网页","桌子","自身","一系列","清晰","无法","臂","产生","和","右侧","下","描述","小臂","有点","建模","模型","是","理","任务","组成","link","机器人","其中","大臂","关节","全称","连接","格式","机械","他们","系列","方法","手臂","比如","这个","括号","由","大家","相对运动","开发","外部环境","这样","这些","看上去","组合","都","环境","驱动","就","中","必须"],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#link","text":"标签用来描述机器人某个刚体部分的外观和物理属性，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。Link里边的 部分用来描述机器人的外观，比如 表示几何形状，里边使用 调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的。 表示坐标系相对初始位置的偏移，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分 ，描述碰撞参数，里边的内容似乎和 一样，也有 和 ，看似相同，其实区别还是比较大的。 部分重在描述机器人看上去的状态，也就是视觉效果， 部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过 来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是 里边 描述的形状。 坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。","text_tokens":["连杆","蓝色","来","算力","有","raw","较","大","上去","机器","计算","几何","全为","部分","自定义","一个","柱体","文件","、","其实","标签","视觉效果","视觉","颜色","圆柱","矩阵","我们","为了","为例","则","过程","。","将","第二","它","未来","碰撞","的","设计","name","时候","移动","初始","一样","包括","三维","平移","如下","stl","与","看上","类似","如果","的话","调用","比较","上","好","旋转","一致","y","轮子","到","接触","如何","0","偏移","通过","检测","惯性","等","看似","，","就是","算作"," ","也","joint","使用","刚体","运动","动机","某个","z","质量","形状","属性","里边","在","似乎","相对","名称","x","需要","可以","表示","内容","外界","控制","简化","roll","臂","和","分别","参数","真实","坐标","自定","位置","框","要求","描述","实际","时","以","方向","软件","模型","移动机器人","相同","是","复杂","提前","link","机器人","车体","定义","状态","质心","外观","连接","该","圆柱体","不","还是","机械","区别","用来","物理","绿色","二个","小车","重在","用","pitch","第二个","这个","比如","高","会","坐标系","效果","这样","看上去","尺寸","了","就","：","模型简化","中","碰撞检测"],"title":"连杆Link的描述","title_tokens":["link","的","连杆","描述"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#joint","text":"机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 第一种continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 第二种revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 第三种prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 第四种是fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 第五种Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 既然是运动，就是相对的，parent标签描述父连杆，child标签描述子连杆，子连杆会相对父连杆发生运动。 这里的origin表示两个连杆坐标系之间的关系，也就是这个向量，可以理解为这两个连杆该如何安装到一起。 Axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的。 Limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等，大家注意单位，ROS中关于平移的默认单位都是m，旋转是弧度，不是度，所以这里3.14就表示可以在-180度到180度之间运动，速度也是m/s，或者rad/s。","text_tokens":["m","连杆","一种","有","较","第四种","平面","五种","哪","这里","180","少","机器","或者","parent","向量","s","一个","理解","urdf","要","标签","最大","安装","第三","第四","xml","限制","limit","第一种","进行","相机","度到","revolute","。","第二","二种","的","关系","名字","属于","三种","origin","单位","平移","之后","注意","axis","既然","允许","每","第五种","比较","轮子","上","一些","旋转","子","到","固定","如何","1","第六","单位向量","通过","第二种","ros","等","不是","，","变化","六种","continuous","浮动","就是","轴","关于","也"," ","带有","转关","电机","joint","-","使用","刚体","运动","之间","两个","频繁","fixed","z","才能","所以","默认","发生","在","在于","一般","相对","滑动","这","第五","极限","可以","等于","表示","一段","内容","一起","第一","最小","第三种","类型","臂","产生","和","不过","坐标","这种","位置","/","四种","描述","某","planar","为","沿某","不会","父","模型","方向","最终","是","两种","link","机器人","prismatic","弧度","关节","连接","而是","什么","该","直线","不","还是","floating","机械","区别","child","小车","角度","围绕","比如","这个","叫","此时","会","大家","相对运动","第六种","不能","度","坐标系","唯一","这样","正","都","了","就","rad","速度","无限","旋转关节","中","方式","3.14"],"title":"关节Joint描述","title_tokens":["关节","描述","joint"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_2","text":"最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。","text_tokens":["的","模型","最终","是","组成","link","机器人","再","先","看","robot","完整","之后","不","机器","了解","所以","每","在","部分","所有","一个","找","代码","每个","标签","urdf","一块","这个","大家","由","细节","对","时","完成","全都","先来","完全","，","组合","着急","了","和","哪些","就","。","局","放在","中","描述","某","下"," ","形成","joint"],"title":"完整机器人模型","title_tokens":["完整","模型","机器人","机器"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_3","text":"好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。","text_tokens":["的","示例","移动机器人","模型","多","啦","移动","动机","机器人","讲","看下","看","建模","完整","还是","机器","一个","好","urdf","要","这款","一起","我们","这么","，","了","为例","过程","。","它"," ","以"],"title":"创建机器人模型","title_tokens":["模型","机器人","创建","机器"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_4","text":"urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件","text_tokens":["模型","的","放置","启动","机器人","配置","渲染","相关","launch","机器","引用","meshes","文件","urdf","xacro","rviz","存放","配置文件","保存","或","：","中"," "],"title":"功能包结构","title_tokens":["功能","结构","包"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_2","text":"$ urdf_to_graphiz mbot_base.urdf # 在模型文件夹下","text_tokens":["模型","_","文件夹","$","文件","在","to","mbot","#","base","件夹","下"," ",".","urdf","graphiz"],"title":"查看URDF模型结构","title_tokens":["结构","模型","查看","urdf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_5","text":"","text_tokens":[],"title":"模型可视化效果","title_tokens":["可视","模型","可视化","效果"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_6","text":"learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot>","text_tokens":["\"","-","name","white","1.0","rpy","0.06","link","front","0.95","visual","<","origin","robot","0.05","yellow","cylinder","axis","type","parent","rgba","caster","length","child","0.20",".","learning","urdf","right","left","sphere","1","_","0","xyz","0.19","0.16","?","0.015","base","0.4","xml","0.025","1.5707","back","geometry","0.18","continuous","0.095","0.9",">","black","mbot","/","=","version","material","color"," ","radius","wheel","joint"],"title":"模型文件解析","title_tokens":["模型","解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_7","text":"https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":["en","-","tutorials","html",":","https","org","/","docs","humble","ros","main",".","urdf"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/","text":"Gazebo：三维物理仿真平台 ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台Gazebo，了解一下。 Gazebo仿真平台 介绍 Gazebo是ROS系统中最为常用的三维物理仿真平台，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。 安装 Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-* 运行 通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py 注意：为保证模型顺利加载，请将离线模型文件库下载并放置到~/.gazebo/models路径下， https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。 XACRO机器人模型优化 我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本——XACRO文件。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro 常量定义 一些常用的XACRO文件语法，大家了解下。 标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。 数学计算 如果需要做数学计算，同样是在$加大括号中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 注意：所有数学运算都会转换成浮点数进行，以保证运算精度 宏定义 机器人的轮子我们也做成宏定义，定义方式是通过这个 标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。 文件包含 宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。 机器人仿真模型配置 完善物理参数 第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。 添加Gazebo标签 第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。 配置传动装置 第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。 添加控制器插件 第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。 构建仿真环境 接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ]) 机器人运动仿真 万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard 注意：虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。 Ignition：下一代Gazebo 随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为Ignition，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/ 附录：机器人完整模型 learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["m","+","state","库","迭代","基本","启动","这里","filename","官方","某些","trans","尽量","加大","一定","robot","set","相识","org","加入","代码","及","t","要","第三","系统","颜色","package","base","update","得到","俱备","reference","编程","必要","互相","version","第二","它","设计","下载","joints","iyz","1.0","应用","不多","移动","先","gray","command","origin","化","是不是","引擎","spawn","每","be","上","好","顺利","以上","进步","bridge","and","reflect","通过","have","升级","0.4","惯性","等","不是","一步","make","一代","冗余","见证","很","二步","continuous","color"," ","interface","接下来","变量","-","模拟","运动","index","get","区分","键盘","参数设置","4","里边","plugin","传感器",")","相对","尝试","entity","}","？","run","可","directory","可以","一起","控制","保证","记得","完善","放到","测试","整个","important","真器","实现","0.18","课程","仿真","/","vgpu10","描述","控制器","从","为","多","是","数值","where","总体","传动装置","再","渲染","hardware","格式","完整","不断","公式","cylinder","transmission","因为","命令","浮点","找","修改","小车","方法","com","摩擦力","size","xyz","0.19","叫","此时","附录","小海龟","back","环境","models","方便","怎么办","wheel","精度","izz","our","表面","奇迹","mass","the","上来","world","机器","了解","计算","跑","一个","创建","切分","理解","5","、","urdf","标签","load","优化","安装","最为","图形","list","结果","限飞","https","turngravityoff","重复使用","xml","添加","github","~","you","过程","。","再用","一句","下来","3","c","传递数据","name","share","输入","呢","实物","join","—","pythonlaunchdescriptionsource","一样","inertia","0.05","drive","几个","0.2","可编程","力学","类似","def","轮子","一些","0.20","到","http","流程","me","0.75","仿真器","运行","velocityjointinterface","四步","就是","验证","系数","includelaunchdescription","摩擦","include","数学","得","ament","radius","海龟","'","放置","原本","考虑","数据","友好","不仅","h","动机","请","两个","z","场景","主要","支持","所以","prefix","20","语法","火星车","www","sources","0.16","试一下","property","没有","加速","想不起","弹性系数","file","spawner","实验","帮助","做","确保","和","mechanicalreduction","第三步","点数","12","by","single","认识","不会","provided","{","--","odometry","时刻","转换成","没","部署","更","link","机器人","另外","定义","cmd","!","<","apt","丰富","为止","不","平台","enabled","b","child","”","针对","比","left","ixy","比如","这个","neighborhood","嵌套","motor","val","虚拟","?","不能","万事俱备","包含","want","数学计算","这些","效果","这句","os","万事","传感","运算","尺寸",":","除法","速度","可编","中","export","必备","spwan","“","装上","给","items","0.95","use","还","parent","executable","高质","return","问题","colors","交给","简单","wiki","diff","同样","gazebo","in","pose","当然","inertial","无人机","this","rate","我们","xmlns","generate","only","controller","为了","不同","语言","还要","import","主角","换成","3.1415926","将","black","#","版本","material","甚至","的","高质量","网站","时候","0.06","传递","名字","humble","配置","插件","动力","ignition","3.14159","名为","根本","launch","注意","2","关闭","install","---","如果","调用","所有","之前","path","publisher","传动","y","弹性",".","learning","right","max","*","1","更为","么","r","used","c语言","第二句","geometry","publish","box","似曾","接口","]","也","joint","电机","想不起来","rpy","ign","front","同时","一下","true","直接","ros2","质量","值为","属性","into","topic","信息","宏","在","source","这","torque","摄像","节点","odom","分配","第一","很多","流畅","办法","当","pkg","较大","ixx","技术","下","node","某","时","建模","模型","无人","30","那","你","试试","复杂","iyy","false","find","关节","重复","浮点数","collision","用来","teleop","keyboard","参考","screen","转换","output","用","感器","手边","bashrc","sphere","括号","matter","路径","大家","这样","一行","twist","acceleration","怎么","py","pi","from","可能","arguments","二句","常量","个","周边环境","就","第一步","命名","rgbd","0.025","camera","ignitionrobotics","so","change","来","\"","提供","有","官方网站","yaw","算法","type",",","改成","[","demos","离线","文件","常用","0.015","人机","差不多","语句","第四","sure","条件","matrix","包","进行","接下","actions","续航","macro","=","own","设置","已经","像","未来","底盘","碰撞","launchdescription","有点像","sim","加载","让","并","diameter","关系","for","小海","周边","三维","visual","硬件","axis","文件格式","length","第四步","每个","xacro","函数","三步","如何","功能","sudo","摄像头","0","0.0","新一代","结束","ros","对","worlds","认识一下","完成","似曾相识","frame","，","description","构建","变化","火星","differential","介绍","packages","to","mbot","于是","if","使用","libgazebo","频繁","fixed","起来","装置","them","yellow","虚拟机","rgba","名称","value","footprint","separation","osrf","出现","force","_","两句","需要","x","time","加法","svga","刚好","really","correctly","把","不过","参数",">","位置","这种","做成","去","有点","以","caster","doesn","params","移动机器人","模块","新","啦","all","tf","很长","相关","vel","该","hardwareinterface","导致","物理","actuator","0.001","官方网","python","动力学","we","第二步","角度","下一代","写","simpletransmission","硬件加速","$","a","会","用到","echo","度","ixz","defining","blue","差速","开发","镜像","不妨","随着","第一句","都","然后","了","：","像头","方式","is","("],"title":"**Gazebo：三维物理仿真平台**","title_tokens":["*","物理","平台","仿真","：","gazebo","三维"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo","text":"ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台Gazebo，了解一下。","text_tokens":["是","没","呢","机器人","实物","一下","三维","机器","了解","物理","平台","如果","问题","gazebo","？","手边","当然","没有","ros","我们","开发","怎么","，","主角","仿真","。","怎么办"],"title":"Gazebo：三维物理仿真平台","title_tokens":["物理","平台","仿真","：","gazebo","三维"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_1","text":"","text_tokens":[],"title":"Gazebo仿真平台","title_tokens":["平台","gazebo","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_1","text":"Gazebo是ROS系统中最为常用的三维物理仿真平台，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。","text_tokens":["提供","表面","上来","算法","机器","还","高质","一个","加入","及","、","gazebo","要","优化","最为","常用","图形","限飞","系统","人机","差不多","无人机","我们","续航","。","的","设计","高质量","应用","实物","不多","先","周边","动力","三维","力学","引擎","类似","弹性","到","ros","等","运行","，","火星","验证","系数","摩擦"," ","不仅","使用","模拟","频繁","质量","场景","属性","支持","所以","在","火星车","可以","没有","测试","弹性系数","办法","实验","帮助","做","实现","和","仿真","为","无人","多","那","是","部署","更","机器人","再","渲染","导致","物理","平台","动力学","用","摩擦力","比如","此时","开发","这样","不妨","可能","都","环境","了","周边环境","就","中"],"title":"介绍","title_tokens":["介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_2","text":"Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-*","text_tokens":["的","-","使用","装上","给","呢","humble","先","一下","相关","直接","起来","完整","apt","install","跑","命令","一个","简单","gazebo","？","如何","功能","*","安装","sudo","可以","$","大家","系统","通过","ros","我们","这样","认识一下","不妨","包","为了","，","都","确保","了","把","和","。","：","互相","中","它"," ","已经","认识"],"title":"安装","title_tokens":["安装"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_3","text":"通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py 注意：为保证模型顺利加载，请将离线模型文件库下载并放置到~/.gazebo/models路径下， https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。","text_tokens":["库","启动","机器","还","离线","文件","gazebo","https","我们","github","~","还要","接下","将","。","下来","它","设计","的","下载","加载","并","移动","launch","注意","是不是","之前",".","到","顺利","么","通过","ros","不是","，"," ","接下来","放置","运动","动机","请","ros2","在","尝试","？","osrf","_","可以","一起","控制","保证","记得","放到","课程","把","仿真","/","下","为","认识","模型","移动机器人","试试","啦","机器人","该","命令","com","$","路径","大家","这句","py","了","环境",":","就","：","models","中"],"title":"运行","title_tokens":["运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#xacro","text":"我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本——XACRO文件。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro","text_tokens":["有","给","这里","机器","计算","还","一个","创建","切分","加入","代码","文件","同样","gazebo","urdf","、","要","优化","安装","语句","重复使用","条件","我们","包","为了","不同","接下","过程","编程","。","必要","再用","版本","下来","甚至","像","底盘","设计","的","传递数据","让","时候","传递","移动","humble","先","—","一样","可编程","化","install","文件格式","如果","调用","轮子","之前","好","一些","每个","xacro","函数","功能","摄像头","sudo","更为","通过","升级","对","ros","，","介绍","接口","也"," ","接下来","放置","变量","数据","友好","使用","-","动机","一下","直接","4","宏","在","传感器","可","需要","可以","摄像","放到","没有","做","实现","把","描述","建模","模型","移动机器人","多","是","模块","没","你","复杂","更","总体","link","机器人","定义","很长","格式","丰富","apt","重复","命令","b","小车","方法","写","感器","比如","$","a","会","此时","叫","大家","不能","包含","这句","传感","可能","都","然后","尺寸","了","常量","个","就","：","像头","可编","中"],"title":"XACRO机器人模型优化","title_tokens":["模型","优化","机器","机器人","xacro"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_4","text":"一些常用的XACRO文件语法，大家了解下。 标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。","text_tokens":["“","的","m","原本","移动机器人","模型","数据","使用","时候","移动","动机","定义","机器人","3.14159","名为","加大","质量","不","了解","值为","里边","用来","机器","在","调用","轮子","一个","一些","好","”","修改","文件","针对","、","标签","xacro","urdf","语法","安装","比如","_","括号","常用","可以","$","需要","也","找","大家","通过","我们","这样","这些","一行","pi","，","很","变化","尺寸","都","了","把","常量","。","就","位置","中","下","方便"," ","未来","底盘","不会"],"title":"常量定义","title_tokens":["定义","常量"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_5","text":"如果需要做数学计算，同样是在$加大括号中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 注意：所有数学运算都会转换成浮点数进行，以保证运算精度","text_tokens":["来","有","尽量","加大","机器","计算","改成","一个","加入","同样","结果","我们","得到","进行","换成","。","未来","的","关系","时候","移动","根本","注意","如果","所有","通过","，","数学"," ","想不起来","数据","两个","动机","直接","起来","在","相对","这","需要","可以","加法","保证","很多","想不起","做","和","位置","点数","某","以","模型","移动机器人","是","数值","转换成","机器人","公式","浮点数","浮点","修改","转换","写","比如","这个","括号","$","会","数学计算","怎么","运算","可能","都","了","常量","就","：","除法","中","精度"],"title":"数学计算","title_tokens":["计算","数学","数学计算"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_6","text":"机器人的轮子我们也做成宏定义，定义方式是通过这个 标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。","text_tokens":["的","模型","来","是","-","使用","时候","关系","输入","名字","机器人","这里","定义","同时","设置","link","关节","一样","区分","两个","参数设置","几个"," ","机器","里边","还","宏","在","b","轮子","调用","一些","好","一个","名称","、","这","标签","函数","要","出现","1","这个","比如","需要","两句","可以","用到","a","会","通过","记得","刚好","包含","我们","这样","镜像","当","，","了","把","和","参数","。","就","位置","方式","中","描述","也","做成","c","像","joint"],"title":"宏定义","title_tokens":["定义","宏"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_7","text":"宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。","text_tokens":["的","模型","必备","是","于是","使用","模块","机器人","另外","定义","再","这里","某些","去","为止"," ","机器","相识","里边","是不是","还","宏","调用","一个","一些","加入","文件","函数","到","优化","嵌套","可以","流程","包含","对","没有","结束","我们","不是","c语言","似曾相识","，","语言","很","接下","做","然后","了","把","和","仿真","。","参数","这种","include","似曾","中","接下来","下来","得","也","做成","像","底盘"],"title":"文件包含","title_tokens":["文件","包含"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_8","text":"","text_tokens":[],"title":"机器人仿真模型配置","title_tokens":["模型","机器","仿真","机器人","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_9","text":"第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。","text_tokens":["的","是","有","link","一定","属性","物理","平台","每","因为","一个","gazebo","需要","第一","惯性","一步","，","都","确保","和","第一步","参数","仿真","必要","。","碰撞"],"title":"完善物理参数","title_tokens":["完善","物理","参数"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_2","text":"第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。","text_tokens":["的","是","link","配置","渲染","主要","所以","每","因为","在","一个","第二步","gazebo","标签","urdf","可以","系统","颜色","一步","添加","这样","冗余","为了","不同","，","二步","做","和","。","中","第二","得","为"],"title":"添加Gazebo标签","title_tokens":["gazebo","添加","标签"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_10","text":"第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。","text_tokens":["的","是","运动","传动装置","给","配置","装置","一个","理解","传动","要","三步","第三","可以","，","电机","了","仿真","。","第三步","为","joint"],"title":"配置传动装置","title_tokens":["配置","装置","传动装置","传动"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_11","text":"第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。","text_tokens":["的","来","那","是","插件","两个","在","一个","交给","小车","角度","第四步","gazebo","要","可以","分配","控制","第四","差速","这样","添加","完成","不同","，","了","四步","就","。","速度","下","控制器","电机"],"title":"添加控制器插件","title_tokens":["控制","插件","添加","控制器"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_12","text":"接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ])","text_tokens":["change","our","state","提供","items","yaw","the","world","use","set","robot",",","executable","[","return","一个","t","gazebo","urdf","pose","load","package","sure","generate","only","import","you","接下","actions","。","#","=","own","下来","launchdescription","的","sim","加载","name","share","join","pythonlaunchdescriptionsource","launch","spawn","---","be","def","path","publisher","y","learning","到",".","如何","功能","0.0","have","ros","me","worlds","make","，","description","includelaunchdescription","to","packages","include","mbot","]"," ","ament","接下来","'","考虑","if","-","index","get","true","z","them","into","topic",")","entity","}","run","force","_","directory","需要","x","sources","time","节点","really","file","correctly","spawner","pkg","把","/","node","by","single","{","provided","模型","doesn","where","all","!","<","enabled","python","screen","we","output","neighborhood","matter","用到","val","a","want","os","py","from","arguments","了",":","就","中","(","spwan"],"title":"构建仿真环境","title_tokens":["环境","构建","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_13","text":"万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard 注意：虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。","text_tokens":["\"","奇迹","基本","启动","机器","gazebo","urdf","load","我们","俱备","~","接下","过程","。","=","一句","第二","下来","有点像","已经","的","小海","硬件","launch","注意","关闭","learning",".","以上","0","流程","运行","见证","，","第二句","就是"," ","海龟","接下来","键盘","ros2","into","虚拟机","run","_","两句","需要","节点","控制","第一","svga","很多","加速","整个","不过","和","仿真",">","vgpu10","/","有点","时","时刻","复杂","机器人","teleop","keyboard","命令","比","bashrc","硬件加速","$","虚拟","此时","echo","万事俱备","twist","万事","py","小海龟","第一句","二句","环境","了","：","中","export"],"title":"机器人运动仿真","title_tokens":["仿真","机器人","运动","机器"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#ignitiongazebo","text":"随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为Ignition，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/","text_tokens":["的","来","多","-","网站","迭代","新","有","更","官方网站","ign","humble","渲染","一下","ignition","官方","ros2","apt","launch","不断"," ","平台","install","信息","官方网","在","参考","demos","org","上","gazebo",".","sudo","进步","也","_","bridge","可以","$","www","试一下","新一代","度","大家","流畅","ros","一代","效果","我们","仿真器","随着","不妨","py","，","真器","较大","都","变化","和",":","仿真","。","/","技术","版本","命名","rgbd","从","为","camera","ignitionrobotics"],"title":"Ignition：下一代Gazebo","title_tokens":["：","ignition","一代","gazebo","下一代"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_14","text":"learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["m","izz","\"","+","mass","the","filename","0.95","trans","robot","type","parent","org","colors","diff","wiki","5","gazebo","urdf","in","list","inertial","0.015","turngravityoff","base","xml","this","xmlns","matrix","controller","update","rate","reference","so","3.1415926","macro","black","=","version","material","3","joints","name","diameter","iyz","1.0","0.06","for","gray","command","inertia","visual","origin","0.05","drive","0.2","2","axis","length","0.20","y","learning",".","xacro","http","right","max","*","1","0","and","r","reflect","used","0.4","ros","0.75","frame","geometry","continuous","velocityjointinterface","publish","box","differential","to","mbot","include","color"," ","interface","radius","joint","wheel","-","h","libgazebo","rpy","front","fixed","true","z","yellow","topic","rgba","plugin","source",")","prefix","20","value","}","footprint","separation","_","www","x","0.16","torque","odom","property","important","0.18","ixx","mechanicalreduction",">","/","12","caster","params","{","--","30","odometry","iyy","false","link","find","cmd","!","hardware","tf","vel","hardwareinterface","<","cylinder","collision","transmission","actuator","0.001","child","simpletransmission","left","sphere","ixy","size","xyz","motor","$","0.19","ixz","?","defining","blue","acceleration","pi","back",":","is","(","0.025"],"title":"附录：机器人完整模型","title_tokens":["完整","模型","机器","：","机器人","附录"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/","text":"Rviz：三维可视化显示平台 大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾——Rviz，一款三维可视化显示的神器。 Rviz三维可视化平台 机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。 Rviz介绍 一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。 运行方法 $ ros2 run rviz2 rviz2 彩色相机仿真与可视化 摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。 仿真插件配置 关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 主要配置项如下： 标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 标签：加载摄像头仿真插件 运行仿真环境 模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py 图像数据可视化 $ ros2 run rviz2 rviz2 三维相机仿真与可视化 二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。 仿真插件配置 运行仿真环境 $ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py 点云数据可视化 $ ros2 run rviz2 rviz2 激光雷达仿真与可视化 除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。 仿真插件配置 运行仿真环境 $ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py 点云数据可视化 $ ros2 run rviz2 rviz2 Rviz vs Gazebo 好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下，Gazebo是仿真平台，核心功能是创造数据，我们没有机器人或者传感器，它可以帮我们做一个虚拟的，Rviz是可视化平台，核心功能是显示数据，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。 参考链接 https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":["一种","启动","这里","拭目以待","官方","某些","看","雷达","代码","颜色","想不到","intel","规划","它","开放","设计","移动","是不是","上","好","内部","分辨率","可视化","人","问","能够","通过","等","不是","stereolabs","先来","提高","除了","关于"," ","拭目","对照","运动","docs","外部","了然","传感器","？","一目了然","run","可以","才","大大","可贵","坐标","仿真","/","出厂","描述","非常","从","软件","多","是","可视","再","渲染","肯定","qt","辨率","格式","方法","一位","com","手上","二维","外部环境","全都","分钱","环境","方便","帮","很难","基于","长","机器","计算","了解","一个","理解","本","、","标签","价格比","load","最为","图形","255","https","添加","github","打造","过程","拍摄","。","laser","一句","usb","点云","name","一堆","按照","呢","并且","—","出来","自己","包括","如下","几个","知道","类似","装","项","一些","到","混淆","难为","对应","强调","流程","运行","就是","价格","显示","巧妇难为无米之炊","数据","动机","两个","场景","主要","数字","所以","获取","满意","创造","www","内容","没有","彩色","臂","做","和","真实","范畴","玩起","自主","更","以待","机器人","话题","各种","不","平台","会用","世界","嘉宾","rviz","链接","比如","这个","导航","虚拟","话","不能","kinect","坐标系","这些","效果","重量级","传感","效率",":","哪些","中","过瘾","给","讲","只要","岂","体感","问题","gazebo","只有","当然","我们","相机","各种各样","但","的","不用","时候","插件","配置","launch","样","与","如果","的话","案例",".","learning","么","过","范围","畅想","不想","自带","也","激光雷达","什么样","不到","快速","说明","ros2","一脸","into","各样","编码","信息","在","这","消息","开放式","上位","神器","摄像","很多","能","希望","类型","懵","下","巧妇","模型","你","试试","驾驶","还是","机械","用来","想","参考","用","感器","路径","大家","这样","py","就","命名","一款","rgbd","有没有","so","camera","来","提供","叫做","有","realsense","众多","或者","type","常用","自由","具体","不少","工具","设置","已经","加载","汽车","还有","周边","三维","机","量级","层面","激光","如何","功能","摄像头","0","ros","对","，","只是","介绍","mbot","一分","分析","使用","libgazebo","眼中","rviz2","起来","熟悉","重量","看到","等等","_","需要","玩起来","一分钱","搞定","框架","把","不过","参数","这幅","位置","这种","涉及","去","分辨","啥","移动机器人","新","大大提高","啦","什么","试一试","自动","vs","图像","常备","核心","$","会","图形化","开发","成功","都","一目","发布","了","噪音","：","像头","相信"],"title":"**Rviz：三维可视化显示平台**","title_tokens":["rviz","*","可视","可视化","平台","：","显示","三维"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz","text":"大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾——Rviz，一款三维可视化显示的神器。","text_tokens":["什么样","的","是","可视","眼中","机器人","呢","—","什么","讲","三维","机器","量级","重量","问题","看到","一个","图像","世界","这","到","？","本","一位","嘉宾","如何","rviz","摄像头","神器","可视化","摄像","大家","能够","过","没有","ros","我们","重量级","，","了","拍摄","畅想","就","像头","介绍","。","中","范畴","一款","涉及"," ","显示","有没有"],"title":"Rviz：三维可视化显示平台","title_tokens":["rviz","可视","可视化","平台","：","显示","三维"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_1","text":"机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。","text_tokens":["给","这里","看","很难","众多","长","岂","雷达","机器","计算","理解","、","当然","255","颜色","规划","我们","相机","过程","。","各种各样","但","的","设计","还有","一堆","移动","出来","自己","周边","三维","样","知道","如果","类似","内部","到","层面","激光","功能","摄像头","0","可视化","么","人","问","通过","，","只是","就是","提高"," ","分析","激光雷达","数据","快速","运动","动机","场景","一脸","各样","数字","信息","了然","所以","在","传感器","看到","？","等等","一目了然","需要","可以","内容","摄像","才","很多","希望","大大","搞定","臂","懵","做","把","和","坐标","这幅","位置","描述","从","去","自主","模型","软件","啥","移动机器人","是","可视","你","机器人","再","大大提高","渲染","肯定","什么","各种","不","机械","用来","图像","感器","rviz","比如","导航","路径","坐标系","开发","效果","这些","这样","全都","传感","都","一目","环境","效率","哪些","就","像头","中","一款"],"title":"Rviz三维可视化平台","title_tokens":["rviz","可视","可视化","平台","三维"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_2","text":"一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。","text_tokens":["的","多","数据","可视","不到","是","说明","有","新","按照","更","机器人","插件","自己","官方","某些","基于","qt","话题","只要","不","机器","机","或者","平台","想","如果","在","看到","一个","项","满意","消息","只有","上位","rviz","功能","开放式","也","这个","对应","常用","可以","可视化","核心","图形","话","图形化","很多","想不到","没有","ros","对","我们","效果","添加","开发","框架","，","做","打造","了","发布","就","。","工具","出厂","一句","自带","中","它"," ","显示","方便","开放"],"title":"Rviz介绍","title_tokens":["rviz","介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_1","text":"$ ros2 run rviz2 rviz2","text_tokens":["run","$","rviz2"," ","ros2"],"title":"运行方法","title_tokens":["方法","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_2","text":"摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。","text_tokens":["的","是","一种","给","机器人","肯定","机器","装","传感器","上","感器","摄像头","最为","常用","摄像","我们","传感","先来","，","了","。","像头"],"title":"彩色相机仿真与可视化","title_tokens":["相机","与","可视","可视化","仿真","彩色"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_3","text":"关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 主要配置项如下： 标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 标签：加载摄像头仿真插件","text_tokens":["的","模型","分辨","name","使用","提供","叫做","对照","libgazebo","加载","给","插件","配置","辨率","格式","如下","主要","type","编码","传感器","项","代码","方法","图像","gazebo",".","标签","分辨率","感器","摄像头","_","这个","需要","对应","自由","摄像","大家","ros","范围","我们","类型","等","传感","，","都","噪音","仿真","。","：","像头","介绍","参数","描述","命名","关于"," ","设置","so","camera"],"title":"仿真插件配置","title_tokens":["插件","仿真","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_4","text":"模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py","text_tokens":["模型","以待","并且","配置","啦","拭目以待","出来","ros2","launch"," ","into","信息","在","看到","好","图像","learning","gazebo",".","rviz","load","摄像头","_","$","摄像","能","不能","我们","成功","py","，","把","仿真","。","像头","mbot","中","拭目","已经","camera"],"title":"运行仿真环境","title_tokens":["环境","仿真","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_5","text":"$ ros2 run rviz2 rviz2","text_tokens":["run","$","rviz2"," ","ros2"],"title":"图像数据可视化","title_tokens":["图像","可视化","可视","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_6","text":"二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。","text_tokens":["的","点云","不用","数据","试试","外部","三维","realsense","起来","玩起","不","或者","想","体感","传感器","获取","价格比","感器","摄像头","比如","也","玩起来","常用","可以","摄像","通过","一分","kinect","intel","二维","我们","外部环境","一分钱","分钱","传感","相机","，","不少","环境","可贵","不过","仿真","。","不想","像头","这种","价格","就","usb","过瘾"],"title":"三维相机仿真与可视化","title_tokens":["相机","与","可视","可视化","仿真","三维"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_7","text":"","text_tokens":[],"title":"仿真插件配置","title_tokens":["插件","仿真","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_8","text":"$ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py","text_tokens":["launch","load","py","_","into","gazebo","$","learning",".","mbot","rgbd"," ","ros2"],"title":"运行仿真环境","title_tokens":["环境","仿真","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_9","text":"$ ros2 run rviz2 rviz2","text_tokens":["run","$","rviz2"," ","ros2"],"title":"点云数据可视化","title_tokens":["可视","可视化","点云","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_10","text":"除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。","text_tokens":["的","移动机器人","来","是","汽车","移动","动机","机器人","三维","包括","试一试","驾驶","雷达","机器","自动","传感器","激光","感器","常备","摄像头","摄像","很多","我们","传感","相机","，","和","。","除了","像头","也","激光雷达"],"title":"激光雷达仿真与可视化","title_tokens":["激光","雷达","与","可视","可视化","仿真","激光雷达"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_11","text":"","text_tokens":[],"title":"仿真插件配置","title_tokens":["插件","仿真","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_12","text":"$ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py","text_tokens":["launch","load","py","_","into","gazebo","$","learning",".","laser","mbot"," ","ros2"],"title":"运行仿真环境","title_tokens":["环境","仿真","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_13","text":"$ ros2 run rviz2 rviz2","text_tokens":["run","$","rviz2"," ","ros2"],"title":"点云数据可视化","title_tokens":["可视","可视化","点云","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz-vs-gazebo","text":"好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下，Gazebo是仿真平台，核心功能是创造数据，我们没有机器人或者传感器，它可以帮我们做一个虚拟的，Rviz是可视化平台，核心功能是显示数据，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。","text_tokens":["来","帮","有","启动","这里","讲","了解","机器","或者","一个","gazebo","常用","我们","具体","。","它","已经","的","时候","自己","几个","是不是","如果","的话","好","案例","一些","到","混淆","功能","难为","可视化","强调","通过","流程","对","不是","，"," ","也","显示","巧妇难为无米之炊","数据","不到","使用","两个","熟悉","信息","所以","在","传感器","这","创造","可以","很多","没有","做","和","不过","仿真","真实","下","非常","巧妇","软件","是","可视","啦","再","机器人","还是","平台","会用","方法","用","rviz","感器","手上","核心","虚拟","会","大家","传感","了","环境","就","相信"],"title":"Rviz vs Gazebo","title_tokens":["rviz"," ","gazebo","vs"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_14","text":"https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":["rviz","stereolabs","www",":","ros2","https","/","docs","rviz2"," ",".","github","com"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/","text":"RQT：模块化可视化工具 ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具——rqt。 rqt介绍 正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，接下来，大家就可以跟随我的思路，我们一起来试一试。 日志显示 图像显示 接口控制 数据曲线 数据包管理 节点可视化 参考资料 https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":["来","提供","一种","启动","基于","org","一个","简单","正如","强大","安装","https","我们","进行","具体","接下","。","工具","about","concepts","一句","下来","它","已经","的","加载","console","humble","—","一样","思路","前","操作","install","类似","的话","一些",".","每个","功能","摄像头","sudo","可视化","麻烦","通过","日志","模块化","ros","，","很","介绍","接口","也"," ","显示","接下来","参考资料","using","-","数据","使用","难免","docs","起来","场景","里边","rqt","只","觉得","在","小","数据包","难免会","需要","可以","摄像","节点","曲线","资料","控制","很多","跟随","en","实现","不过","和","/","下","有点","指令","模块","可视","是","更","另外","试一试","qt","apt","管理","tutorials","而","命令","参考","图像","rviz","这个","比如","我","用到","$","会","此时","大家","一","开发","这样","有些","可能","都","然后","了",":","就","：","像头","中","命名","html","界面"],"title":"**RQT：模块化可视化工具**","title_tokens":["*","模块","rqt","可视","可视化","：","工具","模块化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt","text":"ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具——rqt。","text_tokens":["的","模块","可视","使用","提供","一种","更","难免","另外","—","有点","场景","rqt","操作","只","觉得","的话","一个","一些","简单","图像","难免会","强大","rviz","功能","摄像头","比如","需要","可视化","用到","摄像","此时","会","麻烦","模块化","ros","我们","有些","，","很","可能","了","不过","。","就","工具","像头","中","下"," ","显示","已经"],"title":"RQT：模块化可视化工具","title_tokens":["模块","rqt","可视","可视化","：","工具","模块化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt_1","text":"正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，接下来，大家就可以跟随我的思路，我们一起来试一试。","text_tokens":["的","来","是","可视","使用","-","加载","模块","启动","humble","一样","基于","试一试","qt","apt","起来"," ","思路","里边","rqt","而","前","install","类似","在","命令","小","一个","每个","正如","rviz","功能","安装","这个","sudo","需要","我","可以","可视化","$","通过","大家","很多","一","ros","开发","我们","这样","进行","具体","，","跟随","接下","都","然后","实现","了","下来","和","就","。","工具","一句","命名","它","也","指令","接下来","界面"],"title":"rqt介绍","title_tokens":["rqt","介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_1","text":"","text_tokens":[],"title":"日志显示","title_tokens":["日志","显示"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_2","text":"","text_tokens":[],"title":"图像显示","title_tokens":["图像","显示"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_3","text":"","text_tokens":[],"title":"接口控制","title_tokens":["控制","接口"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_4","text":"","text_tokens":[],"title":"数据曲线","title_tokens":["曲线","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_5","text":"","text_tokens":[],"title":"数据包管理","title_tokens":["管理","数据包","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_6","text":"","text_tokens":[],"title":"节点可视化","title_tokens":["可视","可视化","节点"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_7","text":"https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":["using","en","-","rqt","html","tutorials",":","console","https","org","/","docs","humble","ros","concepts","about"," ","."],"title":"参考资料","title_tokens":["参考","参考资料","资料"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/","text":"资源汇总 常用框架 自主导航 比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/ 自动驾驶 自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/ 路径规划 此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/ 机器人学 ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。 视频课程 斯坦福大学公开课 —— 机器人学 台大机器人学之运动学 Self-Driving Cars with ROS2 & Autoware 古月学院 常用链接 ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":["修炼","提供","一种","有","称为","基本","每一","导论","autoware","福大","古月","robots","算法","除此","商业化","斯坦福大学","机器","org","分拣","一个","大学","代码","wiki","、","gazebo","要","学习","著名","ubuntu","最为","html","常用","视觉","系统","https","情况","规划","我们","auto","工程","进行","社区","推荐","github","视频","autowareauto","中文","阅读","。","工具","版本","仔细","汇总","碰撞","开课","的","导航系统","理论","&","还有","应用","移动","humble","—","自己","选择","几个","2","with","《","之","如果","上","好",".","http","功能","对应","斯坦福","书籍","self","》","经典著作","检测","公开课","ros","对","等","居","工程师","，","感兴","至于","机器人学","著作","一本","得","基本功能","也"," ","具备","classic","gazebosim","兴趣","-","使用","快速","运动","documentation","index","动机","docs","ros2","资源","知识","gitlab","人学","在","商业","当今","仔细阅读","感知","这","实操","典型","被","navigation","感兴趣","www","可以","内容","即便","之外","控制","很多","公开","自身","理论知识","框架","此外","臂","en","实现","学院","课程","和","io","/","非常","内功","driving","自主","行业","移动机器人","多","是","模块","除此之外","更","机器人","台大","autowarefoundation","之一","相关","驾驶","完整","各种","丰富","不","机械","找到","自动","参考","cn","moveit","重在","链接","技能","com","热门","比如","基本功","这个","导航","结合","人手","会","路径","cars","大家","guyuehome","包含","开发","这些","运动学","都","了","本书",":","任何","就","：","roscon","中","经典","必备","这套","碰撞检测"],"title":"**资源汇总**","title_tokens":["*","汇总","资源"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_1","text":"","text_tokens":[],"title":"资源汇总","title_tokens":["汇总","资源"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_2","text":"","text_tokens":[],"title":"常用框架","title_tokens":["常用","框架"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_3","text":"比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/","text_tokens":["的","导航系统","移动机器人","使用","提供","快速","基本","应用","移动","动机","机器人","自己","相关","ros2","完整","各种","算法","不"," ","机器","如果","在","参考","org","上","好","代码",".","要","链接","功能","navigation","比如","基本功","这个","导航","可以","会","即便","内容","大家","系统","https","ros","我们","开发","框架","进行","，","都","实现","了","和",":","任何","。","：","/","中","基本功能","也","具备","这套","自主"],"title":"自主导航","title_tokens":["导航","自主"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_4","text":"自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/","text_tokens":["的","行业","是","模块","一种","有","应用","机器人","autoware","—","autowarefoundation","之一","驾驶","丰富","几个"," ","商业化","机器","gitlab","如果","自动","在","参考","org","一个","商业","当今","感知","、","这",".","链接","典型","功能","著名","热门","最为","这个","感兴趣","可以","www","大家","控制","系统","很多","https","包含","ros","对","规划","等","auto","框架","社区","，","感兴","autowareauto","实现","了","和",":","。","：","io","/","中","非常","也","兴趣"],"title":"自动驾驶","title_tokens":["驾驶","自动"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_5","text":"此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/","text_tokens":["的","多","是","使用","还有","更","运动","相关"," ","机械","找到","在","分拣","org","moveit","、","这",".","链接","功能","这个","可以","内容","视觉","大家","https","检测","ros","规划","等","框架","此外","臂","，","都",":","。","经典","中","/","非常","也","碰撞","碰撞检测"],"title":"路径规划","title_tokens":["规划","路径"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_6","text":"ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。","text_tokens":["的","理论","修炼","是","称为","除此之外","有","每一","机器人","导论","仔细","相关","选择","除此","机器","知识","人学","《","仔细阅读","学习","重在","实操","技能","被","比如","对应","结合","可以","人手","书籍","之外","大家","》","经典著作","情况","ros","自身","开发","这些","理论知识","工程","工程师","推荐","，","都","中文","本书","阅读","。","至于","工具","就","机器人学","经典","一本","得","内功","著作"," ","必备","版本"],"title":"机器人学","title_tokens":["机器人学","机器人","人学","机器"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_7","text":"斯坦福大学公开课 —— 机器人学 台大机器人学之运动学 Self-Driving Cars with ROS2 & Autoware 古月学院","text_tokens":["-","&","运动","机器人","台大","autoware","—","ros2","福大","古月","斯坦福大学","机器","with","driving","人学","之","大学","cars","斯坦福","self","公开","公开课","运动学","学院","机器人学"," ","开课"],"title":"视频课程","title_tokens":["视频","课程"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_8","text":"ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":["documentation","index","humble","docs","ros2","古月","robots","2","org","cn","wiki",".","gazebo","http","com","guyuehome","www","ubuntu","https","ros","居","github","en",":","roscon","gazebosim","：","/"," ","html","classic"],"title":"常用链接","title_tokens":["常用","链接"]}]}