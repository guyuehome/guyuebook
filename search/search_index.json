{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"引言 机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的 电气时代 。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的 数字时代 ，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发， 智能机器人时代 正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。 教程链接汇总 课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/90 博客泡圈： https://www.guyuehome.com/","text_tokens":["高","com","后","热点","出现","ros2","随着","四足","关注","视觉","更","—","github","七八十年","而言","控制","之后","驱动器","系统","重要","人工智能","完全","类型","三个","主角","agv","七八十","拉开序幕","机器人","丰富","_","有限","电机","这是","就是",":","不过","仿生","电气","class","这","汽车","前夜","2000","家庭","之一","2015","依然","id","由示","感知","www","90","按照","思考","爆发","拉开","劳动","https",".","gitee","教器","operating","执行","生产","十年","汇总","链接","guyuehome","伺服","计算","正式","八十","送餐","自动","system","八十年","bubble","环境"," ","时期","减速","技术","图文","太","动作","了","智能","工厂","circledetail","伺服电机","动力","应用","源码","于","的","序幕","提出","、","引言","年前","课程","井喷","设备","驱动","21","感器","更加","软件","对","计算机","问答","多","，","层面","状","必将","教程","机器","是","操控","此时","成为","检测","传感器","帮助","服务","tutorials","要求","发展","人类","自主","我们","狗","数字","大","。","驾驶","开发","逐渐","减速机","工业","工业生产","book","控制器","劳动力","算机","时代","/","操作系统","缺少","不断丰富","业生","七八","只能","俗称","主要","：","局部","最佳","释放","ai","呈","等","经历","但是","泡圈","人工","载体","最为","智能化","快速","博客","不断","并","过程","没有","命令","和","传感","也","robot","视频","操作","横跨","年"],"title":"引言","title_tokens":["引言"]},{"location":"#_1","text":"机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的 电气时代 。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的 数字时代 ，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发， 智能机器人时代 正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。","text_tokens":["高","后","热点","出现","随着","四足","关注","视觉","更","—","七八十年","而言","控制","之后","驱动器","系统","重要","人工智能","完全","类型","三个","主角","agv","七八十","拉开序幕","机器人","丰富","有限","电机","这是","就是","不过","仿生","电气","这","汽车","前夜","2000","家庭","之一","2015","依然","由示","感知","按照","思考","爆发","拉开","劳动","教器","operating","执行","生产","十年","伺服","计算","正式","八十","送餐","自动","system","八十年","环境"," ","时期","减速","技术","太","动作","了","智能","工厂","伺服电机","动力","应用","于","的","序幕","提出","、","课程","年前","井喷","设备","驱动","感器","更加","软件","对","计算机","多","，","层面","状","必将","机器","是","操控","此时","成为","检测","传感器","帮助","服务","要求","发展","人类","自主","我们","狗","数字","大","。","驾驶","开发","逐渐","减速机","工业","工业生产","控制器","劳动力","算机","时代","操作系统","缺少","不断丰富","业生","七八","只能","俗称","主要","局部","最佳","释放","ai","呈","等","经历","但是","人工","载体","最为","智能化","快速","不断","并","过程","没有","命令","和","传感","也","robot","操作","横跨","年"],"title":"引言","title_tokens":["引言"]},{"location":"#_2","text":"课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/90 博客泡圈： https://www.guyuehome.com/","text_tokens":["com","id","/","21","www","ros2","90","gitee",".","https","问答","教程","github","：","guyuehome","tutorials","泡圈","_","bubble"," ","博客","图文",":","class","book","circledetail","视频","源码","课程"],"title":"教程链接汇总","title_tokens":["教程","链接","汇总"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["武汉","com","累积","《","交流","均","集","面向未来","拥有","联系","出版","违反","追究其","赋能","创建","追究","万字","超过","高质量","机器人","被","有限","销售","对本","精锋","未来","将","至今","及","社区","上述","校企","高质","优质","抄录","课件","内容","限于","建立","www","公司","学",".","究其","任何","版权","书面","居","为","平台","授权","本","guyuehome","图书","知名","一体","小时","人才","企业"," ","华语","万人","声明","传播","通过","培养","法律责任","源码","复制","的","学习","课程","生态","、","致力","镜像","学习者","不","其它","修改","@","用户","）","，","使用","捆绑","机器","是","》","模式","交流学习","不得","1000","线上","进行","众多","包括","产品","。","地区","古月","与","开发","法律","所有","提供","构建","声明者","2011","人才培养","高校","合作","科技","实践","有限公司","责任","单位","有权","或","ai","等","请","畅销","brand","120","面向","上","（","+","作品","但","努力","许可","明者","质量","ros","和","微控","合法","依法","如需","视频","网站","个人","仅限","未经","创新","年","致力于"],"title":"关于我们","title_tokens":["关于","我们"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["com","累积","《","交流","集","面向未来","出版","赋能","创建","万字","超过","高质量","机器人","未来","至今","及","社区","校企","高质","优质","内容","建立","www",".","居","为","平台","guyuehome","图书","知名","一体","小时","人才","企业"," ","华语","万人","通过","培养","的","学习","课程","生态","、","致力","学习者","用户","）","，","机器","是","》","模式","交流学习","1000","线上","众多","。","地区","古月","与","开发","提供","构建","2011","人才培养","高校","合作","实践","ai","等","畅销","120","面向","（","+","努力","质量","ros","视频","创新","年","致力于"],"title":"学机器人，上古月居","title_tokens":["，","机器人","上","机器","居","学","古月"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["武汉","com","均","拥有","联系","违反","追究其","追究","被","有限","销售","对本","精锋","将","上述","抄录","课件","限于","公司",".","究其","任何","版权","书面","居","为","授权","本","guyuehome"," ","声明","传播","法律责任","源码","复制","的","镜像","课程","学习","、","不","其它","修改","@","用户","，","使用","捆绑","不得","进行","包括","产品","。","古月","与","法律","所有","声明者","科技","有限公司","责任","单位","有权","或","等","请","brand","作品","但","许可","明者","和","微控","合法","依法","如需","网站","视频","个人","仅限","未经"],"title":"版权声明","title_tokens":["版权","声明"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/","text":"ROS/ROS2是什么 智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。 ROS的诞生 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人—— PR2 ，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS的发展 ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称 ROSCon ，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。 ROS的特点 ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。 参考资料 关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["为什么","成熟","ros2","部分","百万","之王","要","类似","嘉宾","该","此后","领域","明智","推进","机制","无论是","—","几百","项目","2007","爆款","跟随","上去","风险投资","多年","两年","wiki","这是","巨人","全","一大笔钱","全球化","各种各样","几百万","步伐","重量","大学","工具","基本","工程","intel","电脑","水下","发表","一款","独立","加快","变为","由","25","阵地","为","国家","居","平台","却步","终于","来自","越来越","整合","精致","重量级","做出","150","普遍","250","几乎","甚至","一样","巨大","福大","google","而生","配合","简单","总体","技术","上图","广泛","近两年","不仅","智能","复用","大部","历经","情况","源码","学习","选择","陪","前","生态","pr2","一系","人形","感器","原本","不","对","肩膀","比如","正如","问答","访问","有没有","答案","五年","各项","是","掌握","最后","一切","做法","新鲜","开源","详细","帮助","特点","学术","年底","不乏","人类","线上","他们","投资","核心","kinect","逐渐","humble","这些","原型","一起","工业","绝大","元素","那","容易","世界","5","举办","/","光靠","肩负着","认识一下","整理","肩负","游戏","助推","手机","2010","版本","虽好","圈","两个","统计","数据","做","同一","：","做饭","笔记本","框架","大部分","有人","讨论","但是","使命","大会","望而却步","迭代","零部件","快速","一堂","快","研究","方法","以","从中","虽然","会","不断","却","过程","电路","越来","涉及","机械","第一","访问量","友好","操作","个人","看中","沉淀","同年","组成","掀起","这样","org","浪潮","适用","新增","40","c","新鲜事","专业","采购","随着","2014","体感","别人","出来","进入","全书","生态系统","同样","conference","answers","linux","来讲","论坛","多万","认识","不到","近几年","为了","场景","排名","被","利器","一些","风险","长远","index","将","很","起来","了解","社区","才","工程师","内容","推出","更为","许可证","一段","所有人","居高不下","浏览","向","已有","operating","回到","处理","一下","局限","自身","2","率","扩展","正式","体系","可以","system","自己"," ","万人","了","活跃度","通过","动力","作为","原因","于","长期","各种","动机","提出","时间轴","扫地","图","介于","稳定","诞生","增长","宽松","来看","不下","软件","几个","world","记录","熟悉","问题","而且","教程","远","结晶","大步","维基","还有","windows","一家","服务","知识","木头","同学","受限","b","肯定","官方","包","方向","万","为例","这里","玩耍","此","事情","案例","通信","度","功能","接下来","所有","开发工具","？","进化","性能","实验","臂","个","亚马逊","站","头发","模块","直接","挑战","提问","所以","版","加","每年","基于","单独","泡泡","代","成功","等","关键","如果","一步","条","当初","特性","全新","维基百科","实现","许可","叫做","说干就干","物体","ros","复杂","下载","这个","没有","毛巾","研发","正式版","完成","视频","款","后期","其他","各样","全人","资源","啦","收拾","实验室","斯坦福","基本上","什么","左右","得到","月","来到","参考资料","笔记","正在","想到","系统","github","系列","开始","支持","完全","暴露","时候","零","代表","身影","曲线","机器人","推荐","年轻","下来","普及","就是","棒","通常","回答","开发者","把","几年","万万","板块","早期","直到","汽车","时至今日","起点","创意","效率","革命","分钟","效果","注意","图中","限于","而","既然","这一波","向前","只想","野蛮","可为","地域","做到","同时","青年","一届","personal","百科","多媒体系统","这款","年轻人","第一个","限性","本","提取","数据库","增长速度","模块化","四项","差不多","参考","人才","其实","页面","采用","用于","起","看到","希望","人数","只","笔记本电脑","之上","繁荣","新","洗衣","之旅","从","轮子","应用","嵌入式","这位","的","针对","下","疫情","生态系","课程","轰动","频繁","每个","同理","缩短","然后","willow","初期","给出","多","没想到","使用","层面","只要","以叠","每","统统","你","聊天","速度","成为","加上","大大","多媒体","做成","强悍","xbox","程度","浏览量","托管","一大","发展","微软","集合","商业化","不同","一定","产品","迎来","大","。","引擎","一个","资金","目标","以上","无聊","迅猛","garage","软件系统","如何","齐聚一堂","干","全人类","局限性","”","跑","跨平台","时代","还","真的","操作系统","真正","人","又","团队","索引","主要","代码","活跃","提高","呢","一大步","移动","日常","万左右","神秘","不想","清晰","上","创始","趋势","给","最为","一系列","ubuntu","活动","并","推动","进步","解决","智慧","后续","因","和","传感","月底","robot","网站","价格便宜","横跨","100","不多","很快","说明","衣服","亚马","搜索","入门教程","总称","上市","到","更","促使","全球","而言","绝对","让","控制","等等","其次","重要","苹果","联合","大家","本身","围绕","上边","应用软件","第一次","剪头发","中","四大","“","大量","部件","至今","面纱","这","一群","绝大部分","之","更新","标准","游戏机","2015","很多","确定","20","资料","今日","无疑","次数","大有可为","受限于","公司","首先","张图","向前走","相关","打",".","据库","柔性","任何","discourse","没想","存储","80","高度","不是","可能","还是","嵌入","尽量","接下","这群","大笔","无论","造","成本","2012","分享","改为","一大笔","找到","不开","算是","离不开","不断更新","资本","百科全书","叠","之内","尝试","维基百","有","根据","神兵","、","商业","美妙","名称","简称","成果","具备","非常","用","用户","好","想法","移动机器人","投了","媒体","方式","turtlebot","，","重新","来","机器","对于","因为","深知","量级","此时","复合","查看","传感器","ros1","关于","现在","a","斯坦福大学","我们","进行","不要","packages","古月","开发","制造","台球","已经","一次","提供","价格","2011","能够","或者","底盘","更好","roscon","讲解","总而言之","在","充足","带领","就","得以","乐意","2017","发布","最佳","主阵地","其中","设计","经历","入门","家","当时","120","踏上","着","怀揣","智能化","熨烫","欢迎","高效","努力","都","15","；","所学","多项","低","2022","也","标志","便宜","有志","最高","一套","时间","年","外观"],"title":"ROS和ROS2是什么","title_tokens":["ros","是","和","ros2","什么"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#rosros2","text":"智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。","text_tokens":["掀起","认识一下","ros2","操作系统","挑战","嘉宾","对","什么","向","，","带领","机器","高度","是","又","正在","就","系统","量级","一下","呢","大家","重量级","认识","接下","神秘","巨大","机器人","场景","我们","？","方向","中","下来","智能化","而生"," ","全","。","开发","重量","ros","了","智能","一起","面纱","这","应用","操作","接下来","那","这位","的","进化","提出","时代"],"title":"ROS/ROS2是什么","title_tokens":["ros","/","是","ros2","什么"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人—— PR2 ，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。","text_tokens":["衣服","为什么","收拾","实验室","斯坦福","专业","要","类似","什么","出来","别人","同样","更","—","系统","2007","重要","系列","苹果","联合","大家","时候","不到","机器人","应用软件","第一次","剪头发","中","就是","一些","部件","很","一群","这","才","效率","标准","分钟","大学","很多","图中","既然","向前走","向前","打","所有人","柔性","一款","独立","处理","青年","personal","平台","这款","不是","可能","越来越","2","精致","做出","甚至","可以","自己","福大","而生"," ","用于","从中","分享","看到","技术","只","找到","了","智能","洗衣","叠","应用","之内","尝试","针对","的","有","、","陪","轰动","pr2","图","一系","诞生","不","非常","初期","用","软件","想法","给出","多","，","层面","问题","答案","有没有","机器","而且","对于","是","你","聊天","以叠","深知","此时","最后","因为","一切","大步","很快","成为","强悍","帮助","斯坦福大学","服务","木头","学术","一大","肯定","我们","为例","他们","。","一个","玩耍","资金","开发","无聊","事情","原型","一起","软件系统","如何","功能","干","台球","已经","那","所有","一次","容易","因","？","性能","5","实验","100","光靠","个","组成","或者","还","整理","头发","只要","真的","操作系统","手机","所以","在","圈","人","基于","团队","做","充足","同一","：","就","得以","代","呢","做饭","框架","等","有人","如果","设计","其中","但是","一大步","家","不想","当时","上","条","零部件","熨烫","一系列","高效","研究","实现","虽然","并","都","推动","却","说干就干","物体","复杂","电路","ros","低","越来","这个","没有","涉及","和","也","机械","毛巾","完成","robot","第一","有志","操作","个人","横跨","后期","一套","款","年","外观","这样"],"title":"ROS的诞生","title_tokens":["诞生","的","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_1","text":"ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称 ROSCon ，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。","text_tokens":["各样","适用","亚马","成熟","部分","斯坦福","ros2","百万","随着","类似","到","2014","体感","此后","进入","出来","该","更","conference","全球","—","笔记","想到","几百","系统","项目","2007","让","爆款","控制","开始","跟随","支持","重要","暴露","身影","风险投资","为了","机器人","年轻","被","中","两年","多年","这是","普及","一大笔钱","风险","开发者","把","几年","万万","了解","各种各样","早期","几百万","步伐","绝大部分","这","直到","起点","大学","游戏机","2015","确定","注意","推出","intel","限于","受限于","而","电脑","公司","只想","野蛮","居高不下","一款","加快","没想","operating","变为","回到","一届","为","却步","年轻人","终于","限性","来自","局限","越来越","第一个","提取","本","正式","一样","这群","system","可以","自己","福大","大笔","采用","成本"," ","起","2012","分享","改为","一大笔","笔记本电脑","近两年","之上","了","不仅","大部","从","历经","资本","应用","原因","于","长期","的","下","疫情","各种","提出","、","商业","前","时间轴","扫地","pr2","每个","介于","名称","简称","稳定","感器","原本","诞生","willow","增长","不下","软件","投了","world","多","，","使用","问题","turtlebot","每","机器","五年","是","没想到","教程","因为","成为","加上","传感器","大大","现在","开源","一家","斯坦福大学","xbox","服务","年底","不乏","受限","一大","微软","官方","我们","发展","线上","进行","迎来","投资","他们","。","大","一个","这里","开发","kinect","逐渐","humble","garage","原型","齐聚一堂","功能","局限性","已经","绝大","所有","举办","5","时代","价格","2011","能够","肩负着","亚马逊","肩负","游戏","助推","操作系统","底盘","直接","2010","所以","roscon","版","版本","真正","在","虽好","圈","讲解","每年","人","团队","做","单独","就","2017","发布","成功","笔记本","其中","大部分","关键","等","经历","但是","设计","熟悉","使命","大会","望而却步","创始","迭代","给","着","快速","一堂","当初","ubuntu","全新","会","推动","叫做","过程","ros","越来","这个","2022","也","传感","标志","便宜","第一","月底","robot","和","价格便宜","正式版","操作","看中","款","后期","个人","时间","年","同年","很快"],"title":"ROS的发展","title_tokens":["的","ros","发展"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_2","text":"ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["各样","全人","新增","c","部分","ros2","采购","领域","明智","到","总称","上市","别人","推进","生态系统","机制","更","促使","无论是","全球","系统","完全","来讲","零","上去","大家","代表","linux","本身","身影","支持","围绕","机器人","被","中","四大","下来","巨人","就是","通常","把","“","长远","将","全球化","至今","各种各样","社区","之","汽车","时至今日","这","创意","标准","工具","很多","今日","许可证","水下","公司","向前走","向前","做到","同时","已有","由","平台","多媒体系统","不是","自身","还是","嵌入","整合","率","尽量","越来越","模块化","普遍","体系","可以","人才","自己","无论","造"," ","用于","简单","分享","看到","技术","广泛","繁荣","新","了","智能","复用","从","轮子","应用","嵌入式","的","各种","动机","有","生态系","、","生态","商业","同理","人形","成果","缩短","具备","非常","宽松","软件","移动机器人","肩膀","比如","正如","媒体","对","统统","，","多","重新","远","来","机器","结晶","是","使用","复合","最后","成为","做法","ros1","多媒体","做成","开源","windows","一家","a","特点","b","发展","人类","我们","集合","商业化","产品","他们","。","不要","引擎","一个","此","目标","核心","开发","这里","这些","案例","制造","一起","工业","通信","功能","全人类","已经","”","开发工具","那","跨平台","跑","臂","组成","还","站","模块","直接","在","做","：","就","提高","移动","设计","家","一步","上","怀揣","给","着","智能化","快速","特性","以","实现","会","都","并","进步","许可","智慧","；","ros","多项","越来","这个","也","和","机械","友好","时间","沉淀","这样"],"title":"ROS的特点","title_tokens":["的","ros","特点"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_3","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。","text_tokens":["浪潮","说明","资源","40","新鲜事","部分","到","基本上","什么","左右","得到","月","全球","而言","answers","正在","绝对","等等","重要","论坛","大家","代表","多万","近几年","曲线","上边","机器人","排名","中","wiki","利器","这是","就是","棒","回答","开发者","index","几年","很","起来","社区","这","绝大部分","革命","20","很多","基本","无疑","更为","次数","大有可为","发表","张图","相关","这一波",".","据库","可为","地域","浏览","任何","discourse","存储","80","25","国家","百科","本","150","整合","数据库","增长速度","越来越","250","四项","差不多","可以","页面","其实","参考"," ","总体","万人","看到","上图","希望","人数","新","了","活跃度","大部","算是","情况","从","通过","动力","应用","源码","作为","的","各种","维基百","有","提出","、","根据","学习","神兵","选择","频繁","每个","增长","不","来看","非常","用户","访问","比如","问答","几个","方式","记录","，","问题","教程","使用","各项","速度","多","是","机器","每","你","查看","维基","成为","关于","新鲜","现在","程度","浏览量","发展","我们","包","万","不同","核心","。","这里","packages","一个","以上","大","开发","迅猛","这些","度","功能","已经","绝大","元素","？","助推","总而言之","在","两个","统计","加","数据","人","索引","：","乐意","就","活跃","发布","最佳","呢","等","日常","讨论","大部分","其中","如果","万左右","清晰","上","趋势","给","最为","快速","快","活动","维基百科","会","都","15","；","ros","下载","越来","也","和","研发","访问量","网站","最高","其他","不多","org"],"title":"ROS的社区","title_tokens":["的","ros","社区"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#_1","text":"关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["啦","部分","ros2","搜索","之王","要","入门教程","全书","来到","参考资料","—","github","其次","项目","重要","开始","大家","推荐","机器人","中","大量","将","板块","社区","这","绝大部分","更新","工程师","工具","效果","资料","工程","内容","首先","一段","阵地","居","百科","本","几乎","扩展","参考","可以","google"," ","配合","万人","分享","技术","找到","不开","之旅","大部","从","离不开","百科全书","作为","的","有","学习","课程","美妙","然后","好","几个","教程","，","问题","使用","机器","是","你","掌握","最后","成为","还有","关于","开源","详细","托管","知识","同学","我们","一定","这里","。","古月","一个","开发","一起","绝大","所有","提供","世界","还","提问","更好","在","泡泡","主要","代码","主阵地","大部分","入门","120","踏上","最为","欢迎","努力","方法","会","都","不断","解决","后续","所学","ros","这个","也","和","网站","视频","不断更新"],"title":"参考资料","title_tokens":["参考","参考资料","资料"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/","text":"ROS2对比ROS1 在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。 ROS1的局限性 首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。 全新的ROS2 ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。 ROS2 vs ROS1 系统架构 在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。 DDS通信 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。 核心概念 ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。 编码方式 再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。 命令行 最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随教程，你就会慢慢理解这些特性。","text_tokens":["为什么","ros2","部分","是否","对象","百万","要","类似","该","编译系统","run","致使","常","机制","编程","变革","课时","启动","不够","—","之后","几百","项目","跟随","why","精力","类型","主角","专注","架构","他","macos","没","有限","全","只不过","物","强","相比","ceo","完整性","打成","层","各种各样","几百万","明显","所示","历史","程序","保障","工具","python","集成","基本","不断涌现","工程","中间","完整","语言","批量","电脑","入侵","带来","一款","客户","独立","性","部头","怎样","为","平台","连接","越来越","常用","几乎","移植性","甚至","一样","黑客","巨大","之前","一边","企业","简单","总体","工作","分解","工作站","调用","广泛","稳定性","不仅","智能","复用","大部","100ms","接收","推倒","中间层","左侧","诟病","学习","选择","pr2","考虑","原本","不","除此","更加","对","比如","答案","尽力","是","很大","一一","最后","开源","实时性","学术","要求","么","是从","运行","驾驶","他们","核心","rosrun","与","这些","房子","大部头","条件","策略","行人","绝大","那","借助","推倒重来","/","二代","编码方式","一本","应该","手机","标准化","版本","运动学","两个","更换","数据","做","：","学术研究","新一代","如","可选","框架","走","大部分","重来","不再","走向","两者","但是","另外","使命","丢","通信协议","纠结","研究","方法","结合","rosbuild","会","虽然","不断","管理器","一团乱麻","对比","过程","库会","成","越来","命令","第一","c++","操作","这样","适配","里","发","省略","适用","高","也许","后","便于","第二个","随着","不能","一团乱","只有","同样","打交道","二个","良好","需求","当","linux","来讲","三个","以下","最","尤其","为了","实力","场景","小","catkin","角度","颠覆性","单兵","减少","揭秘","一些","风险","长远","运算","最早","项目管理","不过","将","另","细节","了解","原有","社区","轻松","小伙","听说","适合","以下几点","不好","动力学","一致","处理","底层","amr","一下","局限","行为","可选项","率","至关","到底","完","自动","可以","自己","总结","变得"," ","交付","搬","了","可靠性","通过","足够","信息","动力","毛坯","master","于","各种","国际标准","换成","放在","网络","发布者","稳定","诞生","来看","修改","用到","软件","dds","当然","熟悉","问题","教程","系统工程","慢慢","tcp","udp","各位","还有","windows","一家","导致","服务","体验","一页","肯定","解密","优化","这里","强壮","发成","控制器","通信","功能","更具","无法","意义","即可","所有","航天","？","性能","印象","以及","担心","装修","国际","直接","面对","挑战","接触","角色","所以","加入","突然","能","地方","过","基于","出错","保证","rostopic","成功","等","分布式","如果","请","部署","api","发送","面临","面向","一步","discovery","封装","通信接口","特性","但","至关重要","流程","全新","除此之外","实现","叫做","ros","复杂","没有","这个","研发","完成","款","阶段","编写","其他","移植","各样","延迟","资源","5g","更接","内存","出现","1ms","加密","啦","协作","能力","级别","多个","什么","建筑","开发成本","右侧","大致","批量生产","系统","提","开始","先","支持","分布","时候","共享内存","担忧","机器人","颠覆","去","选项","定义","内部","普及","就是","依赖","开发者","把","陆续","完善","指挥","微控制器","交道","汽车","ament","时","可读性","家庭","注意","接近","不难理解","基础","而","编译","变化","按照","学","迁移","周期","做到","同时","调试","举","还会","产品开发","生产","陌生","第一个","限性","理器","链接","本","它","方便","其实","走向市场","看看","用于","格局","布式","之上","伙伴","经验","配置","灵活","从","而已","应用","嵌入式","信号","天翻地覆","的","针对","下","课程","确实","topic","频繁","每个","驱动","middleware","复杂度","然后","交给","不爽","）","多","有且","使用","层面","只要","相对","每","切记","你","诸多","受制于","不太","理解","做成","联网","厂家","新版","会成","雷达","发展","初次","收","不同","一定","产品","大幅","大","。","幅度","一个","以上","目标","盖","消费市场","千差万别","满足","软件系统","rmw","如何","局限性","跨平台","干掉","时代","第二种","看","不难","vs","还","作战","符合","间层","操作系统","真正","指定","编程语言","只能","先进","毛坯房","主要","代码","实时","生活","提高","主","或","呢","总之","一种","写","较","难度","opensplice","上","给","最为","勿躁","表示","概念","并","干扰","解决","电脑系统","后续","对系统","和","名字","开发方式","继续","基本保障","总体而言","说明","一代","除了","接入","是因为","图像","通用","之初","共享","一旦","消费","到","之外","真实","多功能","可靠","大幅度","更","全球","而言","让","控制","重要","算力","自家","编译器","大家","可移植性","迈过","差异","现有","厂商","丰富","网络连接","编码","中","高昂","不会","大量","运动","安装","未来","比","再","最新","前方","从而","搭载","属性","这","绝大部分","消失","标准","只是","升级","python3","很多","依然","第二","力学","受制","建立","首先","安全","张图","rtos","公司","相关","任何","可移植","似乎","可能","不是","单兵作战","嵌入","过去","尽量","计算","解算","成功经验","分散","远比","第二代","进程","上手","无论","成本","环境","需要","简单明了","一行","话题","哪些","找到","存在","图片","听","具体","个体","wifi","下边","例子","有","定性","、","商业","设备","之间","名称","借鉴","简称","具备","非常","用","好","体现","一团","深入","过来","用户","方式","，","接口","重新","来","机器","对于","因为","翻地","最终","售价","自","ros1","由于","我们","通用性","全部","测试","想要","进行","方案","不要","翻新","开发","乱麻","软件开发","市场","安全性","可读","发现","某","彼此","几点","含义","整体","已经","命令行","这台","提供","小伙伴","内","能够","节点","面向对象","或者","历史使命","fastrtps","暂且","协议","更好","二种","不用","讲解","在","稍安","充足","带领","涌现","就","上升","保留","最佳","管理","发布","改","其中","得","设计","colcon","应用层","客户端","（","android","怀揣","切换","mcu","宕机","都","；","下要","有线","也","广泛应用","道坎","最大","产品化","经常","一套","时间","唯一"],"title":"ROS2对比ROS1","title_tokens":["对比","ros2","ros1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2ros1","text":"在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。","text_tokens":["第二","也许","二代","名称","ros2","变化","不","来看","能","在","多","，","使用","过","做","你","就","或","ros1","其中","到底","么","之前","上","第二代","我们","看看"," ","大","就是","。","一个","对比","ros","和","从","这","听说","的","有","？","学习"],"title":"ROS2对比ROS1","title_tokens":["对比","ros2","ros1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros1","text":"首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。","text_tokens":["资源","一代","为什么","出现","ros2","部分","是因为","能力","随着","级别","要","类似","什么","可靠","致使","不够","—","批量生产","让","系统","良好","why","算力","支持","类型","主角","担忧","为了","机器人","他","实力","网络连接","小","单兵","中","有限","内部","普及","高昂","就是","一些","风险","运算","最早","搭载","这","绝大部分","汽车","历史","适合","家庭","不断涌现","批量","首先","入侵","一款","独立","处理","似乎","生产","平台","连接","第一个","单兵作战","嵌入","计算","它","甚至","自动","黑客","可以","自己","走向市场","成本"," ","用于","工作","工作站","找到","了","具体","大部","从","可靠性","足够","应用","嵌入式","天翻地覆","的","各种","有","针对","课程","pr2","网络","设备","原本","具备","诞生","不","来看","用","更加","软件","比如","当然","问题","，","答案","机器","是","因为","翻地","最终","售价","ros1","由于","做成","服务","学术","发展","我们","产品","运行","驾驶","。","一个","目标","开发","市场","条件","通信","已经","绝大","这台","那","航天","？","或者","作战","不用","在","只能","充足","先进","数据","地方","涌现","：","就","学术研究","实时","新一代","保证","呢","框架","大部分","设计","走向","但是","上","丢","研究","会","都","虽然","并","干扰","不断","；","ros","复杂","没有","有线","和","也","第一","完成","款","时间","这样"],"title":"ROS1的局限性","title_tokens":["局限性","限性","局限","ros1","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2","text":"ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。","text_tokens":["ros2","要","类似","编译系统","机制","变革","课时","项目","架构","macos","全","强","相比","完整性","打成","各种各样","明显","历史","保障","工具","python","基本","工程","完整","语言","电脑","入侵","一款","独立","性","怎样","为","平台","连接","越来越","甚至","黑客","巨大","简单","工作","分解","稳定性","不仅","智能","100ms","推倒","选择","考虑","原本","不","更加","对","比如","尽力","是","很大","实时性","要求","运行","驾驶","他们","与","这些","房子","策略","行人","那","借助","推倒重来","手机","标准化","运动学","两个","数据","：","框架","重来","不再","走向","但是","使命","纠结","方法","结合","rosbuild","会","虽然","管理器","越来","第一","c++","操作","这样","后","不能","需求","linux","以下","尤其","为了","场景","catkin","颠覆性","风险","长远","项目管理","细节","原有","适合","以下几点","不好","动力学","amr","一下","行为","自动","可以","自己"," ","了","动力","毛坯","master","于","各种","网络","稳定","来看","修改","软件","dds","问题","系统工程","windows","导致","体验","肯定","解密","优化","强壮","控制器","通信","更具","无法","所有","？","性能","以及","装修","直接","面对","挑战","角色","所以","能","出错","成功","等","分布式","部署","api","发送","面临","特性","但","流程","全新","实现","叫做","ros","复杂","没有","这个","研发","完成","阶段","编写","移植","各样","出现","1ms","加密","协作","建筑","系统","提","分布","时候","机器人","颠覆","去","就是","开发者","把","微控制器","汽车","ament","基础","编译","变化","周期","做到","同时","调试","还会","第一个","理器","链接","它","方便","用于","格局","布式","之上","经验","应用","信号","的","下","针对","课程","）","多","使用","层面","相对","诸多","受制于","新版","不同","一定","产品","大","。","一个","盖","消费市场","千差万别","满足","如何","跨平台","时代","第二种","还","操作系统","真正","毛坯房","代码","实时","生活","呢","一种","较","上","给","并","电脑系统","后续","对系统","和","继续","基本保障","说明","除了","通用","之初","一旦","消费","到","可靠","更","控制","让","算力","编译器","大家","差异","网络连接","中","不会","大量","运动","未来","比","最新","前方","搭载","这","标准","只是","升级","python3","很多","力学","第二","受制","安全","rtos","任何","可能","不是","过去","尽量","解算","成功经验","远比","无论","环境","需要","具体","个体","wifi","有","定性","、","之间","借鉴","具备","用","好","体现","，","接口","重新","机器","最终","ros1","我们","通用性","全部","测试","进行","方案","翻新","开发","市场","安全性","发现","几点","已经","提供","内","能够","节点","或者","历史使命","二种","不用","在","就","保留","最佳","管理","得","设计","colcon","（","android","怀揣","mcu","宕机","都","下要","也","产品化","经常"],"title":"全新的ROS2","title_tokens":["全新","的","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2-vs-ros1","text":"","text_tokens":[],"title":"ROS2 vs ROS1","title_tokens":["vs","ros2","ros1"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_1","text":"在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。","text_tokens":["里","内存","ros2","图像","共享","类似","一团乱","右侧","只有","机制","大致","打交道","—","让","系统","重要","开始","先","linux","大家","时候","最","共享内存","架构","macos","选项","中","就是","只不过","把","大量","安装","完善","指挥","ceo","不过","再","将","了解","层","从而","交道","明显","这","程序","消失","标准","很多","注意","不难理解","中间","建立","而","公司","张图","变化","rtos","客户","底层","连接","理器","可选项","它","至关","一样","可以","进程","变得"," ","简单","简单明了","需要","调用","哪些","找到","了","听","下边","通过","信息","而已","master","应用","接收","中间层","左侧","的","有","学习","、","频繁","驱动","稳定","不","好","更加","一团","dds","深入","比如","方式","，","有且","接口","是","tcp","不太","udp","自","理解","ros1","windows","是从","会成","雷达","肯定","我们","进行","。","一个","开发","乱麻","这些","发现","彼此","通信","整体","所有","那","提供","印象","不难","看","节点","内","间层","接触","操作系统","协议","应该","角色","突然","在","更换","数据","基于","过","主要","就","管理","发布","可选","走","框架","得","如果","两者","请","写","另外","应用层","客户端","上","discovery","封装","通信接口","通信协议","至关重要","但","方法","会","都","管理器","并","一团乱麻","对比","后续","ros","库会","复杂","成","这个","也","和","名字","操作","依赖","一套","这样"],"title":"系统架构","title_tokens":["架构","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#dds","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。","text_tokens":["高","发","省略","延迟","5g","适用","除了","ros2","加密","接入","是否","部分","要","类似","之外","该","多个","移植","开发成本","常","更","系统","让","需求","先","精力","自家","来讲","三个","最","厂商","专注","为了","丰富","场景","机器人","中","定义","减少","就是","一些","把","物","安装","相比","不过","另","再","社区","属性","这","轻松","时","听说","程序","标准","基本","这样","变化","按照","带来","举","底层","为","产品开发","不是","率","完","一样","可以","其实","成本"," ","简单","交付","一行","广泛","了","配置","灵活","复用","例子","master","应用","于","的","各种","诟病","国际标准","选择","、","商业","放在","频繁","每个","middleware","简称","稳定","复杂度","然后","不","交给","好","用户","dds","软件","过来","比如","用","不爽","更加","当然","多","，","问题","层面","接口","每","重新","熟悉","是","对于","只要","机器","tcp","udp","还有","ros1","开源","联网","厂家","一家","么","肯定","我们","收","不同","想要","适配","产品","优化","这里","。","一个","目标","开发","发成","这些","某","满足","软件系统","rmw","如何","通信","功能","无法","提供","？","性能","能够","/","国际","fastrtps","符合","应该","协议","所以","版本","指定","不用","加入","在","更换","数据","基于","做","就","代码","改","提高","总之","一种","等","得","如果","写","设计","部署","opensplice","切换","给","丢","通信协议","纠结","实现","会","并","都","解决","ros","复杂","这个","也","广泛应用","最大","其他","唯一"],"title":"DDS通信","title_tokens":["dds","通信"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_2","text":"ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。","text_tokens":["便于","第二","第二个","担心","ros2","部分","百万","迁移","非常","不","应该","到","不用","讲解","方式","熟悉","，","在","一致","使用","过","全球","就","几百","保留","陌生","依然","二个","各位","本","一一","ros1","大家","尽量","其中","几乎","如果","我们","中"," ","这里","。","方法","开发者","概念","开发","会","并","广泛","这些","存在","ros","了","伙伴","没有","含义","也","几百万","和","从","小伙伴","开发方式","意义","已经","应用","小伙","的","有","很多","学习","课程","以及"],"title":"核心概念","title_tokens":["核心","概念"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_3","text":"再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。","text_tokens":["总体而言","更接","ros2","对象","真实","同样","更","编程","而言","之后","项目","当","来讲","可移植性","大家","迈过","机器人","角度","编码","中","一些","不过","再","这","所示","程序","可读性","接近","语言","学","部头","可移植","移植性","看看","一边","企业"," ","总体","搬","图片","具体","大部","从","的","学习","课程","确实","发布者","具备","用","用到","软件","方式","多","，","教程","来","机器","切记","是","ros1","一页","我们","。","不要","一个","开发","软件开发","可读","发现","大部头","如何","面向对象","暂且","一本","更好","版本","编程语言","两个","在","稍安","带领","就","如","发布","提高","难度","写","面向","一步","特性","勿躁","方法","实现","会","过程","后续","也","和","道坎","操作","移植"],"title":"编码方式","title_tokens":["编码方式","方式","编码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_4","text":"最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随教程，你就会慢慢理解这些特性。","text_tokens":["啦","ros2","之外","多功能","run","大幅度","更","大致","编程","启动","—","而言","控制","跟随","大家","现有","没","中","揭秘","就是","把","陆续","再","集成","工具","相关","变化","独立","常用","分散","上手","总结"," ","话题","了","master","的","下","有","选择","换成","topic","除此","好","dds","对","比如","，","教程","相对","每","慢慢","是","你","最后","理解","ros1","初次","我们","大幅","核心","。","幅度","以上","一个","rosrun","开发","这些","某","通信","功能","即可","命令行","所有","干掉","印象","节点","在","做","：","上升","就","rostopic","主","一种","难度","如果","最为","特性","表示","概念","除此之外","会","都","后续","对比","ros","命令","也","和"],"title":"命令行","title_tokens":["命令","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/","text":"ROS2安装方法 本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。 Linux系统简介 时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。 Ubuntu系统简介 我们后续课程使用到的Linux发行版就是 ubuntu系统 。 Ubuntu诞生于2004年10月份， 每六个月发布一个新版本 ，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。 Ubuntu虚拟机安装 虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下： 1. 下载系统镜像 下载链接： https://ubuntu.com/download/desktop 2. 在虚拟机中创建系统 3. 设置虚拟机硬盘大小 4. 设置Ubuntu镜像路径 5. 启动虚拟机 6. 设置用户名和密码 7. 等待系统安装 8. 完成安装 Ubuntu系统安装好后，大家可以先随意使用熟悉一下。 ROS2系统安装 接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下： 1. 设置编码 $ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8 2. 添加源 $ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844 3. 安装ROS2 $ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop 4. 设置环境变量 $ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。 ROS2示例测试 为了验证ROS2安装成功，我们可以通过以下示例进行测试。 示例一：命令行示例 先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。 示例二：小海龟仿真示例 再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["source","地址","节","爱好者","成熟","ros2","是否","密码","领域","turtle","二句","该","run","无论是","启动","—","源","之后","蓝色","创建","真器","他","macos","_","有限","两年","俱全","evaluation","精神","背景","apt","叫","原理","等待","lsb","各种各样","&&","程序","大学","绑定","基本","opt","摩拳擦掌","tee","电脑","小海","pro","检验","衡量","当中","guyuehome","越来越","常用","workstation","文件","甚至","一样","之前","cpp","经典","企业","工作","技术","外衣","18","不仅","服务器","智能","listener","月份","情况","update","编辑","node","选择","gpg","考虑","原本","不","locales","除此","对","一般","比如","互联网","准确","是","bug","to","验证","开源","模式","命名","准备","奥义","维护","failed","运行","核心","虚拟机","与","=","humble","尚","一起","构建","5","/","\"","决定","试一试","rosdistro","应该","版本","实践","界面","key","两个","数据","爱好","做","指标","打包","nodes","：","位置","但是","光大","另外","8","print","快速","快","方法","以","虽然","简介","会","37844","过程","成","硬件","越来","编号","d","命令","上下","第一","export","操作","个人","动手做","这样","1","org","第二个","适用","后","talker","提到","正常","os","fedora","二个","linux","来讲","最","--","以下","实力","场景","为了","应用程序","环境变","示例","share","$","一些","互联",":","将","吧","基本相同","很","起来","了解","原有","一石激起千层浪","dpkg","适合","之一","任务","字符","开放","添加","curl","占据","https","echo","字符串","浏览","环境变量","已有","回到","报错","影响","底层","us","一下","-","2","优先","比较","浏览器","设置","可以","自己"," ","千层浪","后缀","了","上层","通过","archive","master","长期","于","各种","点击","发行版","网络","发布者","稳定","诞生","products","软件","bashrc","dds","前先要","world","熟悉","问题","教程","lang","六个","发挥","windows","服务","|","download","收费","发扬","数字","为例","这里","键盘","真理","通信","功能","兼容","接下来","？","性能","个","反馈","其","直接","接触","技术实力","加入","所以","版","普通","每年","按键","保证","4","成功","等","如果","请","仿真器","量","提交","但","除此之外","实现","叫做","说干就干","热情","下载","ros","没有","这个",")","完成","其他","订阅","移植","各样","啦","etc","出现","顺序","并用","持续","关注","多个","什么","左右","个人爱好","传输","月","desktop","第一句","行列",">","系统","放到","人工智能","激发","先","本相","支持","开始","时候","代表","机器人","3","紧随其后","gnupg","下来","海龟","就是","22","把","开发者","六个月","可视化","操作界面","locale","时","分别","可视","效果","一应","all","唯一标准","建议","同时","修复","强大","signed","中将","lts","多用","utf","deb","本","操作方法","链接","第一个","动手","通讯","null","参考","arch","多人","采用","上下左右","看到","千层","只","小海龟","之上","新","如遇","从","keyrings","6","应用","多用户","大学生","sudo","的","下","html","一句","镜像","课程","一应俱全","teleop","一位","步骤","户名","demo","多","使用","每","你","二","不太","成为","加上","turtlesim","其后","联网","者","芬兰","内核","发展","ubuntu20.04","不同","一定","vmware","大","。","一个","迅猛","upgrade","如何","bash","算机","探索","”","release","如下","并且","华丽","还","最好","变动","操作系统","合适","主要","代码","或","呢","一种","至此","相同","人工","上","install","给","最为","擦掌","其他软件","ubuntu","热爱","表示","概念","每隔","并","后续","和","04","终端","名字","dev","hello","任何人","com","说明","各个","看出","除了","通用","到","之外","一","何人","更","绝对","让","控制","等等","7","重要","乐于","大家","会加","(","随意","紧随","应用软件","ubuntu22.04","第一次","编码","中","介绍","大量","“","运动","安装","未来","再","architecture","]","1991","这","吸引","更新","标准","ssl","升级","很多","资料","依然","第二","o","www","公司","指令","en",".","2004","codename","编辑器","任何","务器","这套","list","可能","发扬光大","还是","计算","接下","变量","by","main","无论","环境","usr","http","分享","需要","传播","githubusercontent","先要","伴随","仿真","发行","之内","蕴藏","有","、","商业","一直","自行","可","学生","用户","好","redhat","计算机","，","重新","来","机器","connect","因为","此时","林纳斯","centos","keyring","gen","关于","现在","10","我们","测试","想要","进行","激起","出","虚拟","packages","开发","软件开发","lc","硬盘","已经","命令行","setup","一次","多任务","节点","大小","或者","路径","试试","py","出于","讲解","在","好后","~","就","raw","管理","发布","源代码","其中","设计","[","unix","好者","第二句","用户名","sources","都","免费","目前","2022","也","最大","依赖","一套","时间","年","唯一"],"title":"ROS2安装方法","title_tokens":["ros2","方法","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2","text":"本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。","text_tokens":["节","ros2","操作系统","前先要","，","底层","—","系统","一下","重要","本","linux","一种","最","我们","。","安装","了解","一起","先要","操作","的"],"title":"ROS2安装方法","title_tokens":["ros2","方法","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#linux","text":"时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。","text_tokens":["各样","适用","后","爱好者","出现","成熟","ros2","提到","并用","通用","到","何人","什么","个人爱好","更","fedora","行列","—","之后","系统","放到","等等","重要","激发","先","乐于","linux","支持","本相","来讲","最","实力","他","场景","macos","应用程序","应用软件","中","有限","就是","一些","把","互联","精神","大量","开发者","安装","叫","可视化","基本相同","操作界面","起来","原理","各种各样","原有","1991","一石激起千层浪","这","吸引","程序","适合","标准","大学","之一","很多","可视","绑定","基本","任务","公司","开放","唯一标准","任何","务器","已有","回到","检验","修复","强大","底层","多用","这套","衡量","当中","发扬光大","本","操作方法","越来越","动手","常用","计算","甚至","一样","参考","可以","自己","之前","多人","企业"," ","分享","看到","技术","需要","千层","传播","外衣","千层浪","之上","了","不仅","服务器","情况","通过","伴随","发行","应用","多用户","大学生","的","各种","下","有","镜像","、","商业","发行版","稳定","原本","不","一位","学生","用户","软件","redhat","对","计算机","一般","比如","熟悉","，","互联网","重新","多","使用","问题","教程","是","准确","bug","每","此时","不太","林纳斯","成为","加上","centos","windows","开源","模式","联网","命名","现在","服务","芬兰","内核","收费","发展","我们","维护","不同","发扬","大","。","核心","激起","一个","与","开发","迅猛","尚","一起","真理","功能","兼容","算机","已经","？","性能","多任务","并且","华丽","决定","还","或者","最好","出于","反馈","其","操作系统","应该","技术实力","加入","所以","版本","讲解","实践","在","界面","每年","爱好","做","指标","主要","打包","就","代码","管理","或","源代码","呢","其中","等","设计","光大","相同","unix","好者","另外","上","给","快速","量","提交","但","ubuntu","热爱","方法","概念","实现","虽然","都","会","并","过程","说干就干","免费","热情","目前","叫做","硬件","越来","没有","这个","也","和","成","名字","操作","个人","依赖","一套","其他","任何人","时间","年","动手做","唯一"],"title":"Linux系统简介","title_tokens":["系统","简介","linux"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu","text":"我们后续课程使用到的Linux发行版就是 ubuntu系统 。 Ubuntu诞生于2004年10月份， 每六个月发布一个新版本 ，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。","text_tokens":["各个","看出","出现","顺序","除了","持续","领域","到","关注","之外","月","更","无论是","绝对","之后","系统","让","人工智能","重要","linux","支持","大家","时候","代表","会加","为了","机器人","紧随","紧随其后","ubuntu22.04","第一次","中","两年","俱全","介绍","就是","22","互联","开发者","六个月","安装","未来","再","很","更新","时","升级","很多","效果","资料","依然","一应","摩拳擦掌","这样","电脑","占据","2004","浏览","编辑器","建议","已有","影响","lts","一下","可能","本","还是","常用","通讯","优先","文件","比较","浏览器","可以","参考","自己","之前","无论","环境"," ","只","新","后缀","上层","18","智能","了","月份","从","通过","发行","编辑","应用","长期","于","之内","的","各种","有","选择","、","课程","发行版","一应俱全","网络","一直","稳定","考虑","诞生","自行","除此","好","用户","软件","比如","多","，","使用","互联网","教程","每","机器","熟悉","是","你","因为","六个","发挥","windows","其后","联网","10","我们","维护","ubuntu20.04","不同","进行","一定","想要","数字","为例","。","这里","出","一个","虚拟","虚拟机","开发","软件开发","如何","硬盘","已经","一次","5","性能","个","还","变动","试一试","直接","接触","合适","版本","所以","版","讲解","在","普通","主要","就","位置","发布","保证","或","4","等","其中","如果","但是","人工","上","快","擦掌","ubuntu","表示","以","方法","每隔","除此之外","会","都","后续","免费","硬件","编号","2022","也","04","第一","最大","其他","年","移植"],"title":"Ubuntu系统简介","title_tokens":["简介","ubuntu","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu_1","text":"虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下：","text_tokens":["com","地址","/","啦","后","www","自行",".","https","products","步骤","多个","软件","pro","同时","在","已有","，","是","：","就","系统","让","开始","-","大家","请","workstation","准备","另外","相同","可以","我们","html","采用","环境","运行"," ","vmware","这里","。","其他软件","虚拟","一个","evaluation","虚拟机","工作","安装","并",":","叫做","之上","下载","构建","和","完成","操作","的","如下","其他"],"title":"Ubuntu虚拟机安装","title_tokens":["虚拟机","ubuntu","虚拟","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1","text":"下载链接： https://ubuntu.com/download/desktop","text_tokens":["com","下载","desktop","/","："," ","链接","https","ubuntu",".",":","download"],"title":"1. 下载系统镜像","title_tokens":["下载","系统"," ",".","镜像","1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2","text":"","text_tokens":[],"title":"2. 在虚拟机中创建系统","title_tokens":["中","系统"," ","创建",".","虚拟","2","虚拟机","在"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3","text":"","text_tokens":[],"title":"3. 设置虚拟机硬盘大小","title_tokens":["设置","3","大小"," ","硬盘",".","虚拟","虚拟机"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4-ubuntu","text":"","text_tokens":[],"title":"4. 设置Ubuntu镜像路径","title_tokens":["设置","路径"," ",".","ubuntu","4","镜像"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#5","text":"","text_tokens":[],"title":"5. 启动虚拟机","title_tokens":["启动"," ",".","虚拟","虚拟机","5"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#6","text":"","text_tokens":[],"title":"6. 设置用户名和密码","title_tokens":["设置","和","用户名"," ","6",".","密码","用户","户名"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#7","text":"","text_tokens":[],"title":"7. 等待系统安装","title_tokens":["等待","系统"," ","7",".","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#8","text":"Ubuntu系统安装好后，大家可以先随意使用熟悉一下。","text_tokens":["熟悉","，","使用","可以","好后","系统","一下","先","ubuntu","。","大家","安装","随意"],"title":"8. 完成安装","title_tokens":["8","完成"," ",".","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_1","text":"接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下：","text_tokens":["ros2","步骤","到","，","就","：","系统","接下","可以","我们","中","下来","。","ubuntu","把","安装","了","接下来","如下"],"title":"ROS2系统安装","title_tokens":["ros2","系统","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1_1","text":"$ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8","text_tokens":["all","en",".","locales","lang","us","utf","gen","-","8","install","_"," ","$","=","apt","lc","&&","update","export","sudo","locale"],"title":"1. 设置编码","title_tokens":["设置","编码"," ",".","1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2_1","text":"$ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844","text_tokens":["com","source","etc","ros2","os",">","(","--","gnupg","_","share","$","“","apt",":","architecture","lsb","&&","]","dpkg","ssl","o","tee","www","curl",".","https","echo","codename","报错","signed","list","deb","guyuehome","-","null","参考","by","arch","main","http"," ","usr","githubusercontent","如遇","archive","update","keyrings","master","sudo","gpg","可","，","to","connect","keyring","|","failed","packages","=","”","release","/","\"","rosdistro","key","raw","[","print","install","sources","ubuntu","37844","ros","d",")","dev","org"],"title":"2. 添加源","title_tokens":["源","添加"," ",".","2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3-ros2","text":"$ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop","text_tokens":["desktop","ros","install","upgrade","update"," ","$","-","sudo","apt","humble"],"title":"3. 安装ROS2","title_tokens":["3","ros2"," ",".","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4","text":"$ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。","text_tokens":["source","opt","/","\"","ros2",".","echo","好","bashrc","在","，","~",">","就","系统","至此","中"," ","$","。","安装","humble","ros","了","bash","已经","setup"],"title":"4. 设置环境变量","title_tokens":["设置","变量","环境变","环境"," ",".","4","环境变量"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_2","text":"为了验证ROS2安装成功，我们可以通过以下示例进行测试。","text_tokens":["，","为了","可以","我们","测试","ros2","验证","通过","示例","进行","。","成功","安装","以下"],"title":"ROS2示例测试","title_tokens":["测试","ros2","示例"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_1","text":"先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。","text_tokens":["节点","第二","第二个","说明","发布者","talker","字符","ros2","是否","试试","py","字符串","正常","dds","demo","run","world","在","，","两个","传输","来","数据","问题","底层","启动","nodes","：","系统","二个","发布","重要","第一个","先","者","如果","以下","cpp","_","中","最为"," ","。","$","一个","“","吧","listener","没有","命令","通信","第一","终端","通过","”","的","hello","订阅"],"title":"示例一：命令行示例","title_tokens":["命令","：","示例","命令行","一"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_2","text":"再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["第二","节点","啦","一句","指令","ros2","试一试","teleop","小海","持续","turtle","二句","该","左右","run","两个","key","，","第一句","在","来","按键","教程","启动","—","中将","：","就","控制","蓝色","关于","turtlesim","成功","至此","真器","可以","第二句","奥义","上","仿真器","_","我们","中","经典","示例","海龟"," ","运行","上下左右","。","$","一个","背景","“","运动","安装","将","小海龟","后续","再","ros","键盘","上下","终端","第一","仿真","探索","分别","node","”","蕴藏","的","如下","点击"],"title":"示例二：小海龟仿真示例","title_tokens":["：","二","示例","海龟","小海","仿真","小海龟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/","text":"ROS2命令行操作 在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。 Linux中的命令行 类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。 启动方式 回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。 常用命令操作 我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。 ROS2中的命令行 ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。 运行节点程序 想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看节点信息 当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim 查看话题信息 当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose 发布话题消息 想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 发送服务请求 一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\" 发送动作目标 想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\" 录制控制命令 系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["为什么","ros2","感兴","要","类似","该","turtle","run","输入","机制","启动","—","删除","查","创建","随身","很少","地","真器","_","多到","绝对路径","gedit","背景","某段","片段","程序","linear","工具","集成","语法","令人","电脑","0.2","感兴趣","小海","呀","子","z","由","当前工作","为","执行","}","rotate","想","魅力","常用","文件","一样","黑客","保持","之前","打开","一边","看似","x","什么样","工作","absolute","调用","cp","alt","列表","编辑","node","学习","选择","孤单","列出","1.8","一系","geometry","硬","不","便捷","对","比如","写字","转","是","系统管理员","详细","管理员","显示","并不一定","运行","核心","与","这些","rate","一起","觉得","容易","麻烦","/","\"","子目录","异常","试一试","哪","文件名","key","数据","：","笔记本","背","但是","干什么","rosbag","件夹","结合","以","会","虽然","具体操作","{","0","record","成","这种","当前","命令","msg","第一","cd","操作","看中","里边","不变","1","这样","参数","40","后","布料","随着","感觉","适应","正常","一二","科幻","mv","呈现","需求","linux","来讲","款式","精心","不到","--","后边","场景","小","角度","被","$","一些",":","将","不过","另","很","起来","受","鼠标","了解","原有","轻松","info","移入","内容","推出","y","字符","专门","文件名称","echo","回到","一二十","一下","-","2","目","可以","自己"," ","想象","太","service","了","例如","动作","vel","通过","信息","材料","原因","于","17","目的","各种","改了","定制","死机","用到","软件","熟悉","问题","慢慢","还有","请求","服务","体验","为例","这里","每次","此","度高","知道","案例","键盘","功能","即可","一二十个","所有","接下来","？","实验","theta","twist","改变","接触","直接","二十个","所以","现出","难以","总","等","如果","发送","一步","仿真器","体操","十个","但","发指","cmd","实现","rosbag2","本节","叫做","ros","其上","没有","这个","完成","必不可少","其他","忙","啦","实验室","多个","什么","一点","新建","大致","笔记",">","逛去","系统","系列","手","先","完全","时候","服装","3","去","选项","下来","海龟","call","就是","把","'","可视化","ls","买","做好","子目","商家","精心设计","可视","<","调试","录制","db3","angular","本","链接","第一个","帮上","它","消息","看看","深色","看到","有点","小海龟","既定","窗口","笔记本电脑","所在","灵活","权限","srv","动","应用","播放","sudo","的","下","确实","topic","action","令人发指","及其","teleop","跟","拷贝到","多","使用","每","你","不太","加上","turtlesim","spawn","死记","初次","自主","不同","一定","。","一个","以上","目标","一件","pose","满足","如何","既",",","”","如下","逛来","send","name","还","兴趣","指定","35","商场","0.0","又","主要","感受","呢","或","一种","产生","相同","上","逛来逛去","多种","规则","一系列","体会","t","表示","概念","并","解决","和","04","终端","继续","复现","二十","拷贝","至于","pub","衣服","总有","均","搜索","段","到","一","更","绝对","控制","让","重要","msgs","大家","现有","不一","第一次","rm","统管","中","记忆","“","未来","再","至今","电影","快捷键","复制到","及","]","这","右键","科幻电影","只是","约束","很多","ctrl","指令","11","一只",".","呈现出","编辑器","2.0","看不到","数量","进一步","炫酷","list","可能","不是","怎么","还是","play","这项","接下","则","无论","terminal","需要","话题","哪些","具体","快捷","主目录","仿真","…","尝试","复制","根据","有","、","一直","名称","目标目录","用","深入","若","用户","goal","好","方式","，","turtle1","来","找","对于","文件夹","因为","查看","此时","而是","rotateabsolute","我们","详细信息","想要","进行","改名","随身带","出","bag","某","死记硬背","命令行","已经","一次","提供","能够","节点","标目","常用命令","从来","路径","或者","不用","在","带领","就","保留","某个","管理","发布","目录","源文件","设计","[","不可","+","都","枯燥","2022","也","mkdir","pwd"],"title":"ROS2命令行操作","title_tokens":["命令","命令行","操作","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2","text":"在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。","text_tokens":["ros2","小海","随着","接触","到","适应","深入","在","调试","，","使用","更","多","带领","进一步","—","感受","不太","重要","可能","一种","大家","时候","魅力","如果","可以","之前","我们","第一次","一步","中","一定","海龟","运行"," ","。","有点","会","将","小海龟","本节","工具","案例","了","命令","第一","命令行","一次","的","学习"],"title":"ROS2命令行操作","title_tokens":["命令","命令行","操作","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#linux","text":"类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。","text_tokens":["衣服","总有","为什么","布料","类似","科幻","什么","一点","呈现","逛去","需求","手","先","linux","来讲","大家","时候","现有","款式","完全","精心","不一","场景","服装","小","去","被","中","就是","一些","可视化","至今","电影","起来","受","买","做好","商家","片段","科幻电影","工具","精心设计","约束","可视","很多","推出","呀","呈现出","炫酷","为","不是","还是","一样","可以","自己","无论","看似"," ","什么样","看到","想象","既定","了","灵活","材料","于","的","各种","根据","、","定制","一直","不","便捷","软件","比如","方式","多","，","问题","使用","来","对于","是","你","此时","服务","并不一定","自主","我们","想要","一定","这里","。","每次","一个","度高","一件","这些","某","满足","功能","命令行","已经","所有","容易","逛来","？","能够","麻烦","异常","哪","现出","在","商场","就","保留","呢","一种","等","设计","但是","不可","逛来逛去","规则","但","结合","会","并","都","虽然","解决","ros","成","这种","其上","没有","命令","和","必不可少","操作","看中","其他","里边","这样"],"title":"Linux中的命令行","title_tokens":["命令","中","命令行","linux","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_1","text":"回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。","text_tokens":["参数","后","为什么","搜索","随着","到","正常","一二","什么","科幻","输入","启动","笔记","系列","手","随身","大家","时候","不到","很少","中","记忆","多到","就是","背景","不过","很","电影","快捷键","鼠标","及","这","右键","科幻电影","工具","令人","ctrl","字符","专门","电脑","指令","回到","看不到","数量","一二十","一下","怎么","不是","本","魅力","常用","这项","黑客","可以","打开","terminal","深色"," ","看到","需要","笔记本电脑","窗口","所在","alt","快捷","列表","通过","应用","原因","的","有","选择","确实","一系","死机","令人发指","硬","用","用到","软件","对","方式","写字","，","使用","熟悉","来","慢慢","是","因为","而是","初次","我们","一定","。","随身带","功能","觉得","即可","命令行","既","一二十个","从来","二十个","所以","不用","在","难以","又","：","就","呢","笔记本","背","但是","上","+","多种","十个","一系列","体会","t","发指","会","并","都","叫做","枯燥","这个","命令","也","终端","操作","二十","至于","其他"],"title":"启动方式","title_tokens":["方式","启动"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_2","text":"我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。","text_tokens":["均","感觉","mv","一","多个","该","新建","删除",">","绝对","查","系统","创建","先","linux","大家","地","rm","统管","选项","中","绝对路径","gedit","把","“","将","未来","另","复制到","ls","及","]","子目","原有","只是","移入","语法","指令","文件名称","<","编辑器","回到","由","当前工作","为","执行","一下","链接","常用","它","文件","目","可以","保持","打开","则","一边"," ","工作","需要","cp","了","主目录","权限","列表","…","编辑","复制","的","目的","下","sudo","列出","名称","及其","目标目录","不","拷贝到","用","若","用户","多","，","熟悉","来","找","对于","文件夹","系统管理员","管理员","显示","体验","死记","我们","改名","。","出","一个","此","目标","这些","死记硬背","功能","”","所有","/","标目","子目录","常用命令","路径","或者","改变","文件名","指定","：","就","某个","管理","或","目录","源文件","[","件夹","以","会","当前","没有","命令","也","cd","mkdir","pwd","拷贝","不变"],"title":"常用命令操作","title_tokens":["命令","操作","常用命令","常用"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2_1","text":"ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。","text_tokens":["参数","节点","topic","一系","内容","ros2","还","小海","跟","对","比如","什么","在","，","机制","大致","主要","总","就","感受","系列","第一个","linux","接下","干什么","相同","后边","可以","的","我们","中","不同","下来","体操"," ","一系列","海龟","为例","。","核心","一个","表示","以","与","概念","具体操作","都","话题","不过","小海龟","了解","一起","具体","命令","也","第一","功能","继续","命令行","仿真","操作","目的","node","所有","接下来","集成","下","有"],"title":"ROS2中的命令行","title_tokens":["命令","中","ros2","命令行","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_3","text":"想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["节点","ros2","teleop","要","turtle","run","key","，","使用","：","控制","某个","turtlesim","可以","我们","_","中","想要","进行","运行"," ","海龟","$","键盘","例如","命令","和","仿真","操作","node"],"title":"运行节点程序","title_tokens":["节点","程序","运行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_4","text":"当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim","text_tokens":["节点","啦","/","ros2","感兴趣","感兴","兴趣","子","对","，","来","：","就","系统","查看","list","加上","呢","turtlesim","详细","如果","它","可以","详细信息","中","运行"," ","$","一个","都","知道","哪些","ros","某","当前","命令","信息","info","node","的","有","？","这样"],"title":"查看节点信息","title_tokens":["节点","查看","信息"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_5","text":"当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose","text_tokens":["topic","/","ros2","还","试一试","echo","子","，","使用","turtle1","数据","：","系统","查看","list","加上","呢","想","消息","中"," ","$","看到","一个","都","话题","pose","某","当前","命令","即可","的","如下","有"],"title":"查看话题信息","title_tokens":["查看","话题","信息"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_6","text":"想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":["1.8","topic","/","y","\"","geometry","还","指令","ros2","twist","直接","，","2.0","turtle1","z","0.0","}","：","控制","angular","发布","msgs","--","可以","我们","_","想要","x","海龟"," ","$","cmd","{",":","话题","rate","起来","命令","vel","msg","通过","动","命令行","linear",",","pub","1"],"title":"发布话题消息","title_tokens":["消息","话题","发布"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_7","text":"一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\"","text_tokens":["改了","name","/","y","theta","\"","0.2","还","ros2","试一试","一只","，","来","—","}","：","turtlesim","2","spawn","产生","服务","真器","我们","仿真器","x","海龟"," ","call","$","一个","'","调用","{",":","再","太","service","srv","仿真",",","提供","孤单"],"title":"发送服务请求","title_tokens":["发送","服务","请求"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_8","text":"想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\"","text_tokens":["忙","/","theta","\"","action","ros2","到","goal","比如","指定","，","turtle1","转","：","rotate","让","rotateabsolute","turtlesim","帮上","真器","发送","可以","3","角度","仿真器","_","中","想要","海龟"," ","$","一个","目标","absolute",":","动作","这个","具体","命令","通过","完成","仿真","命令行","提供","的","send","这样"],"title":"发送动作目标","title_tokens":["目标","发送","动作"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_9","text":"系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["实验","/","40","啦","实验室","ros2","11","段",".","好","用","子","35","录制","，","回到","turtle1","数据","每","：","db3","系统","还有","还是","-","常用","大家","play","如果","可以","rosbag","自己","我们","？","_","中","想要","下来","看看","运行"," ","$","就是","。","以上","把","bag","与","实现","cmd","一个","rosbag2","0","某段","再","很","record","2022","vel","如何","04","命令","这","功能","轻松","复现","播放","17","尝试","的","有","很多"],"title":"录制控制命令","title_tokens":["录制","命令","控制"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","text":"ROS2开发环境配置 ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。 Git git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git 下载教程源码 《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。 VSCode Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download VSCode插件配置 为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。 中文语言包 Python插件 C++插件 CMake插件 vscode-icons ROS插件 Msg Language Support Visual Studio IntelliCode URDF Markdown All in One VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["便于","com","《","哪里","ros2","搜索","多个","更","—","github","之后","系统","让","等等","项目","重要","系列","先","linux","支持","大家","vscode","最","几千万","为了","机器人","推荐","丰富","macos","语言包","_","被","中","利器","示例","合并","$","不会","一些","开发者","大量","apt","审核","安装",":","成千","clone","in","这","中文","喜欢","python","工具","集成","2015","之父","很多","内容","推出","urdf","语言","linus","one","编译","all","gitee",".","https","插件","浏览","一款","编辑器","support","已有","调试","修复","强大","迅速","code","这款","可能","记事","guyuehome","链接","-","扩展","文件","浏览器","自动","可以","自己","下载方式","环境"," ","而生","简单","看到","需要","一行","非常简单","广泛","markdown","上万","只","记事本","新","了","略显","配置","intellicode","具体","不开","管理工具","成千上万","离不开","源码","应用","编辑","作为","听到","的","sudo","有","判断","神兵","、","课程","增加","icons","一系","中会","之间","驱动","21","简称","变更","visualstudio","不","非常","贡献","好","冲突","软件","用","比如","方式","多","，","使用","教程","机器","cmake","是","bug","文件夹","查看","成为","》","windows","搭建","开源","功能强大","tutorials","准备","download","讲","微软","git","肯定","我们","发展","国内","官方","studio","不同","进行","众多","这里","。","千万","每次","一个","无限","以上","与","开发","出","千上万","这些","管理软件","如何","功能","官方网","开发工具","所有","提供","？","visual","行","以及","轻量","/","有些","language","两款","还","直接","操作系统","版本","所以","在","理工","几千","人","做","自带","码云","就","代码","：","组件","管理","网上","呢","源代码","设计","如果","入门","另外","人工","install","给","切换","常听到","快速","一系列","特性","提交","件夹","高效","但","方法","会","都","并","官方网站","后续","ros","下载","复杂","硬件","因","也","和","广泛应用","命令","终端","完成","msg","网站","c++","操作","编写","个人","里边","年","这样"],"title":"ROS2开发环境配置","title_tokens":["配置","开发","ros2","环境"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros2","text":"ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。","text_tokens":["中会","两款","编译","，","机器","做","—","代码","查看","重要","呢","先","大家","vscode","准备","机器人","推荐","肯定","我们","git","给","示例","环境","。","一些","大量","开发","需要","这些","ros","工具","配置","不开","如何","和","离不开","、","完成","源码","编写","开发工具","提供","的","？","课程"],"title":"ROS2开发环境配置","title_tokens":["配置","开发","ros2","环境"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#git","text":"git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git","text_tokens":["哪里","多个","—","github","之后","系统","让","等等","项目","linux","大家","几千万","被","中","合并","$","不会","开发者","apt","审核","安装","成千","这","工具","之父","内容","linus","gitee","一款","已有","修复","迅速","这款","可能","自动","可以","而生"," ","简单","看到","一行","需要","非常简单","广泛","上万","新","了","具体","管理工具","成千上万","应用","听到","的","sudo","判断","有","增加","之间","驱动","变更","不","非常","贡献","冲突","软件","比如","，","使用","是","bug","开源","git","发展","肯定","我们","国内","不同","进行","众多","。","千万","每次","一个","开发","千上万","这些","管理软件","功能","所有","行","以及","有些","直接","版本","所以","在","理工","几千","人","码云","就","代码","管理","设计","人工","install","切换","常听到","特性","提交","高效","方法","会","都","并","硬件","因","也","和","广泛应用","命令","终端","完成","网站"],"title":"Git","title_tokens":["git"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_1","text":"《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。","text_tokens":["com","/","《","21","ros2","还","gitee",".","https","好","用","浏览","方式","多","，","更","自带","是","—","文件夹","：","代码","系统","查看","就","》","guyuehome","记事","vscode","如果","文件","tutorials","入门","浏览器","讲","另外","推荐","git","下载方式","_","中","环境"," ","件夹","这里","$","。","一个","开发","会",":","记事本","下载","复杂","集成","略显","clone","和","源码","的","里边","有","很多","课程","这样"],"title":"下载教程源码","title_tokens":["教程","下载","源码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode","text":"Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download","text_tokens":["com","推出","/","简称","visualstudio","非常","https",".","操作系统","编辑器","在","，","强大","是","组件","代码","code","系统","项目","：","成为","源代码","搭建","windows","支持","linux","链接","vscode","功能强大","扩展","download","微软","丰富","可以","macos","官方","studio","利器","快速"," ","但","。","一个","开发",":","神兵","官方网站","下载","visual","和","功能","网站","官方网","编辑","操作","的","2015","轻量","年","、"],"title":"VSCode","title_tokens":["vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode_1","text":"为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。","text_tokens":["便于","一系","ros2","还","插件","调试","，","系列","vscode","扩展","为了","可以","我们","一系列","无限","。","与","开发","安装","后续","功能","的"],"title":"VSCode插件配置","title_tokens":["vscode","插件","配置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_2","text":"","text_tokens":[],"title":"中文语言包","title_tokens":["中文","语言包","语言"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#python","text":"","text_tokens":[],"title":"Python插件","title_tokens":["python","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#c","text":"","text_tokens":[],"title":"C++插件","title_tokens":["c++","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#cmake","text":"","text_tokens":[],"title":"CMake插件","title_tokens":["插件","cmake"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode-icons","text":"","text_tokens":[],"title":"vscode-icons","title_tokens":["vscode","icons","-"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros","text":"","text_tokens":[],"title":"ROS插件","title_tokens":["ros","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#msg-language-support","text":"","text_tokens":[],"title":"Msg Language Support","title_tokens":["language","support","msg"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#visual-studio-intellicode","text":"","text_tokens":[],"title":"Visual Studio IntelliCode","title_tokens":["studio","intellicode","visual"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#urdf","text":"","text_tokens":[],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#markdown-all-in-one","text":"VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["搜索","插件","在","，","网上","支持","大家","vscode","最","推荐","可以","自己","众多","环境","。","出","以上","开发","只","配置","也","作为","个人","喜欢","的"],"title":"Markdown All in One","title_tokens":["in","one","all"," ","markdown"]}]}