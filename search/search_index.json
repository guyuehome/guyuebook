{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的电气时代。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的数字时代，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发，智能机器人时代正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。 教程链接 课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 博客泡泡： https://www.guyuehome.com/ 教程问答： https://www.guyuehome.com/bubble/index 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 参考资料： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["，","时代","仿生","operating","控制","更加","井喷","图文","感知","动作","exc6","多","年前","设备","过程","按照","码","逐渐","教器","释放","2000","com","book","爆发","这","完全","软件","tutorials","汽车","太","层面","算机","序幕","随着","后","不断丰富","四足","的","呈","快速","s","参考资料","伺服电机","传感","计算机","七八十","重要","guyuehome","等","丰富","。","减速机","状","八十年","智能化","教程","：","发展","十年","资料","21","此时","计算","提出","就是","驱动器","人工智能",".","_","时期","技术","服务","对","但是","狗","2015","数字","最佳","动力","视觉","问答","开发","思考","博客","检测","工厂","大","八十","横跨","主要","我们","1dvxugmhxlxnsnfdezuxw0g","自主","课程","传感器","载体","伺服","三个","必将","源码","缺少","驱动","操控","也","https","baidu"," ","送餐","感器","了","robot","提取","电气","机器","生产","视频","电机","index","经历","只能","要求","操作系统","没有","前夜","减速","github","、","不断","之后","参考","于","命令","局部","家庭","劳动力","应用","执行","帮助","这是","之一","环境","更","类型","链接","有限","劳动","拉开","ai","—","正式","class","www","拉开序幕","主角","gitee","工业","不过","驾驶","agv","关注","人工","系统","高","工业生产","业生","是","智能","年","和","/","ros2","七八十年","人类","机器人","控制器","泡泡","七八",":","并","俗称","system","bubble","最为","而言","热点","自动","成为","依然","出现","操作","由示","pan"],"title":"引言","title_tokens":["引言"]},{"location":"#_1","text":"课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 博客泡泡： https://www.guyuehome.com/ 教程问答： https://www.guyuehome.com/bubble/index 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 参考资料： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["教程","：","链接","图文","https","资料","21"," ","baidu","exc6","提取","class","www",".","视频","_","gitee","index","码","book","com","github","tutorials","/","ros2","问答","泡泡","参考","博客",":","s","bubble","参考资料","1dvxugmhxlxnsnfdezuxw0g","课程","源码","guyuehome","pan"],"title":"教程链接","title_tokens":["教程","链接"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["，","许可","有权","版权","镜像","所有","内容","追究其","课件","任何","产品","捆绑","（","人才培养","赋能","面向","高质量","均","万人","努力","com","及","人才","与","模式","包括","将","为","实践","但","致力于","使用","学习","仅限","究其","校企","的","创新","联系","用户","通过","@","生态","guyuehome","等","未来","。","对本","武汉","ros","进行","建立","未经","集","网站",".","学","交流学习","有限公司","1000","拥有","创建","120","2011","开发","抄录","传播","合作","至今","销售","课程","源码","优质","微控","违反","高质","作品","公司","线上","》","限于"," ","上述","《","机器","授权","法律","被","社区","视频","出版","地区","企业","或","书面","万字","上","声明者","面向未来","培养","、","一体","不得","累积","居","致力","）","图书","不","平台","知名","小时","学习者","个人","明者","华语","修改","法律责任","责任","声明","+","科技","请","其它","有限","依法","ai","精锋","众多","www","超过","追究","畅销","如需","是","年","和","brand","高校","提供","机器人","质量","合法","交流","古月","构建","本","复制","单位"],"title":"关于教程","title_tokens":["教程","关于"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["，","内容","（","人才培养","赋能","面向","高质量","万人","努力","com","及","人才","与","模式","为","实践","致力于","学习","校企","的","创新","用户","通过","生态","guyuehome","等","未来","。","ros","建立","集",".","交流学习","1000","创建","120","2011","开发","合作","至今","课程","优质","高质","线上","》"," ","《","机器","社区","视频","出版","地区","企业","万字","面向未来","培养","、","一体","累积","居","致力","）","图书","平台","知名","小时","学习者","华语","+","ai","众多","www","超过","畅销","是","年","高校","提供","机器人","质量","交流","古月","构建"],"title":"学机器人，上古月居","title_tokens":["，","上","机器","学","古月","机器人","居"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["，","许可","有权","版权","镜像","所有","追究其","课件","任何","产品","捆绑","均","com","包括","与","将","为","但","使用","学习","仅限","究其","联系","的","用户","@","guyuehome","等","。","对本","武汉","进行","未经","网站",".","有限公司","拥有","抄录","传播","销售","课程","源码","微控","违反","作品","公司","限于"," ","上述","授权","法律","被","视频","或","书面","声明者","、","不得","居","不","个人","明者","修改","法律责任","责任","声明","科技","请","其它","有限","依法","精锋","追究","如需","和","brand","合法","古月","本","复制","单位"],"title":"版权声明","title_tokens":["声明","版权"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/","text":"ROS/ROS2是什么 智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。 ROS的诞生 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS的发展 ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称ROSCon，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。 ROS的特点 ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的应用案例在社区中沉淀下来； ROS本身也是完全开源的，商业许可证非常宽松； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品，缩短了产品的上市时间； ROS也可以跨平台使用，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多支持工业应用的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。 参考资料 关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["近两年","研究","广泛","operating","所有","那","如果","模块","受限","工程","远","大会","零","最高","起点","而且","该","人才","嘉宾","官方","多万","提高","站","据库","等等","各项","多媒体系统","通过","便宜","传感","？","福大","具备","精致","肩负","等","让","标志","数据库","说明","这些","简单","总称","向前","wiki","2010","棒","百科全书","起","组成","笔记","索引","投资","用于","做成","方式","网站","围绕","普遍","确定","方向","聊天","之内","之","特性","服务","引擎","加上","熨烫","率","问答","最佳","如何","臂","轮子","开发","turtlebot","风险投资","专业","体系","干","系列","页面","google","这样","原本","上图","外观","其次","所学","普及","缩短","稳定","图","公司","线上","游戏","肩膀","上市","存储","全球化","万","已有","2017","大部分","首先","头发","然后","robot","希望","统统","做出","社区","视频","此","重量级","找到","时间","电路","绝对","操作系统","衣服","简称","举办","访问","为什么","几年","成熟","大有可为","齐聚一堂","增长速度","望而却步","、","繁荣","制造","浪潮","木头","intel","居","面纱","直到","answers","地域","不","基本上","万左右","价格便宜","比如","此后","团队","重量","帮助","个人","想到","低","扩展","怀揣","—","跟随","针对","之上","叠","维基","代表","玩耍","看中","美妙","情况","智能","年","高度","和","以叠","100","ros2","性能","涉及","直接","全人","长远","机器人","下来","其中","这个","关于","可为","处理","packages","创意","古月","操作","只要","大部","时代","创始","用","控制","工程师","实现","充足","来自","查看","应用软件","标准","深知","新","一定","过程","熟悉","你","万人","两年","将","青年","为","汽车","大笔","2","软件系统","一次","随着","趋势","陪","学习","这群","的","参考资料","款","甚至","掀起","宽松","完成","绝大","很","增长","包","全人类","。","长期","教程","250","ros","主阵地","物体","此时","整理","提出","就是","巨大","推出","更新","工具","之旅","作为","一个","爆款","给","不多","；","尽量","掌握","但是","同时","维基百","xbox","2011","目标","访问量","特点","神兵","体感","尝试","就","前","新增","欢迎","第一次","主要","40","大大","不到","课程","2012","可能","百科","案例","正在","“","也","限于","价格","时候","研发","或者","阵地","现在","被","柔性","第一个","这里","发表","各种各样","看到","速度","没有","全球","收拾","年轻","可以","原型","原因","得到","一群","明智","根据","正如","在","发布","入门","没想到","洗衣","c","学术","起来","活动","好","身影","入门教程","全新","讲解","复杂","应用","解决","一系列","已经","斯坦福","改为","风险","游戏机","代","独立","对于","通常","配合","成本","接下来","通信","不要","成功","局限性","20","步伐","名称","大家","活跃","功能","而生","做","是","高效","商业化","机械","分享","只","单独","想法","集合","人类","开始","他们","并","向","system","不开","浏览","次数","成为","重新","给出","这位","认识一下","最后","上边","生态系统","移动机器人","实验室","虽好","2014","复用","而","水下","百万","不乏","产品","类似","代码","早期","动机","搜索","叫做","数据","板块","基本","努力","资金","大量","时间轴","这","之王","领域","完全","无论","一大步","有人","推荐","方法","讨论","带领","进化","使用","选择","时至今日","五年","推动","月底","国家","不想","部件","新鲜","2007","真正","生态","ros1","重要","论坛","150","真的","清晰","跨平台","当时","来到","移动","量级","智慧","发展","很多","下","知识","认识","助推","每年","为例","几百","人数","家","联合","同样","肯定","不是","手机","个","很快","对","支持","采用","linux","2015","注意","第一","年轻人","几个","事情","核心","一切","大","没想","所以","多年","程度","横跨","微软","毛巾","什么","我们","因","详细","受限于","电脑","资源","笔记本","基于","扫地","介于","总体","其实","做到","上去","整合","开发工具","一大笔","效率","感器","了","提取","日常","底盘","历经","一家","亚马逊","容易","乐意","有志","生态系","托管","终于","却","github","使命","得以","人形","虽然","一款","一届","部分","参考","willow","开源","元素","别人","成果","神秘","a","变为","加快","却步","嵌入","苹果","活跃度","实验","友好","问题","度","本身","kinect","四项","正式","几百万","能够","效果","工业","25","零部件","各种","personal","多项","笔记本电脑","正式版","啦","有","曲线","/","还有","泡泡","从","越来越","跑","一大","商业","最为","向前走","着","自身","无疑","本","同一","肩负着","，","许可","才","居高不下","野蛮","人","关键","一起","几乎","同年","内容","做饭","多","因为","越来","疫情","任何","维基百科","机制","来看","加","浏览量","windows","斯坦福大学","org","结晶","迎来","逐渐","全书","记录","一系","软件","革命","world","亚马","层面","利器","局限","促使","开发者","迭代","新鲜事","快速","到","强悍","roscon","暴露","复合","近几年","用户","来讲","一堂","相关","后续","进步","humble","一大笔钱","这款","呢","智能化","轰动","了解","：","一样","资料","剪头发","限性","进行","投了","为了","中","推进","还","条","快","今日","出来",".","总而言之","适用","离不开","初期","无论是","频繁","打","技术","garage","多媒体","挑战","答案","年底","不断更新","15","下载","120","动力","大学","其他","沉淀","所有人","来","设计","框架","至今","资本","传感器","源码","做法","媒体","全","月","80","项目","左右","更好","光靠","把"," ","都","由","机器","以","这一波","造","以上","index","一段","经历","世界","巨人","一下","conference","当初","上","既然","排名","图中","不断","于","提问","一些","算是","每","5","ubuntu","要","还是","平台","后期","更为","许可证","无聊","这是","只想","一套","台球","接下","更","张图","不下","非常","版","回答","圈","2022","踏上","又","统计","自己","系统","嵌入式","会","回到","四大","有没有","提供","两个","pr2","每个","万万","绝大部分","诞生","同理","从中","迅猛","进入","说干就干","分钟","一步","b","差不多","版本","模块化","采购","而言","同学","各样","”","discourse","大步","不同","不仅","场景"],"title":"ROS和ROS2是什么","title_tokens":["是","和","什么","ros2","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#rosros2","text":"智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。","text_tokens":["，","全","。","呢","正在","时代","智能化","接下","一起","量级","ros","接下来","那"," ","提出","认识","巨大","了","中","机器","又","重量级","重量","方向","大家","操作系统","系统","挑战","而生","一下","嘉宾","这","是","对","智能","高度","ros2","机器人","开发","下来","带领","进化","的","向","就","面纱","什么","我们","？","神秘","操作","掀起","应用","场景","这位","认识一下"],"title":"ROS/ROS2是什么","title_tokens":["是","什么","/","ros2","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。","text_tokens":["最后","同一","，","才","研究","实验室","用","人","一起","所有","实现","充足","那","如果","做饭","多","因为","越来","应用软件","类似","标准","深知","斯坦福大学","你","而且","资金","这","一系","青年","软件","层面","一大步","有人","2","软件系统","一次","陪","的","推动","强悍","款","不想","福大","甚至","2007","？","部件","精致","重要","真的","等","完成","很","。","当时","呢","这款","轰动","向前","：","ros","物体","剪头发","很多","此时","整理","就是","组成","中","为例","用于","还","条","家","出来","联合","同样","初期","一个","聊天","之内","肯定","技术","不是","打","服务","答案","手机","个","很快","但是","熨烫","如何","大学","开发","第一","专业","事情","干","系列","尝试","一切","所有人","就","这样","所以","横跨","第一次","毛巾","什么","我们","设计","外观","框架","因","不到","基于","可能","图","光靠","也"," ","都","时候","头发","效率","了","robot","或者","机器","做出","柔性","找到","容易","电路","看到","有志","操作系统","衣服","没有","收拾","为什么","可以","原型","上","却","既然","一群","得以","、","图中","虽然","一款","在","木头","洗衣","学术","一些","不","5","别人","要","复杂","平台","后期","团队","应用","无聊","帮助","个人","一系列","已经","斯坦福","一套","苹果","台球","代","更","独立","对于","实验","问题","低","非常","—","针对","圈","叠","大家","自己","玩耍","零部件","系统","功能","而生","做","是","高效","personal","机械","智能","年","有没有","和","有","以叠","100","分享","涉及","性能","只","pr2","想法","机器人","诞生","其中","从中","越来越","这个","说干就干","分钟","他们","并","一大","向前走","处理","大步","成为","给出","操作","只要"],"title":"ROS的诞生","title_tokens":["ros","的","诞生"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_1","text":"ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称ROSCon，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。","text_tokens":["肩负着","，","近两年","居高不下","时代","野蛮","创始","operating","人","虽好","控制","所有","关键","2014","而","同年","来自","百万","多","因为","越来","不乏","类似","疫情","受限","早期","大会","过程","斯坦福大学","熟悉","叫做","起点","迎来","逐渐","该","两年","时间轴","这","官方","为","软件","world","亚马","大笔","局限","随着","使用","开发者","这群","的","迭代","快速","推动","到","roscon","五年","暴露","月底","款","便宜","传感","福大","2007","真正","一堂","重要","肩负","等","让","绝大","标志","增长","humble","一大笔钱","。","了解","长期","2010","教程","ros","起","一样","发展","限性","下","投了","提出","进行","助推","每年","笔记","中","为了","投资","几百","推出","出来","适用","确定","一个","garage","爆款","给","服务","年底","很快","但是","支持","采用","加上","2015","注意","xbox","大学","2011","开发","turtlebot","风险投资","年轻人","第一","体感","就","大","前","所以","原本","没想","微软","多年","设计","我们","大大","资本","受限于","电脑","传感器","笔记本","扫地","普及","2012","稳定","介于","公司","线上","项目","游戏","把","也","限于","价格","2017"," ","一大笔","大部分","感器","了","robot","提取","现在","底盘","机器","历经","被","一家","第一个","这里","时间","亚马逊","各种各样","经历","操作系统","举办","简称","全球","conference","几年","成熟","当初","年轻","可以","原型","齐聚一堂","原因","终于","望而却步","使命","、","一届","在","发布","一款","部分","本","于","intel","没想到","willow","开源","直到","每","5","价格便宜","身影","ubuntu","全新","讲解","后期","此后","团队","应用","变为","这是","加快","却步","只想","个人","斯坦福","改为","风险","已经","游戏机","更","想到","不下","问题","成本","成功","kinect","局限性","版","—","跟随","步伐","正式","圈","2022","名称","几百万","能够","之上","自己","系统","功能","各种","做","看中","是","会","回到","笔记本电脑","正式版","年","直接","和","ros2","分享","pr2","每个","机器人","绝大部分","万万","诞生","其中","从","这个","越来越","进入","一大","他们","system","开始","商业","版本","着","各样","成为","操作","不仅","大部","单独"],"title":"ROS的发展","title_tokens":["ros","的","发展"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_2","text":"ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的应用案例在社区中沉淀下来； ROS本身也是完全开源的，商业许可证非常宽松； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品，缩短了产品的上市时间； ROS也可以跨平台使用，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多支持工业应用的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["最后","，","广泛","生态系统","许可","移动机器人","复用","一起","实现","水下","那","多","模块","产品","越来","机制","标准","新","远","动机","windows","零","结晶","将","人才","这","领域","软件","完全","无论","汽车","提高","站","促使","使用","的","时至今日","快速","多媒体系统","到","复合","来讲","具备","ros1","生态","宽松","进步","这些","。","全人类","简单","总称","跨平台","智能化","向前","移动","：","ros","发展","智慧","很多","就是","组成","中","推进","用于","还","家","今日","做成","围绕","工具","普遍","无论是","一个","技术","不是","多媒体","之","给","特性","；","尽量","引擎","对","支持","同时","率","linux","臂","轮子","开发","体系","目标","特点","沉淀","核心","来","就","新增","这样","至今","我们","设计","缩短","做法","媒体","案例","做到","公司","肩膀","上市","“","全球化","把","也","已有","上去","整合"," ","都","开发工具","由","了","机器","统统","以","一家","社区","被","此","造","这里","时间","各种各样","看到","巨人","生态系","全球","可以","上","明智","繁荣","、","人形","正如","制造","在","部分","c","开源","身影","别人","还是","成果","比如","平台","a","许可证","应用","已经","嵌入","更","通常","友好","通信","非常","不要","本身","怀揣","大家","自己","工业","代表","系统","功能","嵌入式","各种","做","是","会","商业化","机械","多项","智能","和","有","四大","全人","直接","ros2","分享","长远","人类","集合","机器人","下来","从","同理","这个","跑","一步","越来越","他们","并","b","商业","模块化","采购","向前走","着","自身","”","创意","各样","成为","重新"],"title":"ROS的特点","title_tokens":["ros","的","特点"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_3","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。","text_tokens":["上边","，","人","查看","如果","多","维基百科","任何","越来","加","来看","新","浏览量","org","最高","数据","你","万人","基本","记录","这","多万","革命","利器","据库","讨论","等等","各项","使用","开发者","趋势","学习","选择","的","新鲜事","快速","到","用户","通过","近几年","国家","？","新鲜","论坛","重要","150","相关","等","绝大","数据库","很","包","说明","增长","清晰","。","这些","呢","wiki","教程","250","棒","：","ros","发展","很多","就是","提出","助推","中","索引","快","人数","网站","方式",".","总而言之","作为","一个","频繁","给","不多","；","15","下载","问答","维基百","动力","最佳","开发","几个","访问量","其他","核心","页面","神兵","就","大","程度","上图","什么","我们","40","资源","源码","总体","百科","其实","月","正在","80","万","存储","左右","也","整合"," ","都","大部分","了","研发","希望","日常","现在","机器","这一波","社区","这里","发表","以上","index","乐意","绝对","看到","速度","访问","全球","几年","大有可为","可以","上","增长速度","得到","排名","、","根据","浪潮","在","发布","部分","参考","本","起来","元素","算是","answers","地域","活动","不","基本上","万左右","每","比如","更为","应用","这是","已经","活跃度","张图","问题","度","非常","四项","20","回答","维基","大家","活跃","统计","代表","25","功能","各种","是","会","情况","和","有","曲线","两个","每个","机器人","绝大部分","从","其中","越来越","迅猛","差不多","关于","可为","最为","而言","packages","浏览","次数","discourse","无疑","成为","不同","大部"],"title":"ROS的社区","title_tokens":["ros","的","社区"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#_1","text":"关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["最后","，","几乎","一起","所有","工程师","内容","工程","代码","一定","搜索","你","万人","板块","努力","全书","将","大量","这","之王","推荐","方法","使用","学习","的","参考资料","重要","后续","绝大","。","来到","教程","百科全书","ros","主阵地","资料","知识","中","还","网站","更新","工具","离不开","作为","一个","之旅","技术","不断更新","掌握","120","开发","几个","google","欢迎","详细","主要","我们","其次","课程","所学","百科","项目","更好","也"," ","都","大部分","首先","然后","阵地","机器","社区","视频","这里","找到","一段","世界","托管","可以","github","不断","在","部分","参考","本","入门","居","开源","提问","好","入门教程","要","解决","问题","配合","扩展","—","踏上","效果","大家","是","会","美妙","啦","和","有","还有","ros2","分享","提供","泡泡","机器人","绝大部分","从","这个","关于","开始","不开","最为","同学","古月","成为","大部"],"title":"参考资料","title_tokens":["参考","资料","参考资料"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/","text":"ROS2对比ROS1 在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。 ROS1的局限性 首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。 全新的ROS2 ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。 ROS2 vs ROS1 系统架构 在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。 DDS通信 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。 核心概念 ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。 编码方式 再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。 命令行 最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随课程，你就会慢慢理解这些特性。","text_tokens":["房子","广泛","研究","协议","大致","所有","可靠","更加","那","如果","除此之外","表示","能力","强","工程","从而","搭载","雷达","变得","厂家","总之","远比","面向","amr","以及","该","自家","与","印象","编程","批量","很大","提高","但","优化","接近","实力","通过","具体","算力","除了","分布式","？","具备","发布者","即可","等","让","api","方便","说明","切记","这些","简单","安装","测试","减少","最早","用于","做成","方式","天翻地覆","学","当","第二种","完整","无法","信息","不爽","特性","服务","编译系统","借助","右侧","架构","率","最佳","如何","开发","信号","先","打交道","大部头","这样","原本","多个","省略","宕机","普及","一页","稳定","乱麻","推倒","驱动","放在","公司","discovery","建筑","安全","封装","大部分","共享内存","首先","然后","一团乱","加密","社区","集成","消费","找到","时间","接收","可读性","操作系统","图片","简称","可移植性","能","为什么","哪些","走","慢慢","如","、","之后","高昂","初次","前方","不","）","国际","策略","接入","比如","这台","指定","完整性","修改","运动","middleware","中间层","入侵","下要","深入","致使","怀揣","干扰","—","vs","另","针对","跟随","自","之上","主角","另外","colcon","它","小","高","基本保障","保证","android","一种","智能","和","也许","直接","借鉴","突然","ros2","性能","一团乱麻","课时","良好","受制","长远","适合","可读","机器人","系统工程","其中","这个","小伙伴","主","航天","通用","格局","处理","简单明了","操作","大部","收","只要","轻松","干掉","听说","二个","时代","左侧","由于","用","控制","rosrun","实现","成功经验","充足","不难理解","厂商","不断涌现","标准","幅度","（","一定","设备","过程","熟悉","延迟","你","产品开发","不会","客户端","部署","将","看看","当然","交道","运算","为","汽车","rmw","下边","软件系统","随着","学习","只有","的","内部","带来","相对","运行","款","动力学","甚至","python3","不太","最大","完成","绝大","分解","开发成本","差异","。","意义","间层","教程","ros","最终","计算","就是","举","面临","级别","巨大","程序","用到","工具","一个","给","怎样","；","尽量","陆续","但是","同时","catkin","应用层","编译器","目标","1ms","各位","就","大幅","主要","课程","解算","小伙","通信接口","工作","可能","走向","rosbuild","唯一","opensplice","道坎","编码","丢","消费市场","稳定性","体验","迈过","之前","也","强壮","精力","时候","完善","研发","或者","多功能","可靠性","第一个","这里","各种各样","所示","或","是否","没有","全球","可以","图像","例子","在","发布","几点","通信协议","命令","国际标准","复杂度","学术","产品化","毛坯房","学术研究","好","对系统","最","写","全新","讲解","复杂","应用","周期","不再","解决","已经","最新","风险","编译","足够","独立","售价","链接","对于","成本","接触","名字","是因为","通信","rtos","全部","成功","不要","局限性","二代","面对","不够","名称","现有","驾驶","大家","不过","why","功能","新一代","做","是","网络","导致","个体","更换","一团","受制于","理器","比","他们","并","以下","流程","开始","调试","改","重新","出现","移植性","最后","编程语言","电脑系统","复用","而","单兵作战","勿躁","百万","重来","产品","类似","代码","成","符合","装修","再","叫做","数据","一旦","盖","基本","需要","大量","这","条件","选项","无论","阶段","方法","之间","除此","切换","带领","使用","内","选择","两者","是从","地方","纠结","经验","fastrtps","第二代","方案","工作站","接口","真正","ros1","力学","重要","未来","丰富","新版","伙伴","一边","尽力","变化","跨平台","不用","一代","彼此","rostopic","发展","很多","下","建立","听","发送","角色","c++","几百","相比","到底","指挥","同样","单兵","总结","物","肯定","不是","手机","只是","对","支持","linux","注意","变革","实时性","看","第一","核心","大","所以","换成","什么","我们","过来","电脑","资源","市场","基于","三个","一一","总体","其实","有线","dds","做到","黑客","语言","中间","run","至关","担心","了","一家","广泛应用","应该","企业","分散","只能","不难","出错","一致","使命","之外","角度","虽然","一款","部分","微控制器","开源","会成","软件开发","启动","内存","话题","交给","明显","诟病","细节","嵌入","推倒重来","类型","问题","颠覆性","难度","有限","涌现","一行","整体","完","可移植","几百万","能够","tcp","走向市场","库会","里","各种","客户","编码方式","提","打成","啦","有","毛坯","开发方式","/","还有","命令行","从","分布","么","越来越","商业","安全性","最为","以下几点","体现","自动","依然","真实","上手","本","联网","，","配置","考虑","行为","陌生","几乎","较","有且","发","含义","没","多","因为","任何","越来","来看","机制","windows","一本","共享","需求","进程","按照","节点","加入","还会","过","结合","软件","概念","编写","层面","局限","布式","第二个","千差万别","开发者","udp","5g","后","专注","升级","到","用户","颠覆","得","来讲","生活","不好","后续","相关","属性","过去","搬","ceo","第二","呢","更接","了解","总体而言","：","消失","一样","底层","限性","进行","为了","中","master","还","解密","适用","ament","频繁","挑战","答案","常","大幅度","满足","topic","动力","至关重要","诸多","其他","而已","来","python","部头","对比","设计","框架","标准化","性","网络连接","全","交付","先进","项目","管理器","更好","把"," ","都","移植","上升","对象","调用","历史","机器","生产","批量生产","定性","某","不能","他","之初","迁移","以上","可选项","要求","一下","层","上","常用","确实","定义","不断","灵活","尤其","于","翻地","存在","继续","家庭","一些","实时","每","时","适配","要","平台","保障","稍安","翻新","mcu","一套","管理","环境","更","张图","发现","发成","请","macos","非常","基础","理解","原有","连接","可选","担忧","面向对象","自己","去","通用性","作战","嵌入式","系统","会","揭秘","保留","暂且","便于","协作","提供","似乎","pr2","控制器","绝大部分","两个","诞生","二种","只不过","每个","想要","经常","一步","版本","行人","历史使命","运动学","wifi","各样","而言","更具","依赖","项目管理","不同","不仅","场景","100ms"],"title":"ROS2对比ROS1","title_tokens":["对比","ros1","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2ros1","text":"在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。","text_tokens":["，","第二","听说","变化","。","之前","ros"," ","就是","多","来看","二代","到底","名称","你","一个","或","能","过","做","看看","这","上","和","也许","有","ros2","在","从","使用","么","其中","学习","大","就","的","不","对比","第二代","我们","？","ros1"],"title":"ROS2对比ROS1","title_tokens":["对比","ros1","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros1","text":"首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。","text_tokens":["，","研究","由于","用","可靠","更加","充足","单兵作战","那","不断涌现","因为","产品","类似","来看","能力","搭载","设备","数据","当然","这","运算","批量","软件","条件","汽车","随着","实力","的","地方","内部","运行","款","具体","算力","？","具备","工作站","ros1","甚至","完成","让","绝大","。","呢","不用","一代","：","ros","发展","最终","计算","就是","最早","为了","中","级别","用于","做成","天翻地覆","单兵","一个","服务","答案","；","支持","但是","开发","第一","目标","就","这样","原本","什么","我们","设计","框架","资源","课程","市场","普及","工作","网络连接","走向","有线","先进","黑客","丢","也"," ","大部分","都","首先","了","或者","历史","机器","生产","批量生产","他","可靠性","第一个","找到","时间","只能","没有","为什么","可以","上","不断","高昂","虽然","一款","在","部分","翻地","学术","家庭","一些","实时","学术研究","不","要","平台","复杂","比如","这台","应用","已经","嵌入","风险","足够","独立","售价","类型","问题","入侵","成本","通信","是因为","有限","涌现","致使","干扰","—","针对","不够","连接","主角","担忧","走向市场","自己","它","小","作战","驾驶","why","嵌入式","系统","新一代","各种","是","会","保证","网络","和","有","ros2","良好","似乎","pr2","机器人","绝大部分","适合","诞生","从","并","航天","处理","自动","出现","大部"],"title":"ROS1的局限性","title_tokens":["的","局限","ros1","限性","局限性"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2","text":"ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。","text_tokens":["房子","所有","可靠","更加","那","工程","强","搭载","远比","amr","以及","与","很大","但","优化","具体","算力","除了","分布式","？","具备","等","让","api","方便","说明","这些","简单","测试","用于","第二种","完整","无法","特性","编译系统","借助","架构","最佳","如何","信号","开发","这样","原本","宕机","稳定","推倒","建筑","安全","加密","消费","操作系统","能","、","前方","）","不","策略","比如","完整性","修改","运动","入侵","下要","怀揣","针对","之上","colcon","它","基本保障","android","一种","智能","和","直接","借鉴","ros2","性能","课时","受制","长远","适合","机器人","系统工程","这个","通用","格局","操作","时代","用","控制","实现","成功经验","标准","（","一定","不会","部署","为","汽车","的","相对","运行","动力学","甚至","python3","完成","分解","差异","。","ros","最终","就是","面临","巨大","工具","一个","给","怎样","尽量","但是","同时","catkin","编译器","1ms","就","解算","课程","工作","可能","走向","rosbuild","体验","消费市场","稳定性","强壮","也","时候","研发","或者","第一个","各种各样","没有","可以","在","几点","产品化","毛坯房","好","对系统","全新","复杂","应用","周期","不再","已经","最新","风险","编译","独立","链接","通信","rtos","全部","成功","面对","驾驶","大家","是","网络","导致","个体","受制于","理器","比","他们","并","以下","流程","调试","重新","出现","电脑系统","重来","产品","类似","代码","装修","叫做","数据","一旦","盖","基本","需要","大量","这","无论","阶段","方法","之间","使用","内","选择","纠结","经验","方案","接口","真正","ros1","力学","未来","新版","尽力","跨平台","变化","不用","很多","下","发送","角色","c++","相比","肯定","不是","手机","只是","对","linux","变革","实时性","第一","大","所以","我们","电脑","市场","dds","做到","黑客","语言","了","出错","使命","虽然","一款","微控制器","明显","细节","推倒重来","问题","颠覆性","能够","各种","提","打成","有","毛坯","分布","越来越","安全性","以下几点","体现","自动","，","考虑","行为","较","多","任何","越来","来看","机制","windows","需求","节点","还会","结合","软件","编写","层面","布式","千差万别","开发者","后","升级","到","颠覆","得","生活","不好","后续","过去","第二","呢","：","进行","为了","中","master","还","解密","ament","挑战","满足","动力","诸多","python","设计","框架","标准化","性","网络连接","全","项目","管理器","把"," ","都","移植","历史","机器","定性","不能","之初","要求","一下","上","尤其","于","继续","实时","要","平台","保障","翻新","mcu","管理","环境","更","发现","macos","基础","原有","连接","自己","去","通用性","系统","会","保留","协作","提供","两个","控制器","二种","经常","行人","历史使命","运动学","wifi","各样","更具","项目管理","不同","不仅","场景","100ms"],"title":"全新的ROS2","title_tokens":["的","ros2","全新"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2-vs-ros1","text":"","text_tokens":[],"title":"ROS2 vs ROS1","title_tokens":["vs","ros1","ros2"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_1","text":"在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。","text_tokens":["，","左侧","协议","大致","所有","有且","更加","而","那","如果","不难理解","类似","机制","变得","标准","从而","成","雷达","再","windows","共享","数据","进程","节点","客户端","需要","将","大量","印象","过","这","交道","选项","但","方法","下边","两者","udp","内","只有","是从","学习","的","通过","得","接口","ros1","不太","重要","后续","让","ceo","这些","变化","。","简单","了解","安装","间层","彼此","消失","ros","一样","底层","很多","进行","建立","就是","听","角色","程序","中","master","方式","指挥","一个","频繁","肯定","信息","右侧","架构","应用层","linux","注意","至关重要","看","开发","先","打交道","而已","就","这样","主要","对比","我们","框架","基于","稳定","乱麻","通信接口","驱动","dds","公司","中间","discovery","管理器","把","至关","也"," ","都","封装","时候","共享内存","完善","了","调用","一团乱","找到","接收","应该","可选项","操作系统","哪些","不难","层","走","可以","上","图像","、","在","发布","通信协议","会成","不","最","好","写","内存","比如","复杂","应用","明显","一套","管理","张图","中间层","接触","发现","名字","请","通信","macos","rtos","深入","—","整体","理解","连接","自","可选","tcp","另外","大家","不过","它","里","库会","系统","客户","是","会","和","有","突然","ros2","一团乱麻","提供","更换","一团","只不过","这个","理器","开始","并","简单明了","依赖","操作"],"title":"系统架构","title_tokens":["架构","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#dds","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。","text_tokens":["，","广泛","听说","配置","轻松","协议","用","复用","实现","发","更加","如果","多","厂商","产品","类似","标准","厂家","代码","符合","再","总之","熟悉","延迟","数据","需求","按照","加入","产品开发","该","自家","基本","部署","当然","这","为","软件","rmw","层面","提高","优化","软件系统","切换","udp","选择","5g","的","纠结","带来","用户","fastrtps","得","除了","来讲","？","接口","ros1","最大","等","丰富","属性","让","开发成本","这些","变化","。","简单","安装","不用","ros","一样","底层","减少","就是","举","程序","中","为了","master","相比","适用","一个","频繁","物","肯定","无法","不是","给","不爽","常","满足","率","如何","开发","先","目标","其他","就","所以","多个","这样","省略","设计","我们","过来","基于","三个","稳定","opensplice","其实","唯一","dds","交付","放在","丢","把","也","精力"," ","都","移植","然后","了","机器","某","加密","广泛应用","一家","社区","这里","应该","是否","简称","可以","之外","、","定义","例子","在","灵活","通信协议","部分","于","国际标准","复杂度","开源","一些","每","时","不","好","国际","写","接入","要","适配","比如","最","复杂","指定","应用","交给","诟病","解决","更","middleware","对于","问题","成本","发成","通信","另","一行","完","能够","tcp","不过","系统","功能","高","各种","做","是","会","一种","/","ros2","还有","性能","提供","更换","每个","机器人","想要","么","这个","并","版本","商业","改","重新","不同","专注","场景","只要","收","联网"],"title":"DDS通信","title_tokens":["dds","通信"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_2","text":"ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。","text_tokens":["已经","这些","，","广泛","。","意义","第二","陌生","二个","几乎","不用","也","含义","ros","担心","很多"," ","百万","非常","如果","了","中","几百","方式","熟悉","几百万","迁移","这里","应该","大家","以及","没有","全球","过","尽量","会","概念","一致","和","有","开发方式","保留","ros2","方法","便于","在","第二个","开发","部分","其中","从","开发者","使用","学习","小伙伴","各位","的","并","存在","就","到","不","我们","讲解","依然","ros1","课程","应用","一一","本","伙伴","小伙"],"title":"核心概念","title_tokens":["概念","核心"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_3","text":"再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。","text_tokens":["，","编程语言","用","实现","勿躁","多","再","过程","一本","面向","看看","这","编程","软件","提高","方法","接近","带领","学习","的","来讲","具体","具备","发布者","ros1","后续","切记","一边","搬","。","更接","教程","总体而言","程序","中","用到","方式","同样","学","当","一个","特性","如何","开发","来","就","部头","大部头","我们","课程","一页","总体","道坎","编码","语言","项目","更好","迈过","也"," ","移植","对象","机器","企业","所示","可读性","图片","可移植性","确实","如","角度","之后","发布","在","一些","软件开发","写","稍安","更","发现","不要","难度","可移植","面向对象","不过","大家","是","会","和","暂且","ros2","可读","两个","机器人","从","一步","版本","而言","操作","真实","大部","移植性"],"title":"编码方式","title_tokens":["方式","编码方式","编码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_4","text":"最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随课程，你就会慢慢理解这些特性。","text_tokens":["最后","，","干掉","rosrun","控制","所有","大致","没","除此之外","如果","表示","幅度","再","你","节点","印象","编程","概念","除此","选择","的","相对","ros1","后续","相关","即可","这些","。","变化","教程","rostopic","：","ros","下","就是","中","master","工具","总结","一个","特性","对","大幅度","陆续","topic","开发","核心","就","大幅","对比","我们","课程","dds","run","把","也"," ","都","上升","了","某","集成","多功能","分散","以上","常用","慢慢","之外","在","初次","命令","每","启动","好","话题","比如","更","独立","通信","难度","—","跟随","理解","现有","大家","功能","做","是","会","揭秘","一种","啦","和","有","命令行","ros2","换成","主","最为","而言","上手"],"title":"命令行","title_tokens":["命令","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/","text":"ROS2安装方法 本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。 Linux系统简介 时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。 Ubuntu系统简介 我们后续课程使用到的Linux发行版就是ubuntu系统。 Ubuntu诞生于2004年10月份，每六个月发布一个新版本，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。 Ubuntu虚拟机安装 虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下： 1. 下载系统镜像 下载链接： https://ubuntu.com/download/desktop 2. 在虚拟机中创建系统 3. 设置虚拟机硬盘大小 4. 设置Ubuntu镜像路径 5. 启动虚拟机 6. 设置用户名和密码 7. 等待系统安装 8. 完成安装 Ubuntu系统安装好后，大家可以先随意使用熟悉一下。 ROS2系统安装 接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下： 1. 设置编码 $ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8 2. 添加源 $ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844 3. 安装ROS2 $ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop 4. 设置环境变量 $ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。 ROS2示例测试 为了验证ROS2安装成功，我们可以通过以下示例进行测试。 示例一：命令行示例 先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。 示例二：小海龟仿真示例 再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。 附：虚拟机镜像 为了方便大家入门学习，我们也提供了预装好ROS2软件和教程代码的虚拟机镜像，有需要的小伙伴可以通过以下链接下载： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["list","光大","1991","介绍","除此之外","热情","如果","all","真理","发行版","表示","该","一石激起千层浪","与","上层","激起","实践","合适","并且","二句","但","等等","修复","实力","小海龟","s","者","通过","可视","arch","除了","计算机","？","lsb","发布者","等","强大","让","方便","说明","安装","(","键盘","测试","setup","位置","源","-","之内","服务","by","加上","如何","正常","开发","先","原本","这样","多个","基本相同","应用程序","ubuntu22.04","决定","编号","us","稳定","硬盘","公司","占据","已有","baidu","变动","兼容","提到","时间","dev","37844","绝对","操作系统","成熟","、","之后","报错","字符串","试试","何人","不","会加","比如","通讯","个人","运动","talker","发挥","pro","一应","验证","持续","好后","发行","—","变量","turtlesim","之上","另外","代表","人工","ubuntu20.04","6","二","林纳斯","编辑","前先要","准确","情况","一种","智能","年","和","直接","保证","update","ros2","性能","互联网","lc","适合","机器人","下来","其中","这个","22","关于","小伙伴","|","通用","packages","操作","signed","二个","镜像","控制","实现","cpp","exc6","应用软件","标准","2004","新","千层","一定","过程","熟悉","&&","o","你","操作方法","码","内核","蕴藏","两年","维护","将","学生","bug","路径","2","算机","3","一次","redhat","bash","其","学习","的","to","影响","运行","甚至","不太","04","最大","en","完成","guyuehome","很","。","优先","教程","长期","打包","ros","此时","计算","就是","opt","步骤","程序","更新","_","当中","地址","一个","给","附","但是","同时","一般","唯一标准","节","芬兰","就","指令","]","主要","第一次","课程","经典","小伙","工作","可能","多任务","唯一","编码","“","之前","大学生","也","10","https","1","时候","热爱","随意","反馈","示例","环境变","或者","现在","hello","这里","第一个","各种各样","比较","叫","看到","或","是否","没有","可以","华丽","dpkg","其后","任务","4","如下","在","指标","发布","--","服务器","命令","入门","起来","编辑器","share","最","好","讲解","locales","应用","爱好者","已经",")","看出","环境变量","各个","keyring","evaluation","链接","接触","接下来","名字","通信","lts","成功","http","大家","后缀","[","export","功能","做","预装","是","网络","字符","分享","只","大小","多用","先要","开始","并","以下","=","提交","浏览","成为","重新","出现","并用","release","第一句","pan","顺序","发扬光大","代码","成","再","第二句","叫做","六个","keyrings","数据","行列","upgrade","基本","模式","需要","大量","背景","这","领域","locale","文件","无论","os","方法","source","简介","除此","使用","选择","量","订阅","key","上下","最好","吧","重要","六个月","未来","一应俱全","伙伴","点击","null","出于","发展","传输","deb","很多","下","月份","每年","为例","原理","按键","个","unix","互联","对","目前","支持","创建","采用","linux","数字","收费","第一","如遇","核心","传播","大","其他软件","所以","可视化","界面","什么","我们","py","1dvxugmhxlxnsnfdezuxw0g","电脑","密码","激发","d","操作界面","dds","出","run","一位","至此","了","提取","每隔","应该","企业","teleop","外衣","print","用户名","之外",">","开放","sudo","虽然","小海","上下左右","参考","sources","~","分别","开源","node","软件开发","启动","蓝色","免费","浏览器","问题","html","tee","自行","有限","效果","centos","raw","各种","啦","有","命令行","/","相同","从","越来越","放到","vmware","紧随","商业","最为","仿真器","检验","乐于","\"","真器","ssl","依然","一","本","failed","联网","个人爱好","，","考虑","仿真","衡量","一起","紧随其后","gnupg","多","etc","因为","越来","任何","products","workstation","发扬","windows","org","节点","加入","com","任何人","硬件","7","18","概念","软件","bashrc","world","普通","第二个","爱好","开发者","可","8","后","升级","快速","到","用户","俱全","动手做","来讲","后续","architecture","humble","第二","伴随","呢","了解","本相","：","一样","底层","资料","download","进行","试一试","为了","中","master","还","fedora","快","人工智能",".","千层浪","适用","无论是","技术","echo","connect","codename","奥义","多用户","下载","多人","大学","githubusercontent","精神","技术实力","中将","其他","install","来","设计","户名","探索","月","左右","把"," ","都","移植","设置","绑定","务器","等待","机器","虚拟机","以","他","listener","utf","这套","一下","gen","上","常用","海龟","demo","$","擦掌","于","一句","添加","一直","一些","每","时","5","ubuntu","还是","好者","turtle","一套","管理","接下","之一","环境","更","尚","lang","apt","请","macos","rosdistro","版","源代码","desktop","gpg","curl","2022","原有","www","自己","关注","系统","回到","命名","动手","会","吸引","建议","提供","两个","虚拟","终端","想要","诞生","nodes","迅猛",":","说干就干","摩拳擦掌","版本","main","各样","”","archive","依赖","构建","不同","不仅","场景","准备","usr"],"title":"ROS2安装方法","title_tokens":["安装","ros2","方法"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2","text":"本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。","text_tokens":["，","。","了解","安装","一起","底层","—","操作系统","系统","一下","前先要","一种","ros2","linux","节","先要","的","我们","最","操作","重要","本"],"title":"ROS2安装方法","title_tokens":["安装","ros2","方法"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#linux","text":"时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。","text_tokens":["，","衡量","一起","镜像","实现","光大","1991","发扬光大","热情","多","真理","越来","任何","发行版","应用软件","标准","代码","成","千层","过程","发扬","熟悉","windows","叫做","行列","操作方法","加入","内核","基本","维护","一石激起千层浪","与","模式","学生","硬件","激起","任何人","这","实践","大量","概念","软件","bug","并且","方法","但","等等","算机","爱好","redhat","使用","开发者","修复","后","实力","量","的","其","快速","到","用户","通过","可视","动手做","来讲","最好","计算机","甚至","？","不太","重要","等","强大","。","伴随","呢","本相","教程","安装","出于","打包","发展","一样","底层","很多","此时","计算","就是","下","每年","程序","中","还","fedora","原理","千层浪","当中","适用","一个","技术","给","服务","unix","互联","对","目前","支持","多用户","加上","linux","一般","唯一标准","多人","芬兰","大学","精神","收费","开发","技术实力","先","其他","核心","传播","就","大","原本","所以","可视化","主要","界面","设计","我们","基本相同","应用程序","什么","决定","稳定","激发","多任务","唯一","操作界面","需要","公司","把","大学生","一位","已有","也","之前"," ","都","热爱","反馈","了","绑定","或者","务器","现在","他","兼容","提到","时间","企业","应该","各种各样","叫","看到","或","操作系统","外衣","这套","没有","成熟","可以","上","常用","华丽","、","开放","任务","之后","虽然","在","指标","参考","服务器","何人","起来","开源","一些","每","不","最","ubuntu","讲解","比如","应用","好者","爱好者","免费","个人","已经","一套","管理","之一","更","问题","尚","名字","macos","有限","源代码","—","发行","原有","之上","另外","自己","centos","系统","功能","各种","林纳斯","做","是","回到","命名","动手","会","准确","情况","年","和","吸引","有","ros2","分享","性能","互联网","相同","适合","其中","越来越","迅猛","多用","说干就干","这个","放到","并","商业","通用","版本","检验","乐于","提交","各样","成为","重新","依赖","操作","出现","并用","不同","不仅","场景","本","联网","个人爱好"],"title":"Linux系统简介","title_tokens":["简介","系统","linux"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu","text":"我们后续课程使用到的Linux发行版就是ubuntu系统。 Ubuntu诞生于2004年10月份，每六个月发布一个新版本，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。","text_tokens":["，","顺序","考虑","紧随其后","介绍","除此之外","如果","多","发行版","因为","表示","2004","新","再","一定","windows","熟悉","六个","你","两年","维护","上层","硬件","18","领域","软件","合适","文件","无论","方法","普通","除此","一次","使用","选择","开发者","升级","的","到","用户","影响","俱全","通过","除了","04","重要","六个月","后续","最大","一应俱全","等","让","很","未来","。","优先","安装","长期","教程","资料","很多","进行","月份","就是","试一试","为了","中","为例","快","位置","还","人工智能","更新","无论是","一个","之内","个","互联","但是","支持","linux","数字","如何","开发","第一","其他","就","所以","这样","第一次","主要","我们","ubuntu22.04","电脑","课程","编号","稳定","可能","月","硬盘","出","占据","之前","10","也","已有","变动"," ","都","移植","时候","了","机器","虚拟机","以","每隔","这里","比较","绝对","或","一下","可以","常用","上","其后","之外","、","4","之后","发布","在","擦掌","参考","于","编辑器","一直","每","软件开发","时","会加","5","好","ubuntu","还是","讲解","比如","应用","通讯","免费","浏览器","已经","看出","各个","环境","更","发挥","一应","接触","持续","lts","自行","版","发行","2022","效果","大家","自己","后缀","代表","关注","人工","系统","ubuntu20.04","各种","编辑","是","会","保证","网络","智能","年","直接","有","建议","性能","互联网","只","虚拟","机器人","想要","诞生","其中","从","22","摩拳擦掌","紧随","版本","浏览","依然","出现","不同","本","联网"],"title":"Ubuntu系统简介","title_tokens":["简介","系统","ubuntu"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu_1","text":"虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下：","text_tokens":["，","。","环境","安装","evaluation","pro","：","html","已有","https"," ","请","自行","步骤","products","workstation","虚拟机","www",".","之上","这里","叫做","地址","-","一个","另外","大家","com","系统","是","可以","软件","啦","和","同时","采用","下载","/","相同","如下","虚拟","在","其他","vmware",":","后","开始","的","并","其他软件","多个","就","运行","我们","操作","构建","完成","让","准备","工作"],"title":"Ubuntu虚拟机安装","title_tokens":["安装","虚拟","虚拟机","ubuntu"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1","text":"下载链接： https://ubuntu.com/download/desktop","text_tokens":["desktop",".","下载","/","链接","：","ubuntu","https"," ","download","com",":"],"title":"1. 下载系统镜像","title_tokens":[".","下载","镜像","1"," ","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2","text":"","text_tokens":[],"title":"2. 在虚拟机中创建系统","title_tokens":["虚拟机",".","创建","2","虚拟","在"," ","系统","中"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3","text":"","text_tokens":[],"title":"3. 设置虚拟机硬盘大小","title_tokens":["硬盘","虚拟机",".","虚拟","3"," ","大小","设置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4-ubuntu","text":"","text_tokens":[],"title":"4. 设置Ubuntu镜像路径","title_tokens":[".","路径","镜像","ubuntu","4"," ","设置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#5","text":"","text_tokens":[],"title":"5. 启动虚拟机","title_tokens":["虚拟机",".","启动","5","虚拟"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#6","text":"","text_tokens":[],"title":"6. 设置用户名和密码","title_tokens":["用户","和",".","用户名","户名","密码"," ","6","设置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#7","text":"","text_tokens":[],"title":"7. 等待系统安装","title_tokens":["等待","安装","."," ","系统","7"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#8","text":"Ubuntu系统安装好后，大家可以先随意使用熟悉一下。","text_tokens":["，","可以","。","使用","安装","熟悉","ubuntu","大家","先","随意","好后","系统","一下"],"title":"8. 完成安装","title_tokens":["安装","."," ","完成","8"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_1","text":"接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下：","text_tokens":["，","。","接下","安装","：","把","接下来","步骤","中","了","系统","可以","ros2","如下","下来","就","到","我们","ubuntu"],"title":"ROS2系统安装","title_tokens":["安装","系统","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1_1","text":"$ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8","text_tokens":["lang","apt"," ","all","_",".","&&","-","utf","export","gen","update","locale","$","lc","sudo","install","8","=","us","locales","en"],"title":"1. 设置编码","title_tokens":["编码",".","1"," ","设置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2_1","text":"$ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844","text_tokens":["，","list","gnupg","etc","org","keyrings","&&","o","com","os","source","可","to","key","arch","lsb","guyuehome","architecture","null","(","ros","deb","master",".","_","-","by","echo","connect","codename","githubusercontent","如遇","install","]","signed","d","“","https"," ","dev","37844","print","dpkg",">","$","报错","sudo","--","参考","sources","share","ubuntu",")","keyring","apt","tee","rosdistro","gpg","curl","www","http","[","raw","update","/","ros2",":","|","=","\"","packages","main","”","archive","ssl","release","failed","usr"],"title":"2. 添加源","title_tokens":["添加",".","源","2"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3-ros2","text":"$ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop","text_tokens":["humble","desktop","update","$","ros","apt","sudo","-"," ","upgrade","install"],"title":"3. 安装ROS2","title_tokens":["安装",".","ros2","3"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4","text":"$ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。","text_tokens":["humble","已经","，","。","安装","ros"," ","opt","setup","至此","中","了",".","系统","echo","bashrc","/",">","ros2","source","$","在","bash","~","就","\"","好"],"title":"4. 设置环境变量","title_tokens":["变量","环境变量","环境",".","4"," ","设置","环境变"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_2","text":"为了验证ROS2安装成功，我们可以通过以下示例进行测试。","text_tokens":["，","可以","以下","。","通过","安装","我们","ros2","测试","验证","进行","成功","示例","为了"],"title":"ROS2示例测试","title_tokens":["ros2","示例","测试"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_1","text":"先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。","text_tokens":["。","dds","，","第二","二个","talker","“","run","：","问题","cpp","底层","传输","通信"," ","如果","中","hello","_","第一个","数据","listener","一个","节点","是否","系统","没有","world","demo","字符","ros2","$","字符串","两个","正常","终端","试试","发布","先","第二个","第一","命令","nodes","在","来","的","以下","订阅","者","最为","通过","启动","py","”","发布者","吧","重要","说明"],"title":"示例一：命令行示例","title_tokens":["命令行","：","一","命令","示例"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_2","text":"再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["点击","。","，","第二","运动","安装","仿真","左右","“","run","：","键盘","控制","ros","教程","持续"," ","试一试","成功","示例","至此","中","—","再","第二句","_","turtlesim","按键","一个","节点","蕴藏","teleop","该","将","背景","可以","上","啦","海龟","奥义","ros2","二句","后续","$","如下","两个","终端","在","小海","上下左右","第一","中将","一句","小海龟","关于","分别","来","的","就","指令","key","仿真器","node","上下","运行","真器","启动","”","我们","经典","蓝色","探索","第一句","turtle"],"title":"示例二：小海龟仿真示例","title_tokens":["海龟","仿真","：","小海龟","小海","示例","二"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_3","text":"为了方便大家入门学习，我们也提供了预装好ROS2软件和教程代码的虚拟机镜像，有需要的小伙伴可以通过以下链接下载： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["，","教程","镜像","链接","：","也","https","baidu"," ","exc6","为了","了","提取","代码","虚拟机",".","大家","码","com","需要","预装","可以","软件","和","有","下载","/","ros2","提供","虚拟","入门",":","学习","小伙伴","s","的","以下","通过","我们","好","1dvxugmhxlxnsnfdezuxw0g","小伙","伙伴","方便","pan"],"title":"附：虚拟机镜像","title_tokens":["附","虚拟机","镜像","：","虚拟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/","text":"ROS2命令行操作 在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。 Linux中的命令行 类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。 启动方式 回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。 常用命令操作 我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。 ROS2中的命令行 ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。 运行节点程序 想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看节点信息 当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim 查看话题信息 当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose 发布话题消息 想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 发送服务请求 一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\" 发送动作目标 想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\" 录制控制命令 系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["…","大致","干什么","所有","list","如果","表示","移入","发指","rosbag","turtle1","均","该","与","详细信息","请求","1.8","0","呈现","但","小海龟","子目录","可视","通过","具体","rosbag2","？","觉得","即可","等","让","这些","rate","后边","键盘","拷贝到","感受","体会","当前工作","笔记","便捷","srv","方式","删除","-","不一","权限","信息","send","服务","call","二十","显示","加上","逛来逛去","msgs","如何","正常","件夹","先","录制","系列","一件","这样","多个","pwd","度高","电影","y","查","集成","不可","此","绝对","衣服","为什么","哪些","慢慢","ctrl","ls","、","所在","炫酷","初次","cp","一二","某段","x","片段","不","cd","action","35","比如","受","指定","t","name","+","感兴趣","深入","文件名称","另","—","适应","呀","管理员","turtlesim","本节","小","它","看中","有点","编辑","一种","和","直接","ros2","下来","逛去","这个","款式","操作","一二十","想","轻松","保持","用","系统管理员","控制","geometry","实现","查看","动作","改名","一定","令人发指","熟悉","你","及","将","看看","例如","为","记忆","路径","新建","怎么","打开","2","3","一次","随着","学习","的","死机","运行","goal","不太","04","知道","完成","呈现出","很","一只","。","产生","文件名","令人","ros","此时","现出","就是","程序","spawn",",","'","推出","用到","_","linear","工具","play","一个","mv","目标目录","但是","文件夹","材料","魅力","异常","目标","快捷键","尝试","就","指令","多到","]","第一次","主要","40","不到","当前","子","商场","工作","可能","案例","布料","列出","体验","“","之前","也","1","时候","专门","或者","alt","被","这里","第一个","精心设计","看到","或","没有","精心","可以","原因","pub","根据","如下","绝对路径","在","发布","--","命令","服装","找","起来","编辑器","快捷","<","好","0.2","}","应用","执行","解决","一系列","已经","absolute","哪","感兴","对于","链接","麻烦","接触","接下来","进一步","现有","名称","pose","大家","不过","[","功能","是","字符","看不到","背","并","源文件","输入","调试","参数","及其","实验室","什么样","类似","成","再","搜索","叫做","数据","硬","需要","背景","消息","这","地","完全","而是","选项","文件","无论","这种","帮上","复现","带领","使用","选择","语法","db3","key","每次","vel","bag","若","想象","重要","未来","一边","列表","不用","约束","手","很多","下","必不可少","发送","为例","复制到","里边","17","既定","不是","深色","2.0","只是","某个","对","创建","linux","跟","体操","很少","第一","至于","核心","{","所以","详细","可视化","枯燥","什么","我们","电脑","笔记本","出","黑客","常用命令","目的","run","了","0.0","随身","容易","teleop","买","鼠标",">","角度","sudo","虽然","忙","小海","node","启动","话题","兴趣","目","总","动","rotateabsolute","实验","问题","逛来","一点","z","难以","angular","info","主目录","能够","二十个","一二十个","具体操作","各种","msg","笔记本电脑","啦","有","命令行","/","还有","相同","record","仿真器","\"","真器","theta","一","本","写字","，","rm","仿真","一起","规则","11","内容","多","因为","十个","机制","并不一定","右键","需求","节点","商家","既","结合","则","一系","rotate","软件","概念","太","感觉","标目","后","数量","改变","到","用户","从来","死记","来讲","孤单","多种","播放","定制","子目","呢","了解","不变","：","窗口","一样","进行","试一试","中","拷贝","还","这项",".","echo","满足","topic","死记硬背","其他","来","至今","设计","自主","科幻","改了","service","转","把"," ","都","由","cmd","科幻电影","mkdir","调用","总有","某","以","以上","段","一下","看似","随身带","上","常用","海龟","确实","$","灵活","于","继续","一直","一些","每","还是","要","terminal","turtle","管理","接下","更","统管","gedit","其上","做好","twist","2022","原有","又","去","自己","系统","会","回到","保留","目录","提供","终端","想要",":","一步","”","不同","场景","复制"],"title":"ROS2命令行操作","title_tokens":["命令","命令行","ros2","操作"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2","text":"在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。","text_tokens":["案例","，","。","更","之前","接触","感受","进一步"," ","如果","时候","多","深入","中","了","—","适应","一定","工具","本节","大家","将","有点","会","可以","一种","海龟","命令行","ros2","魅力","在","小海","一次","带领","命令","第一","使用","随着","小海龟","一步","学习","的","到","调试","第一次","运行","我们","不太","重要","可能"],"title":"ROS2命令行操作","title_tokens":["命令","命令行","ros2","操作"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#linux","text":"类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。","text_tokens":["，","所有","规则","什么样","多","类似","并不一定","成","一定","需求","你","商家","结合","为","完全","软件","无论","呈现","但","这种","使用","的","每次","可视","来讲","？","想象","等","呈现出","定制","这些","。","呢","ros","约束","一样","手","此时","现出","就是","很多","必不可少","中","便捷","里边","方式","推出","工具","既定","一个","不一","不是","服务","满足","但是","linux","逛来逛去","材料","异常","先","其他","来","就","一件","这样","可视化","什么","至今","我们","设计","自主","科幻","商场","布料"," ","都","时候","度高","电影","科幻电影","了","总有","被","某","不可","这里","精心设计","容易","看到","衣服","买","没有","为什么","精心","可以","看似","、","根据","炫酷","虽然","灵活","在","命令","于","服装","起来","一直","一些","片段","不","还是","比如","受","解决","已经","哪","对于","麻烦","问题","逛来","一点","其上","做好","呀","现有","能够","大家","去","自己","小","功能","各种","看中","是","会","一种","和","命令行","保留","想要","逛去","并","款式","操作","场景"],"title":"Linux中的命令行","title_tokens":["的","命令行","linux","命令","中"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_1","text":"回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。","text_tokens":["写字","，","用","因为","十个","发指","右键","一定","令人发指","熟悉","搜索","叫做","硬","及","背景","需要","既","这","一系","软件","而是","记忆","怎么","打开","使用","选择","随着","后","数量","的","死机","到","通过","从来","多种","觉得","即可","列表","很","。","呢","不用","：","窗口","令人","体会","手","就是","笔记","中","这项","方式","用到","工具","不是","深色","二十","对","但是","魅力","正常","很少","快捷键","系列","至于","其他","来","就","指令","所以","多到","枯燥","什么","我们","不到","电脑","科幻","笔记本","黑客","也"," ","都","时候","专门","电影","科幻电影","alt","随身","看到","鼠标","为什么","一下","可以","原因","随身带","上","慢慢","确实","ctrl","常用","所在","在","初次","命令","一二","快捷","启动","一二十","应用","terminal","一系列","t","+","难以","又","大家","不过","二十个","一二十个","功能","是","回到","会","笔记本电脑","有","命令行","字符","看不到","终端","这个","背","并","输入","操作","参数","本"],"title":"启动方式","title_tokens":["启动","方式"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_2","text":"我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。","text_tokens":["，","…","rm","及其","保持","用","系统管理员","所有","多","移入","熟悉","均","该","及","将","需要","则","地","为","选项","文件","新建","路径","感觉","打开","标目","语法","改变","子目录","的","用户","死记","若","未来","一边","列表","子目","。","这些","不变","文件名","：","拷贝到","当前工作","下","中","拷贝","复制到","删除","一个","mv","权限","只是","某个","目标目录","显示","文件夹","创建","linux","件夹","先","死记硬背","目标","来","就","指令","多个","]","我们","当前","工作","出","列出","常用命令","目的","体验","“","把","也","pwd"," ","由","mkdir","了","或者","查","以","此","绝对","或","没有","一下","可以","常用",">","ls","sudo","绝对路径","命令","cp","找","编辑器","<","不","cd","指定","执行","管理","目","对于","链接","统管","gedit","文件名称","另","原有","管理员","名称","主目录","大家","[","它","功能","系统","编辑","回到","会","/","目录","源文件","”","一","改名","复制"],"title":"常用命令操作","title_tokens":["常用命令","命令","常用","操作"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2_1","text":"ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。","text_tokens":["，","。","接下","了解","总","目的","仿真","后边","一起","干什么","所有","大致","感受","也","接下来","内容","都"," ","下","表示","中","为例","机制","还","以","集成","第一个","一个","节点","不过","具体操作","功能","与","一系","可以","对","概念","海龟","有","命令行","topic","ros2","linux","相同","跟","在","体操","下来","小海","命令","第一","系列","小海龟","核心","的","就","继续","node","主要","什么","我们","具体","话题","比如","操作","不同","参数","一系列"],"title":"ROS2中的命令行","title_tokens":["的","命令行","ros2","命令","中"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_3","text":"想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["，","仿真","run","键盘","控制","："," ","进行","中","_","turtlesim","节点","teleop","例如","某个","可以","海龟","和","ros2","$","想要","命令","使用","key","node","运行","我们","要","操作","turtle"],"title":"运行节点程序","title_tokens":["运行","节点","程序"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_4","text":"当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim","text_tokens":["，","呢","感兴","list","：","ros","查看","都"," ","如果","感兴趣","中","info","某","turtlesim","一个","节点","它","信息","系统","哪些","详细信息","可以","对","啦","有","/","ros2","加上","$","命令","来","的","就","这样","详细","node","运行","？","兴趣","当前","知道","子"],"title":"查看节点信息","title_tokens":["节点","查看","信息"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_5","text":"当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose","text_tokens":["，","呢","list","：","查看","都"," ","试一试","中","还","某","数据","一个","turtle1","pose","看到","系统","消息","echo","有","topic","ros2","加上","/","$","如下","命令","使用","的","话题","当前","即可","子","想"],"title":"查看话题信息","title_tokens":["话题","查看","信息"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_6","text":"想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":["，","rate","动","控制","：","geometry","1"," ","z","cmd",",","y","twist","还","angular","0.0","_","linear","turtle1","2.0","msg","可以","1.8","海龟","直接","命令行","topic","ros2","pub","/","$","msgs","发布","--","想要","命令",":","{","起来","指令","通过","\"","vel","我们","话题","}","x"],"title":"发布话题消息","title_tokens":["话题","消息","发布"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_7","text":"一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\"","text_tokens":["一只","，","service","产生","仿真","name","："," ","试一试","spawn","调用","—",",","还","srv","y","再","'","turtlesim","一个","服务","call","海龟","太","/","ros2","$","提供","2",":","{","来","仿真器","\"","真器","我们","孤单","0.2","改了","}","theta","x"],"title":"发送服务请求","title_tokens":["发送","服务","请求"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_8","text":"想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\"","text_tokens":["，","absolute","转","仿真","rotateabsolute","："," ","动作","发送","中","_","turtlesim","一个","turtle1","send","rotate","可以","海龟","命令行","/","ros2","$","角度","提供","忙","帮上","3","想要","命令","目标","这个",":","的","这样","到","仿真器","通过","\"","真器","具体","action","goal","比如","指定","theta","完成","让"],"title":"发送动作目标","title_tokens":["目标","发送","动作"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_9","text":"系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["，","轻松","。","实验室","用","实验","：","把","实现","11","很多","如果"," ","就是","cmd","中","再","2022","17","_","play",".","数据","rosbag","以上","-","turtle1","段","一个","大家","自己","系统","功能","与","看看","这","回到","可以","常用","啦","有","0","/","ros2","还有","$","如何","复现","下来","录制","想要","命令","某段","的","record","db3","尝试","每","运行","vel","好","40","我们","还是","？","bag","rosbag2","35","播放","04","子","很"],"title":"录制控制命令","title_tokens":["命令","控制","录制"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","text":"ROS2开发环境配置 ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。 Git git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git 下载教程源码 《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。 VSCode Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download VSCode插件配置 为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。 中文语言包 Python插件 C++插件 CMake插件 vscode-icons ROS插件 Msg Language Support Visual Studio IntelliCode URDF Markdown All in One VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["配置","，","广泛","用","人","上万","所有","clone","千上万","无限","查看","内容","管理软件","如果","多","icons","all","中会","语言包","代码","贡献","新","intellicode","windows","搜索","插件","不会","冲突","以及","需要","下载方式","大量","com","硬件","这","理工","记事","变更","软件","官方","一系","tutorials","文件","bug","利器","编写","推荐","方法","但","略显","之间","等等","切换","国内","使用","开发者","修复","增加","的","快速","每次","具体","markdown","？","重要","后续","guyuehome","完成","让","强大","丰富","这些","。","这款","呢","简单","安装","教程","管理工具","：","ros","发展","21","很多","进行","download","为了","中","c++","还","功能强大","网站","方式","里边",".","_","工具","推出","离不开","-","一个","作为","肯定","给","特性","哪里","linus","code","审核","文件夹","支持","下载","linux","2015","组件","如何","千万","vscode","行","件夹","开发","先","install","神兵","系列","就","python","多个","所以","这样","微软","visualstudio","设计","我们","因","迅速","课程","有些","源码","可能","驱动","urdf","出","语言","项目","》","也","已有","https","几千万","搭建"," ","开发工具","都","《","visual","示例","了","机器","之父","in","被","集成","广泛应用","自带","这里","非常简单","以上","看到","合并","操作系统","简称","成千上万","可以","github","、","听到","$","之后","studio","sudo","一款","在","入门","命令","判断","开源","一些","码云","编辑器","不","好","最","language","比如","复杂","cmake","网上","两款","几千","应用","常听到","浏览器","个人","一系列","管理","编译","环境","更","轻量","讲","链接","apt","扩展","非常","macos","one","一行","—","源代码","众多","与","喜欢","gitee","另外","大家","自己","人工","系统","而生","功能","msg","做","编辑","是","成千","会","高效","记事本","官方网站","和","有","直接","年","/","ros2","中文","git","提供","便于","终端","只","机器人",":","官方网","不开","并","版本","support","调试","提交","浏览","自动","成为","操作","不同","准备"],"title":"ROS2开发环境配置","title_tokens":["环境","配置","ros2","开发"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros2","text":"ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。","text_tokens":["这些","，","配置","编译","呢","。","环境","ros","查看","开发工具","示例","中会","—","代码","机器","工具","离不开","大家","肯定","给","需要","大量","做","和","编写","推荐","、","git","提供","如何","vscode","机器人","开发","先","不开","的","一些","我们","？","课程","源码","重要","两款","完成","准备"],"title":"ROS2开发环境配置","title_tokens":["环境","配置","ros2","开发"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#git","text":"git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git","text_tokens":["，","广泛","人","上万","所有","千上万","内容","管理软件","代码","贡献","新","不会","以及","冲突","需要","硬件","这","理工","变更","软件","bug","方法","之间","等等","切换","国内","使用","开发者","修复","增加","的","每次","具体","完成","让","这些","。","这款","简单","安装","管理工具","发展","进行","中","网站","工具","一个","肯定","特性","哪里","linus","审核","linux","千万","行","开发","install","就","多个","所以","设计","因","我们","迅速","有些","可能","驱动","项目","也","已有","几千万"," ","都","了","之父","被","广泛应用","非常简单","看到","合并","成千上万","可以","github","听到","$","之后","sudo","一款","在","命令","判断","开源","码云","不","比如","应用","几千","常听到","管理","apt","非常","一行","—","众多","gitee","大家","人工","功能","系统","而生","是","成千","会","高效","和","有","直接","git","终端","并","版本","提交","自动","不同"],"title":"Git","title_tokens":["git"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_1","text":"《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。","text_tokens":["，","。","环境","》","更","用","讲","：","clone","https","21"," ","很多","《","如果","多","查看","中","—","代码","还","里边","方式",".","_","集成","自带","gitee","这里","另外","一个","下载方式","com","系统","是","会","记事","记事本","tutorials","文件","有","文件夹","下载","/","ros2","和","推荐","$","git","略显","vscode","件夹","开发","入门",":","的","就","这样","浏览","好","复杂","课程","源码","guyuehome","浏览器"],"title":"下载教程源码","title_tokens":["教程","下载","源码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode","text":"Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download","text_tokens":["，","。","项目","轻量","：","链接","搭建","https"," ","visual","macos","扩展","非常","download","源代码","代码","功能强大","网站","推出","windows",".","下载","一个","操作系统","com","功能","简称","系统","编辑","是","官方","可以","官方网站","code","年","支持","和","利器","丰富","/","studio","2015","但","、","linux","组件","vscode","在","开发","官方网","神兵",":","的","编辑器","快速","visualstudio","微软","成为","操作","强大"],"title":"VSCode","title_tokens":["vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode_1","text":"为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。","text_tokens":["，","。","安装","无限","扩展","为了","还","插件","功能","与","一系","可以","ros2","便于","vscode","开发","系列","的","调试","我们","后续","一系列"],"title":"VSCode插件配置","title_tokens":["配置","vscode","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_2","text":"","text_tokens":[],"title":"中文语言包","title_tokens":["语言包","中文","语言"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#python","text":"","text_tokens":[],"title":"Python插件","title_tokens":["python","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#c","text":"","text_tokens":[],"title":"C++插件","title_tokens":["插件","c++"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#cmake","text":"","text_tokens":[],"title":"CMake插件","title_tokens":["cmake","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode-icons","text":"","text_tokens":[],"title":"vscode-icons","title_tokens":["-","icons","vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros","text":"","text_tokens":[],"title":"ROS插件","title_tokens":["ros","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#msg-language-support","text":"","text_tokens":[],"title":"Msg Language Support","title_tokens":[" ","support","msg","language"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#visual-studio-intellicode","text":"","text_tokens":[],"title":"Visual Studio IntelliCode","title_tokens":[" ","intellicode","studio","visual"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#urdf","text":"","text_tokens":[],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#markdown-all-in-one","text":"VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["，","配置","。","出","环境","也","众多","搜索","喜欢","以上","作为","大家","自己","插件","可以","支持","推荐","只","vscode","在","开发","的","最","网上","个人"],"title":"Markdown All in One","title_tokens":["in","markdown"," ","all","one"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/","text":"DDS Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。 通信模型 DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。 DDS DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。 什么是DDS 好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是Data Distribution Service，也就是数据分发服务，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。 DDS在ROS2中的应用 DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。 质量服务策略QoS DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是Domain，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为数据提供者和接收者之间的合约。 具体会有哪些策略？比如这个列表中描述的DEADLINE策略，表示通信数据必须要在每次截止时间内完成一次通信，HISTORY策略，表示针对历史数据的一个缓存大小，RELIABILITY策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式。 还有这个DURABILITY，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。 案例一：在命令行中配置DDS 我们先来试一试在命令行中配置DDS的参数。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort $ ros2 topic info /chatter --verbose 案例二：DDS编程示例 接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。 运行效果 $ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub 发布者代码解析 learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , }, 订阅者代码解析 learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], }, 参考链接 DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们课上主要带领大家认识DDS，更多使用方法和相关内容，课程配套的教程中会有介绍，大家也可以参考这里的链接进行学习。 https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["广泛","所有","corba","尽可","更加","0.5","介绍","如果","那","对应","四种","模块","表示","publish","海军","能力","拿","而且","domain","与","请求","上层","一角","该用","编程","sub","合适","刚才","提高","并且","但","优化","分发","综合","%","s","者","std","通过","具体","分布式","？","发布者","subscription","等","让","说明","这些","(","setup","组成","最早","历史数据","42","位置","方式","1989","当","-","第二种","working","完整","无法","之","信息","特性","服务","借助","所","神经网","架构","第三种","msgs","如何","交通","正常","last","开发","专利","先","from","这样","多个","华为","应用程序","uml","架构图","how","驱动","顺利","vendors","图","放在","能响","国防","通路","作者","容性","同一个","相当于","神经网络","技术标准","可信","verbose","日志","加密","视频","兼容","提到","找到","时间","无用","接收","名","靠","哪些","合约","subscribernode","吃","、","字符串","生变","!","定时器","价值","居","这么","effort","某一","不","收到","）","体","策略","比如","啥意思","流畅性","指定","重大","完整性","那该","learning","个人","循环","运动","配套","middleware","name","讲到","任","它们","感兴趣","durability","—","适应","针对","众多","之上","另外","它","黑入","二","get","有点","建模","截止","保证","情况","一种","heard","和","年","直接","ros2","性能","课上","logger","机器人","下来","video","这个","前边","火锅","主","处理","遥控","古月","连接数","关心","提供者","想","听说","用","由于","回忆","控制","非常复杂","实现","大大提高","服务端","publishernode","感知","动作","厂商","标准","2004","集中处理","新","（","一定","过程","\\","你","客户端","维护","将","当然","为","点对点","决策","string","rmw","避免","下边","解析","打开","一次","学习","只有","的","to","整个","影响","@","运行","articles","python3","主讲","知道","受到","完成","运转","guyuehome","很","增长","包","en","。","helloworld","信赖","教程","ros","此时","就是","举","implementations","qos","程序",",","'","处","_","集中","地址","作为","一个","给","通道","掉","尽量","profile","互相","但是","选用","行","异常","尽可能","垂直","尝试","欢迎","就","指令","]","当于","中心","主要","差别","大大","课程","我","none","可能","案例","冰山","列出","》","默认","“","之前","也","1","https","人机","时候","专门","with","示例","太多","相当","现在","流畅","hello","这里","遥控器","或","类","速度","没有","可以","回调","图像","pub","shutdown","航空","根据","如下","例子","在","发布","--","发生","入门","服务器","命令","第三","供者","第一种","舰船","好","bilibili","复杂","#","}","应用","周期","执行","可信赖","解决","已经",")","qosreliabilitypolicy","编译","哪","各个","感兴","super","发送给","通常","讲","链接","麻烦","库","接下来","进一步","通信","不感兴趣","qosprofile","chatter","中间件","databus","像","大家","不过","驾驶","def","[","成立","功能","做","是","高效","网络","全局","reliability","导致","字符","主讲人","只","单独","建设","质量","占用","大小","填充","他们","并","第四种","向","history","冰山一角","=","rclpy","成为","出现","参数","单位","上边","在于","发生变化","复用","on","类似","omg","代码","符合","成","数据","一旦","小组","基本","需要","消息","大量","模式","入口","这","entry","领域","地","选项","文件","无论","有人","第四","方法","分组","之间","这种","带领","使用","说了半天","选择","内","提示","丢失","订阅","纠结","每次","id","一条","接口","真正","ros1","生态","重要","模型","丰富","列表","一新","尽力","变化","来到","不用","初始","传输","很多","下","建立","认识","角色","发送","处理速度","规模","data","为例","*","到底","能源","带","缓存","about","肯定","不是","像是","import","只是","数以千计","对","创建","初始化","接口标准","deadline","空间","美国","第一","核心","distribution","无论如何","{","所以","程度","那个","通信模型","我们","什么","py","电脑","有些","资源","其实","忽略","并行","dds","黑客","语言","中间","函数","run","高速","depth","sysml","至关","航拍","效率","了","广泛应用","神经","半天","应该","企业","广播","数据通信","终于","使命","console","包含","办法","部分","参考","开源","不管","node","传送","送给","话题","兴趣","结构","延时","蓝色","明显","描述","destroy","样","env","处于","类型","问题","html","定位","父类","点","本身","concepts","publisher","旋转","info","帧","能够","效果","工业","各种","客户","msg","提","交换","啦","有","命令行","/","还有","__","self","边","分布","医疗","商业","最为","\"","宗旨","无人","退出","自动","bin","课","args","一","真实","同一","qoshistorypolicy","，","配置","行为","keep","一起","焕然一新","组织","没","内容","docs","多","points","预测","兼容性","来看","中会","best","org","需求","按照","节点","加入","com","门","过","软件","双方","树莓","world","构图","编写","布式","销毁","timer","可","5g","8","后","升级","秒","快速","到","用户","具体地址","得","的话","就行","晚","无人机","不好","相关","过去","humble","第二","派","呢","统一","不变","：","init","一样","底层","21","int32","进行","试一试","好吃","为了","中","几种",".","优势","红色","频繁","技术","i","design","echo","满足","topic","强制","转移","关系","全称","至关重要","4g","guides","行业","三种","其他","必须","来","所有人","python","定时","设计","框架","可见","才能","性","兼容性问题","组成部分","许多","service","publishing","建模语言","先进","增多","更好","把","输出"," ","都","《","由","对象","reliable","设置","绑定","务器","等待","历史","机器","授权","强调","以","listener","utf","要求","数据通","broker","每条","一下","different","常用","上","既然","定义","$","灵活","于","bv12z4y167w2","存在","callback","一些","实时","时","每","入个","服务质量","还是","要","保障","高通","scripts","一套","管理","保证数据","焕然","接下","环境","瓶颈","更","关闭","非常","理解","class","www","连接","spin","自己","系统","会","create","接收者","四大","便于","提供","multiple","每个","二种",":","一步","进入","版本","而言","main","意思","原则","coding","”","不同","场景","usr"],"title":"**DDS**","title_tokens":["dds","*"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds","text":"Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。","text_tokens":["，","。","来到","变化","dds","》","讲","讲到","实现","ros","底层","21"," ","动作","《","通信","都","相当于","神经网络","中","—","相当","hello","机器","过程","神经","大家","它","系统","服务","靠","是","终于","网络","神经网","ros2","主讲人","、","在","机器人","入门","学习","前边","他们","欢迎","的","来","最为","当于","好","我们","具体","古月","话题","课程","主讲","我","重大","完成"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_1","text":"DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。","text_tokens":["，","在于","发生变化","所有","实现","更加","服务端","如果","多","四种","类似","集中处理","一定","数据","一旦","拿","节点","而且","客户端","需要","消息","与","请求","这","为","软件","点对点","双方","并且","有人","第四","但","优化","这种","使用","的","订阅","整个","到","每次","影响","具体地址","具体","一条","真正","ros1","模型","知道","受到","运转","很","增长","。","变化","第二","不用","很多","进行","建立","就是","好吃","角色","中","处理速度","规模","处","几种","集中","优势","地址","当","作为","一个","第二种","无法","之","通道","服务","像是","所","但是","架构","第三种","关系","行","异常","正常","第一","三种","其他","核心","必须","所有人","就","这样","程度","中心","通信模型","框架","我们","可见","有些","许多","可能","其实","忽略","并行","dds","能响","列出","增多","先进","通路","之前","也"," ","都","由","效率","了","太多","务器","以","这里","找到","应该","广播","速度","broker","每条","没有","可以","常用","上","吃","包含","在","生变","发布","发生","服务器","第三","时","第一种","收到","传送","兴趣","明显","解决","感兴","瓶颈","更","问题","麻烦","进一步","通信","不感兴趣","非常","感兴趣","旋转","针对","databus","连接","能够","不过","它","自己","系统","各种","客户","是","会","有点","一种","和","导致","性能","提供","只","单独","每个","二种","这个","一步","火锅","并","第四种","处理","成为","连接数","关心","想"],"title":"通信模型","title_tokens":["通信模型","通信","模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_1","text":"DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。","text_tokens":["已经","这些","，","dds","广泛","。","国防","通常","高速","之前","通信","很多"," ","感知","定位","都","非常","模块","它们","预测","新","方式","能源","广泛应用","数据","需求","一个","驾驶","频繁","不是","需要","领域","会","地","可以","交换","和","决策","借助","满足","ros2","航空","交通","在","并","的","医疗","存在","好","自动","比如","应用","等","很"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_2","text":"好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是Data Distribution Service，也就是数据分发服务，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。","text_tokens":["，","听说","corba","介绍","组织","omg","海军","标准","2004","兼容性","数据","需求","维护","大量","过","当然","地","为","软件","布式","说了半天","分发","可","升级","的","订阅","分布式","？","等","丰富","。","呢","统一","进行","就是","最早","中","data","到底","1989","一个","完整","技术","服务","数以千计","满足","强制","全称","美国","行业","开发","distribution","来","垂直","中心","设计","我们","uml","兼容性问题","可能","service","dds","建模语言","语言","中间","sysml","也"," ","容性","由","专门","对象","技术标准","现在","强调","以","兼容","这里","半天","一下","可以","使命","、","发布","灵活","于","价值","实时","舰船","好","策略","服务质量","复杂","啥意思","保障","比如","应用","解决","已经","一套","管理","环境","问题","通信","中间件","大家","它","成立","系统","各种","做","是","高效","提","网络","建模","啦","年","和","/","还有","提供","质量","分布","意思","成为","课","真实"],"title":"什么是DDS","title_tokens":["是","什么","dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#ddsros2","text":"DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。","text_tokens":["上边","，","用","由于","复用","所有","实现","大大提高","那","组织","如果","没","对应","多","厂商","模块","兼容性","能力","标准","代码","符合","过程","按照","你","加入","基本","需要","上层","该用","编程","软件","刚才","无论","构图","提高","但","下边","布式","使用","选择","可","5g","综合","的","纠结","影响","用户","具体","得","就行","分布式","？","接口","生态","重要","让","。","呢","统一","不变","ros","一样","很多","此时","建立","就是","组成","为了","中","位置","红色","一个","肯定","技术","给","尽量","对","架构","接口标准","选用","4g","至关重要","转移","如何","开发","专利","其他","无论如何","来","就","所以","多个","那个","这样","华为","差别","我们","设计","大大","架构图","性","组成部分","可能","驱动","dds","放在","中间","函数","把","至关","也"," ","都","容性","了","授权","机器","兼容","提到","这里","时间","企业","或","可以","上","既然","、","根据","在","部分","这么","开源","不管","某一","每","不","还是","要","比如","高通","蓝色","应用","个人","哪","middleware","更","问题","任","通信","中间件","像","能够","之上","想","大家","工业","自己","系统","功能","是","会","保证","一种","四大","和","有","ros2","性能","边","建设","机器人","分布","这个","进入","他们","版本","商业","而言","宗旨","原则","场景"],"title":"DDS在ROS2中的应用","title_tokens":["的","dds","ros2","在","应用","中"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#qos","text":"DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是Domain，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为数据提供者和接收者之间的合约。 具体会有哪些策略？比如这个列表中描述的DEADLINE策略，表示通信数据必须要在每次截止时间内完成一次通信，HISTORY策略，表示针对历史数据的一个缓存大小，RELIABILITY策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式。 还有这个DURABILITY，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。","text_tokens":["同一","，","配置","行为","用","回忆","一起","控制","所有","尽可","实现","焕然一新","如果","多","表示","类似","来看","成","best","新","一定","过程","数据","需求","节点","加入","小组","基本","domain","将","需要","模式","门","地","为","合适","树莓","避免","分组","之间","这种","一次","使用","内","选择","只有","的","丢失","快速","通过","每次","id","具体","的话","晚","？","无人机","不好","重要","模型","完成","让","列表","一新","过去","尽力","这些","。","派","呢","信赖","ros","传输","下","进行","就是","此时","举","发送","qos","程序","中","历史数据","带","_","缓存","一个","完整","给","特性","服务","掉","尽量","对","互相","满足","所","但是","deadline","空间","关系","如何","先","尽可能","必须","指令","这样","那个","通信模型","我们","应用程序","才能","电脑","资源","可能","顺利","dds","图","黑客","默认","更好","之前","也"," ","都","人机","时候","同一个","可信","航拍","reliable","了","绑定","流畅","历史","机器","加密","视频","遥控器","无用","接收","时间","要求","数据通","数据通信","没有","合约","哪些","可以","图像","定义","根据","例子","办法","在","命令","这么","供者","effort","一些","每","入个","不","好","体","策略","要","结构","比如","送给","延时","流畅性","指定","应用","完整性","那该","可信赖","描述","保证数据","运动","焕然","各个","样","发送给","处于","通信","不同","durability","理解","适应","针对","众多","帧","另外","大家","系统","功能","黑入","客户","是","会","截止","全局","网络","一种","接收者","和","有","reliability","情况","保证","导致","还有","ros2","直接","便于","提供","啦","占用","质量","机器人","大小","这个","向","history","遥控","无人","出现","提供者","参数","场景"],"title":"质量服务策略QoS","title_tokens":["服务","qos","质量","策略"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_3","text":"我们先来试一试在命令行中配置DDS的参数。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort $ ros2 topic info /chatter --verbose","text_tokens":["配置","dds","。","int32"," ","试一试","qos","chatter","中","reliable","verbose","data","42","best","info","_","-","msg","echo","reliability","命令行","topic","ros2","pub","/","$","msgs","在","--","先","命令",":","来","的","effort","std","\"","我们","参数"],"title":"案例一：在命令行中配置DDS","title_tokens":["案例","配置","dds","命令行","：","在","一","命令","中"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_4","text":"接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。","text_tokens":["，","配置","接下","dds","。","之前","接下来"," ","通信","中","为例","代码","hello","以","world","在","下来","尝试","我们","话题"],"title":"案例二：DDS编程示例","title_tokens":["案例","编程","dds","：","示例","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_2","text":"$ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub","text_tokens":["qos","sub","helloworld","_","pub","run","ros2","$"," ","learning"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_3","text":"learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , },","text_tokens":["qoshistorypolicy","，","配置","keep","0.5","publishernode","publish","points","best","代码","（","数据","节点","加入","com","消息","入口","需要","entry","为","选项","文件","world","string","编写","销毁","打开","timer","8","%","后","s","的","秒","提示","std","@","python3","接口","发布者","知道","guyuehome","完成","让","说明","包","helloworld","(","：","初始","init","进行","setup","qos","程序","中",",","data","*","'","_",".","-","一个","信息","import","profile","创建","初始化","msgs","last","from","{","python","定时","py","none","publishing","函数","作者","“","depth","1","输出"," ","对象","示例","reliable","日志","设置","等待","hello","utf","类","名","回调","pub","shutdown","、","console","字符串","如下","发布","!","定时器","居","effort","callback","node","）","话题","#","}","周期","执行","learning","循环","scripts","已经",")","qosreliabilitypolicy","destroy","env","编译","super","name","类型","关闭","库","qosprofile","父类","点","chatter","publisher","info","class","www","spin","[","def","功能","系统","msg","get","create","reliability","字符","/","ros2","__","self","logger",":","填充","主","并","history","=","\"","main","原则","coding","”","退出","古月","rclpy","bin","args","单位","usr"],"title":"发布者代码解析","title_tokens":["发布者","代码","发布","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_4","text":"learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], },","text_tokens":["qoshistorypolicy","，","配置","keep","points","标准","best","代码","（","\\","数据","节点","加入","com","消息","入口","需要","entry","sub","选项","文件","world","string","编写","销毁","打开","8","后","%","s","的","者","订阅","提示","std","@","python3","接口","subscription","guyuehome","完成","让","知道","说明","包","helloworld","(","：","初始","init","进行","setup","qos","程序",",","data","*","'","_",".","-","一个","信息","i","import","profile","对","创建","初始化","msgs","last","from","{","python","]","py","none","函数","作者","“","depth","1","输出"," ","对象","示例","reliable","日志","设置","等待","hello","listener","utf","类","名","subscribernode","回调","pub","定义","、","shutdown","console","如下","!","居","effort","callback","node","）","收到","话题","#","}","执行","learning","循环","scripts",")","qosreliabilitypolicy","destroy","env","编译","super","name","类型","关闭","库","qosprofile","父类","点","chatter","info","class","www","spin","[","def","功能","系统","msg","get","heard","create","reliability","/","ros2","__","self","logger",":","主","并","history","=","\"","处理","main","原则","coding","”","退出","古月","rclpy","bin","args","usr"],"title":"订阅者代码解析","title_tokens":["代码","者","订阅","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_5","text":"DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们课上主要带领大家认识DDS，更多使用方法和相关内容，课程配套的教程中会有介绍，大家也可以参考这里的链接进行学习。 https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["humble","，","dds","。","配套","冰山","vendors","教程","更","middleware","非常复杂","链接","html","也","ros","https","介绍","内容","进行","非常","本身","认识","多"," ","on","docs","concepts","中会","with","implementations","www",".","org","_","这里","working","about","一个","大家","-","com","系统","design","只是","是","一角","可以","different","和","有","rmw","/","ros2","课上","方法","guides","multiple","带领","参考","video","使用",":","学习","bv12z4y167w2","的","to","冰山一角","主要","我们","articles","bilibili","复杂","课程","相关","en","how"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/","text":"工作空间：开发过程的大本营 大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是工程。 工作空间是什么 类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做工作空间。 所以工作空间是一个存放项目开发相关文件的文件夹，也是开发过程中存放所有资料的大本营。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。 创建工作空间 了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 自动安装依赖 我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init & rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y 编译工作空间 依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。 设置环境变量 编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["，","多少","配置","用","clone","所有","rosdep","否则","内容","如果","docs","一部","任何","类似","中会","工程","代码","新","过程","org","叫做","rosdepc","均","以及","错误","com","需要","不会","过","这","脚本","人为","行文","完全","概念","选项","文件","tutorials","pip3","bashrc","编写","并且","source","可执行文件","放置","2","3","local","使用","学习","后","数量","子目录","的","到","运行","来讲","python3","后续","相关","等","未来","绝大","guyuehome","完成","让","humble","这些","大本","点击","。","子目","包","了解","产生","安装","教程","：","ros","某些","资料","一样","21","creator","此时","进行","就是","init","setup","sh","程序","中","为了","用于","还","里边","保存","_",".","工具","存放","当","-","一个","w","信息","不是","编写程序","工具栏","像是","..","i","；","echo","文件夹","创建","并列","下载","空间","关系","件夹","开发","很少","install","from","就","p","所以","空间结构","ws","多个","什么","我们","如图所示","大本营","当前","子","creating","工作","log","总体","唯一","缺少","&","中间","项目","path","“","之前","也","1","一部分","https"," ","visual","都","警告","大部分","日志","mkdir","了","设置","或者","y","环境变","至此","机器","生产","某","强调","集成","qt","社区","仅","这里","应该","dev","以上","所示","pip","看到","找到","自动生产","可以","典型","src","得到","定义","studio","、","$","如下","报错","sudo",">","在","--","部分","参考","命令","~","存在","一些","时","根目录","cd","要","结构","比如","en","build","允许","a","#","执行","管理","编译","接下","环境变量","环境","链接","html","接触","apt","接下来","一点","成功","rosdistro","workspace","针对","变量","名称","四个","能够","生效","gitee","另外","大家","自己","colcon","里","功能","系统","eclipse","各种","是","会","情况","update","啦","和","有","/","b2","ros2","手动","目录","git","两个","终端","机器人","绝大部分","想要","下来","从","这个","结果",":","开始","并","b","\"","”","自动","依赖","操作","出现","参数","大部"],"title":"**工作空间：开发过程的大本营**","title_tokens":["的","大本","*","过程","：","空间","大本营","开发","工作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_1","text":"大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是工程。","text_tokens":["这些","，","点击","。","环境","产生","“","所有","之前","接触","某些","visual"," ","creator","都","此时","内容","程序","中","工程","新","里边","集成","qt","工具","叫做","应该","当","一个","大家","以及","编写程序","工具栏","eclipse","过","是","会","选项","和","有","创建","文件","编写","文件夹","studio","、","放置","在","件夹","开发","想要","这个","学习","的","就","我们","”","比如","后续","等","工作"],"title":"工作空间：开发过程的大本营","title_tokens":["的","大本","过程","：","空间","大本营","开发","工作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_2","text":"类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做工作空间。 所以工作空间是一个存放项目开发相关文件的文件夹，也是开发过程中存放所有资料的大本营。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。","text_tokens":["，","用","所有","一部","类似","工程","代码","新","过程","叫做","错误","需要","这","脚本","人为","行文","完全","文件","编写","可执行文件","放置","2","3","后","数量","子目录","的","到","运行","来讲","相关","未来","等","绝大","子目","。","大本","产生","安装","：","ros","某些","资料","一样","进行","就是","中","用于","里边","保存","_","存放","一个","w","信息","不是","像是","；","文件夹","创建","并列","空间","关系","件夹","开发","很少","install","就","所以","空间结构","ws","多个","我们","如图所示","大本营","子","工作","log","总体","唯一","中间","项目","也","1","一部分"," ","都","警告","大部分","日志","了","或者","机器","某","强调","集成","这里","dev","以上","所示","可以","典型","src","得到","定义","、","在","部分","存在","一些","时","根目录","要","结构","比如","build","允许","a","执行","管理","编译","环境","一点","成功","针对","名称","四个","另外","自己","里","功能","系统","各种","是","会","情况","和","有","b2","目录","两个","机器人","绝大部分","这个","结果","开始","并","b","操作","参数","大部"],"title":"工作空间是什么","title_tokens":["空间","什么","工作","是"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_3","text":"了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git","text_tokens":["，","接下","了解","教程","：","clone","接下来","https","21"," ","mkdir","了","代码","_",".","gitee","dev","-","一个","com","可以","概念","tutorials","和","src","创建","下载","/","并且","ros2","$","空间","如下","git","下来","命令","使用","结果","~",":","的","p","ws","我们","cd","guyuehome","工作"],"title":"创建工作空间","title_tokens":["空间","创建","工作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_4","text":"我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init & rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y","text_tokens":["humble","，","多少","&","path","安装","：","rosdep","也","apt","init"," ","都","rosdistro","中","y","代码","社区","工具","rosdepc","-","一个","pip","..","i","各种","会","可以","update","pip3","有","src","下载","手动","$","sudo","--","从","使用","install","from","的","一些","我们","cd","自动","依赖","python3"],"title":"自动安装依赖","title_tokens":["安装","依赖","自动"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_5","text":"依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。","text_tokens":["，","。","编译","安装","：","缺少","否则","ros","apt","如果"," ","成功","任何","中","中会","或者","了","代码","生产","过程","_","log","应该","-","dev","colcon","看到","错误","不会","自动生产","可以","啦","文件","有","文件夹","/","、","$","如下","空间","报错","sudo","在","件夹","命令","使用","install","~","后","就","的","ws","cd","自动","依赖","python3","出现","build","完成","工作"],"title":"编译工作空间","title_tokens":["空间","编译","工作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_6","text":"编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。","text_tokens":["，","配置","编译","环境变量","。","环境","：","所有","工作"," ","成功","setup","sh","设置","为了","环境变","至此","了","还","变量","_",".","仅","能够","生效","找到","dev","均","功能","系统","需要","echo","行文","bashrc","和","文件","创建","/",">","、","source","$","可执行文件","空间","local","终端","在","install","~","后","的","就","ws","\"","我们","当前","#","执行","完成","让","包"],"title":"设置环境变量","title_tokens":["环境变量","变量","环境","设置","环境变"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_7","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["humble","tutorials",".","org","/","html","ros","-","https"," ","a","docs","workspace","en","creating",":"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/","text":"功能包：开发过程的大本营 在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做功能包。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。 创建功能包 如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python 编译功能包 在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash 功能包的结构 功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。 C++功能包 首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。 Python功能包 C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["，","袋子","配置","包是","版权","用","复用","控制","一起","所有","规则","那","感知","如果","内容","除此之外","多","介绍","type","docs","表示","points","机制","代码","拆分","cmakelists","过程","org","叫做","拿","pkg","分析","你","头疼","该","入口","需要","将","entry","当然","这","编程","软件","行文","而是","tutorials","文件","刚才","立刻","新建","提高","编写","方法","source","普通","必然","之间","local","可执行文件","解析","但","除此","使用","一颗","bash","语法","数量","first","的","到","红豆","运行","得","某种","译成","？","耦合","重要","相关","后续","等","完成","en","型","包","说明","humble","这些","大本","。","呢","教程","移动","：","ros","某些","一样","混合","很多","豆子","下","五颜六色","就是","setup","程序","中","c++","绿豆","里边","出来","_",".","原理","当","假设","一个","-","ament","your","不是","给","信息","；","尽量","黄豆","很快","新创","文件夹","但是","下载","越","率","举个","创建","关系","视觉","手上","颜色","包该","件夹","开发","如何","跟","正常","看","xml","install","必须","来","就","python","很难","所以","指令","ws","主要","我们","py","才能","自主","大本营","拿出","源码","三个","creating","工作","可能","放在","语言","“","把","也","包中","https"," ","都","时候","首先","新创建","设置","了","环境变","或者","机器","cmakerlists","社区","这里","dev","看到","是否","可以","降低","src",">","、","之外","$","之后","例子","如下","包含","在","--","参考","命令","~","c","找","分别","存在","起来","继续","判断","导航","时","<","不","一些","好","cd","别人","还是","结构","比如","要","讲解","build","cmake","#","a","执行","learning","只想","描述","编译","环境变量","之一","环境","name","类型","声明","编译成","链接","html","发现","名字","workspace","txt","package","是不是","变量","名称","是否是","大家","colcon","里","空间","包并","功能","各种","是","会","划分","create","和","有","/","ros2","分享","还有","只","终端","每个","机器人","两个","其中","放到","么","这个",":","他们","并","版本","”","依赖","不同","想"],"title":"**功能包：开发过程的大本营**","title_tokens":["的","大本","*","过程","：","大本营","开发","功能","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_1","text":"在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做功能包。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。","text_tokens":["，","袋子","用","复用","控制","一起","感知","如果","多","机制","代码","拆分","叫做","拿","你","头疼","需要","当然","软件","而是","文件","立刻","提高","方法","普通","之间","使用","一颗","数量","的","到","红豆","得","某种","耦合","重要","等","包","说明","这些","。","教程","移动","ros","某些","混合","很多","豆子","五颜六色","就是","中","绿豆","出来","原理","当","假设","一个","不是","给","；","尽量","黄豆","很快","文件夹","但是","下载","越","率","举个","关系","视觉","手上","颜色","包该","件夹","如何","就","很难","所以","我们","自主","拿出","源码","三个","可能","放在","把","也","包中"," ","都","时候","了","机器","社区","看到","可以","降低","、","例子","在","找","起来","导航","时","不","别人","比如","只想","之一","发现","是不是","名称","大家","里","功能","是","会","划分","有","ros2","分享","只","每个","机器人","其中","放到","么","这个","他们","并","不同","想"],"title":"功能包：开发过程的大本营","title_tokens":["的","大本","过程","：","大本营","开发","功能","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_2","text":"如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python","text_tokens":["，","。","呢","包是","name","：","那"," ","如果","名字","新创建","type","package","中","表示","c++","或者","_","这里","pkg","dev","-","一个","ament","功能","；","可以","create","新创","和","src","创建","新建","/","ros2",">","$","如何","跟","终端","在","--","命令","使用","这个","~","c","分别","的","python","指令","就","版本","ws","<","我们","cd","还是","？","比如","build","cmake","#","相关","learning","包"],"title":"创建功能包","title_tokens":["创建","功能","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_3","text":"在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash","text_tokens":["，","配置","编译","环境变量","环境","：","所有","包中"," ","setup","环境变","代码","变量","_",".","dev","colcon","需要","功能","可以","和","src","创建","包","编写","/","source","$","之后","空间","local","正常","在","bash","install","~","的","继续","ws","运行","好","我们","cd","才能","build","#","完成","工作"],"title":"编译功能包","title_tokens":["功能","编译","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_4","text":"功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。","text_tokens":["，","。","呢","那","下","新创建","是否是","分析","一个","包并","不是","是否","功能","新创","文件","文件夹","刚才","创建","普通","如何","两个","件夹","来","的","判断","我们","？","结构","包"],"title":"功能包的结构","title_tokens":["结构","的","功能","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#c","text":"首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。","text_tokens":["描述","，","。","编译","版权","类型","声明","：","规则"," ","下","内容","首先","txt","设置","package","中","c++","代码","cmakelists","cmakerlists",".","该","功能","需要","各种","是","文件","和","必然","如下","如何","两个","xml","包含","在","看","其中","使用","语法","必须","的","存在","所以","主要","运行","才能","要","依赖","cmake","包"],"title":"C++功能包","title_tokens":["功能","包","c++"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#python","text":"C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。","text_tokens":["描述","，","。","编译","配置","语言","版权","声明","“","编译成","：","也","一样","介绍"," ","内容","除此之外","setup","package","points","c++","程序","中","里边",".","_","大家","信息","给","入口","需要","功能","将","各种","entry","这","是","会","编程","行文","文件","但是","有","和","还有","之外","后续","但","解析","可执行文件","如何","两个","xml","包含","除此","在","使用","python","的","版本","所以","一些","主要","不","py","”","译成","我们","讲解","依赖","源码","不同","执行","型","包"],"title":"Python功能包","title_tokens":["python","功能","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_5","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["humble","html","ros","https"," ","docs","workspace","package",".","org","-","your","tutorials","/","ros2",":","first","a","en","creating"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/","text":"节点 机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。 通信模型 完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。 案例一：Hello World节点（面向过程） ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。 运行效果 大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ], 创建节点流程 代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。 案例二：Hello World节点（面向对象） 所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。 运行效果 下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ], 创建节点流程 所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。 案例三：物体识别节点 没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。 运行效果 在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。 代码解析 在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ], 案例四：机器视觉识别节点 用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。 运行效果 启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 注意：如果是在虚拟机中操作，需要进行以下设置： 把虚拟机设置为兼容USB3.1； 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。 代码解析 相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ], 节点命令行操作 节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息 思考题 现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["范围","远程","list","更加","0.5","那","除此之外","如果","介绍","模块","表示","疑惑","实际","搭载","cnt","面向","该","人为","行文","编程","图像识别","刚才","0","并且","但","chain","综合","findcontours","联系","识别","通过","可视","中心点","具体","某种","分布式","计算机","？","具备","即可","等","让","object","方便","说明","这些","简单","(","安装","先拉","某些","setup","看上","组成","溜溜","获取","方式","当","知其所以然","-","pyhton","bgr","完整","信息","更多","waitkey","像素","显示","home","轮子","如何","位于","正常","开发","先","from","这样","孤立","contours","载体","噪声","驱动","放在","作者","as","然后","日志","y","查询","ruby","动态","桌子","兼容","找到","时间","dev","red","可读性","操作系统","图片","可移植性","、","所在","字符串","!","至","居","不","）","二值化","收到","比如","learning","循环","ret","修改","摄像","运动","综合体","想到","name","思考题","部门","continue","+","就让","会弹","像头","—","是不是","众多","呀","四个","一项","另外","它","高","get","二","一种","和","retr","ros2","职责","可读","logger","array","boundingrect","机器人","下来","其中","这个","关于","打印","主","阈值","处理","古月","sleep","操作","点画","一线","保持","用","控制","实现","imread","调整","查看","（","过程","例程","设备","熟悉","分析","你","乃至","及","将","看看","当然","为","心里","路径","解析","打开","2","算机","videocapture","学习","的","细胞","@","运行","着急","难","改成","python3","最大","知道","guyuehome","完成","en","骡子","包","很","90","。","helloworld","java","ros","物体","cvtcolor","左上角","计算","就是","步骤","程序",",","'","宽","用到","保持联系","_","while","一个","给","编写程序","外界","；","互相","但是","int","视觉","for","思考","就","前","指令","]","中心","课程","生成","重点","none","数值","工作","可能","太小","唯一","案例","负责","编码","后勤部","“","之前","也","1","https","转换","时候","示例","或者","现在","hello","被","这里","图像处理","看到","类","是否","速度","inrange","可以","imshow","得到","图像","src","shutdown","云端","根据","任务","如下","time","在","发布","发生","helloworldnode","命令","起来","处理过程","upper","勾勒","<","好","复杂","#","执行","周期",")","编译","destroyallwindows","super","独立","对于","链接","库","接下来","名字","通信","一帧","hsv","不要","成功","考题","webcam","像","名称","眼睛","大家","不过","[","def","50","功能","坐标","做","是","字符","岂","approx","工人","结果","开始","他们","并","以下","流程","调试","=","rclpy","成为","摄像头","重新","出现","参数","移植性","编程语言","类似","代码","再","叫做","后勤","入口","需要","entry","这","read","三","选项","文件","推荐","方法","一节","之间","除此","这种","使用","为止","共同","地方","推动","纠结","接口","稍微","吧","腿","重要","模型","150","未来","列表","usb3.1","变化","移动","不用","监控","初始","物理","下","认识","合体","发送","c++","为例","好像","*","相比","到底","总结","知其然","w","马","lower","不是","import","只是","cap","绿点","读取","创建","初始化","面积","注意","看","{","工厂","所以","可视化","通信模型","我们","py","过来","drawcontours","true","电脑","所以然","180","总体","255","做到","出","语言","函数","中间","自然","run","np","上去","detect","了","jpg","in","更多要","应该","一台","却","img","之外",">","console","角度","sudo","虽然","128","参考","xy","分别","node","启动","结构","bgr2hsv","a","hcx","destroy","苹果","env","问题","html","点","一点","父类","整体","numpy","下限","info","可移植","状态","效果","里","shape","每一项","各种","编码方式","相机","没错","啦","上角","有","命令行","还有","/","__","相同","self","从","分布","最为","\"","退出","依然","bin","args","一","understanding","，","配置","这份","来源","后勤部门","一起","这座","没","docs","多","points","来看","机制","color","org","mask","进程","节点","加入","还会","com","硬件","过","概念","tutorials","world","太","编写","可执行文件","布式","ok","销毁","一张","框会","可","8","后","改变","到","的话","得","多种","看上去","摇杆","humble","这款","呢","总体而言","：","窗口","init","左上","一样","circle","21","进行","中","还","身体","出来",".","红色","上限","颜色","各不相同","检测","install","cv2","而已","休眠","来","python","中将","ws","设计","框架","opencv","取","左右","更好","理过","把","输出"," ","都","移植","绿色","hierarchy","对象","设置","轮廓","等待","机器","虚拟机","某","以","if","不能","此处","utf","去除","apple","一下","上","常用","既然","$","合理","前后","四","一些","算是","每","时","image","实时","5","h","还是","前后左右","要","保障","模拟","更为","网上","scripts","比喻","接下","环境","更","关闭","apt","发现","请","理解","class","www","连接","spin","面向对象","去","关注","系统","命名","会","回到","提供","两个","终端","每个","虚拟","只不过","想要","同理","nodes",":","经常","b","模块化","而言","厂房","main","”","coding","框架图","不同","x","usr"],"title":"**节点**","title_tokens":["节点","*"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_1","text":"机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。","text_tokens":["这些","，","。","综合体","“","一起","ros","名字"," ","那","就是","合体","了","中","机制","整体","机器","众多","连接","像","一项","一个","节点","给","功能","每一项","各种","是","在","机器人","综合","的","就","一些","细胞","通过","到","我们","”","成为","取","工作"],"title":"节点","title_tokens":["节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_2","text":"完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。","text_tokens":["，","配置","编程语言","后勤部门","控制","远程","一起","实现","这座","那","除此之外","多","来看","搭载","叫做","进程","你","节点","乃至","后勤","该","还会","需要","看看","硬件","这","人为","行文","编程","文件","但","可执行文件","布式","算机","除此","共同","的","地方","推动","到","通过","细胞","运行","具体","分布式","计算机","腿","等","让","摇杆","完成","这些","。","这款","移动","：","监控","java","某些","物理","计算","就是","认识","组成","程序","中","c++","获取","还","到底","身体","当","一个","完整","不是","信息","外界","；","互相","轮子","如何","位于","各不相同","来","python","就","工厂","这样","设计","我们","生成","载体","工作","可能","唯一","放在","语言","后勤部","左右","“","自然","也"," ","都","时候","了","或者","机器","查询","某","ruby","桌子","找到","一台","看到","操作系统","速度","可以","上","却","既然","得到","之外","、","根据","任务","角度","云端","虽然","在","前后","分别","算是","每","时","不","前后左右","比如","保障","复杂","a","更为","执行","摄像","运动","编译","比喻","接下","环境","想到","独立","更","部门","接下来","像头","整体","—","连接","名称","眼睛","状态","另外","去","它","里","系统","功能","做","是","命名","和","有","还有","职责","相同","提供","每个","机器人","下来","想要","从","分布","这个","结果","工人","他们","并","b","厂房","”","摄像头","操作","一线","不同","参数"],"title":"通信模型","title_tokens":["通信模型","通信","模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world","text":"ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。","text_tokens":["，","。","简单","“","实现"," ","就是","程序","中","了","hello","例程","一个","节点","编写程序","需要","功能","当然","是","world","字符","编写","ros2","字符串","终端","先","从","开始","来","的","并","打印","最为","到","不","我们","”","复杂","循环"],"title":"案例一：Hello World节点（面向过程）","title_tokens":["案例","hello","（","过程","world","）","：","面向","节点"," ","一"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_3","text":"大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["，","。","编译","做到","helloworld","“","run","先拉","实现","也"," ","下","不要","成功","然后","溜溜","中","代码","hello","再","出来","过程","_","知其然","效果","分析","知其所以然","大家","马","节点","看到","是","可以","循环","world","字符","ros2","$","字符串","如何","终端","在","看","先","命令","这个","后","打印","来","的","所以","通过","node","运行","着急","我们","好","”","课程","执行","所以然","learning","骡子"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_4","text":"这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ],","text_tokens":["，","配置","控制","实现","0.5","points","来看","代码","过程","面向","节点","加入","com","入口","需要","entry","选项","文件","world","编写","ok","销毁","打开","使用","8","后","的","@","运行","？","python3","接口","知道","guyuehome","完成","让","说明","包","。","呢","helloworld","(","：","初始","init","下","进行","setup","程序",",","*","'","方式","_",".","while","-","信息","import","创建","初始化","如何","正常","from","休眠","{","python","]","我们","py","none","函数","作者","“","输出"," ","对象","示例","日志","设置","hello","时间","utf","类","是否","shutdown","console","如下","time","发布","!","居","node","#","learning","循环","scripts",")","destroy","env","编译","关闭","库","点","info","www","[","def","系统","功能","get","是","/","ros2","logger","这个",":","主","并","=","\"","main","coding","”","古月","rclpy","bin","args","sleep","usr"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_5","text":"代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。","text_tokens":["，","。","简单","做到","函数","编码","更","不用","关闭","：","对于","初始","实现","发现"," ","如果","一点","模块","中","c++","或者","代码","理解","机器","用到","过程","方式","总结","这里","应该","面向","一个","大家","节点","pyhton","功能","系统","一下","做","过","是","会","编程","可以","有","创建","但是","初始化","方法","销毁","这种","虽然","机器人","先","想要","使用","经常","学习","的","并","流程","纠结","这样","就","模块化","我们","具体","的话","难","接口","稍微","复杂","出现","重要","未来","很"],"title":"创建节点流程","title_tokens":["创建","节点","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world_1","text":"所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。","text_tokens":["，","。","更","更好","上去","也","更加"," ","移植","看上","对象","中","了","代码","方式","可移植","面向","大家","面向对象","可读性","可移植性","会","编程","可以","刚才","但是","和","ros2","推荐","可读","虽然","在","开发","使用","的","就","起来","所以","这样","一些","调试","我们","改成","比如","复杂","具备","看上去","方便","移植性"],"title":"案例二：Hello World节点（面向对象）","title_tokens":["案例","hello","（","world","）","：","面向","节点","面向对象"," ","对象","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_6","text":"下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["，","。","helloworld","“","run","：","调整"," ","成功","中","hello","class","_","效果","节点","看到","一下","可以","world","字符","ros2","$","字符串","终端","在","下来","后","打印","的","node","运行","”","还是","learning","循环"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_7","text":"功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ],","text_tokens":["，","配置","这份","控制","实现","0.5","points","代码","面向","节点","加入","com","入口","需要","entry","选项","文件","world","编写","ok","销毁","打开","使用","8","后","的","@","运行","具体","python3","接口","知道","guyuehome","完成","让","说明","包","变化","。","helloworld","(","：","初始","init","一样","进行","setup","程序",",","*","'","方式","_",".","while","-","一个","信息","import","但是","创建","初始化","正常","看","from","休眠","{","python","]","我们","py","none","函数","作者","“","输出"," ","对象","示例","日志","了","设置","等待","hello","时间","utf","类","是否","一下","shutdown","console","如下","虽然","发布","time","发生","!","helloworldnode","居","node","时","结构","#","learning","循环","scripts",")","destroy","env","编译","super","name","关闭","库","父类","点","info","class","www","spin","面向对象","[","def","功能","系统","get","/","ros2","__","self","logger",":","主","并","=","\"","main","coding","”","退出","古月","rclpy","bin","sleep","args","usr"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_8","text":"所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。","text_tokens":["，","。","编码","总体而言","关闭","初始","实现"," ","步骤","了","中","疑惑","是不是","hello","机器","方式","不能","四个","这里","一个","节点","不过","大家","不是","功能","编码方式","做","这","是","只是","编程","心里","创建","world","初始化","还有","任务","销毁","机器人","只不过","为止","而已","改变","打印","的","并","所以","一些","而言","到","得","具体","接口","依然","吧","完成","总体"],"title":"创建节点流程","title_tokens":["创建","节点","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_9","text":"没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。","text_tokens":["，","。","接下","苹果","实现","接下来"," ","中","为例","实际","机器","以","过程","找到","一个","节点","图片","没错","编写","任务","视觉","机器人","下来","先","从","一张","来","就","的","识别","通过","我们","模拟","网上"],"title":"案例三：物体识别节点","title_tokens":["案例","三","识别","：","物体","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_10","text":"在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。","text_tokens":["，","imread","表示","实际","代码","例程","需要","将","为","tutorials","路径","使用","框会","后","的","识别","可视","运行","中心点","python3","即可","object","。","安装","(","：","窗口","21","中","'","用到","出来","_",".","-","一个","绿点","home","注意","install","cv2","前","就","指令","ws","可视化","中心","我们","py","opencv","出","中间","run","把"," ","绿色","然后","轮廓","jpg","被","dev","图像处理","看到","图片","apple","可以","图像","src","$","如下","sudo","在","image","node","勾勒","#","hcx","learning","修改",")","苹果","编译","库","apt","请","会弹","成功","—","啦","/","ros2","这个","=","处理","重新"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_11","text":"在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ],","text_tokens":["，","配置","范围","list","实现","imread","points","代码","color","例程","过程","mask","cnt","节点","加入","com","及","将","入口","需要","entry","图像识别","概念","为","tutorials","选项","0","文件","编写","chain","销毁","2","打开","使用","8","后","findcontours","的","识别","通过","@","具体","python3","接口","模型","150","guyuehome","完成","object","让","90","说明","包","知道","。","helloworld","(","：","初始","init","左上","circle","cvtcolor","21","左上角","计算","进行","setup","程序","中",",","*","宽","'","出来","_",".","-","一个","红色","bgr","lower","w","不是","更多","waitkey","像素","import","读取","显示","创建","int","初始化","上限","面积","home","如何","for","颜色","检测","from","cv2","{","来","python","ws","]","中心","我们","py","contours","drawcontours","opencv","重点","none","180","数值","噪声","太小","255","函数","作者","理过","np","as","1"," ","转换","hierarchy","detect","对象","示例","轮廓","了","设置","y","jpg","等待","机器","in","if","更多要","此处","dev","图像处理","red","utf","inrange","类","图片","去除","apple","imshow","img","图像","得到","src","shutdown","所在","console","如下","128","在","!","xy","居","处理过程","upper","image","node","一些","<","二值化","勾勒","5","h","bgr2hsv","模拟","#","hcx","learning","循环","scripts",")","destroy","苹果","env","destroyallwindows","编译","关闭","库","continue","+","hsv","点","numpy","下限","info","class","www","spin","效果","大家","[","def","关注","shape","功能","坐标","高","get","系统","是","上角","retr","和","/","ros2","array","boundingrect","logger","机器人","approx","从","这个",":","关于","主","并","阈值","=","处理","\"","main","coding","退出","古月","rclpy","bin","出现","args","点画","x","usr"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_12","text":"用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。","text_tokens":["，","摄像","接下","苹果","。","用","问题","接下来","物体","没","就让","进行","像头","类似","好像","或者","还","机器","呀","动态","眼睛","应该","节点","图片","读取","有","太","图像","颜色","合理","机器人","下来","其中","的","识别","不","我们","摄像头"],"title":"案例四：机器视觉识别节点","title_tokens":["案例","识别","机器","：","视觉","节点","四"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_13","text":"启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 注意：如果是在虚拟机中操作，需要进行以下设置： 把虚拟机设置为兼容USB3.1； 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。","text_tokens":["驱动","，","摄像","。","移动","run","：","把","物体"," ","如果","进行","成功","设置","像头","中","webcam","虚拟机","设备","_","连接","兼容","红色","一个","节点","该","需要","；","是","为","可以","啦","ros2","并且","$","如下","注意","终端","在","虚拟","中将","可","至","后","就","以下","识别","的","实时","node","运行","启动","摄像头","#","操作","object","learning","usb3.1"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_14","text":"相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ],","text_tokens":["，","配置","范围","来源","list","points","代码","color","mask","cnt","节点","加入","com","及","将","入口","需要","entry","read","为","选项","文件","0","编写","并且","chain","ok","2","销毁","打开","使用","videocapture","8","后","findcontours","的","识别","通过","@","接口","python3","最大","模型","150","guyuehome","完成","object","让","90","说明","包","知道","变化","。","helloworld","(","：","初始","init","左上","circle","cvtcolor","进行","计算","左上角","setup","程序","中",",","*","相比","宽","'","出来","_",".","while","-","红色","w","bgr","lower","信息","waitkey","像素","import","cap","读取","显示","创建","int","初始化","上限","面积","for","颜色","检测","from","cv2","{","来","python","]","中心","py","contours","drawcontours","true","opencv","none","180","数值","噪声","太小","驱动","255","函数","作者","np","之前","as","1"," ","转换","hierarchy","detect","对象","示例","轮廓","了","设置","y","in","if","这里","图像处理","red","utf","inrange","类","图片","去除","imshow","img","图像","得到","shutdown","所在","console","如下","128","!","xy","居","upper","image","node","一些","<","二值化","勾勒","5","h","bgr2hsv","#","周期","learning","scripts","ret","修改",")","摄像","env","苹果","destroy","编译","关闭","库","continue","+","一帧","hsv","点","像头","numpy","下限","info","webcam","class","www","效果","50","[","def","shape","坐标","功能","高","get","相机","系统","是","上角","retr","和","/","ros2","array","boundingrect","logger","approx","从",":","主","并","阈值","=","\"","处理","main","coding","古月","rclpy","摄像头","bin","出现","args","点画","x","usr"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_15","text":"节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息","text_tokens":["name","list","："," ","查看","info","_","节点","信息","常用","ros2",">","$","如下","命令","的","node","<","操作","#","列表"],"title":"节点命令行操作","title_tokens":["命令","命令行","节点","操作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_16","text":"现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。","text_tokens":["，","配置","保持","控制","实现","介绍","如果","机制","熟悉","节点","还会","将","这","概念","方法","一节","之间","后","改变","联系","的","细胞","得","某种","多种","摇杆","很","这些","。","ros","下","发送","中","保持联系","一个","不是","给","显示","就","指令","孤立","框架","我们","过来","电脑","负责","工作","把"," ","了","现在","机器","应该","看到","速度","常用","图像","在","收到","要","比如","a","摄像","运动","问题","发现","像头","连接","另外","大家","系统","回到","没错","会","一种","和","有","两个","岂","机器人","想要","同理","这个","开始","他们","b","并","最为","摄像头","框架图","参数"],"title":"思考题","title_tokens":["思考题","考题","思考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_17","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["humble","understanding","tutorials",".","org","/","ros2","html","ros","-","https","docs","en","nodes",":"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/","text":"话题 节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。 通信模型 以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。 发布/订阅模型 从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为发布者，接收数据的对象称之为订阅者，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。 多对多通信 大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。 异步通信 话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。 消息接口 最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过.msg后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。 案例一：Hello World话题通信 了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 运行效果 启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。 发布者代码解析 我们来看下发布者的实现方法。 程序实现 learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口 订阅者代码解析 我们再来看下订阅者的实现方法。 程序实现 learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。 案例二：机器视觉识别 在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。 运行效果 这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。 发布者代码解析 learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], }, 订阅者代码解析 learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], }, 案例三：机器视觉识别优化 通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub 话题命令行操作 话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息 思考题 关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？ 参考链接 https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["范围","协议","号","list","所有","0.5","那","如果","对应","模块","publish","从而","cnt","称之为","该","与","编程","sub","合适","刚才","0","提高","并且","但","必然","优化","chain","等等","%","联系","s","者","识别","findcontours","std","可视","通过","转换成","某种","传感","？","发布者","subscription","即可","让","object","说明","这些","并不知道","(","安装","异步","某些","setup","组成","用于","获取","做成","方式","-","方向","bgr","无法","信息","waitkey","特性","像素","基本原理","单向","一篇","显示","随处可见","率","msgs","如何","开发","先","逻辑性","from","放入","这样","多个","原本","contours","噪声","驱动","作者","as","日志","y","hz","发送数据","集成","视频","接收","red","接收数据","可移植性","名","subscribernode","、","所在","精简","之后","字符串","bw","!","定时器","居","固定","不","收到","仔细","）","不然","二值化","比如","bgr8","learning","循环","ret","修改","运动","逻辑","！","name","思考题","imgmsg","continue","+","感兴趣","另","是不是","呀","小编","另外","sensor","它","格式","高","get","二","heard","保证","一种","和","retr","直接","千丝","中文","ros2","array","logger","boundingrect","适合","机器人","下来","video","其中","这个","关于","主","阈值","通用","处理","古月","操作","cvbridge","点画","想","只要","听说","二个","保持","用","控制","桥梁","实现","publishernode","查看","文章","采集","他会","标准","（","一定","设备","例程","过程","联系方式","\\","分析","你","及","将","稍后","当然","优先级","为","指","比方","string","解析","打开","2","3","一次","videocapture","的","to","杂志","@","运行","区分","python3","平时","不太","留","知道","guyuehome","完成","en","千丝万缕","包","90","。","优先","helloworld","ros","所谓","物体","cvtcolor","此时","计算","就是","左上角","化成","举","东西","程序",",","'","宽","_","作为","一个","给","互相","但是","int","一般","视觉","for","思考","目标","出去","就","指令","]","第一次","中心","换","不知","none","数值","太小","可能","唯一","案例","无关","“","之前","也","1","10","https","转换","时候","示例","现在","hello","被","排版","这里","第一个","各种各样","图像处理","叫","看到","类","inrange","是否","没有","可以","队列","回调","imshow","得到","图像","pub","shutdown","如下","例子","在","发布","已","命令","cv","upper","<","勾勒","最","好","写","讲解","复杂","#","}","周期","执行","已经",")","编译","数据结构","感兴","super","独立","对于","一份","讲","链接","库","接下来","名字","通信","一帧","hsv","进一步","成功","chatter","bridge","考题","间","webcam","名称","像","大家","后缀","[","def","不过","功能","数据传输","坐标","做","是","字符","拍摄","只","更换","approx","填充","开始","并","以下","渲染","流程","=","对劲","rclpy","成为","参数","每换","单位","移植性","最后","编程语言","转化成","复用","什么样","类似","思想","成","代码","微信","再","符合","叫做","数据","基本","需要","消息","入口","entry","这","数据类型","read","三","完全","选项","文件","无论","方法","之间","这种","英文","使用","是从","内","公众","提示","订阅","接口","想象","重要","模型","150","未来","一新","程序实现","挺","列表","变化","监控","初始","传输","很多","下","知识","听","就要","发送","0.1","为例","好像","data","*","rgb","原理","同样","总结","w","lower","肯定","不是","长宽","import","个","cap","对","读取","创建","初始化","面积","注意","看","第一","几个","{","谁","可视化","通信模型","我们","什么","py","drawcontours","true","基于","报社","180","dds","做到","255","语言","函数","自然","run","np","魔性","detect","感器","了","传递","in","应该","接口协议","img","发出","exe","frame",">","console","角度","包含","虽然","128","sudo","参考","xy","分别","node","启动","话题","兴趣","结构","bgr2hsv","a","值","描述","destroy","苹果","env","cam","类型","问题","html","本身","自行","父类","点","一行","publisher","numpy","随处","info","下限","可移植","能够","效果","词","imagepublisher","里","shape","raw","各种","相机","msg","没错","啦","上角","有","命令行","/","还有","__","画面","self","从","么","长度","\"","较强","退出","bin","args","万缕","一","转化","understanding","，","配置","人","几乎","周期性","焕然一新","组织","没","docs","多","因为","任何","type","points","来看","color","org","mask","需求","节点","加入","com","硬件","概念","软件","tutorials","太","world","编写","感觉","销毁","第二个","timer","8","数量","后","接口定义","秒","到","用户","传递数据","的话","得","块","来讲","生活","摇杆","中是","控制指令","humble","第二","呢","了解","统一","在生活中","不变","：","阅读","init","一样","左上","circle","进行","中","还","receiving","出来",".","红色","打","之为","i","哪里","echo","满足","topic","上限","关系","颜色","检测","install","cv2","来","python","定时","设计","可见","才能","opencv","传感器","报纸","过瘾","publishing","更好","把","输出"," ","都","积木","移植","hierarchy","对象","设置","轮廓","等待","机器","某","以","if","不能","listener","以上","utf","要求","去除","一下","不行","上","解","既然","常用","定义","$","topics","一句","带宽","存在","callback","继续","一些","实时","每","image","5","本原","要","还是","h","据传","scripts","焕然","接下","更","关闭","apt","频率","拼接","理解","说","class","www","usb","spin","imagesubscriber","又","自己","系统","会","create","建议","两个","似乎","每个","终端","想下","想要","换成",":","进入","说干就干","一步","b","模块化","根本","同学","main","各样","”","coding","耦","x","usr"],"title":"**话题**","title_tokens":["话题","*"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_1","text":"节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。","text_tokens":["这些","，","。","独立","桥梁","实现"," ","就是","了","传递","间","机器","方式","联系方式","数据","各种各样","节点","它","不是","功能","各种","是","会","一种","有","千丝","但","之间","机器人","其中","联系","的","并","各样","最","传递数据","话题","重要","万缕","千丝万缕"],"title":"话题","title_tokens":["话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_2","text":"以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。","text_tokens":["，","桥梁","实现","查看","设备","数据","节点","称之为","将","硬件","这","必然","之间","的","到","用户","可视","某种","？","。","监控","ros","传输","此时","中","为例","获取","方式","作为","一个","方向","之为","信息","给","不是","显示","关系","就","这样","可视化","我们","才能","驱动"," ","了","传递","机器","某","以","视频","一下","可以","上","得到","图像","在","存在","实时","要","话题","a","据传","是不是","大家","它","功能","数据传输","相机","做","是","没错","有","拍摄","两个","机器人","从","这个","b","渲染","想"],"title":"通信模型","title_tokens":["通信模型","通信","模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_3","text":"从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为发布者，接收数据的对象称之为订阅者，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。","text_tokens":["，","号","实现","组织","文章","如果","类似","来看","他会","成","微信","叫做","数据","节点","称之为","需要","数据类型","比方","等等","使用","是从","公众","的","者","订阅","杂志","到","的话","？","发布者","平时","生活","模型","。","呢","在生活中","传输","知识","就是","发送","一个","打","无法","之为","特性","对","随处可见","看","出去","就","这样","什么","可见","基于","报纸","dds","“","自然","把","也"," ","都","对象","了","机器","发送数据","排版","接收","应该","叫","要求","接收数据","没有","可以","、","角度","之后","发布","居","固定","每","收到","好","话题","比如","兴趣","据传","感兴","类型","名字","本身","感兴趣","随处","名称","小编","另外","大家","它","格式","数据传输","是","会","和","有","/","机器人","从","这个","”","古月","成为"],"title":"发布/订阅模型","title_tokens":["/","发布","订阅","模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_4","text":"大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。","text_tokens":["，","人","号","控制","如果","多","因为","再","节点","称之为","该","优先级","2","3","公众","数量","的","者","订阅","杂志","区分","发布者","想象","模型","知道","摇杆","挺","控制指令","这些","。","优先","ros","一样","很多","听","发送","东西","一个","不是","之为","个","对","注意","谁","指令","多个","通信模型","我们","报纸","可能","唯一","魔性","也","1"," ","了","机器","被","一下","可以","、","发布","存在","不","仔细","不然","还是","话题","要","通信","是不是","大家","里","是","没错","和","有","建议","画面","似乎","每个","机器人","想下","这个","并"],"title":"多对多通信","title_tokens":["多","对","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_5","text":"话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。","text_tokens":["，","听说","用","号","控制","那","文章","如果","类似","叫做","数据","你","这","指","合适","太","等等","一次","后","公众","的","者","订阅","传感","？","发布者","知道","让","。","并不知道","异步","所谓","阅读","某些","传输","就是","用于","一个","特性","一篇","第一","逻辑性","就","指令","第一次","什么","传感器","不知","报社","报纸","可能","也"," ","时候","感器","了","某","可以","发出","发布","居","一些","不","收到","话题","比如","周期","修改","运动","逻辑","更","一份","通信","词","是","有","还有","适合","这个","根本","同学","较强","古月","参数","只要"],"title":"异步通信","title_tokens":["通信","异步"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_6","text":"最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过.msg后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。","text_tokens":["最后","，","编程语言","对应","标准","成","数据","节点","称之为","消息","与","编程","概念","文件","等等","英文","接口定义","的","者","订阅","通过","得","块","接口","发布者","。","统一","ros","传输","一样","进行","组成","中","方式",".","rgb","一个","之为","长宽","像素","就","这样","我们","无关","语言","也"," ","都","积木","了","机器","不能","这里","各种各样","可以","既然","图像","定义","、","包含","发布","在","话题","结构","比如","复杂","据传","值","描述","数据结构","通信","拼接","自行","理解","说","像","后缀","格式","系统","数据传输","msg","各种","是","会","一种","和","有","中文","每个","机器人","各样"],"title":"消息接口","title_tokens":["接口","消息"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#hello-world","text":"了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。","text_tokens":["，","。","接下","了解","“","类型","ros","接下来"," ","就要","发送","chatter","了","中","标准","代码","hello","从而","再","例程","原理","接收","一个","基本","消息","基本原理","是","啦","world","创建","编写","字符","定义","string","字符串","发布","下来","从","这个","开始","来","的","者","订阅","到","我们","”","本原","还是","话题","发布者","周期"],"title":"案例一：Hello World话题通信","title_tokens":["案例","hello","world","：","话题"," ","通信","一"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_7","text":"启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。","text_tokens":["，","第二","二个","。","helloworld","几乎","“","run","：","也","频率"," ","hello","以","_","同样","第一个","数据","一个","节点","看到","该","消息","可以","sub","world","pub","topic","ros2","字符","$","字符串","终端","发布","第二个","第一","的","者","订阅","运行","收到","启动","”","话题","发布者","learning","循环"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_8","text":"我们来看下发布者的实现方法。","text_tokens":["的","。","我们","方法","实现","发布者","发布","下","来看"],"title":"发布者代码解析","title_tokens":["发布者","代码","发布","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_9","text":"learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], },","text_tokens":["，","配置","0.5","publishernode","publish","points","代码","（","数据","节点","加入","com","消息","入口","需要","entry","为","选项","文件","world","string","编写","销毁","打开","timer","8","%","后","s","的","秒","提示","std","@","python3","接口","发布者","知道","guyuehome","完成","让","说明","包","helloworld","(","：","初始","init","进行","setup","程序","中",",","data","*","'","_",".","-","一个","信息","import","创建","初始化","topic","msgs","from","{","python","定时","]","py","none","publishing","函数","作者","“","10","输出"," ","对象","示例","日志","设置","等待","hello","utf","类","名","回调","队列","pub","shutdown","、","console","字符串","如下","发布","!","定时器","居","callback","node","）","话题","#","}","周期","执行","learning","循环","scripts","已经",")","destroy","env","编译","super","name","类型","关闭","库","父类","点","chatter","publisher","info","class","www","spin","[","def","功能","系统","msg","get","create","字符","/","ros2","__","self","logger",":","填充","主","长度","并","=","\"","main","coding","”","退出","古月","rclpy","bin","args","单位","usr"],"title":"程序实现","title_tokens":["实现","程序实现","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_10","text":"对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口","text_tokens":["，","关闭","：","初始","实现","如果","进行"," ","对象","程序","以上","分析","一个","节点","消息","编程","对","创建","初始化","如下","销毁","发布","想要","填充","并","流程","我们","话题","接口","发布者"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_11","text":"我们再来看下订阅者的实现方法。","text_tokens":["的","者","订阅","。","再","我们","方法","实现","下","来看"],"title":"订阅者代码解析","title_tokens":["代码","者","订阅","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_12","text":"learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], },","text_tokens":["，","配置","points","标准","代码","（","\\","数据","节点","加入","com","消息","入口","需要","entry","sub","选项","文件","world","string","编写","销毁","打开","8","后","%","s","的","者","订阅","提示","std","@","python3","接口","subscription","guyuehome","完成","让","知道","说明","包","helloworld","(","：","初始","init","进行","setup","程序",",","data","*","'","_",".","-","一个","信息","i","import","对","创建","topic","初始化","msgs","from","{","python","]","py","none","函数","作者","“","10","输出"," ","对象","示例","日志","设置","等待","hello","listener","utf","类","名","subscribernode","回调","队列","pub","定义","、","shutdown","console","如下","!","居","callback","node","）","收到","话题","#","}","执行","learning","循环","scripts",")","destroy","env","编译","super","name","类型","关闭","库","父类","点","chatter","info","class","www","spin","[","def","功能","系统","msg","get","heard","create","/","ros2","__","self","logger",":","主","长度","并","=","\"","处理","main","coding","”","退出","古月","rclpy","bin","args","usr"],"title":"程序实现","title_tokens":["实现","程序实现","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_13","text":"对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。","text_tokens":["，","。","接下","函数","关闭","：","初始","实现","之前","接下来","如果","进行"," ","通信","下","对象","程序","还","hello","机器","一定","例程","数据","以上","分析","一个","节点","大家","编程","对","回调","啦","创建","world","初始化","如下","销毁","优化","视觉","下来","想要","并","者","订阅","流程","继续","的","处理","不","我们","好","话题","接口","过瘾","基于"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_14","text":"在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。","text_tokens":["驱动","，","。","做到","对于","更好","问题","实现","物体","传输","没","就是","模块","程序","中","了","间","机器","做成","方式","过程","数据","红色","一个","节点","功能","没有","将","相机","是","概念","对","和","但是","图像","并且","视觉","两个","虽然","在","机器人","开发","这个","联系","的","识别","并","模块化","通过","我们","来讲","讲解","话题","即可","周期"],"title":"案例二：机器视觉识别","title_tokens":["案例","识别","机器","：","视觉","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_15","text":"这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。","text_tokens":["，","保持","二个","范围","实现","如果","模块","来看","思想","标准","节点","消息","需要","将","完全","软件","sub","这种","第二个","内","的","识别","订阅","运行","？","即可","未来","中是","。","第二","不变","ros","物体","下","_","红色","一个","topic","视觉","如何","先","第一","就","放入","设计","我们","驱动","更好","run"," ","移植","了","第一个","看到","可移植性","可以","图像","pub","定义","$","在","发布","分别","好","启动","要","话题","learning","修改","另","webcam","可移植","效果","功能","相机","是","保证","啦","ros2","只","更换","两个","终端","这个","说干就干","并","以下","模块化","移植性"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_16","text":"learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], },","text_tokens":["，","配置","号","如果","采集","publish","points","代码","（","设备","节点","加入","com","消息","与","将","稍后","入口","read","需要","entry","为","sub","选项","文件","0","编写","销毁","打开","timer","videocapture","8","后","提示","的","秒","to","转换成","@","python3","接口","发布者","知道","guyuehome","完成","让","说明","包","helloworld","(","：","初始","ros","init","进行","setup","0.1","程序",",","用于","*","'","_",".","-","一个","信息","import","cap","读取","创建","topic","初始化","msgs","from","cv2","{","python","定时","]","py","true","opencv","none","驱动","publishing","函数","作者","10","输出"," ","转换","对象","示例","日志","设置","等待","if","视频","图像处理","utf","类","名","回调","队列","图像","pub","frame","shutdown","、","console","如下","发布","!","cv","定时器","居","callback","image","node","）","话题","bgr8","#","}","周期","执行","learning","循环","scripts","ret",")","已经","destroy","env","编译","super","name","类型","关闭","imgmsg","库","一帧","父类","成功","点","bridge","publisher","info","webcam","class","www","spin","sensor","imagepublisher","[","def","功能","raw","系统","msg","相机","get","create","/","ros2","__","self","logger","换成","video",":","主","长度","并","=","\"","处理","main","coding","退出","古月","rclpy","bin","args","cvbridge","单位","usr"],"title":"发布者代码解析","title_tokens":["发布者","代码","发布","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_17","text":"learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], },","text_tokens":["，","转化成","配置","范围","list","points","代码","（","color","mask","cnt","节点","加入","com","消息","与","及","将","入口","需要","entry","为","sub","选项","文件","0","编写","chain","销毁","2","打开","使用","8","后","findcontours","的","者","订阅","提示","to","@","python3","接口","模型","subscription","guyuehome","150","object","完成","90","说明","包","让","知道","helloworld","(","：","初始","ros","init","左上","circle","cvtcolor","左上角","计算","化成","进行","setup","程序","中",",","data","用于","*","'","宽","receiving","出来","_",".","-","红色","一个","bgr","lower","w","信息","waitkey","像素","import","互相","显示","创建","int","topic","上限","初始化","面积","msgs","for","颜色","检测","from","cv2","{","python","]","中心","py","contours","drawcontours","opencv","none","180","数值","噪声","太小","255","函数","作者","np","10","as","1","输出"," ","转换","hierarchy","对象","detect","示例","轮廓","日志","设置","y","等待","in","if","listener","图像处理","red","utf","inrange","类","去除","名","回调","队列","imshow","img","图像","得到","frame","pub","shutdown","、","所在","console","如下","128","已","!","cv","xy","居","callback","image","upper","node","一些","）","二值化","<","勾勒","5","h","话题","bgr2hsv","bgr8","#","}","learning","循环","scripts",")","destroy","苹果","env","编译","super","name","类型","关闭","imgmsg","库","continue","+","hsv","父类","点","bridge","numpy","下限","info","webcam","class","www","spin","imagesubscriber","效果","sensor","[","def","shape","坐标","raw","高","msg","get","功能","系统","create","上角","retr","和","/","ros2","__","self","array","boundingrect","logger","approx","video","从",":","进入","主","长度","并","阈值","=","\"","处理","main","coding","退出","古月","rclpy","bin","args","cvbridge","点画","x","usr","转化"],"title":"订阅者代码解析","title_tokens":["代码","者","订阅","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_18","text":"通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub","text_tokens":["，","协议","用","复用","什么样","焕然一新","任何","标准","代码","符合","例程","你","节点","需要","当然","这","软件","sub","刚才","无论","感觉","提高","使用","的","识别","到","通过","得","？","接口","不太","让","一新","humble","。","变化","安装","ros","中","好像","_","-","一个","不是","哪里","对","topic","率","一般","视觉","目标","install","就","指令","原本","这样","什么","我们","换","可能","驱动","run","也"," ","都","了","现在","集成","接口协议","可以","不行","解","常用","得到","图像","exe","$","精简","sudo","发布","一句","node","不","好","写","话题","learning","cam","焕然","！","apt","进一步","一行","是不是","呀","usb","webcam","又","大家","不过","自己","功能","相机","做","是","有","直接","还有","ros2","只","似乎","换成","么","一步","通用","对劲","耦","只要","每换"],"title":"案例三：机器视觉识别优化","title_tokens":["案例","三","识别","机器","：","优化","视觉"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_19","text":"话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息","text_tokens":["name","list","：","频率","传输"," ","查看","type","data","hz","info","_","数据","信息","消息","msg","echo","常用","pub","topic","ros2",">","$","如下","bw","发布","命令","的","带宽","<","话题","操作","#","列表"],"title":"话题命令行操作","title_tokens":["话题","命令","命令行","操作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_20","text":"关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？","text_tokens":["，","呢","思考题","讲","：","对于","所有","实现","传输","周期性","通信","举","考题","传递","机器","原理","能够","这里","数据","需求","一个","大家","肯定","无法","给","是否","特性","系统","数据传输","是","单向","满足","和","方法","例子","适合","这种","机器人","思考","几个","关于","的","就","到","我们","来讲","话题","复杂","？","留","周期","完成","据传"],"title":"思考题","title_tokens":["思考题","考题","思考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_21","text":"https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["humble","understanding","tutorials",".","org","/","ros2","html","ros","-","https","docs","topics","en",":"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/","text":"服务 话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。 通信模型 在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。 客户端/服务器模型 从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。 同步通信 这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。 一对多通信 比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。 服务接口 和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。 案例一：加法求解器 大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 运行效果 我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3 客户端代码解析 我们来看下客户端的实现方法。 程序实现 learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口 服务端代码解析 至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。 程序实现 learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_server = learning_service.service_adder_server:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口 案例二：机器视觉识别 好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。 运行效果 此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client 客户端代码解析 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], }, 服务端代码解析 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], }, 服务命令行操作 服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求 思考题 话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["范围","list","更加","sum","介绍","如果","雷达","cnt","变成","称之为","与","上层","请求","官方","图像识别","同步","编程","sub","刚才","0","invalid","并且","但","chain","等等","软硬件","%","findcontours","者","识别","通过","具体","传感","发布者","加数","subscription","比比皆是","等","让","object","说明","这些","并不知道","简单","(","认为","异步","某些","setup","用于","获取","位置","srv","网站","那有","方式","当","-","bgr","无法","信息","求解","send","服务","像素","call","waitkey","单向","有所不同","显示","msgs","objecty","正常","开发","from","页面","多个","这样","interface","宕机","contours","噪声","驱动","waiting","作者","result","as","封装","上述","大部分","随时","然后","日志","exception","希望","y","查询","有所","集成","提到","接收","时间","red","简称","访问","名","objectclient","、","所在","之后","!","居","这么","不","收到","）","二值化","比如","bgr8","learning","循环","运动","name","思考题","imgmsg","+","continue","—","求和","跟随","针对","另外","sensor","高","get","自定","二","有点","准确","一种","和","retr","ros2","array","logger","boundingrect","适合","机器人","下来","video","其中","这个","打印","主","阈值","通用","处理","adder","展现","古月","操作","cvbridge","点画","大部","二个","控制","实现","服务端","查看","server","标准","（","过程","网页","例程","\\","分析","你","客户端","及","将","为","解析","打开","2","3","一次","前者","学习","的","to","@","相对","运行","python3","target","知道","guyuehome","完成","绝大","en","很","包","90","。","sec","ros","物体","接口类","cvtcolor","此时","计算","就是","左上角","化成","程序",",","尽快","'","宽","处","用到","_","while","一个","给","；","services","互相","但是","int","一般","视觉","for","思考","add","目标","出去","就","指令","]","中心","1.0","课程","当前","我","none","不知","except","数值","通信接口","太小","可能","唯一","案例","加法","软硬","return","“","之前","也","1","10","https","转换","时候","反馈","示例","或者","现在","回想","问","第一个","图像处理","看到","是否","类","inrange","没有","可以","回调","队列","imshow","得到","图像","addtwoints","shutdown","根据","里程计","如下","自定义","发布","在","已","服务器","命令","cv","场景","判断","upper","<","勾勒","好","#","}","应用","周期","执行","最新",")","已经","编译","super","讲","链接","库","break","接下来","通信","hsv","不同","常见","成功","bridge","考题","大家","50","[","def","不过","坐标","功能","是","网络","岂","approx","结果","开始","两种","并","向","流程","=","浏览","r","rclpy","成为","出现","转化成","类似","代码","成","叫做","数据","ints","基本","消息","需要","入口","entry","繁杂","数据类型","服务器端","完全","而是","选项","文件","方法","之间","这种","使用","提示","订阅","接口","模型","150","列表","程序实现","初始","传输","很多","下","就要","e","发送","好像","data","*","相比","原理","同样","反应","总结","假设","adderserver","w","lower","sys","不是","加法器","import","某个","对","创建","初始化","面积","看","adderclient","第一","至于","核心","{","所以","界面","后者","通信模型","我们","py","什么","drawcontours","n","电脑","true","三个","180","附近","wait","d","async","255","函数","run","np","detect","感器","了","传递","in","圈圈","future","objectx","半天","应该","数据通信","img","exe","frame",">","console","position","128","部分","参考","xy","分别","node","一问一答","一对","启动","话题","bgr2hsv","a","浏览器","destroy","cam","苹果","env","类型","html","done","父类","点","numpy","下限","info","跟踪","状态","效果","域名","shape","raw","msg","各种","相机","应答","客户","形式","啦","上角","有","command","命令行","/","越好","还有","__","self","返回","从","越快越好","放到","比比","长度","最为","\"","退出","getobjectposition","bin","args","一","本","failed","转化","understanding","，","again","配置","人","一起","拿到","发","周期性","转圈","转圈圈","docs","多","type","points","来看","机制","argv","color","org","mask","需求","...","按照","节点","加入","发给","com","硬件","tutorials","接口类型","编写","ok","销毁","第二个","8","后","two","到","传递数据","else","生活","不好","后续","控制指令","humble","第二","了解","在生活中","：","try","init","左上","一样","circle","进行","中","receiving","出来",".","红色","之为","满足","上限","颜色","检测","器","cv2","timeout","python","request","not","设计","opencv","传感器","里程","同步性","incoming","service","输出"," ","都","hierarchy","对象","设置","轮廓","务器","等待","机器","if","listener","以上","client","utf","要求","数据通","去除","常用","上","of","定义","$","合理","available","存在","继续","一直","callback","image","每","时","一些","答","5","h","还是","要","并不需要","scripts","接下","更","法器","关闭","频率","打印输出","越快","usb","class","www","spin","imagesubscriber","cs","系统","会","create","提供","两个","终端","绝大部分","想要","once",":","经常","进入","b","main","”","coding","传入","response","服务器发送","x","准备","usr"],"title":"**服务**","title_tokens":["*","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_1","text":"话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。","text_tokens":["，","。","讲","一起","异步","实现","ros","传输","通信"," ","类似","机制","—","问","数据","效果","另外","节点","你","无法","是否","消息","将","服务","单向","可以","准确","常用","一种","同步","方法","之间","这种","发布","使用","学习","的","者","订阅","多个","收到","我们","答","话题","发布者","我","知道","本"],"title":"服务","title_tokens":["服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_2","text":"在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。","text_tokens":["，","实现","发","机制","数据","按照","节点","变成","你","发给","需要","上层","请求","图像识别","而是","这种","使用","的","识别","订阅","到","通过","模型","。","ros","物体","传输","一样","此时","发送","中","好像","尽快","位置","红色","一个","信息","服务","单向","对","有所不同","目标","这样","通信模型","我们","课程","我","附近","驱动","service","之前"," ","时候","然后","反馈","了","或者","希望","机器","查询","有所","问","可以","得到","图像","在","发布","这么","继续","一直","答","话题","比如","应用","并不需要","周期","最新","运动","更","频率","通信","跟随","另外","高","相机","应答","是","形式","和","机器人","其中","这个","并","成为","不同"],"title":"通信模型","title_tokens":["通信模型","通信","模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_3","text":"从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。","text_tokens":["，","。","在生活中","实现","某些","也"," ","进行","通信","时候","常见","此时","发送","反馈","浏览器","就是","来看","机制","务器","或者","针对","网站","网页","问","叫做","数据","域名","你","cs","信息","客户端","简称","服务","需要","各种","客户","请求","应答","某个","形式","为","上","服务器端","会","/","之后","这种","在","返回","服务器","从","经常","页面","的","就","并","向","通过","处理","浏览","收到","答","具体","我们","展现","比如","电脑","我","生活","操作","模型","服务器发送","很"],"title":"客户端/服务器模型","title_tokens":["务器","/","服务器","模型","客户端","服务","客户"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_4","text":"这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。","text_tokens":["，","。","也","通信","转圈","转圈圈","了","越快","或者","务器","中","相比","那有","过程","圈圈","反应","状态","半天","假设","接收","你","称之为","要求","信息","客户端","之为","没有","服务","客户","应答","是","服务器端","可以","网络","同步","越好","一般","在","服务器","越快越好","这个","的","判断","一直","所以","通过","到","浏览","我们","宕机","话题","不好","浏览器","可能"],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_5","text":"比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。","text_tokens":["唯一","，","。","人","一样","通信","都","中","务器","网站","同样","一个","大家","看到","客户端","访问","没有","服务","客户","是","服务器端","可以","完全","但是","但","服务器","这个","居","的","存在","并","多个","所以","每","界面","不","通信模型","古月","比如","模型"],"title":"一对多通信","title_tokens":["多","一对","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_6","text":"和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。","text_tokens":["这些","，","苹果","。","ros","也","一样","介绍","通信"," ","反馈","了","类似","传递","中","标准","位置","srv",".","数据","变成","一个","大家","给","坐标","服务","消息","msg","请求","是","会","和","文件","还有","定义","方法","两个","在","部分","命令","使用","核心","的","我们","传递数据","还是","话题","要","比如","后续"],"title":"服务接口","title_tokens":["接口","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_7","text":"大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。","text_tokens":["，","实现","代码","成","例程","数据","ints","节点","客户端","基本","需要","将","请求","官方","服务器端","编写","后","two","的","通过","相对","加数","。","简单","了解","ros","进行","计算","就要","发送","_","当","一个","给","求解","服务","对","add","器","出去","就","我们","加法","“","也"," ","封装","反馈","了","务器","现在","应该","可以","得到","之后","服务器","时","收到","还是","接下","接下来","通信","求和","针对","大家","功能","客户","应答","是","啦","有","提供","两个","下来","想要","从","这个","结果","开始","并","”"],"title":"案例一：加法求解器","title_tokens":["案例","加法","：","一","求解","器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_8","text":"我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3","text_tokens":["，","。","第二","二个","service","一起","run","实现","服务端"," ","下","server","发送","求和","代码","等待","例程","_","原理","第一个","数据","client","一个","节点","客户端","功能","服务","请求","客户","是","并且","ros2","$","如下","提供","两个","终端","第二个","2","看","3","第一","这个","结果","的","并","adder","运行","我们","启动","传入","加数","操作","learning"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_9","text":"我们来看下客户端的实现方法。","text_tokens":["的","。","我们","方法","实现","下","客户端","客户","来看"],"title":"客户端代码解析","title_tokens":["客户端","代码","客户","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_10","text":"learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], },","text_tokens":["，","again","配置","sum","points","代码","（","argv","数据","...","ints","节点","加入","客户端","com","需要","将","入口","entry","请求","服务器端","选项","接口类型","文件","编写","ok","销毁","2","打开","一次","8","%","two","后","的","@","运行","else","python3","加数","接口","知道","guyuehome","完成","让","说明","包","sec","(","try","异步","初始","init","：","接口类","进行","计算","e","setup","发送","程序",",","*","srv","'","方式","_",".","while","-","一个","sys","信息","send","服务","加法器","import","call","创建","int","初始化","for","正常","adderclient","add","from","timeout","{","python","request","interface","]","not","1.0","py","none","except","wait","d","async","service","加法","函数","waiting","作者","result","1","as","输出"," ","对象","反馈","示例","设置","exception","务器","等待","if","future","接收","client","utf","类","是否","名","of","addtwoints","定义","shutdown","console","自定义","如下","!","服务器","available","居","node","）","收到","启动","#","}","a","执行","learning","循环","scripts",")","destroy","env","编译","super","法器","name","类型","关闭","库","break","+","打印输出","done","父类","成功","点","info","class","www","spin","[","def","系统","功能","get","自定","客户","create","/","ros2","__","self","logger","两个","once",":","打印","b","并","=","adder","\"","main","处理","coding","r","古月","rclpy","bin","args","response","failed","usr"],"title":"程序实现","title_tokens":["实现","程序实现","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_11","text":"对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口","text_tokens":["，","关闭","：","初始","实现","如果","进行"," ","对象","发送","程序","务器","等待","数据","以上","分析","一个","节点","客户端","服务","客户","请求","应答","服务器端","编程","对","创建","初始化","如下","销毁","想要","服务器","并","流程","我们","接口"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_12","text":"至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。","text_tokens":["，","并不知道","。","函数","实现","也","通信","中","类似","了","务器","机制","用到","数据","时间","服务","请求","有点","服务器端","回调","服务器","至于","的","者","订阅","什么","话题","出现","不知","知道"],"title":"服务端代码解析","title_tokens":["代码","服务端","服务","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_13","text":"learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_server = learning_service.service_adder_server:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], },","text_tokens":["，","配置","sum","server","points","代码","（","数据","\\","ints","节点","加入","com","入口","将","需要","entry","请求","选项","接口类型","文件","编写","销毁","打开","8","后","two","%","的","提示","@","python3","接口","知道","guyuehome","完成","让","说明","包","(","：","初始","init","接口类","进行","计算","setup","程序","中",",","*","srv","'","_",".","-","adderserver","信息","服务","加法器","import","对","创建","初始化","add","from","{","python","request","interface","]","py","n","none","d","incoming","service","加法","函数","return","作者","输出"," ","对象","反馈","示例","日志","设置","务器","等待","utf","类","名","回调","addtwoints","定义","、","shutdown","自定义","如下","console","!","服务器","居","callback","node","）","收到","#","}","a","执行","learning","循环","scripts","已经",")","destroy","env","编译","super","法器","name","类型","关闭","库","+","父类","点","求和","info","class","www","spin","[","def","功能","系统","get","自定","应答","create","/","ros2","__","self","logger","提供","放到",":","结果","主","b","并","=","adder","\"","处理","main","coding","退出","古月","rclpy","bin","response","args","usr"],"title":"程序实现","title_tokens":["实现","程序实现","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_14","text":"对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口","text_tokens":["，","函数","关闭","：","初始","实现","服务端","如果","进行"," ","对象","反馈","程序","务器","处","以上","分析","一个","节点","客户端","服务","客户","应答","服务器端","编程","对","回调","创建","初始化","如下","销毁","想要","服务器","结果","并","向","流程","通过","我们","接口"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_15","text":"好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。","text_tokens":["已经","，","。","加法","实现","更加","物体","通信","下","时候","了","机制","回想","位置","提到","当","不是","求解","需要","服务","啦","刚才","视觉","岂","合理","目标","器","的","识别","流程","通过","好","我们","知道"],"title":"案例二：机器视觉识别","title_tokens":["案例","识别","机器","：","视觉","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_16","text":"此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client","text_tokens":["驱动","，","。","运动","cam","service","认为","run","：","拿到"," ","此时","上述","server","随时","对象","发送","然后","了","务器","位置","机器","跟踪","usb","集成","_","数据","当","client","一个","节点","客户端","需要","服务","相机","；","客户","会","服务器端","可以","是","请求","有","图像","exe","并且","ros2","根据","$","视觉","提供","终端","发布","机器人","一次","服务器","目标","分别","的","识别","订阅","就","时","node","运行","我们","启动","当前","出现","三个","learning","object","准备"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_17","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], },","text_tokens":["，","again","配置","server","points","代码","\\","...","节点","加入","com","需要","入口","entry","请求","选项","文件","编写","ok","销毁","打开","8","%","后","的","识别","@","else","python3","接口","target","知道","guyuehome","完成","object","让","说明","包","sec","(","try","：","初始","init","进行","e","setup","程序",",","*","位置","srv","'","_",".","while","-","send","服务","import","call","创建","初始化","for","目标","from","timeout","{","python","request","interface","]","not","1.0","py","true","n","none","except","wait","d","async","service","waiting","作者","result","as"," ","对象","示例","设置","exception","y","等待","if","future","client","utf","类","of","objectclient","定义","shutdown","console","自定义","position","如下","!","available","居","node","#","}","learning","scripts",")","destroy","env","编译","super","name","关闭","库","break","done","父类","点","info","class","www","spin","[","def","功能","系统","get","自定","应答","create","/","ros2","__","self","logger","once",":","并","=","\"","adder","main","coding","r","古月","rclpy","getobjectposition","bin","args","response","x","failed","usr"],"title":"客户端代码解析","title_tokens":["客户端","代码","客户","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_18","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], },","text_tokens":["，","转化成","配置","范围","list","server","points","代码","（","color","mask","数据","cnt","\\","节点","加入","com","消息","与","及","将","请求","入口","需要","entry","为","sub","选项","接口类型","0","invalid","文件","编写","chain","销毁","2","打开","使用","8","后","%","findcontours","的","识别","订阅","者","提示","to","@","else","python3","接口","target","模型","subscription","guyuehome","150","object","完成","90","说明","包","让","知道","(","：","初始","ros","init","左上","接口类","cvtcolor","circle","左上角","计算","化成","物体","进行","setup","程序","中",",","data","用于","*","srv","'","宽","receiving","出来","_",".","-","红色","一个","bgr","lower","w","信息","waitkey","服务","import","像素","对","互相","显示","创建","int","初始化","上限","面积","msgs","objecty","for","颜色","目标","检测","from","cv2","{","python","request","interface","]","中心","py","contours","drawcontours","true","opencv","n","none","180","数值","噪声","太小","d","service","255","函数","return","作者","np","10","as","1","输出"," ","转换","hierarchy","对象","detect","示例","轮廓","日志","反馈","y","务器","设置","等待","in","if","objectx","listener","图像处理","red","client","utf","inrange","类","去除","名","回调","队列","imshow","img","图像","得到","frame","定义","、","所在","shutdown","自定义","position","如下","128","console","已","!","服务器","cv","xy","居","callback","image","upper","node","一些","）","二值化","<","勾勒","5","h","收到","话题","bgr2hsv","bgr8","#","}","执行","learning","循环","scripts","已经",")","destroy","苹果","env","编译","super","name","类型","关闭","imgmsg","库","continue","+","hsv","父类","点","bridge","numpy","下限","info","class","www","spin","imagesubscriber","效果","sensor","50","[","def","shape","坐标","raw","高","msg","自定","get","功能","系统","create","上角","retr","和","command","/","ros2","__","self","array","boundingrect","提供","logger","approx","video","从",":","进入","主","长度","并","阈值","=","\"","处理","main","adder","coding","退出","古月","rclpy","getobjectposition","bin","response","cvbridge","点画","args","x","usr","转化"],"title":"服务端代码解析","title_tokens":["代码","服务端","服务","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_19","text":"服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求","text_tokens":["service","name","类型","list","："," ","查看","type","发送","data","_","数据","服务","call","请求","数据类型","常用","ros2",">","$","如下","命令","的","<","操作","#","列表"],"title":"服务命令行操作","title_tokens":["命令","命令行","服务","操作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_20","text":"话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。","text_tokens":["，","控制","周期性","类似","标准","雷达","过程","数据","需求","繁杂","硬件","数据类型","同步","方法","等等","前者","软硬件","的","识别","到","传感","接口","比比皆是","等","绝大","控制指令","这些","。","ros","传输","很多","就要","中","获取","位置","无法","服务","单向","满足","视觉","开发","目标","指令","后者","设计","我们","传感器","里程","通信接口","同步性","软硬","也"," ","大部分","都","时候","感器","了","机器","数据通","要求","数据通信","常用","图像","里程计","、","定义","自定义","在","部分","一问一答","话题","比如","应用","周期","更","类型","通信","针对","不过","高","自定","是","和","适合","机器人","绝大部分","这个","比比","两种","通用","最为","场景","大部"],"title":"思考题","title_tokens":["思考题","考题","思考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_21","text":"https://docs.ros.org/en/ humble /Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["humble","understanding","tutorials",".","org","/","ros2","html","ros","-","https"," ","docs","en",":","services"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/","text":"通信接口 在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。 接口的定义 接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。 ROS通信接口 接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。 语言无关 为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。 标准接口 大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。 案例一：服务接口的定义与使用 了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。 接口定义 在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ... 程序调用 我们在代码中再来重点看下接口的使用方法。 客户端接口调用 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 服务端接口调用 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 案例二：话题接口的定义与使用 话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。 运行效果 现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub 接口定义 在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ... 程序调用 我们在代码中再来重点看下接口的使用方法。 发布者接口调用 learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 订阅者接口调用 learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 接口命令行操作 接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义 参考链接 https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["广泛","研究","范围","list","sum","那","对应","模块","重复","表示","publish","第三个","cnt","single","称之为","以及","与","请求","编程","sub","invalid","0","并且","但","chain","等等","三原色","小海龟","%","联系","findcontours","识别","者","---","std","通过","你来我往","具体","？","发布者","subscription","等","让","exec","方便","object","说明","这些","安装","(","键盘","坐标值","减少","看上","组成","用于","获取","srv","位置","做成","-","bgr","信息","waitkey","send","服务","像素","call","单向","显示","随处可见","msgs","如何","轮子","正常","objecty","件夹","开发","原色","from","像素点","这样","interface","contours","噪声","驱动","waiting","作者","result","as","封装","use","日志","exception","y","希望","查询","精髓","找到","group","red","名","哪些","subscribernode","objectclient","、","所在","字符串","!","居","调用函数","固定","）","收到","二值化","体","action","比如","bgr8","build","线速度","learning","个人","循环","摄像","运动","name","default","imgmsg","continue","+","像头","—","求和","众多","另外","sensor","它","高","get","自定","二","衍生","准确","保证","一种","和","直接","retr","ros2","array","logger","boundingrect","机器人","下来","数","video","这个","depend","关于","rosidl","主","打印","交流","阈值","处理","packages","古月","回顾","程序模块","操作","cvbridge","点画","关心","想","只要","二个","由于","控制","实现","服务端","查看","动作","server","标准","（","过程","例程","\\","客户端","标准接口","将","及","看看","int64","为","路径","string","解析","打开","2","一次","形状","学习","只有","的","to","两","@","运行","区分","甚至","python3","target","知道","guyuehome","完成","en","很","包","90","。","sec","and","ros","物体","接口类","最终","cvtcolor","此时","计算","就是","左上角","化成","程序",",","find","'","宽","用到","_","while","一个","给","编写程序","；","互相","文件夹","int","自语","视觉","xml","for","编译器","目标","出去","就","指令","]","主要","1.0","中心","bool","课程","生成","当前","1s","重点","none","except","通信接口","数值","工作","可能","太小","案例","加法","无关","return","“","之前","也","10","1","typec","https","转换","时候","二维","反馈","示例","或者","现在","这里","第一个","图像处理","看到","是否","类","速度","inrange","没有","可以","回调","队列","imshow","得到","图像","pub","shutdown","根据","自定义","例子","如下","在","发布","已","反正","interfaces","服务器","命令","cv","第三","upper","<","share","勾勒","好","讲解","generate","#","输入输出","}","应用","周期","执行","已经",")","编译","各个","数据结构","super","图形化","讲","链接","库","break","接下来","通信","一帧","hsv","常见","txt","代码生成","bridge","20","webcam","大家","50","[","def","坐标","功能","是","高效","好奇","字符","只","approx","结果","开始","他们","并","输入","=","r","rclpy","摄像头","参数","上边","转化成","什么样","类似","代码","符合","cmakelists","再","成","数据","入口","需要","消息","这","领域","完全","而是","选项","文件","无论","g","方法","标值","之间","30","show","两者","使用","32","提示","订阅","接口","重要","模型","150","一边","列表","自言自语","不用","彼此","初始","传输","约束","下","建立","e","发送","c++","data","*","到底","about","w","肯定","lower","不是","像是","手机","import","某个","中有","对","创建","初始化","面积","举个","用来","包装","将要","看","几个","第一","核心","{","谁","所以","详细","什么","我们","py","drawcontours","true","电脑","n","三个","180","wait","d","async","255","函数","目的","语言","中间","run","匹配","micro","np","上去","涵盖","detect","形象","了","传递","in","future","每隔","objectx","形象化","img","exe","frame",">","角速度","角度","position","包含","128","小海","部分","参考","xy","分别","不管","node","软件开发","启动","主程序","别人","话题","结构","bgr2hsv","a","值","描述","destroy","苹果","env","cam","进度","类型","html","相互","度","done","父类","concepts","publisher","numpy","随处","旋转","info","下限","状态","效果","话","里","有机","分成","shape","raw","各种","相机","应答","msg","客户","上角","command","有","命令行","还有","/","__","self","从","长度","最为","\"","退出","自动","getobjectposition","布尔值","bin","args","一","failed","图形","转化","runtime","，","配置","数组","again","人","一起","内容","required","docs","多","加","机制","color","org","mask","...","节点","com","硬件","却是","概念","软件","位","tutorials","接口类型","编写","ok","销毁","第二个","8","后","接口定义","到","得","的话","就行","else","生活","看上去","后续","humble","第二","呢","了解","整型","：","try","init","左上","int32","circle","进行","为了","中","还","转到第","receiving","出来",".","无论是","红色","之为","topic","上限","关系","颜色","三种","检测","cv2","timeout","必须","插头","python","来","request","not","设计","可见","才能","opencv","service","各个领域","转","把","包中","输出"," ","都","由","hierarchy","对象","轮廓","调用","务器","等待","机器","if","define","造","listener","以上","client","objectposition","utf","三原","去除","一下","种","上","常用","降低","海龟","of","定义","$","project","available","一句","添加","callback","一些","image","时","每","继续","5","h","还是","要","更为","接下","更","关闭","member","布尔","package","理解","usb","class","www","连接","spin","imagesubscriber","自己","关注","系统","会","回到","create","插座","有没有","转到","便于","提供","两个","64","每个","换成","终端","诞生","传输数据","once",":","进入","b","main","”","coding","generators","依赖","response","中来","不同","x","usr"],"title":"**通信接口**","title_tokens":["接口","*","通信接口","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_1","text":"在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。","text_tokens":["，","。","呢","自言自语","人","更","ros"," ","动作","都","通信","多","内容","就是","为了","中","传递","或者","—","标准","理解","用到","数据","一个","大家","不是","给","系统","服务","这","是","会","可以","概念","而是","无论","定义","自语","两个","在","将要","学习","的","并","交流","你来我往","什么","我们","好","还是","话题","接口","甚至","？","结构","重要","后续","让","通信接口","个人"],"title":"通信接口","title_tokens":["接口","通信接口","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_2","text":"接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。","text_tokens":["，","广泛","配置","一起","控制","实现","什么样","那","内容","多","模块","类似","加","机制","标准","代码","符合","数据","节点","称之为","硬件","这","却是","领域","编程","概念","软件","完全","无论","g","编写","并且","但","解析","等等","三原色","一次","形状","两者","使用","只有","的","到","通过","运行","具体","得","？","接口","生活","看上去","知道","等","让","很","包","这些","。","呢","安装","不用","彼此","键盘","ros","传输","约束","进行","建立","就是","看上","组成","程序","中","出来","无论是","-","一个","肯定","之为","给","编写程序","服务","像是","手机","像素","；","随处可见","举个","关系","如何","正常","包装","开发","原色","像素点","必须","插头","就","指令","所以","主要","什么","可见","我们","才能","电脑","通信接口","工作","驱动","各个领域","函数","目的","匹配","micro","把","也","上去","typec","输出"," ","都","时候","由","形象","反馈","了","调用","机器","精髓","形象化","速度","三原","可以","上","常用","图像","定义","、","角速度","所在","例子","在","发布","反正","一句","调用函数","固定","一些","时","软件开发","每","好","主程序","还是","结构","比如","话题","要","输入输出","更为","应用","线速度","值","摄像","运动","各个","图形化","更","讲","相互","通信","常见","像头","随处","usb","连接","大家","自己","它","话","关注","系统","相机","是","回到","高效","准确","一种","和","有","插座","直接","提供","两个","每个","机器人","诞生","这个","结果","关于","开始","他们","b","输入","最为","r","程序模块","摄像头","关心","传输数据","参数","只要","图形"],"title":"接口的定义","title_tokens":["接口","定义","的"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#ros","text":"接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。","text_tokens":["，","。","一起","也","ros","减少"," ","通信","动作","就是","重复","程序","机制","代码","造","节点","有机","服务","各种","这","是","可以","种","常用","降低","一种","有","定义","、","便于","轮子","之间","三种","使用","目标","核心","分别","联系","的","到","通过","每","我们","别人","才能","话题","接口","依赖","让","方便"],"title":"ROS通信接口","title_tokens":["ros","接口","通信接口","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_3","text":"为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。","text_tokens":["，","数组","由于","sum","动作","对应","表示","机制","过程","数据","节点","需要","将","int64","请求","编程","位","文件","30","使用","学习","小海龟","32","的","---","到","两","通过","就行","区分","接口","知道","等","让","一边","90","完成","这些","。","整型","ros","int32","传输","最终","此时","为了","中","c++","还","srv","做成","转到第",".","一个","服务","单向","用来","目标","python","设计","bool","什么","我们","生成","当前","1s","三个","通信接口","数值","加法","无关","语言","中间","转","“","之前","10"," ","二维","反馈","了","y","机器","每隔","这里","看到","是否","一下","可以","海龟","定义","、","包含","在","小海","部分","分别","每","体","action","还是","结构","比如","话题","a","周期","描述","编译","运动","数据结构","进度","度","通信","一帧","布尔","求和","20","旋转","状态","另外","里","分成","坐标","功能","msg","应答","是","会","保证","一种","和","还有","转到","只","64","两个","机器人","数","这个","结果","开始","b","”","自动","布尔值","不同","x"],"title":"语言无关","title_tokens":["无关","语言"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_4","text":"大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。","text_tokens":["，","。","呢","安装","ros","涵盖","中","了","标准","到底","众多","找到","大家","给","系统","哪些","看看","可以","好奇","文件","文件夹","路径","定义","打开","在","件夹","几个","的","share","我们","？","接口","可能"],"title":"标准接口","title_tokens":["接口","标准","标准接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_5","text":"了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。","text_tokens":["驱动","，","。","接下","研究","第二","了解","二个","之前","实现","接下来","服务端","通信","下"," ","封装","时候","对象","发送","进行","了","中","代码","位置","机器","再","查询","例程","第三个","第一个","一个","节点","以及","需要","服务","相机","请求","是","可以","概念","有","图像","编写","定义","角度","如何","视觉","提供","在","发布","下来","第二个","从","使用","第一","目标","第三","来","的","识别","就","这样","收到","我们","讲解","接口","课程","回顾","话题","三个","通信接口"],"title":"案例一：服务接口的定义与使用","title_tokens":["案例","的","与","定义","：","接口","一","使用","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_6","text":"在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ...","text_tokens":["上边","runtime","，","配置","服务端","required","表示","代码","cmakelists","例程","过程","...","需要","为","选项","文件","一次","使用","后","接口定义","的","---","的话","接口","完成","让","exec","包","。","(","：","int32","中","find","获取","srv","位置","还",".","_","服务","中有","xml","编译器","目标","{","就","指令","interface","我们","bool","true","生成","语言","也"," ","反馈","了","y","group","of","定义","、","根据","$","project",">","在","部分","interfaces","添加","<","generate","#","}","build","learning",")","编译","name","default","member","通信","txt","代码生成","package","坐标","功能","get","是","会","/","两个","这个","depend","rosidl","\"","packages","getobjectposition","自动","generators","依赖","不同","x"],"title":"接口定义","title_tokens":["接口定义","接口","定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_7","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["来","的","。","代码","再","我们","方法","接口","重点","在","看","下","使用","中"],"title":"程序调用","title_tokens":["调用","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_8","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["，","again","\\","...","节点","com","请求","ok","销毁","8","%","的","识别","@","else","python3","接口","target","guyuehome","object","说明","sec","(","try","初始","init","进行","e",",","*","位置","srv","'","_",".","while","-","send","服务","import","call","创建","初始化","for","目标","from","timeout","python","request","interface","not","1.0","py","true","n","none","except","wait","d","async","service","waiting","作者","result","as"," ","对象","示例","exception","y","等待","if","future","client","utf","类","of","objectclient","定义","shutdown","自定义","position","!","available","居","node","#","learning",")","destroy","env","super","name","关闭","库","break","done","父类","info","class","www","spin","def","get","自定","应答","create","/","ros2","__","self","logger","once",":","并","=","\"","main","coding","r","古月","rclpy","getobjectposition","bin","args","response","x","failed","usr"],"title":"客户端接口调用","title_tokens":["客户端","接口","调用","客户"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_9","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["，","转化成","范围","list","server","（","color","mask","数据","cnt","\\","节点","com","消息","与","及","将","请求","入口","为","sub","接口类型","0","invalid","chain","销毁","2","使用","8","后","%","findcontours","的","识别","订阅","者","提示","to","@","else","python3","接口","target","模型","subscription","guyuehome","150","object","90","说明","(","初始","ros","init","左上","接口类","cvtcolor","circle","左上角","计算","化成","物体","进行","中",",","data","用于","*","srv","'","宽","receiving","出来","_",".","-","红色","一个","bgr","lower","w","信息","waitkey","服务","import","像素","对","互相","显示","创建","int","初始化","上限","面积","msgs","objecty","for","颜色","目标","检测","from","cv2","python","request","interface","]","中心","py","contours","drawcontours","true","opencv","n","none","180","数值","噪声","太小","d","service","255","函数","return","作者","np","10","as","1","输出"," ","转换","hierarchy","对象","detect","示例","轮廓","日志","反馈","y","务器","等待","in","if","objectx","listener","图像处理","red","utf","inrange","类","去除","名","回调","队列","imshow","img","图像","得到","frame","定义","、","所在","shutdown","自定义","position","128","已","!","服务器","cv","xy","居","callback","image","upper","node","一些","）","二值化","<","勾勒","5","h","收到","话题","bgr2hsv","bgr8","#","执行","learning","循环","已经",")","destroy","苹果","env","super","name","类型","关闭","imgmsg","库","continue","+","hsv","父类","bridge","numpy","下限","info","class","www","spin","imagesubscriber","效果","sensor","50","[","def","shape","坐标","raw","高","msg","自定","get","create","上角","retr","和","command","/","ros2","__","self","array","boundingrect","提供","logger","approx","video","从",":","进入","主","长度","并","阈值","=","\"","处理","main","coding","退出","古月","rclpy","getobjectposition","bin","response","cvbridge","点画","args","x","usr","转化"],"title":"服务端接口调用","title_tokens":["调用","接口","服务端","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_10","text":"话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。","text_tokens":["案例","，","。","人","之前","也","把","通信","类似","位置","机器","需要","服务","没有","衍生","是","有没有","定义","视觉","发布","换成","从","目标","的","识别","继续","不管","我们","话题","接口","中来","周期","想","通信接口"],"title":"案例二：话题接口的定义与使用","title_tokens":["案例","的","定义","：","话题","接口","使用","与","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_11","text":"现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub","text_tokens":["驱动","，","第二","二个","。","分别","cam","run","：","ros","interface"," ","此时","封装","中","希望","现在","标准","位置","成","第三个","usb","_","打印","第一个","数据","以上","一个","节点","消息","将","功能","需要","相机","；","是","会","sub","图像","exe","pub","topic","定义","ros2","$","视觉","终端","发布","第二个","第一","使用","目标","这个","出去","来","并","的","识别","谁","image","就","订阅","第三","运行","到","我们","启动","node","话题","三个","object","learning"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_12","text":"在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ...","text_tokens":["，","配置","内容","required","表示","代码","cmakelists","例程","过程","...","消息","需要","选项","标值","使用","后","接口定义","的","接口","完成","让","包","。","(","：","坐标值","int32","进行","中","find","还","位置",".","_","一个","服务","编译器","目标","{","interface","我们","生成","语言"," ","了","y","objectposition","定义","、","根据","$","project","在","interfaces","话题","generate","#","}","learning","描述",")","编译","name","default","通信","txt","package","坐标","功能","msg","是","/","这个","rosidl","\"","自动","generators","不同","x"],"title":"接口定义","title_tokens":["接口定义","接口","定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_13","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["来","的","。","代码","再","我们","方法","接口","重点","在","看","下","使用","中"],"title":"程序调用","title_tokens":["调用","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_14","text":"learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["，","转化成","范围","list","publish","（","color","mask","cnt","节点","com","消息","与","及","将","入口","为","sub","0","chain","销毁","2","使用","8","后","findcontours","的","者","订阅","提示","to","@","python3","接口","发布者","模型","subscription","guyuehome","150","object","90","说明","(","初始","ros","init","左上","circle","cvtcolor","左上角","计算","化成","进行","中",",","data","用于","*","位置","'","宽","receiving","出来","_",".","-","红色","一个","bgr","lower","w","信息","waitkey","像素","import","互相","显示","创建","int","topic","上限","初始化","面积","msgs","objecty","for","颜色","目标","检测","from","cv2","python","interface","]","中心","py","contours","drawcontours","opencv","none","180","数值","噪声","太小","255","函数","作者","np","10","as","1","输出"," ","转换","hierarchy","对象","detect","示例","轮廓","日志","y","等待","in","if","objectx","listener","objectposition","图像处理","red","utf","inrange","类","去除","名","回调","队列","imshow","img","图像","得到","pub","frame","定义","、","所在","shutdown","自定义","position","128","发布","已","!","cv","xy","居","callback","image","upper","node","一些","）","二值化","<","勾勒","5","h","话题","bgr2hsv","bgr8","#","learning","循环",")","destroy","苹果","env","super","name","类型","关闭","imgmsg","库","continue","+","hsv","父类","bridge","publisher","numpy","下限","info","webcam","class","www","spin","imagesubscriber","效果","sensor","50","[","def","shape","坐标","raw","高","msg","自定","get","create","上角","retr","和","/","ros2","__","self","array","boundingrect","logger","approx","video","从",":","进入","主","长度","并","阈值","=","\"","处理","main","coding","退出","古月","rclpy","bin","args","cvbridge","点画","x","usr","转化"],"title":"发布者接口调用","title_tokens":["调用","接口","发布者","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_15","text":"learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["，","（","\\","数据","节点","com","消息","入口","sub","string","销毁","8","后","%","提示","的","者","订阅","std","@","python3","接口","target","subscription","guyuehome","object","说明","(","初始","init","进行",",","*","位置","'","_",".","-","一个","信息","import","对","创建","初始化","topic","msgs","目标","from","python","interface","py","none","d","函数","作者","10","输出"," ","对象","示例","日志","y","等待","listener","objectposition","utf","类","名","subscribernode","回调","队列","定义","、","shutdown","字符串","自定义","position","!","居","callback","node","收到","话题","#","执行","learning","循环",")","destroy","env","super","name","类型","关闭","库","父类","info","class","www","spin","def","msg","自定","get","create","字符","/","ros2","__","self","logger",":","主","长度","并","=","\"","处理","main","coding","退出","古月","rclpy","bin","args","x","usr"],"title":"订阅者接口调用","title_tokens":["调用","接口","者","订阅"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_16","text":"接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义","text_tokens":["name","list","：","包中"," ","查看","package","_","系统","功能","某个","常用","ros2",">","定义","$","如下","show","命令","接口定义","的","interface","详细","<","接口","操作","#","列表"],"title":"接口命令行操作","title_tokens":["命令","接口","命令行","操作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_17","text":"https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["humble","and","html","ros","https"," ","docs","use","concepts","package",".","org","define","about","-","single","tutorials","/","interfaces",":","interface","en"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/","text":"动作 机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。 通信模型 举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。 客户端/服务器模型 动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。 一对多通信 和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。 同步通信 既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。 由服务和话题合成 大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。 案例一：小海龟的动作 我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback 案例二：机器人画圆 如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。 运行效果 启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。 接口定义 例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是动作的目标，enable为true时，表示开始运动； 第二块是动作的执行结果，finish为true，表示动作执行完成； 第三块是动作的周期反馈，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ... 通信模型 通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。 服务端代码解析 learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], }, 客户端代码解析 learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], }, 动作命令行操作 动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["多少","list","干什么","0.5","那","如果","介绍","模块","表示","publish","实际","turtle1","请求","编程","同步","合适","0","但","使","小海龟","%","识别","者","---","通过","具体","背后","？","发布者","等","让","说明","这些","简单","(","结束","键盘","一段时间","异步","setup","获取","位置","方式","当","-","完整","信息","send","服务","特性","抓取","臂","如何","圆周运动","先","from","这样","多个","interface","处理函数","进度条","顺利","range","作者","result","封装","随时","日志","希望","圆周","时间","接收","execute","名","能","、","之后","!","居","这么","直到","某一","导航","竟然","不","收到","仔细","）","action","比如","指定","learning","循环","运动","name","default","finish","moving","—","是不是","针对","turtlesim","另外","二","自定","get","一种","智能","和","直接","ros2","logger","机器人","下来","这个","rosidl","主","遥控","处理","古月","sleep","操作","想","控制","实现","服务端","查看","动作","server","所处","标准","隐藏","（","过程","例程","姿态","分析","不会","客户端","为","解析","打开","一次","只有","其","的","整个","@","相对","运行","达到","goal","python3","知道","guyuehome","完成","en","很","包","。","ros","接口类","最终","就是","enable","程序",",","find","'","用到","_","当中","思路","一个","；","但是","同时","应用层","仅仅","for","编译器","目标","add","rejected","就","指令","]","bool","第三块","1s","当前","生成","none","通信接口","负责","可能","案例","return","之前","也","10","https","反馈","示例","现在","被","movecircleactionserver","看到","是否","类","没有","送货","可以","回调","shutdown","根据","自定义","例子","如下","time","在","合成","发布","--","服务器","命令","interfaces","第三","起来","<","好","写","复杂","generate","}","#","应用","执行","周期","动图",")","absolute","movecircleactionclient","编译","告诉","发送给","super","链接","库","接下来","名字","通信","成功","txt","20","分拣","像","大家","拒绝执行","[","def","功能","坐标","是","常常","机械","结果","开始","并","以下","流程","=","不仅仅","rclpy","上边","就此","多少度","类似","代码","cmakelists","再","数据","入口","需要","消息","entry","这","数据类型","服务器端","而是","选项","文件","方法","30","这种","段时间","使用","订阅","key","接口","模型","控","一边","列表","初始","下","accepted","再用","发送","data","*","相比","到底","原理","假设","肯定","不是","import","某个","对","读取","加深","创建","初始化","举个","看","第一","{","通信模型","我们","什么","py","拒绝","true","基于","三个","d","其实","wait","async","语言","目的","函数","run","装","送餐","handle","一块","了","in","future","每隔","只能","teleop","360","发出",">","console","角度","包含","虽然","小海","部分","参考","分别","node","一对","启动","1.57","送给","话题","destroy","env","进度","动","类型","rotateabsolute","html","received","度","done","一点","父类","点","旋转","info","状态","效果","msg","客户","没错","有","命令行","/","__","self","秘密","第二块","从","清楚","仿真器","\"","真器","退出","自动","bin","args","theta","一","understanding","，","配置","行为","仿真","一起","含义","转圈","required","docs","多","type","points","机制","org","需求","眼前","...","按照","理","节点","加入","还会","com","过","feedback","rotate","概念","move","tutorials","接口类型","取消","编写","ok","销毁","actions","8","后","接口定义","到","应带","得","humble","第二","呢","：","init","一样","底层","int32","circle","进行","试一试","中","还",".","state","i","哪里","满足","较长","二块","来","python","not","才能","succeed","publishing","转","把","输出"," ","都","由","对象","设置","调用","务器","等待","机器","某","if","一段","client","utf","一下","上","常用","既然","海龟","就此结束","定义","$","project","callback","实时","时","每","毕竟","模拟","更为","scripts","turtle","一套","管理","actionclient","接下","关闭","发现","请","第一块","package","转个","三块","理解","圈","www","class","spin","又","画圆","一点一点","系统","actionserver","会","有没有","便于","两个","终端",":","根本","main","movecircle","coding","generators","response","不同","不仅","场景","usr"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_1","text":"机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。","text_tokens":["这些","，","。","运动","简单","管理","行为","目的","键盘","实现","ros","也","含义","那","送餐"," ","通信","就是","动作","名字","进行","中","机制","—","理解","机器","分拣","用到","被","需求","一个","另外","完整","系统","需要","功能","送货","是","某个","会","常常","上","一种","智能","满足","可以","概念","对","仅仅","、","便于","这种","在","机器人","从","目标","这个","这么","的","并","识别","场景","就","某一","遥控","流程","我们","具体","不仅仅","好","复杂","应用","不仅","等","很"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_2","text":"举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。","text_tokens":["，","多少","多少度","行为","如果","转圈","动作","表示","机制","再","过程","眼前","需要","这","合适","取消","ok","30","段时间","使用","后","的","到","得","？","控","知道","完成","让","。","结束","一段时间","发送","还","到底","当中","假设","一个","肯定","不是","信息","哪里","举个","就","指令","这样","进度条","我们","才能","1s","当前","转","装","把","10"," ","随时","反馈","了","现在","机器","每隔","一段","时间","没有","一下","360","可以","发出","、","之后","例子","在","命令","直到","不","比如","更为","执行","运动","告诉","进度","度","通信","一点","转个","20","旋转","圈","像","一点一点","是","有没有","机器人","开始","并","根本","想"],"title":"通信模型","title_tokens":["通信模型","通信","模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_3","text":"动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。","text_tokens":["，","。","运动","就此","动","结束","一边","控制","干什么","也"," ","动作","周期","如果","通信","发送","反馈","类似","中","所处","务器","机器","再","过程","又","状态","姿态","当","一个","信息","客户端","坐标","服务","抓取","客户","是","服务器端","机械","和","同时","就此结束","之后","臂","机器人","服务器","目标","使用","这个","后","开始","的","就","起来","整个","导航","实时","什么","收到","达到","当前","模型","执行","想","让","可能"],"title":"客户端/服务器模型","title_tokens":["务器","/","服务器","模型","客户端","服务","客户"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_4","text":"和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。","text_tokens":["，","。","运动","一样","通信","动作","都","下","发送","中","务器","机器","一个","大家","只能","客户端","服务","客户","服务器端","可以","和","有","但是","机器人","先","服务器","命令","只有","的","多个","毕竟","才能","执行","完成"],"title":"一对多通信","title_tokens":["多","一对","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_5","text":"既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。","text_tokens":["，","。","之前","也","那","通信","动作","介绍","进行","反馈","中","机制","过程",".","数据","过","是","同步","一种","既然","文件","有","定义","使用","的","我们","action","接口","通信接口"],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_6","text":"大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。","text_tokens":["上边","，","。","运动","也","实现","发现","底层"," ","下","动作","通信","就是","发送","模块","反馈","表示","调用","务器","机制","是不是","隐藏","再","过程","当","一个","大家","不是","客户端","还会","服务","客户","请求","是","服务器端","会","没错","一种","和","有","应用层","秘密","两个","发布","看","服务器","命令","目标","使用","其","来","的","者","订阅","时","竟然","仔细","应带","收到","话题","发布者","基于","三个","应用","周期","动图","其实"],"title":"由服务和话题合成","title_tokens":["和","话题","合成","由","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_7","text":"我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback","text_tokens":["案例","。","，","接下","运动","absolute","仿真","控制","：","run","rotateabsolute","接下来"," ","动作","再用","理解","info","某","_","turtlesim","姿态","-","按照","turtle1","teleop","send","feedback","rotate","可以","对","概念","海龟","加深","/","ros2","$","小海","下来","--","命令","使用",":","小海龟","{","的","以下","到","仿真器","node","key","\"","我们","启动","真器","action","1.57","goal","}","指定","theta","一","让","turtle"],"title":"案例一：小海龟的动作","title_tokens":["案例","的","海龟","：","小海","动作","一","小海龟"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_8","text":"如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。","text_tokens":["一套","，","。","接下","呢","一起","实现","接下来"," ","动作","封装","试一试","通信","请","中","转个","希望","务器","实际","代码","针对","机器","圈","过程","假设","一个","不会","客户端","特性","服务","客户","是","服务器端","编程","而是","和","直接","有","但","方法","如何","虽然","在","机器人","下来","服务器","使用","来","的","并","就","通过","好","我们","？","话题","接口","基于","让"],"title":"案例二：机器人画圆","title_tokens":["案例","机器","：","画圆","机器人","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_9","text":"启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。","text_tokens":["，","。","运动","接下","结束","run","：","实现","服务端","接下来","度"," ","动作","server","最终","下","发送","示例","反馈","中","务器","机器","例程","_","原理","分析","client","看到","信息","客户端","服务","一下","客户","服务器端","可以","move","和","ros2","$","之后","两个","终端","30","机器人","一次","下来","服务器","命令","目标","这个","分别","开始","的","并","就","每","运行","启动","我们","action","背后","模拟","完成","learning"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_10","text":"例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是动作的目标，enable为true时，表示开始运动； 第二块是动作的执行结果，finish为true，表示动作执行完成； 第三块是动作的周期反馈，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ...","text_tokens":["，","配置","动作","required","表示","标准","代码","cmakelists","例程","过程","...","需要","为","选项","使用","后","接口定义","的","---","到","通过","接口","完成","让","包","第二","。","(","：","ros","int32","进行","enable","中","find","还","位置",".","_","state","不是","；","第一","目标","二块","编译器","{","指令","interface","我们","bool","第三块","true","当前","生成","三个","语言"," ","一块","反馈","机器","是否","定义","根据","$","自定义","角度","包含","project","在","部分","interfaces","第三","时","action","generate","#","}","周期","执行","learning",")","运动","编译","name","default","finish","成功","第一块","txt","package","三块","旋转","功能","自定","是","/","第二块","机器人","结果","rosidl","开始","并","\"","movecircle","自动","generators","不同"],"title":"接口定义","title_tokens":["接口定义","接口","定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_11","text":"通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。","text_tokens":["，","。","运动","接下","发送给","结束","控制","之前","接下来","通信","动作"," ","就是","发送","反馈","程序","务器","代码","相比","机器","例程","分析","思路","一个","理","信息","客户端","服务","一下","客户","和","较长","机器人","下来","服务器","目标","后","开始","并","清楚","的","这样","起来","相对","运行","通信模型","我们","写","送给","话题","模型","一","周期"],"title":"通信模型","title_tokens":["通信模型","通信","模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_12","text":"learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["，","配置","服务端","0.5","server","动作","表示","publish","points","代码","（","...","节点","加入","com","消息","入口","需要","entry","feedback","move","选项","接口类型","0","文件","编写","销毁","打开","30","8","%","后","的","到","@","goal","python3","接口","知道","guyuehome","完成","让","说明","包","(","：","初始","init","接口类","circle","最终","进行","setup","程序",",","*","'","_",".","-","一个","state","信息","服务","import","i","创建","初始化","for","圆周运动","目标","from","{","python","interface","]","处理函数","py","succeed","true","当前","none","负责","d","range","publishing","函数","return","作者","result"," ","handle","对象","反馈","示例","设置","务器","等待","圆周","in","movecircleactionserver","utf","类","execute","名","360","回调","定义","、","shutdown","console","自定义","之后","角度","time","发布","如下","!","服务器","居","callback","node","）","收到","action","#","}","执行","周期","learning","循环","scripts",")","destroy","env","运动","编译","super","name","类型","关闭","finish","库","度","moving","父类","成功","点","info","class","www","spin","[","def","功能","系统","actionserver","get","自定","msg","/","ros2","__","self","logger","从",":","结果","主","并","=","\"","处理","main","movecircle","coding","退出","古月","rclpy","bin","sleep","args","usr"],"title":"服务端代码解析","title_tokens":["代码","服务端","服务","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_13","text":"learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["，","配置","如果","动作","server","points","代码","（","数据","节点","加入","客户端","com","消息","入口","需要","entry","请求","feedback","服务器端","为","move","选项","接口类型","文件","编写","销毁","打开","使","8","%","后","的","@","goal","python3","接口","知道","guyuehome","完成","让","说明","包","(","：","异步","初始","init","接口类","circle","最终","进行","accepted","enable","setup","发送","程序",",","*","'","获取","方式","_",".","-","一个","state","send","服务","import","读取","创建","初始化","for","圆周运动","add","目标","from","rejected","{","python","interface","]","not","py","拒绝","true","none","wait","d","async","顺利","函数","return","作者","result","输出"," ","handle","对象","反馈","示例","设置","日志","希望","务器","等待","机器","圆周","if","被","future","接收","client","utf","类","名","能","回调","定义","、","shutdown","console","自定义","之后","如下","!","服务器","居","callback","node","时","）","收到","启动","action","#","}","执行","周期","learning","循环","scripts",")","destroy","actionclient","env","运动","movecircleactionclient","编译","super","name","类型","关闭","finish","received","库","done","父类","点","info","class","www","spin","拒绝执行","[","def","功能","系统","msg","客户","自定","get","/","ros2","__","self","logger","机器人",":","结果","开始","主","并","=","\"","处理","main","movecircle","coding","退出","古月","rclpy","bin","response","args","usr"],"title":"客户端代码解析","title_tokens":["客户端","代码","客户","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_14","text":"动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求","text_tokens":["name","类型","list","："," ","动作","查看","type","发送","data","info","_","数据","send","服务","请求","数据类型","常用","ros2",">","$","如下","命令","的","<","action","goal","操作","#","列表"],"title":"动作命令行操作","title_tokens":["命令","命令行","操作","动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["humble","understanding","tutorials",".","org","/","ros2","html","ros","-","https","actions","docs","en",":"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/","text":"参数 话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。 通信模型 比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。 全局字典 在ROS系统中，参数是以全局字典的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。 可动态监控 在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。 案例一：小海龟例程中的参数 在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 参数列表 参数查询与修改 $ ros2 param describe turtlesim background_b $ ros2 param get turtlesim background_b $ ros2 param set turtlesim background_b 10 参数文件保存与加载 $ ros2 param dump turtlesim >> turtlesim.yaml $ ros2 param load turtlesim turtlesim.yaml 案例二：参数编程 接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。 运行效果 $ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle 代码解析 learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], }, 案例三：机器视觉应用 参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。 运行效果 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180 代码解析 learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["多少","范围","号","list","介绍","如果","all","表示","从而","cnt","与","编程","图像识别","很大","sub","declare","0","立刻","提高","优化","chain","等等","nodea","小海龟","%","s","findcontours","识别","者","通过","？","即可","subscription","等","让","object","说明","这些","简单","(","后边","某些","setup","组成","用于","获取","方式","-","bgr","信息","高级","waitkey","特性","服务","像素","显示","msgs","如何","parameternode","先","提炼","from","多个","contours","parameters","噪声","驱动","作者","nodeb","as","分辨率","然后","日志","易用","robot","y","查询","动态","red","访问","名","、","所在","describe","!","定时器","居","不","dump","）","二值化","比如","bgr8","指定","learning","new","循环","修改","name","imgmsg","continue","+","—","变量","parameter","区域","turtlesim","sensor","格式","高","get","二","一种","和","retr","ros2","array","logger","boundingrect","机器人","下来","video","这个","打印","主","阈值","处理","mbot","古月","cvbridge","点画","实现","大大提高","动作","键和值","（","过程","例程","熟悉","及","将","为","string","解析","打开","2","的","to","整个","影响","@","运行","python3","知道","guyuehome","完成","en","90","包","。","ros","物体","cvtcolor","左上角","计算","就是","化成","端口","程序",",","'","宽","用到","_","一个","互相","int","视觉","for","节","目标","就","]","中心","大大","none","数值","太小","可能","案例","编码","体验","默认","也","10","1","https","转换","时候","示例","或者","hello","曝光","比较","图像处理","叫","yaml","是否","类","inrange","可以","回调","队列","imshow","得到","图像","shutdown","如下","在","合成","已","命令","cv","起来","upper","<","勾勒","写","#","}","应用","执行","周期","易用性","已经","最新",")","编译","super","发送给","链接","麻烦","库","接下来","通信","hsv","bridge","像","名称","大家","50","[","def","功能","坐标","是","全局","参数设置","approx","开始","并","输入","作用","=","默认值","rclpy","重新","参数","单位","转化成","类似","代码","成","再","叫做","数据","load","入口","需要","消息","entry","这","光线","三","选项","文件","方法","使用","提示","订阅","key","每次","接口","模型","150","丰富","列表","挺","变化","监控","初始","传输","很多","下","就要","不如","传输方式","发送","c++","data","*","w","lower","不是","import","对","读取","创建","初始化","面积","跟","看","几个","字典","核心","{","不少","那个","通信模型","我们","什么","py","drawcontours","180","d","255","函数","run","np","配置文件","detect","了","in","teleop","img","exe","敏感","frame",">","console","办法","128","小海","部分","参考","xy","分别","param","node","送给","话题","bgr2hsv","值","destroy","cam","苹果","env","参数值","类型","问题","html","度","父类","点","numpy","下限","info","效果","shape","两句","raw","msg","相机","上角","有","命令行","/","self","__","从","么","一两","清楚","长度","键值","仿真器","\"","真器","退出","bin","args","一","真实","本","转化","understanding","，","配置","考虑","仿真","含义","docs","type","points","来看","机制","color","org","mask","共享","节点","加入","com","tutorials","编写","销毁","timer","可","8","后","改变","秒","integer","到","滑动","humble","呢","了解","：","init","左上","一样","circle","进行","中","条","还","receiving","保存","出来",".","红色","上限","颜色","三种","检测","其他","分辨","set","cv2","来","python","定时","opencv","比较简单","把","输出"," ","都","由","hierarchy","对象","设置","轮廓","等待","机器","某","以","if","listener","utf","value","去除","一下","加载","常用","海龟","$","哪个","存在","callback","继续","一些","image","5","h","scripts","turtle","接下","环境","关闭","非常","美颜","理解","usb","class","www","连接","spin","imagesubscriber","全局变量","关注","系统","background","会","create","辨率","输入框","一两句","便于","提供","形态",":","进入","说干就干","b","main","coding","不同","x","usr"],"title":"**参数**","title_tokens":["参数","*"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_1","text":"话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。","text_tokens":["已经","，","。","了解","ros","某些","传输","介绍","通信","动作"," ","传输方式","程序","中","类似","机制","—","c++","变量","再","方式","机器","共享","数据","全局变量","大家","节点","是否","系统","服务","这","是","编程","全局","常用","一种","可以","、","便于","节","在","机器人","三种","字典","来","清楚","的","多个","不","运行","我们","话题","知道","参数","本"],"title":"参数","title_tokens":["参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_2","text":"比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。","text_tokens":["，","多少","配置","考虑","过程","节点","需要","这","图像识别","很大","文件","等等","nodea","使用","后","改变","的","识别","整个","影响","到","通过","滑动","这些","。","一样","很多","进行","就是","端口","程序","中","条","面积","视觉","分辨","核心","就","那个","什么","我们","驱动","编码","nodeb","也","配置文件"," ","都","时候","分辨率","设置","或者","机器","曝光","是否","可以","图像","在","部分","哪个","分别","一些","比如","执行","问题","度","美颜","usb","区域","连接","像","效果","关注","格式","功能","相机","是","会","辨率","有","和","参数设置","输入框","输入","阈值","作用","不同","参数"],"title":"通信模型","title_tokens":["通信模型","通信","模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_3","text":"在ROS系统中，参数是以全局字典的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。","text_tokens":["，","。","号","后边","参数值","ros","也","一样"," ","由","就是","时候","组成","然后","中","了","或者","键和值","理解","以","像","名称","叫做","一个","叫","系统","名","访问","是","可以","全局","为","编程","和","有","跟","形态","在","合成","使用","这个","字典","的","存在","就","键值","什么","我们","？","即可","真实","等","数值","参数"],"title":"全局字典","title_tokens":["全局","字典"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_4","text":"在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。","text_tokens":["最新","修改","，","。","也","如果","都","非常","进行"," ","中","了","从而","获取","某","用到","共享","一个","节点","大家","高级","访问","特性","这","会","可以","对","编程","有","立刻","ros2","办法","在","其他","的","比如","知道","参数","丰富","数值","可能"],"title":"可动态监控","title_tokens":["动态","可","监控"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_5","text":"在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["，","。","仿真","run","也","含义"," ","下","中","了","例程","_","熟悉","turtlesim","teleop","海龟","和","命令行","ros2","方法","$","提供","在","小海","命令","使用","这个","小海龟","的","不少","起来","key","仿真器","通过","node","真器","我们","一","参数","turtle"],"title":"案例一：小海龟例程中的参数","title_tokens":["案例","的","海龟","例程","：","小海","一","参数","小海龟","中"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_6","text":"","text_tokens":[],"title":"参数列表","title_tokens":["参数","列表"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_7","text":"$ ros2 param describe turtlesim background_b $ ros2 param get turtlesim background_b $ ros2 param set turtlesim background_b 10","text_tokens":["background","b","param","_","turtlesim","ros2","$","10","describe"," ","get","set"],"title":"参数查询与修改","title_tokens":["参数","修改","与","查询"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_8","text":"$ ros2 param dump turtlesim >> turtlesim.yaml $ ros2 param load turtlesim turtlesim.yaml","text_tokens":["param","dump",".","turtlesim","ros2",">","$"," ","yaml","load"],"title":"参数文件保存与加载","title_tokens":["保存","文件","参数","与","加载"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_9","text":"接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。","text_tokens":["，","比较简单","接下","简单","。","函数","体验","实现","接下来","都","就要","设置","程序","中","了","比较","两句","一下","这","可以","读取","和","一两句","方法","在","下来","先","几个","使用","一两","开始","来","就","的","我们","写","参数"],"title":"案例二：参数编程","title_tokens":["案例","编程","：","参数","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_10","text":"$ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle","text_tokens":["param","declare","parameter","_","name","run","ros2","$"," ","turtle","learning","set","robot"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_11","text":"learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], },","text_tokens":["，","配置","all","type","points","代码","（","节点","加入","com","入口","将","需要","entry","为","declare","选项","文件","string","编写","销毁","打开","2","timer","8","%","后","s","的","秒","到","@","python3","接口","知道","guyuehome","完成","让","列表","说明","包","(","：","初始","init","进行","setup","发送","程序","中",",","*","'","_",".","-","一个","信息","import","读取","创建","初始化","parameternode","from","set","{","python","定时","]","py","none","parameters","数值","函数","默认","作者","输出"," ","对象","示例","设置","日志","robot","等待","hello","utf","类","value","回调","shutdown","、","console","如下","!","定时器","居","param","callback","node","）","送给","#","}","指定","周期","执行","learning","new","值","循环","scripts",")","修改","destroy","env","编译","super","发送给","name","参数值","关闭","库","父类","点","info","parameter","www","class","spin","[","def","系统","功能","get","create","/","ros2","__","self","logger","从",":","打印","主","并","=","\"","main","mbot","coding","退出","古月","rclpy","默认值","重新","bin","args","参数","单位","usr"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_12","text":"参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。","text_tokens":["已经","修改","，","变化","。","呢","环境","麻烦","把","也","大大提高","物体"," ","下","不同","不如","示例","设置","中","了","程序","易用","来看","代码","还","机器","成","再","过程","动态","效果","比较","大家","易用性","不是","是","会","光线","对","可以","敏感","提高","优化","如何","视觉","在","机器人","看","先","使用","提炼","么","说干就干","的","识别","继续","阈值","就","每次","运行","我们","大大","？","应用","参数","挺"],"title":"案例三：机器视觉应用","title_tokens":["案例","三","机器","：","视觉","应用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_13","text":"$ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180","text_tokens":["cam","run"," ","detect","usb","parameter","_","object","red","exe","ros2","$","set","param","upper","node","h","180","learning"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_14","text":"learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], },","text_tokens":["，","转化成","配置","范围","list","表示","points","代码","（","color","mask","cnt","节点","加入","com","消息","与","及","将","入口","需要","entry","为","sub","declare","选项","0","文件","编写","chain","销毁","2","打开","使用","8","%","后","findcontours","的","识别","订阅","者","integer","通过","@","到","提示","to","python3","接口","模型","subscription","guyuehome","150","object","完成","90","说明","包","让","知道","(","：","初始","ros","init","左上","circle","cvtcolor","左上角","计算","化成","进行","setup","程序","中",",","data","用于","*","'","宽","receiving","出来","_",".","-","红色","一个","bgr","lower","w","信息","waitkey","像素","import","读取","互相","显示","创建","int","初始化","上限","面积","msgs","for","颜色","目标","检测","from","cv2","{","python","]","中心","py","contours","drawcontours","opencv","none","180","数值","噪声","d","太小","255","函数","作者","np","10","as","1","输出"," ","转换","hierarchy","detect","对象","示例","设置","日志","轮廓","y","等待","in","if","listener","图像处理","red","utf","inrange","类","value","去除","名","回调","队列","imshow","img","图像","得到","frame","shutdown","、","所在","console","如下","128","已","!","cv","xy","居","param","callback","image","upper","node","一些","）","二值化","<","勾勒","5","h","话题","bgr2hsv","bgr8","#","}","learning","循环","scripts",")","destroy","苹果","env","编译","super","name","类型","参数值","关闭","imgmsg","库","continue","+","hsv","父类","点","bridge","numpy","下限","info","parameter","www","class","spin","imagesubscriber","效果","sensor","50","[","def","shape","坐标","raw","高","msg","get","功能","系统","create","上角","retr","和","/","ros2","__","self","array","logger","boundingrect","approx","video","从",":","进入","打印","主","长度","并","阈值","=","\"","处理","main","coding","退出","古月","rclpy","bin","args","cvbridge","点画","参数","x","usr","转化"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["humble","understanding","tutorials",".","org","/","ros2","html","ros","-","https","docs","en","parameters",":"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/","text":"分布式通信 智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统，可以实现多计算平台上的任务分配。 分布式通信 什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。 分布式网络搭建 除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。 树莓派配置 在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。 装系统 我们先要给树莓派装系统，这里我们选择的是Ubuntu Mate针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/ 装ROS2 在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。 编译代码 将我们课程的代码也下载到树莓派中，进行编译。 远程桌面 如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728 分布式数据传输 树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 * 如使用虚拟机，请将虚拟机网络修改为桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。 分布式网络分组 没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。 案例一：小海龟分布式控制 分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动。 $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端 案例二：话题分布式通信 我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串。 $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端 案例三：服务分布式通信 话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能。 案例四：机器视觉分布式应用 以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体。 $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。 参考链接 https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["显示器","远程","如果","能力","确保","实际","变得","反过来","客户端程序","基本一致","domain","sub","并且","简而言之","小海龟","者","识别","拆解","通过","讲过","具体","除了","分布式","传感","计算机","？","发布者","即可","等","方便","这些","安装","此外","键盘","测试","感受","看上","组成","笔记","-","无法","信息","服务","显示","所","位于","开发","先","系列","多个","原本","这样","驱动","顺利","放在","烧写","同一个","然后","希望","放","访问","如","端","、","之后","字符串","试试","这么","不","派装","比如","于是","服务器程序","learning","分布式系统","修改","摄像","运动","talker","像头","—","求和","针对","turtlesim","另外","小","二","有点","互通","情况","智能","和","直接","ros2","性能","适合","机器人","下来","处理","操作","想","只要","mate","轻松","用","控制","镜像","实现","cpp","动作","采集","例程","你","客户端","将","为","算机","pc","学习","的","带来","运行","款","en","完成","。","article","helloworld","ros","物体","计算","就是","步骤","csdn","程序","用到","_","作为","一个","给","全都","魅力","视觉","就","主要","课程","我","经典","可能","案例","加法","之前","也","https","或者","流畅","hello","这里","比较","叫","是否","sd","没有","blog","可以","图像","pub","任务","如下","在","发布","发生","服务器","命令","起来","<","好","复杂","#","应用","一系列","已经","编译","讲","链接","接下来","通信","不同","桌面","成功","webcam","不够","像","大家","不过","派里","export","功能","数据传输","做","是","网络","顺利实现","字符","岂","只","先要","他们","并","流程","=","摄像头","出现","上边","更强","卡中","类似","代码","端的","再","details","数据","反过","小组","基本","需要","模式","这","真有","三","完全","而是","方法","分组","之间","这种","带领","使用","选择","两者","订阅","key","分布式应用","id","挺","变化","监控","传输","很多","下","建立","*","about","不在","your","net","不是","体积","个","互联","中有","支持","采用","不在话下","事情","一切","什么","我们","局域网络","py","过来","电脑","资源","笔记本","遇到","桥接","run","装","上去","感器","了","电机","teleop","鼠标","一致","exe","之外",">","小海","参考","繁多","node","启动","结构","话题","cam","处于","友好","问题","html","相互","concepts","整体","效果","里","各种","客户","笔记本电脑","啦","有","命令行","/","分布","仿真器","小型","qq","真器","依然","一","同一","，","配置","仿真","几乎","较","没","任务分配","docs","多","122599728","任何","机制","org","节点","加入","发给","过","则","一系","bashrc","树莓","world","感觉","编写","打通","布式","放置","远程桌面","后","到","计算能力","的话","看上去","humble","派","呢","：","资料","一样","download","进行","派端","分配","中","还","消耗",".","压力","红色","频繁","神奇","下载","topic","来","设计","框架","才能","传感器","卡顿","搭建"," ","都","由","务器","机器","虚拟机","listener","以上","一下","上","典型","海龟","demo","$","四","一句","继续","一些","实时","每","如此","毕竟","ubuntu","还是","平台","模拟","网上","据传","turtle","接下","之一","环境","请","非常","usb","连接","系统","会","减轻","两个","虚拟","提供","控制器","似乎","局域网","nodes",":","经常","而言","安排","局域","52785580"],"title":"**分布式通信**","title_tokens":["*","分布式","布式","通信","分布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_1","text":"智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统，可以实现多计算平台上的任务分配。","text_tokens":["遇到","，","这些","。","放在","卡顿","实现","如果"," ","计算","就是","多","任务分配","分配","中","能力","机器","不够","压力","一个","里","不是","功能","将","系统","这","会","可以","情况","全都","上","智能","、","任务","布式","减轻","岂","算机","机器人","分布","经常","的","多个","到","繁多","处理","拆解","运行","计算能力","分布式","计算机","？","平台","出现","等","分布式系统"],"title":"分布式通信","title_tokens":["布式","分布","通信","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_2","text":"什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。","text_tokens":["上边","，","更强","配置","控制","远程","实现","较","多","任何","数据","节点","需要","将","过","这","为","完全","树莓","并且","布式","之间","算机","这种","带领","的","到","运行","款","分布式","传感","？","计算机","看上去","等","方便","挺","这些","。","派","变化","此外","监控","ros","感受","传输","下","计算","就是","看上","组成","分配","笔记","中","还","消耗","压力","一个","作为","信息","体积","采用","魅力","视觉","位于","开发","就","原本","主要","什么","我们","框架","设计","电脑","资源","笔记本","传感器","可能","驱动","放在","之前","也","上去"," ","都","由","感器","了","机器","放","电机","比较","叫","可以","上","典型","任务","在","起来","每","不","毕竟","好","结构","平台","比如","复杂","应用","于是","分布式系统","已经","运动","接下","之一","环境","讲","接下来","相互","通信","非常","另外","大家","不过","小","派里","系统","功能","各种","做","是","有点","笔记本电脑","和","有","一","性能","减轻","两个","适合","只","机器人","控制器","下来","分布","处理","不同"],"title":"分布式通信","title_tokens":["布式","分布","通信","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_3","text":"除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。","text_tokens":["，","派","。","控制","计算","笔记","了","机器","另外","一个","上","笔记本电脑","树莓","之外","放置","在","机器人","控制器","使用","选择","的","我们","除了","电脑","平台","笔记本","我","模拟"],"title":"分布式网络搭建","title_tokens":["网络","分布式","布式","搭建","分布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_4","text":"在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。","text_tokens":["，","配置","派","。","环境","之前","也","资料","很多","都","大家","需要","可以","树莓","有","在","开发","先","参考","的","我们","好","网上"],"title":"树莓派配置","title_tokens":["配置","派","树莓"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_5","text":"我们先要给树莓派装系统，这里我们选择的是Ubuntu Mate针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/","text_tokens":["mate","，","派","。","镜像","链接","：","烧写","https","卡中"," ","download","了","针对",".","org","这里","-","给","系统","sd","是","可以","树莓","下载","/","之后","选择",":","先要","的","就","到","我们","启动","ubuntu","派装"],"title":"装系统","title_tokens":["系统","装"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#ros2","text":"在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。","text_tokens":["的","mate","，","流程","。","和","安装","好","ros2","端","ubuntu","电脑","一样","在"," ","系统","中"],"title":"装ROS2","title_tokens":["ros2","装"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_6","text":"将我们课程的代码也下载到树莓派中，进行编译。","text_tokens":["的","，","代码","派","到","树莓","编译","。","下载","我们","也","课程","进行","将","中"],"title":"编译代码","title_tokens":["代码","编译"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_7","text":"如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728","text_tokens":["显示器","，","派","配置","。","article","键盘","远程","链接","：","也","https","如果"," ","桌面","122599728","步骤","csdn","了","整体","连接",".","_","details","以上","大家","net","基本","访问","系统","基本一致","鼠标","blog","可以","网络","上","树莓","一致","显示","有","直接","和","端","/","如下","远程桌面","在","参考","使用",":","就","的","流程","通过","不","qq","好","的话","电脑","操作","52785580","方便"],"title":"远程桌面","title_tokens":["桌面","远程桌面","远程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_8","text":"树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 * 如使用虚拟机，请将虚拟机网络修改为桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。","text_tokens":["同一","配置","，","用","实现","cpp","如果","动作","能力","确保","你","节点","小组","需要","将","模式","这","为","树莓","而是","感觉","打通","并且","分组","之间","算机","使用","简而言之","pc","后","的","者","订阅","到","带来","讲过","具体","？","计算机","发布者","完成","等","。","派","呢","安装","测试","：","一样","很多","计算","派端","中","*","_","一个","神奇","无法","服务","个","互联","中有","所","事情","就","这样","什么","局域网络","我们","py","电脑","桥接","run","之前","也"," ","都","同一个","了","希望","虚拟机","listener","一下","可以","如","demo","端","、","$","如下","在","发布","发生","命令","不","启动","好","话题","平台","#","已经","修改","接下","talker","处于","问题","接下来","通信","请","连接","像","效果","不过","里","做","是","会","互通","网络","和","直接","命令行","ros2","两个","虚拟","下来","局域网","nodes","他们","并","而言","局域","只要"],"title":"分布式数据传输","title_tokens":["数据","分布式","布式","传输","分布","数据传输","据传"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_9","text":"没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。","text_tokens":["同一","，","派","配置","。","处于","：","问题","ros","实现","一样","没","通信"," ","计算","如果","同一个","不同","分配","中","类似","机制","了","端的",".","_","一个","加入","your","小组","无法","export","domain","将","则","可以","bashrc","树莓","和","ros2",">","提供","分组","算机","在","两者","一句","的","就","这样","到","=","<","我们","id","才能","计算机","电脑","即可"],"title":"分布式网络分组","title_tokens":["网络","分布式","布式","分组","分布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_10","text":"分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动。 $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端","text_tokens":["已经","案例","，","。","派","运动","仿真","键盘","测试","控制","之前","ros","也","run","通信"," ","建立","成功","派端","了","中","或者","—","流畅","反过来","例程","_","turtlesim","反过","节点","神奇","是否","teleop","过","真有","可以","网络","上","树莓","海龟","端","ros2","$","布式","似乎","在","试试","小海","先","分布","pc","学习","小海龟","这么","的","来","继续","一些","仿真器","node","key","我们","启动","真器","分布式","过来","电脑","依然","经典","#","想","turtle"],"title":"案例一：小海龟分布式控制","title_tokens":["案例","海龟","控制","：","分布式","布式","小海","一","分布","小海龟"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_11","text":"我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串。 $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端","text_tokens":["修改","，","派","。","呢","helloworld","run","之前"," ","下","通信","派端","任何","代码","hello","例程","_","作为","是否","可以","情况","sub","树莓","直接","world","字符","编写","ros2","topic","pub","$","字符串","端","在","试试","发布","先","使用","pc","的","者","订阅","不","我们","？","话题","发布者","电脑","#","learning"],"title":"案例二：话题分布式通信","title_tokens":["案例","：","分布式","话题","布式","通信","分布","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_12","text":"话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能。","text_tokens":["顺利","，","。","加法","问题","也","实现"," ","派端","程序","务器","求和","客户端程序","不在","客户端","功能","服务","没有","客户","可以","树莓","顺利实现","端","不在话下","服务器","运行","我们","还是","话题","电脑","服务器程序"],"title":"案例三：服务分布式通信","title_tokens":["案例","三","：","分布式","布式","通信","分布","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_13","text":"以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体。 $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。","text_tokens":["，","配置","轻松","几乎","没","采集","任何","类似","变得","实际","代码","再","端的","例程","节点","发给","需要","将","一系","为","sub","树莓","方法","布式","使用","pc","的","识别","通过","分布式","？","这些","。","派","测试","ros","物体","派端","中","还","用到","_","红色","一个","频繁","支持","topic","视觉","开发","系列","一切","我们","电脑","run","搭建","也"," ","都","然后","了","机器","以上","没有","可以","上","图像","exe","端","$","在","如此","实时","node","不","好","复杂","模拟","#","learning","一系列","修改","cam","摄像","接下","友好","问题","接下来","非常","像头","webcam","不够","usb","连接","功能","系统","做","会","网络","啦","ros2","提供","机器人","下来","分布","处理","小型","摄像头","安排","只要"],"title":"案例四：机器视觉分布式应用","title_tokens":["案例","机器","分布式应用","：","分布式","布式","视觉","应用","分布","四"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_14","text":"https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["humble","domain",".","org","/","id","html","ros","about","https","-","docs","en","concepts",":"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2_%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/","text":"从本节开始，我们将进入第二个篇章，以ROS2的核心概念为线索，详细讲解ROS2的应用开发方法。","text_tokens":["，","第二","二个","。","开发方法","以","本节","线索","将","为","概念","从本节","ros2","方法","第二个","开发","核心","进入","开始","的","详细","我们","讲解","应用","篇章"],"title":"2 核心概念","title_tokens":["核心","2","概念"," "]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/","text":"Launch：多节点启动与配置脚本 到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是Launch启动文件。 它是ROS系统中多节点启动与配置的一种脚本。 Launch文件 这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。 多节点启动 运行效果 文件解析 learning_launch/simple.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'learning_topic' , executable = 'topic_helloworld_pub' , ), Node ( package = 'learning_topic' , executable = 'topic_helloworld_sub' , ), ]) 命令行参数配置 运行效果 文件解析 learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): rviz_config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ Node ( package = 'rviz2' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' , rviz_config ] ) ]) 资源重映射 运行效果 文件解析 learning_launch/remapping.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , namespace = 'turtlesim2' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , executable = 'mimic' , name = 'mimic' , remappings = [ ( '/input/pose' , '/turtlesim1/turtle1/pose' ), ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), ] ) ]) ROS参数设置 运行效果 文件解析 learning_launch/parameters.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node def generate_launch_description (): background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) ) return LaunchDescription ([ background_r_launch_arg , background_g_launch_arg , background_b_launch_arg , Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [{ 'background_r' : LaunchConfiguration ( 'background_r' ), 'background_g' : LaunchConfiguration ( 'background_g' ), 'background_b' : LaunchConfiguration ( 'background_b' ), }] ), ]) learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , namespace = 'turtlesim2' , name = 'sim' , parameters = [ config ] ) ]) Launch文件包含 运行效果 文件解析 learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction from launch_ros.actions import PushRosNamespace def generate_launch_description (): parameter_yaml = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ parameter_yaml_with_namespace ]) learning_launch/parameters_nonamespace.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [ config ] ) ]) 功能包编译配置 ... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ... 参考链接 https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docsros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["配置","，","中多","executable","所有","映射","那","docs","large","多","类似","join","代码","新","nonamespace","过程","例程","org","output","...","turtle1","节点","files","需要","与","当然","脚本","一系","编程","sub","tutorials","文件","0","g","编写","os","解析","打开","actions","一次","带领","使用","为止","pythonlaunchdescriptionsource","includelaunchdescription","turtlesim2","namespace","的","到","每次","通过","运行","vel","？","甚至","description","看上去","config","simple","丰富","groupaction","en","包","humble","。","合剂","呢","了解","(","helloworld","：","ros","阅读","一样","很多","进行","pushrosnamespace","就是","看上","rviz2","中","组装","好像",",","data","还","'","textsubstitution","*","方式","_",".","-","一个","ament","肯定","完整","directory","import","答案","sim","目前","粘合剂","topic","每当","如何","xml","for","多样化","模版","系列","核心","from","{","来","python","就","这样","]","remapping","我们","py","大大","资源","重","基于","parameters","d","path","目的","return","上去","也","mimic","https"," ","都","with","cmd","设置","了","或者","相当","机器","目前为止","122","launch","index","yaml","value","没有","可以","rviz","pub","input","substitutions","包含","在","之高","命令","参考","频次","sources","docsros","node","share","启动","好","generate","}","84","自由","这是","learning","一系列","turtle","描述",")","arg","编译","各个","name","default","链接","麻烦","html","launchdescription","+","resource","一次性","前为","package","呀","parameter","原有","多样","像","turtlesim","效果","text","pose","大家","它","def","[","glob","系统","功能","各种","get","launchconfiguration","是","没错","remappings","background","projects","一种","namespaces","和","有没有","参数设置","命令行","/","ros2","declarelaunchargument","终端","机器人","乍",":","b","输入","粘合","=","packages","main","r","arguments","turtlesim1","出现","using","参数"],"title":"**Launch：多节点启动与配置脚本**","title_tokens":["脚本","配置","*","启动","：","launch","节点","多","与"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch","text":"到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是Launch启动文件。 它是ROS系统中多节点启动与配置的一种脚本。","text_tokens":["，","。","中多","呢","配置","麻烦","所有","ros","那","很多","都","一次性","就是"," ","前为","中","新","机器","呀","目前为止","方式","launch","一个","节点","肯定","它","需要","系统","没有","答案","当然","与","是","脚本","可以","一种","目前","有没有","文件","每当","打开","终端","机器人","一次","命令","为止","的","这样","到","每次","运行","我们","启动","好","？"],"title":"Launch：多节点启动与配置脚本","title_tokens":["脚本","配置","启动","：","launch","节点","多","与"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_1","text":"这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。","text_tokens":["，","配置","那","类似","代码","过程","例程","节点","一系","编程","文件","编写","带领","使用","的","通过","甚至","看上去","丰富","。","合剂","呢","了解","ros","阅读","一样","很多","进行","就是","看上","中","组装","好像","还","一个","完整","粘合剂","如何","多样化","模版","系列","核心","来","python","就","这样","我们","大大","基于","目的","上去","也"," ","了","或者","相当","launch","可以","在","之高","命令","频次","启动","自由","这是","一系列","描述","各个","呀","原有","多样","像","大家","它","功能","系统","各种","是","没错","和","命令行","ros2","乍","输入","粘合","出现","参数"],"title":"Launch文件","title_tokens":["launch","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_1","text":"","text_tokens":[],"title":"多节点启动","title_tokens":["多","节点","启动"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_2","text":"","text_tokens":[],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_3","text":"learning_launch/simple.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'learning_topic' , executable = 'topic_helloworld_pub' , ), Node ( package = 'learning_topic' , executable = 'topic_helloworld_sub' , ), ])","text_tokens":[")","executable","helloworld","(","return","launchdescription","ros"," ","package",",","'","_",".","launch","[","def","import","sub","pub","/","topic","actions","from",":","]","=","node","py","generate","description","simple","learning"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_4","text":"","text_tokens":[],"title":"命令行参数配置","title_tokens":["命令","命令行","配置","参数"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_5","text":"","text_tokens":[],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_6","text":"learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): rviz_config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ Node ( package = 'rviz2' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' , rviz_config ] ) ])","text_tokens":[")","executable","path","(","return","name","launchdescription","ros"," ","package","join","rviz2",",","'","_",".","launch","index","-","ament","[","directory","def","import","get","rviz","/","os","actions","from",":","python","]","=","node","packages","share","py","generate","description","arguments","config","learning","d","turtle"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_7","text":"","text_tokens":[],"title":"资源重映射","title_tokens":["资源","重","映射"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_8","text":"","text_tokens":[],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_9","text":"learning_launch/remapping.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , namespace = 'turtlesim2' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , executable = 'mimic' , name = 'mimic' , remappings = [ ( '/input/pose' , '/turtlesim1/turtle1/pose' ), ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), ] ) ])","text_tokens":[")","executable","(","return","name","launchdescription","ros","mimic"," ","cmd","package",",","'","_",".","turtlesim","launch","output","pose","turtle1","[","def","import","sim","remappings","/","input","actions","from",":","turtlesim2","namespace","]","=","node","remapping","vel","py","generate","description","turtlesim1","learning"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#ros","text":"","text_tokens":[],"title":"ROS参数设置","title_tokens":["ros","参数","参数设置","设置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_10","text":"","text_tokens":[],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_11","text":"learning_launch/parameters.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node def generate_launch_description (): background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) ) return LaunchDescription ([ background_r_launch_arg , background_g_launch_arg , background_b_launch_arg , Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [{ 'background_r' : LaunchConfiguration ( 'background_r' ), 'background_g' : LaunchConfiguration ( 'background_g' ), 'background_b' : LaunchConfiguration ( 'background_b' ), }] ), ]) learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , namespace = 'turtlesim2' , name = 'sim' , parameters = [ config ] ) ])","text_tokens":[")","executable","arg","path","(","return","name","default","launchdescription","ros"," ","package","join",",","'","textsubstitution","122","_",".","turtlesim","launch","text","index","ament","[","def","yaml","value","directory","import","launchconfiguration","sim","get","background","0","declarelaunchargument","/","g","substitutions","os","actions","from",":","{","namespace","b","python","turtlesim2","]","=","node","packages","share","py","r","generate","description","}","config","84","parameters","learning"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_2","text":"","text_tokens":[],"title":"Launch文件包含","title_tokens":["launch","包含","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_12","text":"","text_tokens":[],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_13","text":"learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction from launch_ros.actions import PushRosNamespace def generate_launch_description (): parameter_yaml = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ parameter_yaml_with_namespace ]) learning_launch/parameters_nonamespace.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [ config ] ) ])","text_tokens":[")","executable","path","(","return","name","launchdescription","ros"," ","pushrosnamespace","with","package","join",",","'","nonamespace","parameter","_",".","turtlesim","launch","index","ament","yaml","directory","def","[","import","get","sim","namespaces","/","os","groupaction","actions","from","sources","includelaunchdescription","pythonlaunchdescriptionsource",":","python","namespace","turtlesim2","]","=","node","packages","share","py","description","generate","config","parameters","learning"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_14","text":"... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ...","text_tokens":[")","path","(","name","+","resource"," ","package","join",",","data","'","*","_",".","...","index","launch","files","ament","[","glob","rviz","/","os","xml","]","=","packages","share","py","config"],"title":"功能包编译配置","title_tokens":["功能","配置","编译","包"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docsros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["humble","html","ros","https"," ","docs","large",".","org","launch","-","projects","tutorials","/","ros2","for",":","docsros","main","using","en"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/","text":"TF：机器人坐标系管理神器 坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器——TF。 机器人中的坐标系 机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做基坐标系Base Frame，机器人安装位置在外部环境下的参考系叫做世界坐标系World Frame，机器人末端夹爪的位置叫做工具坐标系，外部被操作物体的位置叫做工件坐标系，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是基坐标系Base Link，雷达所在的位置叫做雷达坐标系laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做里程计坐标系odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做地图坐标系map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为平移和旋转两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实向量的数学描述。 ROS中TF功能的底层原理，其实就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。 TF命令行操作 ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。 小海龟跟随例程 这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 查看TF树 $ ros2 run tf2_tools view_frames 查询坐标变换信息 $ ros2 run tf2_ros tf2_echo turtle2 turtle1 坐标系可视化 $ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。 静态TF广播 我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为静态TF变换，我们来看看在程序中该如何实现？ 运行效果 $ ros2 run learning_tf static_tf_broadcaster 代码解析 learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？ TF监听 我们再来学习下如何查询两个坐标系之间的位置关系。 运行效果 $ ros2 run learning_tf tf_listener 代码解析 learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。 海龟跟随功能解析 运行效果 $ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 原理解析 在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？这两个向量我们可以根据海龟的位置话题计算出来，那这个位置向量不就容易得到了么。 我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心是这个向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。 Launch文件解析 learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ]) 坐标系动态广播 learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 海龟跟随 learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":["房子","executable","范围","link","算法","broadcaster2","那","如果","表示","publish","变得","雷达","rotation","turtle1","变成","称之为","turtle2","euler","该","与","请求","quat","declare","0","小海龟","%","s","者","人学","通过","可视","中心点","具体","背后","？","description","监听","subscription","标志","让","说明","这些","rate","就绪","简单","安装","(","漂移","外部环境","setup","rviz2","获取","位置","srv","translation","源","house","-","方向","完整","信息","send","服务","抓取","call","pitch","msgs","如何","臂","中画","sendtransform","监听器","先","from","这样","lookup","tools","末端","parameters","tf2","存储","作者","result","as","封装","然后","y","查询","有所","动态","时间","呗","绝对","名","哪些","慢慢","roll","所在","、","之后","试试","生变","!","缓冲区","定时器","居","固定","不","）","比如","turtlename","线速度","learning","循环","运动","static","name","default","launchdescription","+","float","计算出来","—","跟随","是不是","parameter","odom","turtlesim","另外","frames","管理系统","get","有点","情况","一种","和","ros2","良好","logger","机器人","报告","数","其中","这个","关于","scale","处理","forward","古月","操作","缓冲","只要","sqrt","保持","想起","用","控制","时刻","geometry","实现","箭头","查看","spawning","理论知识","（","过程","例程","熟悉","欧拉角","view","姿态","不会","客户端","包括","将","看看","欧拉","为","string","解析","怎么","打开","2","3","学习","高中","的","to","@","又会有","相对","运行","着急","python3","四元","target","经过","知道","guyuehome","完成","en","分解","很","包","一只","。","优先","怎么样","产生","ros","物体","计算","就是","程序","spawn",",","'","更新","_","四乘","工具","linear","一个","给","怎样","transform","两只","finished","异常","目标","就","指令","]","中心","主要","1.0","f","当前","中该","none","生成","except","laser","数值","案例","机器人学","return","默认","也","1","https","转换","now","时候","示例","参考系","现在","被","误差","q","transformstamped","工件","launch","类","是否","速度","没有","可以","回调","得到","里程计","shutdown","根据","4","clock","如下","time","在","--","发布","发生","服务器","命令","神器","累积","起来","share","跟随运动","好","讲解","复杂","stamp","generate","#","}","周期","解决","已经",")","编译","transformlistener","super","链接","库","the","不要","常见","成功","戳","successfully","距离","名称","pose","大家","[","def","tf","坐标","功能","做","是","全局","机械","失败","向量","并","向","作用","=","转变成","默认值","rclpy","参数","爪","math","移动机器人","transformations","发生变化","on","could","代码","动机","再","叫做","数据","基本","base","需要","消息","入口","entry","这","选项","文件","夹","变得复杂","transformexception","方法","source","之间","这种","pos","两者","内","使用","提示","订阅","key","vel","id","接口","broadcaster1","重要","yaw","变化","你家","移动","数学","格外","初始","很多","下","知识","发送","*","child","原理","w","不是","import","sim","对","创建","初始化","空间","连线","看","核心","{","详细","所以","可视化","我们","py","true","基于","statictransformbroadcaster","三个","变换","其实","d","async","出","中间","函数","run","至关","buffer","相应","了","底盘","0.0","ready","quaternion","应该","容易","广播","teleop","rviz","frame",">","两者之间","角速度","console","角度","地图","sudo","turtletfbroadcaster","小海","部分","参考","xy","false","atan2","拆","node","启动","话题","following","statictfbroadcaster","描述","destroy","env","动","参数值","spawner","html","done","父类","z","点","坐标系","publisher","旋转","info","angular","器类","效果","msg","客户","教材","啦","有","命令行","/","__","prefix","self","么","清楚","5.0","长度","最为","仿真器","\"","真器","退出","自动","依然","bin","args","theta","，","配置","仿真","激光雷达","一起","否则","没","内容","docs","激光","points","加","org","一本","算出","pkg","按照","节点","加入","com","还会","map","及时","概念","位","tutorials","world","平移","编写",".__","销毁","actions","树","timer","8","后","到","得","else","rel","humble","理论","矩阵","呢","了解","is","不变","：","try","init","一样","底层","进行","外部","试一试","中","还","保存","出来",".","左边","turtlefollowing","header","之为","挑战","tflistener","echo","关系","至关重要","install","器","10.0","来","python","定时","request","not","显得","trans","transformation","里程","service"," ","都","对象","设置","transformbroadcaster","cmd","ex","务器","等待","机器","随便","某","if","listener","client","段","utf","世界","spawned","value","看似","上","海龟","demo","定义","substitutions","$","不断","哪个","四","存在","继续","callback","一些","每","时","5","要","基","scripts","turtle","speed","管理","环境","关闭","apt","非常","broadcaster","package","基础","twist","理解","准备就绪","说","class","www","spin","又","静态","系统","launchconfiguration","会","create","转变","一层","declarelaunchargument","便于","提供","两个","形态","同理",":","进入","main","意思","coding","x","管理系","准备","usr"],"title":"**TF：机器人坐标系管理神器**","title_tokens":["坐标","坐标系","管理","*","机器","：","机器人","tf","神器"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf","text":"坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器——TF。","text_tokens":["这些","，","机器人学","管理","。","也","ros","很多"," ","非常","中","基础","了","坐标系","—","位置","机器","熟悉","一个","完整","给","该","坐标","系统","tf","是","会","概念","关系","如何","之间","提供","在","机器人","神器","的","存在","人学","我们","？","重要"],"title":"TF：机器人坐标系管理神器","title_tokens":["tf","坐标系","管理","机器","：","机器人","坐标","神器"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_1","text":"机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做基坐标系Base Frame，机器人安装位置在外部环境下的参考系叫做世界坐标系World Frame，机器人末端夹爪的位置叫做工具坐标系，外部被操作物体的位置叫做工件坐标系，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是基坐标系Base Link，雷达所在的位置叫做雷达坐标系laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做里程计坐标系odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做地图坐标系map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为平移和旋转两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实向量的数学描述。 ROS中TF功能的底层原理，其实就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。","text_tokens":["，","移动机器人","范围","link","那","变得","理论知识","雷达","动机","过程","一本","叫做","基本","base","map","为","world","平移","夹","变得复杂","方法","之间","两者","内","使用","的","人学","通过","又会有","相对","中心点","？","重要","分解","这些","变化","。","简单","呢","理论","矩阵","安装","移动","数学","格外","ros","物体","一样","漂移","底层","下","外部","进行","外部环境","就是","知识","中","位置","四乘","工具","原理","一个","抓取","对","关系","臂","至关重要","空间","中画","就","详细","中心","主要","我们","显得","laser","里程","末端","变换","其实","机器人学","出","也","至关"," ","都","封装","了","参考系","机器","被","误差","工件","绝对","世界","哪些","可以","看似","frame","里程计","所在","两者之间","不断","地图","在","部分","参考","四","累积","固定","一些","管理系","每","要","讲解","比如","复杂","基","描述","管理","环境","坐标系","跟随","旋转","odom","大家","坐标","系统","tf","管理系统","功能","是","会","机械","教材","和","有","一层","良好","两个","形态","机器人","向量","这个","关于","操作","爪"],"title":"机器人中的坐标系","title_tokens":["的","坐标系","机器","机器人","坐标","中"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_1","text":"ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。","text_tokens":["，","。","呢","了解","算法","ros","下","示例","中","坐标系","跟随","机器","该","tf","坐标","一种","海龟","两只","如何","小海","机器人","先","使用","小海龟","的","通过","我们","？","基于"],"title":"TF命令行操作","title_tokens":["命令","tf","命令行","操作"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_2","text":"这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key","text_tokens":["humble","一只","，","。","运动","tf2","安装","控制","run","ros","apt"," ","试一试","然后","相应","示例","跟随","_",".","turtlesim","效果","launch","-","一个","另外","teleop","功能","需要","会","可以","文件","海龟","demo","ros2","$","之后","如何","sudo","小海","先","其中","这个","install","小海龟","来","的","就","key","通过","运行","我们","启动","跟随运动","py","自动","具体","？","tools","包","turtle"],"title":"小海龟跟随例程","title_tokens":["跟随","海龟","例程","小海","小海龟"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_2","text":"$ ros2 run tf2_tools view_frames","text_tokens":["tf2","_","frames","run","ros2","$","view"," ","tools"],"title":"查看TF树","title_tokens":["tf","树","查看"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_3","text":"$ ros2 run tf2_ros tf2_echo turtle2 turtle1","text_tokens":["echo","tf2","_","run","ros2","$","ros","turtle1"," ","turtle2"],"title":"查询坐标变换信息","title_tokens":["坐标","变换","查询","信息"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_4","text":"$ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。","text_tokens":[")","案例","，","。","呢","tf2","(","了解","run"," ","下","不要","rviz2","跟随","理解","_",".","原理","pkg","-","大家","tf","怎样","这","有点","是","rviz","慢慢","海龟","/","ros2","prefix","$","方法","便于","--","小海","先","使用","小海龟","来","的","share","意思","py","着急","我们","背后","？","d","turtle"],"title":"坐标系可视化","title_tokens":["可视化","坐标系","坐标","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_3","text":"我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为静态TF变换，我们来看看在程序中该如何实现？","text_tokens":["管理","，","简单","变化","你家","房子","。","安装","发生变化","激光雷达","也","实现","那"," ","进行","常见","激光","程序","中","坐标系","底盘","位置","机器","说","雷达","应该","一个","呗","静态","称之为","不会","之为","基本","坐标","tf","系统","看看","是","对","情况","和","关系","之后","之间","这种","在","试试","生变","发生","机器人","哪个","如何","这个","来","的","就","作用","最为","拆","主要","相对","不","我们","好","？","比如","中该","只要","很","变换"],"title":"静态TF广播","title_tokens":["tf","静态","广播"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_5","text":"$ ros2 run learning_tf static_tf_broadcaster","text_tokens":["static","_","run","ros2","$"," ","tf","learning","broadcaster"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_6","text":"learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？","text_tokens":["，","配置","保持","transformations","geometry","points","代码","（","欧拉角","rotation","节点","加入","euler","该","com","消息","将","需要","入口","entry","欧拉","这","为","quat","选项","文件","0","world","平移","编写","销毁","打开","2","3","使用","8","后","的","to","到","@","id","？","python3","接口","四元","经过","知道","guyuehome","完成","让","yaw","说明","包","变化","呢","(","不变","：","初始","ros","init","进行","setup","程序","中",",","*","'","child","位置","translation","_",".","源","house","-","一个","w","header","import","transform","创建","pitch","初始化","msgs","关系","如何","sendtransform","目标","from","器","10.0","{","python","]","py","我们","none","statictransformbroadcaster","变换","tf2","作者","1"," ","now","转换","时候","对象","示例","设置","了","y","等待","0.0","查询","transformstamped","quaternion","时间","段","utf","广播","类","frame","roll","shutdown","、","console","clock","如下","!","居","node","）","stamp","#","}","learning","statictfbroadcaster","循环","scripts",")","destroy","描述","static","env","编译","super","name","库","父类","z","broadcaster","戳","点","坐标系","旋转","class","www","spin","又","器类","静态","[","def","tf","坐标","功能","msg","get","系统","是","/","ros2","__","self","两个","数",":","并","向","5.0","清楚","=","\"","main","coding","退出","古月","rclpy","bin","args","x","usr"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_4","text":"我们再来学习下如何查询两个坐标系之间的位置关系。","text_tokens":["来","坐标系","的","。","位置","再","查询","我们","关系","如何","两个","之间","下","坐标","学习"],"title":"TF监听","title_tokens":["tf","监听"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_7","text":"$ ros2 run learning_tf tf_listener","text_tokens":["_","run","ros2","listener","$"," ","tf","learning"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_8","text":"learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。","text_tokens":["，","配置","transformations","用","时刻","否则","on","如果","could","points","代码","（","rotation","姿态","节点","加入","euler","com","需要","入口","基本","entry","quat","declare","选项","0","world","string","transformexception","编写","文件","source","销毁","打开","之间","pos","2","timer","使用","8","%","后","s","的","to","到","@","python3","接口","监听","四元","target","知道","guyuehome","完成","让","说明","包","。","优先","了解","(","try","：","初始","ros","init","进行","外部","setup","程序",",","*","'","获取","位置","保存","translation","_",".","左边","源","house","-","一个","w","信息","挑战","import","tflistener","transform","对","创建","初始化","两只","异常","监听器","目标","from","{","python","定时","]","not","1.0","py","f","我们","lookup","当前","none","trans","except","数值","变换","案例","tf2","存储","默认","作者","return","as","1"," ","buffer","now","对象","示例","设置","了","y","ex","现在","等待","某","有所","listener","quaternion","时间","utf","类","value","名","海龟","frame",">","shutdown","console","如下","time","--","!","缓冲区","定时器","居","固定","继续","node","）","好","#","}","周期","learning","循环","scripts",")","destroy","env","transformlistener","编译","static","super","name","参数值","关闭","库","父类","z","点","broadcaster","坐标系","跟随","info","class","www","parameter","spin","大家","[","def","tf","坐标","系统","get","功能","create","啦","失败","/","ros2","__","self","logger","两个","报告","数",":","进入","并","=","\"","处理","main","coding","退出","古月","rclpy","默认值","bin","args","缓冲","参数","x","usr"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_9","text":"","text_tokens":[],"title":"海龟跟随功能解析","title_tokens":["功能","跟随","解析","海龟"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_10","text":"$ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key","text_tokens":["key","_","demo",".","ros2","py","run","$","launch","turtlesim","following"," ","teleop","tf","learning","turtle"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_11","text":"在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？这两个向量我们可以根据海龟的位置话题计算出来，那这个位置向量不就容易得到了么。 我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心是这个向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。","text_tokens":["，","想起","仿真","用","一起","实现","箭头","那","表示","加","代码","再","例程","算出","叫做","turtle1","按照","turtle2","该","还会","与","这","world","方法","怎么","2","两者","学习","高中","的","相对","中心点","得","？","监听","很","。","怎么样","下","计算","就是","中","位置","出来","一个","方向","不是","两只","如何","连线","看","核心","就","这样","所以","中心","我们","三个","变换","中间","也","1"," ","封装","然后","设置","了","参考系","随便","某","动态","时间","容易","广播","速度","可以","上","海龟","得到","定义","根据","角度","不断","在","发布","参考","起来","时","不","好","要","话题","比如","周期","解决","描述","运动","动","计算出来","坐标系","是不是","跟随","说","距离","坐标","tf","做","是","全局","和","有","两个","同理","向量","这个","么","长度","向","仿真器","真器"],"title":"原理解析","title_tokens":["原理","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#launch","text":"learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ])","text_tokens":[")","executable","(","return","name","default","launchdescription","ros","broadcaster2"," ","broadcaster","package",",","'","_",".","turtlesim","listener","launch","turtle1","[","def","turtle2","value","tf","import","launchconfiguration","sim","demo","/","declarelaunchargument","substitutions","frame","actions","from",":","{","]","=","node","py","following","generate","description","broadcaster1","turtlename","}","target","parameters","learning","turtle"],"title":"Launch文件解析","title_tokens":["launch","解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_12","text":"learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], },","text_tokens":["，","配置","transformations","用","geometry","否则","points","代码","（","欧拉角","rotation","变成","节点","加入","euler","com","消息","将","及时","需要","入口","欧拉","entry","为","declare","选项","0","world","string","平移","编写","文件","销毁","打开","2","3","使用","8","小海龟","后","的","者","订阅","to","到","@","id","python3","接口","四元","subscription","guyuehome","完成","让","yaw","知道","说明","包","变化","优先","(","：","初始","ros","init","进行","外部","setup","程序","中",",","*","位置","'","获取","child","translation","_",".","更新","源","-","一个","w","header","信息","send","import","transform","创建","pitch","初始化","msgs","sendtransform","目标","from","器","{","python","]","py","f","none","transformation","数值","变换","tf2","函数","默认","作者","1"," ","now","转换","对象","示例","transformbroadcaster","设置","y","等待","0.0","动态","q","transformstamped","quaternion","时间","listener","utf","广播","类","value","回调","海龟","frame","roll","shutdown","、","turtletfbroadcaster","clock","如下","console","小海","!","居","callback","node","）","stamp","turtlename","#","}","learning","循环","scripts","turtle",")","destroy","env","编译","static","super","name","参数值","关闭","库","the","父类","z","broadcaster","戳","点","坐标系","旋转","class","www","parameter","名称","turtlesim","spin","pose","[","def","tf","坐标","功能","msg","get","系统","create","转变","/","ros2","__","self","数",":","并","向","=","\"","处理","main","coding","转变成","退出","古月","rclpy","默认值","bin","args","theta","参数","x","usr"],"title":"坐标系动态广播","title_tokens":["坐标系","坐标","广播","动态"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_13","text":"learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], },","text_tokens":["，","math","配置","transformations","用","控制","时刻","geometry","实现","否则","on","如果","查看","内容","没","could","表示","publish","points","spawning","代码","准备就绪","数据","rotation","姿态","turtle1","节点","加入","turtle2","客户端","com","消息","包括","需要","入口","请求","entry","位","declare","选项","0",".__","string","transformexception","编写","文件","source","销毁","打开","2","timer","使用","8","后","提示","的","to","到","通过","@","vel","else","python3","接口","监听","rel","知道","guyuehome","标志","完成","让","说明","包","变化","rate","优先","就绪","is","(","产生","try","：","初始","ros","init","进行","外部","计算","setup","发送","程序","spawn",",","*","srv","'","获取","保存","translation","_",".","linear","位置","左边","源","turtlefollowing","-","一个","信息","服务","import","call","transform","创建","初始化","finished","msgs","异常","监听器","目标","from","{","python","定时","指令","request","]","not","py","f","lookup","true","生成","当前","none","trans","except","数值","变换","async","service","tf2","存储","默认","作者","return","result","1","as"," ","buffer","now","对象","示例","设置","cmd","y","ex","务器","等待","ready","if","listener","时间","client","utf","类","是否","速度","value","spawned","名","没有","海龟","frame","shutdown","、","根据","角速度","角度","4","如下","time","发布","console","!","服务器","缓冲区","定时器","xy","居","false","固定","atan2","node","跟随运动","5","话题","following","#","}","周期","线速度","learning","循环","scripts","turtle","已经",")","speed","destroy","env","transformlistener","运动","编译","super","static","name","参数值","关闭","spawner","库","+","float","done","父类","成功","z","点","broadcaster","successfully","坐标系","twist","跟随","publisher","info","angular","class","www","parameter","距离","turtlesim","准备","spin","[","def","tf","坐标","功能","msg","get","客户","系统","create","失败","/","ros2","__","self","logger","报告",":","进入","并","还","=","\"","scale","forward","main","coding","退出","古月","rclpy","默认值","依然","bin","args","theta","缓冲","参数","x","sqrt","usr"],"title":"海龟跟随","title_tokens":["跟随","海龟"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_14","text":"https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":["humble","tutorials","tf2",".","org","/","main","html","ros","-","https","docs","en",":"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/","text":"URDF：机器人建模方法 ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法——URDF，用来描述机器人外观、性能等各方面属性。 机器人的组成 建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由硬件结构、驱动系统、传感器系统、控制系统四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备，驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等，传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境，控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。 URDF ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是XML格式，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为连杆Link，手肘就类似于机器人电机驱动部分，称为关节joint。 所以在URDF建模过程中，关键任务就是通过这里的 和 ，理清楚每一个连杆和关节的描述信息。 连杆Link的描述 标签用来描述机器人某个刚体部分的外观和物理属性，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。Link里边的 部分用来描述机器人的外观，比如 表示几何形状，里边使用 调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的。 表示坐标系相对初始位置的偏移，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分 ，描述碰撞参数，里边的内容似乎和 一样，也有 和 ，看似相同，其实区别还是比较大的。 部分重在描述机器人看上去的状态，也就是视觉效果， 部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过 来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是 里边 描述的形状。 坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。 关节Joint描述 机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 第一种continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 第二种revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 第三种prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 第四种是fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 第五种Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 既然是运动，就是相对的，parent标签描述父连杆，child标签描述子连杆，子连杆会相对父连杆发生运动。 这里的origin表示两个连杆坐标系之间的关系，也就是这个向量，可以理解为这两个连杆该如何安装到一起。 Axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的。 Limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等，大家注意单位，ROS中关于平移的默认单位都是m，旋转是弧度，不是度，所以这里3.14就表示可以在-180度到180度之间运动，速度也是m/s，或者rad/s。 完整机器人模型 最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。 创建机器人模型 好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。 功能包结构 urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件 查看URDF模型结构 $ urdf_to_graphiz mbot_base.urdf # 在模型文件夹下 模型可视化效果 模型文件解析 learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot> 参考链接 https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":["大臂","三维","stl","version","link","所有","小车","无限","介绍","如果","四种","表示","实际","left","雷达","形成","以及","该","与","0","等等","碰撞","s","通过","可视","算力","传感","？","等","让","这些","安装","外部环境","看上","组成","看下","位置","方式","围绕","存放","-","方向","第二种","为此","无法","信息","完整","手臂","prismatic","origin","右侧","pitch","第三种","极限","wheel","如何","臂","正常","轮子","件夹","开发","先","算作","系列","这样","外观","载体","驱动","方面","revolute","放在","robot","实打实","y","0.025","桌子","length","操作系统","m","哪些","括号","直线","电源","roll","、","之后","这么","rpy","固定","不","比如","允许","组合而成","最小","learning","摄像","运动","六种","name","提前","视觉效果","区别","cylinder","像头","—","惯性","第六","它","格式","高","管理系统","自定","有点","建模","一种","和","性能","柱体","机器人","其中","这个","关于","肘关节","mbot","操作","正","二个","用","控制","geometry","感知","查看","应用软件","back","过程","设备","熟悉","网页","radius","不会","包括","将","当然","为","解析","形状","的","to","相对","码器","着急","最大","en","完成","分解","包","。","产生","right","ros","最终","此时","计算","就是","全为","0.4","_","imu","编码器","思路","一个","给","xyz","外界","全都","0.16","文件夹","一般","视觉","xml","就","主要","1.0","子","urdf","唯一","编码","默认","之前","也","1","https","3.14","时候","专门","示例","或者","这里","launch","比较","叫","看到","转关","或","速度","0.20","planar","可以","front","任务","如下","自定义","xacro","在","发生","弧度","joint","第三","找","0.19","起来","第一种","<","好","复杂","#","0.05","应用","有点像","一系列","度到","碰撞检测","哪","独立","讲","链接","接触","名字","0.06","常见","meshes","名称","大家","不过","坐标","功能","是","机械","质量","乍","向量","他们","第四种","两种","渲染","旋转关节","=","black","material","摄像头","参数","单位","在于","移动机器人","尺寸","类似","框","代码","动机","再","叫做","车体","rgba","需要","base","这","完全","而是","文件","无论","小臂","方法","第四","限制","这种","之间","使用","0.095","axis","模型","简化","未来","外壳","清晰","质心","变化","偏移","0.9","标签","移动","graphiz","初始","物理","手","下","认识","驱动器","少","为例","child","里边","市面上","不是","某个","对","驱使","创建","用来","注意","看","第一","大","所以","圆柱","可视化","什么","我们","电脑","180","其实","?","语言","上去","局","配置文件","visual","几何","一块","先来","感器","了","底盘","电机","rviz","一致","手肘",">","角度","部分","参考","分别","limit","rad","启动","white","结构","组合","肌肉","蓝色","细节","描述","类型","html","度","连杆","z","坐标系","旋转","状态","效果","沿某","相对运动","raw","相机","0.015","啦","有","/","caster","相同","清楚","1.5707","\"","自身","真实","，","配置","关键","独自","一起","较","内容","等于","docs","多","type","圆柱体","color","org","理","按照","各","硬件","则","平面","一系","软件","第五种","树莓","tutorials","平移","放置","第二个","模型简化","到","得","的话","浮动","板载","滑动","看上去","相关","属性","humble","第二","派","矩阵","呢","这款","了解","统一","：","面上","一样","进行","外部","为了","中","还","保存",".","yellow","无论是","频繁","0.95","关节","全称","市面","关系","颜色","属于","父","三种","检测","必须","来","包围","五种","设计","才能","传感器","第六种","组成部分","floating","建模语言","0.18","刚体","把"," ","都","绿色","由","调用","机器","某","以","不能","一段","带有","要求","看似","上","既然","定义","重在","$","控制系统","单位向量","于","一些","每","时","要","还是","平台","装置","管理","称为","环境","引用","源代码","理解","parent","连接","sphere","fixed","continuous","自己","第五","系统","会","四大","轴","便于","提供","两个","似乎","每个","二种",":","尖括号","main","不仅","x","管理系"],"title":"**URDF：机器人建模方法**","title_tokens":["urdf","建模","*","机器","：","方法","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf","text":"ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法——URDF，用来描述机器人外观、性能等各方面属性。","text_tokens":["urdf","描述","，","方面","。","呢","之前","ros","把","介绍"," ","下","认识","专门","了","—","还","机器","一个","各","不过","为此","给","操作系统","系统","当然","是","建模","一种","啦","、","方法","用来","性能","如何","提供","在","机器人","属性","使用","的","我们","得","外观","要","？","操作","等","让"],"title":"URDF：机器人建模方法","title_tokens":["urdf","建模","机器","：","方法","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_1","text":"建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由硬件结构、驱动系统、传感器系统、控制系统四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备，驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等，传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境，控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。","text_tokens":["，","移动机器人","控制","感知","应用软件","类似","雷达","动机","再","过程","设备","熟悉","按照","以及","需要","包括","硬件","这","软件","树莓","无论","等等","使用","的","通过","码器","传感","板载","等","分解","外壳","。","这些","派","安装","移动","面上","进行","外部","就是","计算","驱动器","组成","中","里边","imu","编码器","市面上","无论是","思路","一个","驱使","一般","市面","臂","正常","开发","先","主要","我们","电脑","传感器","载体","组成部分","其实","驱动","建模语言","编码","语言","把"," ","都","由","感器","了","实打实","底盘","机器","电机","看到","操作系统","可以","上","电源","、","控制系统","部分","起来","一些","每","还是","结构","比如","平台","装置","组合","应用","描述","管理","摄像","环境","常见","像头","状态","自己","系统","管理系统","是","建模","机械","四大","和","便于","机器人","清楚","摄像头","操作","参数","管理系"],"title":"机器人的组成","title_tokens":["机器人","的","组成","机器"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_1","text":"ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是XML格式，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为连杆Link，手肘就类似于机器人电机驱动部分，称为关节joint。 所以在URDF建模过程中，关键任务就是通过这里的 和 ，理清楚每一个连杆和关节的描述信息。","text_tokens":["大臂","，","link","关键","独自","类似","代码","过程","网页","叫做","理","一系","文件","小臂","方法","使用","的","通过","相对","？","看上去","模型","属性","清晰","。","这些","呢","标签","统一","产生","ros","手","下","外部","就是","外部环境","看上","组成","中","还","一个","无法","信息","手臂","右侧","关节","全称","如何","xml","臂","开发","看","算作","系列","必须","就","包围","这样","所以","我们","才能","urdf","驱动","刚体","也","上去"," ","都","由","机器","桌子","这里","电机","括号","可以","手肘","任务","之后","在","部分","于","joint","每","比如","组合","肌肉","组合而成","有点像","一系列","描述","运动","称为","环境","独立","连杆","源代码","连接","大家","自己","相对运动","格式","是","建模","有点","机械","和","机器人","乍","其中","这个","他们","清楚","肘关节","尖括号","自身","不仅"],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#link","text":"标签用来描述机器人某个刚体部分的外观和物理属性，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。Link里边的 部分用来描述机器人的外观，比如 表示几何形状，里边使用 调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的。 表示坐标系相对初始位置的偏移，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分 ，描述碰撞参数，里边的内容似乎和 一样，也有 和 ，看似相同，其实区别还是比较大的。 部分重在描述机器人看上去的状态，也就是视觉效果， 部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过 来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是 里边 描述的形状。 坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。","text_tokens":["，","三维","二个","移动机器人","stl","用","link","控制","尺寸","较","小车","内容","如果","表示","类似","实际","框","圆柱体","动机","过程","车体","该","包括","需要","与","将","则","软件","文件","0","平移","碰撞","第二个","形状","使用","模型简化","的","到","通过","相对","的话","算力","看上去","模型","简化","未来","等","属性","。","第二","矩阵","偏移","质心","标签","移动","：","初始","一样","物理","计算","就是","看上","全为","为了","中","为例","位置","里边","一个","方向","外界","某个","pitch","用来","臂","视觉","颜色","如何","轮子","算作","检测","来","就","大","这样","圆柱","设计","外观","我们","其实","刚体","上去","也"," ","绿色","时候","几何","了","调用","y","机器","以","比较","要求","可以","一致","上","看似","roll","定义","、","重在","如下","自定义","在","部分","joint","分别","时","不","好","还是","比如","复杂","蓝色","参数","描述","碰撞检测","运动","name","提前","视觉效果","接触","连杆","区别","z","坐标系","旋转","惯性","连接","名称","状态","效果","它","坐标","raw","高","自定","是","会","机械","和","有","相同","柱体","似乎","机器人","质量","这个","真实","x"],"title":"连杆Link的描述","title_tokens":["的","link","连杆","描述"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#joint","text":"机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 第一种continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 第二种revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 第三种prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 第四种是fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 第五种Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 既然是运动，就是相对的，parent标签描述父连杆，child标签描述子连杆，子连杆会相对父连杆发生运动。 这里的origin表示两个连杆坐标系之间的关系，也就是这个向量，可以理解为这两个连杆该如何安装到一起。 Axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的。 Limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等，大家注意单位，ROS中关于平移的默认单位都是m，旋转是弧度，不是度，所以这里3.14就表示可以在-180度到180度之间运动，速度也是m/s，或者rad/s。","text_tokens":["，","在于","link","一起","小车","无限","较","内容","等于","四种","表示","不会","该","平面","这","为","第五种","而是","平移","第四","限制","这种","之间","使用","s","的","到","通过","相对","axis","浮动","滑动","最大","模型","等","。","第二","变化","产生","安装","标签","ros","最终","此时","进行","就是","中","少","child","位置","方式","围绕","-","一个","第二种","频繁","方向","不是","prismatic","origin","第三种","极限","关节","一般","关系","轮子","臂","属于","xml","父","如何","注意","第一","三种","就","这样","所以","五种","什么","才能","第六种","子","180","urdf","唯一","floating","revolute","默认","刚体","也","1"," ","都","3.14","了","或者","机器","某","不能","这里","电机","一段","比较","带有","转关","叫","速度","planar","m","直线","可以","上","既然","之后","角度","在","单位向量","发生","弧度","joint","第三","limit","rad","固定","一些","每","第一种","不","要","还是","比如","允许","最小","度到","描述","六种","运动","哪","类型","名字","连杆","度","区别","z","坐标系","旋转","理解","parent","连接","fixed","第六","沿某","continuous","大家","不过","相对运动","第五","坐标","相机","是","会","机械","一种","轴","和","有","/","两个","机器人","二种","向量","这个","关于","两种","第四种","旋转关节","正","单位"],"title":"关节Joint描述","title_tokens":["描述","joint","关节"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_2","text":"最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。","text_tokens":["urdf","描述","，","。","放在","了解","标签","link","所有","局","最终"," ","下","由","一块","先来","组成","了","robot","中","代码","机器","再","某","形成","一个","大家","完整","哪些","是","对","全都","完全","和","之后","每个","机器人","在","部分","看","先","joint","这个","找","的","就","所以","时","每","不","着急","组合","模型","完成","细节"],"title":"完整机器人模型","title_tokens":["机器人","机器","完整","模型"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_3","text":"好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。","text_tokens":["urdf","，","。","这款","移动机器人","移动","讲","一起"," ","多","示例","看下","了","为例","机器","动机","以","过程","一个","完整","它","建模","啦","机器人","看","这么","的","好","我们","还是","要","模型"],"title":"创建机器人模型","title_tokens":["机器人","创建","机器","模型"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_4","text":"urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件","text_tokens":["urdf","配置","：","引用","配置文件"," ","中","机器","meshes","保存","存放","launch","或","rviz","文件","xacro","放置","机器人","的","渲染","启动","模型","相关"],"title":"功能包结构","title_tokens":["结构","功能","包"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_2","text":"$ urdf_to_graphiz mbot_base.urdf # 在模型文件夹下","text_tokens":["urdf","to","文件","文件夹","_","mbot",".","graphiz","$","#"," ","在","模型","件夹","下","base"],"title":"查看URDF模型结构","title_tokens":["urdf","结构","查看","模型"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_5","text":"","text_tokens":[],"title":"模型可视化效果","title_tokens":["可视化","效果","可视","模型"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_6","text":"learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot>","text_tokens":["urdf","?","0.9","version","right","name","link","0.18","geometry","1"," ","visual","0.06","cylinder","type","robot","0.4","back","child","left","0.025","color","parent","_",".","sphere","yellow","continuous","-","length","radius","0.20","rgba","xyz","base","0.015","origin","0.16","0","front","0.95","/",">","wheel","caster","xml","joint","0.19","rpy","1.5707","=","\"","<","1.0","mbot","axis","white","0.095","black","material","0.05","learning"],"title":"模型文件解析","title_tokens":["解析","文件","模型"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_7","text":"https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":["humble","urdf","tutorials",".","org","/","main","html","ros","-","https","docs","en",":"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/","text":"Gazebo：三维物理仿真平台 ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台Gazebo，了解一下。 Gazebo仿真平台 介绍 Gazebo是ROS系统中最为常用的三维物理仿真平台，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。 安装 Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-* 运行 通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py 注意：为保证模型顺利加载，请将离线模型文件库下载并放置到~/.gazebo/models路径下， https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。 XACRO机器人模型优化 我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本——XACRO文件。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro 常量定义 一些常用的XACRO文件语法，大家了解下。 标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。 数学计算 如果需要做数学计算，同样是在$加大括号中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 注意：所有数学运算都会转换成浮点数进行，以保证运算精度 宏定义 机器人的轮子我们也做成宏定义，定义方式是通过这个 标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。 文件包含 宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。 机器人仿真模型配置 完善物理参数 第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。 添加Gazebo标签 第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。 配置传动装置 第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。 添加控制器插件 第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。 构建仿真环境 接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ]) 机器人运动仿真 万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard 注意：虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。 Ignition：下一代Gazebo 随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为Ignition，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/ 附录：机器人完整模型 learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["传动装置","executable","三维","version","link","sure","list","所有","算法","me","小车","介绍","如果","那","where","附录","all","重复","模块","publish","确保","left","single","该","官方","编程","0","二句","优化","izz","碰撞","into","have","小海龟","---","通过","转换成","传感","？","description","火星","等","让","可编程","方便","这些","续航","rate","简单","安装","(","结束","wiki","键盘","测试","某些","so","位置","controller","做成","方式","网站","试一下","当","-","完整","directory","信息","by","引擎","origin","wheel","如何","轮子","开发","先","嵌套","transmission","from","make","这样","原本","interface","顺利","高质","数学计算","ignition","path","use","然后","robot","y","0.025","length","限飞","m","defining","括号","、","keyboard","试试","!","screen","三步","x","rpy","传动","provided","不","mechanicalreduction","比如","装上","点数","于是","帮助","learning","修改","摄像","运动","t","name","filename","launchdescription","验证","+","cylinder","像头","—","是不是","惯性","变量","针对","可编","odom","val","主角","另外","它","spwan","格式","奇迹","get","有点","建模","官方网站","保证","冗余","update","和","直接","ros2","机器人","下来","这个","官方网","似曾","packages","mbot","change","arguments","simpletransmission","用","you","控制","镜像","时刻","geometry","实现","ignitionrobotics","系数","demos","back","新","want","一定","过程","你","radius","不会","部署","及","将","params","force","当然","为","运算","路径","怎么","2","3","值为","随着","想不起","的","to","整个","相对","运行","动力学","改成","俱备","区分","甚至","加大","周边","be","很长","摩擦力","完成","很","包","二步","。","and","right","ros","此时","计算","enabled","就是","想不起来","spawn",",","0.4","find","'","用到","_","camera","一个","给","xyz","不多","尽量","重复使用","互相","见证","0.16","同时","xml","for","加速","尝试","就","]","主要","1.0","separation","课程","数值","上来","可能","urdf","万事","加法","刚好","return","“","之前","也","1","https","转换","hardwareinterface","人机","时候","this","完善","表面","流畅","c语言","这里","launch","叫","turngravityoff","0.20","速度","没有","可以","得到","第四步","front","3.14159","footprint","4","xacro","time","在","--","命令","joint","c","找","第三","0.19","起来","drive","them","<","share","好","写","include","复杂","generate","0.2","#","pi","}","0.05","应用","有点像","box","differential","joints","已经",")","entity","库","接下来","the","名字","0.06","bridge","20","第二步","像","除法","名称","items","http","pose","大家","不过","[","def","motor","export","功能","新一代","tf","做","是","actuator","参数设置","导致","iyy","12","质量","结果","比","并","渲染","输入","流程","=","black","r","material","摄像头","浮点数","出现","参数","认识一下","第一句","size","移动机器人","尺寸","only","类似","代码","libgazebo","怎么办","再","动机","第二句","数据","插件","neighborhood","load","rgba","基本","需要","base","torque","velocityjointinterface","这","条件","文件","os","方法","第四","source","30","这种","使用","为止","语法","pythonlaunchdescriptionsource","collision","vel","axis","svga","接口","力学","模型","未来","火星车","丰富","yaw","相识","变化","reflect","osrf","标签","移动","数学","一代","物理","很多","下","认识","再用","odometry","*","child","里边","这句","同样","不是","弹性系数","不妨","四步","硬件加速","import","sim","个","对","支持","创建","plugin","用来","名为","注意","几个","第一","{","所以","ixy","我们","py","true","ixx","总体","?","函数","语言","run","inertial","切分","visual","感器","了","传递","底盘","常量","0.0","in","gazebo","电机","really","teleop","周边环境","github","frame",">","手边","角度","办法","sudo","包含","小海","参考","~","sources","colors","第三步","false","node","启动","第一步","万事俱备","vgpu10","a","交给","描述","实验","友好","问题","spawner","化","度","必备","z","一行","publisher","文件格式","property","效果","diff","两句","0.015","啦","command","有","/","caster","似曾相识","prefix","ixz","从","跑","么","放到","还要","记得","最为","精度","\"","仿真器","无人","真器","matrix","we","图形","，","弹性","配置","考虑","仿真","一起","下一代","摩擦","没","多","因为","type","join","diameter","color","org","important","pkg","output","gray","高质量","节点","加入","com","硬件","公式","bashrc","ign","world","actions","放置","xmlns","可","rgbd","includelaunchdescription","升级","迭代","到","doesn","reference","传递数据","得","无人机","相关","属性","进步","correctly","humble","第二","own","呢","了解","is","：","一样","进行","inertia","必要","实物","为了","中","分配","3.1415926","还",".","浮点","yellow","频繁","ament","state","技术","models","echo","0.95","下载","topic","关节","关系","动力","used","颜色","install","语句","set","来","python","file","设计","传感器","trans","matter","0.18","iyz","把"," ","都","worlds","设置","cmd","0.001","hardware","调用","机器","虚拟机","某","以","if","不能","0.75","较大","以上","index","value","一下","加载","常用","上","海龟","定义","$","不断","离线","our","一句","macro","添加","一些","每","时","5","h","要","平台","模拟","装置","更为","接下","环境","更","关闭","apt","请","package","宏","twist","理解","www","parent","sphere","fixed","continuous","去","差速","系统","会","命名","max","提供","两个","虚拟","每个","换成","控制器",":","差不多","一步","b","版本","根本","mass","”","acceleration","构建","不同","不仅","场景","blue"],"title":"**Gazebo：三维物理仿真平台**","title_tokens":["*","三维","仿真","gazebo","：","平台","物理"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo","text":"ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台Gazebo，了解一下。","text_tokens":["，","。","三维","呢","了解","仿真","问题","ros","物理","没","如果","实物","机器","怎么办","gazebo","主角","没有","一下","当然","是","手边","怎么","机器人","开发","我们","？","平台"],"title":"Gazebo：三维物理仿真平台","title_tokens":["三维","仿真","gazebo","：","平台","物理"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_1","text":"","text_tokens":[],"title":"Gazebo仿真平台","title_tokens":["仿真","平台","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_1","text":"Gazebo是ROS系统中最为常用的三维物理仿真平台，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。","text_tokens":["，","弹性","三维","仿真","用","算法","实现","摩擦","那","多","类似","系数","再","高质量","加入","部署","及","为","优化","使用","的","到","运行","动力学","力学","无人机","周边","火星","火星车","属性","等","摩擦力","。","续航","测试","ros","物理","此时","实物","中","还","一个","频繁","弹性系数","不妨","不多","引擎","支持","动力","开发","先","就","所以","这样","设计","我们","上来","可能","高质"," ","都","人机","表面","了","机器","gazebo","限飞","没有","可以","常用","周边环境","、","办法","在","要","平台","比如","模拟","应用","帮助","环境","更","实验","验证","系统","做","是","和","导致","提供","质量","机器人","差不多","渲染","最为","无人","不仅","场景","图形"],"title":"介绍","title_tokens":["介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_2","text":"Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-*","text_tokens":["已经","humble","，","。","简单","呢","安装","：","把","ros","apt"," ","都","认识","为了","中","了","确保","*","gazebo","-","一个","大家","它","完整","给","不妨","系统","功能","一下","可以","互相","和","直接","$","如何","sudo","先","命令","使用","跑","install","的","起来","这样","通过","我们","？","装上","相关","认识一下","包"],"title":"安装","title_tokens":["安装"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_3","text":"通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py 注意：为保证模型顺利加载，请将离线模型文件库下载并放置到~/.gazebo/models路径下， https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。","text_tokens":["，","移动机器人","仿真","一起","控制","动机","该","com","将","为","文件","路径","放置","的","到","通过","？","模型","。","osrf","移动","：","ros","下","认识","中","还","这句","_",".","不是","models","下载","注意","尝试","就","设计","py","我们","课程","顺利","之前","把","https"," ","了","机器","gazebo","launch","加载","可以","github","$","离线","试试","在","命令","~","启动","接下","运动","环境","库","接下来","请","是不是","大家","它","保证","啦","/","ros2","机器人","下来","么",":","放到","还要","并","记得"],"title":"运行","title_tokens":["运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#xacro","text":"我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本——XACRO文件。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro","text_tokens":["，","移动机器人","link","实现","小车","尺寸","介绍","没","如果","多","重复","模块","代码","动机","过程","数据","你","加入","需要","编程","条件","文件","方法","优化","放置","使用","可","升级","的","通过","传递数据","传感","接口","甚至","模型","很长","可编程","让","丰富","包","humble","。","安装","移动","：","ros","一样","此时","计算","再用","必要","为了","中","还","这句","同样","-","一个","给","个","对","重复使用","创建","轮子","先","install","语句","就","设计","我们","传感器","总体","可能","urdf","函数","之前","也","把","切分"," ","都","时候","感器","然后","了","传递","调用","底盘","常量","机器","不能","gazebo","这里","叫","没有","一下","可以","定义","、","4","$","xacro","包含","sudo","在","命令","一些","好","写","要","比如","复杂","a","更为","描述","摄像","接下","更","友好","apt","化","接下来","像头","宏","—","变量","可编","文件格式","像","大家","格式","功能","做","是","会","建模","直接","有","每个","机器人","下来","放到","b","版本","摄像头","不同"],"title":"XACRO机器人模型优化","title_tokens":["机器","优化","xacro","机器人","模型"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_4","text":"一些常用的XACRO文件语法，大家了解下。 标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。","text_tokens":["urdf","这些","，","。","变化","修改","移动机器人","了解","标签","安装","移动","“","把","尺寸","也"," ","下","都","时候","了","中","调用","一行","常量","底盘","位置","针对","里边","动机","机器","_","数据","一个","大家","方便","不会","需要","m","括号","可以","常用","文件","3.14159","定义","、","用来","名为","$","xacro","轮子","在","机器人","值为","质量","使用","语法","找","的","就","这样","一些","通过","原本","不","”","好","我们","比如","加大","pi","模型","未来","很"],"title":"常量定义","title_tokens":["常量","定义"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_5","text":"如果需要做数学计算，同样是在$加大括号中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 注意：所有数学运算都会转换成浮点数进行，以保证运算精度","text_tokens":["，","移动机器人","所有","如果","动机","数据","加入","需要","这","运算","公式","怎么","想不起","的","通过","转换成","相对","改成","加大","模型","未来","。","移动","数学","：","很多","进行","计算","想不起来","中","位置","同样","浮点","一个","尽量","关系","注意","来","就","我们","数值","可能","数学计算","加法"," ","都","转换","时候","了","常量","机器","某","以","括号","可以","得到","$","在","起来","写","比如","点数","修改","除法","做","是","会","保证","和","有","直接","两个","机器人","换成","这个","结果","根本","精度","浮点数"],"title":"数学计算","title_tokens":["数学计算","数学","计算"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_6","text":"机器人的轮子我们也做成宏定义，定义方式是通过这个 标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。","text_tokens":["描述","，","。","刚好","函数","标签","link","镜像","把","也","1","一样","名字"," ","时候","设置","中","了","宏","调用","还","位置","机器","做成","方式","里边","用到","像","名称","这里","当","-","一个","两句","需要","这","是","会","可以","和","同时","参数设置","定义","、","关节","关系","轮子","包含","两个","在","机器人","几个","使用","这个","joint","c","来","的","b","就","这样","一些","通过","记得","输入","我们","好","要","区分","比如","出现","a","模型","参数"],"title":"宏定义","title_tokens":["宏","定义"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_7","text":"宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。","text_tokens":["，","。","接下","很","语言","函数","仿真","结束","把","也","某些","接下来"," ","必备","然后","模块","了","中","宏","调用","底盘","是不是","还","机器","做成","再","里边","像","c语言","这里","一个","另外","去","加入","不是","没有","做","是","可以","对","参数","文件","和","定义","似曾相识","优化","包含","这种","机器人","下来","嵌套","使用","为止","的","流程","似曾","到","一些","我们","得","include","模型","于是","相识"],"title":"文件包含","title_tokens":["包含","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_8","text":"","text_tokens":[],"title":"机器人仿真模型配置","title_tokens":["配置","机器","仿真","机器人","模型"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_9","text":"第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。","text_tokens":["，","。","仿真","link","物理","都","因为","必要","确保","惯性","一定","gazebo","一个","需要","是","和","有","碰撞","第一","一步","的","每","第一步","平台","参数","属性"],"title":"完善物理参数","title_tokens":["参数","物理","完善"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_2","text":"第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。","text_tokens":["urdf","第二","，","配置","。","标签","link","因为","为了","中","第二步","gazebo","一个","系统","做","是","为","可以","冗余","和","颜色","在","一步","的","添加","渲染","所以","这样","每","主要","得","不同","二步"],"title":"添加Gazebo标签","title_tokens":["标签","添加","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_10","text":"第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。","text_tokens":["传动装置","配置","，","运动","。","仿真","了","理解","电机","一个","给","是","可以","为","joint","第三","三步","的","第三步","传动","要","装置"],"title":"配置传动装置","title_tokens":["传动装置","配置","装置","传动"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_11","text":"第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。","text_tokens":["，","。","控制","小车","那","下","分配","了","gazebo","电机","一个","插件","差速","四步","速度","是","可以","第四步","第四","角度","两个","在","控制器","来","的","就","添加","这样","要","不同","交给","完成"],"title":"添加控制器插件","title_tokens":["插件","添加","控制","控制器"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_12","text":"接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ])","text_tokens":["，","executable","考虑","sure","you","me","where","all","only","join","want","pkg","output","节点","single","neighborhood","load","需要","force","world","os","actions","into","have","pythonlaunchdescriptionsource","includelaunchdescription","的","to","---","到","doesn","description","be","模型","correctly","yaw","。","own","(","ros","enabled","中","spawn",",","'","用到","_",".","-","一个","ament","state","directory","import","sim","by","topic","如何","from","set","{","就","python","make","file","]","py","true","urdf","matter","path","return","run","把"," ","worlds","use","了","robot","y","0.0","if","gazebo","launch","index","really","加载","time","!","our","screen","sources","provided","them","node","<","share","include","generate","#","}","a","learning",")","t","接下","name","entity","spawner","launchdescription","接下来","the","z","package","publisher","val","items","pose","[","def","spwan","功能","get","/","提供","下来",":","=","packages","mbot","change","arguments","we","x"],"title":"构建仿真环境","title_tokens":["环境","仿真","构建"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_13","text":"万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard 注意：虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。","text_tokens":["，","仿真","控制","时刻","第二句","过程","节点","load","基本","需要","硬件","bashrc","0","二句","into","小海龟","的","整个","运行","svga","俱备","。","第二","键盘","：","很多","此时","就是","中","_",".","硬件加速","echo","见证","注意","加速","第一","我们","py","urdf","万事","run"," ","了","虚拟机","机器","gazebo","launch","以上","teleop","海龟",">","keyboard","$","小海","命令","一句","~","时","启动","万事俱备","vgpu10","复杂","有点像","learning","已经","接下","环境","关闭","接下来","twist","不过","export","两句","奇迹","有点","和","/","ros2","虚拟","机器人","下来","比","流程","=","\"","第一句"],"title":"机器人运动仿真","title_tokens":["机器人","仿真","运动","机器"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#ignitiongazebo","text":"随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为Ignition，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/","text_tokens":["humble","，","ignition","变化","。","仿真","更","一代","也","apt","ros","ignitionrobotics","度"," ","都","多","bridge","demos","流畅","新","网站","www","_",".","试一下","org","gazebo","较大","效果","launch","-","camera","大家","技术","信息","不妨","新一代","一下","官方","命名","为","可以","上","ign","官方网站","和","有","/","ros2","$","不断","sudo","在","参考","从","随着","install","rgbd","官方网",":","来","的","迭代","渲染","版本","仿真器","我们","py","真器","平台","进步"],"title":"Ignition：下一代Gazebo","title_tokens":["ignition","一代","下一代","：","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_14","text":"learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["size","version","link","list","geometry","type","publish","diameter","back","libgazebo","left","color","org","important","gray","radius","torque","rgba","base","params","velocityjointinterface","0","source","izz","2","30","3","xmlns","collision","to","reference","vel","axis","rate","reflect","is","wiki","(","and","right","ros","inertia","odometry","3.1415926","so","0.4","find","*","child","controller","_",".","yellow","-","xyz","origin","0.16","0.95","topic","wheel","plugin","used","xml","for","transmission","{","ixy","interface","1.0","separation","true","ixx","trans","urdf","?","0.18","inertial","iyz","1"," ","visual","hardwareinterface","this","cmd","0.001","robot","y","hardware","0.025","in","0.75","gazebo","simpletransmission","length","turngravityoff","0.20","value","m","defining","front","frame",">","footprint","$","xacro","--","!","joint","0.19","macro","colors","rpy","false","drive","<","5","mechanicalreduction","h","include","0.2","}","pi","0.05","box","differential","learning","joints",")","name","filename","the","+","0.06","z","cylinder","20","www","parent","sphere","property","odom","fixed","http","continuous","diff","motor","tf","0.015","actuator","update","command","/","caster","iyy","12","prefix","max","ixz",":","=","\"","mbot","mass","black","matrix","r","acceleration","material","x","blue"],"title":"附录：机器人完整模型","title_tokens":["机器","：","模型","机器人","完整","附录"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/","text":"Rviz：三维可视化显示平台 大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾——Rviz，一款三维可视化显示的神器。 Rviz三维可视化平台 机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。 Rviz介绍 一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。 运行方法 $ ros2 run rviz2 rviz2 彩色相机仿真与可视化 摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。 仿真插件配置 关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 主要配置项如下： 标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 标签：加载摄像头仿真插件 运行仿真环境 模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py 图像数据可视化 $ ros2 run rviz2 rviz2 三维相机仿真与可视化 二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。 仿真插件配置 运行仿真环境 $ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py 点云数据可视化 $ ros2 run rviz2 rviz2 激光雷达仿真与可视化 除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。 仿真插件配置 运行仿真环境 $ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py 点云数据可视化 $ ros2 run rviz2 rviz2 Rviz vs Gazebo 好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下，Gazebo是仿真平台，核心功能是创造数据，我们没有机器人或者传感器，它可以帮我们做一个虚拟的，Rviz是可视化平台，核心功能是显示数据，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。 参考链接 https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":["三维","范围","介绍","如果","对应","雷达","与","嘉宾","官方","0","提高","并且","但","等等","into","可视","通过","具体","除了","传感","？","这幅","等","方便","说明","这些","某些","外部环境","rviz2","so","获取","位置","信息","眼中","巧妇难为无米之炊","显示","如何","臂","手上","开发","很难","这样","分钱","价格比","可贵","项","分辨率","希望","彩色","自带","重量级","哪些","能","、","点云","试试","intel","导航","不","比如","范畴","重量","learning","摄像","运动","name","像头","vs","—","是不是","众多","它","格式","一种","和","ros2","涉及","机器人","这个","关于","mbot","想","只要","出厂","长","用","大大提高","新","过程","熟悉","分析","你","对照","包括","当然","汽车","路径","只有","的","内部","运行","机","stereolabs","周边","畅想","知道","。","ros","计算","就是","开放式","_","工具","camera","一个","给","全都","体感","就","一堆","相信","主要","大大","不到","laser","案例","编码","也","https","价格","二维","一分钱","时候","或者","搞定","qt","问","这里","launch","各种各样","看到","没有","上位","可以","一脸","图像","如下","在","发布","神器","起来","好","已经","图形化","讲","链接","成功","大家","不过","驾驶","功能","坐标","做","是","机械","拍摄","岂","渲染","流程","摄像头","参数","移动机器人","拭目","满意","什么样","以待","类似","了然","libgazebo","代码","再","动机","叫做","数据","插件","load","需要","消息","这","打造","方法","这种","使用","不想","模型","标签","移动","不用","量级","噪音","很多","下","帮","肯定","不是","只是","对","用来","数字","看","几个","拭目以待","核心","不少","所以","可视化","什么","我们","py","基于","255","会用","run","装","玩起","一位","先来","感器","效率","了","gazebo","rviz","github","开放","一款","创造","参考","懵","启动","话题","描述","样","类型","问题","难为","kinect","啥","坐标系","一目了然","能够","效果","话","各种","相机","啦","有","还有","/","从","么","最为","自动","真实","本","常备","图形","，","配置","才","仿真","人","激光雷达","内容","docs","多","激光","type","按照","com","过","软件","层面","rgbd","快速","到","的话","呢","了解","：","外部","试一试","中","出来",".","规划","想不到","颜色","分辨","来","realsense","设计","框架","自主","传感器","过瘾","把"," ","都","设置","机器","强调","不能","一目","世界","混淆","加载","常用","上","$","一句","添加","一些","玩起来","还是","平台","自由","环境","更","一分","非常","理解","usb","www","去","自己","命名","会","辨率","有没有","提供","两个","虚拟","巧妇",":","各样","场景"],"title":"**Rviz：三维可视化显示平台**","title_tokens":["rviz","*","三维","可视","可视化","显示","：","平台"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz","text":"大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾——Rviz，一款三维可视化显示的神器。","text_tokens":["，","摄像","三维","呢","。","讲","量级","问题","ros","一位","什么样","介绍"," ","像头","了","中","—","机器","能够","重量级","一个","大家","世界","看到","眼中","没有","过","这","是","嘉宾","rviz","显示","有没有","图像","涉及","拍摄","如何","一款","机器人","神器","的","就","到","可视","可视化","什么","我们","？","摄像头","畅想","范畴","重量","本"],"title":"Rviz：三维可视化显示平台","title_tokens":["rviz","三维","可视化","可视","显示","：","平台"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_1","text":"机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。","text_tokens":["，","三维","才","移动机器人","长","人","激光雷达","大大提高","如果","内容","激光","类似","了然","雷达","再","动机","过程","数据","分析","你","需要","当然","软件","0","路径","层面","提高","但","等等","的","内部","快速","到","通过","可视","传感","？","周边","模型","知道","这幅","这些","。","移动","很多","计算","就是","中","位置","出来","规划","肯定","给","信息","只是","全都","用来","数字","臂","颜色","开发","看","一堆","就","很难","所以","这样","可视化","什么","我们","设计","大大","自主","传感器","255","把"," ","都","感器","效率","希望","搞定","机器","问","一目","这里","各种各样","看到","哪些","可以","rviz","一脸","图像","、","在","一款","懵","导航","不","比如","描述","摄像","样","运动","环境","像头","啥","坐标系","理解","一目了然","众多","效果","去","自己","功能","坐标","各种","做","相机","是","机械","和","还有","岂","机器人","从","么","渲染","各样","摄像头","场景"],"title":"Rviz三维可视化平台","title_tokens":["rviz","三维","可视化","可视","平台"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_2","text":"一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。","text_tokens":["项","，","。","出厂","图形化","更","ros","满意","某些","也"," ","很多","如果","对应","多","了","中","或者","新","开放式","机器","qt","工具","自带","数据","效果","一个","话","按照","它","插件","看到","自己","功能","想不到","没有","消息","做","上位","是","官方","rviz","可以","常用","对","显示","有","打造","开放","发布","机器人","在","开发","这个","一句","只有","核心","的","就","添加","可视","可视化","图形","不","我们","框架","机","不到","平台","话题","基于","想","只要","方便","说明"],"title":"Rviz介绍","title_tokens":["rviz","介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_1","text":"$ ros2 run rviz2 rviz2","text_tokens":["run","ros2","$"," ","rviz2"],"title":"运行方法","title_tokens":["运行","方法"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_2","text":"摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。","text_tokens":["，","摄像","。","装","先来","感器","像头","了","机器","肯定","给","是","常用","一种","上","机器人","的","最为","我们","传感","摄像头","传感器"],"title":"彩色相机仿真与可视化","title_tokens":["彩色","可视","可视化","仿真","与","相机"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_3","text":"关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 主要配置项如下： 标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 标签：加载摄像头仿真插件","text_tokens":["项","描述","，","摄像","。","配置","范围","编码","标签","仿真","name","类型","：","ros","噪音","介绍"," ","都","对应","感器","type","设置","像头","so","分辨率","libgazebo","代码","_",".","gazebo","叫做","camera","对照","大家","插件","给","格式","需要","加载","命名","辨率","图像","方法","如下","提供","使用","这个","分辨","关于","的","主要","我们","传感","摄像头","传感器","模型","参数","等","自由"],"title":"仿真插件配置","title_tokens":["仿真","配置","插件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_4","text":"模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py","text_tokens":["已经","配置","，","摄像","。","仿真","拭目","把"," ","成功","以待","中","像头","出来","_","不能",".","gazebo","launch","camera","看到","信息","load","能","rviz","啦","图像","并且","ros2","$","在","into","拭目以待","mbot","好","我们","py","摄像头","模型","learning"],"title":"运行仿真环境","title_tokens":["环境","运行","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_5","text":"$ ros2 run rviz2 rviz2","text_tokens":["run","ros2","$"," ","rviz2"],"title":"图像数据可视化","title_tokens":["图像","可视化","可视","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_6","text":"二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。","text_tokens":["，","摄像","三维","。","环境","仿真","不用","玩起","也","一分","价格","外部","二维","外部环境","一分钱","感器","kinect","像头","或者","获取","usb","数据","不过","相机","可以","常用","点云","这种","试试","intel","体感","的","realsense","不少","就","起来","通过","分钱","不","我们","价格比","玩起来","传感","不想","比如","摄像头","传感器","过瘾","可贵","想"],"title":"三维相机仿真与可视化","title_tokens":["三维","可视","可视化","仿真","与","相机"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_7","text":"","text_tokens":[],"title":"仿真插件配置","title_tokens":["仿真","配置","插件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_8","text":"$ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py","text_tokens":["_","mbot",".","ros2","gazebo","py","$","launch"," ","load","into","learning","rgbd"],"title":"运行仿真环境","title_tokens":["环境","运行","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_9","text":"$ ros2 run rviz2 rviz2","text_tokens":["run","ros2","$"," ","rviz2"],"title":"点云数据可视化","title_tokens":["可视化","可视","数据","点云"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_10","text":"除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。","text_tokens":["，","摄像","三维","。","移动机器人","移动","激光雷达","也","很多","试一试","激光","感器","像头","雷达","动机","机器","驾驶","包括","相机","是","和","汽车","机器人","来","的","我们","除了","传感","自动","摄像头","传感器","常备"],"title":"激光雷达仿真与可视化","title_tokens":["雷达","可视","可视化","仿真","激光雷达","激光","与"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_11","text":"","text_tokens":[],"title":"仿真插件配置","title_tokens":["仿真","配置","插件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_12","text":"$ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py","text_tokens":["_","mbot",".","ros2","gazebo","py","$","launch"," ","load","into","laser","learning"],"title":"运行仿真环境","title_tokens":["环境","运行","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_13","text":"$ ros2 run rviz2 rviz2","text_tokens":["run","ros2","$"," ","rviz2"],"title":"点云数据可视化","title_tokens":["可视化","可视","数据","点云"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz-vs-gazebo","text":"好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下，Gazebo是仿真平台，核心功能是创造数据，我们没有机器人或者传感器，它可以帮我们做一个虚拟的，Rviz是可视化平台，核心功能是显示数据，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。","text_tokens":["，","仿真","用","如果","再","熟悉","数据","这","软件","方法","使用","的","到","通过","可视","具体","的话","传感","。","了解","很多","下","帮","一个","不是","信息","巧妇难为无米之炊","对","显示","手上","几个","核心","来","就","相信","所以","可视化","我们","不到","传感器","案例","会用","也"," ","时候","感器","了","或者","机器","强调","gazebo","这里","没有","混淆","rviz","可以","常用","在","创造","一些","好","启动","还是","平台","已经","环境","讲","难为","非常","是不是","大家","自己","它","不过","功能","做","是","会","啦","和","有","两个","虚拟","巧妇","机器人","流程","真实"],"title":"Rviz vs Gazebo","title_tokens":["vs","rviz","gazebo"," "]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_14","text":"https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":["rviz","github","www",".","/","ros2","https","stereolabs"," ","docs","com",":","rviz2"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/","text":"RQT：模块化可视化工具 ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具——rqt。 rqt介绍 正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，接下来，大家就可以跟随我的思路，我们一起来试一试。 日志显示 图像显示 接口控制 数据曲线 数据包管理 节点可视化 参考资料 https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":["，","控制","实现","而","介绍","docs","模块","类似","org","数据","节点","需要","tutorials","使用","的","可视","通过","参考资料","的话","具体","接口","觉得","rqt","en","强大","很","humble","。","简单","安装","：","ros","一样","资料","很多","下","此时","进行","试一试","中","里边","用到",".","工具","-","一个","思路","about","显示","数据包","开发","install","难免会","来","就","前","指令","这样","可视化","界面","我们","有些","我","基于","可能","也","https"," ","都","然后","日志","了","qt","加载","rviz","可以","图像","正如","$","console","sudo","在","参考","命令","一句","起来","一些","启动","比如","已经","管理","摄像","接下","更","麻烦","html","apt","接下来","concepts","像头","—","跟随","另外","大家","不过","它","小","功能","有点","会","命名","是","一种","和","曲线","/","提供","只","每个","下来","这个",":","模块化","难免","摄像头","操作","using","一","场景"],"title":"**RQT：模块化可视化工具**","title_tokens":["*","模块化","可视","可视化","工具","：","rqt","模块"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt","text":"ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具——rqt。","text_tokens":["已经","，","摄像","简单","。","更","麻烦","ros"," ","下","此时","模块","中","了","像头","—","用到","工具","一个","另外","不过","需要","功能","有点","会","rviz","一种","显示","图像","提供","只","使用","难免会","的","就","模块化","一些","可视","可视化","我们","的话","比如","有些","摄像头","难免","觉得","操作","rqt","场景","强大","很","可能"],"title":"RQT：模块化可视化工具","title_tokens":["模块化","可视","可视化","工具","：","rqt","模块"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt_1","text":"正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，接下来，大家就可以跟随我的思路，我们一起来试一试。","text_tokens":["humble","，","。","接下","安装","也","而","一样","apt","ros"," ","进行","很多","都","实现","接下来","然后","模块","试一试","了","类似","跟随","里边","qt","工具","-","一个","大家","思路","它","小","需要","功能","加载","是","命名","rviz","可以","和","一","正如","$","sudo","在","每个","开发","下来","命令","使用","这个","一句","install","来","的","前","指令","这样","就","可视","可视化","通过","界面","起来","我们","启动","具体","我","基于","rqt"],"title":"rqt介绍","title_tokens":["rqt","介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_1","text":"","text_tokens":[],"title":"日志显示","title_tokens":["日志","显示"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_2","text":"","text_tokens":[],"title":"图像显示","title_tokens":["图像","显示"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_3","text":"","text_tokens":[],"title":"接口控制","title_tokens":["接口","控制"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_4","text":"","text_tokens":[],"title":"数据曲线","title_tokens":["曲线","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_5","text":"","text_tokens":[],"title":"数据包管理","title_tokens":["数据包","数据","管理"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_6","text":"","text_tokens":[],"title":"节点可视化","title_tokens":["可视化","节点","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_7","text":"https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":["humble","tutorials",".","org","/","html","console","ros","about","https","-","using"," ","docs","rqt","en","concepts",":"],"title":"参考资料","title_tokens":["参考","资料","参考资料"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/","text":"资源汇总 常用框架 自主导航 比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/ 自动驾驶 自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/ 路径规划 此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/ 机器人学 ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。 视频课程 斯坦福大学公开课 —— 机器人学 台大机器人学之运动学 Self-Driving Cars with ROS2 & Autoware 古月学院 常用链接 ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":["，","移动机器人","控制","算法","实现","工程师","documentation","如果","内容","感知","gitlab","多","除此之外","对应","任何","模块","学院","docs","classic","工程","代码","理论知识","动机","org","斯坦福大学","一本","io","基本","com","这","结合","autowarefoundation","导航系统","路径","推荐","碰撞","除此","2","moveit","使用","选择","书籍","学习","的","快速","roscon","人学","得","福大","具备","技能","相关","en","等","丰富","guyuehome","humble","理论","。","这些","wiki","此外","移动","：","修炼","ros","阅读","很多","进行","知识","本书","中",".","gazebosim","规划","工具","cars","-","一个","完整","之","cn","著作","对","auto","汇总","臂","视觉","导论","大学","行业","开发","几个","检测","至于","热门","就","公开课","框架","我们","自主","资源","课程","经典","实操","机器人学","autowareauto","&","》","开课","也","https","robots"," ","都","《","人手","with","了","机器","被","社区","视频","gazebo","找到","index","基本功能","这套","内功","可以","常用","上","github","典型","driving","之外","、","重在","包含","在","参考","基本功","居","经典著作","导航","不","仔细","好","当今","ubuntu","要","比如","即便","兴趣","应用","每一","斯坦福","碰撞检测","运动","之一","感兴","称为","更","链接","html","非常","感兴趣","必备","—","分拣","www","公开","http","大家","自己","驾驶","功能","系统","各种","是","会","商业化","机械","一种","情况","和","有","台大","/","ros2","还有","中文","self","提供","机器人","这个",":","著名","商业","版本","最为","运动学","自身","古月","自动","autoware","仔细阅读","navigation"],"title":"**资源汇总**","title_tokens":["资源","*","汇总"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_1","text":"","text_tokens":[],"title":"资源汇总","title_tokens":["资源","汇总"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_2","text":"","text_tokens":[],"title":"常用框架","title_tokens":["框架","常用"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_3","text":"比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/","text_tokens":["，","。","移动机器人","移动","链接","：","算法","实现","也","https","ros"," ","都","如果","进行","内容","任何","了","中","代码","机器","动机",".","org","大家","自己","完整","基本","功能","系统","这套","各种","基本功能","会","可以","上","和","导航系统","/","ros2","提供","在","机器人","开发","参考","使用","这个",":","基本功","的","快速","导航","不","框架","好","我们","要","比如","具备","自主","即便","应用","相关","navigation"],"title":"自主导航","title_tokens":["自主","导航"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_4","text":"自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/","text_tokens":["，","。","autowareauto","之一","感兴","控制","链接","：","也","ros","实现","https"," ","感知","非常","很多","如果","感兴趣","gitlab","模块","中","了","—","机器","www",".","社区","规划","org","一个","驾驶","大家","io","功能","系统","这","是","可以","商业化","对","一种","autowarefoundation","典型","有","和","auto","/","、","包含","在","行业","机器人","参考","几个","这个",":","热门","的","著名","商业","最为","框架","当今","自动","autoware","兴趣","应用","等","丰富"],"title":"自动驾驶","title_tokens":["驾驶","自动"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_5","text":"此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/","text_tokens":["，","碰撞检测","运动","。","此外","更","链接","也","ros","https"," ","都","非常","内容","多","中","分拣",".","org","规划","找到","大家","功能","这","是","可以","机械","还有","/","、","臂","碰撞","视觉","在","moveit","检测","使用","这个",":","的","框架","经典","相关","等"],"title":"路径规划","title_tokens":["路径","规划"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_6","text":"ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。","text_tokens":["每一","理论","，","。","机器人学","这些","称为","》","修炼","工程师","ros","阅读"," ","人手","知识","《","必备","除此之外","都","本书","对应","工程","理论知识","机器","被","工具","一本","大家","结合","是","内功","著作","可以","情况","有","推荐","之外","重在","中文","导论","除此","机器人","开发","选择","至于","学习","书籍","的","就","版本","经典著作","人学","仔细","自身","得","比如","实操","经典","技能","相关","仔细阅读"],"title":"机器人学","title_tokens":["机器人","机器人学","机器","人学"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_7","text":"斯坦福大学公开课 —— 机器人学 台大机器人学之运动学 Self-Driving Cars with ROS2 & Autoware 古月学院","text_tokens":["斯坦福","机器人学","运动","&","开课"," ","with","学院","—","机器","斯坦福大学","公开","cars","-","之","台大","driving","ros2","self","大学","机器人","人学","公开课","运动学","古月","autoware","福大"],"title":"视频课程","title_tokens":["课程","视频"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_8","text":"ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":["humble","wiki","：","html","ros","https","documentation","robots"," ","docs","classic","www",".","org","gazebosim","gazebo","http","index","cn","com","github","/","ros2","2",":","居","roscon","古月","ubuntu","en","guyuehome"],"title":"常用链接","title_tokens":["常用","链接"]}]}