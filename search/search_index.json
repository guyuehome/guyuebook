{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"引言 机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的 电气时代 。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的 数字时代 ，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发， 智能机器人时代 正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。 教程链接汇总 课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/90 博客泡圈： https://www.guyuehome.com/","text_tokens":["服务","开发","感器","不断","智能化","重要","年","更加","多","汽车","于","控制","我们","依然","伺服","这","等","计算机","最为","驱动","工业生产","课程","工业","关注","更","七八","发展","前夜","动力","动作","提出","guyuehome","操作系统","视觉","—","。","状","操控","而言","自主","业生","设备","不过","过程","三个","四足","伺服电机","局部","是","robot","由示","技术","俗称","工厂","生产","减速机","计算","劳动","后","拉开序幕","家庭","也","链接","七八十年","逐渐","只能","十年","人类","图文","汇总","释放","八十年","tutorials","90","环境","circledetail","主角","机器","七八十","成为","主要",".","类型","井喷","思考","横跨","年前","电机","驱动器","驾驶","机器人","快速","不断丰富","随着","软件","博客","gitee","爆发","出现","ros2","之一","呈","丰富","拉开","operating","电气","完全","载体","帮助","引言","必将","热点","的","视频","class","太","就是","智能","要求","了","和","对","www","有限","序幕","操作","之后","正式","按照","/","大","_","2000","应用","劳动力","但是","算机","时期","ai","最佳","21","八十","并","执行","github","检测","命令","https","减速","：","狗","传感器"," ","问答","此时","id","system","感知","这是","泡圈","数字","系统","经历","传感","控制器","2015","送餐",":","时代","教程","仿生","高","com","bubble","教器","没有","agv","人工智能","自动","缺少","，","层面","book","人工","源码","、"],"title":"引言","title_tokens":["引言"]},{"location":"#_1","text":"机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的 电气时代 。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的 数字时代 ，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发， 智能机器人时代 正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。","text_tokens":["服务","开发","感器","不断","智能化","重要","年","更加","多","汽车","于","控制","我们","依然","伺服","这","等","计算机","最为","驱动","工业生产","课程","工业","关注","更","七八","发展","前夜","动力","动作","提出","操作系统","视觉","—","。","状","操控","而言","自主","业生","设备","不过","过程","三个","四足","伺服电机","局部","是","robot","由示","技术","俗称","工厂","生产","减速机","计算","劳动","后","拉开序幕","家庭","也","七八十年","逐渐","只能","十年","人类","释放","八十年","环境","主角","机器","七八十","成为","主要","类型","井喷","思考","横跨","年前","电机","驱动器","驾驶","机器人","快速","不断丰富","随着","软件","爆发","出现","之一","呈","丰富","拉开","operating","电气","完全","载体","帮助","必将","热点","的","太","就是","智能","要求","了","和","对","有限","序幕","操作","之后","正式","按照","大","2000","应用","劳动力","但是","算机","时期","ai","最佳","八十","并","执行","检测","命令","减速","狗","传感器"," ","此时","system","感知","这是","数字","系统","经历","传感","控制器","2015","送餐","时代","仿生","高","教器","没有","agv","人工智能","自动","缺少","，","层面","人工","、"],"title":"引言","title_tokens":["引言"]},{"location":"#_2","text":"课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/90 博客泡圈： https://www.guyuehome.com/","text_tokens":["21","博客","gitee","github","ros2","https","："," ","问答","id","泡圈",":","视频","课程","class","教程","图文","com","bubble","tutorials","90","www","guyuehome","circledetail","/","_","book",".","源码"],"title":"教程链接汇总","title_tokens":["链接","汇总","教程"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["开发","作品","法律责任","面向","brand","复制","创建","高质","年","合作","被","人才培养","拥有","内容","为","所有","许可","提供","》","等","累积","学习者","抄录","课程","限于","万人","但","用户","guyuehome","追究其","交流学习","平台","。","120","联系","致力于","包括","仅限","明者","居","有限公司","是","不","人才","法律","面向未来","众多","万字","培养","对本","其它","公司","上述","（","知名","未来","构建","未经","修改","ros","及","校企","一体","创新","企业","追究","机器","高质量","模式","或",".","精锋","声明","与","学习","+","机器人","究其","生态","）","责任","地区","课件","单位","不得","如需","销售","古月","镜像","视频","出版","的","个人","版权","小时","赋能","集","《","@","和","www","有限","社区","2011","实践","书面","交流","有权","ai","授权","至今","科技","畅销","学","致力","微控","高校","1000","违反"," ","优质","通过","华语","本","超过","武汉","传播","图书","声明者","任何","请","建立","合法","线上","使用","com","质量","上","均","产品","努力","，","将","网站","依法","进行","源码","、","捆绑"],"title":"关于我们","title_tokens":["关于","我们"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["开发","面向","创建","高质","年","合作","人才培养","内容","为","提供","》","等","累积","学习者","课程","万人","用户","guyuehome","交流学习","平台","。","120","致力于","居","是","人才","面向未来","众多","万字","培养","（","知名","未来","构建","ros","及","校企","一体","创新","企业","机器","高质量","模式",".","与","学习","+","机器人","生态","）","地区","古月","视频","出版","的","小时","赋能","集","《","www","社区","2011","实践","交流","ai","至今","畅销","致力","高校","1000"," ","优质","通过","华语","超过","图书","建立","线上","com","质量","努力","，","、"],"title":"学机器人，上古月居","title_tokens":["古月","上","机器人","，","机器","居","学"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["作品","法律责任","brand","复制","被","拥有","为","所有","许可","等","抄录","课程","限于","但","用户","guyuehome","追究其","。","联系","包括","仅限","明者","居","有限公司","不","法律","对本","其它","公司","上述","未经","修改","追究","或",".","精锋","声明","与","学习","究其","责任","课件","单位","不得","如需","销售","古月","镜像","视频","的","个人","版权","@","和","有限","书面","有权","授权","科技","微控","违反"," ","本","武汉","传播","声明者","任何","请","合法","使用","com","均","产品","，","将","网站","依法","进行","源码","、","捆绑"],"title":"版权声明","title_tokens":["声明","版权"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/","text":"ROS/ROS2是什么 智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。 ROS的诞生 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人—— PR2 ，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS的发展 ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称 ROSCon ，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。 ROS的特点 ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。 参考资料 关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["服务","回答","毛巾","百科","尝试","几年","不断","以叠","重要","迭代","推动","体感","举办","百科全书","百万","80","绝对","内容","软件系统","怀揣","神秘","；","机械","所有","斯坦福大学","汽车","掀起","深知","我们","衣服","课程","限于","万人","一系","资金","上去","访问","一款","同时","情况","介于","跑","一大步","元素","动机","这里","平台","带领","推荐","而言","发布","日常","巨大","月","大会","很快","商业","有","然后","15","conference","之王","中","技术","版","解决","资本","做饭","不断更新","价格便宜","全人类","核心","时候","要","神兵","“","大部","得到","肩负","两个","参考","第一次","google","100","工程","别人","框架","齐聚一堂","真正","加","好","一下","总而言之","成为","远","主要","缩短","托管","早期","横跨","改为","基本上","就","ubuntu","资源","学习","生态系","软件","限性","造","新鲜事","模块化","一大笔钱","一群","问题","turtlebot","活动","参考资料","2017","简称","迅猛","大家","所学","采用","多项","2022","论坛","视频","的","想法","不乏","性能","willow","为了","第一个","个人","单独","水下","后续","干","总称","宽松","利器","看到","出来","人形","轮子","头发","正式","大","全","张图","应用","roscon","面纱","在","世界","设计","时间轴","助推","历经","还有","而","特点","方式","各种","各种各样","得以","两年","这一波","150","速度","无疑","下","问答","方向","个","注意","研究","次数","便宜","传感","做出","时代","每年","其他","personal","四大","版本","部件","一大笔","发表","又","工程师","向前","多万","ros1","诞生","跨平台","项目","关键","你","开始","增长速度","认识一下","而且","涉及","精致","同学","嘉宾","电脑","index","万左右","了解","起","越来越","基本","量级","可能","于","20","”","做","率","根据","为例","虽然","还","不仅","复杂","友好","更","有人","强悍","讨论","什么","一家","整合","操作系统","。","投了","garage","游戏","最高","肯定","重量级","让","加上","来看","跟随","过程","居","普及","之上","这位","是","甚至","几百","一步","原型","五年","作为","向","却","全球化","来到","起点","大笔","加快","把","无聊","代表","媒体","分享","左右","剪头发","上市","年底","大学","进步","而生","该","资料","台球","机器","光靠",".","更为","开发工具","名称","现在","大部分","标志","推出","物体","既然","提问","会","风险","踏上","各项","对于","只","operating","组成","c","事情","25","不想","身影","或者","笔记","起来","高效","棒","之内","目标","团队","入门教程","特性","相关","数据库","基于","维基百","了","a","对","很多","这款","多媒体","/","嵌入","数据","熟悉","许可证","充足","终于","普遍","包","时间","至今","此","提取","每","并","来","类似","前","选择","斯坦福","集合","代码","windows","不多","快","传感器"," ","同理","维基","5","一大","本","大有可为","效率","此后","给出","经历","做成","详细","任何","全球","教程","最后","代","线上","臂","入门","使用","复合","以","掌握","没有","有志","近几年","产品","讲解","xbox","努力","层面","欢迎","将","原因","新","源码","说明","开发","那","稳定","之旅","阵地","从","来讲","被","答案","2","熨烫","广泛","简单","家","不同","pr2","当初","巨人","以上","许可","离不开","提供","陪","标准","学术","自身","等","有没有","应用软件","长期","啦","一堂","这些","收拾","实现","正在","到","统统","系列","2010","尽量","正式版","围绕","万","步伐","不到","—","直接","120","重新","discourse","来自","进入","零部件","笔记本电脑","真的","不","robot","方法","生态系统","人才","40","搜索","算是","地域","主阵地","2007","原本","差不多","扩展","迎来","也","公司","逐渐","所有人","移动","月底","非常","可为","ros","提高","挑战","玩耍","条","活跃度","高度","笔记本","只要","风险投资","机制","从中","已有","体系","成本","全人","直到","如何","多媒体系统","模块","统计","找到","通常","领域","intel","同样","机器人","繁荣","快速","生态","四项","电路","随着","疫情","第一","ros2","亚马","已经","场景","受限于","给","泡泡","正如","接下","沉淀","完全","存储","使命","无论","局限性","爆款","知识","分钟","一系列","没想到","移动机器人","之","官方","本身","据库","所以","就是","上边","不是","案例","社区","其中","几个","变为","但是","记录","总体","250","全书","比如","下载","底盘","野蛮","柔性","居高不下","却步","answers","都","浏览","github","绝大部分","成果","功能","此时","system","具备","成功","系统","2015","几乎","容易","维基百科","看中","确定","款","近两年","虽好","频繁","还是","这样","如果","上","叠","因为","初期","一套","进行","年轻","一切","重量","感器","亚马逊","程度","苹果","微软","智能化","一起","通信","度","年","浏览量","wiki","活跃","为","做到","多","一个","着","控制","说干就干","这","无论是","一届","针对","每个","最为","手机","工具","增长","工业","更好","查看","发展","全新","用户","成熟","认识","青年","动力","提出","这群","处理","接下来","适用","能够","望而却步","用于","索引","开源","聊天","木头","扫地","采购","才","呢","明智","大大","其次","自己","想到","可以","一次","复用","他们","投资","联合","下来","一些","上图","趋势","部分","实验","实验室","低","洗衣","只想","人类","万万","不要","智慧","由","肩膀","国家","一定","站","很","大量","打","人数","支持","创始","长远","world","回到","页面","图中","更新","进化","关于","美妙","外观","局限","圈","配合","零","b","时至今日","做法","帮助","人","向前走","专业","古月","年轻人","其实","研发","开发者","不开","2012","智能","kinect","和","受限","推进","制造","促使","操作","2011","这个","没想","整理","各样","效果","游戏机","后期","当时","一样","几百万","希望","肩负着","大步","最佳","浪潮","用","因","结晶","packages","福大","多年","org","：","完成","今日","linux","通过","创意","绝大","新鲜","轰动","这是","等等","为什么","清晰","访问量","不下","嵌入式","乐意","独立","一段","？","新增","价格","首先","商业化","同一","humble","同年","叫做","板块","图","2014","引擎","曲线","暴露","排名","，","网站","越来","革命","、"],"title":"ROS和ROS2是什么","title_tokens":["什么","和","ros","是","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#rosros2","text":"智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。","text_tokens":["开发","那","重量","重量级","巨大","就","智能化","机器人","进化","一起","认识一下","嘉宾","呢","是","这位","ros2","中","场景","神秘","量级","掀起"," ","接下","我们","方向","大家","这","向","下来","系统","的","时代","？","ros","正在","带领","挑战","智能","什么","认识","了","又","对","提出","高度","而生","操作","操作系统","接下来","，","一下","机器","全","。","应用","面纱"],"title":"ROS/ROS2是什么","title_tokens":["什么","/","ros","是","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人—— PR2 ，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。","text_tokens":["一切","开发","那","服务","你","苹果","毛巾","尝试","一起","以叠","重要","涉及","年","而且","精致","推动","答案","2","熨烫","软件系统","家","pr2","越来越","多","机械","一个","斯坦福大学","所有","可能","陪","深知","我们","标准","说干就干","学术","做","这","等","为例","虽然","针对","还","有没有","复杂","衣服","应用软件","手机","一系","资金","收拾","更","一款","实现","有人","强悍","系列","什么","青年","不到","一大步","操作系统","处理","平台","。","—","用于","肯定","聊天","木头","很快","零部件","有","越来","真的","呢","是","甚至","不","才","robot","中","技术","自己","可以","做饭","原型","一次","2007","他们","联合","一些","却","也","时候","要","所有人","实验","实验室","低","无聊","非常","洗衣","分享","ros","第一次","玩耍","剪头发","100","别人","框架","大学","条","而生","只要","很","从中","台球","机器","打","光靠","成为","如何","找到","横跨","就","同样","机器人","图中","既然","物体","电路","软件","外观","第一","已经","圈","对于","只","一群","问题","组成","事情","大家","不想","帮助","人","向前走","专业","或者","分钟","一系列","的","高效","想法","之内","性能","团队","个人","所以","就是","智能","干","基于","了","和","看到","不是","出来","很多","这款","操作","头发","这个","其中","整理","应用","后期","但是","充足","在","当时","设计","大步","用","柔性","因","都","并","得以","类似","斯坦福","福大","功能","：","完成"," ","此时","5","个","轰动","一大","为什么","研究","效率","系统","给出","做出","独立","容易","？","款","最后","代","personal","同一","这样","部件","没有","上","有志","如果","图","叠","初期","一套","因为","，","层面","向前","诞生","、"],"title":"ROS的诞生","title_tokens":["诞生","ros","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_1","text":"ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称 ROSCon ，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。","text_tokens":["关键","开发","稳定","感器","开始","亚马逊","服务","微软","几年","从","重要","年","被","推动","体感","举办","电脑","百万","迭代","了解","起","为","pr2","越来越","当初","多","所有","斯坦福大学","一个","着","于","控制","我们","做","这","等","一届","每个","不仅","长期","限于","一堂","增长","更","一款","到","发展","全新","成熟","2010","一家","正式版","提出","步伐","这群","介于","操作系统","适用","这里","—","。","能够","直接","望而却步","投了","garage","游戏","来自","开源","发布","让","加上","扫地","跟随","大会","进入","很快","过程","商业","普及","笔记本电脑","越来","之上","conference","robot","是","大大","中","几百","版","资本","自己","想到","可以","原型","五年","2007","原本","他们","投资","价格便宜","起点","也","公司","部分","迎来","逐渐","大笔","加快","月底","把","分享","大部","只想","ros","万万","肩负","年底","大学","齐聚一堂","真正","笔记本","风险投资","该","机器","成本","成为","直到","支持","创始","名称","早期","现在","world","大部分","改为","标志","就","intel","机器人","ubuntu","推出","快速","回到","随着","软件","疫情","限性","亚马","ros2","会","局限","第一","圈","已经","风险","受限于","给","一大笔钱","turtlebot","问题","operating","2017","简称","使命","采用","身影","局限性","人","2022","爆款","年轻人","笔记","没想到","的","不乏","第一个","willow","为了","开发者","团队","官方","个人","2012","单独","所以","kinect","了","受限","和","出来","操作","2011","正式","这个","没想","其中","大","各样","应用","游戏机","后期","但是","变为","roscon","熟悉","在","一样","几百万","时间轴","设计","肩负着","助推","终于","历经","底盘","野蛮","而","时间","居高不下","却步","提取","各种","每","各种各样","类似","两年","前","绝大部分","斯坦福","福大","多年","功能","传感器"," ","下","system","5","绝大","一大","注意","这是","本","成功","不下","便宜","此后","系统","传感","经历","2015","每年","时代","看中","确定","价格","款","全球","近两年","虽好","线上","教程","使用","同年","humble","版本","叫做","一大笔","因为","2014","讲解","xbox","暴露","，","原因","进行","诞生","年轻","项目","、"],"title":"ROS的发展","title_tokens":["ros","发展","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_2","text":"ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["开发","那","从","一起","来讲","通信","智能化","被","很多","广泛","简单","怀揣","家","做到","跨平台","巨人","；","多","机械","汽车","一个","许可","着","越来越","标准","我们","”","做","率","自身","这","无论是","还","工具","友好","工业","这些","上去","更","实现","到","发展","统统","尽量","一家","同时","围绕","跑","整合","动机","这里","平台","。","直接","用于","重新","开源","采购","商业","有","明智","是","中","生态系统","人才","技术","一步","自己","可以","复用","他们","全球化","下来","也","公司","核心","部分","移动","全人类","代表","把","非常","媒体","分享","“","人类","ros","不要","提高","智慧","由","对","上市","别人","肩膀","进步","站","机制","已有","体系","机器","全人","成为","远","多媒体系统","模块","开发工具","缩短","支持","长远","通常","领域","就","繁荣","机器人","快速","生态","生态系","软件","ros2","会","已经","造","模块化","零","给","正如","b","沉淀","组成","时至今日","做法","c","大家","完全","无论","身影","多项","向前走","之","移动机器人","的","目标","水下","本身","就是","智能","总称","宽松","特性","看到","和","a","不是","多媒体","了","人形","促使","社区","轮子","制造","推进","案例","这个","嵌入","各样","应用","许可证","在","设计","比如","普遍","时间","特点","至今","此","各种","各种各样","都","并","来","结晶","集合","成果","windows","功能","："," ","今日","同理","linux","创意","具备","嵌入式","做成","系统","新增","全球","臂","最后","商业化","复合","还是","使用","四大","这样","以","上","产品","引擎","，","向前","将","ros1","越来","新","、"],"title":"ROS的特点","title_tokens":["特点","ros","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_3","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。","text_tokens":["开发","回答","你","程度","百科","增长速度","几年","从","度","重要","浏览量","万左右","index","80","绝对","wiki","活跃","不同","越来越","；","多","以上","一个","基本","20","我们","这","根据","等","每个","最为","增长","万人","这些","访问","正在","查看","到","讨论","发展","用户","什么","动力","情况","提出","万","整合","元素","这里","。","discourse","最高","索引","而言","发布","日常","来看","月","有","15","呢","是","不","中","40","算是","地域","可以","作为","趋势","差不多","上图","也","部分","核心","神兵","代表","非常","左右","大部","得到","可为","ros","两个","参考","国家","活跃度","加","很","机器","总而言之","成为","人数",".","更为","统计","现在","大部分","页面","基本上","资源","就","机器人","关于","学习","快速","四项","革命","会","已经","新鲜事","各项","给","活动","问题","迅猛","25","大家","存储","人","其实","论坛","起来","的","棒","研发","开发者","据库","就是","相关","数据库","上边","利器","维基百","了","和","看到","很多","社区","大","几个","其中","数据","应用","张图","记录","在","希望","总体","250","比如","助推","下载","包","最佳","方式","浪潮","answers","各种","都","浏览","每","这一波","选择","绝大部分","150","packages","速度","不多","org","：","功能","无疑","快","问答"," ","维基","通过","新鲜","清晰","等等","这是","绝大","次数","大有可为","访问量","本","乐意","？","维基百科","任何","全球","教程","其他","频繁","使用","发表","近几年","上","如果","曲线","排名","，","多万","网站","越来","新","源码","说明","、"],"title":"ROS的社区","title_tokens":["ros","社区","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#_1","text":"关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["开发","你","开始","之旅","阵地","百科","不断","从","一起","重要","同学","百科全书","内容","所有","一个","离不开","提供","我们","这","还","最为","课程","啦","工具","万人","更好","这里","—","。","120","推荐","开源","居","有","然后","之王","是","方法","其次","中","技术","解决","搜索","主阵地","可以","不断更新","作为","来到","扩展","也","部分","要","分享","大部","ros","参考","google","工程","一定","资料","大量","好","机器","成为","主要","托管","找到","大部分","学习","美妙","更新","机器人","关于","提问","ros2","会","踏上","配合","泡泡","参考资料","所学","问题","大家","古月","知识","视频","的","入门教程","不开","后续","和","社区","这个","几个","效果","在","世界","全书","还有","都","github","绝大部分","代码"," ","绝大","本","一段","几乎","详细","首先","教程","最后","入门","使用","工程师","掌握","板块","努力","，","欢迎","将","网站","项目"],"title":"参考资料","title_tokens":["参考资料","资料","参考"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/","text":"ROS2对比ROS1 在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。 ROS1的局限性 首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。 全新的ROS2 ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。 ROS2 vs ROS1 系统架构 在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。 DDS通信 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。 核心概念 ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。 编码方式 再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。 命令行 最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随教程，你就会慢慢理解这些特性。","text_tokens":["rostopic","服务","符合","一团","不断","自家","重要","对系统","体现","百万","二种","相比","诟病","诸多","怀揣","软件系统","；","突然","汽车","所有","常","内部","颠覆","我们","共享内存","考虑","存在","看","开发成本","驱动","一本","调试","课程","写","受制于","通信接口","道坎","一款","初次","可选项","同时","discovery","两者","这里","平台","千差万别","程序","带领","批量生产","由于","而言","middleware","发布","巨大","设备","总之","商业","间层","有","然后","可移植性","担忧","中","rtos","1ms","解决","编码方式","细节","具体","暂且","计算","厂家","一团乱麻","家庭","核心","要","（","时候","布式","改","之前","wifi","完","大部","修改","接收","不断涌现","两个","调用","工程","框架","企业","真正","时","面向对象","好","一下","或","主要","项目管理","真实","小伙","与","消费","学习","就","资源","实时","之间","软件","限性","出现","）","多个","标准化","语言","它","android","问题","入侵","会成","工作站","完整","简称","大家","进程","一代","完整性","fastrtps","保留","的","第一个","为了","性能","受制","毛坯房","后续","更具","python3","架构","先进","大致","印象","第二个","去","理器","交给","之后","大","精力","安全","全","张图","应用","致使","建筑","run","在","设计","可读","还有","而","方式","翻新","各种","各种各样","学","想要","再","编译","分布式","经验","amr","课时","下","vs","变得","消费市场","更接","单兵作战","rmw","适合","注意","研究","减少","换成","产品化","不能","交道","之外","时代","涌现","请","其他","协议","版本","自动","阶段","协作","不再","哪些","ament","层","产品开发","跨平台","ros1","不好","诞生","国际","项目","所示","你","开始","发送","以下几点","中间层","勿躁","当然","一边","角度","电脑","了解","越来越","不难理解","基本","于","可能","编写","另外","格局","依然","做","率","电脑系统","虽然","还","走向","不仅","复杂","安全性","继续","交付","灵活","可读性","上手","更","动力学","翻地","但","历史使命","比","什么","一家","编程语言","过来","操作系统","表示","。","复杂度","需要","部署","肯定","加入","让","来看","跟随","分解","不够","过程","经常","概念","普及","天翻地覆","之上","是","甚至","几百","一步","下边","集成","生产","面对","延迟","变革","把","一团乱","只能","管理","共享","借鉴","黑客","完善","似乎","毛坯","该","怎样","小","新一代","主角","机器","听说","内存","名称","类型","重来","udp","大部分","图片","rosrun","部头","会","dds","这台","风险","丰富","对于","mcu","主","编译系统","明显","某","安装","或者","结合","优化","目标","消失","听","特性","相关","行人","基于","了","陆续","很多","对","有限","方便","/","通用性","嵌入","数据","熟悉","适配","作战","充足","发成","对象","理解","指定","还会","topic","时间","大幅","底层","每","并","发","类似","选择","来","代码","windows"," ","原有","本","网络连接","做成","最新","伙伴","控制器","任何","有线","全球","教程","信号","最后","得","使用","没有","100ms","收","是否","产品","实力","下要","讲解","层面","将","说明","开发","那","稳定","分布","干扰","面向","ceo","从","也许","不太","来讲","更加","答案","售价","强","他","航天","广泛","一致","不同","简单","pr2","专注","变化","连接","物","提供","以上","体验","新版","加密","远比","标准","学术","等","便于","测试","应用层","啦","丢","这些","第二","实现","较","以及","能力","到","分散","尽量","前方","大幅度","colcon","—","直接","重新","乱麻","属性","节点","三个","运行","不","方法","学术研究","单兵","保证","之初","原本","后","信息","幅度","也","链接","公司","切换","未来","非常","保障","只不过","ros","宕机","提高","周期","编码","挑战","多功能","实时性","差异","环境","tcp","机制","只要","是从","成本","以下","纠结","如何","当","全部","找到","用到","同样","机器人","随着","启动","第一","ros2","已经","场景","走","给","master","使命","无论","高昂","局限性","总体而言","why","最","二个","运算","流程","确实","成功经验","所以","就是","系统工程","不是","社区","按照","其中","推倒","一旦","通信协议","不难","但是","没","内","足够","小伙伴","总体","陌生","运动学","比如","开发方式","从而","升级","生活","应该","走向市场","都","封装","慢慢","绝大部分","上升","功能","颠覆性","至关重要","客户","级别","catkin","具备","举","成功","广泛应用","系统","放在","干掉","可靠","几乎","除此之外","带来","款","接入","地方","高","很大","频繁","迈过","这样","性","因为","上","如果","个体","一套","可选","话题","一一","进行","运动","算力","基本保障","整体","通信","过","意义","满足","为","定义","做到","各位","编程","策略","多","力学","一个","大部头","控制","唯一","解密","至关","这","揭秘","针对","每个","最为","手机","推倒重来","工具","只是","即可","可移植","是因为","有且","更好","定性","发展","全新","用户","么","更换","动力","例子","自","处理","难度","需求","python","适用","能够","房子","深入","用于","左侧","第二种","开源","接近","联网","指挥","工作","不过","一行","客户端","面临","呢","方案","省略","自己","条件","可以","尤其","解算","现有","复用","右侧","软件开发","他们","管理器","一些","opensplice","市场","不会","一页","部分","提","通用","迁移","稳定性","中间","批量","不要","第二代","一种","出错","最早","行为","良好","厂商","一定","大量","不用","总结","看看","命令行","编译器","支持","依赖","api","切记","长远","只有","二代","图像","常用","驾驶","能","担心","而已","局限","库会","最终","搭载","macos","移植性","移植","角色","轻松","最大","其实","除此","尽力","网络","打交道","研发","开发者","彼此","智能","要求","相对","和","操作","名字","这个","各样","先","发布者","成","一样","几百万","搬","对比","借助","无法","最佳","用","接口","发现","导致","雷达","5g","可靠性","配置","另","命令","：","完成","linux","除了","打成","通过","绝大","到底","为什么","含义","接触","嵌入式","基础","独立","里","c++","？","稍安","装修","首先","建立","如","选项","几点","国际标准","不爽","叫做","微控制器","盖","rosbuild","历史","强壮","，","过去","简单明了","越来","、"],"title":"ROS2对比ROS1","title_tokens":["ros1","对比","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2ros1","text":"在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。","text_tokens":["你","二代","对比","来看","学习","就","从","也许","过","有","能","不","ros2","多","变化","一个"," ","我们","做","这","到底","之前","的","？","ros","第二代","第二","就是","使用","么","和","上","，","大","其中","看看","或","。","ros1","听说","名称","在"],"title":"ROS2对比ROS1","title_tokens":["ros1","对比","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros1","text":"首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。","text_tokens":["开发","服务","那","干扰","算力","不断","从","通信","当然","更加","答案","售价","他","航天","pr2","；","连接","一个","汽车","内部","我们","学术","这","虽然","针对","走向","复杂","课程","丢","是因为","一款","翻地","能力","发展","什么","处理","平台","。","—","用于","批量生产","由于","让","来看","设备","工作","不够","有","普及","天翻地覆","担忧","呢","是","不","运行","中","学术研究","甚至","单兵","自己","条件","可以","保证","具体","生产","计算","原本","一些","家庭","市场","也","部分","要","只能","大部","批量","ros","不断涌现","黑客","最早","良好","框架","似乎","小","不用","新一代","主角","机器","成本","支持","类型","找到","大部分","就","资源","机器人","实时","驾驶","随着","软件","第一","ros2","会","出现","已经","这台","风险","它","问题","入侵","最终","工作站","搭载","高昂","一代","或者","why","的","网络","第一个","为了","目标","运算","就是","了","和","先进","有限","嵌入","应用","致使","但是","作战","充足","足够","在","设计","比如","时间","用","各种","走向市场","都","并","类似","绝大部分","可靠性","：","完成"," ","单兵作战","绝大","级别","具备","适合","为什么","网络连接","研究","嵌入式","做成","系统","独立","可靠","？","涌现","有线","首先","款","地方","这样","因为","没有","自动","上","历史","产品","实力","，","ros1","诞生","数据"],"title":"ROS1的局限性","title_tokens":["局限","的","ros1","局限性","限性"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2","text":"ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。","text_tokens":["对系统","体现","二种","相比","诸多","怀揣","汽车","所有","颠覆","我们","考虑","调试","课程","受制于","一款","同时","平台","千差万别","巨大","有","中","rtos","1ms","细节","具体","要","（","时候","布式","wifi","修改","两个","工程","框架","真正","好","一下","项目管理","与","消费","就","实时","之间","软件","）","出现","标准化","语言","它","android","入侵","问题","完整","大家","完整性","保留","的","性能","为了","第一个","受制","毛坯房","后续","更具","python3","架构","去","理器","大","安全","全","应用","建筑","在","设计","翻新","各种","各种各样","编译","分布式","经验","amr","课时","下","消费市场","适合","产品化","不能","时代","自动","阶段","协作","不再","ament","ros1","跨平台","不好","项目","发送","以下几点","电脑","越来越","基本","于","可能","编写","格局","电脑系统","虽然","还","走向","不仅","复杂","安全性","继续","更","动力学","但","历史使命","比","操作系统","。","需要","部署","肯定","让","来看","分解","经常","之上","是","甚至","面对","变革","把","管理","借鉴","黑客","毛坯","怎样","机器","重来","会","dds","风险","mcu","编译系统","明显","或者","结合","优化","特性","行人","了","很多","对","方便","通用性","还会","并","类似","选择","代码","windows"," ","原有","网络连接","最新","控制器","任何","信号","得","使用","没有","100ms","产品","下要","层面","说明","开发","稳定","那","分布","更加","强","不同","简单","连接","变化","提供","体验","新版","加密","远比","标准","、","等","测试","这些","第二","实现","较","以及","到","尽量","前方","colcon","直接","重新","节点","运行","方法","不","之初","原本","后","也","链接","未来","保障","ros","宕机","周期","挑战","实时性","差异","环境","机制","以下","纠结","如何","全部","机器人","第一","ros2","已经","场景","给","master","使命","无论","流程","成功经验","所以","就是","系统工程","不是","推倒","一旦","但是","内","运动学","比如","升级","生活","都","颠覆性","catkin","具备","成功","系统","可靠","很大","这样","性","上","个体","进行","运动","算力","基本保障","通信","满足","为","做到","策略","多","力学","一个","控制","解密","这","针对","手机","推倒重来","工具","只是","定性","全新","动力","需求","python","能够","房子","用于","第二种","工作","面临","呢","方案","自己","可以","尤其","解算","他们","管理器","市场","不会","提","通用","稳定性","一种","出错","行为","一定","大量","不用","编译器","api","长远","驾驶","能","最终","搭载","macos","移植","角色","尽力","网络","研发","开发者","智能","要求","相对","和","操作","这个","各样","借助","无法","最佳","用","接口","发现","导致","：","完成","linux","除了","打成","基础","独立","c++","？","装修","几点","叫做","微控制器","盖","rosbuild","历史","强壮","，","过去","越来","数据"],"title":"全新的ROS2","title_tokens":["的","全新","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2-vs-ros1","text":"","text_tokens":[],"title":"ROS2 vs ROS1","title_tokens":["vs","ros1"," ","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_1","text":"在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。","text_tokens":["开发","那","稳定","开始","一团","ceo","整体","通信","中间层","重要","不太","更加","过","了解","简单","不难理解","突然","变化","所有","一个","连接","提供","另外","标准","我们","共享内存","、","至关","这","看","复杂","驱动","应用层","写","这些","有且","通信接口","但","可选项","更换","discovery","自","两者","操作系统","—","。","程序","深入","左侧","需要","肯定","乱麻","发布","让","指挥","不过","节点","间层","客户端","有","是","不","方法","中","rtos","可以","下边","右侧","一团乱麻","管理器","信息","也","公司","时候","把","一团乱","中间","管理","接收","共享","ros","只不过","调用","框架","完善","tcp","机制","大量","好","是从","主要","内存","依赖","udp","只有","找到","图像","学习","就","简单明了","ros2","会","而已","dds","库会","走","它","会成","master","大家","进程","macos","明显","安装","角色","的","打交道","最","消失","彼此","听","后续","就是","基于","架构","了","和","大致","很多","印象","操作","理器","名字","这个","张图","应用","通信协议","不难","先","内","在","成","一样","理解","对比","比如","从而","而","方式","接口","应该","都","再","并","类似","封装","发现","雷达","windows"," ","变得","linux","至关重要","通过","客户","注意","接触","系统","里","交道","请","建立","选项","频繁","得","协议","这样","如果","上","一套","可选","哪些","，","层","将","进行","ros1","底层","数据"],"title":"系统架构","title_tokens":["架构","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#dds","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。","text_tokens":["符合","开发","稳定","自家","通信","来讲","当然","更加","诟病","相比","广泛","满足","软件系统","不同","定义","简单","为","多","变化","物","一个","常","提供","于","唯一","加密","基本","标准","我们","、","做","这","率","等","每个","交付","开发成本","灵活","复杂","写","丢","这些","更","实现","用户","么","一家","更换","例子","过来","需求","这里","适用","。","能够","程序","复杂度","重新","部署","肯定","middleware","加入","属性","开源","让","联网","不过","总之","一行","商业","三个","然后","是","不","中","专注","解决","省略","可以","厂家","复用","一些","opensplice","延迟","也","部分","要","改","切换","把","完","ros","一种","提高","厂商","tcp","该","只要","时","好","不用","机器","成本","纠结","听说","如何","udp","就","机器人","软件","ros2","多个","会","场景","dds","丰富","给","对于","问题","master","简称","某","安装","移植","轻松","fastrtps","最大","其实","的","最","优化","性能","为了","目标","所以","就是","基于","了","不是","社区","交给","/","按照","这个","精力","先","应用","通信协议","熟悉","适配","发成","在","一样","设计","指定","比如","无法","还有","接口","用","应该","各种","每","并","想要","类似","选择","发","都","另","代码","再","5g","配置","功能"," ","除了","rmw","举","减少","广泛应用","系统","放在","之外","？","带来","接入","其他","国际标准","高","频繁","协议","得","不爽","这样","版本","如果","收","是否","产品","，","层面","产品开发","ros1","底层","国际","数据"],"title":"DDS通信","title_tokens":["dds","通信"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_2","text":"ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。","text_tokens":["几百万","开发","陌生","小伙","开发方式","学习","就","从","方式","概念","有","过","应该","百万","并","意义","广泛","不","一致","ros2","中","各位","已经","会","几百","方法","担心","小伙伴"," ","我们","存在","大家","依然","本","含义","便于","也","部分","伙伴","迁移","保留","几乎","非常","的","课程","二个","这些","ros","开发者","全球","第二","以及","到","使用","应用","尽量","了","和","如果","很多","没有","第二个","讲解","不用","，","其中","这里","。","一一","ros1","熟悉","在"],"title":"核心概念","title_tokens":["核心","概念"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_3","text":"再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。","text_tokens":["所示","开发","面向","从","一边","来讲","勿躁","角度","编程","多","大部头","一个","我们","这","可读性","一本","课程","写","可移植","更","道坎","实现","更好","编程语言","难度","程序","。","带领","而言","接近","发布","不过","过程","可移植性","是","方法","中","一步","具体","暂且","软件开发","一些","一页","也","大部","不要","提高","两个","编码","企业","面向对象","机器","看看","如何","当","真实","切记","图片","用到","就","同样","机器人","学习","软件","部头","ros2","会","语言","大家","移植性","总体而言","移植","的","确实","后续","特性","和","操作","之后","发布者","在","总体","对象","搬","可读","方式","用","学","再","来","发现"," ","更接","具备","稍安","如","教程","迈过","版本","，","ros1","项目"],"title":"编码方式","title_tokens":["编码","方式","编码方式"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_4","text":"最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随教程，你就会慢慢理解这些特性。","text_tokens":["rostopic","开发","你","通信","编程","以上","变化","一个","所有","控制","我们","做","揭秘","上手","最为","啦","工具","即可","这些","更","初次","分散","难度","大幅度","表示","—","。","而言","跟随","节点","概念","有","是","中","集成","现有","幅度","也","核心","把","ros","一种","多功能","好","总结","命令行","常用","就","启动","rosrun","ros2","会","dds","主","master","大家","某","除此","的","后续","就是","相关","特性","相对","了","和","陆续","对","大致","印象","run","没","在","理解","对比","比如","topic","大幅","每","再","都","选择","慢慢","命令","上升","功能","：","下"," ","换成","独立","干掉","之外","除此之外","教程","最后","如果","，","话题","ros1"],"title":"命令行","title_tokens":["命令","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/","text":"ROS2安装方法 本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。 Linux系统简介 时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。 Ubuntu系统简介 我们后续课程使用到的Linux发行版就是 ubuntu系统 。 Ubuntu诞生于2004年10月份， 每六个月发布一个新版本 ，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。 Ubuntu虚拟机安装 虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下： 1. 下载系统镜像 下载链接： https://ubuntu.com/download/desktop 2. 在虚拟机中创建系统 3. 设置虚拟机硬盘大小 4. 设置Ubuntu镜像路径 5. 启动虚拟机 6. 设置用户名和密码 7. 等待系统安装 8. 完成安装 Ubuntu系统安装好后，大家可以先随意使用熟悉一下。 ROS2系统安装 接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下： 1. 设置编码 $ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8 2. 添加源 $ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844 3. 安装ROS2 $ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop 4. 设置环境变量 $ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。 ROS2示例测试 为了验证ROS2安装成功，我们可以通过以下示例进行测试。 示例一：命令行示例 先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。 示例二：小海龟仿真示例 再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["服务","基本相同","终端","重要","户名","绝对","d","我们","上下","考虑","点击","py","(","经典","课程","任务","bug","比较","真器","同时","当中","情况","cpp","这里","程序","这套","一石激起千层浪","发布","月","键盘","何人","商业","有","37844","中","技术","版","一句","林纳斯","提到","计算","lang","一","核心","时候","githubusercontent","dev","之前","占据","背景","“","fedora","发行","by","参考","两个","第一次","6","外衣","企业","看出","时","好","出","一下","或","模式","成为","主要","俱全","html","&&","与","学生","就","ubuntu","软件","源代码","talker","出现","多个","决定","问题","迅猛","仿真","大家","采用","2022","evaluation","指令","会加","的","性能","为了","第一个","个人","后续","紧随","看到","验证","第二个","之后","_","大","应用","workstation","run","在","设计","archive","各种","各种各样","raw","想要","再","两年","相同","下","个","适合","强大","install","操作界面","之外","每年","utf","请","其他","10","版本","sudo","turtlesim","合适","诞生","人工","locale","你","开始","设置","lts","多用","电脑","了解","越来越","奥义","基本","于","可能","另外","第一句","依然","做","etc","”","可","二句","为例","虽然","还","不仅","好后","hello","光大","关注","更","影响","但","示例","centos","failed","什么","dpkg","持续","精神","unix","操作系统","文件","表示","。","null","指标","需要","加入","让","加上","过程","传输","多人","概念","key","redhat","之上","是","甚至","六个","叫","行列","print","http","节","代表","最好","把","curl","左右","分享","管理","一直","apt","vmware","爱好者","出于","大学","任何人","该","真理","pro","资料","芬兰","机器","上层","18",".","每隔","伴随","现在","upgrade","可视","开放","擦掌","密码","会","dds","变量","浏览器","只","先要","node","编辑器","量","~","download","安装","echo","或者","介绍","起来","尚","之内","一应俱全","usr","lc","激发","了","很多","对","有限","www","/","实践","发行版","数据","熟悉","仿真器","share","提交","时间","字符串","个人爱好","ubuntu20.04","底层","每","并","来","gpg","选择","代码","其后","nodes","windows","热爱","快","吧"," ","architecture","原有","5","本","7","数字",":","$","gnupg","任何","教程","使用","com","以","keyring","没有","人工智能","是否","实力","讲解","准备","将","新","04","说明","建议","开发","稳定","不太","从","来讲","按键","gen","connect","2","update","他","不同","技术实力","标准","变动","其","等","测试","字符","应用软件","长期","啦","用户名","[","一位","22","第二","实现","到","反馈","4","us","随意","虚拟","—","直接","重新","后缀","多任务","tee","二","o","吸引","demo","节点","蓝色","运行","方法","不","en","release","保证","原本","后","也","公司","链接","未来","准确","构建","上下左右","乐于","ros","编码","唯一标准","环境","ubuntu22.04","已有","1","位置","普通","以下","如何","顺序","步骤","发挥","1991","其他软件","3","兼容","--","者","领域","机器人","快速","启动","第一","ros2","已经","之一","场景","locales","好者","给","opt","接下","master","大小","无论","月份","摩拳擦掌","源","最","二个","收费","虚拟机","]","互联网","试一试","所以","就是","如下","操作方法","优先","各个","如遇","其中","但是","arch","添加","比如","衡量","下载","升级","蕴藏","应该","都","浏览","codename","放到","等待","功能","编号","此时","发扬","成功","第二句","中将","传播","系统","除此之外","环境变量","desktop","应用程序","还是","这样","可视化","因为","上","如果","紧随其后","一套","进行","免费","分别","运动","os","动手做","一起","创建","通信","年","signed","并用","编辑","多用户","export","多","一个","list","setup","路径","唯一","|","控制","说干就干","绑定","硬盘","发扬光大","这","无论是","计算机","地址","=","最为","本相","用户","发展","成熟","并且","teleop","探索","guyuehome","接下来","适用","原理","开源","六个月","爱好","联网","工作","目前","服务器","前先要","呢",">","lsb","自己","可以","软件开发","一次","环境变","简介","一些","下来","通用","界面","8","一种","修复","一定","小海龟","互联","很","大量","ssl","\"","命令行","硬件","依赖","支持","常用","务器","world","回到","更新","关于","products","main","2004","rosdistro",")","维护","一般","华丽","listener","千层","命名","内核","热情","千层浪","macos","报错","source","移植","除此","镜像","最大","网络","检验","开发者","正常","小海","智能","-","和","订阅","all","操作","名字","这个","海龟","各样","效果","先","发布者","算机","成","一样","动手","打包","激起","一应","keyrings","命令","packages","https","org","：","完成","turtle","linux","通过","除了","to","等等","bashrc","至此","接触","deb","自行","大学生","？","sources","试试","通讯","humble","叫做","bash","，","越来","、"],"title":"ROS2安装方法","title_tokens":["安装","方法","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2","text":"本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。","text_tokens":["一起","重要","前先要","了解","ros2","先要","linux","我们","本","安装","节","系统","的","最","一种","操作","操作系统","，","一下","—","。","底层"],"title":"ROS2安装方法","title_tokens":["安装","方法","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#linux","text":"时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。","text_tokens":["开发","稳定","动手做","服务","基本相同","多用","一起","不太","重要","来讲","年","并用","他","不同","多用户","越来越","技术实力","多","一个","基本","唯一","另外","标准","我们","说干就干","绑定","做","发扬光大","这","其","等","虽然","还","计算机","不仅","应用软件","任务","一位","bug","光大","更","实现","到","但","用户","发展","本相","成熟","centos","反馈","并且","什么","当中","情况","精神","unix","操作系统","适用","—","程序","。","这套","重新","原理","指标","需要","多任务","加入","一石激起千层浪","开源","爱好","联网","加上","目前","何人","过程","吸引","多人","概念","商业","有","服务器","redhat","之上","呢","是","不","方法","中","甚至","叫","技术","自己","林纳斯","可以","行列","提到","计算","原本","后","一些","也","公司","核心","通用","界面","最好","把","之前","准确","分享","管理","fedora","乐于","发行","修复","爱好者","参考","唯一标准","出于","企业","大学","外衣","互联","任何人","真理","大量","已有","芬兰","或","模式","成为","主要","硬件","依赖","支持","伴随","常用","1991","务器","与","兼容","现在","回到","学生","就","ubuntu","快速","可视","软件","开放","源代码","ros2","维护","会","已经","之一","出现","一般","好者","场景","华丽","给","决定","问题","千层","命名","内核","热情","千层浪","macos","量","迅猛","安装","镜像","或者","起来","的","尚","检验","最","性能","收费","开发者","个人","互联网","所以","就是","激发","了","和","看到","很多","对","有限","操作方法","操作","名字","之后","这个","其中","大","实践","发行版","先","应用","熟悉","各样","算机","在","成","一样","设计","比如","动手","衡量","提交","时间","打包","个人爱好","应该","各种","底层","都","并","激起","各种各样","放到","每","代码","windows","热爱","功能","相同"," ","下","此时","linux","发扬","通过","原有","等等","强大","本","适合","操作界面","传播","系统","每年","大学生","？","任何","教程","其他","应用程序","使用","版本","叫做","可视化","没有","上","一套","实力","讲解","，","越来","免费","、"],"title":"Linux系统简介","title_tokens":["linux","系统","简介"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu","text":"我们后续课程使用到的Linux发行版就是 ubuntu系统 。 Ubuntu诞生于2004年10月份， 每六个月发布一个新版本 ，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。","text_tokens":["开发","稳定","你","lts","从","重要","年","电脑","编辑","绝对","不同","多","一个","于","可能","变动","我们","考虑","依然","硬盘","等","为例","无论是","还","长期","课程","关注","22","更","到","比较","用户","影响","4","持续","文件","这里","表示","虚拟","。","直接","后缀","发布","六个月","让","联网","月","有","是","六个","方法","中","版","自己","可以","保证","软件开发","一次","也","时候","代表","占据","之前","未来","一直","发行","参考","第一次","看出","一定","环境","互联","ubuntu22.04","时","很","资料","好","出","一下","已有","机器","位置","俱全","上层","普通","18","如何","主要","支持","硬件","或","顺序","每隔","常用","发挥","领域","ubuntu","就","机器人","更新","软件","2004","擦掌","第一","出现","会","维护","已经","浏览器","只","编辑器","大家","无论","月份","2022","新","04","摩拳擦掌","安装","移植","除此","最大","介绍","会加","的","网络","之内","一应俱全","为了","性能","开发者","虚拟机","互联网","后续","试一试","所以","就是","智能","紧随","了","很多","优先","之后","各个","其中","发行版","效果","应用","熟悉","但是","在","比如","升级","各种","ubuntu20.04","每","浏览","都","两年","一应","选择","想要","再","其后","windows","编号","快"," ","linux","除了","5","通过","个","本","接触","数字","系统","自行","之外","除此之外","教程","其他","通讯","使用","10","还是","版本","这样","以","因为","人工智能","上","如果","紧随其后","讲解","，","合适","进行","诞生","免费","人工","建议","、"],"title":"Ubuntu系统简介","title_tokens":["系统","ubuntu","简介"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu_1","text":"虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下：","text_tokens":["html","步骤","其他软件","开始","让","下载","工作","就","products","软件","之上","并","运行","是","多个","https","相同","一个","：","完成","可以"," ","另外","我们","大家","后","采用","安装","地址","系统",":","evaluation","自行","的","构建","啦","vmware","请","虚拟机","其他","如下","com","同时","叫做","环境","和","-","www","操作","pro","准备","/","，","虚拟","已有","。","这里",".","workstation","在"],"title":"Ubuntu虚拟机安装","title_tokens":["虚拟","虚拟机","ubuntu","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1","text":"下载链接： https://ubuntu.com/download/desktop","text_tokens":["链接",":","https","：","下载"," ","/","ubuntu",".","desktop","download","com"],"title":"1. 下载系统镜像","title_tokens":["系统","镜像","下载"," ","1","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2","text":"","text_tokens":[],"title":"2. 在虚拟机中创建系统","title_tokens":["中","系统"," ","创建","虚拟","虚拟机",".","2","在"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3","text":"","text_tokens":[],"title":"3. 设置虚拟机硬盘大小","title_tokens":["3","设置"," ","虚拟","虚拟机","大小","硬盘","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4-ubuntu","text":"","text_tokens":[],"title":"4. 设置Ubuntu镜像路径","title_tokens":["4","镜像","设置","路径","ubuntu"," ","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#5","text":"","text_tokens":[],"title":"5. 启动虚拟机","title_tokens":[" ","虚拟","5","虚拟机","启动","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#6","text":"","text_tokens":[],"title":"6. 设置用户名和密码","title_tokens":["和","设置","用户名"," ",".","户名","密码","用户","6"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#7","text":"","text_tokens":[],"title":"7. 等待系统安装","title_tokens":["系统","等待"," ",".","7","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#8","text":"Ubuntu系统安装好后，大家可以先随意使用熟悉一下。","text_tokens":["系统","好后","可以","随意","ubuntu","，","一下","。","大家","先","熟悉","使用","安装"],"title":"8. 完成安装","title_tokens":["完成","8"," ",".","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_1","text":"接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下：","text_tokens":["步骤","就","ubuntu","ros2","中","：","可以","接下","我们","下来","安装","系统","把","到","如下","了","接下来","，","。"],"title":"ROS2系统安装","title_tokens":["系统","安装","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1_1","text":"$ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8","text_tokens":["&&","gen","update","en","export","locales"," ","lang","install","=","$","8","utf","apt","lc","-","all","us","sudo","_",".","locale"],"title":"1. 设置编码","title_tokens":["设置"," ","1",".","编码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2_1","text":"$ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844","text_tokens":["os","connect","signed","update","d","list","|","etc","”","可","=","(","[","failed","dpkg","guyuehome","null","tee","o","key","37844",">","lsb","release","print","http","githubusercontent","dev","curl","“","apt","by","ros","参考","ssl","\"",".","&&","--","ubuntu","main","rosdistro",")","ros2","master","报错","source","echo","]","usr","-","www","/","_","如遇","share","arch","archive","raw","codename","gpg","keyrings","packages","https","org"," ","architecture","to","install",":","deb","$","sources","gnupg","com","keyring","sudo","，"],"title":"2. 添加源","title_tokens":["源"," ",".","2","添加"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3-ros2","text":"$ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop","text_tokens":["-","$"," ","apt","sudo","ros","upgrade","desktop","update","humble","install"],"title":"3. 安装ROS2","title_tokens":["3"," ","安装",".","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4","text":"$ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。","text_tokens":["就",">","ros2","中","已经","setup",".","opt"," ","~","bashrc","source","至此","安装","echo","系统","$","ros","humble","了","bash","/","好","，","。","\"","在"],"title":"4. 设置环境变量","title_tokens":["环境","4","变量","设置"," ","环境变","环境变量","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_2","text":"为了验证ROS2安装成功，我们可以通过以下示例进行测试。","text_tokens":["测试","ros2","验证","可以","为了","，","我们","通过","安装","以下","进行","。","示例","成功"],"title":"ROS2示例测试","title_tokens":["测试","示例","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_1","text":"先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。","text_tokens":["发布","world","者","通信","终端","重要","节点","demo","字符串","传输","启动","来","talker","第一","ros2","命令","中","dds","nodes","一个","：","吧","listener"," ","问题","通过","”","py","最为","系统","hello","字符","的","$","“","二个","第一个","试试","第二","正常","两个","如果","cpp","订阅","是否","没有","第二个","_","，","。","以下","先","底层","发布者","说明","run","数据","在"],"title":"示例一：命令行示例","title_tokens":["命令","：","命令行","一","示例"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_2","text":"再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["键盘","就","终端","蕴藏","key","分别","节点","按键","关于","启动","蓝色","再","来","运行","第一","ros2","中","奥义","：","一句","一个","控制","node"," ","turtle","可以","我们","第一句","仿真","上下","”","点击","二句","至此","第二句","中将","安装","成功","经典","指令","的","$","背景","“","左右","啦","上下左右","ros","教程","第二","两个","小海","试一试","后续","真器","示例","如下","小海龟","teleop","上","持续","该","探索","_","海龟","，","—","。","turtlesim","将","运动","仿真器","run","在"],"title":"示例二：小海龟仿真示例","title_tokens":["二","小海龟","：","海龟","仿真","小海","示例"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/","text":"ROS2命令行操作 在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。 Linux中的命令行 类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。 启动方式 回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。 常用命令操作 我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。 ROS2中的命令行 ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。 运行节点程序 想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看节点信息 当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim 查看话题信息 当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose 发布话题消息 想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 发送服务请求 一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\" 发送动作目标 想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\" 录制控制命令 系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["服务","尝试","终端","重要","孤单","写字","绝对","内容","转","逛来逛去","某个","所有","段","cp","我们","衣服","调试","0.2","一系","初次","呈现","发指","y","真器","spawn","'","鼠标","片段","这里","文件名","程序","文件名称","带领","发布","…","键盘","移入","有","pose","科幻","linear","改了","中","解决","显示","买","快捷键","具体","复制到","一","核心","时候","要","之前","款式","背景","“","terminal","主目录","死记硬背","调用","及","第一次","<","既","好","出","一下","或","材料","主要","快捷","服装","与","学习","精心设计","就","17","软件","难以","record","多个","目","令人发指","新建","当前","它","目录","问题","绝对路径","仿真","大家","2022","保留","指令","的","第一个","看到","一件","大致","去","_","每次","应用","run","在","录制","设计","逛来","一点","还有","方式","各种","想要","这种","再","多到","总有","geometry","相同","一只","下","商家","本节","其他","info","又","既定","动","sudo","哪些","turtlesim","打开","必不可少","你","列表","发送","一边","z","send","角度","电脑","了解","可能","于","{","”","根据","msg","为例","虽然","还","灵活","继续","所在","更","二十","语法","但","不变","什么","死记","文件","表示","。","需要","让","加上","兴趣","key","概念","name","absolute","播放","记忆","觉得","db3","是","科幻电影","一步","集成","源文件","进一步","把","一直","管理","文件夹","子目","黑客","cd","当前工作","这项","该","窗口","小","0","theta",".","名称","知道","推出","枯燥","可视","拷贝","深色","至于","会","对于","node","想","编辑器","后边","11","}","某","炫酷","echo","或者","结合","笔记","起来","目的","保持","目标","度高","具体操作","目标目录","了","很多","对","并不一定","/","看不到","一二十","数据","angular","熟悉","消息","仿真器","goal","受","跟","指定","topic","pub","至今","此",",","麻烦","每","并","来","类似","t","选择","忙","里边"," ","原有","本","规则",":","详细","$","rm","使用","感兴趣","以","没有","srv","将","原因","04","十个","总","不太","来讲","被","输入","2","不同","以上","提供","体验","列出","查","不一","等","字符","啦","复现","[","这些","实现","到","rotate","系列","某段","action","一二","约束","不到","地","—","直接","turtle1","自主","节点","rate","笔记本电脑","运行","不","ctrl","40","搜索","很少","cmd","rotateabsolute","哪","后","mkdir","信息","也","链接","未来","ros","详细信息","笔记本","常用命令","机制","定制","1","如何","想象","干什么","3","--","用到","+","随着","启动","不可","第一","ros2","已经","场景","做好","多种","随身","接下","完全","无论","感觉","rosbag","体会","一系列","确实","一二十个","]","试一试","rosbag2","所以","就是","如下","案例","不是","硬","但是","呈现出","比如","令人","都","体操","执行","慢慢","x","功能","此时","死机","管理员","帮上","msgs","系统","2.0","ls","容易","看中","子目录","还是","这样","可视化","如果","因为","上","感兴","件夹","话题","进行","权限","参数","背","有点","呀","创建","复制","电影","一起","适应","编辑","满足","为","多","一个","list","路径","若","控制","play","这","例如","service","魅力","专门","工具","只是","即可","查看","用户","动作","teleop","1.8","需求","接下来","能够","深入","二十个","twist","call","不过","工作","从来","呢",">","标目","删除","其上","自己","可以","alt","现有","一次","一些","下来","实验","数量","实验室","现出","一种","改名","由","vel","看似","一定","异常","小海龟","逛去","很","不用","看看","\"","命令行","统管","请求","常用","回到","及其","拷贝到","轻松","手","右键","则","正常","小海","找","太","-","和","产生","操作","bag","pwd","这个","海龟","而是","先","便捷","成","一样","mv","用","改变","命令","另","感受","：","子","完成","商场","turtle","linux","通过","什么样","为什么","布料","接触","随身带","系统管理员","精心","gedit","？","选项","35","0.0","叫做","均","，","怎么","、"],"title":"ROS2命令行操作","title_tokens":["命令","操作","命令行","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2","text":"在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。","text_tokens":["学习","有点","不太","重要","适应","随着","运行","第一","ros2","中","命令","会","感受","一步","多","可能","可以"," ","我们","一次","进一步","大家","接触","时候","之前","调试","魅力","的","工具","更","一种","本节","小海","第一次","到","使用","了","一定","小海龟","案例","如果","海龟","，","—","将","。","带领","命令行","深入","在"],"title":"ROS2命令行操作","title_tokens":["命令","操作","命令行","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#linux","text":"类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。","text_tokens":["服务","你","呀","电影","来讲","被","满足","为","逛来逛去","多","一个","所有","于","我们","、","根据","不一","等","虽然","灵活","衣服","工具","这些","呈现","但","什么","约束","片段","需求","这里","。","能够","自主","科幻","呢","不","是","科幻电影","中","其上","解决","自己","买","可以","现有","哪","一些","时候","款式","一直","现出","ros","一种","看似","异常","一定","逛去","小","定制","材料","命令行","想象","服装","精心设计","推出","就","可视","软件","不可","会","已经","场景","做好","对于","问题","完全","大家","无论","某","炫酷","保留","结合","起来","的","手","度高","就是","看到","一件","和","不是","很多","了","并不一定","操作","去","每次","先","但是","便捷","成","在","受","呈现出","设计","一样","比如","逛来","一点","方式","至今","麻烦","各种","都","并","来","类似","想要","总有","这种","命令","功能","里边","商场"," ","此时","linux","什么样","商家","为什么","规则","布料","精心","容易","？","看中","其他","使用","还是","这样","可视化","没有","既定","，","必不可少"],"title":"Linux中的命令行","title_tokens":["中","命令","的","linux","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_1","text":"回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。","text_tokens":["列表","参数","背","终端","电影","输入","电脑","写字","我们","这","字符","所在","专门","魅力","工具","即可","一系","二十","初次","到","发指","系列","什么","鼠标","一二","不到","。","二十个","需要","不过","从来","有","笔记本电脑","觉得","科幻","记忆","呢","是","ctrl","中","科幻电影","搜索","快捷键","alt","很少","可以","后","也","时候","数量","背景","terminal","黑客","及","一定","这项","笔记本","很","窗口","既","不用","一下","快捷","命令行","常用","回到","用到","+","就","枯燥","软件","启动","难以","随着","深色","至于","会","令人发指","多种","随身","大家","体会","笔记","指令","一系列","的","右键","手","确实","一二十个","正常","所以","就是","看到","不是","对","操作","这个","而是","看不到","硬","一二十","应用","熟悉","但是","在","令人","方式","用","都","并","来","t","选择","慢慢","多到","命令","功能","："," ","通过","死机","本","为什么","随身带","其他","使用","叫做","因为","上","又","，","打开","怎么","原因","十个"],"title":"启动方式","title_tokens":["方式","启动"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_2","text":"我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。","text_tokens":["列表","权限","复制","创建","一边","编辑","绝对","为","某个","多","一个","所有","体验","路径","若","cp","我们","列出","”","查","[","只是","这些","语法","用户","不变","死记","地","文件","文件名","。","文件名称","需要","…","工作","移入",">","不","中","标目","删除","显示","可以","源文件","复制到","mkdir","一","也","链接","把","未来","“","管理","文件夹","主目录","子目","改名","死记硬背","由","及","<","cd","当前工作","常用命令","该","出","一下","或","统管","名称","常用","回到","就","拷贝","及其","多个","会","目","新建","当前","它","目录","对于","编辑器","绝对路径","拷贝到","大家","感觉","或者","保持","指令","目的","的","目标","则","]","找","目标目录","了","pwd","/","先","熟悉","指定","mv","此","用","来","执行","改变","另","命令","功能","："," ","下","linux","原有","管理员","系统管理员","系统","ls","rm","gedit","子目录","选项","以","没有","均","件夹","sudo","，","打开","将"],"title":"常用命令操作","title_tokens":["命令","常用命令","操作","常用"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2_1","text":"ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。","text_tokens":["干什么","跟","比如","与","topic","参数","不过","就","一起","节点","概念","有","都","体操","内容","了解","第一","ros2","命令","中","不同","感受","相同","所有","一个","功能","集成","node","具体","可以"," ","linux","接下","我们","后边","仿真","下","下来","为例","还","也","核心","继续","目的","的","一系列","第一个","一系","小海","具体操作","系列","什么","以","小海龟","对","大致","机制","操作","接下来","，","表示","话题","。","海龟","主要","命令行","总","在"],"title":"ROS2中的命令行","title_tokens":["中","命令","的","命令行","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_3","text":"想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["键盘","节点","key","想要","运行","ros2","中","命令","某个","：","可以","控制"," ","node","turtle","我们","仿真","例如","要","$","使用","和","teleop","操作","_","，","海龟","turtlesim","进行","run"],"title":"运行节点程序","title_tokens":["程序","节点","运行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_4","text":"当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim","text_tokens":["知道","加上","兴趣","就","节点","有","都","来","呢","运行","ros2","中","命令","当前","：","list","一个","子","可以","node"," ","它","信息","某","系统","详细","的","$","啦","？","ros","查看","感兴趣","这样","info","如果","对","感兴","详细信息","/","哪些","，","turtlesim"],"title":"查看节点信息","title_tokens":["查看","节点","信息"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_5","text":"当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose","text_tokens":["加上","topic","有","都","pose","呢","ros2","中","命令","当前","：","list","一个","子"," ","想","某","还","echo","系统","$","的","即可","试一试","查看","使用","如下","看到","/","话题","，","消息","turtle1","数据"],"title":"查看话题信息","title_tokens":["查看","话题","信息"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_6","text":"想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":["twist","发布","topic","--","z","pub",",","rate","想要","linear","ros2","命令","geometry","x","：","控制","可以"," ","我们","通过","cmd","{","}","msg","msgs","还",":","2.0","指令","起来","$","\"","0.0","y","vel","1.8","动","/","_","海龟","，","话题","1","angular","直接","命令行","turtle1"],"title":"发布话题消息","title_tokens":["话题","消息","发布"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_7","text":"一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\"","text_tokens":["服务","call","name",",","孤单","2","再","来","改了","ros2","x","一个","：","提供","一只"," ","我们","{","仿真","}","还",":","service","$","0.2","太","调用","试一试","真器","y","'","spawn","产生","srv","/","海龟","，","—","turtlesim","theta","\"","仿真器"],"title":"发送服务请求","title_tokens":["发送","请求","服务"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_8","text":"想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\"","text_tokens":["指定","turtle1","让","比如","发送","3","absolute","send","角度","想要","转","ros2","中","命令","忙","一个","完成","提供","：","可以","具体"," ","rotateabsolute","通过","仿真","帮上",":","的","$","目标","到","真器","rotate","这样","action","动作","/","这个","海龟","，","_","turtlesim","goal","theta","\"","命令行","仿真器"],"title":"发送动作目标","title_tokens":["发送","目标","动作"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_9","text":"系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["常用","与","回到","尝试","还有","用","有","播放","17","record","想要","再","db3","运行","每","ros2","中","命令","40","以上","功能","：","一个","子","自己","段","可以"," ","play","cmd","我们","大家","11","这","下来","2022","04","rosbag","实验","系统","实验室","轻松","把","的","复现","$","？","啦","rosbag2","实现","35","就是","还是","vel","某段","-","如果","很多","很","bag","好","/","，","_","0","看看","。",".","如何","turtle1","数据","录制"],"title":"录制控制命令","title_tokens":["命令","控制","录制"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","text":"ROS2开发环境配置 ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。 Git git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git 下载教程源码 《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。 VSCode Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download VSCode插件配置 为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。 中文语言包 Python插件 C++插件 CMake插件 vscode-icons ROS插件 Msg Language Support Visual Studio IntelliCode URDF Markdown All in One VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["开发","自带","clone","两款","微软","终端","重要","被","年","判断","编辑","广泛","内容","常听到","不同","简单","多","以上","一个","成千","离不开","提供","编写","可能","所有","另外","one","我们","》","做","这","msg","git","便于","冲突","还","复杂","驱动","调试","课程","工具","bug","这些","一系","更","一款","千上万","查看","vscode","以及","但","示例","发展","visual","官方网站","增加","系列","喜欢","guyuehome","操作系统","文件","python","这里","—","。","直接","推荐","无限","有些","需要","肯定","开源","让","审核","一行","有","呢","是","不","方法","中","搜索","轻量","自己","可以","集成","具体","众多","网上","作为","一些","markdown","扩展","迅速","也","不会","链接","神兵","切换","非常","管理","apt","ros","文件夹","修复","变更","tutorials","环境","而生","大量","好","出","已有","机器","讲","成为",".","cmake","开发工具","如何","硬件","支持","几千","与","几千万","studio","就","推出","机器人","之间","快速","软件","源代码","gitee","之父","功能强大","ros2","会","多个","理工","语言","记事","浏览器","丰富","给","只","编辑器","support","简称","大家","macos","download","人","安装","code","一系列","的","高效","最","为了","开发者","个人","不开","官方","后续","所以","特性","《","下载方式","利器","intellicode","-","看到","和","了","很多","这款","行","all","操作","之后","管理软件","/","_","每次","记事本","language","先","应用","千万","在","管理工具","设计","比如","下载","提交","21","方式","用","码云","因","都","并","编译","github","浏览","命令","代码","配置","搭建","https","windows","功能","：","完成","组件","里边","中文"," ","中会","linux","语言包","非常简单","visualstudio","哪里","等等","强大","install","官方网","插件","linus","系统","广泛应用",":","2015","urdf","$","c++","贡献","？","合并","icons","教程","上万","入门","国内","使用","com","版本","这样","如果","自动","成千上万","准备","件夹","sudo","略显","，","in","听到","网站","进行","新","人工","源码","项目","、"],"title":"ROS2开发环境配置","title_tokens":["开发","配置","环境","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros2","text":"ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。","text_tokens":["开发","肯定","需要","两款","机器人","重要","编译","呢","代码","推荐","配置","完成","离不开","给","编写","提供","中会","我们","大家","做","一些","git","课程","的","工具","？","这些","ros","不开","查看","vscode","示例","环境","和","大量","准备","，","机器","—","开发工具","先","。","如何","源码","、"],"title":"ROS2开发环境配置","title_tokens":["开发","配置","环境","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#git","text":"git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git","text_tokens":["开发","终端","被","判断","广泛","内容","常听到","不同","简单","一个","成千","所有","可能","我们","这","git","冲突","驱动","工具","bug","这些","一款","千上万","以及","发展","增加","—","。","直接","有些","需要","肯定","开源","让","审核","一行","有","是","不","方法","中","可以","具体","众多","迅速","也","不会","切换","非常","管理","apt","修复","变更","而生","已有","硬件","几千","几千万","就","之间","软件","gitee","之父","多个","会","理工","大家","人","安装","的","高效","开发者","所以","特性","看到","了","和","这款","行","之后","管理软件","每次","应用","千万","在","管理工具","设计","比如","提交","码云","因","都","并","github","命令","代码","功能","完成"," ","linux","非常简单","哪里","等等","install","linus","系统","广泛应用","$","贡献","合并","上万","国内","使用","版本","自动","成千上万","sudo","，","听到","网站","进行","新","人工","项目"],"title":"Git","title_tokens":["git"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_1","text":"《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。","text_tokens":["开发","自带","clone","下载","21","就","方式","用","有","浏览","gitee","是","ros2","中","代码","会","https","多","记事","：","浏览器","一个","里边","集成"," ","另外","》","git","还","复杂","系统",":","课程","的","$","文件夹","更","入门","查看","vscode","com","《","下载方式","这样","tutorials","和","如果","很多","环境","guyuehome","件夹","/","_","好","，","文件","记事本","讲","略显",".","这里","推荐","—","源码","。"],"title":"下载教程源码","title_tokens":["下载","教程","源码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode","text":"Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download","text_tokens":["开发","studio","下载","微软","推出","年","快速","源代码","编辑","是","功能强大","代码","搭建","windows","组件","轻量","一个","功能","丰富","：","可以","https"," ","编辑器","linux","简称","macos","visualstudio","download","强大","扩展","官方网","code","链接","系统","神兵",":","2015","的","非常","官方","vscode","官方网站","但","com","visual","利器","和","操作","操作系统","/","，","。","成为","网站",".","支持","项目","、","在"],"title":"VSCode","title_tokens":["vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode_1","text":"为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。","text_tokens":["开发","与","ros2","功能","可以","我们","扩展","插件","还","安装","便于","调试","一系列","的","为了","一系","后续","vscode","系列","，","。","无限"],"title":"VSCode插件配置","title_tokens":["vscode","配置","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_2","text":"","text_tokens":[],"title":"中文语言包","title_tokens":["语言","语言包","中文"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#python","text":"","text_tokens":[],"title":"Python插件","title_tokens":["python","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#c","text":"","text_tokens":[],"title":"C++插件","title_tokens":["c++","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#cmake","text":"","text_tokens":[],"title":"CMake插件","title_tokens":["插件","cmake"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode-icons","text":"","text_tokens":[],"title":"vscode-icons","title_tokens":["vscode","-","icons"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros","text":"","text_tokens":[],"title":"ROS插件","title_tokens":["ros","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#msg-language-support","text":"","text_tokens":[],"title":"Msg Language Support","title_tokens":["msg","language"," ","support"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#visual-studio-intellicode","text":"","text_tokens":[],"title":"Visual Studio IntelliCode","title_tokens":["intellicode","studio","visual"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#urdf","text":"","text_tokens":[],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#markdown-all-in-one","text":"VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["开发","配置","以上","搜索","自己","只","可以","众多","网上","大家","作为","插件","也","的","最","个人","vscode","喜欢","环境","出","，","。","推荐","支持","在"],"title":"Markdown All in One","title_tokens":["all","one"," ","in","markdown"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/","text":"DDS Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。 通信模型 DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。 DDS DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。 什么是DDS 好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是 Data Distribution Service ，也就是 数据分发服务 ，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。 DDS在ROS2中的应用 DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。 质量服务策略QoS DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是 Domain ，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为 数据提供者和接收者之间的合约 。 具体会有哪些策略？比如： DEADLINE 策略，表示通信数据必须要在每次截止时间内完成一次通信； HISTORY 策略，表示针对历史数据的一个缓存大小； RELIABILITY 策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式； DURABILITY 策略，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。 案例一：在命令行中配置DDS 我们先来试一试在命令行中配置DDS的参数。 启动第一个终端，我们使用best_effort创建一个发布者节点，循环发布任意数据，在另外一个终端中，如果我们使用reliable模型订阅同一话题，无法实现数据通信，如果修改为同样的best_effort，才能实现数据传输。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort 如何去查看ROS2系统中每一个发布者或者订阅者的QoS策略呢，在topic命令后边跟一个\"--verbose\"参数就行了。 $ ros2 topic info /chatter --verbose 案例二：DDS编程示例 接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。 运行效果 启动两个终端，分别运行发布者和订阅者节点： $ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub 可以看到两个终端中的通信效果如下，和之前貌似并没有太大区别。 看效果确实差不多，不过底层通信机理上可是有所不同的。 发布者代码解析 我们看下在代码中，如果加入QoS的配置。 learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , }, 订阅者代码解析 订阅者中的QoS配置和发布者类似。 learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], }, DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们主要带领大家认识DDS，更多使用方法和相关内容，大家也可以参考下边的链接进行学习。 参考链接 https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["服务","符合","design","bv12z4y167w2","multiple","尝试","1989","终端","重要","全局","二种","内容","uml","；","所有","同一个","提示","我们","》","存在","看","s","py","驱动","(","课程","晚","的话","'","情况","subscribernode","结构","三种","这里","程序","无论如何","带领","红色","该用","有些","由于","而言","middleware","qosreliabilitypolicy","发布","string","super","on","商业","航拍","有","入个","点对点","截止","中","技术","解决","兼容性问题","get","具体","焕然一新","提到","强调","scripts","容性","一","核心","要","时候","布式","（","之前","建模","“","第四","接收","修改","两个","参考","合约","框架","企业","真正","时","好","传送","一下","成为","或","模式","主要","different","coding","真实","html","与","焕然","学习","就","资源","忽略","实时","之间","软件","多个","出现","）","语言","它","问题","完整","大家","接口标准","决策","完整性","定位","指令","视频","的","中间件","性能","单独","data","为了","个人","第一个","python3","垂直","架构","看到","它们","先进","数据通信","通信模型","去","_","每次","大","rclpy","回调","库","第三","应用","create","高通","run","在","设计","qoshistorypolicy","还有","方式","解析","各种","初始化","这种","供者","有所不同","编译","分布式","速度","publisher","模型","医疗","下","专利","rmw","omg","reliability","旋转","entry","utf","logger","其他","在于","四大","版本","冰山","关心","info","guides","所","自动","定时器","哪些","self","航空","打开","必须","合适","ros1","发送给","不好","第四种","你","发送","设置","而且","当然","电脑","服务质量","std","入口","基本","可能","于","不管","另外","编写","{","一条","”","做","根据","可","msg","为例","灵活","复杂","主讲","spin","hello","更","火锅","影响","有人","但","示例","不变","什么","publish","how","文件","表示","。","history","非常复杂","需要","无人机","转移","肯定","遥控器","加入","派","尽可","流畅性","让","来看","兴趣","函数","过程","传输","流畅","name","about","居","某一","之上","是","一步","publishing","下边","可信","众多","进一步","import","作为","通路","向","来到","bin","技术标准","把","管理","几种","黑客","像","并行","刚才","集中处理","distribution","机器","上层",".","听说","类型","int32","海军","知道","现在","神经网","既然","effort","架构图","啥意思","默认","许多","会","dds","前边","丰富","只","连接数","规模","想","遥控","组成","无人","node","主","后边","}","树莓","明显","echo","行业","介绍","或者","高效","class","具体地址","优化","usr","特性","相关","《","课","了","组成部分","很多","对","选用","www","domain","/","统一","消息","env","跟","对象","指定","理解","终于","topic","包","授权","时间","pub","占用","字符串",",","价值","麻烦","历史数据","每","来","并","类似","选择","代码","不多"," ","意思","建设","效率",":","$","callback","丢失","入门","交通","能响","综合","得","使用","感兴趣","com","无用","以","没有","据传","欢迎","人机","将","那该","42","新","建模语言","说明","兼容性","分布","开发","那","名","集中","更加","last","广泛","不同","主讲人","可是","靠","变化","连接","databus","第一种","提供","加密","标准","列出","、","貌似","等","便于","字符","啦","[","不感兴趣","这些","数以千计","第二","实现","冰山一角","能力","到","组织","尽量","构图","qos","有所","拿","地","video","—","直接","能源","全称","二","best","\\","verbose","进入","节点","数据通","蓝色","运行","不","方法","成立","en","缓存","信赖","depth","退出","保证","黑入","哪","后","信息","差不多","也","链接","所有人","i","非常","保障","空间","循环","ros","4g","提高","profile","周期","def","环境","避免","1","位置","讲","纠结","模块","如何","当","父类","找到","with","兼容","通常","--","发生变化","领域","者","同样","机器人","corba","生态","快速","启动","类","日志","第一","ros2","瓶颈","已经","半天","场景","sub","给","单位","接下","优势","大小","使命","无论","任","带","中心","之","收到","subscription","vendors","办法","每条","确实","__","试一试","]","所以","就是","本身","包含","掉","如下","上边","不是","案例","行","区别","关系","接收者","articles","四种","各个","按照","相当于","一旦","分发","但是","没","内","console","处理速度","比如","升级","可信赖","init","应该","交换","都","提供者","执行","deadline","生变","等待","初始","功能","此时","至关重要","国防","客户","implementations","感知","举","msgs","关闭","相当","回忆","广泛应用","系统","放在","定时","concepts","频繁","应用程序","预测","质量","还是","这样","任意","性","docs","如果","上","感兴","一套","话题","durability","进行","第三种","bilibili","运动","分别","程度","分组","timer","参数","有点","通信","一起","创建","年","过","原则","适应","差别","满足","为","定义","编程","神经网络","多","好吃","一个","策略","chatter","setup","控制","处","机理","绑定","至关","这","发生","针对","那个","每个","地址","最为","=","service","专门","小组","只是","增长","工业","args","更好","查看","用户","重大","destroy","门","并且","认识","动作","太多","延时","强制","例子","guyuehome","处理","需求","接下来","python","能够","宗旨","第二种","销毁","高速","开源","神经","learning","不过","服务器","客户端","working","边","呢","大大","自己","可以","说了半天","复用","一次","一新","他们","helloworld","一些","才能","下来","部分","提","8","中间","一种","由","最早","行为","厂商","一定","我","异常","很","大量","不用","keep","\"","命令行","讲到","双方","增多","请求","点","常用","只有","务器","图像","from","像是","world","驾驶","整个","保证数据","处于","main","2004",")","数据传输","维护","美国","对应","listener","样","就行","古月","角色","其实","尽力","网络","吃","大大提高","送给","就行了","太","正常","体","points","要求","@","-","和","订阅","一角","服务端","这个","运转","0.5","效果","先","heard","发布者","输出","成","一样","这么","尽可能","秒","借助","无法","21","华为","看下","用","接口","broker","填充","!","导致","命令","none","5g","配置","https","qosprofile","：","完成","帧","org","id","舰船","通过","当于","to","到底","publishernode","？","reliable","顺利","建立","互相","sysml","选项","同一","*","作者","humble","#","图","历史","%","广播","可见","，","受到","过去","shutdown","底层","通道","数据"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds","text":"Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。","text_tokens":["服务","神经","终于","神经网","学习","21","通信","过程","机器人","都","来","是","ros2","中","主讲人","dds","前边","变化","靠","完成","它","神经网络"," ","具体","我们","》","大家","、","当于","他们","来到","相当","古月","主讲","最为","hello","系统","课程","的","网络","ros","入门","实现","《","重大","我","动作","好","，","欢迎","—","。","讲","话题","相当于","底层","机器","讲到","在"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_1","text":"DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。","text_tokens":["第四种","服务","程度","集中","有点","通信","而且","更加","二种","为","多","连接","一个","变化","第一种","提供","所有","可能","databus","处","好吃","我们","列出","一条","这","发生","针对","每个","地址","增长","不感兴趣","更","第二","实现","火锅","到","影响","有人","但","并且","太多","拿","处理","三种","这里","能够","。","有些","需要","第二种","发布","不过","兴趣","节点","服务器","客户端","点对点","是","中","解决","一步","自己","可以","具体","进一步","作为","通路","也","核心","所有人","之前","非常","第四","一种","几种","由","并行","框架","一定","异常","真正","时","集中处理","很","不用","传送","成为","当","增多","双方","请求","常用","知道","务器","找到","与","像是","发生变化","就","整个","忽略","软件","许多","第一","会","瓶颈","dds","它","只","连接数","规模","问题","想","优势","明显","角色","其实","中心","之","的","收到","吃","具体地址","优化","性能","单独","每条","正常","就是","包含","架构","了","和","先进","很多","订阅","行","通信模型","关系","四种","服务端","这个","每次","运转","第三","一旦","消息","但是","在","处理速度","无法","broker","应该","麻烦","都","并","这种","类似","各种","生变","导致","速度","模型"," ","客户","旋转","效率","系统","建立","其他","能响","在于","使用","感兴趣","这样","关心","以","如果","所","上","没有","感兴","广播","，","受到","可见","必须","进行","ros1","第三种","通道","数据"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_1","text":"DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。","text_tokens":["高速","模块","比如","通常","借助","领域","驾驶","通信","方式","交换","都","并","广泛","满足","ros2","会","已经","dds","一个","医疗","可以"," ","国防","存在","感知","等","决策","广泛应用","定位","之前","的","非常","这些","交通","频繁","预测","和","它们","不是","很多","自动","很","地","好","需求","，","航空","。","数据","应用","新","能源","需要","在"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_2","text":"好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是 Data Distribution Service ，也就是 数据分发服务 ，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。","text_tokens":["服务","兼容性","分布","开发","1989","通信","当然","年","过","满足","服务质量","为","uml","策略","一个","提供","于","可能","标准","我们","、","做","可","等","灵活","复杂","service","专门","啦","数以千计","组织","强制","地","需求","这里","。","全称","发布","呢","是","成立","中","技术","解决","兼容性问题","可以","说了半天","强调","容性","也","提","技术标准","布式","建模","中间","保障","管理","由","最早","环境","大量","好","distribution","一下","成为","听说","真实","海军","兼容","现在","实时","corba","软件","啥意思","2004","维护","已经","半天","dds","美国","语言","它","丰富","问题","完整","大家","使命","中心","介绍","行业","的","网络","高效","中间件","data","就是","垂直","课","和","订阅","/","统一","应用","分发","对象","设计","比如","还有","升级","价值","各种","来","分布式"," ","舰船","到底","意思","omg","系统","？","sysml","质量","以","一套","，","进行","建模语言","数据"],"title":"什么是DDS","title_tokens":["什么","dds","是"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#ddsros2","text":"DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。","text_tokens":["符合","那","开发","兼容性","你","分布","通信","重要","原则","差别","编程","多","所有","一个","基本","可能","不管","标准","我们","至关","根据","可","那个","驱动","工业","更","实现","能力","组织","但","用户","影响","不变","尽量","构图","这里","。","能够","无论如何","该用","红色","宗旨","由于","而言","肯定","middleware","转移","开源","加入","需要","让","进入","函数","过程","商业","有","蓝色","某一","之上","边","呢","是","不","大大","中","技术","自己","可以","保证","具体","下边","提到","复用","哪","容性","他们","也","部分","要","布式","把","中间","ros","4g","一种","提高","像","厂商","企业","刚才","机器","位置","上层","或","纠结","模块","如何","兼容","就","机器人","既然","生态","软件","架构图","ros2","会","多个","场景","dds","对应","给","问题","想","组成","大家","无论","接口标准","就行","任","的","中间件","性能","为了","大大提高","个人","所以","就是","上边","架构","了","和","组成部分","很多","对","选用","统一","这个","按照","应用","高通","没","在","一样","这么","设计","比如","华为","授权","时间","用","接口","都","来","每","选择","代码","分布式","5g","功能"," ","此时","至关重要","专利","建设","系统","放在","？","建立","其他","综合","得","使用","还是","四大","版本","这样","性","如果","上","，","、"],"title":"DDS在ROS2中的应用","title_tokens":["中","dds","在","的","应用","ros2"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#qos","text":"DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是 Domain ，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为 数据提供者和接收者之间的合约 。 具体会有哪些策略？比如： DEADLINE 策略，表示通信数据必须要在每次截止时间内完成一次通信； HISTORY 策略，表示针对历史数据的一个缓存大小； RELIABILITY 策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式； DURABILITY 策略，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。","text_tokens":["服务","分组","发送","参数","通信","一起","重要","全局","适应","电脑","满足","不同","为","定义","策略","；","多","一个","基本","提供","同一个","可能","所有","加密","另外","控制","我们","绑定","根据","便于","那个","针对","小组","晚","啦","的话","这些","更好","实现","门","qos","尽量","情况","延时","结构","例子","地","需求","表示","。","程序","history","直接","需要","无人机","遥控器","派","加入","尽可","流畅性","best","让","来看","流畅","传输","过程","节点","数据通","航拍","有","入个","截止","呢","是","不","中","缓存","信赖","发送给","可以","保证","具体","焕然一新","可信","黑入","众多","一次","一新","向","一些","才能","也","时候","要","之前","运动","空间","接收","ros","一种","黑客","行为","合约","一定","避免","好","机器","模式","如何","只有","图像","焕然","资源","机器人","之间","快速","effort","处于","保证数据","默认","出现","会","ros2","场景","dds","遥控","给","无人","完整","大小","大家","样","树莓","新","完整性","带","尽力","指令","的","网络","视频","办法","送给","特性","就是","体","掉","要求","了","和","对","数据通信","通信模型","关系","接收者","domain","各个","这个","每次","_","先","应用","但是","内","在","尽可能","成","这么","指定","理解","比如","时间","可信赖","占用","用","历史数据","提供者","这种","供者","deadline","选择","都","类似","导致","每","命令","配置","功能","：","模型","完成","帧","下"," ","此时","id","通过","客户","举","reliability","回忆","系统","？","reliable","顺利","互相","丢失","应用程序","同一","使用","质量","这样","无用","如果","所","没有","图","历史","哪些","，","durability","将","过去","必须","进行","合适","人机","不好","那该","数据"],"title":"质量服务策略QoS","title_tokens":["服务","策略","qos","质量"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_3","text":"我们先来试一试在命令行中配置DDS的参数。 启动第一个终端，我们使用best_effort创建一个发布者节点，循环发布任意数据，在另外一个终端中，如果我们使用reliable模型订阅同一话题，无法实现数据通信，如果修改为同样的best_effort，才能实现数据传输。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort 如何去查看ROS2系统中每一个发布者或者订阅者的QoS策略呢，在topic命令后边跟一个\"--verbose\"参数就行了。 $ ros2 topic info /chatter --verbose","text_tokens":["参数","终端","创建","通信","为","std","策略","一个","chatter","另外","我们","msg","实现","查看","qos","。","发布","best","verbose","传输","节点","数据通","呢","中","才能","修改","循环","\"","命令行","如何","int32","--","者","同样","effort","启动","第一","数据传输","ros2","dds","后边","echo","或者","的","第一个","就行了","data","试一试","-","订阅","数据通信","去","/","_","先","发布者","在","跟","topic","无法","pub","每","来","命令","配置","模型"," ","msgs","reliability","系统",":","$","reliable","同一","使用","任意","info","如果","据传","，","话题","42","数据"],"title":"案例一：在命令行中配置DDS","title_tokens":["命令","中","配置","dds","案例","：","命令行","一","在"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_4","text":"接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。","text_tokens":["world","尝试","通信","中","代码","配置","dds"," ","接下","我们","下来","为例","hello","之前","以","接下来","，","话题","。","在"],"title":"案例二：DDS编程示例","title_tokens":["二","编程","dds","案例","：","示例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_2","text":"启动两个终端，分别运行发布者和订阅者节点： $ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub 可以看到两个终端中的通信效果如下，和之前貌似并没有太大区别。 看效果确实差不多，不过底层通信机理上可是有所不同的。","text_tokens":["发布","learning","者","不过","终端","pub","节点","通信","启动","并","有所不同","运行","ros2","中","不同","可是","不多","：","sub","可以"," ","机理","貌似","helloworld","看","差不多","之前","$","的","确实","太","两个","如下","qos","有所","看到","和","没有","订阅","上","区别","_","，","大","效果","。","底层","发布者","分别","run"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_3","text":"我们看下在代码中，如果加入QoS的配置。 learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , },","text_tokens":["名","timer","设置","创建","原则","last","为","std","一个","入口","chatter","setup","编写","提示","我们","{","”","msg","s","=","py","字符","(","hello","spin","[","args","示例","'","destroy","qos","publish","guyuehome","文件","python","。","history","程序","需要","qosreliabilitypolicy","销毁","加入","发布","best","learning","让","string","super","函数","节点","name","居","中","depth","publishing","退出","get","import","scripts","后","信息","helloworld","bin","（","8","“","循环","profile","周期","def","keep","1","\"",".","类型","coding","点","父类","from","知道","world","effort","main","类",")","日志","ros2","）","已经","node","单位","主","}","古月","的","class","data","usr","__","如下","points","python3","@","-","www","/","_","0.5","回调","rclpy","库","数据","create","发布者","消息","输出","env","在","console","对象","秒","qoshistorypolicy","包","看下","pub","字符串","接口",",","init","初始化","填充","并","执行","编译","!","none","代码","配置","等待","初始","qosprofile","publisher","完成","功能","："," ","msgs","reliability","关闭","publishernode","系统",":","定时","entry","utf","reliable","callback","logger","选项","*","作者","com","info","如果","#","定时器","%","，","话题","self","打开","shutdown","进行","说明","、"],"title":"发布者代码解析","title_tokens":["发布者","解析","代码","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_4","text":"订阅者中的QoS配置和发布者类似。 learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], }, DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们主要带领大家认识DDS，更多使用方法和相关内容，大家也可以参考下边的链接进行学习。","text_tokens":["名","设置","创建","原则","last","内容","定义","std","多","一个","入口","chatter","setup","编写","提示","标准","{","我们","”","msg","s","=","py","spin","(","hello","复杂","[","只是","args","更","冰山一角","示例","'","destroy","qos","认识","subscribernode","guyuehome","处理","文件","python","。","history","程序","带领","非常复杂","需要","qosreliabilitypolicy","销毁","加入","发布","best","learning","\\","让","string","super","函数","节点","name","居","是","方法","中","depth","退出","可以","get","下边","import","scripts","后","信息","helloworld","bin","也","链接","（","i","非常","8","“","循环","profile","参考","def","keep","1","\"",".","主要","类型","coding","点","父类","from","知道","world","者","学习","effort","main","类",")","日志","ros2","）","dds","sub","node","listener","主","大家","}","古月","的","class","subscription","收到","data","]","usr","__","本身","相关","如下","points","python3","@","-","和","订阅","www","对","一角","/","_","回调","rclpy","库","数据","create","消息","发布者","heard","输出","env","console","对象","qoshistorypolicy","包","pub","接口",",","init","初始化","并","执行","类似","!","编译","none","代码","配置","等待","初始","qosprofile","功能","完成","："," ","msgs","reliability","关闭","系统",":","entry","utf","reliable","callback","logger","选项","*","使用","作者","com","冰山","info","#","%","话题","self","，","打开","shutdown","进行","说明","、"],"title":"订阅者代码解析","title_tokens":["代码","者","解析","订阅"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_5","text":"https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["middleware","html","design","bv12z4y167w2","with","multiple","on","about","working","en","ros2","dds","https","org"," ","implementations","to","rmw",":","vendors","concepts","ros","humble","com","-","docs","guides","www","how","articles","video","/","_",".","bilibili","different"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/","text":"工作空间：开发过程的大本营 大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是 工程 。 工作空间是什么 类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做 工作空间 。 所以工作空间是一个存放项目开发相关文件的文件夹，也是 开发过程中存放所有资料的大本营 。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。 创建工作空间 了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 自动安装依赖 我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init $ rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y 编译工作空间 依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。 设置环境变量 编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["所示","开发","workspace","开始","clone","一部","creating","参数","设置","如图所示","某些","创建","来讲","从","rosdepc","过","终端","2","update","qt","内容","了解","四个","定义","；","以上","一个","所有","b2","setup","编写","唯一","另外","我们","存在","p","”","点击","这","等","git","针对","还","啦","工具","这些","以及","到","w","y","visual","什么","并且","情况","guyuehome","结构","文件","接下来","这里","path","colcon","程序","。","能够","脚本","用于","需要","ws","让","creator","src","工作","多少","过程","概念","有","运行","是",">","en","中","eclipse","并列","自己","集成","很少","可以","生产","环境变","强调","编写程序","存放","信息","后","一些","下来","mkdir","不会","也","部分","链接","要","dev","数量","之前","i","未来","“","中间","管理","空间","得到","文件夹","ros","子目","大部","两个","apt","参考","放置","工程","允许","cd","tutorials","环境","时","资料","保存","1","机器",".","空间结构","\"","当","依赖","名称","html","pip3","3","from","找到","像是","studio","大部分","学习","--","就","警告","机器人","工具栏","rosdistro","日志","gitee","大本","多个","会","ros2","出现","自动生产","变量","当前","结果","目录","build","b","接下","~","完全","报错","大家","某","source","安装","echo","或者","的","为了","后续","所以","就是","相关","错误","如下","python3","-","了","和","人为","产生","不是","a","看到","操作","关系","根目录","社区","/","这个","_","在","一样","总体","比如","可执行文件","一点","下载","21","包","用","init","应该","各种","想要","都","编译","类似","执行","并","绝大部分","命令","代码","生效","sh","配置","https","功能","：","子","完成","里边","pip",".."," ","org","此时","中会","log","绝大","行文","install","否则","成功","接触","bashrc","至此","系统",":","里","$","大本营","任何","仅","子目录","典型","一部分","教程","选项","环境变量","使用","com","humble","rosdep","local","叫做","docs","如果","自动","#","均","缺少","件夹","sudo","，","进行","新","手动","项目","、"],"title":"工作空间","title_tokens":["空间","工作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_1","text":"大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是 工程 。","text_tokens":["开发","比如","creator","studio","学习","工作","就","某些","创建","有","过","应该","工具栏","想要","都","qt","内容","是","中","eclipse","会","一个","所有","里边","集成","编写"," ","此时","我们","大家","”","编写程序","点击","等","接触","之前","的","工具","“","这些","文件夹","选项","后续","以及","放置","工程","visual","叫做","和","环境","产生","件夹","文件","这个","，","程序","。","新","当","、","在"],"title":"工作空间：开发过程的大本营","title_tokens":["开发","：","的","工作","大本营","过程","空间","大本"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_2","text":"类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做 工作空间 。 所以工作空间是一个存放项目开发相关文件的文件夹，也是 开发过程中存放所有资料的大本营 。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。","text_tokens":["所示","开发","开始","一部","参数","如图所示","某些","创建","来讲","2","四个","定义","；","以上","一个","所有","b2","编写","唯一","另外","我们","存在","这","等","针对","到","w","情况","结构","文件","这里","。","脚本","用于","需要","ws","src","工作","过程","有","运行","是","中","并列","自己","可以","很少","集成","强调","存放","信息","后","一些","也","部分","要","dev","数量","未来","中间","管理","空间","得到","ros","文件夹","子目","大部","两个","放置","工程","允许","环境","时","资料","保存","1","机器","空间结构","名称","3","像是","大部分","就","警告","机器人","日志","大本","多个","会","结果","目录","build","b","完全","某","新","安装","或者","的","所以","就是","相关","错误","了","人为","和","产生","不是","a","操作","关系","这个","_","在","一样","总体","比如","可执行文件","一点","用","各种","都","并","编译","类似","执行","绝大部分","代码","功能","子","：","里边"," ","log","绝大","行文","install","成功","系统","里","大本营","子目录","典型","一部分","叫做","件夹","，","进行","根目录","项目","、"],"title":"工作空间是什么","title_tokens":["空间","什么","工作","是"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_3","text":"了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git","text_tokens":["clone","src","下载","工作","21","创建","概念","gitee","了解","ros2","命令","代码","https","一个","结果","：","可以"," ","接下","~","我们","p","mkdir","git","下来","dev",":","的","$","空间","教程","使用","如下","com","并且","-","了","和","cd","tutorials","guyuehome","/","接下来","，","_",".","ws"],"title":"创建工作空间","title_tokens":["空间","工作","创建"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_4","text":"我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init $ rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y","text_tokens":["pip3","from","--","src","下载","多少","从","rosdepc","有","init","各种","都","update","rosdistro","中","代码","会","依赖","一个","：","..","可以","pip"," ","我们","一些","install","安装","也","i","的","$","工具","apt","使用","y","humble","rosdep","python3","-","cd","自动","社区","sudo","，","path","手动"],"title":"自动安装依赖","title_tokens":["依赖","自动","安装"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_5","text":"依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。","text_tokens":["在","工作","就","过程","有","应该","编译","出现","命令","代码","中","自动生产","：","完成","build","可以"," ","生产","中会","~","报错","log","后","install","否则","安装","不会","成功","dev","或者","啦","的","$","任何","空间","apt","ros","文件夹","使用","如下","错误","python3","-","cd","看到","如果","自动","了","缺少","件夹","sudo","/","，","colcon","_","文件","。","依赖","、","ws"],"title":"编译工作空间","title_tokens":["空间","编译","工作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_6","text":"编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。","text_tokens":["找到","让","可执行文件","包","设置","就","终端","工作","创建","生效","执行","编译",">","sh","配置","变量","功能","：","当前","所有","setup","完成"," ","~","我们","环境变","、","后","行文","install","source","还","成功","ws","echo","系统","dev","bashrc","至此","的","$","\"","仅","为了","空间","环境变量","local","了","和","环境","#","均","文件","/","，","_","能够","。",".","需要","在"],"title":"设置环境变量","title_tokens":["环境","变量","设置","环境变","环境变量"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_7","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["tutorials","docs",":","https","workspace","org","creating","-","a","html"," ","/","ros",".","humble","en"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/","text":"功能包：开发过程的大本营 在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做 功能包 。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。 创建功能包 如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python 编译功能包 在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash 功能包的结构 功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。 C++功能包 首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。 Python功能包 C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["划分","开发","那","你","workspace","cmakerlists","creating","first","设置","一起","某些","重要","当然","创建","终端","判断","内容","不同","编程","；","多","一个","所有","入口","setup","可能","控制","编写","我们","降低","存在","”","率","这","等","看","混合","每个","继续","py","包中","txt","这些","语法","到","但","么","尽量","例子","结构","拿","黄豆","文件","视觉","python","表示","这里","。","colcon","程序","红豆","原理","需要","新创","ws","自主","learning","src","工作","过程","很快","name","三个","有","手上","呢","是","不","方法","中",">","运行","en","可以","拆分","复用","环境变","他们","编译成","一些","才能","信息","也","链接","your","时候","移动","数量","dev","要","把","分享","“","只想","空间","文件夹","ros","提高","两个","cmakelists","参考","<","别人","cd","刚才","环境","tutorials","时","袋子","机制","该","pkg","好","机器","普通","cmake",".","如何","包并","主要","当","举个","名称","类型","绿豆","依赖","声明","html","--","就","机器人","之间","软件","立刻","新创建","xml","大本","ros2","会","必然","之一","语言","新建","变量","很难","一颗","给","只","build","想","~","c","大家","source","type","描述","除此","或者","介绍","指令","起来","的","头疼","包是","a","正常","版权","找","所以","就是","相关","如下","包含","points","后续","耦合","看到","了","-","很多","不是","出来","和","译成","关系","社区","名字","之后","/","这个","_","其中","而是","越","某种","create","但是","在","一样","是不是","跟","豆子","比如","下载","包","可执行文件","还有","分析","用","解析","各种","都","并","编译","来","放到","执行","发现","代码","命令","配置","https","功能","：","完成","org","里边"," ","拿出","颜色","下","五颜六色","感知","行文","install","规则","型","放在",":","里","$","c++","大本营","？","之外","除此之外","entry","首先","教程","环境变量","是否是","得","使用","还是","humble","版本","local","叫做","package","docs","如果","#","是否","bash","件夹","假设","讲解","，","ament","包该","将","必须","分别","源码","说明","、","导航"],"title":"功能包","title_tokens":["包","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_1","text":"在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做 功能包 。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。","text_tokens":["划分","你","一起","某些","重要","当然","不同","；","多","一个","可能","控制","我们","降低","率","等","混合","每个","包中","这些","到","么","尽量","例子","拿","黄豆","文件","视觉","。","红豆","原理","需要","自主","很快","三个","有","手上","是","不","方法","中","可以","拆分","复用","他们","也","时候","移动","数量","把","分享","只想","文件夹","ros","提高","别人","时","袋子","机制","机器","普通","如何","当","举个","名称","绿豆","就","机器人","之间","软件","立刻","ros2","会","之一","很难","一颗","给","只","想","大家","起来","的","头疼","找","所以","就是","耦合","看到","了","很多","不是","出来","关系","社区","这个","其中","而是","越","某种","但是","在","是不是","豆子","比如","下载","包","用","都","并","放到","发现","代码","功能"," ","拿出","颜色","五颜六色","感知","放在","里","教程","得","使用","叫做","如果","件夹","假设","，","包该","源码","说明","、","导航"],"title":"功能包：开发过程的大本营","title_tokens":["开发","功能","：","的","包","大本营","过程","大本"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_2","text":"如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python","text_tokens":["那","跟","比如","learning","--","src","包","就","创建","终端","name","分别","新创建","呢",">","ros2","中","命令","新建","；","功能","一个","：","build","可以"," ","~","我们","c","type","新创","ws","dev","或者","指令","包是","$","的","c++","？","使用","相关","<","还是","版本","-","package","和","如果","cd","#","名字","pkg","/","这个","_","表示","python","，","这里","ament","cmake","create","如何","。","在"],"title":"创建功能包","title_tokens":["功能","包","创建"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_3","text":"在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash","text_tokens":["src","工作","包","创建","编译","运行","代码","配置","变量","功能","：","完成","所有","build","可以","编写"," ","setup","~","我们","环境变","才能","install","source","ws","继续","dev","包中","的","$","空间","环境变量","正常","local","cd","和","环境","#","之后","bash","好","/","，","_","colcon",".","需要","在"],"title":"编译功能包","title_tokens":["编译","包","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_4","text":"功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。","text_tokens":["那","包","创建","分析","判断","来","新创建","呢","功能","一个","下","我们","的","？","文件夹","是否是","两个","刚才","不是","是否","结构","件夹","文件","，","普通","。","包并","如何","新创"],"title":"功能包的结构","title_tokens":["结构","的","包","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#c","text":"首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。","text_tokens":["声明","cmakerlists","需要","设置","包","各种","编译","xml","内容","必然","是","运行","代码","中","cmake","功能","：","下"," ","存在","看","才能","描述","规则","要","c++","的","txt","首先","语法","两个","版权","cmakelists","所以","主要","如下","包含","使用","package","和","该","文件","，","其中","。","必须",".","如何","依赖","类型","在"],"title":"C++功能包","title_tokens":["c++","包","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#python","text":"C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。","text_tokens":["一样","声明","可执行文件","包","还有","解析","有","各种","编译","执行","是","不","不同","会","xml","内容","语言","配置","编程","中","功能","：","入口","setup","里边","给"," ","我们","大家","”","编译成","行文","一些","这","信息","描述","也","型","py","除此","介绍","c++","的","之外","“","entry","除此之外","两个","版权","后续","所以","但","主要","包含","points","版本","使用","package","译成","和","讲解","文件","python","，","_","将","。","程序",".","如何","但是","源码","依赖","需要","在"],"title":"Python功能包","title_tokens":["python","包","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_5","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["workspace","html","creating","first","en","ros2","https","org"," ","your",":","ros","humble","tutorials","docs","-","a","package","/","."],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/","text":"节点 机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。 通信模型 完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。 案例一：Hello World节点（面向过程） ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。 运行效果 大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ], 创建节点流程 代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。 案例二：Hello World节点（面向对象） 所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。 运行效果 接下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ], 创建节点流程 所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。 案例三：物体识别节点 没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。 运行效果 在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 Attention 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。 代码解析 在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ], 案例四：机器视觉识别节点 用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。 运行效果 启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 Attention 如果是在虚拟机中操作，需要进行以下设置： 1. 把虚拟机设置为兼容USB3.1； 2. 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。 代码解析 相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ], 节点命令行操作 节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息 思考题 现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["终端","重要","推动","腿","相比","三","；","我们","mask","看","py","(","驱动","调试","课程","circle","任务","的话","array","上去","y","'","结构","这里","程序","推荐","红色","岂","去除","联系","ws","而言","h","发布","src","设备","super","hierarchy","if","有","然后","一线","可移植性","中","编码方式","显示","稍微","get","具体","看上去","计算","共同","网上","scripts","一","时候","（","布式","dev","要","之前","findcontours","“","得到","修改","bgr","两个","及","参考","<","框架","时","读取","面向对象","好","出","一下","成为","coding","html","学习","就","实时","之间","cvtcolor","sleep","chain","）","出现","语言","它","模块化","问题","完整","大家","进程","upper","一台","指令","的","python3","看到","出来","通信模型","轮子","去","_","jpg","rclpy","库","来源","run","面积","在","至","是不是","设计","可读","一点","还有","重点","解析","方式","各种","初始化","想要","再","编译","部门","这种","contours","分布式","150","速度","相同","模型","apple","下","颜色","注意","install","状态","不能","continue","之外","entry","utf","webcam","logger","请","物理","后勤","中心点","info","sudo","lower","打开","self","java","后勤部","更多要","你","开始","列表","发送","设置","boundingrect","框架图","考题","某些","当然","角度","电脑","像头","四个","摄像","入口","框会","可能","编写","另外","{","”","做","依然","根据","可","为例","虽然","还","可读性","复杂","spin","hello","二值化","所在","numpy","关注","更","true","w","但","示例","inrange","负责","编程语言","过来","操作系统","文件","视觉","表示","。","bgr2hsv","destroyallwindows","需要","加入","让","来看","远程","函数","过程","opencv","name","经常","概念","居","识别","detect","是","调整","转换","众多","attention","import","pyhton","却","细胞","bin","范围","知其然","把","左右","apt","绿点","shape","坐标","像","先拉","实际","刚才","该","窗口","眼睛","0","机器","相机",".","更为","名称","imread","知道","思考","下限","现在","图片","物体","既然","上角","可视","像素","会","就让","对于","node","主","组成","载体","某","安装","color","或者","保持","介绍","起来","class","usr","了","a","www","这款","方便","/","熟悉","env","动态","对象","理解","还会","包","时间","字符串","分析",",","cv2","每","并","来","类似","前","检测","代码","为止","nodes","马","乃至","吧"," ","同理","难","5","for","着急",":","$","as","噪声","综合","得","使用","com","以","是否","将","说明","分布","那","开发","面向","骡子","从","videocapture","被","更加","2","不同","简单","连接","变化","提供","摄像头","比喻","等","字符","img","啦","[","这些","数值","实现","到","虚拟","—","溜溜","重新","time","理过","二","监控","节点","int","cap","运行","不","方法","en","understanding","职责","算是","退出","后","信息","合理","也","链接","移动","一节","未来","工人","保障","思考题","循环","ros","只不过","周期","编码","def","宽","ok","90","环境","approx","改成","勾勒","机制","1","ruby","以下","纠结","如何","模块","当","位于","步骤","父类","找到","retr","兼容","50","用到","+","知其所以然","机器人","看上","启动","类","自然","左上","日志","ros2","结果","给","身体","接下","多种","总体而言","后勤部门","255","阈值","中心","这份","这座","收到","流程","]","__","虚拟机","所以","就是","生成","如下","更多","此处","不是","案例","没错","其中","图像识别","会弹","某种","但是","没","console","总体","桌子","usb3.1","比如","可执行文件","hsv","init","应该","每一项","xy","都","执行","等待","初始","功能","x","具备","成功","关闭","中将","系统","放在","helloworldnode","除此之外","地方","高","前后左右","还是","这样","可视化","docs","如果","上","进行","运动","分别","点画","苹果","参数","整体","呀","一起","通信","创建","外界","过","孤立","查询","为","做到","编程","多","一个","list","setup","控制","唯一","路径","128","摇杆","这","各不相同","发生","计算机","每个","最为","=","获取","只是","即可","args","可移植","更好","查看","destroy","认识","并且","guyuehome","处理","python","接下来","180","销毁","learning","工作","不过","read","red","呢",">","一张","疑惑","心里","工厂","想到","可以","hcx","编写程序","他们","helloworld","一些","下来","8","中间","太小","不要","一种","休眠","综合体","tutorials","一帧","很","不用","总结","imshow","看看","\"","命令行","硬件","点","常用","from","图像","world","回到","左上角","打印","关于","drawcontours","厂房","一项","main","云端",")","轮廓","而已","waitkey","图像处理","b","命名","搭载","例程","好像","移植性","古月","移植","除此","处理过程","最大","太","正常","模拟","ret","所以然","points","@","-","和","人为","操作","名字","这个","0.5","取","效果","先","四","输出","算机","上限","一样","home","21","合体","接口","用","改变","!","命令","none","发现","配置","https","org","：","完成","通过","cnt","行文","到底","独立","里","c++","？","object","互相","while","选项","保持联系","*","np","作者","humble","绿色","叫做","#","，","in","shutdown","前后","image","、"],"title":"节点","title_tokens":["节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_1","text":"机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。","text_tokens":["那","工作","整体","就","一起","机器人","合体","节点","各种","每一项","一项","是","中","功能","一个","连接","给"," ","众多","我们","通过","”","一些","细胞","的","“","这些","ros","综合","到","就是","像","综合体","了","机制","名字","，","取","机器","。","成为","在"],"title":"节点","title_tokens":["节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_2","text":"完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。","text_tokens":["分布","那","你","参数","整体","某些","从","一起","外界","推动","角度","腿","像头","不同","查询","摄像","编程","；","多","连接","一个","提供","可能","控制","唯一","摄像头","另外","我们","”","做","摇杆","根据","等","这","各不相同","虽然","比喻","还","计算机","每个","复杂","获取","任务","这些","更","实现","到","但","认识","编程语言","操作系统","文件","python","接下来","—","。","程序","需要","监控","让","来看","远程","工作","节点","有","一线","运行","是","不","中","职责","算是","工厂","想到","可以","具体","计算","共同","信息","他们","却","细胞","下来","也","时候","移动","布式","左右","“","工人","保障","得到","环境","时","该","眼睛","机器","ruby","看看","更为","如何","硬件","当","名称","位于","找到","就","机器人","既然","厂房","自然","云端","语言","它","结果","身体","b","组成","接下","完整","搭载","命名","进程","载体","某","一台","后勤部门","除此","或者","这座","的","就是","生成","了","看到","a","不是","和","人为","这款","轮子","去","操作","这个","算机","在","桌子","设计","还会","比如","可执行文件","还有","想要","并","都","执行","编译","每","来","部门","分布式","配置","速度","功能","：","乃至","相同","完成"," ","通过","行文","到底","系统","放在","状态","独立","里","c++","之外","除此之外","互相","地方","物理","前后左右","这样","后勤","叫做","上","，","java","后勤部","运动","分别","前后","、"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world","text":"ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。","text_tokens":["开始","world","打印","从","字符串","节点","当然","终端","来","并","是","不","ros2","中","简单","功能","一个","编写"," ","我们","例程","”","编写程序","复杂","最为","字符","hello","的","“","循环","实现","就是","到","了","，","程序","。","先","需要"],"title":"案例一：Hello World节点（面向过程）","title_tokens":["（","面向","hello","案例","：","world"," ","过程","节点","一","）"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_3","text":"大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["learning","骡子","world","知其所以然","过程","终端","节点","分析","打印","字符串","然后","再","编译","运行","是","执行","ros2","命令","代码","来","做到","中","马","可以","node"," ","下","我们","通过","大家","”","后","helloworld","看","着急","也","成功","字符","hello","知其然","课程","的","$","“","循环","不要","实现","所以","所以然","先拉","看到","出来","好","这个","，","_","效果","。","先","如何","溜溜","run","在"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_4","text":"这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ],","text_tokens":["面向","设置","创建","入口","setup","控制","编写","我们","{","”","=","py","(","hello","[","args","实现","示例","destroy","'","guyuehome","文件","python","。","程序","需要","time","销毁","加入","发布","让","learning","来看","函数","过程","节点","居","呢","是","运行","get","import","scripts","后","信息","helloworld","bin","8","“","循环","休眠","def","ok","\"",".","如何","coding","点","from","知道","world","sleep","main","类",")","日志","ros2","node","主","古月","的","]","usr","正常","如下","points","python3","@","-","www","/","这个","_","0.5","rclpy","库","输出","env","console","对象","包","时间","方式",",","接口","init","初始化","并","编译","!","none","代码","配置","初始","功能","：","完成","下"," ","关闭","系统",":","entry","？","utf","logger","while","选项","*","使用","作者","com","info","#","是否","，","打开","shutdown","进行","说明"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_5","text":"代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。","text_tokens":["销毁","理解","面向","就","模块","一点","用到","学习","函数","创建","过程","重要","经常","节点","接口","有","初始化","过","应该","想要","并","这种","方法","是","出现","中","代码","会","发现","编程","方式","初始","功能","一个","：","做到","对于","可以","稍微","具体"," ","难","模块化","我们","pyhton","大家","做","简单","虽然","关闭","复杂","系统","或者","的","未来","c++","的话","更","流程","实现","编码","使用","这样","如果","很","不用","总结","，","一下","这里","。","机器","先","纠结","机器人","但是"],"title":"创建节点流程","title_tokens":["节点","流程","创建"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world_1","text":"所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。","text_tokens":["开发","对象","面向","可读","比如","就","看上","方式","更加","可移植性","ros2","中","代码","会","编程","可以"," ","看上去","我们","大家","具备","一些","移植性","虽然","可读性","也","复杂","移植","调试","起来","的","可移植","更","上去","更好","所以","使用","这样","刚才","了","和","改成","方便","面向对象","，","。","推荐","但是","在"],"title":"案例二：Hello World节点（面向对象）","title_tokens":["二","（","hello","案例","面向","：","world","对象","面向对象"," ","节点","）"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_6","text":"接下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["learning","world","打印","终端","字符串","节点","运行","ros2","中","调整","：","可以","node"," ","接下","”","后","helloworld","下来","成功","字符","hello","的","$","class","“","循环","还是","看到","接下来","一下","_","，","效果","。","run","在"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_7","text":"功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ],","text_tokens":["面向","设置","创建","变化","一个","入口","setup","控制","编写","我们","{","”","看","发生","虽然","=","py","spin","(","hello","[","args","实现","示例","destroy","'","guyuehome","结构","文件","python","程序","。","需要","time","销毁","加入","发布","让","learning","super","函数","节点","name","居","运行","退出","get","具体","import","scripts","后","信息","helloworld","bin","8","“","循环","休眠","def","ok","时","面向对象","一下","\"",".","coding","点","父类","from","知道","world","sleep","main","类",")","日志","ros2","node","主","古月","这份","的","class","]","usr","__","正常","如下","points","python3","@","-","了","www","/","_","0.5","rclpy","库","但是","输出","env","console","一样","对象","包","时间","方式",",","接口","init","初始化","并","编译","!","none","代码","配置","等待","初始","功能","：","完成"," ","关闭","系统",":","helloworldnode","entry","utf","logger","while","选项","*","使用","作者","com","info","#","是否","，","self","打开","shutdown","进行","说明"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_8","text":"所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。","text_tokens":["而言","销毁","总体","步骤","是不是","world","不过","还有","打印","创建","机器人","节点","方式","接口","初始化","并","改变","是","四个","而已","中","为止","编程","疑惑","编码方式","初始","功能","心里","一个","完成","吧"," ","具体","大家","依然","做","这","一些","总体而言","关闭","不能","hello","的","只是","任务","只不过","实现","编码","所以","到","得","了","不是","，","这里","机器","。"],"title":"创建节点流程","title_tokens":["节点","流程","创建"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_9","text":"没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。","text_tokens":["找到","苹果","图片","就","过程","机器人","节点","从","识别","来","中","一张","一个","编写"," ","接下","我们","网上","通过","下来","为例","的","任务","模拟","实现","实际","以","没错","视觉","接下来","，","机器","。","先"],"title":"案例三：物体识别节点","title_tokens":["三","案例","：","物体","节点","识别"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_10","text":"在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 Attention 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。","text_tokens":["苹果","被","为","一个","框会","路径","我们","=","py","(","啦","即可","'","处理","表示","—","。","重新","需要","ws","learning","src","opencv","然后","识别","运行","中","可以","attention","hcx","后","dev","把","中间","apt","修改","绿点","实际","tutorials","勾勒","窗口","出",".","imread","图像","用到","图片","就","可视",")","轮廓","ros2","node","图像处理","例程","安装","中心","指令","的","如下","python3","-","看到","出来","/","这个","_","jpg","库","会弹","run","在","home","21","cv2","编译","前","代码","：","apple"," ","注意","install","成功","$","请","object","使用","绿色","可视化","中心点","#","sudo","，","将","image"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_11","text":"在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ],","text_tokens":["更多要","点画","苹果","boundingrect","设置","从","创建","2","为","一个","list","入口","setup","编写","128","我们","mask","{","=","py","spin","(","img","二值化","所在","numpy","circle","[","array","关注","args","数值","实现","w","示例","inrange","y","'","destroy","guyuehome","处理","文件","python","180","。","程序","bgr2hsv","红色","destroyallwindows","去除","需要","ws","理过","销毁","加入","h","让","learning","src","hierarchy","过程","opencv","节点","概念","if","居","函数","int","识别","red","detect","是","中","显示","转换","退出","get","具体","计算","import","hcx","scripts","后","helloworld","一些","bin","范围","dev","8","findcontours","太小","bgr","shape","得到","循环","及","坐标","def","<","宽","tutorials","90","approx","勾勒","读取","imshow","0","1","机器","\"",".","如何","coding","点","imread","图像","from","retr","下限","知道","图片","左上角","+","机器人","关于","cvtcolor","chain","上角","drawcontours","main","类","左上",")","像素","轮廓","ros2","出现","waitkey","node","图像处理","主","例程","大家","upper","255","古月","阈值","处理过程","color","中心","的","class","]","模拟","usr","如下","points","python3","@","更多","了","此处","-","不是","www","和","出来","/","这个","_","jpg","rclpy","效果","库","图像识别","面积","env","在","上限","console","对象","home","包","重点","21","hsv","cv2","接口",",","init","xy","初始化","并","来","contours","!","编译","检测","none","代码","150","配置","等待","x","功能","初始","模型","：","完成","apple"," ","颜色","通过","cnt","5","for","关闭","系统",":","continue","entry","utf","as","logger","噪声","object","选项","高","*","np","作者","com","使用","info","#","lower","，","打开","in","将","shutdown","进行","说明","image"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_12","text":"用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。","text_tokens":["动态","图像","苹果","图片","呀","物体","机器人","节点","用","有","应该","识别","类似","不","像头","摄像","就让","问题","接下","摄像头","颜色","我们","好像","合理","下来","还","或者","的","太","读取","接下来","，","眼睛","机器","其中","。","进行","没"],"title":"案例四：机器视觉识别节点","title_tokens":["案例","：","视觉","节点","机器","四","识别"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_13","text":"启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 Attention 如果是在虚拟机中操作，需要进行以下设置： 1. 把虚拟机设置为兼容USB3.1； 2. 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。","text_tokens":["至","usb3.1","learning","兼容","设备","设置","就","终端","实时","节点","物体","启动","2","识别","运行","是","像头","ros2","中","为","摄像","；","连接","一个","：","可以","node"," ","摄像头","attention","后","注意","可","成功","中将","移动","驱动","把","$","的","webcam","啦","object","虚拟机","如下","并且","如果","#","该","操作","_","，","虚拟","1","以下","。","进行",".","红色","run","需要","在"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_14","text":"相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ],","text_tokens":["点画","苹果","boundingrect","设置","从","创建","videocapture","2","相比","像头","为","摄像","变化","list","入口","setup","编写","摄像头","128","{","mask","=","py","(","驱动","img","二值化","所在","numpy","circle","[","array","args","数值","true","w","示例","inrange","y","destroy","'","并且","guyuehome","处理","文件","python","这里","180","程序","。","bgr2hsv","红色","去除","需要","销毁","加入","h","让","learning","hierarchy","函数","opencv","read","节点","if","居","int","cap","识别","red","detect","是","中","显示","转换","get","计算","import","scripts","后","信息","helloworld","一些","bin","范围","之前","8","findcontours","太小","修改","bgr","shape","得到","周期","及","坐标","def","<","宽","ok","90","approx","一帧","勾勒","读取","imshow","0","1","相机","\"",".","coding","点","from","图像","retr","下限","知道","50","图片","左上角","+","cvtcolor","chain","上角","drawcontours","main","类","左上",")","像素","轮廓","ros2","出现","waitkey","node","图像处理","主","upper","255","古月","阈值","color","最大","中心","的","class","]","usr","ret","如下","points","python3","@","-","了","和","www","出来","/","_","rclpy","效果","库","来源","面积","env","上限","console","对象","包","hsv","cv2","接口",",","init","xy","初始化","来","并","contours","!","编译","检测","none","代码","150","配置","x","初始","：","模型","完成","功能"," ","颜色","通过","cnt","5","for","关闭","系统",":","continue","entry","webcam","utf","as","logger","噪声","object","while","选项","高","*","使用","作者","com","np","info","#","lower","，","打开","in","将","shutdown","进行","说明","image"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_15","text":"节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息","text_tokens":["常用","列表","节点","name",">","ros2","命令","：","list","node"," ","信息","的","$","查看","如下","<","info","#","操作","_"],"title":"节点命令行操作","title_tokens":["命令","节点","操作","命令行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_16","text":"现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。","text_tokens":["开始","发送","参数","框架图","孤立","电脑","像头","摄像","连接","一个","控制","另外","摄像头","我们","摇杆","这","最为","这些","实现","负责","过来","。","岂","联系","工作","节点","概念","有","方法","中","显示","后","他们","细胞","要","一节","把","ros","一种","两个","框架","机制","很","机器","常用","图像","现在","回到","就","机器人","之间","会","给","问题","b","多种","大家","保持","介绍","指令","的","收到","了","和","看到","不是","a","没错","这个","某种","熟悉","在","还会","比如","应该","想要","并","改变","发现","配置","速度"," ","同理","下","系统","保持联系","得","如果","，","将","运动"],"title":"思考题","title_tokens":["思考题","思考","考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_17","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["tutorials","docs",":","https","-","org","nodes","html","/","understanding","ros",".","humble","en","ros2"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/","text":"话题 节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。 通信模型 以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。 发布/订阅模型 从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。 多对多通信 大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。 异步通信 话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。 消息接口 最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。 案例一：Hello World话题通信 了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 运行效果 启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。 发布者代码解析 我们来看下发布者的实现方法。 程序实现 learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口 订阅者代码解析 我们再来看下订阅者的实现方法。 程序实现 learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。 案例二：机器视觉识别 在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。 运行效果 这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。 发布者代码解析 learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], }, 订阅者代码解析 learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], }, 案例三：机器视觉识别优化 通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub 话题命令行操作 话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息 思考题 关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？ 参考链接 https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["符合","积木","终端","重要","三","所有","提示","我们","mask","存在","看","s","一份","py","驱动","(","circle","写","的话","array","cv","y","'","耦","subscribernode","结构","这里","程序","联系","红色","去除","报社","h","发布","设备","string","super","hierarchy","if","有","在生活中","可移植性","中","显示","一句","get","焕然一新","计算","scripts","东西","一","要","时候","（","imagesubscriber","之前","0.1","findcontours","“","得到","接收","修改","bgr","两个","及","参考","第一次","<","发送数据","读取","好","一下","文章","成为","长宽","coding","html","与","焕然","就","实时","之间","cvtcolor","chain","软件","多个","）","语言","它","千丝","模块化","问题","大家","upper","视频","指令","的","sensor","第一个","data","python3","看到","出来","通信模型","第二个","之后","_","cam","报纸","rclpy","回调","库","create","run","面积","在","是不是","设计","还有","桥梁","方式","解析","各种","各种各样","平时","初始化","再","编译","想要","这种","raw","contours","传递","150","publisher","模型","下","颜色","方向","个","注意","适合","install","数据类型","换成","传感","不能","采集","continue","entry","webcam","utf","logger","拼接","协议","10","想下","receiving","info","又","号","定时器","lower","sudo","self","小编","打开","合适","对劲","你","开始","列表","传递数据","发送","设置","boundingrect","考题","某些","当然","程序实现","同学","角度","了解","std","谁","入口","基本","可能","编写","不然","另外","{","”","做","率","msg","为例","虽然","还","复杂","spin","继续","hello","二值化","所在","numpy","更","true","稍后","w","但","示例","比方","不变","就要","inrange","什么","publish","编程语言","转换成","频率","文件","视觉","。","bgr2hsv","需要","hz","肯定","较强","加入","让","来看","兴趣","函数","传输","过程","name","概念","opencv","居","识别","detect","是","杂志","叫","一步","转换","publishing","集成","进一步","import","作为","bin","范围","把","apt","shape","坐标","像","似乎","化成","刚才","该","0","机器","相机","队列",".","听说","类型","名称","usb","知道","块","思考","下限","现在","物体","既然","上角","可视","发出","像素","会","dds","对于","只","node","想","主","组成","imagepublisher","}","某","安装","type","color","echo","保持","class","优化","目标","usr","听","特性","bgr8","基于","阅读","了","a","很多","对","www","随处","/","统一","值","长度","数据","根本","消息","拍摄","称之为","env","不知","对象","理解","topic","带宽","包","字符串","pub",",","分析","cv2","每","并","来","类似","检测","代码","并不知道","传感器"," ","随处可见","5","for","间","frame","做成",":","$","callback","as","任何","噪声","异步","最后","得","使用","感兴趣","com","以","没有","据传","是否","仔细","讲解","将","接收数据","说明","建议","开发","那","名","从","不太","来讲","videocapture","被","2","思想","以上","变化","转化成","标准","字符","img","啦","格式","[","这些","数值","每换","第二","实现","到","组织","video","直接","后缀","二","出去","监控","\\","进入","万缕","节点","int","cap","运行","不","方法","en","understanding","公众","退出","保证","渲染","原本","后","信息","也","链接","i","未来","千丝万缕","说","循环","ros","思考题","排版","周期","提高","优先级","def","宽","90","approx","勾勒","只要","是从","1","逻辑性","以下","讲","模块","如何","想象","父类","3","retr","者","+","同样","机器人","启动","类","自然","左上","过瘾","日志","第一","ros2","已经","sub","给","单位","接下","完全","无论","感觉","255","阈值","中心","知识","收到","subscription","最","二个","流程","]","本身","__","就是","包含","如下","不是","案例","优先","没错","关系","其中","几个","某种","中是","但是","没","console","内","控制指令","比如","从而","hsv","生活","init","应该","挺","xy","都","逻辑","执行","等待","初始","功能","x","此时","精简","留","哪里","举","msgs","词","关闭","成功","系统","定时","几乎","高","还是","这样","可视化","docs","如果","上","感兴","因为","接口定义","已","话题","进行","运动","分别","中文","感器","点画","苹果","timer","参数","呀","通信","创建","本原","解","满足","定义","为","做到","bw","编程","多","一个","list","chatter","setup","控制","唯一","128","说干就干","这","摇杆","区分","每个","=","获取","！","即可","args","可移植","更好","查看","换","用户","destroy","并且","更换","么","guyuehome","例子","处理","接下来","python","180","需求","能够","无关","用于","原理","销毁","learning","不过","read","一行","不行","exe","red","呢",">","接口协议","自己","可以","一次","一新","复用","helloworld","一些","才能","下来","周期性","放入","数量","通用","8","太小","一种","他会","tutorials","一定","一帧","topics","基本原理","总结","imshow","cvbridge","打","\"","命令行","硬件","点","常用","图像","from","world","左上角","之为","联系方式","关于","drawcontours","微信","main",")","必然","数据传输","轮廓","一般","rgb","waitkey","对应","listener","图像处理","b","bridge","例程","好像","移植性","人","转化","描述","古月","移植","太","ret","points","要求","@","-","和","订阅","一篇","操作","名字","这个","0.5","固定","各样","效果","先","heard","发布者","输出","上限","成","一样","英文","秒","无法","用","接口","填充","!","none","另","命令","配置","https","org","指","：","完成","画面","通过","cnt","什么样","to","等等","publishernode","单向","数据结构","独立","里","自行","？","魔性","object","互相","选项","*","np","作者","humble","叫做","#","所谓","%","，","可见","imgmsg","in","shutdown","image","、"],"title":"话题","title_tokens":["话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_1","text":"节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。","text_tokens":["传递数据","桥梁","万缕","机器人","节点","之间","重要","有","方式","各种","各种各样","联系方式","并","是","会","传递","功能","它","千丝"," ","间","独立","的","最","千丝万缕","这些","一种","实现","就是","但","了","不是","，","其中","机器","各样","话题","。","联系","数据"],"title":"话题","title_tokens":["话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_2","text":"以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。","text_tokens":["从","一个","我们","存在","做","这","为例","驱动","获取","实现","查看","到","用户","。","监控","设备","传输","节点","有","是","中","显示","可以","渲染","信息","作为","才能","要","得到","ros","两个","一下","机器","相机","硬件","图像","就","之为","机器人","实时","之间","可视","必然","数据传输","它","给","想","b","大家","某","视频","的","了","a","不是","没错","关系","这个","某种","拍摄","称之为","在","是不是","桥梁","方式","传递","功能"," ","此时","方向","？","这样","以","可视化","据传","上","，","话题","将","数据"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_3","text":"从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。","text_tokens":["发送","从","角度","一个","另外","”","、","看","格式","的话","实现","到","组织","比方","什么","。","需要","发布","出去","来看","兴趣","传输","节点","有","居","在生活中","呢","是","杂志","叫","公众","可以","也","把","“","接收","排版","他会","发送数据","好","是从","机器","打","文章","成为","类型","名称","者","之为","就","机器人","微信","自然","数据传输","会","dds","它","大家","古月","知识","的","收到","本身","特性","就是","要求","基于","了","和","订阅","对","随处","名字","之后","/","这个","固定","报纸","发布者","称之为","成","对象","比如","无法","生活","应该","平时","每","都","类似","模型"," ","随处可见","等等","数据类型","？","使用","感兴趣","这样","叫做","如果","据传","号","感兴","没有","话题","，","小编","可见","接收数据","数据"],"title":"发布/订阅模型","title_tokens":["模型","发布","订阅","/"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_4","text":"大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。","text_tokens":["发送","通信","被","2","谁","多","一个","控制","唯一","不然","可能","我们","存在","摇杆","区分","每个","这些","。","发布","节点","有","是","杂志","不","公众","可以","东西","也","要","数量","ros","优先级","似乎","该","一下","1","机器","想象","3","知道","者","之为","机器人","多个","大家","人","指令","的","听","了","和","订阅","不是","很多","没错","对","通信模型","优先","这个","报纸","发布者","称之为","一样","是不是","控制指令","挺","再","并","模型"," ","画面","个","注意","里","魔性","还是","想下","因为","号","如果","仔细","，","话题","建议","、"],"title":"多对多通信","title_tokens":["对","多","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_5","text":"话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。","text_tokens":["那","你","感器","参数","通信","某些","同学","一个","可能","控制","这","一份","更","什么","。","用于","报社","较强","发布","让","传输","有","居","是","不","公众","可以","一次","后","一些","也","时候","修改","周期","第一次","只要","逻辑性","文章","听说","知道","者","就","发出","第一","某","古月","指令","的","收到","太","就是","特性","阅读","了","订阅","一篇","这个","报纸","根本","发布者","不知","比如","还有","用","逻辑","类似","指","并不知道","传感器"," ","适合","等等","词","传感","？","异步","叫做","如果","号","所谓","话题","，","合适","运动","数据"],"title":"异步通信","title_tokens":["异步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_6","text":"最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。","text_tokens":["通信","积木","定义","编程","一个","标准","我们","、","msg","每个","复杂","格式","编程语言","结构","文件","这里","。","无关","后缀","发布","传输","节点","概念","有","是","中","可以","也","说","ros","一种","像","机器",".","长宽","图像","块","与","者","就","之为","机器人","既然","像素","数据传输","会","rgb","语言","对应","组成","描述","的","包含","了","和","订阅","统一","值","各样","数据","消息","发布者","称之为","在","成","一样","英文","理解","比如","方式","接口","各种","各种各样","都"," ","通过","等等","系统","不能","数据结构","自行","最后","拼接","得","这样","据传","接口定义","，","话题","进行","中文"],"title":"消息接口","title_tokens":["消息","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#hello-world","text":"了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。","text_tokens":["开始","发布","world","发送","者","string","从而","从","创建","字符串","本原","来","再","了解","是","中","代码","定义","一个","基本","chatter","编写"," ","接下","标准","我们","例程","”","消息","下来","字符","hello","的","啦","“","接收","ros","周期","到","还是","就要","了","订阅","基本原理","接下来","话题","，","这个","。","发布者","原理","类型"],"title":"案例一：Hello World话题通信","title_tokens":["hello","案例","：","world"," ","通信","话题","一"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_7","text":"启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。","text_tokens":["发布","learning","topic","者","world","终端","pub","节点","字符串","同样","启动","运行","第一","ros2","一个","：","sub","可以"," ","”","helloworld","消息","也","字符","hello","几乎","的","$","收到","“","二个","第一个","循环","第二","以","看到","订阅","频率","第二个","该","_","，","话题","。","发布者","run","数据"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_8","text":"我们来看下发布者的实现方法。","text_tokens":["发布","来看","的","下","我们","。","实现","发布者","方法"],"title":"发布者代码解析","title_tokens":["发布者","解析","代码","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_9","text":"learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], },","text_tokens":["名","timer","设置","创建","为","std","一个","入口","chatter","setup","编写","提示","{","”","msg","s","=","py","字符","(","hello","spin","[","args","示例","'","destroy","publish","guyuehome","文件","python","程序","需要","销毁","加入","发布","让","learning","string","super","函数","节点","name","居","中","publishing","退出","get","import","scripts","后","信息","helloworld","bin","（","8","“","循环","周期","def","队列","\"",".","类型","coding","点","父类","from","知道","world","main","类",")","日志","ros2","）","已经","node","单位","主","}","古月","的","class","data","]","usr","__","如下","points","python3","@","-","www","/","_","长度","0.5","rclpy","回调","库","数据","create","发布者","消息","输出","env","console","对象","秒","topic","包","pub","字符串","接口",",","init","初始化","填充","并","执行","编译","!","none","代码","配置","等待","初始","publisher","功能","完成","："," ","msgs","关闭","publishernode","系统",":","定时","entry","utf","callback","logger","选项","*","作者","com","10","info","#","定时器","%","话题","self","，","打开","shutdown","进行","说明","、"],"title":"程序实现","title_tokens":["程序实现","程序","实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_10","text":"对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口","text_tokens":["销毁","对象","发布","创建","分析","接口","节点","初始化","填充","想要","并","编程","以上","初始","一个","："," ","我们","消息","关闭","流程","实现","如下","如果","对","，","话题","程序","进行","发布者"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_11","text":"我们再来看下订阅者的实现方法。","text_tokens":["订阅","来看","者","的","下","我们","。","实现","再","方法"],"title":"订阅者代码解析","title_tokens":["代码","者","解析","订阅"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_12","text":"learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], },","text_tokens":["名","设置","创建","定义","std","一个","入口","chatter","setup","编写","提示","标准","{","”","msg","s","=","py","spin","(","hello","[","args","示例","'","destroy","subscribernode","guyuehome","处理","文件","python","程序","需要","销毁","加入","\\","learning","让","string","super","函数","节点","name","居","退出","get","import","scripts","后","信息","helloworld","bin","（","i","8","“","循环","def","队列","\"",".","类型","coding","点","父类","from","知道","world","者","main","类",")","日志","ros2","）","sub","node","listener","主","}","古月","的","class","subscription","收到","data","]","usr","__","如下","points","python3","@","-","订阅","www","对","/","_","长度","回调","rclpy","库","数据","create","消息","heard","输出","env","console","对象","topic","包","pub","接口",",","init","初始化","并","执行","编译","!","none","代码","配置","等待","初始","功能","：","完成"," ","msgs","关闭","系统",":","entry","utf","callback","logger","选项","*","作者","com","10","info","#","%","话题","self","，","打开","shutdown","进行","说明","、"],"title":"程序实现","title_tokens":["程序实现","程序","实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_13","text":"对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。","text_tokens":["销毁","对象","world","者","函数","创建","通信","分析","接口","节点","初始化","想要","并","过瘾","不","编程","以上","初始","一个","："," ","接下","下","我们","例程","大家","下来","关闭","还","继续","hello","之前","啦","的","优化","流程","实现","如下","基于","一定","如果","对","订阅","处理","好","接下来","，","回调","话题","程序","机器","进行","视觉","。","数据"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_14","text":"在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。","text_tokens":["开发","图像","但是","过程","物体","节点","概念","机器人","来讲","方式","传输","识别","并","是","中","做到","联系","功能","一个","模块化","对于","问题","我们","通过","虽然","间","做成","驱动","的","即可","更好","实现","两个","周期","就是","并且","了","和","没有","对","讲解","视觉","这个","，","话题","相机","。","机器","程序","将","模块","红色","没","数据","在"],"title":"案例二：机器视觉识别","title_tokens":["二","案例","：","视觉","机器","识别"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_15","text":"这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。","text_tokens":["终端","思想","定义","一个","标准","我们","说干就干","驱动","啦","即可","可移植","更好","第二","实现","不变","更换","视觉","。","红色","需要","发布","learning","来看","节点","可移植性","识别","运行","是","可以","保证","范围","要","放入","未来","修改","ros","两个","好","相机","以下","模块","如何","图像","就","物体","软件","启动","第一","ros2","sub","模块化","只","完全","移植性","移植","保持","的","二个","第一个","了","看到","订阅","第二个","_","这个","效果","中是","先","消息","run","内","在","设计","topic","pub","这种","并","另","功能"," ","下","$","webcam","？","如果","话题","，","将","分别"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_16","text":"learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], },","text_tokens":["名","timer","设置","创建","videocapture","为","一个","入口","setup","编写","提示","{","msg","=","py","spin","(","驱动","[","args","true","稍后","cv","示例","'","destroy","publish","guyuehome","转换成","处理","video","python","文件","程序","用于","需要","销毁","加入","发布","让","learning","设备","super","函数","opencv","节点","name","read","居","if","cap","转换","publishing","退出","get","import","scripts","后","信息","helloworld","bin","（","0.1","8","循环","ros","周期","def","一帧","读取","0","cvbridge","相机","队列","\"",".","类型","coding","点","父类","图像","from","与","知道","main","类",")","日志","ros2","）","已经","sub","node","图像处理","单位","imagepublisher","主","bridge","}","古月","视频","的","class","sensor","]","usr","__","ret","bgr8","如下","points","python3","@","-","www","/","_","长度","回调","rclpy","库","create","发布者","消息","输出","env","console","对象","秒","topic","包","pub","cv2","接口",",","init","初始化","raw","并","执行","编译","!","none","代码","配置","等待","初始","publisher","功能","完成","："," ","to","msgs","成功","换成","frame","关闭","系统",":","定时","采集","entry","webcam","utf","callback","logger","选项","*","作者","com","10","info","如果","#","号","定时器","话题","self","，","将","imgmsg","进行","shutdown","打开","说明","image","、"],"title":"发布者代码解析","title_tokens":["发布者","解析","代码","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_17","text":"learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], },","text_tokens":["点画","苹果","名","boundingrect","设置","创建","从","2","为","一个","list","入口","setup","编写","转化成","提示","128","{","mask","msg","=","py","spin","(","img","二值化","所在","numpy","circle","[","array","args","数值","cv","w","示例","'","inrange","y","destroy","guyuehome","处理","video","python","180","文件","程序","bgr2hsv","红色","用于","去除","需要","销毁","加入","h","让","learning","进入","super","函数","opencv","节点","name","hierarchy","居","if","int","red","detect","中","显示","转换","退出","get","计算","import","scripts","后","信息","helloworld","一些","bin","范围","（","imagesubscriber","8","findcontours","太小","bgr","shape","ros","得到","循环","及","坐标","def","<","宽","90","approx","化成","勾勒","imshow","0","cvbridge","1","队列","\"",".","类型","coding","点","父类","图像","from","与","下限","者","retr","左上角","+","知道","cvtcolor","chain","上角","drawcontours","main","类","左上",")","日志","像素","轮廓","ros2","）","waitkey","sub","node","图像处理","listener","主","bridge","}","upper","转化","255","古月","阈值","color","中心","的","class","subscription","sensor","data","]","usr","__","bgr8","如下","points","python3","@","-","和","订阅","www","出来","/","_","长度","回调","rclpy","效果","库","create","消息","面积","env","上限","输出","console","对象","topic","包","hsv","cv2","接口",",","pub","init","初始化","xy","raw","并","contours","编译","!","检测","none","代码","150","配置","等待","初始","x","功能","模型","完成","："," ","颜色","cnt","5","to","for","msgs","关闭","frame","系统",":","continue","entry","webcam","utf","callback","as","logger","噪声","object","互相","选项","高","*","np","作者","com","10","使用","receiving","info","#","lower","已","话题","self","，","in","将","imgmsg","进行","shutdown","打开","说明","image","、"],"title":"订阅者代码解析","title_tokens":["代码","者","解析","订阅"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_18","text":"通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub","text_tokens":["符合","你","呀","不太","当然","解","变化","一个","可能","标准","我们","做","率","这","驱动","！","写","每换","换","到","么","什么","耦","视觉","。","直接","需要","发布","让","learning","不过","exe","节点","不行","一行","有","识别","是","不","中","一步","接口协议","自己","一句","可以","集成","焕然一新","进一步","复用","一新","原本","也","通用","apt","得到","ros","提高","似乎","刚才","只要","好","相机","usb","常用","图像","现在","焕然","就","软件","ros2","一般","sub","只","node","例程","大家","好像","无论","感觉","安装","指令","的","目标","-","了","对","不是","_","cam","run","是不是","topic","还有","用","接口","都","代码","功能"," ","通过","精简","什么样","哪里","install","换成","$","webcam","？","任何","得","协议","使用","humble","这样","又","sudo","话题","，","对劲"],"title":"案例三：机器视觉识别优化","title_tokens":["三","案例","：","视觉","优化","机器","识别"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_19","text":"话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息","text_tokens":["常用","列表","发布","topic","带宽","传输","pub","name",">","ros2","命令","bw","：","list"," ","信息","msg","type","echo","的","$","data","查看","如下","<","info","#","频率","操作","_","话题","消息","数据","hz"],"title":"话题命令行操作","title_tokens":["命令","话题","操作","命令行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_20","text":"关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？","text_tokens":["肯定","思考","无法","就","通信","考题","关于","传输","机器人","来讲","这种","呢","方法","是","满足","数据传输","传递","一个","：","所有","给","对于","完成","我们","留","大家","适合","举","周期性","单向","复杂","系统","的","？","思考题","周期","实现","到","特性","和","据传","是否","例子","需求","话题","这里","，","机器","讲","能够","几个","原理","数据"],"title":"思考题","title_tokens":["思考题","思考","考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_21","text":"https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["tutorials","docs",":","https","-","org","html","topics","/","understanding","ros",".","humble","en","ros2"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/","text":"服务 话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。 通信模型 在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。 客户端/服务器模型 从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。 同步通信 这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。 一对多通信 比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。 服务接口 和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。 案例一：加法求解器 大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 运行效果 我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3 客户端代码解析 我们来看下客户端的实现方法。 程序实现 learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口 服务端代码解析 至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。 程序实现 learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口 案例二：机器视觉识别 好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。 运行效果 此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client 客户端代码解析 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], }, 服务端代码解析 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], }, 服务命令行操作 服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求 思考题 话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。 参考链接 https://docs.ros.org/en/humble/Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["服务","终端","相比","d","某个","；","提示","我们","mask","存在","command","看","同步","py","驱动","(","课程","返回","circle","array","访问","通信接口","cv","y","'","r","response","程序","红色","岂","去除","objectx","h","发布","后者","super","hierarchy","if","有","然后","在生活中","认为","中","比比皆是","显示","get","具体","提到","计算","not","scripts","一","核心","时候","要","（","上述","imagesubscriber","之前","findcontours","“","大部","得到","接收","bgr","两个","及","参考","<","two","时","随时","好","成为","waiting","coding","html","与","越好","学习","就","器","之间","cvtcolor","chain","多个","）","出现","当前","add","简称","大家","e","upper","指令","的","timeout","第一个","sensor","data","求解","后续","打印输出","python3","看到","出来","数据通信","通信模型","第二个","之后","done","_","cam","回调","rclpy","库","应用","create","比比","run","面积","在","设计","还有","解析","方式","拿到","各种","初始化","raw","想要","这种","有所不同","编译","contours","传递","150","模型","下","objecty","颜色","适合","数据类型","反应","状态","continue","传感","entry","utf","client","position","logger","again","10","receiving","info","lower","self","打开","回想","不好","...","你","开始","列表","传递数据","发送","设置","boundingrect","考题","某些","程序实现","send","电脑","了解","入口","基本","可能","编写","另外","{","request","”","msg","根据","问","继续","spin","二值化","所在","numpy","服务器端","更","求和","true","w","但","示例","inrange","就要","failed","什么","频率","文件","视觉","。","接口类型","result","bgr2hsv","argv","需要","加入","让","尽快","来看","跟随","函数","传输","过程","name","经常","opencv","居","break","识别","形式","detect","是","转换","集成","import","向","bin","范围","一直","shape","坐标","刚才","化成","0","机器","相机","上层","队列",".","类型","usb","知道","自定义","exception","现在","下限","思考","大部分","物体","上角","传入","像素","至于","会","浏览器","软硬件","node","主","}","type","color","或者","介绍","网页","except","繁杂","class","目标","usr","bgr8","了","try","a","对","www","很多","服务器发送","/","长度","消息","称之为","env","不知","对象","包","时间","分析",",","cv2","每","并","发","类似","检测","代码","并不知道","传感器"," ","5","for","本","frame","最新",":","$","callback","as","法器","噪声","异步","使用","com","没有","是否","sum","srv","准备","将","interface","说明","越快","sys","开发","加数","名","从","server","判断","更加","2","自定","不同","简单","以上","objectclient","提供","转化成","标准","available","发给","转圈圈","、","两种","等","img","啦","[","这些","数值","第二","实现","到","反馈","有所","video","—","域名","1.0","async","二","出去","\\","圈圈","进入","节点","三个","数据通","int","运行","方法","不","en","并不需要","understanding","退出","后","信息","合理","once","也","链接","常见","准确","思考题","循环","ros","宕机","周期","def","宽","ok","90","approx","勾勒","机制","1","位置","讲","当","invalid","父类","3","retr","者","50","用到","+","同样","机器人","启动","类","左上","日志","第一","ros2","else","已经","半天","场景","结果","sub","给","答","加法器","接下","完全","255","阈值","中心","收到","subscription","二个","流程","官方","__","]","所以","就是","如下","案例","不是","按照","其中","图像识别","但是","of","console","控制指令","比如","hsv","生活","init","应该","xy","浏览","都","执行","封装","放到","wait","绝大部分","等待","初始","功能","附近","addtwoints","x","此时","客户","msgs","成功","关闭","系统","高","前者","还是","软硬","这样","docs","如果","上","假设","已","话题","进行","加法","target","运动","adder","分别","感器","点画","越快越好","苹果","有点","通信","一起","创建","满足","查询","为","定义","编程","多","一个","list","setup","控制","唯一","处","同步性","128","针对","应答","adderclient","=","最为","service","n","获取","一问一答","args","跟踪","查看","destroy","并且","变成","guyuehome","处理","接下来","python","180","需求","用于","原理","销毁","展现","learning","call","adderserver","不过","incoming","exe","服务器","客户端","red","return",">","可以","ints","一次","一些","下来","部分","周期性","通用","界面","8","太小","一种","转圈","tutorials","我","很","总结","imshow","cvbridge","\"","命令行","硬件","请求","点","常用","里程计","图像","务器","from","页面","左上角","之为","打印","drawcontours","main","里程",")","轮廓","一般","getobjectposition","waitkey","services","listener","图像处理","b","bridge","例程","好像","人","转化","future","古月","一对","网络","sec","正常","points","要求","相对","@","-","和","订阅","操作","服务端","这个","而是","效果","接口类","发布者","那有","输出","上限","成","希望","这么","一样","无法","接口","cs","!","命令","none","雷达","配置","https","org","：","完成","通过","cnt","to","绝大","等等","单向","object","while","选项","互相","*","np","作者","humble","叫做","#","%","，","in","imgmsg","shutdown","网站","image","数据"],"title":"服务","title_tokens":["服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_1","text":"话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。","text_tokens":["服务","你","常用","发布","知道","者","学习","无法","通信","传输","节点","之间","一起","这种","类似","方法","多个","可以","答"," ","另外","我们","消息","本","问","同步","单向","的","准确","收到","ros","一种","实现","异步","使用","我","订阅","是否","机制","话题","，","将","—","讲","效果","。","发布者","数据"],"title":"服务","title_tokens":["服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_2","text":"在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。","text_tokens":["服务","你","发送","通信","不同","查询","一个","另外","我们","发给","问","应答","继续","驱动","service","课程","更","实现","到","反馈","有所","变成","频率","。","红色","需要","发布","尽快","跟随","传输","节点","然后","识别","形式","是","中","并不需要","可以","信息","时候","之前","一直","得到","ros","周期","我","机制","相机","位置","机器","上层","成为","请求","图像","物体","机器人","答","好像","或者","的","目标","了","和","订阅","对","通信模型","按照","这个","其中","而是","图像识别","应用","在","希望","这么","一样","比如","并","发","有所不同","这种","附近","模型"," ","此时","通过","最新","单向","高","使用","这样","，","话题","运动","数据"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_3","text":"从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。","text_tokens":["服务","你","务器","比如","展现","来看","发送","页面","就","从","某些","通信","服务器","生活","客户端","cs","经常","在生活中","形式","浏览","这种","并","各种","电脑","域名","为","会","某个","浏览器","模型","答"," ","具体","此时","我们","简称","通过","客户","信息","向","问","针对","也","应答","时候","或者","常见","网页","的","收到","返回","服务器端","实现","就是","反馈","叫做","我","上","机制","操作","之后","很","请求","/","处理","，","服务器发送","。","数据","进行","网站","需要","在"],"title":"客户端/服务器模型","title_tokens":["服务","务器","模型","/","服务器","客户端","客户"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_4","text":"这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。","text_tokens":["服务","你","越快越好","务器","在","越好","圈圈","之为","过程","通信","服务器","客户端","判断","浏览","相比","是","一般","中","半天","浏览器","可能","可以","我们","通过","转圈圈","客户","信息","也","同步","应答","反应","状态","或者","的","网络","一直","接收","服务器端","宕机","所以","到","要求","转圈","了","没有","不好","假设","这个","，","话题","。","那有","称之为","越快"],"title":"同步通信","title_tokens":["通信","同步"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_5","text":"比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。","text_tokens":["一样","服务","务器","比如","同样","通信","服务器","居","客户端","每","并","都","是","不","多个","中","一个","模型","可以","唯一","完全","存在","客户","大家","人","古月","界面","的","服务器端","访问","所以","但","看到","没有","通信模型","这个","，","。","网站","但是"],"title":"一对多通信","title_tokens":["多","一对","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_6","text":"和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。","text_tokens":["一样","服务","传递数据","比如","苹果","还有","通信","类似","是","方法","命令","传递","中","定义","会","一个","给"," ","标准","我们","大家","msg","也","部分","核心","要","介绍","的","这些","ros","两个","后续","坐标","使用","还是","反馈","了","和","变成","srv","请求","文件","话题","，","位置","。",".","消息","数据","在"],"title":"服务接口","title_tokens":["服务","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_7","text":"大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。","text_tokens":["服务","加数","开始","发送","通信","从","了解","简单","一个","基本","提供","编写","我们","”","针对","应答","啦","服务器端","实现","求和","就要","反馈","接下来","。","需要","出去","节点","服务器","有","客户端","是","可以","计算","ints","后","下来","也","“","得到","ros","两个","two","时","当","请求","务器","现在","器","就","add","结果","给","接下","例程","大家","的","收到","求解","官方","相对","了","对","之后","_","这个","成","应该","想要","并","封装","代码","功能"," ","通过","客户","还是","，","将","进行","加法","数据"],"title":"案例一：加法求解器","title_tokens":["案例","：","器","求解","加法","一"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_8","text":"我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3","text_tokens":["服务","加数","3","learning","发送","run","终端","一起","节点","客户端","server","启动","2","并","传入","运行","是","第一","ros2","代码","等待","功能","一个","结果","提供","下"," ","我们","例程","客户","看","service","的","$","二个","client","第一个","第二","实现","两个","求和","如下","并且","第二个","操作","服务端","这个","，","_","。","数据","adder","原理","请求"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_9","text":"我们来看下客户端的实现方法。","text_tokens":["来看","的","下","我们","客户端","客户","实现","。","方法"],"title":"客户端代码解析","title_tokens":["代码","解析","客户端","客户"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_10","text":"learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], },","text_tokens":["sys","服务","加数","发送","名","设置","创建","send","2","自定","d","定义","一个","入口","setup","编写","{","available","request","=","py","adderclient","(","service","spin","[","args","服务器端","示例","'","destroy","failed","反馈","guyuehome","r","处理","文件","python","response","接口类型","程序","result","argv","需要","销毁","1.0","async","加入","让","learning","call","super","函数","节点","name","服务器","居","客户端","int","if","break","运行","get","计算","ints","import","not","一次","scripts","后","信息","once","bin","（","8","接收","循环","两个","def","ok","two","1","\"",".","waiting","请求","coding","类型","点","父类","from","自定义","务器","exception","知道","+","打印","启动","main","类",")","else","ros2","）","add","node","加法器","b","e","}","future","古月","except","的","class","收到","timeout","sec","usr","__","]","正常","打印输出","如下","points","python3","@","-","try","a","www","/","_","done","rclpy","库","接口类","create","输出","env","of","console","对象","包","方式","接口",",","init","初始化","并","执行","编译","!","wait","none","代码","配置","等待","初始","addtwoints","功能","完成","："," ","客户","for","成功","关闭","系统",":","entry","utf","client","logger","法器","as","while","选项","异步","again","*","作者","com","info","#","是否","sum","%","srv","，","self","将","打开","shutdown","进行","加法","interface","adder","说明","数据","..."],"title":"程序实现","title_tokens":["程序实现","程序","实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_11","text":"对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口","text_tokens":["销毁","服务","对象","务器","发送","创建","分析","接口","节点","客户端","服务器","初始化","想要","并","编程","等待","以上","初始","一个","："," ","我们","客户","关闭","应答","服务器端","流程","实现","如下","如果","对","，","程序","进行","数据","请求"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_12","text":"至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。","text_tokens":["不知","服务","务器","知道","者","用到","有点","时间","通信","函数","服务器","类似","至于","中","出现","并不知道","也","的","服务器端","实现","什么","了","订阅","机制","，","话题","回调","。","数据","请求"],"title":"服务端代码解析","title_tokens":["服务","解析","代码","服务端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_13","text":"learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], },","text_tokens":["服务","名","设置","创建","server","自定","d","定义","入口","提供","setup","编写","提示","{","request","=","py","应答","(","service","n","spin","[","args","求和","示例","'","destroy","反馈","guyuehome","处理","文件","python","response","接口类型","程序","需要","销毁","加入","\\","learning","让","adderserver","super","函数","incoming","节点","服务器","name","居","return","中","退出","get","计算","ints","import","scripts","后","信息","bin","（","8","循环","def","two","\"",".","类型","coding","请求","点","父类","务器","from","自定义","知道","+","main","类",")","日志","ros2","）","已经","add","结果","node","加法器","b","主","}","古月","的","class","收到","]","usr","__","如下","points","python3","@","-","a","对","www","/","_","回调","rclpy","库","接口类","数据","create","输出","env","console","对象","包","接口",",","init","初始化","并","执行","编译","!","放到","none","代码","配置","等待","初始","功能","addtwoints","完成","："," ","关闭","系统",":","entry","utf","client","callback","logger","法器","选项","*","作者","com","info","#","sum","%","srv","，","self","将","打开","shutdown","进行","加法","interface","adder","说明","、"],"title":"程序实现","title_tokens":["程序实现","程序","实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_14","text":"对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口","text_tokens":["销毁","服务","对象","务器","函数","创建","分析","接口","节点","服务器","客户端","初始化","想要","并","编程","以上","初始","一个","：","结果","处"," ","我们","通过","客户","向","关闭","应答","服务器端","流程","实现","如下","反馈","如果","对","服务端","，","回调","程序","进行"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_15","text":"好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。","text_tokens":["服务","知道","器","物体","通信","更加","识别","已经","下","提到","我们","通过","合理","时候","啦","的","目标","求解","流程","实现","了","刚才","不是","机制","好","视觉","，","位置","。","回想","加法","岂","当","需要"],"title":"案例二：机器视觉识别","title_tokens":["二","案例","：","视觉","机器","识别"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_16","text":"此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client","text_tokens":["服务","对象","发布","图像","务器","learning","发送","需要","就","终端","机器人","节点","三个","服务器","有","客户端","然后","拿到","识别","启动","server","运行","认为","是","出现","会","ros2","；","当前","：","一个","提供","集成","可以"," ","node","此时","我们","一次","客户","根据","上述","驱动","exe","service","的","$","client","服务器端","目标","跟踪","object","并且","了","订阅","时","随时","准备","视觉","请求","，","_","相机","位置","机器","。","cam","运动","分别","当","run","数据","usb"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_17","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], },","text_tokens":["服务","设置","创建","send","server","自定","d","定义","objectclient","入口","setup","编写","{","available","request","应答","py","=","(","service","spin","n","[","args","true","示例","'","y","destroy","failed","guyuehome","r","文件","python","response","程序","result","需要","销毁","1.0","async","加入","\\","learning","call","让","super","节点","name","if","居","break","识别","get","import","not","scripts","后","once","bin","8","def","ok","位置","\"",".","waiting","请求","coding","点","父类","from","自定义","exception","知道","main","类",")","else","ros2","getobjectposition","node","e","}","future","古月","except","的","class","timeout","目标","sec","usr","__","]","如下","points","python3","@","-","try","www","/","_","done","rclpy","库","create","env","of","console","对象","包","接口",",","init","初始化","并","编译","!","wait","none","代码","配置","等待","初始","x","功能","完成","："," ","for","关闭","系统",":","entry","utf","client","position","logger","as","object","while","选项","again","*","作者","com","info","#","%","srv","，","self","打开","shutdown","target","进行","interface","adder","说明","..."],"title":"客户端代码解析","title_tokens":["代码","解析","客户端","客户"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_18","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], },","text_tokens":["服务","点画","苹果","名","boundingrect","设置","创建","从","server","2","自定","d","定义","为","一个","list","提供","入口","编写","转化成","setup","提示","128","{","mask","request","知道","msg","command","=","py","spin","(","service","img","二值化","所在","n","numpy","circle","[","array","args","数值","true","cv","w","示例","'","inrange","y","destroy","反馈","guyuehome","处理","video","python","180","response","文件","接口类型","程序","bgr2hsv","红色","用于","去除","objectx","需要","销毁","加入","h","\\","learning","让","进入","super","函数","opencv","节点","name","服务器","居","hierarchy","if","int","识别","adder","red","detect","return","中","显示","转换","退出","get","计算","import","scripts","后","信息","一些","bin","范围","（","imagesubscriber","8","findcontours","太小","bgr","shape","ros","得到","循环","及","坐标","def","<","宽","90","approx","化成","勾勒","imshow","0","cvbridge","1","队列","\"",".","类型","coding","请求","invalid","点","父类","from","图像","与","自定义","下限","者","务器","retr","左上角","+","50","物体","cvtcolor","chain","上角","drawcontours","main","类","左上",")","日志","像素","轮廓","ros2","getobjectposition","）","已经","waitkey","else","sub","node","图像处理","listener","主","bridge","}","upper","转化","255","古月","阈值","color","中心","的","class","subscription","收到","sensor","目标","data","]","usr","__","bgr8","如下","points","python3","@","-","和","订阅","www","出来","对","/","_","长度","回调","rclpy","效果","库","接口类","数据","create","消息","面积","env","上限","输出","console","对象","包","hsv","cv2","接口",",","init","初始化","xy","raw","并","contours","执行","!","编译","检测","none","代码","150","配置","等待","初始","x","功能","模型","完成","："," ","objecty","颜色","cnt","5","to","for","msgs","关闭","frame","系统",":","continue","entry","utf","position","callback","as","logger","噪声","object","互相","选项","client","高","*","np","作者","com","10","使用","receiving","info","#","%","srv","lower","已","话题","self","，","in","将","target","imgmsg","进行","interface","shutdown","打开","说明","image","、"],"title":"服务端代码解析","title_tokens":["服务","解析","代码","服务端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_19","text":"服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求","text_tokens":["服务","常用","列表","call","发送","name",">","ros2","命令","：","list"," ","数据类型","type","service","的","$","类型","data","查看","如下","<","#","操作","请求","_","数据"],"title":"服务命令行操作","title_tokens":["命令","服务","操作","命令行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_20","text":"话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。","text_tokens":["服务","开发","感器","通信","自定","满足","定义","控制","同步性","标准","我们","两种","等","同步","针对","最为","获取","一问一答","这些","更","通信接口","到","就要","视觉","需求","。","不过","后者","传输","过程","数据通","识别","方法","是","中","比比皆是","也","部分","周期性","时候","通用","大部","ros","周期","机器","位置","硬件","类型","常用","里程计","图像","自定义","大部分","机器人","里程","场景","软硬件","繁杂","指令","的","目标","要求","了","和","很多","数据通信","这个","数据","应用","比比","在","设计","控制指令","比如","无法","接口","都","类似","绝大部分","雷达","传感器"," ","绝大","适合","等等","数据类型","单向","传感","高","前者","软硬","话题","，","、"],"title":"思考题","title_tokens":["思考题","思考","考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_21","text":"https://docs.ros.org/en/humble/Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["tutorials","docs",":","https","-","org","html","services","/","understanding","ros",".","humble","en","ros2"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/","text":"通信接口 在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。 接口的定义 接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。 ROS通信接口 接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。 语言无关 为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。 标准接口 大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。 案例一：服务接口的定义与使用 了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。 接口定义 在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ... 程序调用 我们在代码中再来重点看下接口的使用方法。 客户端接口调用 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 服务端接口调用 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 案例二：话题接口的定义与使用 话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。 运行效果 现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub 接口定义 在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ... 程序调用 我们在代码中再来重点看下接口的使用方法。 发布者接口调用 learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 订阅者接口调用 learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 接口命令行操作 接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义 参考链接 https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["服务","符合","终端","重要","interfaces","d","内容","转","某个","；","group","required","提示","我们","mask","command","看","py","驱动","(","包中","课程","circle","的话","txt","array","上去","通信接口","cv","y","'","use","rosidl","subscribernode","结构","两者","r","三种","这里","response","程序","联系","红色","去除","objectx","由于","h","发布","string","键盘","super","hierarchy","if","有","中","显示","一句","get","具体","看上去","计算","not","好奇","一","核心","时候","要","插座","角速度","imagesubscriber","之前","（","中来","findcontours","形象","“","bgr","得到","两个","调用","及","参考","<","别人","像素点","时","加","好","一下","主要","waiting","coding","html","与","学习","就","之间","cvtcolor","chain","软件","）","造","语言","当前","它","大家","e","upper","指令","的","插头","timeout","第一个","为了","sensor","data","个人","后续","python3","看到","出来","第二个","轮子","done","_","cam","回调","rclpy","库","第三","应用","create","面积","run","在","设计","形状","还有","重点","解析","各种","初始化","raw","runtime","再","编译","contours","传递","150","速度","publisher","模型","下","objecty","颜色","重复","micro","研究","减少","旋转","换成","状态","continue","webcam","utf","client","position","logger","again","10","receiving","关心","info","自动","lower","哪些","define","打开","self","必须","诞生","...","开始","列表","发送","boundingrect","一边","三原色","send","角度","电脑","了解","像头","std","摄像","谁","入口","编写","可能","不管","另外","20","降低","{","request","”","msg","根据","还","spin","继续","所在","二值化","numpy","关注","分成","更","求和","true","w","但","示例","inrange","failed","什么","publish","布尔","文件","视觉","表示","。","程序模块","result","接口类型","bgr2hsv","需要","肯定","让","形象化","函数","传输","过程","name","概念","opencv","居","break","about","识别","detect","是","甚至","转换","众多","import","bin","范围","把","shape","文件夹","坐标","将要","64","化成","0","机器","相机","队列",".","更为","类型","usb","int32","每隔","知道","自定义","exception","输入输出","下限","现在","物体","上角","涵盖","xml","像素","会","只","node","主","想","组成","布尔值","exec","}","安装","color","或者","目的","高效","class","except","目标","usr","匹配","bgr8","generators","了","try","a","对","方便","www","随处","值","/","长度","objectposition","数据","消息","代码生成","称之为","share","env","交流","对象","理解","topic","包","pub","cv2",",","字符串","你来我往","每","并","来","类似","第三个","话","检测","代码"," ","随处可见","5","for","frame","反正","做成",":","却是","$","详细","callback","as","噪声","得","使用","com","没有","是否","sum","srv","讲解","将","三原","interface","说明","开发","那","名","从","server","输入","2","进度","自定","广泛","不同","objectclient","连接","以上","提供","转化成","摄像头","标准","available","等","便于","有没有","字符","img","[","这些","数值","第二","实现","以及","到","generate","反馈","action","约束","video","—","直接","---","30","1.0","async","二","出去","\\","进入","标准接口","节点","三个","int","运行","方法","en","退出","保证","后","信息","once","也","链接","用来","两","常见","准确","精髓","循环","ros","周期","cmakelists","坐标值","def","宽","ok","90","approx","勾勒","机制","只要","1","位置","讲","模块","如何","invalid","父类","找到","retr","者","50","用到","领域","+","1s","机器人","看上","启动","类","左上","日志","第一","ros2","else","已经","结果","sub","给","build","接下","完全","无论","255","阈值","中心","收到","subscription","二个","图形","]","__","所以","就是","生成","包含","如下","上边","不是","案例","关系","各个","几个","转到第","of","添加","比如","hsv","生活","init","xy","都","执行","封装","wait","有机","等待","x","功能","初始","此时","客户","msgs","关闭","系统","整型","concepts","single","各个领域","高","主程序","还是","这样","32","package","docs","上","接口定义","件夹","已","话题","进行","加法","target","运动","分别","project","自言自语","点画","位","苹果","g","参数","通信","一起","度","创建","default","and","定义","查询","为","编程","多","一个","list","控制","路径","128","这","区分","无论是","每个","应答","最为","=","service","获取","n","手机","args","查看","数","destroy","并且","动作","guyuehome","例子","处理","python","接下来","180","depend","无关","用于","销毁","包装","learning","call","工作","exe","服务器","客户端","red","return","呢",">","member","typec","自己","可以","软件开发","一次","编写程序","他们","一些","才能","下来","部分","8","中间","太小","一种","由","回顾","bool","tutorials","一帧","小海龟","很","不用","imshow","cvbridge","看看","\"","命令行","编译器","硬件","依赖","举个","请求","常用","只有","图像","from","务器","像是","回到","左上角","之为","打印","关于","drawcontours","main",")","自语","轮廓","getobjectposition","waitkey","对应","listener","图像处理","b","最终","find","bridge","例程","show","人","转化","描述","future","就行","古月","sec","正常","彼此","小海","衍生","体","标值","@","-","原色","和","订阅","操作","int64","这个","海龟","固定","而是","服务端","接口类","效果","发布者","输出","上限","成","希望","线速度","转到","接口","!","none","命令","配置","packages","https","org","：","传输数据","完成","通过","cnt","什么样","to","等等","到底","单向","数据结构","里","c++","二维","？","中有","建立","object","选项","while","互相","种","*","调用函数","作者","np","humble","图形化","相互","#","%","，","可见","in","imgmsg","shutdown","数组","image","、"],"title":"通信接口","title_tokens":["接口","通信接口","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_1","text":"在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。","text_tokens":["服务","自言自语","理解","让","学习","用到","通信","重要","概念","接口","你来我往","都","并","内容","是","自语","甚至","中","会","呢","传递","定义","多","一个","给","可以"," ","标准","我们","大家","无论","这","人","系统","或者","的","？","为了","ros","更","通信接口","个人","两个","后续","交流","就是","还是","将要","什么","动作","不是","结构","好","，","话题","—","。","而是","数据","在"],"title":"通信接口","title_tokens":["接口","通信接口","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_2","text":"接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。","text_tokens":["开发","那","服务","符合","开始","g","参数","一起","通信","三原色","输入","电脑","广泛","内容","像头","定义","摄像","编程","；","多","连接","一个","提供","编写","控制","摄像头","标准","我们","这","等","无论是","每个","最为","驱动","所在","手机","关注","这些","更","通信接口","上去","实现","到","但","什么","并且","反馈","结构","约束","例子","两者","r","。","程序","程序模块","直接","肯定","包装","发布","让","工作","形象化","函数","传输","键盘","节点","概念","有","运行","是","呢","中","typec","自己","一句","可以","具体","看上去","软件开发","一次","编写程序","他们","一些","才能","也","时候","要","插座","角速度","常见","把","准确","形象","精髓","ros","一种","调用","两个","由","像素点","时","机制","加","很","只要","好","不用","机器","相机","讲","主要","更为","模块","如何","硬件","举个","usb","常用","只有","图像","知道","输入输出","像是","回到","领域","就","之为","机器人","关于","看上","软件","像素","它","结果","给","b","组成","完全","大家","无论","安装","指令","目的","的","高效","插头","图形","正常","彼此","所以","匹配","就是","-","了","和","原色","出来","随处","关系","各个","这个","值","固定","数据","应用","称之为","输出","在","比如","线速度","形状","包","解析","接口","生活","都","每","类似","话","代码","配置","速度","传输数据"," ","随处可见","通过","micro","什么样","等等","反正","系统","却是","？","建立","各个领域","主程序","使用","还是","调用函数","得","图形化","关心","上","相互","可见","，","话题","三原","必须","进行","诞生","运动","、"],"title":"接口的定义","title_tokens":["定义","接口","的"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#ros","text":"接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。","text_tokens":["服务","常用","让","通信","一起","节点","接口","之间","有","各种","每","是","定义","代码","有机","造","联系","可以"," ","降低","我们","重复","通过","这","才能","减少","便于","也","核心","的","ros","目标","一种","种","就是","使用","到","别人","动作","方便","机制","轮子","三种","，","话题","程序","。","分别","依赖","、"],"title":"ROS通信接口","title_tokens":["接口","ros","通信接口","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_3","text":"为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。","text_tokens":["服务","开始","位","通信","度","一边","进度","转","不同","定义","编程","一个","另外","20","我们","、","”","msg","等","区分","还","应答","这些","分成","数值","通信接口","求和","到","数","y","什么","action","反馈","动作","布尔","结构","文件","python","这里","表示","。","无关","---","30","需要","由于","让","过程","传输","节点","三个","是","中","保证","可以","部分","用来","两","之前","中间","“","ros","一种","周期","两个","坐标","bool","64","一帧","小海龟","90","机制","一下","机器",".","请求","int32","每隔","知道","学习","1s","机器人","会","语言","当前","对应","结果","只","b","最终","布尔值","描述","就行","的","为了","目标","小海","体","生成","包含","了","和","看到","a","int64","这个","海龟","转到第","在","设计","比如","还有","转到","接口","每","编译","x","功能","完成"," ","此时","通过","旋转","做成","单向","数据结构","状态","里","整型","c++","二维","使用","10","还是","32","自动","是否","sum","srv","，","话题","将","数组","加法","运动","分别","数据"],"title":"语言无关","title_tokens":["无关","语言"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_4","text":"大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。","text_tokens":["找到","接口","涵盖","呢","定义","中","给","可能","可以","路径","众多","标准","我们","大家","到底","好奇","安装","系统","的","？","ros","文件夹","了","件夹","文件","哪些","，","打开","几个","看看","。","share","在"],"title":"标准接口","title_tokens":["标准","接口","标准接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_5","text":"了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。","text_tokens":["服务","对象","发布","图像","发送","就","通信","从","节点","接口","概念","有","三个","角度","识别","再","来","第三个","了解","第一","是","定义","代码","中","封装","查询","一个","提供","编写","可以","下","接下"," ","我们","例程","下来","研究","时候","驱动","之前","课程","的","收到","二个","第一个","目标","通信接口","第二","实现","以及","回顾","使用","这样","了","第二个","讲解","请求","视觉","接下来","，","话题","相机","。","机器","服务端","位置","第三","如何","进行","需要","在"],"title":"案例一：服务接口的定义与使用","title_tokens":["定义","服务","案例","使用","：","与","的","接口","一"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_6","text":"在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ...","text_tokens":["服务","通信","interfaces","default","不同","定义","为","group","required","我们","{","根据","还","(","获取","的话","txt","true","generate","y","反馈","rosidl","文件","表示","。","depend","---","需要","让","learning","过程","name",">","是","中","member","get","一次","后","也","部分","两个","cmakelists","坐标","bool","<","位置",".","\"","编译器","依赖","int32","就",")","xml","getobjectposition","会","语言","build","find","exec","例程","}","指令","的","目标","生成","generators","上边","了","/","这个","_","服务端","代码生成","of","在","添加","包","project","接口","runtime","编译","代码","配置","packages","x","功能","：","完成"," ","$","中有","选项","使用","package","#","接口定义","自动","srv","，","interface","、","..."],"title":"接口定义","title_tokens":["定义","接口","接口定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_7","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["中","代码","看","的","重点","下","我们","接口","。","来","再","使用","方法","在"],"title":"程序调用","title_tokens":["程序","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_8","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["服务","创建","send","自定","d","定义","objectclient","available","request","应答","py","=","(","service","spin","n","args","true","示例","'","y","destroy","failed","guyuehome","r","python","response","result","销毁","1.0","async","\\","learning","call","super","节点","name","if","居","break","识别","get","import","not","once","bin","8","def","ok","位置","\"",".","waiting","请求","coding","父类","from","自定义","exception","main","类",")","else","ros2","getobjectposition","node","e","future","古月","except","的","class","timeout","目标","sec","usr","__","python3","@","-","try","www","/","_","done","rclpy","库","create","env","of","对象","接口",",","init","初始化","并","!","wait","none","等待","初始","x"," ","for","关闭",":","utf","client","position","logger","as","object","while","again","*","作者","com","info","#","%","srv","，","self","shutdown","target","进行","interface","说明","..."],"title":"客户端接口调用","title_tokens":["接口","客户端","客户","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_9","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["服务","点画","苹果","名","boundingrect","创建","从","server","2","自定","d","定义","为","一个","list","提供","入口","转化成","提示","128","mask","request","msg","command","=","py","spin","(","service","img","二值化","所在","n","numpy","circle","[","array","args","数值","true","cv","w","示例","'","inrange","y","destroy","反馈","guyuehome","处理","video","python","180","response","接口类型","bgr2hsv","红色","用于","去除","objectx","销毁","h","\\","learning","进入","super","函数","opencv","节点","name","服务器","居","hierarchy","if","int","识别","red","detect","return","中","显示","转换","退出","get","计算","import","后","信息","一些","bin","范围","（","imagesubscriber","8","findcontours","太小","bgr","shape","ros","得到","循环","及","坐标","def","<","宽","90","approx","化成","勾勒","imshow","0","cvbridge","1","队列","\"",".","类型","coding","请求","invalid","父类","from","图像","与","自定义","下限","者","务器","retr","左上角","+","50","物体","cvtcolor","chain","上角","drawcontours","main","类","左上",")","日志","像素","轮廓","ros2","getobjectposition","）","已经","waitkey","else","sub","node","图像处理","listener","主","bridge","upper","转化","255","古月","阈值","color","中心","的","class","subscription","收到","sensor","目标","data","]","usr","__","bgr8","python3","@","-","和","订阅","www","出来","对","/","_","长度","回调","rclpy","效果","库","接口类","数据","create","消息","面积","env","上限","输出","对象","hsv","cv2","接口",",","init","初始化","xy","raw","并","contours","执行","!","检测","none","150","等待","初始","x","模型"," ","objecty","颜色","cnt","5","to","for","msgs","关闭","frame",":","continue","utf","position","callback","as","logger","噪声","object","互相","高","*","np","作者","com","10","使用","receiving","info","#","%","srv","lower","已","话题","self","，","in","将","target","imgmsg","进行","interface","shutdown","说明","image","、"],"title":"服务端接口调用","title_tokens":["服务","接口","调用","服务端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_10","text":"话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。","text_tokens":["服务","发布","通信","从","接口","识别","类似","是","定义","想","不管","我们","人","也","换成","有没有","继续","之前","中来","把","的","目标","通信接口","衍生","周期","没有","案例","视觉","话题","，","机器","位置","。","需要"],"title":"案例二：话题接口的定义与使用","title_tokens":["定义","二","案例","：","与","的","话题","接口","使用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_11","text":"现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub","text_tokens":["希望","ros2","发布","图像","出去","learning","现在","需要","topic","就","打印","终端","节点","三个","run","usb","exe","启动","pub","识别","并","来","运行","是","第一","封装","会","中","定义","谁","第三个","；","以上","功能","：","一个","sub","node"," ","此时","标准","我们","interface","cam","驱动","的","$","二个","第一个","ros","目标","object","第二","到","使用","订阅","第二个","视觉","这个","，","话题","将","相机","位置","第三","。","_","消息","分别","image","数据","成"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_12","text":"在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ...","text_tokens":["服务","通信","interfaces","default","内容","不同","定义","一个","required","我们","{","msg","根据","还","(","txt","generate","y","rosidl","表示","。","需要","让","learning","过程","name","是","中","后","坐标值","坐标","cmakelists","位置",".","\"","编译器","int32",")","语言","find","例程","}","描述","的","目标","标值","生成","generators","了","objectposition","这个","_","/","消息","在","包","接口","编译","代码","配置","x","功能","：","完成"," ","interface","$","选项","使用","package","#","接口定义","自动","，","话题","进行","project","、","..."],"title":"接口定义","title_tokens":["定义","接口","接口定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_13","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["中","代码","看","的","重点","下","我们","接口","。","来","再","使用","方法","在"],"title":"程序调用","title_tokens":["程序","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_14","text":"learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["点画","苹果","名","boundingrect","创建","从","2","自定","定义","为","一个","list","入口","转化成","提示","128","mask","msg","=","py","spin","(","img","二值化","所在","numpy","circle","[","array","args","数值","cv","w","示例","'","inrange","y","destroy","publish","guyuehome","处理","video","python","180","bgr2hsv","红色","用于","去除","objectx","销毁","h","发布","learning","进入","super","函数","opencv","节点","name","hierarchy","居","if","int","red","detect","中","显示","转换","退出","get","计算","import","后","信息","一些","bin","范围","（","imagesubscriber","8","findcontours","太小","bgr","shape","ros","得到","循环","及","坐标","def","<","宽","90","approx","化成","勾勒","imshow","0","cvbridge","1","位置","队列","\"",".","类型","coding","父类","from","图像","与","自定义","下限","者","retr","左上角","+","50","cvtcolor","chain","上角","drawcontours","main","类","左上",")","日志","像素","轮廓","ros2","）","waitkey","sub","node","图像处理","listener","主","bridge","upper","转化","255","古月","阈值","color","中心","的","class","subscription","sensor","目标","data","]","usr","__","bgr8","python3","@","-","和","订阅","www","出来","/","_","objectposition","回调","rclpy","长度","库","效果","create","消息","发布者","面积","env","上限","输出","对象","topic","pub","cv2","接口",",","hsv","init","初始化","xy","raw","并","contours","!","检测","none","150","等待","初始","publisher","x","模型"," ","objecty","颜色","cnt","5","to","for","msgs","关闭","frame",":","continue","webcam","utf","position","callback","as","logger","噪声","object","互相","高","*","np","作者","com","10","使用","receiving","info","#","lower","已","话题","self","，","in","将","imgmsg","进行","shutdown","interface","说明","image","、"],"title":"发布者接口调用","title_tokens":["发布者","接口","发布","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_15","text":"learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["名","创建","自定","d","定义","std","一个","入口","提示","msg","=","py","字符","(","spin","args","示例","'","y","destroy","subscribernode","guyuehome","处理","python","销毁","\\","learning","string","super","函数","节点","name","居","退出","get","import","后","信息","bin","（","8","循环","def","位置","队列","\"",".","类型","coding","父类","from","自定义","者","main","类",")","日志","ros2","sub","node","listener","主","古月","的","class","subscription","收到","目标","usr","__","python3","@","-","订阅","www","对","/","_","objectposition","回调","rclpy","长度","库","数据","create","消息","输出","env","对象","topic","字符串","接口",",","init","初始化","并","执行","!","none","等待","初始","x"," ","msgs","关闭",":","utf","position","callback","logger","object","*","作者","com","10","info","#","%","话题","self","，","shutdown","target","进行","interface","说明","、"],"title":"订阅者接口调用","title_tokens":["者","调用","订阅","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_16","text":"接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义","text_tokens":["常用","列表","name","接口",">","ros2","命令","定义","某个","功能","：","list"," ","show","系统","包中","详细","的","$","查看","如下","<","package","#","接口定义","操作","_","interface"],"title":"接口命令行操作","title_tokens":["命令","接口","操作","命令行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_17","text":"https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["html","about","interfaces","en","and","https","org"," ",":","concepts","ros","single","humble","use","-","docs","tutorials","package","/","define",".","interface"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/","text":"动作 机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。 通信模型 举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。 客户端/服务器模型 动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。 一对多通信 和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。 同步通信 既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。 由服务和话题合成 大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。 案例一：小海龟的动作 我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback 案例二：机器人画圆 如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。 运行效果 启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。 接口定义 例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是 动作的目标 ，enable为true时，表示开始运动； 第二块是 动作的执行结果 ，finish为true，表示动作执行完成； 第三块是 动作的周期反馈 ，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ... 通信模型 通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。 服务端代码解析 learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], }, 客户端代码解析 learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], }, 动作命令行操作 动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["服务","actionserver","终端","interfaces","姿态","相比","转","d","某个","；","机械","required","转个","我们","看","同步","py","(","写","circle","txt","通信接口","真器","'","同时","rosidl","当中","较长","response","程序","发布","键盘","super","if","有","中","get","具体","scripts","not","一","（","之前","接收","两个","调用","参考","<","时","读取","随时","好","一下","coding","360","html","就","实时","sleep","多个","）","语言","当前","add","完整","仿真","大家","圆周","指令","就此","的","data","python3","看到","通信模型","之后","done","_","回调","rclpy","库","第三","应用","run","在","是不是","一点","解析","方式","初始化","这种","再","编译","模型","下","数据类型","旋转","状态","entry","utf","client","logger","请","送货","处理函数","10","取消","info","又","自动","动","turtlesim","self","打开","合适","发送给","...","开始","列表","发送","设置","一边","秘密","send","角度","入口","可能","编写","另外","20","{","根据","msg","虽然","还","不仅","复杂","进度条","spin","服务器端","move","true","但","示例","负责","什么","publish","文件","表示","。","接口类型","result","需要","肯定","加入","让","函数","过程","key","概念","absolute","name","居","某一","识别","是","拒绝","publishing","达到","import","bin","装","handle","把","只能","管理","坐标","像","实际","画圆","眼前","accepted","0","theta","机器","隐藏",".","更为","类型","int32","每隔","知道","自定义","现在","既然","发出","会","遥控","range","node","想","主","}","某","type","actionclient","介绍","目的","起来","class","目标","usr","特性","generators","基于","了","对","www","/","goal","根本","消息","仿真器","env","对象","理解","指定","还会","包","时间","分析",",","每","并","来","类似","告诉","代码","理"," ","for","第一块",":","$","callback","臂","execute","异步","得","使用","com","没有","是否","仔细","interface","说明","那","名","从","被","server","进度","自定","moving","简单","不同","第三块","思路","标准","、","其","等","便于","有没有","仅仅","应用层","[","这些","第二","实现","到","rotate","generate","使","反馈","action","movecircle","拒绝执行","—","直接","turtle1","---","30","time","async","二","所处","毕竟","节点","三个","加深","运行","不","方法","en","understanding","退出","合成","rotateabsolute","后","信息","也","链接","i","movecircleactionserver","循环","ros","周期","cmakelists","def","ok","机制","以下","位置","直到","模块","如何","不仅仅","当","干什么","分拣","父类","--","者","用到","1s","机器人","结束","启动","类","日志","第一","ros2","场景","结果","接下","state","一段时间","动图","收到","清楚","流程","]","__","试一试","就是","生成","包含","如下","上边","finish","不是","案例","没错","竟然","按照","但是","console","比如","init","都","执行","封装","wait","三块","等待","初始","功能","客户","哪里","背后","成功","关闭","系统","这样","package","docs","如果","上","接口定义","enable","一套","假设","常常","话题","进行","运动","分别","project","段时间","一点一点","通信","度","一起","创建","过","default","满足","定义","为","编程","多","一个","list","setup","控制","这","针对","=","获取","args","查看","再用","destroy","动作","teleop","guyuehome","例子","处理","需求","接下来","python","feedback","原理","销毁","learning","多少","movecircleactionclient","服务器","客户端","return","呢",">","可以","一次","才能","下来","不会","部分","rejected","8","received","一种","抓取","由","行为","bool","actions","转圈","tutorials","小海龟","很","\"","命令行","编译器","举个","请求","应带","点","常用","只有","务器","from","整个","main","能",")","圈","控","最终","第二块","find","例程","二块","就此结束","future","古月","其实","一对","送给","模拟","小海","智能","points","相对","@","-","和","1.57","订阅","圆周运动","操作","名字","服务端","这个","海龟","0.5","而是","效果","接口类","先","发布者","输出","一样","这么","希望","succeed","接口","!","命令","发现","none","配置","https","org","：","完成","turtle","通过","多少度","到底","含义","送餐","一段","？","顺利","选项","*","humble","作者","一块","#","%","，","in","shutdown","底层","数据","导航"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_1","text":"机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。","text_tokens":["这么","那","分拣","理解","需要","用到","键盘","就","通信","机器人","从","概念","被","某一","识别","并","这种","是","满足","简单","中","会","场景","某个","功能","一个","遥控","可以","具体"," ","另外","我们","完整","等","含义","便于","也","不仅","复杂","系统","仅仅","送餐","目的","的","管理","这些","目标","ros","一种","流程","实现","送货","就是","智能","行为","动作","上","对","机制","名字","很","好","需求","，","常常","机器","。","—","这个","应用","进行","运动","不仅仅","、","在"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_2","text":"举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。","text_tokens":["一点一点","开始","发送","度","通信","进度","转","一个","转个","20","我们","这","还","有没有","进度条","到","反馈","当中","动作","例子","表示","。","30","需要","肯定","让","多少","过程","不","是","可以","后","信息","才能","装","把","行为","像","ok","转圈","机制","眼前","随时","一下","机器","直到","更为","举个","每隔","360","知道","现在","就","1s","机器人","结束","发出","圈","当前","控","想","一段时间","指令","的","了","不是","之后","根本","在","比如","一点","时间","并","再","执行","告诉","命令","完成"," ","多少度","到底","哪里","旋转","一段","？","得","使用","10","取消","这样","没有","如果","假设","，","合适","运动","段时间","、"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_3","text":"动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。","text_tokens":["服务","干什么","开始","务器","让","发送","就","过程","机器人","一边","服务器","所处","客户端","实时","结束","整个","姿态","再","执行","类似","是","中","当前","机械","一个","模型","控制","可能","想"," ","达到","客户","后","信息","就此结束","通信","也","状态","就此","起来","的","收到","目标","服务器端","周期","臂","抓取","坐标","使用","什么","同时","反馈","和","动作","如果","又","动","之后","这个","，","机器","。","运动","当","导航"],"title":"客户端/服务器模型","title_tokens":["服务","务器","模型","/","服务器","客户端","客户"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_4","text":"和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。","text_tokens":["一样","服务","只有","务器","发送","通信","毕竟","机器人","服务器","客户端","有","都","执行","多个","中","命令","一个","完成","可以","下","客户","大家","才能","的","只能","服务器端","和","动作","，","机器","。","先","运动","但是"],"title":"一对多通信","title_tokens":["多","一对","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_5","text":"既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。","text_tokens":["那","通信","过程","既然","接口","有","过","是","中","定义","我们","同步","也","介绍","之前","的","一种","通信接口","使用","反馈","action","动作","机制","文件","，","。","进行",".","数据"],"title":"同步通信","title_tokens":["通信","同步"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_6","text":"大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。","text_tokens":["服务","是不是","应带","发布","还会","务器","发送","者","通信","秘密","过程","三个","服务器","有","客户端","发布者","再","来","是","发现","会","命令","一个","下"," ","大家","客户","其","看","也","其实","应用层","的","动图","收到","运动","目标","服务器端","一种","周期","两个","调用","实现","就是","使用","上边","反馈","基于","和","动作","不是","订阅","仔细","时","没错","机制","竟然","，","话题","表示","。","隐藏","应用","底层","模块","当","请求"],"title":"由服务和话题合成","title_tokens":["服务","和","合成","话题","由"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_7","text":"我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback","text_tokens":["理解","指定","turtle1","让","--","key","概念","absolute","send","启动","姿态","加深","ros2","命令","：","控制","可以"," ","接下","node","turtle","我们","rotateabsolute","仿真","{","}","下来","一","某",":","的","$","\"","feedback","小海","到","再用","真器","使用","rotate","action","-","info","小海龟","案例","对","动作","teleop","1.57","/","按照","海龟","，","接下来","。","以下","turtlesim","_","goal","运动","仿真器","theta","run"],"title":"案例一：小海龟的动作","title_tokens":["小海龟","案例","动作","：","的","海龟","小海","一"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_8","text":"如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。","text_tokens":["希望","服务","务器","让","就","一起","机器人","通信","接口","服务器","有","客户端","过程","来","并","呢","是","方法","封装","中","代码","圈","编程","一个"," ","接下","转个","我们","通过","客户","下来","虽然","不会","针对","的","？","请","服务器端","实现","试一试","特性","但","使用","基于","实际","和","动作","一套","假设","好","接下来","话题","，","而是","。","机器","直接","如何","在"],"title":"案例二：机器人画圆","title_tokens":["二","画圆","案例","：","机器人","机器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_9","text":"启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。","text_tokens":["服务","开始","务器","learning","发送","就","终端","机器人","度","服务器","结束","客户端","server","启动","分析","每","并","运行","ros2","命令","中","：","完成","可以"," ","接下","最终","下","我们","一次","例程","客户","信息","下来","背后","的","$","client","目标","服务器端","move","两个","模拟","30","实现","示例","action","反馈","看到","和","动作","原理","之后","服务端","_","，","一下","机器","。","接下来","这个","运动","分别","run"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_10","text":"例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是 动作的目标 ，enable为true时，表示开始运动； 第二块是 动作的执行结果 ，finish为true，表示动作执行完成； 第三块是 动作的周期反馈 ，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ...","text_tokens":["开始","角度","interfaces","default","自定","不同","定义","为","；","第三块","required","标准","我们","{","根据","还","(","txt","第二","true","到","generate","movecircle","action","反馈","rosidl","动作","表示","。","---","需要","让","learning","过程","name","三个","是","中","后","部分","ros","周期","cmakelists","bool","时","机器","位置",".","\"","编译器","int32","自定义","机器人",")","第一","语言","当前","结果","第二块","find","例程","}","state","二块","指令","的","目标","生成","包含","generators","finish","不是","/","_","第三","在","包","project","接口","并","执行","编译","代码","三块","配置","功能","：","完成"," ","通过","interface","成功","旋转","第一块","$","选项","使用","一块","package","enable","#","是否","接口定义","自动","，","进行","运动","..."],"title":"接口定义","title_tokens":["定义","接口","接口定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_11","text":"通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。","text_tokens":["服务","开始","务器","发送","通信","机器人","结束","服务器","分析","客户端","并","相比","运行","代码","理","一个","模型","思路","控制"," ","接下","我们","例程","客户","后","信息","下来","一","之前","起来","的","写","清楚","送给","目标","周期","就是","这样","相对","反馈","较长","和","动作","通信模型","接下来","，","话题","机器","。","程序","一下","发送给","运动"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_12","text":"learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["服务","actionserver","名","设置","创建","从","度","server","角度","自定","d","moving","定义","一个","入口","setup","编写","{","msg","=","py","spin","(","circle","[","args","move","true","到","示例","'","destroy","负责","action","movecircle","反馈","动作","publish","guyuehome","处理","文件","python","表示","接口类型","程序","result","feedback","30","需要","time","销毁","加入","发布","让","learning","super","函数","节点","服务器","name","居","return","publishing","退出","get","import","scripts","后","信息","bin","（","handle","i","8","运动","movecircleactionserver","循环","周期","def","0","\"",".","类型","coding","360","点","父类","from","务器","自定义","知道","sleep","main","类",")","ros2","）","当前","结果","range","node","主","最终","}","state","古月","圆周","的","class","收到","目标","]","usr","__","如下","points","python3","@","-","finish","www","圆周运动","之后","/","_","服务端","回调","rclpy","0.5","库","接口类","goal","消息","env","console","对象","包","succeed","接口",",","init","初始化","并","执行","编译","!","none","代码","配置","等待","初始","功能","：","完成"," ","for","成功","关闭","系统",":","entry","utf","callback","logger","execute","选项","处理函数","*","作者","com","info","#","%","，","self","in","打开","shutdown","进行","interface","说明","、","..."],"title":"服务端代码解析","title_tokens":["服务","解析","代码","服务端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_13","text":"learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["服务","开始","名","发送","设置","创建","send","server","被","自定","d","定义","为","一个","入口","setup","编写","{","msg","=","py","spin","(","获取","circle","[","args","服务器端","move","true","示例","'","使","destroy","action","movecircle","反馈","动作","guyuehome","处理","文件","python","response","拒绝执行","接口类型","程序","result","feedback","需要","销毁","async","加入","让","learning","super","movecircleactionclient","函数","节点","name","服务器","居","客户端","if","return","拒绝","退出","get","import","not","scripts","后","bin","（","handle","rejected","8","运动","接收","received","循环","周期","def","时","读取","accepted","机器","\"",".","类型","请求","coding","点","父类","from","自定义","务器","知道","机器人","启动","能","类","main",")","日志","ros2","）","add","结果","node","主","最终","}","state","future","actionclient","古月","圆周","的","class","收到","目标","]","usr","__","如下","points","python3","@","-","finish","www","圆周运动","之后","/","_","done","回调","rclpy","库","接口类","goal","数据","消息","输出","env","console","希望","对象","包","方式","接口",",","init","初始化","并","执行","编译","!","wait","none","代码","配置","等待","初始","功能","：","完成"," ","客户","for","关闭","系统",":","entry","utf","client","callback","logger","顺利","选项","异步","*","作者","com","info","如果","#","enable","%","，","self","打开","shutdown","进行","interface","说明","、"],"title":"客户端代码解析","title_tokens":["代码","解析","客户端","客户"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_14","text":"动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求","text_tokens":["服务","常用","列表","发送","name","send",">","ros2","命令","：","list"," ","数据类型","type","的","$","类型","data","查看","如下","<","action","info","动作","#","操作","请求","_","goal","数据"],"title":"动作命令行操作","title_tokens":["命令","操作","命令行","动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["tutorials","docs",":","https","-","org","actions","html","/","understanding","ros",".","humble","en","ros2"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/","text":"参数 话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。 通信模型 比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。 全局字典 在ROS系统中，参数是以 全局字典 的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。 可动态监控 在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。 案例一：小海龟例程中的参数 在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 启动两个终端，分别运行小海龟仿真器和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看参数列表 当前系统中有哪些参数呢？我们可以启动一个终端，并使用如下命令查询： $ ros2 param list 参数查询与修改 如果想要查询或者修改某个参数的值，可以在param命令后边跟get或者set子命令： $ ros2 param describe turtlesim background_b # 查看某个参数的描述信息 $ ros2 param get turtlesim background_b # 查询某个参数的值 $ ros2 param set turtlesim background_b 10 # 修改某个参数的值 参数文件保存与加载 一个一个查询/修改参数太麻烦了，不如试一试参数文件，ROS中的参数文件使用yaml格式，可以在param命令后边跟dump子命令，将某个节点的参数都保存到文件中，或者通过load命令一次性加载某个参数文件中的所有内容： $ ros2 param dump turtlesim >> turtlesim.yaml # 将某个节点的参数保存到参数文件中 $ ros2 param load turtlesim turtlesim.yaml # 一次性加载某一个文件中的所有参数 案例二：参数编程 接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。 运行效果 启动一个终端，先运行第一句指令，启动param_declare节点，终端中可以看到循环打印的日志信息，其中的“mbot”就是我们设置的一个参数值，参数名称是“robot_name”，通过命令行修改这个参数，看下终端中会发生什么？ $ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle 代码解析 我们来看下在代码中，如何声明、创建、修改一个参数的值。 learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], }, 案例三：机器视觉应用 参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。 运行效果 启动三个终端，分别运行： 相机驱动节点 视觉识别节点 修改红色阈值 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180 在启动的视觉识别节点中，我们故意将视觉识别中红色阈值的上限设置为0，如果不修改参数，将无法实现目标识别。 为了便于调整阈值，我们在节点中将红色阈值的限位修改为了ROS参数，通过命令行修改该参数的值，就可以实现视觉识别啦。 代码解析 我们来看下在视觉识别的代码中，是如何通过参数来设置阈值的。 learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["服务","终端","全局","d","内容","某个","三","所有","提示","不如","我们","mask","考虑","存在","dump","看","s","py","驱动","(","写","circle","array","访问","cv","真器","比较","'","y","参数值","提炼","三种","程序","value","传输方式","红色","去除","h","string","键盘","super","hierarchy","if","有","然后","一两","中","显示","一句","get","易用性","计算","scripts","一","不少","核心","时候","（","parameter","imagesubscriber","findcontours","“","修改","bgr","得到","两个","及","参考","<","读取","形态","一下","coding","真实","html","与","就","cvtcolor","chain","多个","）","当前","键和值","问题","仿真","大家","upper","指令","的","param","sensor","为了","data","python3","看到","出来","通信模型","_","每次","回调","rclpy","cam","库","应用","create","面积","run","在","方式","解析","实现目标","初始化","raw","想要","再","编译","contours","150","模型","下","颜色","continue","entry","utf","logger","其他","加载","10","receiving","info","号","定时器","lower","哪些","turtlesim","self","打开","默认值","发送给","开始","列表","发送","设置","boundingrect","某些","了解","new","入口","可能","load","编写","nodea","第一句","{","”","msg","可","还","spin","继续","hello","二值化","所在","numpy","关注","影响","w","示例","inrange","就要","什么","视觉","文件","表示","。","bgr2hsv","需要","加入","让","来看","哪个","函数","传输","过程","key","name","opencv","居","识别","detect","是","叫","调整","作用","转换","import","bin","范围","节","全局变量","把","共享","shape","坐标","像","化成","该","0","机器","相机","队列",".","名称","usb","类型","知道","下限","物体","上角","默认","像素","会","变量","丰富","node","主","组成","后边","}","某","type","color","介绍","或者","起来","class","优化","目标","usr","特性","bgr8","美颜","了","很多","对","www","值","/","长度","数据","熟悉","消息","仿真器","env","动态","跟","对象","理解","指定","包","cv2","区域",",","麻烦","来","并","类似","检测","代码","parameternode","两句"," ","分辨率","5","for","本","滑动","frame","最新",":","$","callback","as","噪声","使用","com","以","是否","将","说明","describe","名","从","输入","2","nodeb","不同","简单","连接","变化","提供","体验","转化成","等","便于","img","啦","格式","[","这些","数值","实现","到","分辨","video","一次性","—","重新","二","监控","进入","节点","三个","int","一两句","运行","不","方法","robot","en","understanding","退出","合成","易用","后","信息","辨率","也","链接","非常","循环","ros","提高","周期","编码","set","def","宽","条","90","环境","approx","勾勒","配置文件","机制","保存","1","如何","父类","retr","者","50","用到","+","机器人","启动","类","立刻","左上","日志","第一","ros2","已经","sub","单位","接下","键值","255","阈值","中心","subscription","清楚","办法","]","__","试一试","就是","如下","案例","不是","其中","几个","图像识别","console","比如","从而","hsv","init","挺","xy","都","执行","比较简单","等待","初始","功能","x","msgs","字典","关闭","中将","系统","定时","高","很大","敏感","docs","如果","已","话题","进行","分别","background","点画","苹果","timer","参数","通信","度","创建","为","端口","查询","编程","一个","list","setup","控制","参数设置","128","说干就干","这","光线","发生","那个","=","获取","即可","args","查看","destroy","么","动作","teleop","guyuehome","处理","接下来","python","180","用于","销毁","learning","多少","exe","mbot","red","呢",">","大大","可以","一次","一些","下来","部分","8","太小","一种","由","tutorials","小海龟","imshow","cvbridge","\"","命令行","声明","点","常用","图像","from","左上角","打印","整个","drawcontours","main","曝光",")","输入框","轮廓","waitkey","listener","图像处理","b","integer","bridge","例程","转化","描述","古月","高级","送给","大大提高","太","parameters","小海","限位","points","@","-","和","订阅","all","这个","海龟","效果","先","输出","上限","成","一样","秒","无法","接口","改变","!","命令","none","declare","配置","yaml","https","org","：","子","完成","turtle","通过","cnt","to","等等","含义","c++","？","中有","object","互相","选项","*","np","作者","humble","叫做","#","%","故意","，","in","imgmsg","shutdown","image","、"],"title":"参数","title_tokens":["参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_1","text":"话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。","text_tokens":["服务","常用","知道","参数","通信","传输","方式","某些","机器人","全局","节点","再","来","类似","了解","不","多个","中","是","已经","运行","编程","变量","可以"," ","我们","大家","这","本","便于","字典","节","系统","全局变量","介绍","的","c++","清楚","共享","ros","一种","动作","是否","机制","三种","话题","，","—","。","程序","数据","机器","传输方式","、","在"],"title":"参数","title_tokens":["参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_2","text":"比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。","text_tokens":["参数","设置","度","输入","nodeb","不同","端口","连接","参数设置","nodea","我们","考虑","这","那个","驱动","格式","关注","这些","影响","到","分辨","什么","视觉","文件","。","程序","需要","哪个","多少","过程","节点","有","识别","是","中","作用","可以","后","一些","辨率","也","部分","核心","时候","编码","像","条","配置文件","机器","相机","usb","图像","就","整个","曝光","输入框","会","问题","阈值","或者","的","就是","美颜","和","很多","效果","图像识别","面积","在","一样","比如","区域","都","执行","改变","配置","功能"," ","分辨率","通过","等等","滑动","很大","使用","是否","，","进行","分别"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_3","text":"在ROS系统中，参数是以 全局字典 的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。","text_tokens":["真实","一样","跟","理解","名","参数","就","全局","有","然后","是","中","叫","为","编程","一个","键和值","可以","合成"," ","组成","我们","存在","后边","键值","等","字典","也","时候","系统","或者","的","？","即可","ros","数值","访问","由","就是","使用","像","什么","以","叫做","和","了","号","参数值","形态","这个","，","。","名称","在"],"title":"全局字典","title_tokens":["全局","字典"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_4","text":"在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。","text_tokens":["知道","比如","参数","用到","从而","节点","有","都","立刻","ros2","中","会","编程","一个","丰富","可以","可能"," ","大家","这","某","也","最新","获取","高级","的","非常","共享","修改","办法","访问","其他","数值","特性","了","如果","对","，","。","进行","在"],"title":"可动态监控","title_tokens":["动态","可","监控"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_5","text":"在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 启动两个终端，分别运行小海龟仿真器和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["参数","键盘","终端","节点","分别","key","启动","运行","方法","ros2","中","命令","：","提供","控制","node","下"," ","turtle","我们","通过","例程","仿真","不少","一","含义","也","起来","的","$","命令行","两个","小海","真器","使用","了","和","小海龟","teleop","这个","海龟","，","turtlesim","。","_","熟悉","仿真器","run","在"],"title":"案例一：小海龟例程中的参数","title_tokens":["中","小海龟","案例","：","的","参数","海龟","例程","小海","一"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_6","text":"当前系统中有哪些参数呢？我们可以启动一个终端，并使用如下命令查询： $ ros2 param list","text_tokens":["参数","终端","启动","并","呢","ros2","命令","查询","当前","一个","：","list","可以"," ","我们","系统","$","中有","？","param","使用","如下","哪些","，"],"title":"查看参数列表","title_tokens":["查看","参数","列表"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_7","text":"如果想要查询或者修改某个参数的值，可以在param命令后边跟get或者set子命令： $ ros2 param describe turtlesim background_b # 查看某个参数的描述信息 $ ros2 param get turtlesim background_b # 查询某个参数的值 $ ros2 param set turtlesim background_b 10 # 修改某个参数的值","text_tokens":["跟","describe","参数","想要","ros2","查询","命令","某个","子","：","可以","get"," ","b","后边","信息","描述","或者","的","$","param","修改","查看","set","10","如果","#","值","_","，","turtlesim","background","在"],"title":"参数查询与修改","title_tokens":["查询","与","参数","修改"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_8","text":"一个一个查询/修改参数太麻烦了，不如试一试参数文件，ROS中的参数文件使用yaml格式，可以在param命令后边跟dump子命令，将某个节点的参数都保存到文件中，或者通过load命令一次性加载某个参数文件中的所有内容： $ ros2 param dump turtlesim >> turtlesim.yaml # 将某个节点的参数保存到参数文件中 $ ros2 param load turtlesim turtlesim.yaml # 一次性加载某一个文件中的所有参数","text_tokens":["跟","参数","节点","麻烦","都","内容",">","ros2","查询","中","命令","yaml","某个","一个","子","所有","：","可以","load"," ","不如","通过","后边","一次","dump","某","或者","的","格式","$","param","修改","ros","太","试一试","到","使用","加载","了","#","保存","/","文件","，","一次性","将","turtlesim",".","在"],"title":"参数文件保存与加载","title_tokens":["与","参数","保存","文件","加载"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_9","text":"接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。","text_tokens":["开始","设置","参数","函数","就","一两","一两句","都","来","方法","比较简单","中","简单","两句","可以","体验","接下","我们","这","下来","的","写","实现","比较","使用","就要","了","和","读取","接下来","，","一下","几个","程序","。","先","在"],"title":"案例二：参数编程","title_tokens":["二","编程","案例","：","参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_10","text":"启动一个终端，先运行第一句指令，启动param_declare节点，终端中可以看到循环打印的日志信息，其中的“mbot”就是我们设置的一个参数值，参数名称是“robot_name”，通过命令行修改这个参数，看下终端中会发生什么？ $ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle","text_tokens":["learning","设置","参数","打印","终端","节点","name","mbot","启动","运行","日志","第一","是","中","robot","declare","命令","会","ros2","一个","一句","可以","下"," ","turtle","我们","第一句","通过","”","信息","看","发生","parameter","指令","的","$","“","？","param","修改","循环","数值","就是","set","什么","看到","参数值","_","，","其中","这个","先","命令行","run","名称"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_11","text":"我们来看下在代码中，如何声明、创建、修改一个参数的值。 learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], },","text_tokens":["列表","发送","timer","参数","设置","创建","从","2","为","一个","new","入口","setup","编写","我们","{","s","=","py","spin","(","hello","[","args","数值","到","示例","'","destroy","参数值","guyuehome","文件","python","。","value","程序","重新","需要","销毁","加入","让","learning","来看","string","super","函数","节点","name","mbot","居","robot","中","退出","get","import","scripts","后","信息","bin","（","parameter","8","修改","循环","周期","set","def","读取","\"",".","如何","coding","声明","点","父类","from","知道","打印","main","类",")","默认","日志","ros2","）","node","单位","主","}","type","古月","的","class","param","送给","]","usr","__","parameters","如下","points","python3","@","-","www","all","值","_","/","回调","rclpy","库","create","输出","env","在","console","对象","指定","秒","包","接口",",","init","初始化","并","执行","编译","!","none","代码","declare","配置","等待","parameternode","初始","功能","完成","：","下"," ","关闭","系统",":","定时","entry","utf","callback","logger","选项","*","作者","com","info","#","定时器","%","，","self","将","打开","默认值","进行","shutdown","发送给","说明","、"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_12","text":"参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。","text_tokens":["动态","来看","参数","设置","就","物体","机器人","过程","挺","麻烦","识别","再","呢","是","运行","不同","会","中","已经","代码","大大","变化","可以"," ","易用性","下","不如","我们","易用","说干就干","大家","成","光线","看","也","还","阈值","继续","把","的","？","优化","修改","大大提高","提高","敏感","使用","示例","比较","么","了","环境","对","不是","提炼","视觉","，","每次","机器","程序","效果","先","应用","。","如何","在"],"title":"案例三：机器视觉应用","title_tokens":["三","案例","：","视觉","机器","应用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_13","text":"启动三个终端，分别运行： 相机驱动节点 视觉识别节点 修改红色阈值 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180 在启动的视觉识别节点中，我们故意将视觉识别中红色阈值的上限设置为0，如果不修改参数，将无法实现目标识别。 为了便于调整阈值，我们在节点中将红色阈值的限位修改为了ROS参数，通过命令行修改该参数的值，就可以实现视觉识别啦。","text_tokens":["h","在","learning","值","设置","参数","无法","就","终端","exe","节点","三个","分别","实现目标","启动","识别","detect","red","运行","不","ros2","中","为","命令","调整","：","可以","node"," ","我们","通过","upper","便于","中将","阈值","驱动","parameter","$","的","啦","param","修改","为了","目标","object","ros","限位","实现","命令行","set","如果","该","视觉","_","，","cam","相机","180","故意","将","0","。","红色","run","上限","usb"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_14","text":"我们来看下在视觉识别的代码中，是如何通过参数来设置阈值的。 learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], },","text_tokens":["点画","苹果","名","参数","设置","boundingrect","创建","从","2","d","为","一个","list","入口","setup","编写","转化成","提示","128","我们","mask","{","知道","msg","=","py","spin","(","img","二值化","所在","numpy","circle","[","array","args","数值","cv","到","w","示例","'","inrange","y","destroy","参数值","guyuehome","处理","视觉","python","180","表示","video","。","value","程序","文件","bgr2hsv","红色","用于","去除","需要","销毁","加入","h","让","learning","来看","进入","super","函数","opencv","节点","name","hierarchy","居","if","int","识别","detect","red","是","中","显示","转换","退出","get","计算","import","scripts","后","信息","一些","bin","范围","（","parameter","imagesubscriber","8","findcontours","太小","bgr","shape","ros","得到","循环","及","坐标","def","<","宽","90","approx","化成","勾勒","读取","imshow","0","cvbridge","1","队列","\"",".","如何","类型","coding","点","父类","from","图像","与","下限","者","retr","左上角","+","打印","50","cvtcolor","chain","上角","drawcontours","main","类","左上",")","日志","像素","轮廓","ros2","）","waitkey","sub","node","图像处理","listener","integer","主","bridge","}","upper","转化","255","阈值","古月","color","中心","的","class","subscription","param","sensor","目标","data","]","usr","__","bgr8","如下","points","python3","@","-","和","订阅","www","出来","/","_","长度","回调","rclpy","效果","库","create","消息","面积","env","在","上限","输出","console","对象","包","hsv","cv2","接口",",","init","初始化","xy","raw","来","contours","并","!","编译","检测","none","代码","declare","150","配置","等待","初始","x","功能","模型","完成","：","下"," ","颜色","通过","cnt","5","to","for","msgs","关闭","frame","系统",":","continue","entry","utf","callback","as","logger","噪声","object","互相","选项","高","*","np","作者","com","10","使用","receiving","info","#","%","lower","已","，","self","话题","in","将","imgmsg","进行","shutdown","打开","说明","image","、"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["tutorials","docs",":","https","-","org","html","/","understanding","ros","parameters",".","humble","en","ros2"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/","text":"分布式通信 智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。 分布式通信 什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。 分布式网络搭建 除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。 树莓派配置 在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。 装系统 我们先要给树莓派装系统，这里我们选择的是 Ubuntu Mate 针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/ 安装ROS2 在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。 编译代码 将我们课程的代码也下载到树莓派中，进行编译。 远程桌面 如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728 分布式数据传输 树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。 分布式网络分组 没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。 案例一：小海龟分布式控制 分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动： $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端 案例二：话题分布式通信 我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串： $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端 案例三：服务分布式通信 话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能： $ ros2 run learning_service service_adder_server # PC端 $ ros2 run learning_service service_adder_client 2 3 # 树莓派端 案例四：机器视觉分布式应用 以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体： $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 没有任何问题，视觉识别的效果如下。 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。 参考链接 https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["服务","三","csdn","同一个","局域网络","我们","py","驱动","经典","课程","任务","的话","一系","上去","访问","比较","真器","情况","鼠标","cpp","结构","两者","这里","平台","烧写","程序","带领","岂","红色","任务分配","而言","发布","键盘","真有","有","然后","中","显示","一句","具体","看上去","计算","网上","一","your","布式","之前","修改","两个","参考","<","框架","好","一下","模式","主要","html","学习","资源","就","ubuntu","实时","之间","talker","安排","出现","多个","问题","仿真","大家","于是","采用","的","性能","之后","_","cam","应用","派装","run","在","卡中","设计","各种","这种","编译","再","分布式","下","变得","122599728","个","适合","传感","采集","之外","webcam","client","典型","请","分布式系统","所","不在话下","turtlesim","你","电脑","像头","端的","摄像","基本","可能","编写","另外","远程桌面","依然","做","还","复杂","继续","hello","友好","求和","派里","什么","过来","客户端程序","视觉","。","需要","派","加入","端","远程","流畅","不够","传输","key","经常","about","识别","反过","是","叫","attention","作为","装","小型","顺利实现","局域","像","实际","讲过","似乎","net","资料","小","机器",".","反过来","usb","物体","会","只","先要","node","想","组成","事情","树莓","download","安装","或者","笔记","起来","拆解","压力","sd","神奇","了","很多","方便","放","domain","/","仿真器","topic","字符串","pub","每","并","来","类似","选择","代码","nodes","消耗","传感器"," ","不在","互通","减轻",":","控制器","$","任何","使用","局域网","据传","没有","是否","将","繁多","分布","开发","server","2","一致","简而言之","不同","以上","变化","连接","提供","摄像头","发给","分布式应用","、","等","测试","字符","计算能力","啦","这些","实现","较","能力","到","系列","虚拟","—","直接","基本一致","二","监控","demo","毕竟","节点","笔记本电脑","运行","不","方法","en","原本","后","信息","也","链接","mate","非常","ros","环境","笔记本","只要","机制","讲","全都","位于","步骤","此外","3","电机","者","用到","机器人","看上","启动","ros2","之一","已经","qq","sub","给","显示器","接下","完全","感觉","一系列","流程","虚拟机","就是","如下","上边","遇到","不是","案例","没","比如","下载","挺","都","功能","客户","成功","放在","系统","几乎","concepts","带来","款","频繁","还是","确保","这样","docs","如果","上","话题","52785580","进行","加法","运动","adder","一切","感器","分组","有点","整体","通信","过","为","export","多","一个","控制","这","发生","针对","计算机","=","service","魅力","小组","即可","pc","并且","动作","teleop","处理","接下来","learning","不过","exe","服务器","客户端","打通","呢",">","体积","可以","他们","helloworld","一些","下来","才能","更强","由","放置","我","小海龟","互联","命令行","支持","服务器程序","派端","务器","图像","world","如此","处于","数据传输","listener","例程","轻松","镜像","网络","分配","则","模拟","小海","智能","-","和","订阅","操作","卡顿","海龟","而是","效果","先","四","发布者","算机","一样","希望","这么","article","无法","用","桥接","桌面","命令","配置","搭建","感受","https","org","：","完成","turtle","id","除了","通过","bashrc","里","？","中有","顺利","试试","建立","如","同一","humble","相互","#","details","blog","，","数据"],"title":"分布式通信","title_tokens":["分布","分布式","布式","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_1","text":"智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。","text_tokens":["分布","不够","机器人","经常","运行","出现","会","多个","中","分布式","多","功能","一个","可以"," ","计算","、","这","等","计算机","减轻","放在","布式","系统","计算能力","里","的","拆解","分配","任务","压力","？","这些","实现","能力","到","智能","就是","分布式系统","全都","遇到","情况","如果","不是","上","处理","卡顿","，","机器","将","平台","。","繁多","岂","任务分配","算机"],"title":"分布式通信","title_tokens":["分布","分布式","布式","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_2","text":"什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。","text_tokens":["分布","开发","感器","有点","通信","过","电脑","不同","为","多","变化","一个","可能","控制","另外","我们","做","这","等","还","计算机","复杂","驱动","魅力","任务","这些","上去","实现","较","到","比较","派里","什么","并且","结构","处理","视觉","接下来","平台","。","带领","需要","派","监控","远程","不过","传输","毕竟","节点","有","笔记本电脑","运行","是","不","叫","中","体积","可以","看上去","计算","原本","作为","信息","下来","一","也","布式","之前","非常","ros","更强","两个","由","框架","环境","笔记本","小","好","机器","讲","主要","位于","此外","电机","资源","就","机器人","看上","之间","之一","已经","只","接下","组成","完全","大家","于是","采用","树莓","笔记","起来","的","分配","压力","性能","就是","上边","了","和","方便","放","应用","算机","在","设计","比如","各种","挺","都","这种","每","分布式","配置","感受","功能","消耗","传感器"," ","下","适合","减轻","系统","传感","放在","控制器","？","任何","典型","款","分布式系统","上","相互","，","将","运动","数据"],"title":"分布式通信","title_tokens":["分布","分布式","布式","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_3","text":"除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。","text_tokens":["派","机器人","电脑","笔记本电脑","选择","一个","控制","另外","计算","我们","除了","树莓","控制器","笔记","的","之外","模拟","放置","使用","了","我","上","笔记本","，","平台","机器","。","在"],"title":"分布式网络搭建","title_tokens":["分布","分布式","布式","搭建","网络"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_4","text":"在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。","text_tokens":["开发","派","有","都","配置","可以","我们","网上","大家","树莓","也","之前","的","参考","环境","很多","资料","好","，","。","先","需要","在"],"title":"树莓派配置","title_tokens":["树莓","派","配置"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_5","text":"我们先要给树莓派装系统，这里我们选择的是 Ubuntu Mate 针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/","text_tokens":["卡中","派","下载","ubuntu","就","启动","是","选择","https","org","：","给","先要","可以"," ","我们","树莓","download","针对","链接","mate","系统",":","镜像","的","到","sd","-","了","之后","/","，","这里","烧写","。",".","派装"],"title":"装系统","title_tokens":["系统","装"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#ros2","text":"在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。","text_tokens":["中","一样","mate","系统","ros2","和","端","在","的","ubuntu","好"," ","，","流程","。","电脑","安装"],"title":"安装ROS2","title_tokens":["ros2","安装"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_6","text":"将我们课程的代码也下载到树莓派中，进行编译。","text_tokens":["中","代码","派","课程","的","下载","，","我们","将","。","进行","树莓","到","编译","也"],"title":"编译代码","title_tokens":["代码","编译"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_7","text":"如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728","text_tokens":["派","步骤","端","远程","article","键盘","就","整体","有","电脑","桌面","一致","不","配置","qq","https","以上","连接","显示","基本","：",".","显示器","可以"," ","csdn","远程桌面","通过","大家","122599728","树莓","也","链接","系统",":","的","网络","的话","访问","流程","参考","使用","如下","了","和","如果","上","鼠标","方便","net","details","操作","好","/","，","blog","_","。","52785580","直接","基本一致","在"],"title":"远程桌面","title_tokens":["桌面","远程","远程桌面"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_8","text":"树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。","text_tokens":["服务","你","分组","通信","电脑","简而言之","为","连接","一个","同一个","局域网络","我们","做","这","等","发生","计算机","py","测试","小组","实现","能力","到","pc","什么","并且","动作","cpp","接下来","虚拟","平台","。","直接","需要","而言","派","发布","端","不过","demo","节点","打通","呢","不","是","中","可以","具体","计算","attention","后","他们","下来","也","之前","修改","两个","局域","像","讲过","互联","只要","好","一下","模式","命令行","派端","者","就","之间","启动","处于","talker","ros2","会","已经","listener","问题","接下","事情","树莓","感觉","安装","的","网络","虚拟机","如下","神奇","了","和","订阅","很多","_","而是","效果","发布者","run","算机","在","一样","希望","无法","用","桥接","都","并","命令","配置","nodes","：","完成"," ","互通","个","里","$","？","中有","带来","请","如","同一","使用","确保","这样","局域网","所","#","如果","，","话题","将","、"],"title":"分布式数据传输","title_tokens":["分布","分布式","布式","据传","传输","数据","数据传输"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_9","text":"没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。","text_tokens":["一样","派","加入","分组","无法","就","通信","处于","电脑","类似",">","ros2","中","不同","端的","配置","export","一个","同一个","提供","一句","可以","：","问题"," ","计算","我们","id","树莓","才能","bashrc","your","计算机","=","小组","的","$","分配","即可","ros","则","实现","同一","到","<","这样","了","和","如果","机制","两者","domain","_","，","将","。",".","没","算机","在"],"title":"分布式网络分组","title_tokens":["分布","分布式","布式","分组","网络"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_10","text":"分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动： $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端","text_tokens":["派端","分布","这么","派","端","学习","键盘","流畅","通信","节点","真有","key","过","启动","电脑","来","反过","ros2","中","分布式","已经","：","可以","控制","想"," ","node","turtle","我们","例程","仿真","依然","树莓","一些","成功","也","继续","测试","布式","经典","或者","之前","的","网络","$","运动","试试","建立","ros","小海","真器","pc","神奇","似乎","了","小海龟","案例","上","是否","#","teleop","过来","_","，","海龟","—","。","turtlesim","先","反过来","仿真器","run","在"],"title":"案例一：小海龟分布式控制","title_tokens":["分布","分布式","布式","小海龟","案例","：","控制","海龟","小海","一"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_11","text":"我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串： $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端","text_tokens":["派端","派","发布","端","learning","world","者","topic","通信","字符串","pub","电脑","呢","不","ros2","代码","：","sub","编写","可以","下"," ","我们","例程","作为","树莓","helloworld","字符","hello","之前","的","$","？","任何","修改","试试","使用","pc","情况","订阅","#","是否","_","，","话题","先","直接","发布者","run","在"],"title":"案例二：话题分布式通信","title_tokens":["分布","分布式","二","布式","案例","：","通信","话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_12","text":"话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能： $ ros2 run learning_service service_adder_server # PC端 $ ros2 run learning_service service_adder_client 2 3 # 树莓派端","text_tokens":["派端","服务","端","务器","3","learning","服务器","客户端","server","电脑","2","运行","ros2","功能","：","可以","问题"," ","不在","我们","客户","树莓","也","service","$","client","顺利","实现","顺利实现","求和","还是","pc","没有","#","不在话下","客户端程序","_","话题","，","。","程序","加法","adder","服务器程序","run"],"title":"案例三：服务分布式通信","title_tokens":["服务","分布","分布式","三","布式","案例","：","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_13","text":"以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体： $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 没有任何问题，视觉识别的效果如下。 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。","text_tokens":["一切","分布","开发","电脑","像头","为","摄像","端的","以上","连接","一个","提供","摄像头","我们","发给","做","还","复杂","测试","啦","友好","这些","一系","pc","系列","处理","视觉","接下来","。","红色","需要","派","端","learning","不够","exe","节点","然后","识别","方法","不","中","可以","下来","也","布式","小型","非常","修改","ros","实际","只要","好","机器","支持","usb","派端","图像","用到","如此","物体","机器人","实时","安排","ros2","会","sub","node","问题","接下","例程","树莓","轻松","一系列","的","网络","模拟","如下","了","_","cam","效果","run","没","在","topic","都","再","类似","代码","分布式","配置","搭建","功能","："," ","变得","通过","系统","采集","几乎","$","webcam","？","任何","频繁","使用","没有","上","#","，","将"],"title":"案例四：机器视觉分布式应用","title_tokens":["分布","分布式","布式","案例","：","视觉","机器","分布式应用","四","应用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_14","text":"https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["-","docs",":","https","html","org","domain","/","concepts","id","ros","about",".","humble","en"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2_%E6%A6%82%E5%BF%B5%E6%80%BB%E8%A7%88/","text":"从本节开始，我们将进入第二个篇章，以ROS2的核心概念为线索，详细讲解ROS2的应用开发方法。","text_tokens":["开发","开始","进入","概念","开发方法","方法","ros2","为","线索","我们","核心","详细","的","二个","本节","第二","从本节","篇章","以","第二个","讲解","，","将","。","应用"],"title":"概念总览","title_tokens":["总览","概念"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/","text":"Launch：多节点启动与配置脚本 到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是 Launch启动文件 ，它是ROS系统中多节点启动与配置的一种脚本。 Launch文件 这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。 多节点启动 先来看看如何启动多个节点。 运行效果 启动终端，使用ros2中的launch命令来启动第一个launch文件示例： $ ros2 launch learning_launch simple.launch.py 运行成功后，就可以在终端中看到发布者和订阅者两个节点的日志信息啦。 文件解析 这两个节点是如何启动的呢？我们来分析下这个launch文件。 learning_launch/simple.launch.py from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'learning_topic' , # 节点所在的功能包 executable = 'topic_helloworld_pub' , # 节点的可执行文件 ), Node ( # 配置一个节点的启动 package = 'learning_topic' , # 节点所在的功能包 executable = 'topic_helloworld_sub' , # 节点的可执行文件名 ), ]) 命令行参数配置 我们使用ros2命令在终端中启动节点时，还可以在命令后配置一些传入程序的参数，使用launch文件一样可以做到。 运行效果 比如我们想要运行一个Rviz可视化上位机，并且加载某一个配置文件，使用命令行的话，是这样的： $ ros2 run rviz2 rviz2 -d <PACKAGE-PATH>/rviz/turtle_rviz.rviz 命令后边还得跟一长串配置文件的路径，如果放在launch文件里，启动就优雅很多了： $ ros2 launch learning_launch rviz.launch.py 文件解析 命令行后边的参数是如何通过launch传入节点的呢？来看下这个launch文件。 learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 rviz_config = os . path . join ( # 找到配置文件的完整路径 get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'rviz2' , # 节点所在的功能包 executable = 'rviz2' , # 节点的可执行文件名 name = 'rviz2' , # 对节点重新命名 arguments = [ '-d' , rviz_config ] # 加载命令行参数 ) ]) 资源重映射 ROS社区中的资源非常多，当我们使用别人代码的时候，经常会发现通信的话题名称不太符合我们的要求，能否对类似的资源重新命名呢？ 为了提高软件的复用性，ROS提供了资源重映射的机制，可以帮助我们解决类似的问题。 运行效果 启动一个终端，运行如下例程，很快会看到出现了两个小海龟仿真器界面；再打开一个终端，发布如下话题，让海龟1动起来，海龟2也会一起运动： $ ros2 launch learning_launch rviz.launch.py $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 文件解析 为什么两个海龟都会动呢？这里要用到turtlesim功能包里另外一个节点，叫做mimic，它的功能是订阅某一个海龟的Pose位置，通过计算，变换成一个同样运动的速度指令，发布出去。 至于mimic节点订阅或者发布的话题名叫什么呢？我们就可以通过重映射修改成对应任意海龟的名字。 learning_launch/remapping.launch.py from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 namespace = 'turtlesim1' , # 节点所在的命名空间 executable = 'turtlesim_node' , # 节点的可执行文件名 name = 'sim' # 对节点重新命名 ), Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 namespace = 'turtlesim2' , # 节点所在的命名空间 executable = 'turtlesim_node' , # 节点的可执行文件名 name = 'sim' # 对节点重新命名 ), Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 executable = 'mimic' , # 节点的可执行文件名 name = 'mimic' , # 对节点重新命名 remappings = [ # 资源重映射列表 ( '/input/pose' , '/turtlesim1/turtle1/pose' ), # 将/input/pose话题名修改为/turtlesim1/turtle1/pose ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), # 将/output/cmd_vel话题名修改为/turtlesim2/turtle1/cmd_vel ] ) ]) ROS参数设置 ROS系统中的参数，也可以在Launch文件中设置。 运行效果 启动一个终端，运行如下命令： $ ros2 launch learning_launch parameters.launch.py 在启动的海龟仿真器中，我们看到背景颜色被改变了，这个颜色参数的设置就是在launch文件中完成的。 文件解析 我们看下在launch文件中如何来设置参数的。 learning_launch/parameters.launch.py from launch import LaunchDescription # launch文件的描述类 from launch.actions import DeclareLaunchArgument # 声明launch文件内使用的Argument类 from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) # 创建一个Launch文件内参数（arg）background_r ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) # 创建一个Launch文件内参数（arg）background_g ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) # 创建一个Launch文件内参数（arg）background_b ) return LaunchDescription ([ # 返回launch文件的描述信息 background_r_launch_arg , # 调用以上创建的参数（arg） background_g_launch_arg , background_b_launch_arg , Node ( # 配置一个节点的启动 package = 'turtlesim' , executable = 'turtlesim_node' , # 节点所在的功能包 name = 'sim' , # 对节点重新命名 parameters = [{ # ROS参数列表 'background_r' : LaunchConfiguration ( 'background_r' ), # 创建参数background_r 'background_g' : LaunchConfiguration ( 'background_g' ), # 创建参数background_g 'background_b' : LaunchConfiguration ( 'background_b' ), # 创建参数background_b }] ), ]) Attention launch文件中出现的argument和parameter，虽都译为“参数”，但含义不同： - argument：仅限launch文件内部使用，方便在launch中调用某些数值； - parameter：ROS系统的参数，方便在节点见使用某些数值。 加载参数文件 以上例程我们在launch文件中一个一个的设置参数，略显麻烦，当参数比较多的时候，建议使用参数文件进行加载。 learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 config = os . path . join ( # 找到参数文件的完整路径 get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 executable = 'turtlesim_node' , # 节点的可执行文件名 namespace = 'turtlesim2' , # 节点所在的命名空间 name = 'sim' , # 对节点重新命名 parameters = [ config ] # 加载参数文件 ) ]) Launch文件包含 在复杂的机器人系统中，launch文件也会有很多，此时我们可以使用类似编程中的include机制，让launch文件互相包含。 文件解析 learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch.actions import IncludeLaunchDescription # 节点启动的描述类 from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction # launch文件中的执行动作 from launch_ros.actions import PushRosNamespace # ROS命名空间配置 def generate_launch_description (): # 自动生成launch文件的函数 parameter_yaml = IncludeLaunchDescription ( # 包含指定路径下的另外一个launch文件 PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( # 对指定launch文件中启动的功能加上命名空间 actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ # 返回launch文件的描述信息 parameter_yaml_with_namespace ]) 功能包编译配置 ... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ... 参考链接 https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docs.ros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["符合","终端","rviz2","d","；","所有","内部","我们","py","(","中多","返回","的话","一系","上去","真器","y","'","比较","r","这里","程序","value","带领","自由","发布","很快","有","粘合剂","pose","linear","中","解决","get","看上去","计算","remapping","核心","时候","要","（","parameter","背景","“","修改","两个","调用","参考","<","别人","时","好","组装","pushrosnamespace","html","与","就","资源","机","软件","launchdescription","出现","多个","）","resource","它","问题","完整","仿真","大家","output","指令","的","第一个","为了","data","会动","看到","前为","_","每次","run","在","优雅","sim","方式","解析","turtlesim2","各种","想要","再","nonamespace","编译","arg","geometry","速度","下","颜色","变换","多样","加载","能否","自动","动","directory","ament","打开","turtlesim","...","namespaces","列表","设置","large","z","某些","当然","index","了解","pythonlaunchdescriptionsource","编写","另外","{","”","msg","还","复杂","所在","粘合","但","示例","什么","文件","。","重","脚本","需要","肯定","让","加上","来看","groupaction","函数","过程","乍","join","name","经常","是","甚至","attention","import","input","84","像","0","机器",".","名称","频次","可视","传入","xml","至于","会","丰富","include","node","模版","后边","}","某","simple","或者","目的","起来","之高","基于","阅读","了","很多","对","方便","projects","/","angular","仿真器","share","跟","指定","topic","包","pub","分析",",","麻烦","using","来","类似","代码","为止"," ","原有","for","重新命名",":","launchconfiguration","launch","$","得","使用","没有","config","略显","将","新","建议","那","名","不太","被","答案","输入","2","不同","以上","提供","映射","目前为止","有没有","啦","[","数值","到","generate","系列","files","arguments","一次性","path","turtle1","重新","出去","合剂","节点","rate","运行","方法","en","cmd","后","信息","也","链接","非常","名叫","空间","ros","提高","def","配置文件","机制","1","位置","executable","如何","当","with","找到","--","者","用到","+","glob","同样","机器人","看上","启动","类","日志","第一","ros2","一长串","sub","上位","虽","译","一系列","]","就是","生成","如下","包含","没错","社区","各个","内","includelaunchdescription","比如","可执行文件","都","执行","declarelaunchargument","x","功能","此时","msgs","成功","相当","系统","放在","argument","2.0","namespace","这样","任意","性","可视化","package","docs","如果","话题","122","进行","运动","background","os","g","参数","呀","通信","一起","创建","default","rviz","查询","为","做到","编程","多","一个","路径","参数设置","每当","这","=","并且","动作","1.8","长串","python","仅限","twist","learning","目前","return","呢",">","大大","可以","mimic","一次","复用","helloworld","一些","界面","见","一种","actions","vel","tutorials","小海龟","看看","\"","命令行","声明","remappings","from","main",")","description","对应","text","b","命名","例程","好像","帮助","描述","turtlesim1","parameters","小海","要求","-","textsubstitution","和","订阅","名字","这个","海龟","效果","先","发布者","成","一样","看下","改变","命令","发现","配置","packages","yaml","https","org","：","完成","多样化","turtle","通过","substitutions","行文","这是","为什么","含义","里","？","sources","互相","0.0","*","humble","叫做","#","，"],"title":"Launch","title_tokens":["launch"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch","text":"到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是 Launch启动文件 ，它是ROS系统中多节点启动与配置的一种脚本。","text_tokens":["肯定","那","与","目前","呀","终端","机器人","节点","方式","当然","启动","麻烦","答案","都","运行","呢","是","命令","中","为止","配置","一个","所有","它","可以"," ","我们","一次","每当","目前为止","有没有","系统","中多","的","launch","？","ros","一种","到","就是","这样","没有","很多","前为","好","文件","，","打开","机器","。","每次","一次性","新","脚本","需要"],"title":"Launch：多节点启动与配置脚本","title_tokens":["配置","多","：","与","launch","节点","启动","脚本"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_1","text":"这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。","text_tokens":["那","参数","呀","输入","了解","编程","一个","编写","我们","还","一系","上去","粘合","系列","文件","python","。","带领","自由","合剂","过程","乍","节点","粘合剂","呢","是","甚至","大大","中","可以","看上去","也","核心","ros","像","组装","命令行","如何","频次","就","看上","启动","ros2","出现","它","丰富","完整","模版","例程","大家","好像","描述","或者","目的","的","一系列","之高","就是","基于","阅读","了","和","很多","没错","各个","在","一样","各种","来","类似","命令","代码","配置","功能","多样化"," ","通过","原有","这是","相当","系统","launch","多样","使用","这样","，","进行"],"title":"Launch文件","title_tokens":["launch","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_1","text":"先来看看如何启动多个节点。","text_tokens":["节点","看看","。","先","启动","如何","来","多个"],"title":"多节点启动","title_tokens":["节点","多","启动"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_2","text":"启动终端，使用ros2中的launch命令来启动第一个launch文件示例： $ ros2 launch learning_launch simple.launch.py 运行成功后，就可以在终端中看到发布者和订阅者两个节点的日志信息啦。","text_tokens":["发布","learning","者","就","终端","节点","启动","来","运行","日志","第一","ros2","中","命令","一个","：","可以"," ","后","信息","成功","py","simple","的","launch","$","啦","第一个","两个","使用","示例","看到","和","订阅","文件","_","，","。",".","发布者","在"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_3","text":"这两个节点是如何启动的呢？我们来分析下这个launch文件。 learning_launch/simple.launch.py from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'learning_topic' , # 节点所在的功能包 executable = 'topic_helloworld_pub' , # 节点的可执行文件 ), Node ( # 配置一个节点的启动 package = 'learning_topic' , # 节点所在的功能包 executable = 'topic_helloworld_sub' , # 节点的可执行文件名 ), ])","text_tokens":["from","learning","topic","名","可执行文件","包","函数","pub","节点","分析",",","启动","launchdescription","类","来",")","呢","是","description","return","执行","配置","功能","一个","sub","node","下"," ","我们","import","这","信息","helloworld","行文","描述","=","py","(","simple",":","所在","的","launch","[","？","返回","ros","]","两个","生成","generate","actions","def","'","package","#","自动","文件","这个","_","/","。","executable",".","如何"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_4","text":"我们使用ros2命令在终端中启动节点时，还可以在命令后配置一些传入程序的参数，使用launch文件一样可以做到。","text_tokens":["一样","参数","终端","节点","启动","传入","ros2","命令","中","做到","配置","可以","我们","后","一些","还","的","launch","使用","时","文件","，","程序","。","在"],"title":"命令行参数配置","title_tokens":["命令","参数","命令行","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_5","text":"比如我们想要运行一个Rviz可视化上位机，并且加载某一个配置文件，使用命令行的话，是这样的： $ ros2 run rviz2 rviz2 -d <PACKAGE-PATH>/rviz/turtle_rviz.rviz 命令后边还得跟一长串配置文件的路径，如果放在launch文件里，启动就优雅很多了： $ ros2 launch learning_launch rviz.launch.py","text_tokens":["优雅","跟","比如","learning","就","可视","机","启动","想要","rviz2","d","运行","rviz","是","ros2","命令",">","配置","一长串","一个","：","路径"," ","turtle","我们","后边","上位","某","还","py","放在","里","的","$","launch","的话","得","使用","加载","<","这样","并且","可视化","-","package","如果","很多","了","配置文件","长串","文件","/","，","path","_",".","命令行","run"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_6","text":"命令行后边的参数是如何通过launch传入节点的呢？来看下这个launch文件。 learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 rviz_config = os . path . join ( # 找到配置文件的完整路径 get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'rviz2' , # 节点所在的功能包 executable = 'rviz2' , # 节点的可执行文件名 name = 'rviz2' , # 对节点重新命名 arguments = [ '-d' , rviz_config ] # 加载命令行参数 ) ])","text_tokens":["os","名","参数","rviz2","index","rviz","d","查询","一个","路径","=","py","(","所在","返回","[","generate","'","arguments","文件","python","path","。","重新","learning","来看","函数","节点","join","name","return","呢","是","方法","get","import","信息","ros","actions","def","配置文件","executable",".","命令行","如何","from","找到","启动","launchdescription","类","传入",")","description","node","完整","命名","后边","描述","的","]","生成","-","对","/","这个","_","share","可执行文件","包",",","执行","命令","配置","packages","功能","下"," ","turtle","通过","行文","重新命名",":","launch","？","加载","package","#","自动","directory","config","ament"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_7","text":"ROS社区中的资源非常多，当我们使用别人代码的时候，经常会发现通信的话题名称不太符合我们的要求，能否对类似的资源重新命名呢？ 为了提高软件的复用性，ROS提供了资源重映射的机制，可以帮助我们解决类似的问题。","text_tokens":["符合","资源","通信","不太","经常","软件","类似","呢","中","代码","会","发现","解决","多","提供","可以"," ","问题","映射","我们","命名","复用","帮助","重新命名","时候","的","非常","？","为了","ros","提高","使用","要求","别人","性","能否","了","对","机制","社区","，","话题","。","重","当","重新","名称"],"title":"资源重映射","title_tokens":["映射","资源","重"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_8","text":"启动一个终端，运行如下例程，很快会看到出现了两个小海龟仿真器界面；再打开一个终端，发布如下话题，让海龟1动起来，海龟2也会一起运动： $ ros2 launch learning_launch rviz.launch.py $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":["twist","发布","turtle1","让","learning","topic","--","终端","很快","一起","pub",",","z","rate","启动","2","再","linear","运行","rviz","出现","会","ros2","geometry","；","x","一个","："," ","cmd","{","例程","仿真","}","msg","msgs","也","py","界面",":","2.0","起来","$","launch","\"","两个","小海","0.0","真器","如下","y","vel","看到","了","小海龟","1.8","动","/","_","，","海龟","打开","话题","1","angular",".","运动","仿真器"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_9","text":"为什么两个海龟都会动呢？这里要用到turtlesim功能包里另外一个节点，叫做mimic，它的功能是订阅某一个海龟的Pose位置，通过计算，变换成一个同样运动的速度指令，发布出去。 至于mimic节点订阅或者发布的话题名叫什么呢？我们就可以通过重映射修改成对应任意海龟的名字。 learning_launch/remapping.launch.py from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 namespace = 'turtlesim1' , # 节点所在的命名空间 executable = 'turtlesim_node' , # 节点的可执行文件名 name = 'sim' # 对节点重新命名 ), Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 namespace = 'turtlesim2' , # 节点所在的命名空间 executable = 'turtlesim_node' , # 节点的可执行文件名 name = 'sim' # 对节点重新命名 ), Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 executable = 'mimic' , # 节点的可执行文件名 name = 'mimic' , # 对节点重新命名 remappings = [ # 资源重映射列表 ( '/input/pose' , '/turtlesim1/turtle1/pose' ), # 将/input/pose话题名修改为/turtlesim1/turtle1/pose ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), # 将/output/cmd_vel话题名修改为/turtlesim2/turtle1/cmd_vel ] ) ])","text_tokens":["列表","名","为","一个","另外","映射","我们","=","py","(","所在","返回","[","generate","'","什么","文件","这里","。","重","turtle1","重新","发布","出去","learning","函数","节点","name","pose","return","呢","是","可以","mimic","计算","cmd","import","remapping","信息","input","要","名叫","修改","空间","ros","两个","actions","def","vel","位置","executable",".","remappings","from","用到","就","同样","资源","启动","launchdescription","类",")","description","至于","它","对应","node","命名","某","描述","output","或者","指令","turtlesim1","的","]","会动","生成","订阅","对","名字","/","_","海龟","成","sim","可执行文件","包",",","turtlesim2","都","执行","配置","速度","功能"," ","通过","行文","为什么","变换","重新命名",":","里","launch","？","namespace","任意","叫做","package","#","自动","turtlesim","，","话题","将","运动"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#ros","text":"ROS系统中的参数，也可以在Launch文件中设置。","text_tokens":["中","系统","在","的","参数","可以","launch","设置","文件","，","ros","。","也"],"title":"ROS参数设置","title_tokens":["设置","ros","参数","参数设置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_10","text":"启动一个终端，运行如下命令： $ ros2 launch learning_launch parameters.launch.py 在启动的海龟仿真器中，我们看到背景颜色被改变了，这个颜色参数的设置就是在launch文件中完成的。","text_tokens":["learning","参数","设置","终端","被","启动","运行","改变","ros2","命令","中","一个","：","完成"," ","颜色","我们","仿真","py","$","launch","的","背景","parameters","就是","真器","如下","看到","了","文件","_","，","海龟","这个","。",".","仿真器","在"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_11","text":"我们看下在launch文件中如何来设置参数的。 learning_launch/parameters.launch.py from launch import LaunchDescription # launch文件的描述类 from launch.actions import DeclareLaunchArgument # 声明launch文件内使用的Argument类 from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) # 创建一个Launch文件内参数（arg）background_r ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) # 创建一个Launch文件内参数（arg）background_g ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) # 创建一个Launch文件内参数（arg）background_b ) return LaunchDescription ([ # 返回launch文件的描述信息 background_r_launch_arg , # 调用以上创建的参数（arg） background_g_launch_arg , background_b_launch_arg , Node ( # 配置一个节点的启动 package = 'turtlesim' , executable = 'turtlesim_node' , # 节点所在的功能包 name = 'sim' , # 对节点重新命名 parameters = [{ # ROS参数列表 'background_r' : LaunchConfiguration ( 'background_r' ), # 创建参数background_r 'background_g' : LaunchConfiguration ( 'background_g' ), # 创建参数background_g 'background_b' : LaunchConfiguration ( 'background_b' ), # 创建参数background_b }] ), ]) Attention launch文件中出现的argument和parameter，虽都译为“参数”，但含义不同： - argument：仅限launch文件内部使用，方便在launch中调用某些数值； - parameter：ROS系统的参数，方便在节点见使用某些数值。","text_tokens":["列表","g","设置","参数","创建","某些","default","不同","为","；","以上","一个","内部","我们","{","”","=","py","(","所在","返回","[","数值","generate","但","'","r","文件","。","value","重新","仅限","learning","函数","节点","name","return","中","attention","import","信息","（","parameter","见","84","“","ros","调用","actions","def","0","executable",".","如何","声明","from","启动","launchdescription","类",")","description","）","出现","text","node","b","命名","}","虽","描述","译","的","]","parameters","生成","textsubstitution","-","和","对","方便","/","_","内","在","sim","包","看下",",","都","来","arg","配置","declarelaunchargument","功能","："," ","substitutions","重新命名","含义","argument",":","系统","launchconfiguration","launch","使用","package","#","自动","turtlesim","，","122","background"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_12","text":"以上例程我们在launch文件中一个一个的设置参数，略显麻烦，当参数比较多的时候，建议使用参数文件进行加载。 learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 config = os . path . join ( # 找到参数文件的完整路径 get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 executable = 'turtlesim_node' , # 节点的可执行文件名 namespace = 'turtlesim2' , # 节点所在的命名空间 name = 'sim' , # 对节点重新命名 parameters = [ config ] # 加载参数文件 ) ])","text_tokens":["os","名","设置","参数","index","查询","以上","多","一个","路径","我们","=","py","(","所在","返回","[","比较","generate","'","文件","python","path","。","重新","learning","函数","节点","join","name","return","方法","中","get","import","信息","时候","空间","ros","actions","def","executable",".","当","from","找到","启动","launchdescription","类",")","description","node","完整","命名","例程","描述","的","]","parameters","生成","对","/","_","share","在","sim","可执行文件","包",",","turtlesim2","麻烦","执行","yaml","packages","配置","功能"," ","行文","重新命名",":","launch","使用","加载","namespace","package","#","自动","directory","config","略显","，","ament","turtlesim","进行","建议"],"title":"加载参数文件","title_tokens":["参数","加载","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_2","text":"在复杂的机器人系统中，launch文件也会有很多，此时我们可以使用类似编程中的include机制，让launch文件互相包含。","text_tokens":["让","机器人","有","类似","中","会","编程","include","可以","此时","我们","也","复杂","系统","的","launch","互相","使用","包含","很多","机制","文件","，","机器","。","在"],"title":"Launch文件包含","title_tokens":["launch","包含","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_13","text":"learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch.actions import IncludeLaunchDescription # 节点启动的描述类 from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction # launch文件中的执行动作 from launch_ros.actions import PushRosNamespace # ROS命名空间配置 def generate_launch_description (): # 自动生成launch文件的函数 parameter_yaml = IncludeLaunchDescription ( # 包含指定路径下的另外一个launch文件 PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( # 对指定launch文件中启动的功能加上命名空间 actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ # 返回launch文件的描述信息 parameter_yaml_with_namespace ])","text_tokens":["namespaces","os","index","查询","pythonlaunchdescriptionsource","一个","路径","另外","=","py","(","返回","[","generate","'","动作","文件","python","path","learning","加上","groupaction","函数","节点","join","return","方法","中","get","import","信息","parameter","空间","ros","actions","def",".","pushrosnamespace","with","from","启动","launchdescription","类",")","description","命名","描述","的","]","parameters","生成","包含","对","/","_","share","includelaunchdescription","指定","包",",","turtlesim2","执行","nonamespace","配置","packages","yaml","功能"," ","下",":","launch","sources","namespace","package","#","自动","directory","ament"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_14","text":"... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ...","text_tokens":["os","glob","+","name",",","join","index",")","xml","rviz","packages","resource"," ","=","py","(","launch","[","data","]","*","'","files","package","config","/","_","ament","path",".","share","..."],"title":"功能包编译配置","title_tokens":["编译","包","配置","功能"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docs.ros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["html","large","using","main","en","ros2","https","org"," ","for",":","launch","ros","humble","tutorials","docs","-","projects","/","."],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/","text":"TF：机器人坐标系管理神器 坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器—— TF 。 机器人中的坐标系 机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做 基坐标系 Base Frame，机器人安装位置在外部环境下的参考系叫做 世界坐标系 World Frame，机器人末端夹爪的位置叫做 工具坐标系 ，外部被操作物体的位置叫做 工件坐标系 ，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是 基坐标系 Base Link，雷达所在的位置叫做 雷达坐标系 laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做 里程计坐标系 odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做 地图坐标系 map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为 平移和旋转 两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实就是向量的数学描述。 ROS中TF功能的底层原理，就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。 TF命令行操作 ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。 小海龟跟随例程 这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools $ sudo pip3 install transforms3d 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 当我们控制一只海龟运动时，另外一只海龟也会跟随运动。 查看TF树 在当前运行的两只海龟中，有哪些坐标系呢，我们可以通过这个小工具来做查看。 $ ros2 run tf2_tools view_frames 默认在当前终端路径下生成了一个frames.pdf文件，打开之后，就可以看到系统中各个坐标系的关系了。 查询坐标变换信息 只看到坐标系的结构还不行，如果我们想要知道某两个坐标系之间的具体关系，可以通过tf2_echo这个工具查看： $ ros2 run tf2_ros tf2_echo turtle2 turtle1 运行成功后，终端中就会循环打印坐标系的变换数值了，由平移和旋转两个部分组成，还有旋转矩阵。 坐标系可视化 看数值还不直观？可以试试用可视化软件来做显示： $ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 再让小海龟动起来，Rviz中的坐标轴就会开始运动，这样是不是更加直观了呢！ 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。 静态TF广播 我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为 静态TF变换 ，我们来看看在程序中该如何实现？ 运行效果 启动终端，运行如下命令： $ ros2 run learning_tf static_tf_broadcaster $ ros2 run tf2_tools view_frames 可以看到当前系统中存在两个坐标系，一个是world，一个是house，两者之间的相对位置不会发生改变，通过一个静态的TF对象进行维护。 代码解析 来看下在代码中是如何创建坐标系并且发布静态变换的。 learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？ TF监听 我们再来学习下如何查询两个坐标系之间的位置关系。 运行效果 启动一个终端，运行如下节点，就可以在终端中看到周期显示的坐标关系了。 $ ros2 run learning_tf tf_listener 代码解析 这个节点中是如何查询坐标关系的，我们来看下代码。 learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。 海龟跟随功能解析 还是之前小海龟跟随的示例，我们自己通过代码来实现一下。 运行效果 先看下实现的效果，启动终端后，通过如下命令启动例程： $ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 看到的效果和ROS自带的例程相同。 原理解析 在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心就是通过坐标系实现向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。 Launch文件解析 先来看下刚才运行的launch文件，里边启动了四个节点，分别是： 小海龟仿真器 海龟1的坐标系广播 海龟2的坐标系广播 海龟跟随控制 其中，两个坐标系的广播复用了turtle_tf_broadcaster节点，通过传入的参数名修改维护的坐标系名称。 learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ]) 坐标系动态广播 海龟1和海龟2在world坐标系下的坐标变换，在turtle_tf_broadcaster节点中实现，除了海龟坐标系的名字不同之外，针对两个海龟的功能是一样的。 learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 海龟跟随 坐标系都正常广播了，接下来我们就可以订阅两只海龟的位置关系，并且变换成速度指令进行控制啦。 learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":["服务","激光","不断","终端","重要","全局","姿态","rviz2","绝对","d","内容","机械","段","提示","我们","存在","矩阵","看","s","py","一本","(","statictfbroadcaster","finished","参考系","真器","y","'","spawn","pos","情况","参数值","结构","两者","quat","动机","程序","stamp","value","laser","view","发布","监听器","spawned","string","super","on","if","有","然后","pose","linear","中","解决","显示","get","具体","静态","计算","scripts","not","向量","地图","核心","要","（","时候","角速度","parameter","之前","得到","修改","参考","两个","理论","turtlename","时","link","形态","加","好","出","sendtransform","一下","主要","coding","html","与","5.0","学习","爪","就","器","之间","软件","launchdescription","）","当前","transformexception","完整","yaw","仿真","大家","tools","static","拆","trans","指令","的","buffer","python3","看到","准备就绪","之后","base","_","done","回调","rclpy","库","create","run","在","激光雷达","世界","是不是","transform","怎么样","sim","还有","解析","缓冲区","初始化","两只","想要","再","这种","编译","prefix","geometry","速度","相同","距离","publisher","神器","一只","下","变得","lookup","方向","变换","install","旋转","理论知识","could","q","工件","entry","之外","utf","client","logger","又会有","rel","中心点","info","又","自动","定时器","动","sudo","哪些","turtlesim","显得","打开","self","默认值","开始","发送","设置","z","send","角度","器类","中画","了解","四个","入口","基本","rotation","编写","另外","{","request","依然","做","is","误差","msg","累积","根据","还","复杂","spin","继续","所在","scale","true","w","示例","不变","末端","publish","文件","表示","odom","。","result","需要","包括","加入","让","来看","哪个","跟随","分解","过程","函数","key","概念","name","居","是","两者之间","作用","转换","import","向","bin","范围","先看","管理","apt","坐标","刚才","该","怎样","小","pkg","0","theta","机器","tf",".","名称","pip3","知道","现在","标志","物体","直观","可视","传入","默认","turtletfbroadcaster","会","只","node","就绪","组成","}","某","安装","echo","保持","起来","except","class","目标","usr","及时","基于","了","try","很多","对","www","/","长度","angular","数据","熟悉","消息","仿真器","share","称之为","broadcaster1","env","动态","经过","对象","理解","还会","包","clock","时间",",","每","来","并","代码","math","高中","里边"," ","同理","5","着急","意思","frame",":","详细","launch","$","launchconfiguration","callback","as","臂","transformations","得","使用","com","转变","没有","是否","讲解","srv","准备","平移","将","说明","那","frames","自带","the","名","被","更加","2","简单","不同","变化","提供","夹","transformation","便于","啦","跟随运动","[","这些","数值","实现","atan2","到","generate","有所","4","外部","—","turtle1","time","1.0","async","float","statictransformbroadcaster","进入","demo","节点","三个","想起","rate","欧拉角","运行","方法","不","en","戳","随便","退出","四乘","欧拉","cmd","后","信息","漂移","也","链接","时刻","移动","常见","你家","非常","说","空间","ros","循环","child","周期","挑战","def","now","环境","只要","tf2","保存","1","位置","executable","如何","当","父类","3","--","者","发生变化","失败","+","f","机器人","启动","类","else","ros2","pitch","已经","给","接下","存储","源","中心","知识","移动机器人","broadcaster2","左边","subscription","forward","清楚","坐标轴","]","管理系统","试一试","__","10.0","就是","生成","如下","所以","报告","不是","案例","优先","关系","各个","数学","按照","其中","中是","house","没","内","console","false","比如","底盘","缓冲","转变成","init","应该","xy","都","封装","慢慢","生变","map","declarelaunchargument","等待","turtle2","功能","初始","x","至关重要","客户","算法","msgs","背后","否则","成功","关闭","系统","定时","监听","header","还是","这样","可视化","package","docs","如果","上","话题","机器人学","进行","target","following","运动","分别","transformbroadcaster","位","坐标系","timer","参数","有点","创建","一起","一层","连线","default","rviz","为","相应","查询","定义","一个","setup","控制","路径","至关","这","turtlefollowing","发生","针对","=","最为","service","！","获取","工具","args","tflistener","查看","数","destroy","并且","么","teleop","变成","guyuehome","处理","python","接下来","房子","教材","原理","销毁","twist","learning","call","不行","服务器","客户端","return","呢",">","broadcaster","自己","transformlistener","可以","树","复用","一些","下来","不会","部分","8","中间","不要","一种","抓取","由","actions","良好","vel","看似","管理系","异常","tutorials","小海龟","人学","很","看看","successfully","\"","命令行","请求","点","里程计","from","务器","world","打印","之为","更新","关于","main","里程",")","description","ex","维护","transformstamped","pdf","listener","四元","例程","描述","source","古月","其实","spawning","translation","parameters","小海","正常","points","相对","@","-","和","订阅","产生","操作","名字","中该","这个","变得复杂","固定","海龟","效果","先","四","transforms3d","基","成","一样","线速度","quaternion","用","接口","改变","!","雷达","命令","none","配置","declare","spawner","https","org","：","完成","turtle","id","通过","除了","to","substitutions","ready","sqrt","基础","euler","speed","格外","roll","呗","？","试试","选项","0.0","*","humble","作者","叫做","#","箭头","%","广播","，","怎么","shutdown","底层","外部环境","、",".__"],"title":"TF","title_tokens":["tf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf","text":"坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器—— TF 。","text_tokens":["坐标系","机器人","重要","概念","之间","是","中","会","一个","提供","给","神器"," ","我们","完整","存在","也","基础","系统","非常","的","？","管理","这些","ros","坐标","了","很多","该","关系","人学","，","机器","机器人学","位置","—","tf","熟悉","如何","。","在"],"title":"TF：机器人坐标系管理神器","title_tokens":["：","坐标系","神器","管理","机器人","机器","tf","坐标"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_1","text":"机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做 基坐标系 Base Frame，机器人安装位置在外部环境下的参考系叫做 世界坐标系 World Frame，机器人末端夹爪的位置叫做 工具坐标系 ，外部被操作物体的位置叫做 工件坐标系 ，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是 基坐标系 Base Link，雷达所在的位置叫做 雷达坐标系 laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做 里程计坐标系 odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做 地图坐标系 map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为 平移和旋转 两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实就是向量的数学描述。 ROS中TF功能的底层原理，就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。","text_tokens":["那","坐标系","不断","重要","被","一层","绝对","中画","简单","为","机械","变化","一个","基本","夹","我们","至关","矩阵","误差","累积","复杂","一本","所在","工具","这些","参考系","末端","两者","动机","外部","odom","。","教材","laser","原理","跟随","分解","过程","有","呢","是","方法","中","两者之间","可以","四乘","向量","一些","漂移","也","地图","范围","要","移动","部分","管理","空间","ros","参考","抓取","坐标","两个","理论","良好","看似","管理系","环境","link","形态","人学","出","机器","位置","tf","主要","里程计","world","爪","就","物体","机器人","关于","之间","里程","会","大家","描述","安装","中心","其实","知识","移动机器人","的","管理系统","就是","相对","了","和","对","操作","关系","base","这个","变得复杂","固定","数学","四","基","内","在","一样","世界","比如","都","每","封装","雷达","map","功能"," ","下","变得","至关重要","通过","变换","旋转","frame","理论知识","系统","格外","工件","详细","？","臂","又会有","使用","叫做","中心点","讲解","哪些","，","显得","平移","机器人学","进行","底层","外部环境"],"title":"机器人中的坐标系","title_tokens":["中","坐标系","的","机器人","机器","坐标"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_1","text":"ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。","text_tokens":["坐标系","跟随","机器人","两只","呢","了解","中","下","我们","通过","算法","的","？","ros","一种","小海","坐标","使用","示例","基于","小海龟","该","海龟","，","机器","tf","。","先","如何"],"title":"TF命令行操作","title_tokens":["命令","操作","tf","命令行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_2","text":"这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools $ sudo pip3 install transforms3d 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 当我们控制一只海龟运动时，另外一只海龟也会跟随运动。","text_tokens":["pip3","如何","包","跟随","就","demo","key","然后","启动","来","运行","ros2","会","相应","功能","一个",".","可以","控制","一只","另外"," ","turtle","我们","通过","具体","install","安装","也","tools","py","的","launch","跟随运动","$","？","apt","ros","小海","试一试","transforms3d","humble","示例","-","小海龟","自动","teleop","时","之后","tf2","文件","这个","，","其中","海龟","。","sudo","先","效果","_","运动","turtlesim","当","run","需要"],"title":"小海龟跟随例程","title_tokens":["小海龟","跟随","海龟","例程","小海"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_2","text":"在当前运行的两只海龟中，有哪些坐标系呢，我们可以通过这个小工具来做查看。 $ ros2 run tf2_tools view_frames 默认在当前终端路径下生成了一个frames.pdf文件，打开之后，就可以看到系统中各个坐标系的关系了。","text_tokens":["view","frames","坐标系","就","终端","有","两只","来","默认","呢","运行","ros2","中","当前","pdf","一个","可以","路径"," ","下","我们","通过","做","tools","系统","的","$","工具","坐标","查看","生成","了","看到","关系","tf2","之后","小","文件","哪些","海龟","，","这个","。","_","打开",".","各个","run","在"],"title":"查看TF树","title_tokens":["查看","tf","树"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_3","text":"只看到坐标系的结构还不行，如果我们想要知道某两个坐标系之间的具体关系，可以通过tf2_echo这个工具查看： $ ros2 run tf2_ros tf2_echo turtle2 turtle1 运行成功后，终端中就会循环打印坐标系的变换数值了，由平移和旋转两个部分组成，还有旋转矩阵。","text_tokens":["知道","坐标系","还有","就","终端","打印","不行","之间","想要","运行","ros2","中","会","turtle2","：","只","可以","具体"," ","组成","我们","通过","后","矩阵","某","变换","还","成功","旋转","echo","部分","的","$","工具","循环","ros","数值","两个","由","坐标","查看","看到","了","如果","和","结构","关系","tf2","_","，","这个","平移","。","turtle1","run"],"title":"查询坐标变换信息","title_tokens":["查询","变换","信息","坐标"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_4","text":"看数值还不直观？可以试试用可视化软件来做显示： $ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 再让小海龟动起来，Rviz中的坐标轴就会开始运动，这样是不是更加直观了呢！ 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。","text_tokens":["开始","有点","更加","rviz2","d","rviz","了解","我们","做","这","看","便于","还","py","(","！","数值","。","原理","让","跟随","呢","不","是","方法","中","显示","可以","不要","坐标","小海龟","tf2","怎样","pkg","tf",".","--","就","直观","可视","软件",")","ros2","会","大家","起来","的","坐标轴","小海","-","了","不是","案例","/","_","海龟","先","share","run","是不是","理解","用","来","再","慢慢","prefix","："," ","turtle","下","着急","意思","背后","$","？","试试","使用","这样","可视化","动","，","运动"],"title":"坐标系可视化","title_tokens":["坐标","坐标系","可视化","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_3","text":"我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为 静态TF变换 ，我们来看看在程序中该如何实现？","text_tokens":["激光雷达","那","激光","如何","比如","坐标系","哪个","发生变化","就","底盘","机器人","之为","之间","应该","这种","来","是","不","简单","中","生变","雷达","作用","一个","变化","基本"," ","静态","我们","发生","变换","不会","也","安装","最为","系统","拆","常见","你家","的","呗","？","管理","说","试试","实现","坐标","相对","和","情况","对","只要","关系","很","之后","好","这个","，","中该","机器","tf","位置","进行","主要","房子","。","看看","称之为","程序","在"],"title":"静态TF广播","title_tokens":["静态","tf","广播"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_5","text":"启动终端，运行如下命令： $ ros2 run learning_tf static_tf_broadcaster $ ros2 run tf2_tools view_frames 可以看到当前系统中存在两个坐标系，一个是world，一个是house，两者之间的相对位置不会发生改变，通过一个静态的TF对象进行维护。","text_tokens":["view","frames","对象","learning","坐标系","world","终端","之间","启动","运行","是","改变","ros2","命令","中","维护","broadcaster","当前","：","一个","两者之间","可以"," ","静态","通过","存在","发生","不会","tools","系统","static","$","的","两个","坐标","如下","相对","看到","tf2","两者","_","，","tf","位置","进行","。","house","run"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_6","text":"来看下在代码中是如何创建坐标系并且发布静态变换的。 learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？","text_tokens":["坐标系","设置","创建","z","器类","2","为","查询","变化","一个","入口","rotation","setup","编写","段","{","我们","这","msg","=","py","spin","(","[","statictfbroadcaster","args","w","到","示例","'","y","数","不变","并且","destroy","guyuehome","quat","python","文件","。","stamp","程序","需要","销毁","加入","发布","statictransformbroadcaster","learning","来看","让","super","节点","name","居","欧拉角","呢","是","戳","中","broadcaster","转换","退出","get","静态","欧拉","import","scripts","后","向","bin","时候","（","8","循环","ros","child","两个","坐标","def","now","该","tf2","sendtransform","0","1","tf","位置","\"",".","如何","coding","点","父类","from","3","知道","world","5.0","器","main","类",")","ros2","transformstamped","pitch","）","node","四元","yaw","}","描述","源","古月","static","保持","的","class","清楚","目标","translation","usr","__","]","10.0","如下","points","python3","@","-","了","www","关系","/","_","rclpy","库","中是","消息","house","env","在","console","经过","对象","transform","quaternion","clock","包","时间","接口",",","init","初始化","并","编译","!","none","代码","geometry","配置","等待","初始","x","功能","完成","：","下"," ","id","to","msgs","变换","旋转","frame","系统",":","euler","roll","entry","utf","？","transformations","header","0.0","选项","*","使用","作者","com","又","#","广播","平移","，","self","将","打开","shutdown","进行","说明","、"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_4","text":"我们再来学习下如何查询两个坐标系之间的位置关系。","text_tokens":["查询","坐标系","的","关系","学习","下","再","我们","之间","位置","。","两个","坐标","如何","来"],"title":"TF监听","title_tokens":["监听","tf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_7","text":"启动一个终端，运行如下节点，就可以在终端中看到周期显示的坐标关系了。 $ ros2 run learning_tf tf_listener","text_tokens":["learning","就","终端","节点","启动","运行","ros2","中","一个","显示","可以","listener"," ","的","$","周期","坐标","如下","看到","了","关系","_","，","。","tf","run","在"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_8","text":"这个节点中是如何查询坐标关系的，我们来看下代码。 learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。","text_tokens":["坐标系","名","参数","设置","timer","创建","z","姿态","2","了解","查询","一个","入口","rotation","setup","编写","基本","我们","{","s","=","py","spin","(","继续","获取","啦","[","args","数值","tflistener","到","w","示例","'","数","pos","y","destroy","有所","参数值","guyuehome","处理","quat","python","文件","外部","。","value","程序","需要","time","销毁","1.0","加入","监听器","让","learning","来看","string","进入","super","跟随","节点","name","on","居","return",">","broadcaster","transformlistener","退出","get","import","not","scripts","后","信息","bin","时刻","（","parameter","8","循环","ros","周期","两个","坐标","挑战","def","now","异常","tf2","保存","好","0","1","tf","位置","\"",".","如何","coding","点","父类","from","知道","world","--","现在","失败","f","之间","main","类",")","默认","ex","ros2","）","当前","transformexception","listener","node","四元","大家","存储","}","某","source","源","古月","static","trans","except","的","左边","class","目标","buffer","translation","usr","__","]","如下","points","python3","@","-","try","报告","了","对","www","优先","案例","关系","/","这个","_","固定","rclpy","海龟","库","中是","create","house","env","console","对象","transform","quaternion","包","时间","缓冲区","接口","缓冲",",","init","初始化","用","两只","并","编译","!","none","代码","declare","配置","等待","初始","x","功能","完成","：","下"," ","lookup","to","变换","否则","关闭","frame","系统",":","could","定时","euler","监听","entry","utf","as","logger","transformations","选项","*","使用","作者","com","info","如果","#","定时器","%","，","self","打开","默认值","target","进行","shutdown","说明"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_9","text":"还是之前小海龟跟随的示例，我们自己通过代码来实现一下。","text_tokens":["代码","小海龟","之前","自己","的","跟随","海龟","，","我们","通过","一下","实现","小海","。","来","还是","示例"],"title":"海龟跟随功能解析","title_tokens":["海龟","解析","跟随","功能"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_10","text":"先看下实现的效果，启动终端后，通过如下命令启动例程： $ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 看到的效果和ROS自带的例程相同。","text_tokens":["自带","learning","终端","demo","key","启动","ros2","命令","相同","：","下"," ","turtle","通过","例程","后","py","先看","的","$","launch","ros","实现","如下","看到","和","teleop","_","，","turtlesim","效果","tf","。",".","following","run"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_11","text":"在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心就是通过坐标系实现向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。","text_tokens":["坐标系","设置","不断","一起","连线","全局","角度","2","定义","一个","我们","做","这","看","实现","参考系","真器","么","两者","表示","。","turtle1","发布","跟随","三个","想起","有","然后","方法","不","中","随便","解决","可以","计算","向","向量","也","核心","要","中间","说","得到","周期","参考","坐标","时","该","加","很","好","1","位置","tf","如何","与","world","学习","就","仿真","例程","某","描述","中心","起来","的","所以","就是","相对","了","和","不是","这个","长度","海龟","按照","仿真器","在","动态","是不是","还会","比如","怎么样","时间","用","两只","再","封装","代码","速度","turtle2","高中","距离","同理"," ","下","通过","方向","变换","监听","？","得","这样","叫做","中心点","上","箭头","动","广播","，","话题","怎么","运动"],"title":"原理解析","title_tokens":["解析","原理"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#launch","text":"先来看下刚才运行的launch文件，里边启动了四个节点，分别是： 小海龟仿真器 海龟1的坐标系广播 海龟2的坐标系广播 海龟跟随控制 其中，两个坐标系的广播复用了turtle_tf_broadcaster节点，通过传入的参数名修改维护的坐标系名称。 learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ])","text_tokens":["坐标系","名","参数","2","default","四个","控制","{","=","py","(","[","真器","generate","'","文件","。","value","turtle1","learning","来看","跟随","demo","节点","name","return","运行","是","broadcaster","复用","import","修改","ros","两个","坐标","actions","def","刚才","小海龟","turtlename","1","tf","executable",".","名称","from","启动","launchdescription","传入",")","description","维护","node","listener","仿真","}","的","broadcaster2","]","parameters","小海","了","/","_","海龟","其中","先","broadcaster1","仿真器","sim",",","declarelaunchargument","turtle2","：","里边","下"," ","turtle","通过","substitutions","frame",":","launchconfiguration","launch","package","广播","，","turtlesim","target","following","分别"],"title":"Launch文件解析","title_tokens":["解析","launch","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_12","text":"海龟1和海龟2在world坐标系下的坐标变换，在turtle_tf_broadcaster节点中实现，除了海龟坐标系的名字不同之外，针对两个海龟的功能是一样的。 learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], },","text_tokens":["the","transformbroadcaster","坐标系","参数","设置","创建","z","send","2","不同","为","变化","一个","入口","rotation","setup","编写","{","msg","transformation","针对","=","py","spin","(","获取","[","args","数值","实现","到","w","示例","'","y","数","destroy","参数值","变成","guyuehome","处理","文件","python","外部","。","value","stamp","程序","需要","销毁","加入","让","learning","string","super","函数","节点","name","居","欧拉角","pose","是","中","戳","broadcaster","转换","退出","get","欧拉","import","scripts","后","信息","向","bin","（","parameter","8","循环","ros","child","两个","坐标","def","now","小海龟","turtlename","tf2","sendtransform","0","1","theta","tf","位置","\"",".","名称","coding","点","父类","from","3","知道","world","者","器","f","更新","main","类",")","turtletfbroadcaster","默认","ros2","transformstamped","pitch","）","node","listener","四元","yaw","}","源","古月","static","的","class","subscription","目标","translation","usr","小海","__","]","及时","如下","points","python3","@","-","和","订阅","www","优先","名字","/","_","海龟","回调","rclpy","库","create","消息","env","在","一样","动态","console","对象","transform","quaternion","clock","包","时间","接口",",","用","init","初始化","转变成","并","编译","!","none","代码","declare","geometry","配置","等待","初始","功能","x","完成","：","下","turtle"," ","id","除了","to","msgs","变换","否则","旋转","关闭","frame","系统",":","euler","q","roll","之外","entry","utf","callback","transformations","header","0.0","选项","*","使用","作者","com","转变","#","广播","平移","，","turtlesim","self","将","默认值","进行","shutdown","打开","说明","、"],"title":"坐标系动态广播","title_tokens":["坐标","坐标系","动态","广播"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_13","text":"坐标系都正常广播了，接下来我们就可以订阅两只海龟的位置关系，并且变换成速度指令进行控制啦。 learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], },","text_tokens":["服务","位","坐标系","名","参数","设置","timer","发送","创建","z","角度","2","姿态","内容","加入","变化","一个","入口","rotation","setup","控制","编写","配置","提示","我们","{","request","依然","、","is","msg","turtlefollowing","根据","还","=","py","spin","(","service","获取","啦","跟随运动","[","args","scale","数值","finished","实现","true","atan2","查看","到","示例","'","spawn","y","destroy","并且","4","publish","参数值","guyuehome","文件","python","接下来","外部","表示","。","value","result","程序","turtle1","需要","time","包括","async","销毁","twist","监听器","spawned","发布","learning","float","call","让","跟随","string","super","进入","节点","name","on","居","客户端","if","rate","服务器","linear","return","broadcaster","transformlistener","可以","get","退出","计算","cmd","import","not","scripts","后","信息","下来","bin","时刻","角速度","parameter","8","循环","ros","周期","坐标","def","vel","now","异常","tf2","保存","0","1","theta","位置","tf","successfully",".","\"","请求","coding","点","父类","from","务器","知道","标志","失败","就","f","+","main","类",")","默认","ex","else","ros2","已经","当前","transformexception","node","listener","接下","就绪","存储","}","source","源","古月","static","指令","spawning","的","左边","class","trans","except","forward","目标","buffer","translation","正常","usr","__","]","生成","如下","points","python3","@","-","了","try","报告","订阅","www","优先","产生","关系","准备就绪","/","_","海龟","固定","rclpy","done","库","angular","create","消息","没","env","成","console","对象","transform","false","线速度","包","时间","缓冲区","接口","缓冲",",","init","初始化","用","xy","两只","都","并","编译","!","none","代码","math","geometry","速度","declare","初始","功能","spawner","publisher","turtle2","x","距离","等待"," ","turtle","完成","：","通过","lookup","客户","5","to","msgs","变换","否则","ready","成功","frame","sqrt","系统",":","could","定时","speed","关闭","监听","entry","utf","client","as","logger","transformations","选项","*","使用","作者","com","rel","info","如果","#","没有","是否","定时器","广播","srv","准备","，","turtlesim","self","话题","默认值","进行","shutdown","following","运动","打开","说明","数据",".__"],"title":"海龟跟随","title_tokens":["海龟","跟随"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_14","text":"https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":["tutorials","docs",":","https","-","org","html","tf2","main","/","ros",".","humble","en"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/","text":"URDF：机器人建模方法 ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法—— URDF ，用来描述机器人外观、性能等各方面属性。 机器人的组成 建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由 硬件结构、驱动系统、传感器系统、控制系统 四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备； 驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等； 传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境； 控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。 URDF ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是 XML格式 ，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为 连杆Link ，手肘就类似于机器人电机驱动部分，称为 关节joint 。 所以在URDF建模过程中，关键任务就是通过这里的<link>和<joint>，理清楚每一个连杆和关节的描述信息。 连杆Link的描述 <link>标签用来描述机器人某个刚体部分的 外观和物理属性 ，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。 link里边的<visual>部分用来描述机器人的外观，比如： <geometry>表示 几何形状 ，里边使用<mesh>调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的 <origin>表示 坐标系相对初始位置的偏移 ，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分<collision>，描述 碰撞参数 ，里边的内容似乎和<visual>一样，也有<geometry>和<origin>，看似相同，其实区别还是比较大的。 <visual>部分重在描述机器人看上去的状态，也就是视觉效果； <collision>部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过<visual>来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是<collision>里边<geometry>描述的形状。<origin>坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。 关节Joint描述 机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 parent标签：描述父连杆； child标签：描述子连杆，子连杆会相对父连杆发生运动； origin：表示两个连杆坐标系之间的关系，也就是图中红色的向量，可以理解为这两个连杆该如何安装到一起； axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的； limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等。 Info ROS中关于平移的默认单位是m，旋转是弧度（不是度），所以这里的3.14就表示可以在-180度到180度之间运动，线速度是m/s，角速度是rad/s。 完整机器人模型 最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。 创建机器人模型 好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。 功能包结构 机器人的模型放置在learning_urdf功能包中，功能包中包含的文件夹如下： urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件 模型可视化效果 我们先来看下这个模型的效果，尝试逆向分下一下机器人的结构。 $ ros2 launch learning_urdf display.launch.py 很快就可以看到Rviz中显示的机器人模型啦，大家可以使用鼠标拖拽观察。 从可视化的效果来看，这个机器人由五个link和4个joint组成。 查看URDF模型结构 我们分析的对不对呢，可以在模型文件的路径下，使用urdf_to_graphviz这个小工具来分析下。 $ urdf_to_graphviz mbot_base.urdf # 在模型文件夹下运行 运行成功后会产生一个pdf文件，打开之后就可以看到URDF模型分析的结果啦，是不是和我们的猜测完全相同呢！ 模型文件解析 具体URDF模型什么样的，还是要打开模型来研究。 learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot> 参考链接 https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":["转关","尝试","猜测","偏移","0.025","内容","组合","某个","；","机械","所有","平面","cylinder","stl","我们","矩阵","看","s","控制系统","py","驱动","包中","xyz","任务","的话","一系","上去","比较","y","鼠标","结构","拖拽","动机","这里","1.5707","平台","红色","设备","车体","很快","有","中","显示","小臂","细节","具体","看上去","计算","存放","向量","0.19","要","时候","（","角速度","之前","建模","meshes","调用","两个","观察","参考","<","时","link","手臂","好","一下","或","主要","方面","真实","html","肘关节","与","就","之间","简化","软件","源代码","white","）","语言","形成","它","第六种","完整","全为","大家","极限","的","性能","为了","imu","看到","第二个","轮子","之后","base","_","大","应用","rpy","在","碰撞","是不是","设计","先来","重在","形状","方式","解析","raw","continuous","再","这种","caster","geometry","速度","相同","提前","模型","下","颜色","模型简化","方向","个","研究","旋转","0.4","状态","传感","不能","有点像","实打实","在于","物理","四大","info","哪些","打开","必须","几何","0.16","关键","三维","z","当然","角度","电脑","0.20","了解","像头","摄像","于","为例","还","圆柱体","不仅","复杂","惯性","示例","visual","parent","什么","right","操作系统","文件","视觉","表示","。","需要","包括","派","让","来看","分解","过程","乍","name","是","叫","圆柱","把","管理","文件夹","rgba","坐标","旋转关节","允许","码器","实际","似乎","该","小","关节","0","机器","相机",".","limit","限制","名称","类型","自定义","可视","默认","xml","会","组成","m","载体","树莓","某","安装","type","collision","color","介绍","网页","起来","板载","轴","浮动","相关","了","组成部分","对","这款","left","统一","/","熟悉","rad","理解","包","分析","material","每","来","类似","检测","代码","理","里边","传感器"," ","包围","display","着急","滑动","?",":","urdf","launch","$","臂","得","使用","以","yellow","wheel","平移","将","度到","建模语言","连杆","开发","fixed","等于","从","0.095","自定","一致","正","连接","变化","思路","提供","摄像头","两种","自身","等","便于","应用软件","啦","格式","radius","front","这些","第二","较","以及","到","系列","4","围绕","sphere","外部","—","无限","0.18","1.0","全称","属性","蓝色","运行","方法","不","robot","en","括号","少","装置","渲染","哪","后","信息","沿某","0.05","驱使","也","带有","链接","用来","移动","xacro","常见","手肘","未来","ros","child","0.9","编码","环境","配置文件","保存","独自","1","外壳","位置","讲","如何","弧度","电源","全都","电机","机器人","看上","局","启动","组合而成","ros2","刚体","pitch","结果","给","单位","完全","尺寸","无论","相对运动","移动机器人","一系列","清楚","二个","管理系统","所以","就是","如下","包含","不是","区别","关系","按照","其中","引用","桌子","比如","底盘","都","x","初始","功能","此时","3.14","感知","mesh","成功","系统","放在","back","市面上","柱体","floating","高","频繁","还是","质量","直线","这样","可视化","docs","如果","上","肌肉","件夹","进行","最小","运动","分别","0.06","感器","算力","坐标系","参数","有点","一起","度","创建","逆向","外界","rviz","面上","定义","为","多","一个","控制","唯一","路径","这","大臂","无论是","发生","length","每个","=","prismatic","！","专门","框","工具","查看","认识","父","180","learning","revolute","不过","version","mbot","称为","呢",">","为此","自己","可以","axis","右侧","他们","一些","才能","不会","部分","一种","由","小车","放置","尖括号","0.015","市面","看似","管理系","质心","分下","tutorials","五个","算作","第六","\"","硬件","驱动器","图中","关于","main","外观","一般","pdf","最终","描述","其实","最大","手","则","正常","各","找","要求","相对","完全相同","black","标签","-","和","产生","操作","名字","这个","固定","而是","效果","先","一样","这么","线速度","无法","0.95","看下","用","碰撞检测","视觉效果","graphviz","雷达","六种","配置","https","org","：","子","origin","属于","planar","完成","通过","什么样","清晰","to","等等","接触","独立","一段","roll","？","humble","绿色","叫做","一块","单位向量","#","，","joint","外部环境","、","编码器"],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf","text":"ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法—— URDF ，用来描述机器人外观、性能等各方面属性。","text_tokens":["属性","让","不过","机器人","当然","外观","呢","是","方法","为此","一个","提供","给","下"," ","我们","等","描述","还","要","系统","用来","介绍","之前","把","专门","啦","的","建模","？","urdf","性能","ros","一种","各","得","使用","认识","了","操作","操作系统","，","机器","—","。","如何","方面","、","在"],"title":"URDF：机器人建模方法","title_tokens":["urdf","：","建模","机器人","机器","方法"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_1","text":"建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由 硬件结构、驱动系统、传感器系统、控制系统 四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备； 驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等； 传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境； 控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。","text_tokens":["开发","感器","参数","电脑","面上","像头","组合","摄像","；","机械","一个","思路","控制","摄像头","我们","这","等","无论是","便于","控制系统","驱动","应用软件","这些","以及","结构","操作系统","动机","外部","平台","。","需要","包括","派","设备","分解","过程","是","中","自己","装置","可以","计算","一些","驱使","部分","移动","常见","把","建模","管理","由","编码","市面","码器","管理系","环境","机器","外壳","主要","硬件","电源","电机","驱动器","机器人","软件","一般","语言","组成","无论","载体","树莓","描述","安装","其实","移动机器人","的","起来","清楚","板载","正常","管理系统","就是","imu","看到","和","组成部分","了","操作","按照","先","应用","熟悉","比如","底盘","都","每","再","类似","雷达","里边","传感器"," ","通过","感知","等等","系统","传感","状态","市面上","实打实","臂","使用","还是","四大","上","，","进行","建模语言","、","编码器"],"title":"机器人的组成","title_tokens":["机器人","的","机器","组成"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_1","text":"ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是 XML格式 ，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为 连杆Link ，手肘就类似于机器人电机驱动部分，称为 关节joint 。 所以在URDF建模过程中，关键任务就是通过这里的<link>和<joint>，理清楚每一个连杆和关节的描述信息。","text_tokens":["关键","开发","有点","组合","机械","一个","连接","于","我们","自身","看","大臂","还","不仅","驱动","格式","任务","一系","这些","上去","系列","文件","这里","外部","。","全称","属性","过程","乍","称为","呢","是","方法",">","中","括号","自己","小臂","可以","看上去","右侧","他们","信息","才能","也","部分","手肘","建模","ros","由","尖括号","<","环境","link","算作","手臂","独自","关节","机器","如何","肘关节","电机","就","机器人","看上","源代码","组合而成","xml","刚体","组成","大家","相对运动","描述","网页","一系列","的","手","清楚","所以","就是","相对","标签","和","产生","之后","统一","这个","其中","在","桌子","比如","无法","都","每","类似","代码","理","模型"," ","下","包围","通过","清晰","独立","urdf","有点像","？","臂","使用","这样","叫做","肌肉","，","joint","必须","运动","外部环境","连杆"],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#link","text":"<link>标签用来描述机器人某个刚体部分的 外观和物理属性 ，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。 link里边的<visual>部分用来描述机器人的外观，比如： <geometry>表示 几何形状 ，里边使用<mesh>调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的 <origin>表示 坐标系相对初始位置的偏移 ，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分<collision>，描述 碰撞参数 ，里边的内容似乎和<visual>一样，也有<geometry>和<origin>，看似相同，其实区别还是比较大的。 <visual>部分重在描述机器人看上去的状态，也就是视觉效果； <collision>部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过<visual>来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是<collision>里边<geometry>描述的形状。<origin>坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。","text_tokens":["算力","坐标系","参数","三维","z","偏移","外界","自定","一致","内容","定义","某个","；","机械","连接","一个","控制","stl","我们","矩阵","等","为例","圆柱体","复杂","惯性","框","的话","上去","第二","较","到","比较","y","visual","文件","视觉","动机","表示","。","需要","包括","属性","车体","过程","name","有","蓝色",">","是","不","中","圆柱","可以","看上去","计算","也","部分","用来","时候","移动","未来","调用","坐标","小车","<","看似","似乎","实际","质心","该","link","时","算作","好","0","机器","位置","如何","名称","真实","自定义","与","就","机器人","看上","简化","软件","外观","会","刚体","pitch","它","全为","尺寸","描述","collision","其实","移动机器人","的","二个","为了","则","就是","如下","要求","相对","标签","了","和","区别","第二个","轮子","这个","大","效果","在","一样","碰撞","设计","比如","重在","形状","用","raw","碰撞检测","来","类似","视觉效果","检测","geometry","初始","x","：","提前","origin","里边","相同","模型"," ","颜色","通过","模型简化","方向","mesh","旋转","接触","状态","roll","柱体","臂","高","物理","使用","还是","质量","这样","绿色","以","如果","上","平移","，","joint","将","几何","运动","分别","连杆","、"],"title":"连杆Link的描述","title_tokens":["link","的","连杆","描述"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#joint","text":"机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 parent标签：描述父连杆； child标签：描述子连杆，子连杆会相对父连杆发生运动； origin：表示两个连杆坐标系之间的关系，也就是图中红色的向量，可以理解为这两个连杆该如何安装到一起； axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的； limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等。 Info ROS中关于平移的默认单位是m，旋转是弧度（不是度），所以这里的3.14就表示可以在-180度到180度之间运动，线速度是m/s，角速度是rad/s。","text_tokens":["转关","坐标系","fixed","等于","一起","z","度","角度","内容","为","正","；","连接","一个","机械","变化","平面","唯一","两种","这","等","发生","s","prismatic","较","到","比较","parent","什么","围绕","父","这里","表示","180","。","无限","红色","revolute","不过","有","是","不","中","叫","少","可以","axis","哪","沿某","向量","一些","才能","带有","也","不会","要","（","角速度","ros","child","一种","两个","小车","坐标","旋转关节","允许","该","link","关节","第六","1","机器","位置","相机","如何","弧度","limit","限制","类型","电机","就","图中","机器人","关于","之间","默认","xml","）","一般","刚体","会","第六种","单位","最终","m","度到","极限","相对运动","某","描述","安装","最大","的","轴","浮动","所以","就是","相对","标签","了","和","-","产生","不是","区别","轮子","之后","名字","关系","/","这个","固定","而是","在","rad","理解","比如","线速度","方式","continuous","这种","每","都","六种","速度","：","模型","属于","planar","子","origin"," ","此时","3.14","通过","方向","旋转","滑动","不能","urdf","一段","臂","floating","在于","频繁","使用","还是","直线","这样","info","上","单位向量","平移","，","joint","进行","最小","运动","连杆"],"title":"关节Joint描述","title_tokens":["joint","描述","关节"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_2","text":"最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。","text_tokens":["先来","就","机器人","局","每","再","robot","不","组合","中","代码","是","了解","形成","所有","完成","一个","模型","细节"," ","下","最终","组成","完整","完全","大家","看","着急","某","描述","部分","每个","放在","urdf","的","由","找","所以","标签","了","和","一块","对","时","link","之后","这个","，","哪些","joint","机器","。","先","全都","在"],"title":"完整机器人模型","title_tokens":["机器人","模型","完整","机器"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_3","text":"好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。","text_tokens":["这么","一起","机器人","看下","过程","多","一个","模型","它"," ","完整","我们","看","为例","要","移动","urdf","移动机器人","啦","的","建模","还是","示例","以","了","这款","好","动机","，","机器","。","讲"],"title":"创建机器人模型","title_tokens":["机器人","模型","机器","创建"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_4","text":"机器人的模型放置在learning_urdf功能包中，功能包中包含的文件夹如下： urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件","text_tokens":["learning","机器人","启动","rviz","中","配置","功能","：","模型"," ","渲染","存放","xacro","包中","urdf","的","launch","meshes","文件夹","放置","相关","如下","包含","配置文件","件夹","保存","文件","_","，","机器","引用","或","在"],"title":"功能包结构","title_tokens":["结构","包","功能"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_5","text":"我们先来看下这个模型的效果，尝试逆向分下一下机器人的结构。 $ ros2 launch learning_urdf display.launch.py 很快就可以看到Rviz中显示的机器人模型啦，大家可以使用鼠标拖拽观察。 从可视化的效果来看，这个机器人由五个link和4个joint组成。","text_tokens":["learning","来看","尝试","就","很快","机器人","逆向","从","可视","rviz","ros2","中","显示","模型",".","可以","下"," ","组成","我们","大家","个","display","py","urdf","的","$","launch","啦","观察","由","使用","分下","可视化","看到","和","鼠标","4","五个","结构","link","拖拽","这个","，","一下","机器","效果","。","先","_","joint"],"title":"模型可视化效果","title_tokens":["模型","可视化","效果","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_2","text":"我们分析的对不对呢，可以在模型文件的路径下，使用urdf_to_graphviz这个小工具来分析下。 $ urdf_to_graphviz mbot_base.urdf # 在模型文件夹下运行 运行成功后会产生一个pdf文件，打开之后就可以看到URDF模型分析的结果啦，是不是和我们的猜测完全相同呢！","text_tokens":["是不是","就","分析","猜测","mbot","来","呢","不","运行","graphviz","会","pdf","相同","一个","模型","结果","可以","路径","下"," ","我们","完全","to","后","成功","！","urdf","的","$","工具","啦","文件夹","使用","完全相同","看到","和","对","#","产生","不是","之后","件夹","小","文件","_","，","这个","base","。","打开",".","在"],"title":"查看URDF模型结构","title_tokens":["查看","模型","结构","urdf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_6","text":"具体URDF模型什么样的，还是要打开模型来研究。 learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot>","text_tokens":["1.0","learning","version","0.95","0.18","name","0.095","mbot","0.025","material","continuous","来","caster","xml",">","robot","0.20","white","geometry","模型","origin","具体"," ","cylinder","axis","什么样","0.19","研究","0.05","length","?","0.4","=","要","color","type","xyz","urdf","back","的","\"","radius","front","rgba","child","0.9","0.015","还是","<","visual","parent","什么","-","black","sphere","yellow","left","link","right","wheel","/","_","，","打开","base","。","0","1",".","joint","1.5707","rpy","0.06","0.16"],"title":"模型文件解析","title_tokens":["模型","解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_7","text":"https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":["tutorials","docs",":","https","-","org","urdf","html","main","/","ros",".","humble","en"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/","text":"Gazebo：三维物理仿真平台 ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台 Gazebo ，了解一下。 Gazebo仿真平台 介绍 Gazebo是ROS系统中最为常用的 三维物理仿真平台 ，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。 安装 Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-* 运行 通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py Attention 为保证模型顺利加载，请将离线模型下载并放置到~/.gazebo/models路径下 ，下载链接如下： https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。 XACRO机器人模型优化 我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本—— XACRO文件 。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义 ，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含 ，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口 ，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro 以下是一些常用的XACRO文件语法，大家了解下。 常量定义 <xacro:property>标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。 数学计算 如果需要做数学计算，同样是在“${}”中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 Info 所有数学运算都会转换成浮点数进行，以保证运算精度 宏定义 机器人的轮子我们也做成宏定义，定义方式是通过这个<xacro:macro>标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。 文件包含 宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。 机器人仿真模型配置 完善物理参数 第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。 添加Gazebo标签 第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。 配置传动装置 第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。 添加控制器插件 第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。 构建仿真环境 接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ]) 机器人运动仿真 万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard Attention 虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 通过键盘上的“i、j、，、l”几个按键，就可以控制机器人前后左右运动啦。 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。 Ignition：下一代Gazebo 随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为 Ignition ，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 运行成功后，会打开Ignition的仿真界面和Rviz上位机，我们可以看到RGBD相机仿真后发布的图像数据。 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/ 附录：机器人完整模型 learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["尝试","不断","迭代","0.025","colors","必要","所有","表面","cylinder","我们","考虑","command","py","(","xyz","课程","force","写","0.2","真器","y","'","spawn","make","use","同时","跑","弹性","r","动机","这里","平台","value","me","下一代","drive","h","发布","so","键盘","j","if","really","gazebo","有","然后","pose","周边","hardware","中","刚好","技术","gray","一句","get","计算","xmlns","0.19","要","时候","之前","公式","第四步","mechanicalreduction","建模","“","修改","得到","第四","by","3.1415926","调用","及","两个","参考","<","这句","点数","时","link","svga","好","neighborhood","一下","高质量","matrix","plugin","主要","ign","硬件加速","就","机","launchdescription","出现","语言","它","相识","differential","问题","完整","yaw","仿真","大家","于是","一代","output","trans","的","为了","val","可编","看到","验证","轮子","去","交给","base","_","第三","应用","rpy","run","弹性系数","在","碰撞","是不是","设计","sim","方式","caster","continuous","再","这种","diff","传递","prefix","geometry","速度","publisher","模型","spwan","下","颜色","重复","个","install","换成","0.4","separation","不能","传感","有点像","请","we","物理","加载","版本","info","directory","sudo","ament","打开","你","传递数据","三维","设置","where","认识一下","高质","某些","z","当然","box","角度","index","0.20","了解","像头","pythonlaunchdescriptionsource","change","摄像","基本","可能","load","want","另外","20","{","第一句","”","做","is","可","二句","还","不仅","复杂","惯性","友好","更","语法","动力学","true","blue","parent","比","visual","publish","转换成","right","ixz","文件","似曾","。","odom","需要","无人机","部署","simpletransmission","加入","让","函数","过程","vgpu10","name","join","流畅","是","甚至","叫","一步","转换","浮点","http","attention","import","matter","hardwareinterface","把","them","左右","apt","izz","rgba","osrf","像","完善","进步","该","pkg","关节","新一代","主角","0","机器","相机","tf",".","更为","第三步","名称","correctly","used","可编程","l","俱备","xml","会","变量","be","精度","丰富","include","node","无人","~","m","c","第一步","}","某","安装","type","echo","数学计算","color","collision","介绍","起来","优化","第二步","试一下","奇迹","装上","property","相关","sure","火星","了","a","对","方便","很多","www","left","/","常量","根本","inertial","仿真器","share","理解","topic","包","传动","footprint",",","material","每","并","来","类似","t","代码","为止","rgbd","不多","两句","里边","传感器"," ","5","for","?","frame","做成",":","控制器","urdf","$","launch","items","得","使用","com","important","以","没有","yellow","wheel","人机","将","新","interface","开发","那","the","加大","fixed","从","按键","限飞","输入","2","update","简单","不同","以上","变化","提供","摄像头","inertia","、","等","max","only","测试","见证","啦","格式","传动装置","[","radius","demos","很长","这些","数值","front","第二","实现","官方网站","到","generate","摩擦力","尽量","4","arguments","sphere","path","—","虚拟","直接","---","0.18","30","似曾相识","time","turngravityoff","1.0","属性","节点","rate","iyy","差速","运行","方法","不","robot","括号","装置","保证","cmd","渲染","原本","后","信息","0.05","差不多","也","链接","时刻","用来","移动","xacro","i","未来","构建","mass","ros","三步","child","set","into","def","环境","改成","万事俱备","1","以下","位置","executable","如何","模块","当","3","电机","--","用到","+","同样","机器人","结束","启动","随着","reflect","第一","ros2","已经","场景","结果","给","接下","entity","尺寸","上位","state","libgazebo","you","移动机器人","万事","办法","运算","图形","流程","]","虚拟机","摩擦","所以","就是","官方","如下","包含","own","不是","关系","数学","3.14159","几个","没","includelaunchdescription","添加","总体","false","比如","torque","下载","底盘","升级","defining","都","github","放到","x","功能","velocityjointinterface","冗余","加速","名为","此时","四步","算法","file","插件","关闭","第二句","成功","官方网","系统","back","single","acceleration","0.75","频繁","前后左右","质量","确保","这样","joints","package","如果","因为","our","have","上","0.001","进行","加法","运动","0.06","motor","os","感器","参数","必备","有点","一起","创建","度","ignition","rviz","and","wiki","为","定义","编程","export","力学","多","一个","list","路径","控制","参数设置","这","区分","length","针对","附录","每个","=","最为","screen","odometry","再用","认识","么","动力","teleop","想不起来","重复使用","嵌套","除法","接下来","python","twist","learning","不过","version","一行","pi","mbot","return","呢",">","this","切分","keyboard","条件","可以","provided","axis","actuator","enabled","controller","一些","下来","不会","记得","实验","macro","界面","reference","models","手边","周边环境","小车","放置","0.015","actions","系数","vel","一定","小海龟","ixy","很","宏","\"","支持","硬件","常用","化","怎么办","from","图像","world","整个","12","离线","不妨","description",")","还要","b","命名","bridge","find","帮助","较大","描述","source","镜像","diameter","分配","ignitionrobotics","语句","params","模拟","文件格式","找","小海","transmission","相对","black","-","标签","和","all","camera","名字","这个","海龟","iyz","效果","先","实物","一样","0.95","上来","用","接口","worlds","!","导致","命令","doesn","配置","packages","https","spawner","org","：","完成","origin","通过","to","浮点数","bashrc","火星车","想不起","？","sources","顺利","试试","互相","值为","0.0","filename","二步","*","humble","size","#","续航","c语言","引擎","，","怎么","joint","in","网站","ixx","前后","数据","0.16"],"title":"Gazebo","title_tokens":["gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo","text":"ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台 Gazebo ，了解一下。","text_tokens":["开发","怎么办","三维","机器人","当然","gazebo","呢","是","了解","问题"," ","我们","仿真","手边","？","ros","物理","如果","没有","，","主角","机器","怎么","平台","一下","。","没","实物"],"title":"Gazebo：三维物理仿真平台","title_tokens":["：","三维","平台","gazebo","仿真","物理"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_1","text":"","text_tokens":[],"title":"Gazebo仿真平台","title_tokens":["平台","gazebo","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_1","text":"Gazebo是ROS系统中最为常用的 三维物理仿真平台 ，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。","text_tokens":["开发","那","三维","高质","限飞","为","力学","多","一个","表面","提供","可能","我们","做","等","还","不仅","最为","测试","更","动力学","实现","到","摩擦力","动力","弹性","平台","。","无人机","部署","加入","属性","gazebo","周边","运行","是","中","可以","渲染","差不多","要","实验","周边环境","ros","及","系数","环境","高质量","机器","支持","常用","就","机器人","不妨","场景","无人","仿真","帮助","的","办法","优化","图形","模拟","摩擦","所以","火星","了","和","验证","先","应用","在","实物","弹性系数","设计","比如","上来","用","都","再","类似","导致","不多"," ","此时","算法","系统","火星车","频繁","物理","使用","质量","这样","没有","续航","引擎","，","人机","、"],"title":"介绍","title_tokens":["介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_2","text":"Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-*","text_tokens":["包","认识一下","gazebo","都","不妨","呢","简单","中","命令","已经","功能","它","一个","：","给","可以"," ","我们","完整","通过","大家","install","安装","系统","把","起来","的","$","？","apt","为了","ros","互相","装上","*","使用","相关","确保","humble","这样","认识","-","了","和","跑","sudo","，","一下","。","先","直接","如何"],"title":"安装","title_tokens":["安装"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_3","text":"通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py Attention 为保证模型顺利加载，请将离线模型下载并放置到~/.gazebo/models路径下 ，下载链接如下： https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。","text_tokens":["尝试","一起","为","路径","控制","我们","还","py","课程","啦","到","认识","么","接下来","动机","。","gazebo","中","可以","保证","attention","下来","链接","记得","移动","之前","models","把","ros","osrf","放置","这句","环境","该","机器",".","就","机器人","启动","离线","ros2","还要","它","接下","~","仿真","大家","移动机器人","的","如下","了","不是","/","_","在","是不是","设计","下载","并","github","放到","命令","https","：","模型"," ","下","通过",":","$","launch","？","顺利","请","试试","加载","com","，","将","运动"],"title":"运行","title_tokens":["运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#xacro","text":"我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本—— XACRO文件 。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义 ，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含 ，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口 ，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro 以下是一些常用的XACRO文件语法，大家了解下。","text_tokens":["感器","你","传递数据","创建","必要","了解","像头","不同","定义","摄像","编程","多","一个","可能","摄像头","我们","做","可","还","每个","复杂","格式","写","友好","很长","更","语法","实现","再用","4","重复使用","文件","接下来","这里","动机","—","。","直接","需要","加入","让","函数","过程","gazebo","有","然后","是","方法","甚至","中","叫","切分","条件","可以","计算","一些","下来","也","时候","xacro","移动","要","之前","把","建模","apt","ros","调用","小车","放置","像","这句","link","好","一下","机器","以下","宏","更为","模块","化","常用","可编程","就","同样","机器人","会","变量","丰富","给","b","接下","大家","尺寸","描述","安装","介绍","移动机器人","的","优化","为了","语句","文件格式","包含","可编","-","了","a","对","轮子","常量","数据","先","没","在","一样","总体","设计","比如","包","底盘","升级","接口","都","放到","命令","传递","代码","功能","：","模型","传感器"," ","下","此时","通过","重复","个","install","不能","传感","urdf","$","使用","humble","版本","如果","没有","sudo","，","、"],"title":"XACRO机器人模型优化","title_tokens":["xacro","模型","优化","机器人","机器"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_4","text":"<xacro:property>标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。","text_tokens":["加大","比如","需要","就","底盘","机器人","一行","pi","都",">","不","定义","中","括号","变化","一个","模型","里边","可以"," ","名为","m","我们","通过","原本","”","尺寸","一些","不会","针对","安装","也","用来","xacro",":","时候","移动","urdf","把","移动机器人","的","$","未来","“","修改","这些","值为","调用","找","property","使用","<","质量","这样","标签","了","方便","轮子","很","好","_","，","常量","3.14159","。","动机","机器","文件","位置","数据","、","在"],"title":"常量定义","title_tokens":["定义","常量"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_5","text":"如果需要做数学计算，同样是在“${}”中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 Info 所有数学运算都会转换成浮点数进行，以保证运算精度","text_tokens":["一个","所有","可能","{","我们","”","做","这","写","数值","尽量","想不起来","转换成","除法","动机","。","直接","需要","加入","有","是","中","转换","可以","浮点","保证","计算","时候","移动","公式","未来","“","得到","修改","两个","改成","点数","机器","位置","就","同样","机器人","会","精度","结果","}","某","数学计算","起来","移动机器人","的","运算","相对","了","和","很多","关系","数学","这个","常量","根本","在","比如","都","来","模型"," ","通过","浮点数","换成","$","想不起","以","info","如果","，","怎么","进行","加法","数据"],"title":"数学计算","title_tokens":["计算","数学计算","数学"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_6","text":"机器人的轮子我们也做成宏定义，定义方式是通过这个<xacro:macro>标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。","text_tokens":["设置","参数","输入","定义","一个","参数设置","我们","这","区分","还","同时","这里","。","需要","函数",">","是","中","刚好","可以","一些","也","记得","macro","xacro","时候","要","把","调用","两个","像","<","link","好","关节","1","机器","位置","宏","当","名称","用到","就","机器人","出现","会","b","c","描述","镜像","的","包含","标签","了","和","a","-","轮子","名字","关系","这个","几个","在","一样","比如","方式","来","模型","两句","里边"," ","通过","做成",":","使用","这样","，","joint","、"],"title":"宏定义","title_tokens":["定义","宏"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_7","text":"宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。","text_tokens":["是不是","加入","参数","必备","底盘","某些","机器人","函数","结束","然后","再","这种","是","定义","中","语言","为止","一个","模型","相识","include","可以","里边"," ","另外","接下","我们","仿真","做","于是","一些","下来","也","还","做成","把","的","优化","流程","调用","到","使用","包含","像","得","了","和","没有","对","不是","c语言","嵌套","很","去","文件","接下来","，","这里","机器","。","宏","似曾","模块","似曾相识"],"title":"文件包含","title_tokens":["包含","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_8","text":"","text_tokens":[],"title":"机器人仿真模型配置","title_tokens":["配置","模型","机器人","机器","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_9","text":"第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。","text_tokens":["碰撞","属性","参数","有","gazebo","都","每","必要","是","第一","一步","一个","仿真","第一步","惯性","的","物理","确保","一定","和","因为","link","，","平台","。","需要"],"title":"完善物理参数","title_tokens":["完善","物理","参数"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_2","text":"第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。","text_tokens":["gazebo","每","是","不同","为","中","配置","一步","添加","一个","冗余","可以","颜色","渲染","做","系统","urdf","的","为了","第二","第二步","二步","所以","得","这样","标签","和","因为","link","，","。","主要","在"],"title":"添加Gazebo标签","title_tokens":["标签","gazebo","添加"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_10","text":"第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。","text_tokens":["理解","电机","传动","是","为","配置","一个","装置","给","可以","仿真","要","的","传动装置","三步","了","，","joint","。","第三","运动","第三步"],"title":"配置传动装置","title_tokens":["装置","配置","传动装置","传动"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_11","text":"第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。","text_tokens":["那","电机","就","gazebo","角度","差速","来","是","不同","速度","添加","一个","完成","控制","可以","下","四步","插件","要","控制器","第四步","的","分配","第四","两个","小车","这样","了","交给","，","。","在"],"title":"添加控制器插件","title_tokens":["插件","控制","控制器","添加"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_12","text":"接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ])","text_tokens":["os","the","where","z","index","pythonlaunchdescriptionsource","change","一个","提供","load","want","{","考虑","only","=","py","(","force","[","screen","true","到","generate","y","'","spawn","make","use","arguments","接下来","python","path","。","me","---","需要","time","learning","节点","name","join","gazebo","mbot","really","if","pose","return","robot","中","get","provided","import","matter","enabled","下来","把","them","by","ros","actions","into","def","set","<","pkg","neighborhood","executable",".","如何","correctly","from","world","用到","就","launchdescription",")","description","be","include","node","接下","yaw","entity","}","state","output","you","的","]","val","sure","own","了","-","a","all","/","_","share","run","includelaunchdescription","sim","topic",",","worlds","t","!","doesn","spawner","packages","x","publisher","功能","模型","spwan"," ","to","file",":","urdf","launch","sources","items","we","single","0.0","加载","package","our","#","have","directory","，","ament"],"title":"构建仿真环境","title_tokens":["构建","仿真","环境"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_13","text":"万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard Attention 虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 通过键盘上的“i、j、，、l”几个按键，就可以控制机器人前后左右运动啦。 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。","text_tokens":["有点","按键","export","以上","基本","控制","load","我们","第一句","”","二句","=","py","见证","复杂","啦","第二","比","teleop","接下来","虚拟","。","需要","twist","learning","不过","键盘","j","vgpu10","过程","节点","gazebo","运行",">","中","keyboard","一句","可以","attention","下来","时刻","i","左右","“","into","环境","小海龟","时","万事俱备","svga","0","机器","\"",".","硬件","硬件加速","就","整个","l","机器人","俱备","启动","第一","ros2","已经","接下","~","仿真","echo","万事","的","虚拟机","流程","小海","奇迹","就是","了","和","很多","/","_","海龟","几个","run","命令","：","两句","加速"," ","此时","通过","bashrc","关闭","第二句","urdf","有点像","$","launch","前后左右","上","，","运动","前后","、"],"title":"机器人运动仿真","title_tokens":["机器人","运动","机器","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#ignitiongazebo","text":"随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为 Ignition ，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 运行成功后，会打开Ignition的仿真界面和Rviz上位机，我们可以看到RGBD相机仿真后发布的图像数据。 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/","text_tokens":["不断","从","度","迭代","ignition","rviz","为","多","变化","我们","py","demos","更","官方网站","真器","平台","。","发布","流畅","gazebo","有","运行","技术","可以","渲染","后","信息","也","界面","apt","ros","参考","进步","新一代","一下","相机",".","图像","ign","随着","机","不妨","ros2","会","命名","bridge","仿真","大家","上位","一代","较大","的","ignitionrobotics","官方","试一下","-","看到","和","www","camera","/","_","效果","仿真器","在","都","来","rgbd","org"," ","install","官方网","成功",":","$","launch","humble","版本","上","sudo","，","打开","网站","新","数据"],"title":"Ignition：下一代Gazebo","title_tokens":["：","ignition","gazebo","一代","下一代"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_14","text":"learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["the","fixed","z","box","0.025","2","colors","update","0.20","and","wiki","list","cylinder","inertia","20","{","is","command","max","length","=","(","xyz","radius","0.2","front","odometry","true","y","parent","visual","blue","sphere","publish","right","ixz","r","odom","value","0.18","30","drive","turngravityoff","1.0","simpletransmission","h","learning","so","version","name","mbot","gazebo","pi","rate","iyy",">","robot","this","hardware","gray","http","axis","cmd","actuator","controller","xmlns","0.19","0.05","hardwareinterface","macro","xacro","reference","mechanicalreduction","mass","3.1415926","izz","ros","rgba","child","0.015","<","vel","ixy","link","0","1","matrix","plugin","tf",".","\"","used","3","--","+","12","reflect",")","xml","differential","include","m","find","}","libgazebo","source","type","color","collision","diameter","trans","params","transmission","property","motor","black","-","www","left","/","_","base","iyz","inertial","rpy","false","topic","torque","footprint","0.95","defining","caster","material","continuous","!","diff","prefix","geometry","x","org","velocityjointinterface","origin"," ","5","to","for","?","0.4","frame","separation",":","urdf","back","$","acceleration","filename","0.75","*","size","important","joints","yellow","wheel","0.001","joint","in","ixx","interface","0.06","0.16"],"title":"附录：机器人完整模型","title_tokens":["：","模型","机器人","完整","机器","附录"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/","text":"Rviz：三维可视化显示平台 大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾—— Rviz ，一款 三维可视化显示 的神器。 Rviz三维可视化平台 机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。 Rviz介绍 一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。 运行方法 启动一个终端，使用如下命令即可启动： $ ros2 run rviz2 rviz2 彩色相机仿真与可视化 摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。 仿真插件配置 关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 learning_gazebo/urdf/sensers/camera_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"camera\" name= \"camera_node\" > <update_rate> 30.0 </update_rate> <camera name= \"head\" > <horizontal_fov> 1.3962634 </horizontal_fov> <image> <width> 1280 </width> <height> 720 </height> <format> R8G8B8 </format> </image> <clip> <near> 0.02 </near> <far> 300 </far> </clip> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.007 </stddev> </noise> </camera> <plugin name= \"gazebo_camera\" filename= \"libgazebo_ros_camera.so\" > <ros> <!-- <namespace>stereo</namespace> --> <remapping> ~/image_raw:=image_raw </remapping> <remapping> ~/camera_info:=camera_info </remapping> </ros> <camera_name> ${prefix} </camera_name> <frame_name> ${prefix}_link </frame_name> <hack_baseline> 0.2 </hack_baseline> </plugin> </sensor> </gazebo> 主要配置项如下： <sensor>标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 <camera>标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 <plugin>标签：加载摄像头仿真插件 运行仿真环境 模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py 可以使用命令行看下仿真出来的图像话题： 图像数据可视化 我们使用Rviz可视化显示图像信息，先来启动Rviz： $ ros2 run rviz2 rviz2 启动成功后，在左侧Displays窗口中点击“Add”，找到Image显示项，OK确认后就可以加入显示列表啦，然后配置好该显示项订阅的图像话题，就可以顺利看到机器人的摄像头图像啦。 三维相机仿真与可视化 二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。 仿真插件配置 三维相机使用的Gazebo插件也是libgazebo_ros_camera.so，配置方法如下： learning_gazebo/urdf/sensers/kinect_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"depth\" name= \"${prefix}\" > <always_on> true </always_on> <update_rate> 15.0 </update_rate> <pose> 0 0 0 0 0 0 </pose> <camera name= \"kinect\" > <horizontal_fov> ${60.0*M_PI/180.0} </horizontal_fov> <image> <format> R8G8B8 </format> <width> 640 </width> <height> 480 </height> </image> <clip> <near> 0.05 </near> <far> 8.0 </far> </clip> </camera> <plugin name= \"${prefix}_controller\" filename= \"libgazebo_ros_camera.so\" > <ros> <!-- <namespace>${prefix}</namespace> --> <remapping> ${prefix}/image_raw:=rgb/image_raw </remapping> <remapping> ${prefix}/image_depth:=depth/image_raw </remapping> <remapping> ${prefix}/camera_info:=rgb/camera_info </remapping> <remapping> ${prefix}/camera_info_depth:=depth/camera_info </remapping> <remapping> ${prefix}/points:=depth/points </remapping> </ros> <camera_name> ${prefix} </camera_name> <frame_name> ${prefix}_frame_optical </frame_name> <hack_baseline> 0.07 </hack_baseline> <min_depth> 0.001 </min_depth> <max_depth> 300.0 </max_depth> </plugin> </sensor> </gazebo> 运行仿真环境 使用如下命令启动仿真环境： $ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py 启动成功后，可以看下当前的话题列表，已经产生了三维相机的相关话题。 点云数据可视化 运行Rviz： $ ros2 run rviz2 rviz2 同样的流程，点击Add，添加PointCloud2，设置订阅的点云话题，还要配置Rviz的参考系是odom，就可以看到点云数据啦，每一个点都是由xyz位置和rgb颜色组成。 激光雷达仿真与可视化 除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。 仿真插件配置 雷达使用的Gazebo插件是libgazebo_ros_ray_sensor.so，配置方法如下： learning_gazebo/urdf/sensers/lidar_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"ray\" name= \"rplidar\" > <update_rate> 20 </update_rate> <ray> <scan> <horizontal> <samples> 360 </samples> <resolution> 1 </resolution> <min_angle> -3 </min_angle> <max_angle> 3 </max_angle> </horizontal> </scan> <range> <min> 0.10 </min> <max> 30.0 </max> <resolution> 0.01 </resolution> </range> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.01 </stddev> </noise> </ray> <plugin name= \"gazebo_rplidar\" filename= \"libgazebo_ros_ray_sensor.so\" > <ros> <namespace> / </namespace> <remapping> ~/out:=scan </remapping> </ros> <output_type> sensor_msgs/LaserScan </output_type> </plugin> </sensor> </gazebo> 运行仿真环境 使用如下命令启动仿真环境： $ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py 在话题列表中也可以看到激光雷达啦。 点云数据可视化 启动Rviz： $ ros2 run rviz2 rviz2 点击Add，选择Laserscan，然后配置订阅的话题名，rviz的固定坐标系依然是odom，此时就可以看到激光点啦。 Rviz vs Gazebo 好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下： Gazebo是 仿真平台 ，核心功能是 创造数据 ，我们没有机器人或者传感器，它可以帮我们做一个虚拟的； Rviz是 可视化平台 ，核心功能是 显示数据 ，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。 参考链接 https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":["激光","项","范畴","终端","一脸","体感","rviz2","内容","；","机械","汽车","内部","我们","点击","想不到","看","打造","py","xyz","0.2","的话","一款","参考系","创造","动机","这里","平台","岂","laserscan","laser","自由","发布","so","玩起来","可贵","on","有","gazebo","然后","pose","周边","中","显示","一句","具体","计算","强调","remapping","300","不少","帮","核心","时候","好该","“","参考","两个","<","框架","link","好","noise","plugin","拭目以待","主要","真实","360","480","开放式","与","就","软件","机","mean","当前","它","add","问题","仿真","大家","output","的","sensor","以待","看到","规划","出来","去","_","run","在","激光雷达","世界","是不是","设计","先来","min","format","还有","各种","各种各样","raw","15.0","再","这种","prefix","模型","神器","angle","0.01","下","颜色","vs","眼中","传感","不能","加载","info","自动","哪些","你","列表","三维","设置","某些","涉及","当然","嘉宾","一分","qt","了解","像头","出厂","摄像","量级","load","20","{","”","做","依然","问","巧妇","0.02","更","true","但","什么","odom","。","需要","包括","肯定","加入","重量级","过程","name","是","lidar","众多","范围","装","把","r8g8b8","1.3962634","坐标","拭目","确认","窗口","0","机器","相机",".","类型","usb","知道","一目了然","一个点","可视","开放","会","啥","很难","range","node","想","0.07","~","m","组成","不想","}","type","介绍","或者","玩起","起来","相关","基于","了","samples","很多","对","方便","www","/","stddev","数据","horizontal","消息","拍摄","熟悉","理解","分析","clip","每","来","类似","选择","话","代码","rgbd","传感器"," ","0.007","分辨率","本","数字","效率","frame",":","urdf","$","launch","臂","使用","com","没有","层面","新","width","说明","far","开发","自带","名","从","resolution","update","pointcloud2","提供","8.0","摄像头","一堆","混淆","等","max","有没有","啦","格式","一位","这些","180.0","到","满意","分辨","stereolabs","不到","外部","—","虚拟","displays","自主","巧妇难为无米之炊","rate","手上","运行","不","方法","depth","渲染","一分钱","后","信息","0.05","辨率","也","链接","用来","移动","xacro","非常","baseline","ros","60.0","提高","了然","编码","into","sensers","ok","环境","只要","near","1","位置","讲","ray","如何","全都","找到","3","--","intel","同样","机器人","快速","启动","过瘾","ros2","fov","已经","场景","给","上位","libgazebo","255","点云","移动机器人","30.0","图形","官方","流程","试一试","所以","就是","分钱","如下","720","案例","不是","按照","几个","彩色","添加","比如","都","对照","github","难为","功能","此时","msgs","插件","成功","300.0","out","namespace","还是","这样","可视化","docs","如果","上","话题","0.001","运动","重量","感器","坐标系","参数","stereo","过","rviz","多","一个","路径","懵","这","=","最为","gaussian","获取","只是","工具","即可","么","并且","640","能够","hack","scan","左侧","learning","不过","mbot","pi","会用","才","呢",">","大大","一目","自己","可以","常备","controller","一些","1280","reference","一种","由","畅想","不用","optical","\"","命令行","点","常用","只有","图像","head","驾驶","关于","价格比","长","能","rgb","还要","对应","命名","样","人","描述","大大提高","height","搞定","points","kinect","标签","-","和","相信","订阅","产生","camera","always","这个","固定","各样","效果","先","希望","用","这幅","!","雷达","命令","配置","https","：","通过","除了","什么样","realsense","等等","二维","噪音","？","0.10","顺利","价格","试试","0.0","filename","*","图形化","叫做","rplidar","，","外部环境","image","、","导航"],"title":"Rviz","title_tokens":["rviz"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz","text":"大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾—— Rviz ，一款 三维可视化显示 的神器。","text_tokens":["世界","重量","图像","重量级","范畴","三维","就","机器人","涉及","过","可视","嘉宾","呢","是","像头","rviz","中","摄像","一个","显示","量级","神器","问题","摄像头"," ","眼中","我们","大家","什么样","这","本","有没有","介绍","的","？","一位","ros","一款","畅想","到","什么","可视化","看到","了","没有","，","机器","能够","讲","—","。","如何","拍摄"],"title":"Rviz：三维可视化显示平台","title_tokens":["可视化","：","显示","三维","平台","可视","rviz"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_1","text":"机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。","text_tokens":["开发","你","感器","激光","坐标系","三维","从","一脸","当然","内容","rviz","像头","摄像","机械","路径","懵","内部","摄像头","我们","、","做","一堆","看","问","只是","这些","一款","到","但","什么","么","动机","这里","。","岂","需要","肯定","自主","过程","周边","才","是","不","大大","中","一目","自己","可以","众多","计算","渲染","信息","用来","移动","把","提高","了然","坐标","环境","0","机器","位置","相机","全都","图像","知道","就","一目了然","机器人","快速","长","可视","软件","啥","场景","很难","给","样","人","描述","255","移动机器人","的","大大提高","所以","就是","搞定","看到","规划","和","很多","出来","去","各样","效果","在","希望","激光雷达","理解","设计","比如","还有","分析","各种","各种各样","这幅","都","再","类似","雷达","功能","模型","传感器"," ","颜色","通过","等等","数字","效率","传感","？","臂","这样","可视化","如果","哪些","，","层面","运动","数据","导航"],"title":"Rviz三维可视化平台","title_tokens":["可视化","三维","平台","可视","rviz"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_2","text":"一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。","text_tokens":["开发","自带","只有","常用","发布","开放式","项","在","就","某些","机器人","有","可视","机","开放","rviz","是","话","qt","出厂","中","不","多","功能","它","一句","一个","显示","可以","对应"," ","想","自己","我们","上位","做","想不到","新","插件","也","核心","打造","或者","的","工具","ros","更","图形","官方","满意","框架","图形化","基于","可视化","了","看到","没有","很多","如果","对","方便","只要","不到","按照","，","话题","平台","。","机器","效果","这个","消息","说明","数据","添加"],"title":"Rviz介绍","title_tokens":["rviz","介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_1","text":"启动一个终端，使用如下命令即可启动： $ ros2 run rviz2 rviz2","text_tokens":["命令","一个","：","$"," ","终端","即可","，","启动","rviz2","使用","如下","run","ros2"],"title":"运行方法","title_tokens":["运行","方法"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_2","text":"摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。","text_tokens":["肯定","感器","常用","先来","机器人","是","像头","摄像","给","传感器","摄像头","我们","最为","传感","装","的","一种","了","上","，","机器","。"],"title":"彩色相机仿真与可视化","title_tokens":["可视化","与","相机","仿真","可视","彩色"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_3","text":"关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 learning_gazebo/urdf/sensers/camera_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"camera\" name= \"camera_node\" > <update_rate> 30.0 </update_rate> <camera name= \"head\" > <horizontal_fov> 1.3962634 </horizontal_fov> <image> <width> 1280 </width> <height> 720 </height> <format> R8G8B8 </format> </image> <clip> <near> 0.02 </near> <far> 300 </far> </clip> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.007 </stddev> </noise> </camera> <plugin name= \"gazebo_camera\" filename= \"libgazebo_ros_camera.so\" > <ros> <!-- <namespace>stereo</namespace> --> <remapping> ~/image_raw:=image_raw </remapping> <remapping> ~/camera_info:=camera_info </remapping> </ros> <camera_name> ${prefix} </camera_name> <frame_name> ${prefix}_link </frame_name> <hack_baseline> 0.2 </hack_baseline> </plugin> </sensor> </gazebo> 主要配置项如下： <sensor>标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 <camera>标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 <plugin>标签：加载摄像头仿真插件","text_tokens":["感器","项","设置","参数","stereo","update","像头","摄像","提供","摄像头","我们","{","等","=","gaussian","0.02","格式","0.2","分辨","。","hack","需要","自由","learning","so","name","gazebo","rate",">","方法","remapping","300","1280","辨率","范围","xacro","reference","r8g8b8","1.3962634","baseline","ros","编码","<","sensers","link","near","noise","plugin","\"",".","主要","类型","图像","head","--","关于","mean","fov","对应","给","node","~","命名","仿真","大家","libgazebo","}","描述","type","介绍","的","30.0","sensor","height","如下","720","标签","camera","/","_","这个","stddev","horizontal","format","clip","raw","都","对照","!","代码","prefix","配置","：","模型","传感器"," ","0.007","分辨率","插件","frame","传感",":","urdf","$","噪音","0.0","filename","使用","namespace","加载","叫做","info","，","width","image","far"],"title":"仿真插件配置","title_tokens":["配置","仿真","插件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_4","text":"模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py 可以使用命令行看下仿真出来的图像话题：","text_tokens":["图像","learning","mbot","gazebo","能","rviz","像头","ros2","中","命令","已经","配置","摄像","：","模型","可以","load"," ","摄像头","下","我们","仿真","信息","看","成功","py","不能","把","啦","$","launch","的","以待","使用","into","并且","看到","拭目","出来","camera","好","_","，","话题","拭目以待","。",".","命令行","在"],"title":"运行仿真环境","title_tokens":["运行","仿真","环境"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_5","text":"我们使用Rviz可视化显示图像信息，先来启动Rviz： $ ros2 run rviz2 rviz2 启动成功后，在左侧Displays窗口中点击“Add”，找到Image显示项，OK确认后就可以加入显示列表啦，然后配置好该显示项订阅的图像话题，就可以顺利看到机器人的摄像头图像啦。","text_tokens":["加入","列表","图像","找到","项","就","机器人","可视","启动","然后","rviz2","来","rviz","像头","ros2","中","配置","摄像","显示","：","add","可以"," ","摄像头","我们","”","后","信息","点击","成功","好该","$","啦","的","“","顺利","使用","ok","可视化","看到","订阅","确认","窗口","，","image","话题","机器","。","先","displays","run","左侧","在"],"title":"图像数据可视化","title_tokens":["可视化","数据","可视","图像"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_6","text":"二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。","text_tokens":["感器","常用","比如","三维","不过","玩起来","intel","就","可贵","价格比","体感","一分","这种","过瘾","不","像头","摄像","传感器","可以","想","摄像头","我们","通过","仿真","一分钱","不想","realsense","不少","也","传感","或者","获取","点云","玩起","二维","的","起来","价格","试试","分钱","kinect","环境","不用","，","外部","相机","。","外部环境","数据","usb"],"title":"三维相机仿真与可视化","title_tokens":["可视化","与","三维","相机","仿真","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_7","text":"三维相机使用的Gazebo插件也是libgazebo_ros_camera.so，配置方法如下： learning_gazebo/urdf/sensers/kinect_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"depth\" name= \"${prefix}\" > <always_on> true </always_on> <update_rate> 15.0 </update_rate> <pose> 0 0 0 0 0 0 </pose> <camera name= \"kinect\" > <horizontal_fov> ${60.0*M_PI/180.0} </horizontal_fov> <image> <format> R8G8B8 </format> <width> 640 </width> <height> 480 </height> </image> <clip> <near> 0.05 </near> <far> 8.0 </far> </clip> </camera> <plugin name= \"${prefix}_controller\" filename= \"libgazebo_ros_camera.so\" > <ros> <!-- <namespace>${prefix}</namespace> --> <remapping> ${prefix}/image_raw:=rgb/image_raw </remapping> <remapping> ${prefix}/image_depth:=depth/image_raw </remapping> <remapping> ${prefix}/camera_info:=rgb/camera_info </remapping> <remapping> ${prefix}/camera_info_depth:=depth/camera_info </remapping> <remapping> ${prefix}/points:=depth/points </remapping> </ros> <camera_name> ${prefix} </camera_name> <frame_name> ${prefix}_frame_optical </frame_name> <hack_baseline> 0.07 </hack_baseline> <min_depth> 0.001 </min_depth> <max_depth> 300.0 </max_depth> </plugin> </sensor> </gazebo>","text_tokens":["三维","update","8.0","{","max","=","180.0","true","640","hack","learning","so","name","on","pi","gazebo","rate","pose",">","方法","是","depth","remapping","controller","0.05","也","xacro","reference","r8g8b8","baseline","ros","60.0","<","sensers","link","near","optical","0","相机","plugin","\"",".","480","--","fov","rgb","0.07","m","libgazebo","}","type","的","sensor","height","如下","kinect","points","camera","always","/","_","horizontal","min","format","clip","raw","15.0","!","prefix","配置","："," ","插件","frame",":","300.0","urdf","$","filename","*","使用","namespace","info","，","0.001","width","image","far"],"title":"仿真插件配置","title_tokens":["配置","仿真","插件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_8","text":"使用如下命令启动仿真环境： $ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py 启动成功后，可以看下当前的话题列表，已经产生了三维相机的相关话题。","text_tokens":["列表","learning","三维","mbot","gazebo","启动","ros2","命令","已经","rgbd","当前","：","可以","load"," ","下","仿真","后","看","成功","py","$","launch","的","使用","如下","into","相关","了","环境","产生","_","，","话题","相机","。","."],"title":"运行仿真环境","title_tokens":["运行","仿真","环境"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_9","text":"运行Rviz： $ ros2 run rviz2 rviz2 同样的流程，点击Add，添加PointCloud2，设置订阅的点云话题，还要配置Rviz的参考系是odom，就可以看到点云数据啦，每一个点都是由xyz位置和rgb颜色组成。","text_tokens":["设置","就","同样","一个点","每","rviz2","都","运行","rviz","是","ros2","rgb","pointcloud2","配置","还要","：","add","一个","可以"," ","颜色","组成","点击","xyz","点云","$","的","啦","流程","参考","由","参考系","看到","和","订阅","，","话题","odom","位置","。","run","数据","添加"],"title":"点云数据可视化","title_tokens":["点云","可视化","可视","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_10","text":"除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。","text_tokens":["包括","激光雷达","激光","感器","三维","驾驶","机器人","来","是","像头","雷达","摄像","汽车","传感器","摄像头","常备","除了","我们","也","移动","传感","移动机器人","的","试一试","和","很多","自动","动机","，","相机","机器","。"],"title":"激光雷达仿真与可视化","title_tokens":["雷达","激光雷达","可视化","激光","与","仿真","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_11","text":"雷达使用的Gazebo插件是libgazebo_ros_ray_sensor.so，配置方法如下： learning_gazebo/urdf/sensers/lidar_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"ray\" name= \"rplidar\" > <update_rate> 20 </update_rate> <ray> <scan> <horizontal> <samples> 360 </samples> <resolution> 1 </resolution> <min_angle> -3 </min_angle> <max_angle> 3 </max_angle> </horizontal> </scan> <range> <min> 0.10 </min> <max> 30.0 </max> <resolution> 0.01 </resolution> </range> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.01 </stddev> </noise> </ray> <plugin name= \"gazebo_rplidar\" filename= \"libgazebo_ros_ray_sensor.so\" > <ros> <namespace> / </namespace> <remapping> ~/out:=scan </remapping> </ros> <output_type> sensor_msgs/LaserScan </output_type> </plugin> </sensor> </gazebo>","text_tokens":["360","3","learning","min","so","name","resolution","gazebo","rate","update",">","方法","是","雷达","mean","prefix","配置","：","angle","range","lidar"," ","0.01","20","~","{","remapping","libgazebo","}","max","msgs","插件","type","=","xacro","gaussian","reference",":","urdf","output","的","\"","$","30.0","0.10","sensor","ros","out","0.0","filename","使用","如下","<","namespace","sensers","-","samples","link","rplidar","/","_","，","1","noise","horizontal","stddev","plugin",".","ray","scan","laserscan"],"title":"仿真插件配置","title_tokens":["配置","仿真","插件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_12","text":"使用如下命令启动仿真环境： $ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py 在话题列表中也可以看到激光雷达啦。","text_tokens":["激光雷达","激光","列表","learning","mbot","gazebo","启动","ros2","命令","中","雷达","：","可以","load"," ","仿真","也","py","$","launch","啦","使用","如下","into","看到","环境","_","话题","。",".","laser","在"],"title":"运行仿真环境","title_tokens":["运行","仿真","环境"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_13","text":"启动Rviz： $ ros2 run rviz2 rviz2 点击Add，选择Laserscan，然后配置订阅的话题名，rviz的固定坐标系依然是odom，此时就可以看到激光点啦。","text_tokens":["点","激光","名","坐标系","run","就","启动","然后","rviz2","rviz","选择","是","ros2","配置","：","add","可以"," ","此时","依然","点击","$","的","啦","坐标","看到","订阅","，","话题","固定","odom","。","laserscan"],"title":"点云数据可视化","title_tokens":["点云","可视化","可视","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz-vs-gazebo","text":"好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下： Gazebo是 仿真平台 ，核心功能是 创造数据 ，我们没有机器人或者传感器，它可以帮我们做一个虚拟的； Rviz是 可视化平台 ，核心功能是 显示数据 ，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。","text_tokens":["感器","rviz","了解","；","一个","我们","做","这","混淆","巧妇","啦","的话","到","创造","不到","这里","虚拟","平台","。","巧妇难为无米之炊","不过","gazebo","有","手上","会用","方法","是","显示","自己","可以","具体","强调","信息","一些","帮","也","核心","时候","非常","两个","环境","好","机器","讲","真实","常用","就","机器人","可视","软件","启动","会","已经","它","仿真","大家","或者","的","流程","所以","了","相信","和","案例","对","不是","很多","几个","熟悉","在","是不是","用","再","来","难为","功能","：","传感器"," ","下","通过","传感","使用","还是","可视化","没有","如果","，","数据"],"title":"Rviz vs Gazebo","title_tokens":["vs","rviz"," ","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_14","text":"https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":["docs",":","https","www","stereolabs","com"," ","/",".","rviz2","github","rviz","ros2"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/","text":"RQT：模块化可视化工具 ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具—— rqt 。 rqt介绍 正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，一些常用的功能如下： 日志显示 图像显示 发布话题数据/调用服务请求 绘制数据曲线 数据包管理 节点可视化 参考资料 https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":["开发","服务","有点","rviz","qt","像头","简单","摄像","一个","提供","可能","摄像头","另外","我们","每个","工具","的话","更","实现","—","。","有些","需要","发布","不过","节点","about","然后","觉得","en","是","中","显示","一句","可以","具体","难免","一些","也","界面","apt","管理","ros","一种","调用","参考","tutorials","很","资料","小","rqt","绘制",".","模块","请求","难免会","html","常用","图像","用到","就","可视","启动","日志","会","已经","场景","数据包","它","模块化","只","参考资料","正如","命名","安装","介绍","指令","的","如下","基于","-","了","和","很多","操作","/","这个","console","在","一样","比如","而","麻烦","using","都","来","类似","前","命令","https","功能","：","org","里边"," ","下","此时","通过","强大","install",":","$","concepts","使用","humble","加载","这样","可视化","docs","曲线","sudo","，","话题","进行","数据"],"title":"Rqt","title_tokens":["rqt"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt","text":"ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具—— rqt 。","text_tokens":["难免会","图像","比如","不过","有点","就","用到","可视","麻烦","觉得","rviz","像头","简单","中","会","已经","场景","摄像","功能","显示","一个","模块化","只","可能","提供","下","摄像头"," ","此时","我们","另外","难免","一些","强大","的","工具","的话","ros","更","一种","使用","可视化","了","操作","很","，","rqt","—","。","模块","有些","需要"],"title":"RQT：模块化可视化工具","title_tokens":["可视化","：","模块化","工具","rqt","可视","模块"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt_1","text":"正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，一些常用的功能如下：","text_tokens":["一样","开发","常用","就","而","可视","然后","启动","都","来","qt","rviz","是","前","命令","类似","功能","它","一句","一个","里边","可以","：","正如"," ","具体","命名","我们","通过","一些","install","也","安装","每个","界面","指令","的","$","工具","apt","ros","实现","使用","humble","加载","如下","这样","基于","可视化","了","和","-","很多","小","sudo","这个","，","rqt","。","进行","模块","需要","在"],"title":"rqt介绍","title_tokens":["rqt","介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_1","text":"","text_tokens":[],"title":"日志显示","title_tokens":["显示","日志"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_2","text":"","text_tokens":[],"title":"图像显示","title_tokens":["显示","图像"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_3","text":"","text_tokens":[],"title":"发布话题数据/调用服务请求","title_tokens":["服务","发布","请求","/","话题","调用","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_4","text":"","text_tokens":[],"title":"绘制数据曲线","title_tokens":["绘制","曲线","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_5","text":"","text_tokens":[],"title":"数据包管理","title_tokens":["管理","数据","数据包"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_6","text":"","text_tokens":[],"title":"节点可视化","title_tokens":["节点","可视化","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_7","text":"https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":["-","docs",":","https","html","org","tutorials"," ","/","concepts","ros","about","rqt","using",".","humble","en","console"],"title":"参考资料","title_tokens":["参考资料","资料","参考"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/","text":"资源汇总 常用框架 自主导航 比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/ 自动驾驶 自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/ 路径规划 此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/ 机器人学 ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。 视频课程 斯坦福大学公开课 —— 机器人学 (https://www.bilibili.com/video/av4506104/){:target=\"_blank\"} 台大机器人学之运动学 (https://www.bilibili.com/video/BV1v4411H7ez){:target=\"_blank\"} Self-Driving Cars with ROS2 & Autoware (https://www.youtube.com/watch?v=XTmlhvlmcf8&list=PLL57Sz4fhxLpCXgN0lvCF7aHAlRA5FoFr){:target=\"_blank\"} 古月学院 (https://class.guyuehome.com/){:target=\"_blank\"} 常用链接 ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":["开发","即便","driving","watch","书籍","必备","被","2","index","内容","wiki","多","机械","一个","基本","提供","斯坦福大学","控制","路径","list","台大","我们","{","》","这","自身","等","xtmlhvlmcf8","=","cars","最为","一本","经典","(","课程","工具","导论","这些","更","实现","当今","内功","情况","guyuehome","autoware","classic","gazebosim","video","视觉","动机","—","这套","。","推荐","自主","兴趣","商业","有","居","gazebo","著名","称为","en","不","是","中","修炼","自己","可以","公开","http","io","也","链接","要","移动","非常","v","热门","ros","autowareauto","一种","参考","blank","理论","汇总","工程","框架","大学","bv1v4411h7ez","技能","人学","好","机器",".","\"","模块","html","常用","分拣","此外","找到","with","学习","资源","驾驶","机器人","就","ubuntu","快速","cn","robots",")","ros2","会","至于","之一","documentation","对应","丰富","完整","大家","}","古月","导航系统","除此","av4506104","行业","知识","结合","视频","移动机器人","的","之","class","相关","包含","《","阅读","了","和","规划","很多","对","www","经典著作","moveit","社区","-","/","这个","_","几个","应用","人手","gitlab","roscon","在","&","碰撞","著作","运动学","比如","重在","humble","auto","还有","各种","都","碰撞检测","开课","选择","github","检测","代码","斯坦福","https","中文","功能","：","org","福大"," ","本书","学院","算法","基本功","具备","感知","?","理论知识","系统",":","navigation","之外","公开课","任何","除此之外","youtube","典型","pll57sz4fhxlpcxgn0lvcf7ahalra5fofr","臂","商业化","基本功能","使用","感兴趣","autowarefoundation","得","仔细阅读","实操","每一","版本","工程师","com","如果","上","自动","感兴","仔细","docs","，","self","机器人学","进行","target","bilibili","运动","、","导航"],"title":"资源汇总","title_tokens":["汇总","资源"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_1","text":"","text_tokens":[],"title":"资源汇总","title_tokens":["汇总","资源"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_2","text":"","text_tokens":[],"title":"常用框架","title_tokens":["常用","框架"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_3","text":"比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/","text_tokens":["开发","即便","比如","自主","在","机器人","快速","各种","都","内容","不","ros2","会","代码","中","https","功能","自己","基本","提供","：","可以","."," ","org","完整","我们","大家","算法","基本功","具备","也","链接","导航系统","移动","系统","要",":","navigation","移动机器人","的","任何","ros","实现","参考","基本功能","使用","相关","框架","了","和","如果","上","好","动机","，","这个","机器","这套","。","进行","应用","/","导航"],"title":"自主导航","title_tokens":["导航","自主"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_4","text":"自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/","text_tokens":["auto","兴趣","驾驶","机器人","商业","有","著名","是","中","之一","https","功能","一个","：","丰富",".","控制","可以"," ","org","io","大家","感知","这","等","也","链接","最为","系统","行业",":","的","非常","热门","典型","ros","一种","autowareauto","实现","商业化","参考","包含","感兴趣","autowarefoundation","框架","了","规划","当今","自动","和","很多","如果","autoware","社区","对","感兴","www","/","这个","，","机器","。","—","几个","应用","模块","gitlab","、","在"],"title":"自动驾驶","title_tokens":["自动","驾驶"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_5","text":"此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/","text_tokens":["碰撞","分拣","此外","找到","还有","都","碰撞检测","内容","是","检测","中","https","多","机械","功能","org","可以"," ","大家","这","等","也","链接",":","经典","的","非常","ros","更","臂","相关","使用","框架","规划","moveit","视觉","这个","，","/","。",".","运动","、","在"],"title":"路径规划","title_tokens":["规划","路径"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_6","text":"ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。","text_tokens":["开发","著作","比如","重在","书籍","学习","必备","就","机器人","被","有","都","称为","是","选择","至于","修炼","对应","可以"," ","本书","》","大家","自身","理论知识","除此","一本","经典","知识","结合","的","之外","工具","除此之外","导论","这些","ros","得","相关","理论","《","工程","仔细阅读","实操","每一","阅读","工程师","版本","情况","内功","经典著作","技能","仔细","人学","，","机器","。","机器人学","人手","推荐","中文"],"title":"机器人学","title_tokens":["机器人","机器人学","机器","人学"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_7","text":"斯坦福大学公开课 —— 机器人学 (https://www.bilibili.com/video/av4506104/){:target=\"_blank\"} 台大机器人学之运动学 (https://www.bilibili.com/video/BV1v4411H7ez){:target=\"_blank\"} Self-Driving Cars with ROS2 & Autoware (https://www.youtube.com/watch?v=XTmlhvlmcf8&list=PLL57Sz4fhxLpCXgN0lvCF7aHAlRA5FoFr){:target=\"_blank\"} 古月学院 (https://class.guyuehome.com/){:target=\"_blank\"}","text_tokens":["with","运动学","driving","watch","机器人",")","开课","ros2","斯坦福","福大","https","list","斯坦福大学","公开"," ","台大","{","学院","}","xtmlhvlmcf8","?","=","cars","古月","(",":","av4506104","之","\"","class","v","公开课","youtube","pll57sz4fhxlpcxgn0lvcf7ahalra5fofr","blank","com","&","大学","-","www","bv1v4411h7ez","guyuehome","autoware","人学","video","/","_","self","—","机器","机器人学","target",".","bilibili","运动"],"title":"视频课程","title_tokens":["视频","课程"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_8","text":"ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":["html","ubuntu","cn","居","gazebo","robots","2","index","en","github","wiki","ros2","documentation","https","org","："," ","http","古月",":","ros","humble","com","docs","www","guyuehome","gazebosim","classic","/",".","roscon"],"title":"常用链接","title_tokens":["链接","常用"]}]}