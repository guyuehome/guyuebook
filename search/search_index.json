{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"引言 机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的 电气时代 。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的 数字时代 ，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发， 智能机器人时代 正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。 教程链接汇总 课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/90 博客泡圈： https://www.guyuehome.com/","text_tokens":["系统","对","我们","思考","重要","不断丰富","电气","控制器","呈","机器人","汽车","www","智能","狗","技术",":","动作","软件","年前","于","21","家庭","和","高","应用","要求","也","robot","电机","时期","ai","七八十","汇总","必将","更加","年","八十年","四足","ros2","驱动","并","工业","层面","驾驶","主要","释放","但是","有限","之一","等","源码","井喷","人工","操控","太","劳动力","而言","类型","前夜","发展","计算","大","、","2015","仿生","不断","。","多","检测","正式","更","数字","成为","拉开序幕","：","关注","操作系统","不过","七八十年","载体","问答","机器","之后","自动","帮助","链接","丰富","_","完全","没有","生产","感器","服务","视频","设备","算机","bubble","随着","由示","环境","传感","横跨","人类","状","控制","命令","后","自主","减速","2000","送餐","依然","是","提出","就是","俗称","劳动","只能","业生","传感器","泡圈","/","book"," ","快速","人工智能","主角","出现","，","引言","十年","时代","这是","com","七八","伺服电机","缺少","智能化","过程","工业生产","gitee","视觉","的","经历","拉开","感知","system","guyuehome","此时","执行","tutorials","agv","减速机","—",".","课程","https","按照","动力","序幕","最为","伺服","工厂","id","class","教器","90","驱动器","了","图文","开发","博客","爆发","最佳","circledetail","这","三个","教程","operating","计算机","局部","github","操作","热点","八十","逐渐"],"title":"引言","title_tokens":["引言"]},{"location":"#_1","text":"机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的 电气时代 。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的 数字时代 ，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发， 智能机器人时代 正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。","text_tokens":["系统","对","我们","思考","重要","不断丰富","电气","控制器","呈","机器人","汽车","智能","狗","技术","动作","软件","年前","于","家庭","和","高","应用","要求","也","robot","电机","时期","ai","七八十","必将","更加","年","八十年","四足","驱动","并","工业","层面","驾驶","主要","释放","但是","有限","之一","等","井喷","人工","操控","太","劳动力","而言","类型","前夜","发展","计算","大","、","2015","仿生","不断","。","多","检测","正式","更","数字","成为","拉开序幕","关注","操作系统","不过","七八十年","载体","机器","之后","自动","帮助","丰富","完全","没有","生产","感器","服务","设备","算机","随着","由示","环境","传感","横跨","人类","状","控制","命令","后","自主","减速","2000","送餐","依然","是","提出","就是","俗称","劳动","只能","业生","传感器"," ","快速","人工智能","主角","出现","，","十年","时代","这是","七八","伺服电机","缺少","智能化","过程","工业生产","视觉","的","经历","拉开","感知","system","此时","执行","agv","减速机","—","课程","按照","动力","序幕","最为","伺服","工厂","教器","驱动器","了","开发","爆发","最佳","这","三个","operating","计算机","局部","操作","热点","八十","逐渐"],"title":"引言","title_tokens":["引言"]},{"location":"#_2","text":"课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/90 博客泡圈： https://www.guyuehome.com/","text_tokens":[".","课程","https","www","id","：","class","tutorials","90","泡圈",":","/","book"," ","21","问答","图文","博客","_","com","bubble","视频","ros2","circledetail","gitee","教程","源码","github","guyuehome"],"title":"教程链接汇总","title_tokens":["教程","汇总","链接"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["出版","》","高质量","高校","居","机器人","www","地区","究其","学习者","复制","交流","仅限","和","使用","追究其","@","众多","知名","传播","ai","年","授权","抄录","社区","其它","法律责任","）","科技","有限","等","源码","声明者","培养","依法","致力于","万人","学","上","未经","声明","、","1000","图书","。","上述","学习","高质","合作","修改","限于","模式","ros","版权","镜像","请","机器","明者","小时","为","作品","视频","公司","合法","联系","华语","及","有限公司","所有","但","努力","人才培养","集","致力","不","课件","是","责任","微控","企业","交流学习"," ","或","包括","个人","单位","网站","人才","，","违反","com","古月","超过","至今","捆绑","书面","赋能","+","通过","追究","面向未来","120","产品","销售","优质","的","万字","guyuehome","线上","如需","有权",".","不得","实践","课程","一体","进行","校企","精锋","将","平台","累积","均","2011","法律","创新","本","用户","生态","内容","开发","与","（","《","武汉","拥有","许可","未来","提供","任何","畅销","被","brand","对本","面向","创建","构建","建立","质量"],"title":"关于我们","title_tokens":["我们","关于"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["出版","》","高质量","高校","居","机器人","www","地区","学习者","交流","众多","知名","ai","年","社区","）","等","培养","万人","致力于","、","1000","图书","。","学习","高质","合作","模式","ros","机器","小时","为","视频","华语","及","努力","人才培养","集","致力","是","企业","交流学习"," ","人才","，","com","古月","超过","至今","赋能","+","通过","面向未来","120","优质","的","万字","guyuehome","线上",".","实践","课程","一体","校企","平台","累积","2011","创新","用户","生态","内容","开发","与","（","《","未来","提供","畅销","面向","创建","构建","建立","质量"],"title":"学机器人，上古月居","title_tokens":["机器人","上","古月","居","机器","，","学"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["居","究其","复制","仅限","和","使用","追究其","@","传播","授权","抄录","其它","法律责任","科技","有限","等","源码","声明者","依法","未经","声明","、","。","上述","学习","修改","限于","版权","镜像","请","明者","为","作品","视频","公司","合法","联系","有限公司","所有","但","不","课件","责任","微控"," ","或","包括","个人","单位","网站","，","违反","com","古月","捆绑","书面","追究","产品","销售","的","guyuehome","如需","有权",".","不得","课程","进行","精锋","将","均","法律","本","用户","与","武汉","拥有","许可","任何","被","brand","对本"],"title":"版权声明","title_tokens":["声明","版权"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/","text":"ROS/ROS2是什么 智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。 ROS的诞生 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人—— PR2 ，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS的发展 ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称 ROSCon ，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。 ROS的特点 ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。 参考资料 关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["org","所以","系统","机制","新鲜","却","万左右","处理","入门","排名","青年","洗衣","学术","智能","2010","全书","托管","目标","这样","直接","叠","之旅","越来越","资料","年","单独","其中","速度","代码","15","集合","但是","上边","开发者","步伐","算是","年轻人","扫地","好","一款","独立","年轻","无疑","上","而言","加上","发展","大","频繁","。","很","游戏","元素","不多","更","张图","索引","学习","同理","大部分","这里","扩展","活跃度","使命","参考资料","成本","回到","ros","问答","电路","此后","绝对","条","几年","爆款","特性","更新","这个","投资","能够","近几年","挑战","做出","做法","想法","标准","传感","不要","控制","围绕","后期","这款","回答","两年","国家","作为","是","answers","包","代","不开","总体","都","斯坦福","基于","情况","配合","性能","局限","发表","快速","所有人","官方","强悍","时代","维基百科","统计","willow","神秘","智慧","智能化","有没有","版本","结晶","过程","”","这位","原本","实验","本身","基本上","其实","真正","在","然后","来到","通常","的","虽好","许可证","什么","linux","就","google","已有","了解","index","采用","原型","疫情","100","记录","人形","复杂","率","全人","研究","多万","世界","百万","进步","成果","日常","本","内容","野蛮","开发","零","kinect","一定","适用","聊天","浏览量","月底","关键","微软","最佳","进化","体感","要","图中","已经","团队","被","举办","资金","来自","操作系统","之王","名称","逐渐","神兵","比如","或者","“","近两年","清晰","居","才","5","一届","机器人","低","又","移动机器人","技术","受限","研发","曲线","组成","历经","水下","助推","玩耍","笔记本电脑","开始","效果","底盘","每年","涉及","world","资源","从中","各种各样","动机","还是","上去","新增","主阵地","向","充足","ros2","分钟","引擎","价格","确定","同样","主要","大大","等","等等","简单","嵌入式","收拾","创始","问题","长远","上市","看中","臂","移动","人","不断","身影","越来","毛巾","开源","最后","游戏机","统统","商业化","成为","深知","几个","方法","大家","便宜","后续","新鲜事","肩负","限于","造","a","全","时候","很多","同时","轰动","各样","欢迎","想到","为","做成","感器","之内","随着","其他","中","柔性","很快","让","多媒体","叫做","努力","第一次","可以","稳定","出来","只","说明","得到","conference","你","成熟","一步","掀起","传感器","效率","这些","改为","代表","物体","/","2007","外观","只想","更为","做饭","别人","四项","熨烫","给","论坛","？","古月","增长速度","熟悉","高度","活动","友好","那","根据","页面","尝试","此时","线上","全球化","远","风险","据库",".","棒","personal","长期","第一","将","访问","直到","一大笔","功能","所学","一群","当时","2011","人数","推出","版","明智","百科全书","了","工具","地域","用户","大笔","存储","向前","每","领域","知识","事情","大有可为","一大笔钱","几乎","这","以","采购","应用软件","分享","humble","受限于","关于","绝大","基本","创意","却步","一堂","资本","一系列","我们","选择","今日","重要","同学","大量","给出","汽车","笔记本","年底","暴露","20","一个","garage","来","打","使用","媒体","也","来讲","嘉宾","只要","社区","万万","个","来看","支持","通信","起","源码","正在","时间","时间轴","认识","数据库","普及","各项","工程","ros1","以叠","站","促使","正式","设计","时至今日","不到","同年","更好","数据","全新","风险投资","针对","一下","部分","增长","做到","嵌入","面纱","2014","类似","快","机器","标志","一次","生态系统","；","完全","乐意","革命","浏览","当初","干","板块","跑","维基","讨论","packages","原因","之上","查看","起点","部件","接下","趋势","横跨","电脑","望而却步","正如","不是","案例","一大步","带领","轮子","希望","齐聚一堂","左右","一系","利器","提出","就是","掌握","还","非常","方向","头发","介于","而且","体系","场景","虽然","网站","人才","迅猛","，","下载","光靠","25","项目","斯坦福大学","ubuntu","五年","不想","pr2","下","零部件","最高","程度","跟随","因","成功","上图","向前走","离不开","说干就干","自己","system","看到","度","缩短","价格便宜","阵地","有人","—","大学","课程","进入","进行","接下来","两个","踏上","不同","着","为什么","迎来","商业","由","xbox","一大","不下","多年","啦","用于","详细","搜索","发布","注意","台球","一套","一起","turtlebot","系列","生态系","不断更新","局限性","许可","如何","普遍","加","教程","operating","精致","github","操作","新","图","对","总而言之","没想到","专业","初期","大会","2017","泡泡","现在","全球","推动","终于","怀揣","模块","总称","肩负着","软件","圈","于","大部","windows","同一","和","应用","robot","做","工程师","实验室","美妙","每个","2012","之","完成","绝大部分","一切","并","这群","迭代","层面","工业","尽量","各种","手机","居高不下","答案","把","150","复合","用","这一波","一家","万","万人","核心","多项","量级","可能","无论","、","2015","浪潮","容易","巨大","多","四大","解决","特点","：","呢","一样","一些","从","实现","2022","2","巨人","入门教程","到","得以","其次","如果","衣服","整合","帮助","剪头发","提取","而","没想","简称","访问量","还有","繁荣","没有","推进","视频","服务","公司","方式","几百","陪","有","维基百","所有","几百万","第一个","80","该","广泛","他们","复用","沉淀","而生","提高","人类","认识一下","不","开发工具","wiki","差不多","不乏","模块化","推荐","正式版","肩膀","提问","不仅","找到","一段","诞生","全人类","可为","首先","为例","重量","机械","此","起来","福大","苹果"," ","重量级","大步","制造","个人","肯定","限性","相关","为了","甚至","这是","roscon","至今","discourse","通过","无聊","既然","120","无论是","产品","活跃","经历","自身","亚马","整理","c","款","真的","多媒体系统","会","早期","动力","平台","最为","亚马逊","软件系统","月","250","框架","家","intel","加快","有志","讲解","生态","笔记","40","b","下来","前","跨平台","联合","木头","对于","百科","投了","重新","变为","参考","任何","提供","高效","宽松","因为","具备","以上","次数"],"title":"ROS和ROS2是什么","title_tokens":["是","ros","ros2","什么","和"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#rosros2","text":"智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。","text_tokens":["量级","系统","对","就","带领","我们","是","提出","。","巨大","接下来","方向","重量","机器人","掀起","呢","又","智能","大家","什么","一下"," ","重量级","面纱","了","场景","ros","全","机器","，","应用","开发","时代","一起","神秘","下来","向","？","嘉宾","智能化","ros2","进化","高度","这","那","这位","挑战","中","正在","的","操作","接下","认识","而生","操作系统","认识一下"],"title":"ROS/ROS2是什么","title_tokens":["/","是","ros","ros2","什么"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人—— PR2 ，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。","text_tokens":["图","所以","系统","或者","一系列","我们","却","处理","重要","专业","才","给出","初期","青年","洗衣","5","机器人","低","学术","推动","智能","技术","软件","圈","一个","组成","这样","同一","玩耍","和","叠","应用","打","也","做","涉及","robot","从中","实验室","越来越","年","只要","完成","其中","充足","分钟","一切","并","个","同样","层面","但是","等","手机","答案","收拾","用","问题","一款","独立","上","可能","、","人","容易","。","以叠","很","多","越来","毛巾","设计","最后","更","不到","成为","深知","：","呢","大家","针对","一些","实现","2","ros","得以","如果","类似","衣服","机器","电路","帮助","时候","很多","剪头发","轰动","条","一次","没有","这个","服务","干","之内","中","做出","柔性","陪","有","所有","想法","部件","标准","很快","他们","横跨","而生","不","可以","第一次","出来","只","后期","不是","这款","一大步","是","你","一系","就是","找到","诞生","还","代","非常","头发","都","为例","斯坦福","机械","基于","福大","效率","苹果","物体","2007","而且"," ","外观","性能","大步","个人","肯定","做饭","所有人","别人","虽然","熨烫","，","甚至","强悍","光靠","？","有没有","斯坦福大学","那","不想","pr2","实验","无聊","零部件","既然","在","因","向前走","的","说干就干","自己","尝试","看到","什么","此时","整理","就","有人","—","personal","大学","真的","款","原型","第一","100","平台","复杂","功能","研究","为什么","一群","软件系统","当时","框架","家","了","有志","一大","用于","开发","台球","一套","聊天","一起","向前","系列","事情","联合","木头","对于","如何","这","要","应用软件","图中","精致","已经","高效","团队","分享","因为","操作","资金","操作系统"],"title":"ROS的诞生","title_tokens":["诞生","ros","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_1","text":"ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称 ROSCon ，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。","text_tokens":["所以","系统","我们","近两年","没想到","重要","大会","5","一届","机器人","笔记本","现在","全球","推动","2017","年底","暴露","2010","终于","肩负着","受限","软件","圈","于","大部","一个","garage","历经","助推","笔记本电脑","开始","直接","和","使用","底盘","应用","robot","也","每年","world","做","各种各样","越来越","年","每个","2012","万万","其中","单独","绝大部分","ros2","价格","确定","这群","迭代","支持","但是","大大","各种","开发者","等","起","时间","居高不下","时间轴","步伐","把","年轻人","扫地","普及","创始","问题","一家","一款","年轻","加上","发展","看中","大","、","2015","人","。","多","游戏","身影","正式","越来","更","开源","设计","游戏机","成为","同年","大部分","这里","全新","一样","便宜","风险投资","部分","使命","从","肩负","增长","限于","2022","成本","回到","到","ros","2014","类似","机器","此后","标志","提取","而","各样","没想","几年","简称","爆款","想到","为","感器","这个","投资","公司","服务","当初","能够","随着","原因","中","几百","之上","所有","几百万","起点","第一个","很快","让","该","叫做","传感","他们","电脑","望而却步","可以","控制","稳定","不乏","后期","出来","conference","两年","正式版","是","齐聚一堂","不仅","提出","诞生","成熟","介于","斯坦福","传感器","福大","改为","只想","2007"," ","局限","快速","个人","限性","给","官方","，","为了","时代","willow","这是","roscon","项目","斯坦福大学","ubuntu","版本","过程","熟悉","五年","pr2","原本","下","真正","在","跟随","成功","的","经历","虽好","自己","system","线上","亚马","风险","就","价格便宜","—","款","大学","进入","了解","采用","原型","疫情","会","早期","长期","第一","直到","进行","一大笔","亚马逊","着","功能","迎来","商业","2011","推出","xbox","版","百万","了","intel","加快","一大","不下","多年","本","讲解","大笔","野蛮","开发","发布","注意","kinect","笔记","适用","每","turtlebot","前","月底","关键","微软","局限性","体感","一大笔钱","这","投了","变为","教程","operating","已经","被","分享","因为","团队","操作","受限于","绝大","humble","举办","来自","却步","操作系统","一堂","资本","名称","逐渐"],"title":"ROS的发展","title_tokens":["发展","ros","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_2","text":"ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["比如","系统","对","机制","“","我们","今日","机器人","汽车","模块","全球","怀揣","移动机器人","智能","总称","技术","软件","一个","目标","组成","windows","水下","这样","来","直接","和","使用","应用","媒体","也","做","来讲","动机","还是","上去","各种各样","新增","越来越","之","社区","ros2","引擎","并","工业","集合","支持","尽量","通信","各种","时间","把","复合","简单","嵌入式","一家","长远","核心","多项","上","上市","发展","无论","臂","、","移动","ros1","站","身影","。","多","促使","四大","越来","更","时至今日","最后","设计","统统","开源","成为","同理","特点","这里","：","大家","从","实现","巨人","做到","部分","嵌入","造","到","ros","a","机器","整合","很多","同时","各样","生态系统","；","完全","做成","特性","繁荣","推进","这个","公司","跑","中","有","做法","标准","多媒体","广泛","他们","不要","复用","沉淀","正如","提高","人类","开发工具","可以","围绕","模块化","不是","案例","肩膀","轮子","是","就是","还","全人类","非常","一步","都","机械","此","这些","代表"," ","制造","体系","快速","别人","人才","给","，","智慧","至今","智能化","结晶","”","友好","那","本身","在","无论是","产品","通常","向前走","的","自己","许可证","看到","自身","linux","全球化","远","c","就","缩短","已有","多媒体系统","会","将","平台","人形","全人","率","着","功能","由","商业","明智","家","进步","了","工具","成果","用于","生态","零","开发","一起","领域","向前","b","下来","商业化","跨平台","生态系","许可","这","普遍","以","重新","采购","已经","分享","宽松","被","具备","创意","新"],"title":"ROS的特点","title_tokens":["特点","ros","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_3","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。","text_tokens":["比如","org","总而言之","新鲜","我们","万左右","选择","清晰","重要","排名","机器人","全球","现在","研发","20","曲线","一个","大部","助推","和","使用","应用","也","资源","越来越","每个","社区","速度","其中","绝大部分","15","来看","上边","各种","开发者","等","源码","正在","等等","150","算是","数据库","这一波","问题","万","万人","核心","各项","无疑","上","而言","发展","大","、","频繁","浪潮","人","。","多","很","不多","元素","张图","越来","索引","学习","成为","这里","数据","：","呢","几个","大家","大部分","活跃度","新鲜事","从","增长","部分","到","ros","问答","如果","快","整合","机器","很多","绝对","几年","；","乐意","访问量","革命","浏览","方式","维基","讨论","近几年","packages","其他","中","维基百","有","查看","80","趋势","wiki","差不多","不","可以","说明","得到","回答","国家","作为","是","左右","answers","你","就是","提出","包","希望","利器","可为","非常","总体","都","起来","这些","情况","代表"," ","发表","更为","快速","网站","四项","给","迅猛","，","相关","论坛","下载","维基百科","统计","这是","？","25","discourse","增长速度","活动","通过","基本上","其实","在","最高","程度","根据","活跃","上图","的","页面","看到","什么","度","据库","就",".","棒","index","两个","会","动力","访问","最为","记录","不同","功能","月","250","多万","人数","了","日常","地域","本","用户","开发","发布","40","存储","每","浏览量","大有可为","最佳","百科","这","加","参考","教程","任何","已经","关于","基本","以上","绝大","新","次数","神兵"],"title":"ROS的社区","title_tokens":["社区","ros","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#_1","text":"关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["我们","入门","重要","居","同学","大量","机器人","泡泡","技术","全书","托管","一个","大部","开始","和","使用","效果","也","工程师","之旅","美妙","资料","主阵地","社区","代码","绝大部分","ros2","主要","好","问题","万人","工程","不断","。","解决","开源","最后","学习","成为","这里","大部分","更好","几个","方法","大家","后续","扩展","部分","从","参考资料","入门教程","ros","其次","机器","欢迎","还有","更新","这个","视频","板块","中","有","所有","努力","推荐","可以","提问","作为","是","你","找到","掌握","一段","还","首先","不开","都","配合"," ","网站","，","古月","项目","来到","然后","在","120","离不开","的","阵地","—","google","课程","会","将","踏上","最为","所学","世界","百科全书","工具","本","啦","详细","内容","搜索","开发","一定","一起","知识","不断更新","百科","几乎","这","要","参考","教程","提供","github","分享","关于","绝大","之王"],"title":"参考资料","title_tokens":["参考","资料","参考资料"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/","text":"ROS2对比ROS1 在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。 ROS1的局限性 首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。 全新的ROS2 ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。 ROS2 vs ROS1 系统架构 在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。 DDS通信 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。 核心概念 ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。 编码方式 再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。 命令行 最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随教程，你就会慢慢理解这些特性。","text_tokens":["市场","所以","系统","编译器","机制","处理","格局","python","唯一","编程语言","学术","智能","分解","topic","目标","体验","家庭","这样","接入","直接","可靠性","越来越","其中","代码","通信接口","）","更具","驾驶","去","但是","轻松","学术研究","开发者","tcp","1ms","继续","编写","好","依赖","一款","独立","总体而言","类型","上","可选","而言","发展","大","以及","优化","频繁","。","算力","借鉴","更","张图","之间","学习","看看","大部分","这里","上手","使命","编译","成本","更换","ros","请","名字","动力学","批量","流程","售价","特性","发成","这个","深入","例子","能够","陆续","交给","他","挑战","生活","概念","标准","接收","不要","小","控制","专注","命令","是","两者","灵活","内","只能","地方","走","能","总体","都","面临","基于","5g","性能","至关","局限","或","信息","主角","一本","存在","时代","middleware","精力","完","彼此","迈过","一行","版本","过程","配置","原本","干掉","然后","左侧","真正","在","其实","封装","的","可靠","什么","尽力","linux","最早","amr","有且","就","变革","物","了解","涌现","诸多","按照","受制","不太","复杂","提","率","管理","研究","多功能","国际标准","看","是因为","百万","android","推倒","系统工程","本","单兵作战","一定","开发","不难","适用","调试","由于","很大","建筑","实时","干扰","最佳","全部","图片","似乎","要","翻地","已经","周期","操作系统","对比","级别","名称","比如","意义","或者","一旦","控制器","语言","下要","诟病","机器人","不够","现有","主","研发","开发成本","比","能力","开始","要求","二种","一种","尤其","高","资源","稳定性","各种各样","担忧","信号","充足","ros2","发现","新一代","驱动","适合","印象","同样","可读","安装","几点","主要","有限","一致","等","表示","100ms","一团","简单","嵌入式","自","问题","长远","方案","应该","计算","盖","不断","越来","开源","最后","常用","历史","方法","大家","修改","后续","联网","解密","收","最终","强壮","全","之后","很多","时候","同时","各样","丰富","master","高昂","只有","做成","为","另","搭载","满足","设备","运算","良好","随着","不爽","分散","其他","中","实时性","听说","电脑系统","环境","暂且","新版","让","叫做","所示","纠结","相对","指挥","可以","稳定","真实","丢","说明","run","最","你","rostopic","不会","哪些","力学","一步","大幅","发布者","企业","这些","/","一页","给","第二","项目管理","经常","除此之外","？","协作","远比","熟悉","应用层","整体","它","那","对系统","属性","得","需求","阶段","移植性","单兵","不难理解","再","天翻地覆","一代","共享","过来","风险","第二个","加密","中间","如","出错","批量生产","第二代","第一","将","二代","colcon","功能","共享内存","便于","了","运动学","解算","安全","工具","定性","无法","部署","用户","dds","每","面对","相比","总之","明显","适配","复杂度","部头","成","某","这台","开发方式","用到","几乎","这","角色","体现","微控制器","绝大","基本","mcu","消费市场","我们","选择","重要","大量","汽车","图像","自家","举","至关重要","装修","变化","而已","一个","毛坯","来","使用","也","会成","作战","来讲","接近","基础","乱麻","ceo","只要","运行","社区","完善","来看","产品化","支持","通信","中间层","伙伴","写","时间","层","简单明了","python3","省略","普及","之外","ament","一团乱麻","学","基本保障","工程","听","理解","不断涌现","升级","角度","ros1","带来","颠覆","rosbuild","历史使命","受制于","接触","设计","打成","c++","更好","数据","全新","陌生","换成","除此","针对","部分","嵌入","一下","做到","从而","时","类似","机器","自动","颠覆性","改","保留","；","担心","当","生产","调用","只是","房子","里","不再","之上","接口","软件开发","稍安","opensplice","但","小伙","电脑","程序","不是","小伙伴","macos","当然","带领","依然","过","就是","发送","还","课时","交付","非常","可读性","分布","揭秘","分布式","场景","原有","虽然","理器","移植","之前","勿躁","，","fastrtps","底层","项目","差异","rosrun","pr2","大部头","下","跟随","成功","编码","选项","自己","个体","标准化","切换","毛坯房","内存","大致","—","课程","以下","行为","进行","两个","雷达","行人","突然","不同","致使","即可","工作","为什么","进程","商业","怎样","另外","策略","实力","黑客","命令行","工作站","编码方式","啦","用于","完整","集成","wifi","发布","注意","一团乱","一套","与","最新","架构","消费","交道","国际","局限性","条件","如何","结合","三个","教程","想要","翻新","幅度","厂商","消失","可移植","操作","各位","千差万别","不用","编译系统","面向","走向市场","udp","建立","推倒重来","指定","广泛应用","初次","对","保证","可移植性","全球","怀揣","软件","于","大部","windows","和","应用","库会","做","具体","走向","搬","较","更加","每个","通用性","api","通信协议","完成","绝大部分","并","层面","尽量","各种","更接","到底","手机","答案","连接","把","布式","是从","只不过","保障","用","一家","内部","核心","可能","上升","无论","、","对象","多","巨大","解决","先进","：","呢","一样","一些","从","实现","下边","含义","足够","没","到","借助","不过","如果","减少","右侧","产品开发","面向对象","链接","性","而","方便","慢慢","简称","还有","变得","可选项","没有","运动","服务","强","通用","公司","方式","是否","需要","延迟","客户端","符合","几百","有","节点","所有","几百万","第一个","该","放在","广泛","他们","难度","复用","考虑","厂家","提高","不","后","先","编程","么","间层","不仅","找到","定义","rmw","诞生","首先","还会","不能","重来","discovery","成功经验","客户"," ","管理器","肯定","发","限性","网络","经验","最大","出现","rtos","迁移","为了","甚至","协议","相关","vs","二个","测试","细节","通过","常","过去","加入","产品","大幅度","以下几点","也许","catkin","安全性","网络连接","一边","导致","话题","款","航天","完整性","会","动力","平台","最为","软件系统","总结","之初","一一","框架","打交道","讲解","切记","前方","道坎","跨平台","（","宕机","why","对于","未来","重新","有线","不好","提供","任何","除了","多个","因为","入侵","具备","以上","第二种","启动","确实"],"title":"ROS2对比ROS1","title_tokens":["ros1","对比","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2ros1","text":"在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。","text_tokens":["上","就","么","大","ros1","我们","你","过","就是","。","多","第二代","能","学习","二代","看看","变化","从"," ","或","一个","ros","之前","，","使用","和","第二","做","？","其中","ros2","这","来看","听说","在","有","不","到底","的","也许","对比","名称"],"title":"ROS2对比ROS1","title_tokens":["ros1","对比","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros1","text":"首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。","text_tokens":["市场","比如","或者","系统","我们","处理","保证","机器人","汽车","不够","学术","软件","一个","目标","大部","家庭","这样","能力","和","应用","也","资源","具体","作战","担忧","可靠性","走向","更加","运行","完成","充足","ros2","绝大部分","新一代","适合","并","来看","驾驶","支持","通信","但是","各种","学术研究","有限","时间","答案","连接","嵌入式","普及","用","问题","一款","独立","内部","类型","上","不断涌现","发展","计算","ros1","不断","。","算力","设计","先进","大部分","数据","：","呢","历史","一些","从","部分","最终","针对","嵌入","足够","成本","ros","类似","机器","自动","；","批量","高昂","售价","做成","没有","生产","搭载","服务","设备","运算","良好","随着","他","中","有","第一个","让","小","不","可以","丢","当然","是","就是","找到","诞生","只能","首先","地方","都"," ","虽然","主角","网络","出现","，","为了","甚至","？","它","pr2","那","原本","在","产品","的","可靠","自己","单兵","网络连接","什么","天翻地覆","一代","最早","风险","就","—","款","航天","课程","批量生产","会","第一","涌现","平台","复杂","致使","工作","为什么","研究","是因为","实力","框架","黑客","了","工作站","单兵作战","用于","开发","由于","实时","why","这台","条件","干扰","这","似乎","要","翻地","有线","已经","因为","入侵","具备","绝大","不用","走向市场","级别"],"title":"ROS1的局限性","title_tokens":["ros1","的","局限","局限性","限性"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2","text":"ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。","text_tokens":["市场","所以","系统","编译器","机制","格局","python","智能","分解","体验","这样","直接","越来越","代码","）","更具","驾驶","去","但是","开发者","1ms","继续","编写","好","一款","独立","上","大","以及","优化","。","算力","借鉴","更","之间","使命","编译","ros","动力学","流程","特性","这个","能够","挑战","生活","标准","控制","是","内","能","都","面临","性能","时代","原本","真正","在","的","可靠","尽力","linux","amr","就","变革","诸多","受制","复杂","提","管理","android","推倒","系统工程","一定","开发","调试","很大","建筑","实时","最佳","全部","要","已经","周期","操作系统","比如","或者","一旦","控制器","语言","下要","机器人","研发","比","要求","二种","一种","尤其","稳定性","各种各样","信号","ros2","发现","适合","几点","等","100ms","简单","问题","长远","方案","盖","越来","历史","方法","大家","修改","后续","解密","最终","强壮","全","很多","时候","同时","各样","master","为","搭载","满足","中","实时性","电脑系统","环境","新版","让","叫做","纠结","相对","可以","稳定","说明","不会","力学","这些","给","项目管理","第二","经常","？","协作","远比","它","那","对系统","得","需求","阶段","风险","加密","出错","第一","colcon","了","运动学","解算","安全","工具","定性","无法","部署","dds","面对","相比","明显","这","角色","体现","微控制器","基本","mcu","消费市场","我们","选择","大量","汽车","装修","变化","一个","毛坯","使用","也","基础","运行","来看","产品化","通信","python3","ament","基本保障","工程","升级","ros1","颠覆","rosbuild","历史使命","受制于","设计","打成","c++","数据","全新","针对","一下","做到","类似","机器","自动","颠覆性","保留","只是","房子","不再","之上","接口","但","电脑","不是","macos","就是","发送","还","课时","分布","分布式","场景","原有","虽然","理器","移植","，","项目","差异","下","成功","个体","自己","标准化","毛坯房","以下","课程","行为","进行","两个","行人","不同","工作","怎样","策略","黑客","完整","用于","wifi","与","最新","架构","消费","如何","结合","翻新","操作","千差万别","不用","编译系统","推倒重来","对","怀揣","软件","于","windows","和","应用","具体","走向","较","更加","通用性","api","完成","并","层面","尽量","各种","手机","连接","把","布式","保障","用","可能","无论","、","多","巨大","：","呢","实现","到","借助","链接","性","方便","没有","运动","强","通用","需要","有","节点","所有","第一个","他们","考虑","不","后","不仅","还会","不能","重来","成功经验"," ","管理器","肯定","经验","网络","rtos","出现","为了","甚至","测试","细节","过去","产品","以下几点","catkin","安全性","网络连接","导致","完整性","会","动力","平台","之初","框架","前方","跨平台","（","宕机","未来","重新","不好","除了","提供","任何","入侵","具备","第二种"],"title":"全新的ROS2","title_tokens":["全新","的","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2-vs-ros1","text":"","text_tokens":[],"title":"ROS2 vs ROS1","title_tokens":["vs","ros1"," ","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_1","text":"在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。","text_tokens":["比如","系统","机制","我们","重要","大量","图像","至关重要","变化","而已","一个","windows","这样","开始","和","应用","库会","也","会成","乱麻","ceo","更加","通信协议","完善","ros2","发现","通信接口","驱动","印象","并","安装","主要","通信","中间层","tcp","写","层","连接","简单明了","把","是从","只不过","一团","好","简单","依赖","自","一团乱麻","听","理解","可选","上","应该","ros1","频繁","、","。","张图","接触","学习","数据","方法","大家","一样","后续","下边","从而","操作系统","更换","ros","不过","如果","类似","右侧","请","名字","时候","很多","而","master","只有","变得","可选项","这个","深入","公司","调用","方式","需要","里","中","接口","客户端","节点","有","所有","标准","让","但","接收","指挥","不","可以","稳定","程序","先","macos","间层","是","最","两者","就是","找到","过","内","哪些","走","都","discovery","基于","这些","客户","至关"," ","管理器","肯定","信息","理器","rtos","，","协议","彼此","底层","应用层","整体","那","它","通过","左侧","在","得","封装","的","选项","不难理解","再","共享","linux","内存","有且","就","大致","—","了解","中间","进行","会","雷达","突然","不太","将","复杂","管理","进程","看","共享内存","另外","框架","了","打交道","开发","发布","注意","一团乱","一套","dds","不难","明显","架构","交道","成","这","提供","角色","消失","操作","udp","建立","对比"],"title":"系统架构","title_tokens":["系统","架构"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#dds","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。","text_tokens":["比如","所以","系统","我们","选择","诟病","机器人","唯一","自家","举","变化","软件","开发成本","于","一个","目标","这样","接入","高","应用","一种","也","做","来讲","更加","每个","只要","通信协议","社区","代码","ros2","并","层面","安装","轻松","通信","各种","tcp","等","写","把","省略","好","简单","之外","用","问题","一家","应该","ros1","频繁","、","带来","优化","。","多","解决","更","设计","开源","这里","数据","一样","收","联网","一些","实现","部分","成本","不过","ros","更换","时","如果","类似","减少","产品开发","机器","丰富","master","改","简称","还有","为","另","发成","这个","满足","例子","能够","是否","交给","不爽","延迟","中","接口","听说","其他","符合","标准","让","该","opensplice","放在","广泛","纠结","复用","厂家","提高","不","可以","程序","稳定","先","专注","丢","不是","么","当然","是","最","就是","灵活","定义","rmw","交付","都","基于","5g","这些","/","性能"," ","肯定","场景","发","移植","最大","给","，","fastrtps","为了","协议","middleware","精力","完","？","底层","一行","版本","熟悉","配置","属性","常","然后","其实","在","加入","得","产品","的","需求","切换","再","过来","就","物","加密","按照","会","不同","复杂","率","功能","软件系统","商业","国际标准","了","无法","部署","用户","开发","dds","适用","每","相比","总之","适配","复杂度","国际","某","对于","如何","这","三个","要","重新","除了","提供","想要","多个","厂商","基本","不用","udp","指定","广泛应用"],"title":"DDS通信","title_tokens":["通信","dds"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_2","text":"ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。","text_tokens":["小伙伴","应该","意义","就","第二个","以及","ros1","依然","我们","课程","过","。","会","非常","学习","这里","全球","陌生","方法","大家","这些","从","部分","一一"," ","便于","含义","百万","了","到","ros","如果","讲解","本","迁移","，","很多","应用","开发","存在","也","第二","和","保留","使用","担心","二个","没有","其中","方式","熟悉","开发方式","ros2","几乎","并","一致","尽量","中","伙伴","几百","开发者","有","已经","在","几百万","概念","的","各位","广泛","小伙","不用","不"],"title":"核心概念","title_tokens":["核心","概念"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_3","text":"再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。","text_tokens":["我们","语言","可移植性","机器人","编程语言","软件","一个","大部","来","和","也","来讲","接近","具体","搬","ros2","发现","可读","同样","更接","写","用","学","总体而言","而言","角度","ros1","对象","。","多","更","看看","学习","更好","方法","大家","后续","一些","从","实现","不过","机器","之后","面向对象","特性","当","方式","中","暂且","软件开发","稍安","所示","难度","不要","提高","真实","程序","编程","带领","是","一步","总体","发布者","可读性","企业"," ","一页","移植","一本","勿躁","，","迈过","版本","项目","过程","大部头","在","编码","的","移植性","一边","再","就","课程","如","两个","会","切记","开发","发布","道坎","部头","用到","图片","如何","这","教程","具备","可移植","操作","面向","确实"],"title":"编码方式","title_tokens":["编码方式","编码","方式"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_4","text":"最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随教程，你就会慢慢理解这些特性。","text_tokens":["比如","初次","对","我们","选择","变化","现有","主","topic","一个","和","一种","也","做","ros2","印象","通信","表示","把","好","之外","独立","核心","理解","而言","上升","ros1","。","更","最后","常用","：","大家","后续","除此","换成","上手","没","ros","如果","master","慢慢","特性","陆续","分散","中","节点","有","所有","概念","难度","相对","控制","命令","编程","run","是","rostopic","你","就是","大幅","都","这些","揭秘"," ","，","相关","除此之外","rosrun","下","干掉","在","跟随","大幅度","的","再","就","大致","—","话题","会","最为","功能","即可","多功能","总结","命令行","了","工具","啦","集成","开发","dds","每","某","教程","幅度","以上","启动","对比"],"title":"命令行","title_tokens":["命令行","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/","text":"ROS2安装方法 本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。 Linux系统简介 时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。 Ubuntu系统简介 我们后续课程使用到的Linux发行版就是 ubuntu系统 。 Ubuntu诞生于2004年10月份， 每六个月发布一个新版本 ，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。 Ubuntu虚拟机安装 虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下： 1. 下载系统镜像 下载链接： https://ubuntu.com/download/desktop 2. 在虚拟机中创建系统 3. 设置虚拟机硬盘大小 4. 设置Ubuntu镜像路径 5. 启动虚拟机 6. 设置用户名和密码 7. 等待系统安装 8. 完成安装 Ubuntu系统安装好后，大家可以先随意使用熟悉一下。 ROS2系统安装 接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下： 1. 设置编码 $ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8 2. 添加源 $ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844 3. 安装ROS2 $ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop 4. 设置环境变量 $ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。 ROS2示例测试 为了验证ROS2安装成功，我们可以通过以下示例进行测试。 示例一：命令行示例 先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。 示例二：小海龟仿真示例 再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["org","所以","系统","一石激起千层浪",">","唯一","智能","虚拟机","动手","apt","2004","talker","这样","keyrings","直接","越来越","资料","年","其中","代码","精神","locale","量","千层","但是","之一","开发者","紧随","发行","任务","会加","好","依赖","lang","上","加上","发展","大","。","很","小海龟","更","发扬","多人","这里","connect","by","各个","回到","ros","名字","请","浏览器","绝对","list","大小","更新","这个","芬兰","他","概念","标准","命令","控制","两年","10","是","经典","都","提交","情况","性能","$","1991","或","快速","字符","1","文件","版本","过程","os","”","可","原本","在","listener","的","什么","linux","维护","服务器","就","占据","已有","实践","可视","了解","https","采用","务器","echo","简介","不太","key","管理","lsb","示例","本","一直","一定","开发","二句","适用","擦掌","bash","终端","比较","出于","变动","步骤","随意","奥义","已经","密码","export","基本相同","操作系统","发挥","比如","多用","或者","何人","“","收费","]",")","传输","通讯","六个月","5","相同","一般","机器人","摩拳擦掌","download","bashrc","技术","sudo","合适","dpkg","sources","开始","效果","一种","每年","world","各种各样","html","还是","8","热爱","ros2","适合","安装","主要","有限","等","表示","gen","衡量","等等","第二句","gpg","share","路径","问题","唯一标准","bug","应该","地址","计算","一","3","越来","开源","正常","成为","常用","to","方法","大家","后续","联网","关注","小海","镜像","之后","update","很多","时候","同时","各样","master","源","_","main","先要","算机","之内","其他","中","出","个人爱好","环境","让","中将","叫做","第一次","可以","稳定","turtle","只","说明","&&","run","最","你","成熟","尚","发布者","企业","代表","源代码","/","codename","~","人工智能","强大","ubuntu20.04","给","us","除此之外","第二","utf","普通","？","打包","虚拟","真器","熟悉","好者","22","顺序","试试","操作界面","vmware","再","guyuehome","此时","install","千层浪","第二个",".","介绍","添加","一应","上下","长期","第一","林纳斯","将","一位","动手做","免费","功能","硬件","互联网","版","海龟","了","建议","按键","用户","验证","all","dds","每","领域","准备","\"","workstation","成","etc","这","以","应用软件","户名","分享","centos","humble","关于","基本","发行版","影响","创建","构建","等待","我们","选择","重要","月份","大量","这套","www","编辑","环境变量",":","一个","来","使用","也","http","来讲","传播","运行","指标","个","支持","通信","蕴藏","至此","时间","之外","并且","architecture","内核","当中","升级","字符串","tee","|","--","接触","设计","点击","数据","修复","除此","一下","吸引","模式","用户名","时","快","机器","应用程序","光大","一次","其他软件","任何人","浏览","release","packages","nodes","热情","之上","软件开发","接下","=","但","多用户","7","电脑","程序","仿真","技术实力","多任务","macos","前先要","依然","左右","就是","en","还","编辑器","俱全","指令","turtlesim","6","unix","原有","虽然","场景","移植","之前","迅猛","，","下载","keyring","界面","底层","ubuntu","分别","下","hello","命名","成功","吧","编码","说干就干","自己","设置","看到","py","[","大学生","opt","—","failed","大学","课程","以下","进行","接下来","两个","一句","不同","背景","工作","反馈","第一句","商业","最好","另外","实力","命令行","啦","如遇","持续","发布","一套","与","一起","操作方法","如何","后缀","教程","usr","爱好","想要","操作","本相","新","爱好者","学生","准确","每隔","原理","对","紧随其后","一应俱全","rosdistro","raw","保证","现在","优先","行列","仿真器","软件","source","于","windows","和","应用","(","做","products","乐于","ubuntu22.04","外衣","完成","提到","并","节","各种","d","决定","看出","把","archive","开放","人工","核心","位置","其后","者","可能","无论","、","desktop","37844","多","如下","setup","数字","并用","变量","teleop","：","呢","一样","一些","叫","实现","2022","从","2","demo","到","如果","可视化","locales","真理","编号","链接","试一试","上层","4","githubusercontent","没有","通用","服务","公司","硬盘","print","是否","运动","需要","兼容","检验","有","节点","互联","lc","第一个","cpp","该","发扬光大","华丽","考虑","不","后","先","其","蓝色","upgrade","不仅","好后","诞生","上下左右","伴随","报错","为例","键盘","起来","deb"," ","绑定","六个","个人","激起","环境变","网络","最大","出现","目前","甚至","为了","com","二个","测试","node","signed","激发","通过","evaluation","加入","无论是","ssl","redhat","curl","自行","-","o","04","会","最为","月","18","二","lts","讲解","dev","探索","下来","订阅","fedora","pro","未来","重新","参考","除了","计算机","任何","放到","多个","因为","null","启动","gnupg","arch"],"title":"ROS2安装方法","title_tokens":["安装","方法","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2","text":"本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。","text_tokens":["系统","前先要","—","我们","最","了解","。","重要","一下","本","，","一种","一起","底层","先要","ros2","安装","节","的","操作","操作系统","linux"],"title":"ROS2安装方法","title_tokens":["安装","方法","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#linux","text":"时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。","text_tokens":["比如","多用","所以","系统","原理","何人","或者","对","我们","收费","重要","一石激起千层浪","大量","这套","相同","唯一","现在","一般","技术","动手","行列","软件","一个","windows","和","使用","应用","也","做","每年","乐于","来讲","传播","各种各样","越来越","年","外衣","其中","热爱","代码","指标","ros2","提到","适合","精神","并","量","安装","千层","支持","主要","有限","之一","各种","开发者","等","决定","发行","时间","任务","衡量","等等","把","依赖","并且","问题","开放","唯一标准","核心","bug","上","应该","内核","当中","计算","发展","大","、","加上","。","多","越来","更","设计","开源","并用","发扬","成为","多人","常用","呢","方法","修复","一样","一些","联网","实现","叫","吸引","回到","模式","到","镜像","名字","可视化","之后","真理","应用程序","很多","各样","光大","任何人","没有","通用","芬兰","公司","算机","这个","服务","需要","他","检验","兼容","其他","中","热情","之上","有","互联","个人爱好","概念","标准","但","发扬光大","叫做","华丽","多用户","不","可以","程序","后","稳定","先","技术实力","多任务","其","macos","是","不仅","最","就是","还","成熟","伴随","尚","都","起来","企业","提交","情况","源代码","性能"," ","绑定","1991","或","个人","快速","unix","原有","激起","强大","虽然","场景","之前","迅猛","，","出现","目前","甚至","给","界面","底层","？","打包","ubuntu","版本","熟悉","过程","激发","通过","原本","好者","下","在","命名","加入","操作界面","的","说干就干","自己","redhat","看到","什么","此时","linux","大学生","维护","服务器","千层浪","就","—","已有","大学","实践","可视","务器","会","林纳斯","不太","一位","不同","动手做","管理","功能","免费","反馈","商业","最好","硬件","互联网","另外","实力","了","讲解","本","用户","开发","一套","适用","与","一起","每","出于","操作方法","成","fedora","这","重新","参考","教程","应用软件","计算机","爱好","任何","已经","放到","分享","centos","操作","基本","本相","基本相同","发行版","爱好者","学生","操作系统","准确"],"title":"Linux系统简介","title_tokens":["简介","linux","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu","text":"我们后续课程使用到的Linux发行版就是 ubuntu系统 。 Ubuntu诞生于2004年10月份， 每六个月发布一个新版本 ，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。","text_tokens":["比如","所以","每隔","系统","紧随其后","一应俱全","我们","选择","重要","月份","通讯","保证","六个月","5","机器人","编辑","智能","摩拳擦掌","虚拟机","优先","合适","软件","于","2004","一个","windows","这样","直接","使用","应用","效果","也","还是","资料","年","ubuntu22.04","其中","个","安装","支持","但是","主要","各种","开发者","等","紧随","发行","表示","看出","会加","好","之外","人工","位置","其后","上","升级","可能","无论","、","。","多","很","接触","更","数字","常用","这里","方法","大家","后续","除此","联网","一下","2022","从","关注","各个","到","时","如果","快","机器","之后","编号","浏览器","时候","绝对","很多","一次","试一试","上层","4","更新","浏览","硬盘","之内","其他","中","出","有","互联","环境","软件开发","让","考虑","电脑","第一次","可以","稳定","只","两年","10","依然","是","你","就是","诞生","还","为例","都","编辑器","俱全","代表","性能"," ","或","六个","人工智能","ubuntu20.04","移植","网络","之前","出现","，","最大","为了","除此之外","文件","普通","虚拟","ubuntu","版本","熟悉","通过","在","无论是","22","顺序","的","自己","自行","再","linux","维护","就","占据","已有","课程","04","介绍","一应","长期","会","进行","第一","不同","免费","月","18","硬件","互联网","版","lts","了","建议","讲解","本","一直","用户","持续","开发","发布","一定","擦掌","每","领域","比较","变动","如何","未来","后缀","以","参考","教程","除了","想要","已经","因为","发行版","影响","新","发挥"],"title":"Ubuntu系统简介","title_tokens":["简介","ubuntu","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu_1","text":"虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下：","text_tokens":["地址","系统","就",".","已有","我们","是","https","。","采用","如下","这里","相同","：","www","工作","虚拟机","大家",":","/","另外"," ","软件","一个","请","开始","啦","，","和","同时","下载","products","html","其他软件","com","准备","虚拟","workstation","运行","完成","步骤","并","pro","安装","其他","evaluation","之上","在","多个","环境","的","操作","让","vmware","叫做","自行","构建","-","可以","后"],"title":"Ubuntu虚拟机安装","title_tokens":["ubuntu","虚拟机","安装","虚拟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1","text":"下载链接： https://ubuntu.com/download/desktop","text_tokens":["下载","：","download",":","/","."," ","com","desktop","https","ubuntu","链接"],"title":"1. 下载系统镜像","title_tokens":["1","下载","系统","."," ","镜像"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2","text":"","text_tokens":[],"title":"2. 在虚拟机中创建系统","title_tokens":["中","在","虚拟机","系统",".","2"," ","虚拟","创建"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3","text":"","text_tokens":[],"title":"3. 设置虚拟机硬盘大小","title_tokens":["虚拟机","大小","."," ","虚拟","设置","3","硬盘"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4-ubuntu","text":"","text_tokens":[],"title":"4. 设置Ubuntu镜像路径","title_tokens":["4","."," ","设置","ubuntu","镜像","路径"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#5","text":"","text_tokens":[],"title":"5. 启动虚拟机","title_tokens":["虚拟机","."," ","虚拟","启动","5"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#6","text":"","text_tokens":[],"title":"6. 设置用户名和密码","title_tokens":["户名","密码","."," ","6","设置","用户名","用户","和"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#7","text":"","text_tokens":[],"title":"7. 等待系统安装","title_tokens":["系统","."," ","7","等待","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#8","text":"Ubuntu系统安装好后，大家可以先随意使用熟悉一下。","text_tokens":["，","先","大家","系统","一下","可以","好后","。","ubuntu","熟悉","随意","安装","使用"],"title":"8. 完成安装","title_tokens":["."," ","8","完成","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_1","text":"接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下：","text_tokens":["就","系统","我们","。","如下","接下来","：","了","到","，","下来","ubuntu","ros2","步骤","安装","中","接下","把","可以"],"title":"ROS2系统安装","title_tokens":["安装","ros2","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1_1","text":"$ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8","text_tokens":["install","&&",".","en","sudo","$"," ","apt","locales","update","us","utf","all","_","8","locale","export","gen","lc","=","lang","-"],"title":"1. 设置编码","title_tokens":["1",".","编码"," ","设置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2_1","text":"$ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844","text_tokens":["org","rosdistro","“","raw","]",")",">","www",":","sudo","apt","source","dpkg","sources","keyrings","(","http","ros2","d","gpg","share","archive","architecture","tee","|","37844","--","to","connect","by","ros","update","list","master","_","main","githubusercontent","release","print","packages","=","&&","报错","deb","codename","/","$"," ","，","keyring","com","ubuntu","signed","os","”","可","ssl","curl","[","guyuehome","-","install","o",".","failed","https","echo","key","lsb","如遇","dev","\"","etc","参考","usr","null","gnupg","arch"],"title":"2. 添加源","title_tokens":["源",".","2"," ","添加"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3-ros2","text":"$ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop","text_tokens":["install","upgrade","desktop","sudo","$"," ","apt","humble","ros","-","update"],"title":"3. 安装ROS2","title_tokens":["."," ","3","ros2","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4","text":"$ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。","text_tokens":["opt","就","系统",".","echo","。","setup",">","bashrc","/","$"," ","source","~","了","ros","，","bash","\"","ros2","安装","中","至此","在","已经","humble","好"],"title":"4. 设置环境变量","title_tokens":["环境变量","环境","4","."," ","设置","环境变","变量"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_2","text":"为了验证ROS2安装成功，我们可以通过以下示例进行测试。","text_tokens":["为了","，","成功","我们","示例","可以","以下","通过","测试","。","进行","ros2","安装","验证"],"title":"ROS2示例测试","title_tokens":["测试","示例","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_1","text":"先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。","text_tokens":["先","者","说明","系统","run","第二个","“","字符串","以下","。","重要","两个","第一","传输","正常","最为","发布者","数据","：","$"," ","demo","一个","talker","如果","来","，","字符","第二","发布","world","dds","终端","_","底层","二个","订阅","没有","是否","ros2","”","通过","通信","nodes","hello","中","在","节点","吧","试试","第一个","的","cpp","listener","启动","py","问题","命令"],"title":"示例一：命令行示例","title_tokens":["：","示例","一","命令行","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_2","text":"再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["蓝色","仿真","上","就","run","—","“","我们","左右","可以","上下","。","如下","小海龟","两个","第一","一句","将","上下左右","经典","key","背景","键盘","teleop","：","第一句","点击","后续","指令","仿真器","示例"," ","$","海龟","turtlesim","小海","一个","ros","来","按键","啦","，","二句","第二","持续","探索","试一试","终端","_","运行","真器","运动","ros2","node","”","分别","奥义","安装","中","蕴藏","教程","在","节点","至此","成功","第二句","的","关于","该","中将","启动","再","turtle","控制"],"title":"示例二：小海龟仿真示例","title_tokens":["：","仿真","示例","二","海龟","小海","小海龟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/","text":"ROS2命令行操作 在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。 Linux中的命令行 类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。 启动方式 回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。 常用命令操作 我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。 ROS2中的命令行 ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。 运行节点程序 想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看节点信息 当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim 查看话题信息 当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose 发布话题消息 想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 发送服务请求 一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\" 发送动作目标 想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\" 录制控制命令 系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["主目录","t","所以","快捷","系统","机制","异常","度高",">","随身","action","文件名","topic","体验","目标","这样","msg","输入","直接","感受","电影","而是","去","但是","轻松","继续","send","受","好","gedit","pose","鼠标","上","加上","拷贝","。","当前工作","小海龟","很","统管","更","学习","权限","看看","这里","买","帮上","目","所在","删除","回到","ros","后边","绝对","硬","list","db3","vel","改名","播放","这个","深入","能够","这种","多种","概念","小","name","命令","控制","改变","是","灵活","知道","不可","都","拷贝到","record","材料","cmd","$","语法","便捷","或","信息","{","字符","1","随身带","文件","里边","复制到","”","查","实验","在","死机","的","rosbag2","什么","linux","执行","就","可视","了解","echo","不太","key","管理","x","孤单","cp","必不可少","服装","本","一直","数量","内容","一定","子",",","调试","终端","angular","pub","要","感兴趣","已经","被","2.0","名称","cd","比如","适应","或者","“","]","科幻电影","相同","又","现有","sudo","想象","看不到","呈现出","笔记本电脑","一种","体操","看似","还是","目的","ros2","死记硬背","参数","主要","等","表示","若","请求","消息","17","一只","路径","问题","显示","不一","rotateabsolute","看中","一","令人","做好","3","正常","常用","大家","小海","窗口","时候","很多","并不一定","常用命令","_","为","另","满足","什么样","觉得","源文件","随着","管理员","其他","中","至于","出","0","则","让","叫做","第一次","可以","turtle","自主","play","run","你","哪些","一步","列出","难以","写字","发指","这些","/","十个","科幻","改了","保持","打开","魅力","深色","？","找","真器","逛来","熟悉","+","它","alt","有点","令人发指","根据","twist","规则","需求","尝试","专门","再","此时","精心设计","z","35",".","第一","将","功能","推出","海龟","本节","了","工具","goal","用户","每","\"","成","某","用到","呈现","很少","这","以","spawn","子目","创建","手","一系列","我们","选择","重要","笔记本","编辑",":","一个","来","使用","也","哪","来讲","麻烦","运行","srv","<","一二","体会","总","一件","段","turtle1","角度","精心","--","接触","设计","布料","不到","数据","逛来逛去","某段","一下","复现","现出","类似","一二十个","跟","逛去","怎么","一次","保留","完全","0.0","调用","'","约束","只是","死记","当前","原因","文件夹","查看","接下","标目","但","theta","电脑","背","terminal","程序","系统管理员","不是","案例","仿真","带领","地","一系","就是","rosbag","商场","发送","还","定制","ls","msgs","编辑器","指令","想","turtlesim","场景","原有","虽然","产生","之前","兴趣","，","列表","既定","下","}","选项","目录","自己","看到","这项","[","款式","一点","右键","大致","—","每次","详细信息","进行","接下来","call","不同","背景","均","即可","工作","为什么","由","黑客","命令行","geometry","啦","详细","集成","搜索","发布","炫酷","0.2","与","一起","系列","快捷键","rotate","结合","如何","想要","操作","具体操作","不用","文件名称","目标目录","指定","mv","linear","初次","对","移入","1.8","仿真器","动作","复制","软件","于","录制","和","应用","具体","忙","实验室","记忆","子目录","完成","并","各种","mkdir","…","rm","把","用","核心","太","可能","干什么","无论","、","二十","容易","多","如下","解决","一二十","teleop","：","呢","一样","一些","2022","实现","2","到","不过","如果","衣服","可视化","呀","y","链接","慢慢","试一试","还有","没有","服务","方式","需要","例如","件夹","有","节点","所有","第一个","新建","该","商家","不","后","先","从来","为例","键盘","起来","此"," ","总有","枯燥","ctrl","至今","进一步","service","感兴","node","rate","通过","既","其上","绝对路径","一边","-","pwd","话题","04","及其","会","absolute","感觉","片段","动","11","不变","笔记","40","下来","对于","未来","提供","转","二十个","多个","多到","bag","因为","某个","info","以上","启动","确实","及"],"title":"ROS2命令行操作","title_tokens":["命令行","操作","命令","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2","text":"在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。","text_tokens":["案例","适应","可能","—","我们","带领","可以","。","多","小海龟","重要","第一","接触","会","不太","将","一步","更","学习","大家"," ","海龟","本节","小海","了","到","命令行","工具","如果","之前","，","时候","一种","使用","一定","魅力","一次","调试","运行","进一步","深入","ros2","随着","感受","有点","中","在","的","第一次","命令"],"title":"ROS2命令行操作","title_tokens":["命令行","操作","命令","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#linux","text":"类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。","text_tokens":["比如","我们","异常","度高","科幻电影","现有","软件","于","想象","一个","这样","呈现出","来","和","使用","一种","看似","哪","来讲","还是","麻烦","并","电影","去","但是","各种","等","受","问题","不一","一件","看中","无论","、","精心","容易","。","多","做好","解决","设计","布料","这里","买","呢","一样","大家","逛来逛去","一些","ros","现出","衣服","类似","可视化","呀","时候","很多","逛去","保留","并不一定","完全","为","没有","满足","方式","服务","这种","能够","约束","什么样","其他","中","所有","但","商家","小","不","可以","命令","自主","先","不是","是","你","就是","灵活","商场","定制","不可","都","起来","这些","材料"," ","科幻","便捷","总有","场景","虽然","，","？","里边","至今","既定","逛来","在","根据","的","规则","需求","自己","其上","看到","什么","此时","linux","款式","精心设计","一点","就","每次","可视","会","功能","为什么","推出","命令行","片段","了","必不可少","工具","服装","一直","一定","炫酷","成","某","对于","结合","呈现","想要","已经","被","操作","手"],"title":"Linux中的命令行","title_tokens":["中","的","命令行","linux","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_1","text":"回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。","text_tokens":["t","所以","初次","快捷","一系列","对","我们","选择","科幻电影","随身","笔记本","又","软件","看不到","笔记本电脑","来","输入","使用","应用","也","记忆","确实","参数","并","电影","而是","但是","一二","体会","用","鼠标","上","二十","。","很","令人","一二十","正常","不到","常用","：","呢","大家","所在","一下","回到","到","不过","窗口","一二十个","时候","怎么","硬","慢慢","这个","方式","觉得","需要","随着","原因","至于","中","其他","有","多种","叫做","电脑","背","命令","后","terminal","从来","可以","不是","是","一系","就是","难以","都","写字","发指","指令","十个"," ","科幻","打开","字符","，","枯燥","随身带","魅力","ctrl","深色","列表","熟悉","+","通过","alt","令人发指","在","既","死机","的","看到","专门","什么","这项","右键","就","会","背景","功能","即可","为什么","黑客","命令行","工具","本","数量","一定","搜索","笔记","系列","终端","快捷键","用到","很少","这","二十个","多到","因为","操作","启动","不用","手","及"],"title":"启动方式","title_tokens":["方式","启动"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_2","text":"我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。","text_tokens":["cd","主目录","或者","系统","我们","“","]",">","编辑","移入","sudo","复制","文件名","一个","体验","目标","来","也","目的","子目录","死记硬背","mkdir","…","<","rm","若","把","gedit","路径","用","显示","一","拷贝","。","当前工作","统管","多","常用","权限","：","大家","目","一下","删除","回到","链接","绝对","常用命令","改名","为","没有","另","只是","管理员","源文件","需要","当前","死记","件夹","中","文件夹","出","及","所有","则","新建","标目","该","不","命令","可以","先","系统管理员","地","改变","列出","ls","拷贝到","此","编辑器","这些","指令","/"," ","语法","或","原有","保持","打开","，","文件","列表","复制到","找","熟悉","”","查","它","下","的","选项","目录","绝对路径","一边","[","pwd","linux","执行","就","及其","会","将","均","管理","功能","工作","由","cp","感觉","了","用户","不变","对于","未来","以","多个","某个","子目","创建","文件名称","目标目录","指定","mv","名称"],"title":"常用命令操作","title_tokens":["操作","常用命令","命令","常用"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2_1","text":"ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。","text_tokens":["核心","仿真","比如","就","对","一系列","机制","干什么","话题","我们","大致","可以","一系","了解","。","小海龟","还","第一","接下来","不同","为例","都","相同","功能"," ","topic","海龟","命令行","一个","不过","小海","，","集成","后边","体操","跟","内容","也","具体","与","一起","目的","系列","下来","ros2","node","参数","感受","以","下","主要","中","在","节点","表示","有","所有","第一个","概念","的","操作","具体操作","继续","接下","什么","总","linux","命令"],"title":"ROS2中的命令行","title_tokens":["中","的","命令行","ros2","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_3","text":"想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["仿真","run","我们","进行","key","键盘","teleop","：","$"," ","turtlesim","海龟","命令","，","使用","和","控制","_","运行","ros2","node","例如","要","中","想要","节点","某个","操作","turtle","可以"],"title":"运行节点程序","title_tokens":["运行","节点","程序"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_4","text":"当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim","text_tokens":["系统","对","加上","就","详细信息","哪些","知道","都","：","呢","/","$"," ","turtlesim","一个","ros","信息","如果","这样","来","兴趣","命令","，","详细","啦","子","list","？","运行","某","感兴","ros2","node","它","当前","中","感兴趣","有","节点","查看","的","info","可以"],"title":"查看节点信息","title_tokens":["信息","节点","查看"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_5","text":"当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose","text_tokens":["系统","加上","turtle1","话题","echo","如下","还","都","即可","：","呢","数据","想","/","$"," ","topic","一个","，","使用","子","list","试一试","某","ros2","当前","中","有","查看","的","消息","看到","pose","命令"],"title":"查看话题信息","title_tokens":["话题","信息","查看"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_6","text":"想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":["linear","z","turtle1","我们","话题","可以","还","--","msgs","起来","：","x","指令","1.8",":","/","$"," ","cmd","海龟","topic","命令行","geometry","命令","msg","直接","，","动","1","{","发布","y",",","vel","_","\"","angular","pub","ros2","0.0","rate","通过","想要","}","twist","2.0","控制"],"title":"发布话题消息","title_tokens":["发布","话题","消息"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_7","text":"一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\"","text_tokens":["太","仿真","—","我们","还","call","：","x","孤单","仿真器","/","$"," ","turtlesim","海龟",":","一只","一个","2","改了","y","产生","来","{","，",",","0.2","试一试","\"","真器","service","服务","调用","ros2","'","srv","spawn","提供","}","theta","再","name"],"title":"发送服务请求","title_tokens":["服务","发送","请求"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_8","text":"想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\"","text_tokens":["仿真","比如","角度","turtle1","rotateabsolute","发送","3","absolute","action","：","帮上","仿真器","动作","$"," ","/","海龟","turtlesim","命令行","一个","到","目标","goal","这样","命令","，","具体","忙","_","\"","真器","这个","完成","ros2","rotate","通过","中","提供","想要","转","的","send","让",":","theta","指定","可以"],"title":"发送动作目标","title_tokens":["目标","动作","发送"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_9","text":"系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["play","35","系统","段","turtle1",".","我们","04","可以","就是","rosbag","。","很","看看","常用","数据","功能","：","大家","某段","record","2022","实现","/","$"," ","cmd","复现","回到","一个","如果","录制","啦","，","很多","11","子","40","db3","与","实验室","还是","vel","_","下来","？","每","播放","还有","运行","ros2","如何","这","实验","轻松","中","-","想要","有","0","bag","的","把","rosbag2","以上","尝试","自己","好","17","再","用","命令"],"title":"录制控制命令","title_tokens":["命令","录制","控制"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","text":"ROS2开发环境配置 ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。 Git git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git 下载教程源码 《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。 VSCode Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download VSCode插件配置 为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。 中文语言包 Python插件 C++插件 CMake插件 vscode-icons ROS插件 Msg Language Support Visual Studio IntelliCode URDF Markdown All in One VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["比如","所以","系统","判断","》","一系列","我们","喜欢","入门","重要","vscode","大量","语言","linus","机器人","python","编辑","常听到","download",":","sudo","apt","软件","一个","迅速","21","studio","windows","这样","msg","直接","和","使用","应用","成千上万","也","做","众多","略显","具体","年","代码","完成","ros2","驱动","并","安装","两款","支持","语言包","language","开发者","源码","等等","编写","好","简单","网上","自带","用","一款","人工","bug","行","可能","发展","几千","以及","、","2015","千上万","人","。","多","几千万","官方网","开源","设计","更","之间","c++","搭建","成为","这里","：","呢","方法","大家","修复","扩展","一些","组件","后续","编译","下载方式","ros","如果","机器","之后","intellicode","自动","很多","浏览器","链接","丰富","简称","_","特性","浏览","方式","clone","需要","记事本","件夹","中","文件夹","出","有","查看","所有","环境","让","讲","但","广泛","visualstudio","官方网站","而生","开发工具","推荐","不","可以","先","命令","code","git","这款","管理工具","macos","只","冲突","作为","是","利器","变更","一系","最","还","不会","非常","不开","都","编辑器","这些","提交","源代码","/","$"," ","哪里","visual","管理软件","快速","肯定","强大","个人","网站","有些","给","官方","，","为了","下载","文件","之父","com","？","里边","增加","非常简单","一行","版本","上万","项目","配置","gitee","成千","在","因","离不开","的","千万","自己","切换","审核","看到","无限","guyuehome","码云","linux","tutorials","-","install","就","—","已有","每次",".","课程","one","合并","https","support","进行","会","国内","不同","复杂","管理","功能","听到","icons","硬件","推出","示例","另外","便于","中会","markdown","了","插件","工具","cmake","内容","集成","开发","搜索","all","与","调试","终端","系列","记事","准备","《","微软","如何","这","贡献","教程","提供","多个","高效","github","理工","被","功能强大","中文","操作","以上","urdf","新","轻量","in","操作系统","神兵","广泛应用"],"title":"ROS2开发环境配置","title_tokens":["配置","开发","环境","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros2","text":"ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。","text_tokens":["先","git","—","我们","、","课程","。","重要","vscode","大量","不开","机器人","呢","大家","这些","一些","开发工具","编译","示例","中会","肯定","ros","工具","机器","给","，","和","开发","做","？","准备","代码","完成","配置","如何","需要","两款","提供","源码","查看","环境","离不开","的","编写","推荐"],"title":"ROS2开发环境配置","title_tokens":["配置","开发","环境","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#git","text":"git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git","text_tokens":["比如","所以","系统","判断","我们","linus","常听到","sudo","apt","软件","一个","迅速","直接","和","使用","应用","成千上万","也","众多","具体","代码","完成","驱动","并","安装","开发者","等等","简单","一款","人工","bug","行","可能","发展","几千","以及","千上万","人","。","几千万","开源","设计","之间","方法","修复","大家","之后","自动","特性","需要","中","有","所有","让","广泛","而生","不","可以","命令","git","这款","管理工具","冲突","是","变更","不会","非常","都","这些","提交","$"," ","哪里","管理软件","肯定","网站","有些","，","之父","增加","非常简单","一行","版本","上万","项目","gitee","成千","在","因","千万","的","切换","审核","看到","码云","linux","install","就","—","已有","每次","合并","进行","会","国内","不同","管理","功能","听到","硬件","了","工具","内容","开发","终端","这","贡献","多个","高效","github","理工","被","新","广泛应用"],"title":"Git","title_tokens":["git"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_1","text":"《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。","text_tokens":["git","系统","就","》",".","—","是","课程","https","。","入门","多","还","会","vscode","更","复杂","这里","：","tutorials",":","/","$"," ","另外","下载方式","一个","21","如果","这样","，","很多","和","下载","浏览器","文件","略显","集成","开发","_","com","记事","里边","《","浏览","代码","方式","ros2","clone","用","记事本","gitee","件夹","文件夹","中","有","源码","查看","环境","的","讲","好","自带","guyuehome","推荐"],"title":"下载教程源码","title_tokens":["下载","教程","源码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode","text":"Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download","text_tokens":["code","系统","macos","神兵",".","、","是","2015","利器","https","。","官方网","vscode","非常","搭建","成为","功能","编辑","扩展","编辑器","：","download","组件","源代码","推出",":"," ","visual","/","一个","快速","studio","强大","windows","网站","官方","，","和","链接","开发","下载","丰富","简称","com","年","代码","微软","项目","支持","在","功能强大","的","操作","但","visualstudio","官方网站","轻量","操作系统","linux","可以"],"title":"VSCode","title_tokens":["vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode_1","text":"为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。","text_tokens":["一系列","我们","一系","。","还","vscode","功能","扩展","后续","便于","插件","，","为了","开发","与","调试","系列","ros2","安装","的","无限","可以"],"title":"VSCode插件配置","title_tokens":["配置","插件","vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_2","text":"","text_tokens":[],"title":"中文语言包","title_tokens":["语言","中文","语言包"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#python","text":"","text_tokens":[],"title":"Python插件","title_tokens":["python","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#c","text":"","text_tokens":[],"title":"C++插件","title_tokens":["c++","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#cmake","text":"","text_tokens":[],"title":"CMake插件","title_tokens":["插件","cmake"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode-icons","text":"","text_tokens":[],"title":"vscode-icons","title_tokens":["-","icons","vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros","text":"","text_tokens":[],"title":"ROS插件","title_tokens":["插件","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#msg-language-support","text":"","text_tokens":[],"title":"Msg Language Support","title_tokens":["language","support","msg"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#visual-studio-intellicode","text":"","text_tokens":[],"title":"Visual Studio IntelliCode","title_tokens":[" ","studio","visual","intellicode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#urdf","text":"","text_tokens":[],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#markdown-all-in-one","text":"VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["只","作为","最","喜欢","。","vscode","大家","个人","插件","，","搜索","开发","也","众多","配置","支持","出","在","环境","的","以上","自己","网上","推荐","可以"],"title":"Markdown All in One","title_tokens":["all","markdown","one"," ","in"]}]}