{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"引言 机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的 电气时代 。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的 数字时代 ，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发， 智能机器人时代 正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。 教程链接汇总 课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/90 博客泡圈： https://www.guyuehome.com/","text_tokens":["于","计算机","人工智能","_","完全","这","工业","狗","正式","系统","命令","井喷","链接","七八十年","劳动力","年","视频","劳动","有限","人类","感知","并","agv","家庭","服务","自主","主角","而言","伺服","层面","载体","多","的","：","开发","，","robot","自动","人工","时期","电机","应用","生产","汇总","驱动","四足","21","github","出现","感器","拉开序幕","此时","gitee","ai","设备","送餐","丰富","伺服电机","后","之后","依然","局部","主要","不断丰富","传感器","2015","www","智能化","时代","类型","算机","仿生","了","更","不过","电气","源码","博客","八十","没有","过程","成为","汽车","提出","序幕","视觉","环境","减速","释放","之一","教器","也","操作系统","要求",".","状","高","三个","、","system","思考","操控","必将","由示","circledetail"," ","传感","com","经历","最为","驱动器","大","年前","业生","我们","智能","guyuehome","逐渐","tutorials","id","问答","动力","呈","工业生产","动作","缺少","但是","/","。","减速机","教程","帮助","https","俗称","ros2","控制","计算","工厂","和","2000","检测","这是","book","随着","课程","数字","等","机器","对","八十年","技术","十年","太","机器人","更加","不断","快速","最佳","爆发","软件","发展",":","按照","控制器","拉开","泡圈","执行","90","前夜","驾驶","—","关注","bubble","是","operating","七八十","class","图文","只能","七八","热点","重要","操作","横跨","就是","引言"],"title":"引言","title_tokens":["引言"]},{"location":"#_1","text":"机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的 电气时代 。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的 数字时代 ，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发， 智能机器人时代 正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。","text_tokens":["于","计算机","人工智能","完全","这","工业","狗","正式","系统","命令","井喷","七八十年","劳动力","年","劳动","有限","人类","感知","并","agv","家庭","服务","自主","主角","而言","伺服","层面","载体","多","的","开发","，","robot","自动","人工","时期","电机","应用","生产","驱动","四足","出现","感器","拉开序幕","此时","ai","设备","送餐","丰富","伺服电机","后","之后","依然","局部","主要","不断丰富","传感器","2015","智能化","时代","类型","算机","仿生","了","更","不过","电气","八十","没有","过程","成为","汽车","提出","序幕","视觉","环境","减速","释放","之一","教器","也","操作系统","要求","状","高","三个","、","system","思考","操控","必将","由示"," ","传感","经历","最为","驱动器","大","年前","业生","我们","智能","逐渐","动力","呈","工业生产","动作","缺少","但是","。","减速机","帮助","俗称","控制","计算","工厂","和","2000","检测","这是","随着","课程","数字","等","机器","对","八十年","技术","十年","太","机器人","更加","不断","快速","最佳","爆发","软件","发展","按照","控制器","拉开","执行","前夜","驾驶","—","关注","是","operating","七八十","只能","七八","热点","重要","操作","横跨","就是"],"title":"引言","title_tokens":["引言"]},{"location":"#_2","text":"课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/90 博客泡圈： https://www.guyuehome.com/","text_tokens":["circledetail","_"," ","com","guyuehome",":","www","tutorials","id","问答","泡圈","视频","90","/","源码","教程","博客","bubble","class","：","ros2","图文","book","github","21",".","课程","https","gitee"],"title":"教程链接汇总","title_tokens":["链接","汇总","教程"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["人才培养","累积","为","《","交流学习","镜像","个人","版权","企业","年","居","提供","网站","法律","明者","视频","有限","修改","包括","集","创新","努力","学习者","+","使用","捆绑","法律责任","的","线上","小时","开发","，","实践","所有","古月","人才","学","不得","ai","有权","建立","公司","如需","上","进行","构建","至今","违反","未来","质量","图书","创建","www","请","内容","课件","高校","传播","究其","ros","依法","不","被","万字","源码","但","上述","2011","联系","限于","追究其","华语","声明","培养","通过","高质",".","、","责任","1000","社区","及"," ","com","微控","仅限","》","合法","本","guyuehome","超过","畅销","（","一体","。","精锋","对本","交流","或","书面","作品","授权","高质量","和","面向未来","拥有","赋能","课程","面向","等","@","单位","机器","120","模式","有限公司","任何","机器人","地区","追究","平台","致力","均","）","其它","声明者","优质","抄录","许可","万人","合作","是","用户","出版","致力于","产品","将","武汉","复制","与","学习","生态","众多","销售","知名","未经","校企","科技","brand"],"title":"关于我们","title_tokens":["我们","关于"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["人才培养","累积","为","《","交流学习","企业","年","居","提供","视频","集","创新","努力","学习者","+","的","线上","小时","开发","，","实践","古月","人才","ai","建立","构建","至今","未来","质量","图书","创建","www","内容","高校","ros","万字","2011","华语","培养","通过","高质",".","、","1000","社区","及"," ","com","》","guyuehome","超过","畅销","（","一体","。","交流","高质量","面向未来","赋能","课程","面向","等","机器","120","模式","机器人","地区","平台","致力","）","优质","万人","合作","是","用户","出版","致力于","与","学习","生态","众多","知名","校企"],"title":"学机器人，上古月居","title_tokens":["机器","，","古月","机器人","居","学","上"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["为","镜像","个人","版权","法律","网站","居","明者","视频","有限","修改","包括","使用","法律责任","捆绑","的","，","所有","古月","不得","有权","公司","如需","进行","违反","请","传播","课件","究其","依法","不","被","源码","但","上述","联系","限于","追究其","声明",".","、","责任"," ","微控","仅限","com","合法","本","guyuehome","。","精锋","对本","或","书面","作品","授权","和","拥有","课程","等","@","单位","有限公司","任何","追究","均","其它","声明者","抄录","许可","用户","产品","将","武汉","复制","与","学习","销售","未经","科技","brand"],"title":"版权声明","title_tokens":["版权","声明"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/","text":"ROS/ROS2是什么 智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。 ROS的诞生 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人—— PR2 ，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS的发展 ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称 ROSCon ，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。 ROS的特点 ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。 参考资料 关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["日常","一些","模块","这一波","google","之旅","时至今日","如何","该","陪","维基百","系统","圈","正式","成果","左右","开源","今日","非常","大部","时间","网站","因","250","index","零","新鲜","身影","使用","革命","苹果","的","2","多","20","既然","上去","算是","物体","投了","人才","古月","整合","斯坦福大学","实验室","world","linux","有人","公司","由","还","回答","上","底盘","进行","至今","友好","年底","一大","居高不下","智能化","标准","时代","内容","涉及","参考","一起","一大步","发布","数据","不","福大","维基","一定","了","受限","过程","可以","低","毛巾","创始","也","向前","当时","官方","乐意","humble","根据",".","一款","世界","system","分钟","没想到","木头","“","清晰","已经","通信","本","差不多","年轻人","充足","想到","下来","个","发表","图中","之","几年","做饭","神兵","游戏机","开发工具","所有人","应用软件","intel","可为","给出","answers","希望","索引","笔记本","成熟","掀起","肯定","2012","主阵地","年轻","近几年","熟悉","以上","名称","做成","程度","所学","很","b","次数","等","站","特点","原因","一个","120","技术","正式版","任何","百万","虽好","页面","举办","还是","活跃","做","比如","许可证","远","就","2022","garage","资源","近两年","诞生","一次","总而言之","pr2","来","零部件","许可","两个","第一个","全新","效果","衣服","解决","自身","将","元素","？","进入","水下","新鲜事","操作","无论是","频繁","不仅","图","什么","工具","速度","场景","强悍","后期","采购","扫地","这","推动","统统","包","浏览","只要","开发者","很多","或者","个人","生态系统","挑战","年","缩短","推出","专业","容易","视频","越来","越来越","大有可为","嵌入式","并","服务","找到","选择","采用","给","访问量","开发","普及","跟随","分享","robot","5","浏览量","度","联合","应用","感器","org","排名","每","人数","曲线","单独","一群","现在","商业","家","青年","嵌入","绝大","之王","ros","框架","被","基本","更","肩膀","源码","一套","活动","无聊","然后","相关","2010","提出","汽车","促使","支持","创意","限于","全球化","板块","打","之内","一下","两年","又","操作系统","大会","沉淀","一大笔","其他","、","此","成本","时间轴","模块化","轮子","第一次","传感","具备","经历","不是","情况","搜索","不断更新","总体","扩展","大步","着","张图","围绕","泡泡","所以","进步","但是","方向","直到","同时","快","面纱","为什么","肩负着","智慧","提高","真的","虽然","了解","利器","引擎","有没有","控制","这样","和","之上","地域","几百","早期","在","多年","全人类","跨平台","80","新增","嘉宾","外观","头发","正在","同学","动机","平台","率","不断","对于","全","明智","后续","向","条","助推","发展","四项","局限","记录","却","无疑","代码","一届","复杂","conference","而","当初","产品","结晶","学习","答案","重量级","性能","绝大部分","神秘","手机","部件","正如","效率","配合","其中","认识","限性","c","跑","于","洗衣","还有","风险","而且","discourse","完全","为","机制","工业","新","别人","宽松","机械","广泛","各种","集合","居","同样","已有","复合","软件系统","向前走","一段","人类","有","一大笔钱","努力","而言","万","此后","线上","：","willow","增长速度","，","啦","各样","介于","turtlebot","会","github","存储","此时","只想","带领","第一","40","美妙","标志","15","学术","用","数据库","很快","原型","2015","团队","传感器","历经","资金","最高","托管","做到","方式","大大","事情","自己","入门教程","处理","全人","斯坦福","提问","本身","以叠","增长","精致","人","使命","2011","统计","针对","轰动","知识","核心","不多","时候","台球","多媒体","上市","通常","开始","起点","ubuntu","系列","起","四大","通过","以","其实","各种各样","xbox","百科","领域","ros1","为了"," ","最为","2017","高效","收拾","同年","不要","智能","百科全书","逐渐","提取","问答","呢","甚至","动力","简单","重新","2014","问题","教程","绝对","不下","稳定","来到","他们","月","25","版","来自","这是","迅猛","随着","a","类似","全书","掌握","机器","长期","想法","一系","从","接下来","普遍","媒体","大学","上边","更为","出来","windows","一步","体感","资本","踏上","下载","制造","维基百科","kinect","同理","因为","一样","作为","工程","能够","变为","；","迎来","造","万人","说干就干","无论","简称","真正","研发","做法","一切","实验","迭代","熨烫","棒","重要","生态","到","研究","步伐","叫做","适用","加","体系","都","项目","那","才","叠","看中","尽量","来看","回到","详细","不乏","移动机器人","价格便宜","可能","复用","认识一下","接下","浪潮","推荐","大部分","版本","提供","电路","成功","packages","各项","实现","特性","层面","光靠","从中","这里","personal","这个","疫情","所有","独立","不到","改为","加快","代","部分","得以","终于","巨人","全球","多项","没想","把","为例","月底","一堂","游戏","移动","不开","更新","加上","组成","案例","下","讨论","看到","万左右","高度","主要","投资","roscon","你","参考资料","更好","五年","整理","长远","一系列","讲解","国家","要","局限性","没有","成为","每年","商业化","活跃度","目标","100","生态系","注意","设计","欢迎","不同","直接","2007","几乎","功能","大量","繁荣","只","却步","玩耍","社区","说明","中","工程师","访问","便宜","代表","怀揣","干","大","关键","我们","等等","有志","价格","肩负","齐聚一堂","最后","多万","人形","起来","总称","/","关于","论坛","用于","趋势","其次","。","确定","每个","万万","方法","进化","一家","据库","完成","帮助","基于","阵地","ros2","入门","亚马","得到","深知","尝试","离不开","聊天","如果","课程","柔性","几个","款","对","笔记本电脑","剪头发","受限于","机器人","150","亚马逊","几百万","笔记","臂","爆款","快速","来讲","最佳","望而却步","前","软件","野蛮","这位","基本上","好","这些","上图","做出","大笔","不想","风险投资","—","”","微软","是","巨大","operating","电脑","原本","暴露","wiki","查看","而生","这款","用户","资料","推进","多媒体系统","首先","初期","同一","让","这群","重量","横跨","大家","就是","量级"],"title":"ROS和ROS2是什么","title_tokens":["什么","和","是","ros","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#rosros2","text":"智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。","text_tokens":["机器","对","那","正在","什么","中","接下来","机器人","场景","认识"," ","全","高度","这","接下","向","系统","就","认识一下","我们","智能","这位","智能化","挑战","时代","下来","一起","呢","ros","方向","了","。","面纱","进化","提出","嘉宾","巨大","是","掀起","的","而生","ros2","开发","？","，","一下","重量级","又","操作系统","操作","应用","神秘","重量","大家","带领","量级"],"title":"ROS/ROS2是什么","title_tokens":["什么","是","ros","/","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人—— PR2 ，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。","text_tokens":["一些","那","洗衣","什么","才","叠","而且","强悍","如何","后期","可能","陪","这","推动","系统","圈","别人","只要","很多","或者","非常","个人","机械","年","电路","因","专业","同样","容易","软件系统","向前走","越来","越来越","并","实现","有","服务","找到","层面","光靠","苹果","的","2","从中","：","多","开发","personal","，","这个","既然","分享","robot","所有","5","独立","不到","物体","联合","应用","代","此时","得以","第一","为例","斯坦福大学","实验室","有人","还","学术","组成","用","上","一群","看到","很快","原型","团队","资金","家","你","青年","一大","标准","涉及","整理","一起","事情","一大步","一系列","自己","ros","处理","不","福大","框架","斯坦福","了","更","以叠","一套","精致","无聊","要","没有","人","成为","针对","轰动","打","时候","台球","可以","100","之内","低","毛巾","设计","也","操作系统","当时","系列","向前","2007","一款","功能","、","分钟","木头","只","玩耍","中","第一次"," ","已经","不是","高效","收拾","干","我们","智能","充足","有志","大步","个","最后","手机","图中","所以","呢","甚至","做饭","但是","用于","。","所有人","问题","为什么","应用软件","给出","真的","完成","帮助","虽然","基于","肯定","有没有","他们","这样","和","深知","尝试","在","聊天","如果","很","类似","等","柔性","外观","头发","款","机器","一个","技术","想法","剪头发","一系","机器人","大学","平台","出来","对于","做","就","条","诞生","软件","一次","因为","pr2","零部件","却","做出","不想","—","说干就干","复杂","是","衣服","这款","而生","一切","？","答案","实验","初期","性能","熨烫","重要","同一","操作","研究","横跨","就是","大家","部件","效率","都","其中","图"],"title":"ROS的诞生","title_tokens":["的","ros","诞生"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_1","text":"ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称 ROSCon ，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。","text_tokens":["于","项目","看中","风险","回到","不乏","为","后期","价格便宜","扫地","该","这","推动","系统","正式","圈","开源","开发者","个人","大部分","版本","大部","年","时间","各种","推出","成功","设计","越来","越来越","身影","一大笔钱","服务","使用","采用","此后","多","的","给","线上","这里","开发","willow","，","这个","普及","分享","robot","所有","疫情","跟随","5","介于","各样","投了","turtlebot","改为","会","应用","感器","加快","部分","只想","终于","全球","第一","没想","把","月底","斯坦福大学","world","一堂","游戏","每","标志","公司","加上","单独","进行","下","底盘","很快","原型","现在","商业","投资","传感器","roscon","团队","年底","历经","一大","2015","居高不下","五年","时代","绝大","大大","发布","自己","ros","讲解","福大","被","斯坦福","了","更","增长","受限","局限性","2010","人","使命","2011","成为","过程","支持","提出","每年","限于","可以","注意","两年","开始","起点","也","ubuntu","操作系统","大会","官方","起","创始","humble","直接","2007","一大笔","一款","功能","、","各种各样","system","没想到","xbox","成本","却步","时间轴","中","便宜","为了"," ","传感","已经","经历","2017","本","同年","年轻人","关键","大","我们","想到","着","价格","逐渐","肩负","齐聚一堂","提取","所以","几年","但是","2014","直到","游戏机","。","确定","问题","教程","intel","肩负着","每个","万万","一家","笔记本","成熟","不下","稳定","了解","2012","ros2","年轻","他们","控制","熟悉","版","亚马","名称","和","之上","来自","这是","随着","几百","早期","在","类似","多年","等","款","机器","原因","笔记本电脑","一个","长期","正式版","受限于","从","百万","机器人","虽好","大学","亚马逊","几百万","笔记","举办","爆款","快速","出来","做","体感","资本","就","2022","garage","望而却步","近两年","诞生","助推","软件","前","野蛮","发展","kinect","因为","一样","pr2","能够","变为","局限","迎来","大笔","风险投资","—","第一个","全新","一届","微软","限性","是","operating","电脑","conference","简称","而","原本","当初","暴露","真正","进入","迭代","绝大部分","重要","让","操作","到","步伐","这群","叫做","适用","不仅","其中"],"title":"ROS的发展","title_tokens":["的","ros","发展"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_2","text":"ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["那","工具","模块","尽量","时至今日","完全","移动机器人","采购","复用","这","统统","系统","成果","机制","工业","开源","今日","别人","宽松","很多","机械","非常","广泛","各种","生态系统","集合","缩短","时间","已有","复合","向前走","越来","零","越来越","人类","嵌入式","身影","并","实现","有","特性","使用","多","的","给","这里","：","开发","，","这个","上去","分享","各样","人才","会","应用","整合","巨人","部分","多项","全球","把","linux","移动","公司","由","还","组成","案例","上","看到","至今","商业","友好","家","标准","智能化","嵌入","做到","一起","长远","自己","ros","全人","被","更","肩膀","了","本身","体系","汽车","成为","促使","支持","创意","核心","商业化","全球化","目标","可以","多媒体","上市","生态系","通常","设计","也","向前","四大","直接","沉淀","以","功能","各种各样","、","此","繁荣","“","社区","模块化","领域","中","ros1","轮子","具备"," ","已经","代表","不是","通信","怀揣","不要","我们","智能","着","围绕","下来","最后","进步","人形","之","总称","简单","重新","用于","同时","开发工具","。","智慧","一家","提高","新","ros2","引擎","他们","这样","和","做成","a","在","全人类","b","跨平台","站","新增","特点","机器","一个","对","技术","动机","从","普遍","机器人","媒体","臂","率","还是","平台","windows","快速","来讲","一步","做","比如","明智","许可证","远","就","制造","软件","发展","同理","；","来","这些","造","许可","”","无论","是","自身","将","结晶","产品","做法","推进","水下","多媒体系统","生态","到","无论是","就是","大家","正如","都","c","跑"],"title":"ROS的特点","title_tokens":["的","ros","特点"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_3","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。","text_tokens":["日常","什么","速度","这一波","来看","discourse","维基百","这","左右","包","新","浏览","浪潮","开发者","很多","非常","大部分","各种","大部","网站","250","越来","index","packages","各项","新鲜","越来越","大有可为","有","选择","使用","革命","而言","万","多","的","这里","访问量","：","20","开发","增长速度","给","，","浏览量","算是","度","会","应用","存储","整合","部分","org","全球","40","排名","每","人数","15","曲线","回答","上","讨论","看到","数据库","万左右","现在","最高","你","绝大","方式","参考","发布","数据","ros","不","维基","基本","了","国家","源码","增长","活动","相关","提出","统计","人","成为","核心","不多","活跃度","可以","也","通过","不同","乐意","根据",".","其实","功能","其他","、","百科","社区","说明","中","访问","清晰"," ","已经","情况","代表","最为","差不多","本","大","总体","我们","等等","张图","发表","问答","多万","起来","动力","呢","几年","关于","论坛","趋势","快","神兵","。","问题","教程","每个","可为","answers","希望","据库","索引","利器","近几年","月","25","以上","得到","和","这是","迅猛","程度","地域","在","如果","80","很","次数","等","几个","机器","一个","正在","任何","从","页面","上边","150","更为","机器人","活跃","快速","比如","下载","就","资源","最佳","总而言之","助推","维基百科","发展","四项","基本上","作为","；","记录","这些","上图","无疑","两个","万人","是","wiki","绝对","查看","研发","用户","元素","？","学习","新鲜事","棒","绝大部分","重要","到","加","频繁","就是","大家","都","其中"],"title":"ROS的社区","title_tokens":["的","ros","社区"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#_1","text":"关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["项目","工具","还有","google","之旅","详细","这","开源","不开","推荐","大部分","大部","网站","居","提供","视频","一段","有","找到","努力","使用","的","这里","开发","，","这个","啦","分享","所有","古月","会","github","部分","美妙","还","更新","主要","参考资料","你","更好","托管","内容","绝大","参考","一起","之王","ros","入门教程","一定","提问","要","然后","成为","知识","板块","可以","开始","欢迎","也","几乎","世界","大量","百科","社区","中","工程师"," ","最为","本","搜索","不断更新","我们","扩展","百科全书","泡泡","最后","关于","其次","。","问题","教程","方法","阵地","主阵地","ros2","来到","入门","和","所学","离不开","在","课程","几个","全书","掌握","机器","一个","120","同学","技术","从","机器人","不断","后续","踏上","作为","工程","好","万人","—","代码","是","解决","效果","将","资料","首先","学习","绝大部分","重要","大家","配合","都"],"title":"参考资料","title_tokens":["参考","资料","参考资料"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/","text":"ROS2对比ROS1 在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。 ROS1的局限性 首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。 全新的ROS2 ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。 ROS2 vs ROS1 系统架构 在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。 DDS通信 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。 核心概念 ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。 编码方式 再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。 命令行 最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随教程，你就会慢慢理解这些特性。","text_tokens":["是从","很大","一些","丢","动力学","单兵","举","大幅","对系统","微控制器","封装","听说","如何","完整","该","会成","共享内存","系统","工作站","复杂度","开源","不好","含义","实时性","非常","大部","时间","小伙","不难","完整性","某","保证","完","底层","使用","之外","安全性","多","的","之前","批量生产","rosbuild","可移植性","保障","出错","物","python","打交道","以上","内存","保留","linux","丰富","公司","还","良好","小伙伴","方便","上","进行","二种","dds","rtos","网络","接收","管理器","标准","策略","时代","通信接口","不太","发布","数据","rmw","不","信号","走向市场","总体而言","体现","一定","了","不过","幅度","项目管理","过程","topic","除了","担忧","陆续","环境","另外","可以","除此","致使","里","也","课时","交付","具体","一款","比","真实","走向","经验","已经","周期","通信","本","彼此","作战","充足","discovery","间层","发现","最早","受制于","雷达","系统工程","python3","厂商","方案","肯定","性","编码方式","干扰","熟悉","小","加密","计算","第二种","名称","做成","纠结","导致","便于","天翻地覆","等","消费","开发成本","一个","任何","想要","百万","借助","做","比如","一行","就","资源","听","推倒","理解","诞生","陌生","按照","最终","）","pr2","难度","主","当然","来","100ms","先","搭载","两个","第一个","全新","简单明了","对象","是因为","解决","现有","第二","将","？","变革","与","通用性","操作","相比","暂且","没","频繁","不仅","一致","一种","二个","行为","什么","继续","工具","定义","最","场景","标准化","编译","市场","减少","这","稳定性","实力","所示","命令","通用","只要","开发者","很多","或者","带来","是否","挑战","接入","android","右侧","配置","越来","越来越","看","变得","嵌入式","并","家庭","找到","服务","选择","可选","基本保障","例子","给","开发","力学","普及","跟随","诸多","算力","电脑系统","全部","库会","面向对象","应用","去","出现","之初","依赖","run","每","编写","编译器","国际","改","之后","架构","揭秘","看看","未来","rosrun","接近","先进","商业","当","走","下要","嵌入","细节","绝大","类型","至关","一团","共享","一页","mcu","从而","ros","框架","基本","更","消费市场","一套","然后","一旦","左侧","相关","汽车","支持","开发方式","诟病","厂家","道坎","自","解密","一下","操作系统","另","可靠","他","只不过","对比","国际标准","其他","、","成","联网","成本","干掉","需要","完善","中间层","具备","不是","应该","也许","无法","总体","张图","再","入侵","（","安装","所以","但是","1ms","同时","有线","一边","为什么","翻地","master","强壮","提高","二代","初次","虽然","了解","运动学","管理","以下","测试","控制","以下几点","尤其","amr","这样","一本","和","之上","几百","在","fastrtps","面向","大部头","跨平台","阶段","级别","软件开发","远比","移植性","批量","平台","不再","不断","率","对于","全","交道","适配","分散","后续","伙伴","发展","省略","灵活","行人","历史使命","局限","编程语言","图片","差异","代码","大幅度","连接","选项","复杂","迁移","而","产品","可靠性","学习","答案","性能","消失","绝大部分","运算","表示","搬","安全","广泛应用","下边","手机","切记","可读","其中","限性","不够","于","还有","涌现","风险","多功能","为","网络连接","工作","需求","机制","成功经验","新一代","担心","编译系统","新版","加入","分布式","各种","毛坯房","广泛","企业","一团乱麻","唯一","同样","软件系统","有限","修改","有","条件","强","macos","最新","明显","而言","：","建筑","，","印象","翻新","啦","发成","各样","调用","会","优化","生产","打成","驱动","学","产品开发","带领","第一","rostopic","建立","第二代","后","学术","用","符合","流程","前方","做到","方式","售价","自己","上手","处理","指定","几点","只是","但","时","使命","结合","应用层","针对","可选项","核心","tcp","时候","上升","由于","名字","还会","开始","进程","要求","通过","调试","更具","其实","高","各种各样","部署","属性","三个","各位","颠覆","哪些","黑客","ros1","udp","概念","地方","为了"," ","单兵作战","实时","最为","千差万别","换成","不要","智能","受制","程序","呢","甚至","动力","能","解算","简单","重新","通信协议","why","意义","问题","教程","迈过","不会","发送","稳定","他们","似乎","推倒重来","如","随着","过来","类似","除此之外","常","专注","可移植","机器","到底","编程","从","更加","windows","ament","一步","因为","一样","航天","工程","；","能够","装修","得","middleware","多个","无论","精力","真正","学术研究","研发","简称","这台","只能","之间","重要","接触","一一","到","个体","研究","过去","叫做","适用","运行","都","项目","那","协作","尽量","来看","常用","话题","可能","最大","复用","不难理解","延迟","稍安","链接","轻松","5g","大部分","不能","ceo","版本","提供","以及","成功","它","移植","而已","opensplice","运动","实现","特性","主角","分布","层面","图像","这里","尽力","存在","这个","经常","所有","宕机","自动","独立","颠覆性","发布者","满足","较","接口","至关重要","部分","面对","全球","把","设备","慢慢","格局","协议","交给","依然","下","房子","主要","你","更好","怎样","请","客户端","原有","客户","收","长远","更接","讲解","启动","要","角色","局限性","没有","节点","colcon","中间","总之","目标","历史","不断涌现","两者","放在","注意","设计","不同","产品化","直接","盖","自家","几乎","功能","vs","能力","大量","高昂","社区","说明","中","不爽","大致","怀揣","考虑","大","适合","我们","切换","c++","编码","确实","最后","语言","足够","发","集成","/","用于","可读性","。","角度","过","或","方法","每个","api","内","生活","一家","定性","完成","更换","基于","ros2","基础","第二个","面临","深入","一代","如果","课程","命令行","分解","乱麻","款","突然","对","升级","只有","层","机器人","部头","内部","几百万","么","相对","来讲","总结","最佳","布式","软件","控制器","好","借鉴","catkin","信息","这些","wifi","理器","驾驶","重来","—","是","巨大","原本","电脑","写","体验","有且","用户","用到","首先","一团乱","即可","勿躁","毛坯","让","整体","就是","提","大家","不用","指挥","变化"],"title":"ROS2对比ROS1","title_tokens":["对比","ros2","ros1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2ros1","text":"在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。","text_tokens":["一个","到底","第二代","来看","从","ros1","听说"," ","上","么","做","也许","看看","大","这","就","我们","你","ros","能","不","。","过","或","有","使用","二代","第二","多","的","ros2","？","之前","学习","，","名称","和","在","对比","就是","其中","变化"],"title":"ROS2对比ROS1","title_tokens":["对比","ros2","ros1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros1","text":"首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。","text_tokens":["一些","什么","不够","单兵","那","丢","涌现","来看","风险","市场","这","网络连接","工作","系统","工作站","实力","新一代","或者","大部分","大部","时间","各种","它","保证","有限","嵌入式","并","有","条件","家庭","找到","服务","主角","的","：","开发","批量生产","，","普及","自动","独立","算力","会","应用","生产","出现","部分","第一","设备","良好","学术","用","上","先进","网络","嵌入","绝大","类型","数据","售价","自己","ros","处理","不","走向市场","框架","了","要","没有","汽车","针对","支持","担忧","目标","历史","可以","由于","不断涌现","设计","致使","也","可靠","他","具体","一款","能力","高昂","成本","中","黑客","ros1","地方","为了"," ","具备","单兵作战","已经","走向","实时","通信","作战","适合","我们","充足","入侵","足够","呢","甚至","最早","why","但是","用于","。","有线","问题","为什么","翻地","完成","虽然","ros2","干扰","小","似乎","这样","计算","和","做成","天翻地覆","随着","在","类似","一代","课程","级别","款","机器","一个","批量","从","机器人","更加","内部","平台","不断","比如","就","资源","软件","诞生","发展","因为","最终","航天","pr2","；","当然","搭载","驾驶","第一个","—","连接","是因为","是","复杂","原本","学术研究","这台","可靠性","产品","？","只能","首先","答案","绝大部分","运算","让","研究","就是","运行","都","不用"],"title":"ROS1的局限性","title_tokens":["局限性","ros1","局限","的","限性"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2","text":"ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。","text_tokens":["很大","动力学","对系统","微控制器","如何","完整","系统","不好","实时性","完整性","使用","安全性","多","的","rosbuild","保障","出错","python","保留","linux","还","提","方便","上","进行","二种","dds","rtos","网络","管理器","标准","策略","时代","数据","信号","不","体现","一定","了","项目管理","除了","环境","可以","也","课时","具体","一款","比","走向","已经","周期","通信","发现","受制于","系统工程","python3","方案","肯定","性","导致","加密","第二种","纠结","等","消费","一个","任何","借助","比如","就","推倒","最终","）","100ms","搭载","两个","第一个","全新","第二","变革","？","与","通用性","操作","相比","不仅","一种","行为","继续","工具","场景","标准化","编译","市场","这","稳定性","通用","开发者","很多","或者","挑战","android","越来","越来越","并","选择","基本保障","给","开发","力学","诸多","算力","电脑系统","全部","应用","去","出现","之初","编写","编译器","架构","未来","下要","细节","mcu","ros","框架","基本","更","消费市场","一旦","汽车","解密","一下","操作系统","可靠","、","需要","具备","不是","无法","（","入侵","所以","1ms","但是","同时","master","强壮","虽然","运动学","管理","以下","测试","以下几点","控制","尤其","amr","这样","和","之上","在","跨平台","阶段","远比","平台","不再","全","后续","行人","历史使命","差异","代码","连接","复杂","产品","性能","安全","手机","于","风险","为","机制","需求","网络连接","工作","成功经验","编译系统","新版","分布式","各种","毛坯房","修改","有","强","macos","最新","明显","：","建筑","，","翻新","各样","会","优化","打成","第一","后","用","流程","前方","做到","自己","几点","只是","但","使命","结合","针对","时候","还会","要求","调试","更具","各种各样","部署","颠覆","黑客","ros1","为了"," ","实时","千差万别","智能","受制","动力","甚至","呢","能","解算","简单","重新","问题","不会","发送","稳定","他们","推倒重来","类似","机器","更加","windows","ament","工程","能够","装修","得","无论","真正","研发","之间","到","个体","过去","叫做","运行","都","项目","那","协作","尽量","来看","可能","链接","不能","提供","以及","成功","它","移植","运动","实现","特性","分布","层面","尽力","这个","经常","所有","宕机","自动","独立","颠覆性","满足","较","接口","面对","把","格局","下","房子","怎样","原有","长远","要","角色","没有","节点","colcon","历史","设计","不同","产品化","直接","盖","大量","说明","中","怀揣","考虑","大","适合","我们","c++","语言","用于","。","方法","api","内","生活","定性","完成","ros2","基础","面临","课程","分解","对","升级","机器人","相对","最佳","布式","软件","控制器","好","借鉴","catkin","这些","wifi","理器","驾驶","重来","是","巨大","原本","电脑","体验","毛坯","让","就是","经验","大家","不用","变化"],"title":"全新的ROS2","title_tokens":["的","全新","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2-vs-ros1","text":"","text_tokens":[],"title":"ROS2 vs ROS1","title_tokens":["vs"," ","ros2","ros1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_1","text":"在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。","text_tokens":["是从","那","最","封装","会成","共享内存","这","不难理解","机制","系统","很多","ceo","提供","一团乱麻","右侧","不难","它","而已","看","变得","并","有","底层","找到","macos","明显","可选","图像","的","开发","印象","，","这个","所有","调用","库会","会","应用","接口","驱动","至关重要","打交道","依赖","内存","把","建立","linux","公司","协议","架构","进行","上","dds","主要","rtos","接收","管理器","走","请","一团","标准","通信接口","客户端","至关","客户","不太","方式","从而","发布","数据","ros","不","框架","了","不过","一套","但","角色","左侧","应用层","节点","中间","可选项","tcp","时候","另外","可以","两者","自","注意","名字","开始","里","也","进程","操作系统","通过","只不过","对比","、","成","大量","哪些","需要","完善","中","中间层","ros1","udp"," ","通信","应该","大致","彼此","我们","张图","再","discovery","安装","程序","间层","通信协议","简单","发现","雷达","。","过","方法","master","内","稳定","更换","基于","肯定","ros2","了解","管理","这样","和","深入","在","类似","如果","乱麻","突然","一个","只有","层","更加","windows","交道","比如","后续","就","听","理解","一样","好","信息","得","这些","先","理器","—","简单明了","连接","选项","是","写","复杂","而","有且","将","学习","一团乱","消失","重要","接触","让","操作","整体","频繁","大家","就是","下边","都","共享","指挥","变化"],"title":"系统架构","title_tokens":["架构","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#dds","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。","text_tokens":["于","丢","举","一些","还有","定义","最","场景","听说","如何","为","该","最大","复用","减少","延迟","这","系统","需求","轻松","复杂度","开源","只要","加入","带来","5g","是否","广泛","各种","接入","版本","提供","唯一","配置","某","软件系统","移植","完","opensplice","并","实现","底层","选择","之外","层面","例子","多","的","这里","给","开发","，","这个","发成","满足","物","应用","接口","会","优化","部分","产品开发","把","每","丰富","国际","改","协议","用","符合","dds","商业","标准","收","数据","rmw","ros","不","指定","基本","了","更","不过","要","然后","时","除了","都","tcp","总之","诟病","目标","厂家","可以","放在","设计","也","不同","另","交付","自家","国际标准","其实","高","功能","其他","、","属性","部署","三个","联网","成本","社区","中","ros1","udp","为了"," ","不是","不爽","通信","应该","无法","我们","切换","再","安装","所以","程序","发","通信协议","简单","/","重新","。","问题","每个","master","一家","提高","厂商","稳定","更换","基于","肯定","ros2","熟悉","加密","这样","纠结","过来","在","类似","fastrtps","常","如果","专注","等","机器","开发成本","一个","想要","机器人","更加","率","么","对于","适配","比如","来讲","做","一行","就","软件","省略","灵活","按照","一样","好","能够","middleware","当然","得","这些","多个","先","代码","是","写","解决","复杂","精力","简称","用户","产品","？","性能","让","相比","适用","频繁","广泛应用","就是","交给","一种","不用","变化"],"title":"DDS通信","title_tokens":["通信","dds"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_2","text":"ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。","text_tokens":["保留","尽量","中","概念","ros1","百万","从","小伙伴"," ","已经","几百万","依然","应该","本","就","担心","含义","我们","伙伴","开发者","很多","陌生","非常","广泛","不用","方式","小伙","以及","这些","讲解","不","ros","了","。","意义","并","过","有","方法","没有","迁移","使用","第二","部分","的","这里","开发方式","ros2","开发","存在","，","学习","熟悉","便于","第二个","和","也","一一","到","会","应用","几百","几乎","如果","在","课程","大家","一致","各位","其中","全球","二个"],"title":"核心概念","title_tokens":["概念","核心"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_3","text":"再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。","text_tokens":["一些","项目","如何","稍安","这","所示","版本","大部","企业","同样","移植","实现","特性","而言","多","的","开发","，","可移植性","发布者","面向对象","会","学","带领","之后","用","看看","接近","当","更好","一页","方式","发布","更接","总体而言","更","不过","过程","道坎","也","具体","中","ros1","真实","具备"," ","总体","我们","不要","编码","确实","再","程序","语言","发现","可读性","。","一边","角度","教程","方法","提高","迈过","ros2","一本","如","和","在","大部头","面向","课程","可移植","软件开发","移植性","机器","一个","编程","从","机器人","部头","来讲","一步","后续","就","软件","难度","来","编程语言","图片","两个","对象","是","写","用到","学习","勿躁","搬","操作","暂且","大家","切记","可读"],"title":"编码方式","title_tokens":["方式","编码方式","编码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_4","text":"最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随教程，你就会慢慢理解这些特性。","text_tokens":["大幅","工具","多功能","常用","话题","命令","某","有","特性","选择","之外","而言","的","：","开发","印象","，","啦","跟随","所有","独立","会","rostopic","把","run","每","慢慢","下","揭秘","rosrun","dds","你","一种","ros","上手","启动","了","更","幅度","相关","节点","topic","核心","陆续","上升","除此","也","对比","功能","干掉","中","概念","ros1"," ","最为","通信","大致","换成","我们","再","最后","集成","。","教程","master","初次","ros2","控制","以上","和","在","如果","除此之外","命令行","一个","对","编程","相对","分散","比如","做","总结","后续","就","理解","主","好","难度","这些","—","大幅度","是","现有","即可","表示","没","就是","大家","都","变化"],"title":"命令行","title_tokens":["命令","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/","text":"ROS2安装方法 本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。 Linux系统简介 时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。 Ubuntu系统简介 我们后续课程使用到的Linux发行版就是 ubuntu系统 。 Ubuntu诞生于2004年10月份， 每六个月发布一个新版本 ，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。 Ubuntu虚拟机安装 虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下： 1. 下载系统镜像 下载链接： https://ubuntu.com/download/desktop 2. 在虚拟机中创建系统 3. 设置虚拟机硬盘大小 4. 设置Ubuntu镜像路径 5. 启动虚拟机 6. 设置用户名和密码 7. 等待系统安装 8. 完成安装 Ubuntu系统安装好后，大家可以先随意使用熟悉一下。 ROS2系统安装 接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下： 1. 设置编码 $ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8 2. 添加源 $ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844 3. 安装ROS2 $ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop 4. 设置环境变量 $ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。 ROS2示例测试 为了验证ROS2安装成功，我们可以通过以下示例进行测试。 示例一：命令行示例 先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。 示例二：小海龟仿真示例 再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["一些","乐于","all","其他软件","如何","蓝色","该","系统","左右","开源","镜像","时间","保证","建议","强大","免费","[","底层","小海龟","使用","centos","之外","虚拟","决定","多","的","2","紧随其后","之前","实践","dpkg","-","vmware","发扬光大","world","linux","公司","还","上","进行","dds","变量","网络","www","标准","不太","参考","一起","发布","数据","不","一定","了","deb","过程","俱全","os","除了","|","吧","环境","另外","可以","除此","一位","各个","也","http","6","户名","source","humble",".","\"","指令","main","硬件","“","传输","反馈","海龟","nodes","已经","com","3","通信","本","六个","编辑器","下来","个","任何人","1","desktop","应用软件","用户名","成熟","dev","products","ssl","比较","熟悉","计算","个人爱好","检验","二","发行","量","很","等","一个","技术","模式","路径","任何","最好","想要","utf","by","还是","做","比如","10","就","2022","可","诞生","一次","千层浪","来","先","22","两个","位置","第一个","关注","效果","第二","将","？","与","操作","tee","无论是","locale","不仅","node","一种","热情","二个","什么","界面","最","场景","文件","密码","en","这","实力","命令","通用","尚","浏览","很多","个人","或者","开发者","是否","年","多用","本相","持续","内核","越来","一般","订阅",")","越来越","并","服务","光大","选择","其后","采用","给","开发","月份","分享","5","虚拟机","应用","点击","出现","org","依赖","run","每","之后","rosdistro","gpg","上下","2004","未来","现在","提交","商业","connect","demo","upgrade","大学生","传播","install","py","算机","每隔","ros","fedora","基本","更","源","一套","至此","擦掌","支持","etc","html","之内","兼容","一下","两年","操作系统","这套","他","技术实力","--","其他","一直","、","d","成","指标","联网",">","需要","动手做","行列","第一次","出","情况","应该","任务","设置","热爱","真理","何人","再","安装","好者","所以","但是","快","同时","export","master","互联","准备","随意","lc","虽然","了解","管理","以下","测试","控制","这样","evaluation","和","之上","打包","一应俱全","在","吸引","软件开发","激起","=","编号","后续","真器","发展","&&","收费","相同","代码","试试","应用程序","性能","背景","表示","环境变","浏览器","其中","占据","于","编辑","人工智能","8","并用","setup","bash","源代码","工作","学生","千层","新","加入","字符串","各种","企业","唯一","已有","gen","有限","分别","有","1991","正常","macos","可视化","：","第一句","，","啦","to","各样","$","人工","会","其","第二句","此时","lts","第一","仿真器","后","release","互联网","基本相同","普通","构建","影响","精神","命名","turtle","奥义","自己","芬兰","目前","但","时","usr","核心","lang","时候","redhat","会加","~","名字","githubusercontent","一句","开始","ubuntu","报错","通过","激发","以","各种各样","gnupg","二句","仿真","领域","概念","为了"," ","最为","智能","上层","guyuehome","可视","ubuntu20.04","archive","程序","呢","甚至","04","一石激起千层浪","重新","动手","问题","教程","前先要","变动","爱好","先要","unix","维护","稳定","外衣","绑定","curl","通讯","月","版","teleop","(","迅猛","并且","除此之外","]","小海","download","如遇","37844","示例","机器","长期","简介","从","接下来","apt","大学","o","windows","talker","keyring","sudo","下载","7","当中",":","因为","一样","workstation","探索","放到","多个","4","说干就干","无论","林纳斯","print","唯一标准","重要","接触","到","叫做","适用","自行","好后","运行","优先","都","https","计算机","终端","伴随","_","回到","bashrc","常用","可能","最大","share","failed","经典","接下","链接","试一试","keyrings","验证","locales","版本","多任务","成功","移植","echo","packages","运动","18","实现","codename","这里","这个","key","发布者","衡量","地址","顺序","把","为例","bug","更新","修复","加上","opt","us","依然","下","蕴藏","看到","list","发挥","cpp","主要","创建","服务器","你","请","原有","合适","键盘","讲解","操作方法","启动","添加","出于","介绍","叫","arch","没有","成为","节点","后缀","每年","摩拳擦掌","一","准确","按键","硬盘","设计","之一","signed","不同","直接","发扬","功能","操作界面","步骤","大量","只","说明","中","节","代表","爱好者","raw","考虑","紧随","大","适合","我们","提到","等等","编码","环境变量","null","起来","/","一应","关于","。","者","看出","或","方法","原理","完成","ros2","发行版","中将","开放","第二个","listener","如果","课程","命令行","上下左右","数字","大小","对","升级","hello","机器人","pro","turtlesim","architecture","快速","来讲","如下","软件","好","六个月","—","”","多人","等待","是","绝对","原本","电脑","sources","用户","资料","update","务器","多用户","字符","华丽","让","ubuntu22.04","lsb","就是","大家"],"title":"ROS2安装方法","title_tokens":["安装","方法","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2","text":"本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。","text_tokens":["linux","最","节","本","系统","我们","安装","一起","。","—","底层","前先要","先要","的","了解","ros2","，","一下","重要","操作系统","操作","一种"],"title":"ROS2安装方法","title_tokens":["安装","方法","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#linux","text":"时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。","text_tokens":["镜像","一些","什么","计算机","界面","并用","乐于","最","伴随","回到","场景","常用","这","源代码","系统","实力","学生","通用","尚","千层","加入","个人","很多","开源","多任务","年","时间","多用","或者","企业","本相","唯一","各种","已有","内核","越来","有限","一般","越来越","强大","免费","并","实现","有","底层","1991","光大","服务","macos","使用","centos","决定","可视化","多","的","给","开发","之前","，","实践","这个","分享","各样","会","应用","衡量","出现","其","此时","依赖","发扬光大","把","每","linux","后","公司","bug","还","之后","修复","互联网","基本相同","上","加上","下","看到","主要","现在","提交","商业","服务器","精神","标准","大学生","命名","传播","原有","参考","不太","一起","算机","自己","讲解","不","fedora","芬兰","操作方法","基本","了","更","一套","目前","出于","但","版本","叫","没有","过程","成为","支持","每年","核心","另外","可以","redhat","准确","兼容","名字","设计","一位","之一","也","ubuntu","操作系统","通过","激发","不同","这套","他","发扬","技术实力","功能","其他","、","操作界面","各种各样","大量","指标","联网","成","硬件","需要","反馈","中","动手做","其中","概念","行列"," ","已经","开发者","情况","爱好者","应该","本","任务","大","适合","我们","热爱","真理","提到","等等","何人","可视","安装","好者","程序","任何人","起来","所以","甚至","呢","一石激起千层浪","重新","动手","。","问题","教程","或","应用软件","方法","原理","互联","爱好","成熟","unix","维护","稳定","虽然","绑定","ros2","外衣","管理","发行版","熟悉","开放","计算","和","之上","迅猛","个人爱好","打包","检验","在","并且","发行","量","等","吸引","一个","对","技术","模式","任何","最好","激起","大学","windows","快速","来讲","做","比如","就","当中","软件","发展","一样","千层浪","放到","先","收费","相同","—","说干就干","代码","林纳斯","多人","是","原本","用户","唯一标准","？","与","务器","多用户","应用程序","性能","华丽","重要","操作","到","叫做","适用","不仅","就是","都","热情"],"title":"Linux系统简介","title_tokens":["简介","linux","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu","text":"我们后续课程使用到的Linux发行版就是 ubuntu系统 。 Ubuntu诞生于2004年10月份， 每六个月发布一个新版本 ，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。","text_tokens":["于","编辑","人工智能","如何","常用","文件","可能","最大","系统","试一试","新","浏览","开发者","很多","版本","各种","年","持续","已有","移植","保证","建议","免费","18","有","选择","其后","使用","之外","虚拟","多","的","这里","开发","紧随其后","月份","，","之前","5","人工","会","应用","虚拟机","出现","顺序","lts","第一","为例","每","linux","还","更新","之后","互联网","普通","上","依然","进行","发挥","2004","未来","主要","网络","影响","你","参考","合适","每隔","发布","自己","讲解","一定","更","了","擦掌","时","介绍","俱全","支持","除了","后缀","摩拳擦掌","环境","时候","可以","会加","之内","除此","硬盘","一下","两年","各个","ubuntu","也","通过","不同","直接","以","其他","一直","、","联网","只","硬件","领域","中","为了"," ","已经","出","代表","第一次","考虑","六个","本","紧随","我们","编辑器","智能","上层","ubuntu20.04","再","安装","个","所以","04","一应","但是","快","。","看出","教程","或","方法","互联","变动","维护","稳定","发行版","比较","通讯","月","熟悉","这样","版","一应俱全","在","如果","课程","发行","很","数字","等","除此之外","软件开发","机器","长期","一个","升级","从","想要","机器人","还是","windows","编号","比如","10","后续","就","2022","诞生","软件","一次","因为","好","六个月","22","4","位置","无论","关注","绝对","效果","是","电脑","用户","资料","性能","表示","重要","接触","让","到","ubuntu22.04","无论是","自行","就是","大家","优先","浏览器","都","其中","占据"],"title":"Ubuntu系统简介","title_tokens":["ubuntu","简介","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu_1","text":"虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下：","text_tokens":["一个","后","其他软件","pro"," ","com","构建","系统","下载","工作","就","我们","软件","如下",":","请","www","安装","workstation","已有","/","多个","同时","。","相同","并","是","虚拟","采用","准备","完成","https","的","这里","环境","：","products","另外","html","可以","，","啦","evaluation","之上","和","开始","让","操作","虚拟机","叫做","自行","在",".","-","运行","大家","其他","地址","vmware","步骤"],"title":"Ubuntu虚拟机安装","title_tokens":["安装","ubuntu","虚拟","虚拟机"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1","text":"下载链接： https://ubuntu.com/download/desktop","text_tokens":["下载","链接","/",":","ubuntu"," ",".","com","download","https","：","desktop"],"title":"1. 下载系统镜像","title_tokens":["下载","镜像","."," ","1","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2","text":"","text_tokens":[],"title":"2. 在虚拟机中创建系统","title_tokens":["创建","中","虚拟机"," ","虚拟",".","在","2","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3","text":"","text_tokens":[],"title":"3. 设置虚拟机硬盘大小","title_tokens":["设置","硬盘","虚拟机"," ","虚拟",".","3","大小"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4-ubuntu","text":"","text_tokens":[],"title":"4. 设置Ubuntu镜像路径","title_tokens":["4","设置","镜像","ubuntu","路径"," ","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#5","text":"","text_tokens":[],"title":"5. 启动虚拟机","title_tokens":["5","虚拟机"," ","虚拟",".","启动"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#6","text":"","text_tokens":[],"title":"6. 设置用户名和密码","title_tokens":["设置","和","6","户名"," ",".","用户名","密码","用户"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#7","text":"","text_tokens":[],"title":"7. 等待系统安装","title_tokens":["7","等待","安装","."," ","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#8","text":"Ubuntu系统安装好后，大家可以先随意使用熟悉一下。","text_tokens":["可以","，","。","熟悉","一下","ubuntu","安装","使用","好后","大家","随意","先","系统"],"title":"8. 完成安装","title_tokens":["8","安装"," ",".","完成"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_1","text":"接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下：","text_tokens":["把","中","接下来","接下","系统","就","我们","如下","下来","安装","了","。","：","ros2","可以","，","ubuntu","到","步骤"],"title":"ROS2系统安装","title_tokens":["安装","ros2","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1_1","text":"$ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8","text_tokens":["8","all","utf","_","apt"," ","us","=","en","sudo","locales","install","gen","&&","export","lc","lang","update","$","locale",".","-"],"title":"1. 设置编码","title_tokens":["设置","编码","."," ","1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2_1","text":"$ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844","text_tokens":["_","share","failed","keyrings","echo",")","packages","codename","[","，","to","key","$","dpkg","-","org","release","rosdistro","gpg","list","connect","www","install","参考","ros","deb","arch","usr","os","|","etc","githubusercontent","ubuntu","报错","http","signed","source",".","--","\"","gnupg","d","main",">","“"," ","com","raw","guyuehome","null","archive","/","master","dev","curl","ssl","ros2","(","]","37844","如遇","apt","o","by","architecture","=","keyring","sudo","可",":","&&","”","sources","print","update","lsb","tee","https"],"title":"2. 添加源","title_tokens":["添加","源"," ",".","2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3-ros2","text":"$ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop","text_tokens":["desktop","$","upgrade","apt","install","humble"," ","-","ros","update","sudo"],"title":"3. 安装ROS2","title_tokens":["安装"," ",".","3","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4","text":"$ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。","text_tokens":[">","setup","中","opt"," ","bashrc","已经","bash","系统","就","安装","好","ros","/","echo","了","。","至此","ros2","，","~","$","source","humble",".","在","\""],"title":"4. 设置环境变量","title_tokens":["4","设置","环境变量","环境变"," ",".","环境","变量"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_2","text":"为了验证ROS2安装成功，我们可以通过以下示例进行测试。","text_tokens":["可以","验证","，","以下","测试","我们","。","通过","安装","为了","进行","成功","示例","ros2"],"title":"ROS2示例测试","title_tokens":["测试","示例","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_1","text":"先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。","text_tokens":["run","一个","终端","world","“","hello","传输","说明","中","_","nodes"," ","最为","通信","talker","dds","cpp","系统","命令","demo","是否","字符串","py","发布","来","数据","先","启动","订阅","。","者","两个","问题","第一个","”","底层","正常","没有","节点","试试","第二","吧","的","：","ros2","以下","，","字符","第二个","$","重要","发布者","通过","listener","如果","在","第一","二个"],"title":"示例一：命令行示例","title_tokens":["命令","：","命令行","示例","一"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_2","text":"再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["run","一个","终端","二句","仿真器","“","仿真","中","海龟","turtlesim","_","上下左右"," ","蓝色","上","该","蕴藏","经典","上下","后续","左右","就","试一试","如下","我们","真器","再","turtle","奥义","安装","持续","键盘","来","ros","探索","成功","关于","启动","分别","。","运动","两个","第二句","教程","—","”","至此","小海龟","节点","第二","的","将","：","ros2","第一句","中将","可以","，","一句","控制","key","按键","背景","$","teleop","啦","指令","点击","在","小海","运行","node","示例","第一"],"title":"示例二：小海龟仿真示例","title_tokens":["仿真","小海龟","海龟","二","小海","示例","："]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/","text":"ROS2命令行操作 在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。 Linux中的命令行 类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。 启动方式 回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。 常用命令操作 我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。 ROS2中的命令行 ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。 运行节点程序 想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看节点信息 当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim 查看话题信息 当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose 发布话题消息 想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 发送服务请求 一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\" 发送动作目标 想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\" 录制控制命令 系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["一些","rotateabsolute","如何","该","系统","及其","受","服装","随身带","呀","某","想","[","约束","小海龟","请求","使用","+","统管","多","的","2","之前","这种","子目","cmd","-","保留","列出","实验室","linux","rate","由","还","规则","消息","精心","上","商家","进行","至今","语法","不太","内容","1.8","一起","gedit","发布","数据","不","后边","pwd","一定","了","不过","一二十","呈现","topic","拷贝到","现出","可以","terminal","也","根据","具体",".","\"","指令","感兴","“","鼠标","海龟","已经","3","本","什么样","至于","编辑器","新建","做好","下来","转","1","linear","17","适应","笔记本","片段","熟悉","小","以上","名称","炫酷","很","等","原因","一个","路径","想要","还是","比如","就","2022","源文件","拷贝","一次","均","来","先","一二","第一个","衣服","现有","解决","将","？","复制","与","操作","node","一种","什么","继续","工具","窗口","文件夹","场景","不一","文件","这","死机","命令","而是","很多","或者","改了","推出","背","容易","很少","怎么","必不可少","并","查","服务","选择","本节","逛去","逛来逛去","干什么","件夹","参数","应用","去","目","run","每","其上","进一步","发指","call","未来","看看","标目","angular","ros","记忆","被",",","更","商场","mkdir","bag","输入","db3","一下","又","另","--","其他","一直","、","成","体会","此",">","0.2","右键","需要","感觉","管理员","第一次","出","不是","二十","搜索","绝对路径","<","一只","目的","再","所以","文件名称","动作","但是","移入","一边","为什么","有点","忙","初次","2.0","虽然","精心设计","了解","管理","…","控制","这样","和","在","段","absolute","想象","rm","既定","对于","多到","复制到","知道","真器","灵活","看似","service","相同","硬","z","选项","地","度高","info","学习","布料","令人","背景","表示","快捷键","cd","目录","删除","于","编辑","record","还有","spawn","完全","为","数量","机制","需求","工作","goal","科幻","theta","各种","turtle1","则","有","0","正常","里边","复现","可视化","：","，","啦","十个","$","调用","会","既","改名","此时","带领","第一","体操","40","产生","主目录","仿真器","后","用","总","款式","turtle","方式","自己","指定","权限","pub","只是","但","看不到","结合","核心","不可","时候","这项","'","感兴趣","系列","通过","调试","以","name","哪些","仿真","及","黑客","概念","死记"," ","科幻电影","哪","不变","rosbag2","动","随身","可视","所在","总有","程序","呢","04","觉得","问题","死记硬背","发送","兴趣","teleop","随着","类似","]","小海","35","一系","接下来","当前","一步","写字","sudo","系统管理员","若",":","因为","一样","能够","执行","{","枯燥","多个","无论","麻烦","}","快捷","ls","实验","11","重要","接触","到","叫做","运行","都","geometry","终端","看中","子","_","回到","跟","详细","常用","话题","可能","找","接下","链接","试一试","轻松","例如","rosbag","提供","它","echo","msg","0.0","每次","买","呈现出","实现","自主","这里","保持","材料","alt","这个","key","所有","不到","子目录","满足","帮上","某个","一二十个","把","为例","慢慢","打开","详细信息","播放","mv","具体操作","案例","加上","下","看到","list","t","主要","创建","你","play","一点","原有","一系列","电影","键盘","action","某段","send","twist","启动","文件名","改变","要","没有","cp","节点","孤单","常用命令","令人发指","vel","一","目标","并不一定","设计","不同","rotate","直接","手","功能","感受","从来","中","msgs","大致","y","我们","二十个","确实","起来","集成","异常","/","。","角度","录制","或","目标目录","深色","完成","ros2","pose","难以","深入","尝试","如果","命令行","ctrl","笔记本电脑","对","便捷","当前工作","太","turtlesim","笔记","来讲","一件","如下","软件","好","信息","多种","这些","魅力","—","”","绝对","是","列表","电脑","体验","显示","查看","用户","定制","用到","即可","字符","让","逛来","大家","就是","x","srv","专门","不用"],"title":"ROS2命令行操作","title_tokens":["操作","命令","ros2","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2","text":"在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。","text_tokens":["工具","进一步","中","海龟","案例"," ","第一次","可能","一步","命令","我们","一次","不太","一定","了","更","。","魅力","—","有点","小海龟","适应","本节","使用","多","的","将","ros2","时候","之前","可以","，","学习","感受","重要","接触","到","会","调试","随着","深入","在","如果","小海","运行","命令行","大家","一种","带领","第一"],"title":"ROS2命令行操作","title_tokens":["操作","命令","ros2","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#linux","text":"类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。","text_tokens":["于","什么","一些","工具","看中","场景","完全","不一","为","需求","命令","受","很多","科幻","服装","各种","推出","呀","某","容易","必不可少","每次","买","呈现出","并","约束","服务","里边","自主","使用","逛去","可视化","多","的","逛来逛去","这里","，","材料","所有","这种","满足","会","去","此时","保留","其上","linux","规则","精心","商家","看到","至今","你","一点","款式","方式","电影","一种","自己","ros","不","被","一定","了","商场","但","没有","结合","呈现","现出","不可","时候","可以","并不一定","设计","根据","手","其他","一直","、","功能","成","中"," ","已经","不是","什么样","科幻电影","哪","我们","可视","做好","总有","起来","呢","异常","但是","。","问题","为什么","片段","虽然","精心设计","小","这样","和","炫酷","在","类似","命令行","等","一个","想象","便捷","想要","还是","既定","来讲","对于","比如","一件","就","软件","灵活","看似","一样","能够","来","这些","先","无论","麻烦","是","衣服","现有","解决","度高","定制","？","布料","操作","逛来","大家","就是","都"],"title":"Linux中的命令行","title_tokens":["命令","linux","中","命令行","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_1","text":"回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。","text_tokens":["什么","终端","工具","窗口","回到","数量","常用","这","死机","命令","而是","科幻","随身带","背","很少","怎么","并","有","正常","选择","使用","+","的","：","，","alt","这个","十个","参数","不到","会","应用","既","一二十个","慢慢","打开","后","发指","用","上","看到","t","方式","一系列","电影","记忆","启动","一定","不过","一二十","看不到","令人发指","都","输入","这项","时候","可以","terminal","一下","也","又","系列","通过","手","功能","指令","其他","体会","右键","鼠标","需要","从来","中","黑客","及"," ","不是","二十","本","科幻电影","搜索","至于","我们","二十个","随身","确实","所在","所以","呢","觉得","但是","。","为什么","深色","笔记本","初次","熟悉","难以","随着","在","命令行","很","ctrl","原因","笔记本电脑","对","一系","笔记","写字","多到","就","软件","因为","来","多种","枯燥","魅力","硬","一二","是","列表","电脑","快捷","用到","即可","字符","令人","背景","到","快捷键","操作","叫做","就是","大家","专门","不用"],"title":"启动方式","title_tokens":["方式","启动"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_2","text":"我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。","text_tokens":["编辑","文件夹","回到","为","常用","文件","该","找","系统","工作","链接","命令","及其","或者","则","它","查","[","统管","多","的","：","保持","，","件夹","所有","子目录","会","某个","改名","子目","目","把","列出","主目录","linux","打开","由","mv","用","下","未来","创建","语法","原有","gedit","标目","不","指定","pwd","权限","文件名","了","只是","改变","mkdir","没有","cp","常用命令","拷贝到","一","目标","可以","一下","也","另","以","cd","功能","指令","此",">","感觉","“","管理员","需要","中","及","死记"," ","出","绝对路径","不变","<","我们","编辑器","目的","新建","文件名称","删除","/","移入","。","一边","或","死记硬背","目标目录","管理","…","熟悉","名称","]","一个","rm","路径","当前工作","当前","对于","复制到","sudo","就","源文件","拷贝","系统管理员","若","均","来","执行","这些","先","多个","”","选项","绝对","列表","地","体验","显示","ls","用户","将","复制","大家","目录"],"title":"常用命令操作","title_tokens":["操作","命令","常用命令","常用"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2_1","text":"ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。","text_tokens":["为例","一个","对","什么","linux","继续","一系","仿真","中","概念","接下来","还","跟","具体操作","海龟"," ","话题","下","以","大致","比如","接下","机制","主要","总","就","命令","我们","目的","内容","下来","一起","一系列","集成","后边","。","不过","相同","有","第一个","小海龟","节点","topic","核心","的","了解","干什么","ros2","感受","与","，","可以","所有","参数","表示","也","系列","操作","不同","在","具体","命令行","node","小海","功能","都","第一","体操"],"title":"ROS2中的命令行","title_tokens":["命令","中","命令行","的","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_3","text":"想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["run","仿真","中","想要","海龟","turtlesim","_"," ","进行","命令","我们","例如","turtle","键盘","要","节点","使用","：","ros2","可以","，","控制","key","$","和","teleop","操作","某个","运行","node"],"title":"运行节点程序","title_tokens":["节点","程序","运行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_4","text":"当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim","text_tokens":["感兴","对","哪些","一个","详细信息","子","中","turtlesim","加上","详细","当前"," ","list","系统","就","命令","知道","信息","呢","来","某","ros","它","/","有","节点","查看","的","info","：","ros2","？","可以","，","啦","兴趣","这样","$","感兴趣","如果","运行","node","都"],"title":"查看节点信息","title_tokens":["节点","信息","查看"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_5","text":"当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose","text_tokens":["一个","子","中","还","加上","消息","当前"," ","话题","看到","list","系统","试一试","命令","如下","turtle1","呢","某","数据","/","想","echo","有","使用","topic","查看","的","：","ros2","，","即可","$","pose","都"],"title":"查看话题信息","title_tokens":["信息","话题","查看"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_6","text":"想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":["geometry","rate","想要","海龟","还","_"," ","话题","msgs","命令","y","动","我们",":","1.8","turtle1","起来","发布","angular","1","linear","/","{","twist","msg",",","0.0","pub","z","topic","}","2.0","vel","：","ros2","可以","，","控制","$","通过","直接","cmd","命令行","x","--","\"","指令"],"title":"发布话题消息","title_tokens":["话题","发布","消息"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_7","text":"一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\"","text_tokens":["一个","产生","仿真器","0.2","仿真","spawn","太","海龟","还","turtlesim"," ","call","试一试","y","一只","我们","真器","改了","theta",":","再","提供","来","service","/","{",",","—","服务","孤单","}","2","：","ros2","，","'","$","调用","x","name","\"","srv"],"title":"发送服务请求","title_tokens":["发送","服务","请求"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_8","text":"想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\"","text_tokens":["一个","rotateabsolute","仿真器","仿真","中","想要","海龟","_","turtlesim"," ","3","比如","命令","真器","goal","theta",":","提供","turtle1","转","action","send","动作","指定","/","角度","忙","完成","发送","的","：","目标","ros2","可以","，","这个","这样","$","让","到","通过","帮上","rotate","具体","命令行","\"","absolute"],"title":"发送动作目标","title_tokens":["发送","动作","目标"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_9","text":"系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["把","40","每","实验室","一个","record","还有","播放","子","中","想要","_","回到","如何","还是","功能","用"," ","常用","看看","这","系统","rosbag2","轻松","2022","命令","我们","play","很多","rosbag","再","下来","好","turtle1","某段","数据","04","自己","17","/","。","录制","有","实现","0","bag","复现","的","vel","：","ros2","？","与","，","啦","以上","实验","db3","可以","$","11","尝试","如果","cmd","-","运行","很","35","段",".","就是","大家"],"title":"录制控制命令","title_tokens":["控制","命令","录制"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","text":"ROS2开发环境配置 ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。 Git git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git 下载教程源码 《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。 VSCode Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download VSCode插件配置 为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。 中文语言包 Python插件 C++插件 CMake插件 vscode-icons ROS插件 Msg Language Support Visual Studio IntelliCode URDF Markdown All in One VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["一些","项目","终端","工具","编辑","all","几千","_","文件夹","最","编译","如何","文件","可能","《","这","记事","源代码","系统","链接","命令","新","不开","开源","开发者","很多","推荐","非常","版本","广泛","浏览","年","提供","网站","因","推出","intellicode","配置","已有","以及","迅速","常听到","msg","上万","每次","强大","并","clone","特性","有","网上","里边","记事本","使用","macos","成千上万","的","给","多","：","成千","开发","这里","，","之父","件夹","搭建","所有","$","自动","in","人工","无限","会","应用","github","21","驱动","python","-","gitee","行","linux","丰富","git","几千万","bug","编写","还","修复","之后","非常简单","用","进行","studio","看到","管理工具","support","管理软件","中文","提交","2015","内容","方式","install","visualstudio","一系列","自己","ros","千上万","不","被","了","更","vscode","源码","但","理工","人","成为","支持","两款","环境","码云","另外","下载方式","可以","设计","也","操作系统","系列","不同","官方","调试","冲突","直接","具体",".","有些","一款","功能","增加","、","国内","大量","千万","只","硬件","需要","中","插件","为了"," ","com","出","》","高效","个人","code","搜索","合并","中会","我们","切换","等等","guyuehome","编辑器","扩展","c++","变更","tutorials","安装","审核","自带","所以","语言","呢","集成","简单","/","urdf","神兵","轻量","开发工具","。","功能强大","教程","方法","判断","组件","准备","完成","不会","linus","https","肯定","ros2","管理","利器","入门","便于","以上","这样","和","官方网站","讲","离不开","在","如果","课程","markdown","略显","download","示例","机器","喜欢","一个","one","一系","机器人","apt","windows","快速","做","比如","一行","后续","sudo","下载","就","cmake","软件","发展",":","好","visual","作为","icons","这些","先","多个","—","代码","微软","语言包","是","听到","复杂","查看","简称","官方网","而生","这款","哪里","？","与","language","之间","重要","让","操作","众多","广泛应用","大家","贡献","浏览器","都"],"title":"ROS2开发环境配置","title_tokens":["配置","环境","ros2","开发"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros2","text":"ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。","text_tokens":["机器","一些","工具","需要","git","机器人","编写","编译","如何","做","中会","不开","我们","推荐","提供","配置","呢","ros","这些","先","开发工具","。","vscode","源码","—","代码","准备","查看","完成","的","给","环境","肯定","两款","开发","？","，","和","重要","离不开","课程","大家","示例","、","大量"],"title":"ROS2开发环境配置","title_tokens":["配置","环境","ros2","开发"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#git","text":"git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git","text_tokens":["项目","终端","工具","几千","可能","这","系统","命令","新","开源","开发者","非常","版本","广泛","网站","因","已有","以及","迅速","常听到","上万","每次","并","特性","有","使用","成千上万","的","成千","开发","，","之父","所有","$","自动","人工","会","应用","github","驱动","gitee","行","linux","git","几千万","bug","修复","之后","非常简单","进行","看到","管理工具","管理软件","提交","内容","install","千上万","不","被","了","理工","人","码云","可以","设计","也","不同","冲突","直接","具体","有些","功能","一款","增加","国内","千万","硬件","需要","中"," ","高效","合并","切换","等等","我们","变更","安装","审核","所以","简单","。","方法","判断","完成","不会","linus","肯定","管理","和","在","一个","apt","比如","一行","sudo","就","软件","发展","这些","多个","—","代码","是","听到","而生","这款","哪里","之间","让","众多","广泛应用","大家","贡献","都"],"title":"Git","title_tokens":["git"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_1","text":"《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。","text_tokens":["一个","git","中","_","文件夹","还"," ","com","用","文件","》","《","记事","系统","下载","就","浏览","guyuehome","很多",":","推荐","tutorials","方式","好","自带","集成","/","更","。","vscode","源码","clone","有","—","代码","里边","记事本","是","复杂","查看","多","的","这里","环境","：","ros2","另外","下载方式","开发","，","入门","件夹","这样","$","和","讲","会","21",".","如果","课程","略显","浏览器","https","gitee"],"title":"下载教程源码","title_tokens":["下载","源码","教程"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode","text":"Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download","text_tokens":["项目","一个","编辑","linux","丰富"," ","com","studio","windows","快速","源代码","系统","code","2015","下载","链接","编辑器","扩展","非常",":","年","网站","推出","visual","visualstudio","/","神兵","轻量","功能强大","。","vscode","强大","但","代码","微软","macos","成为","是","支持","组件","简称","官方网","https","的","：","开发","利器","可以","，","搭建","和","操作系统","操作","官方","官方网站","在",".","download","功能","、"],"title":"VSCode","title_tokens":["vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode_1","text":"为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。","text_tokens":["一系","插件","还","为了","后续","我们","扩展","安装","一系列","。","vscode","的","ros2","开发","与","，","可以","便于","系列","无限","调试","功能"],"title":"VSCode插件配置","title_tokens":["vscode","配置","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_2","text":"","text_tokens":[],"title":"中文语言包","title_tokens":["语言包","语言","中文"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#python","text":"","text_tokens":[],"title":"Python插件","title_tokens":["python","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#c","text":"","text_tokens":[],"title":"C++插件","title_tokens":["插件","c++"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#cmake","text":"","text_tokens":[],"title":"CMake插件","title_tokens":["cmake","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode-icons","text":"","text_tokens":[],"title":"vscode-icons","title_tokens":["-","vscode","icons"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros","text":"","text_tokens":[],"title":"ROS插件","title_tokens":["ros","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#msg-language-support","text":"","text_tokens":[],"title":"Msg Language Support","title_tokens":["msg","language"," ","support"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#visual-studio-intellicode","text":"","text_tokens":[],"title":"Visual Studio IntelliCode","title_tokens":["visual"," ","intellicode","studio"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#urdf","text":"","text_tokens":[],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#markdown-all-in-one","text":"VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["喜欢","只","最","插件","出","搜索","个人","推荐","作为","配置","自己","。","vscode","网上","支持","的","环境","开发","可以","，","以上","也","众多","在","大家"],"title":"Markdown All in One","title_tokens":["one","all","in","markdown"," "]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/","text":"DDS Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。 通信模型 DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。 DDS DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。 什么是DDS 好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是 Data Distribution Service ，也就是 数据分发服务 ，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。 DDS在ROS2中的应用 DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。 质量服务策略QoS DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是 Domain ，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为 数据提供者和接收者之间的合约 。 具体会有哪些策略？比如： DEADLINE 策略，表示通信数据必须要在每次截止时间内完成一次通信； HISTORY 策略，表示针对历史数据的一个缓存大小； RELIABILITY 策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式； DURABILITY 策略，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。 案例一：在命令行中配置DDS 我们先来试一试在命令行中配置DDS的参数。 启动第一个终端，我们使用best_effort创建一个发布者节点，循环发布任意数据，在另外一个终端中，如果我们使用reliable模型订阅同一话题，无法实现数据通信，如果修改为同样的best_effort，才能实现数据传输。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort 如何去查看ROS2系统中每一个发布者或者订阅者的QoS策略呢，在topic命令后边跟一个\"--verbose\"参数就行了。 $ ros2 topic info /chatter --verbose 案例二：DDS编程示例 接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。 运行效果 启动两个终端，分别运行发布者和订阅者节点： $ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub 可以看到两个终端中的通信效果如下，和之前貌似并没有太大区别。 看效果确实差不多，不过底层通信机理上可是有所不同的。 发布者代码解析 我们看下在代码中，如果加入QoS的配置。 learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , }, 订阅者代码解析 订阅者中的QoS配置和发布者类似。 learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], }, DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们主要带领大家认识DDS，更多使用方法和相关内容，大家也可以参考下边的链接进行学习。 参考链接 https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["构图","一些","举","填充","模块","任意","通道","听说","蓝色","如何","完整","系统","海军","开源","不好","非常","时间","讲到","完整性","第一种","保证","想","黑入","预测","晚","spin","[","底层","design","请求","使用","可信赖","多","的","交换","之前","既然","提供者","保障","一条","这种","古月","env","0.5","python","包含","-","秒","派","舰船","国防","列出","world","丰富","名","有人","由","timer","消息","提","进行","上","保证数据","二种","dds","网络","处理速度","接收","self","www","标准","策略","综合","内容","depth","参考","一起","发布","数据","rmw","不","遥控器","后边","一定","了","不过","回忆","航拍","过程","distribution","topic","环境","的话","另外","可以","可信","各个","也","建模","冰山","humble","根据","具体",".","callback","\"","指令","整个","某一","感兴","main","logger","subscribernode","第三","传输","“","implementations","真实","所","已经","com","周期","通信","差不多","publishing","并行","下来","之","火锅","定位","keep","1","最早","*","所有人","全局","价值","适应","美国","python3","history","三种","神经网","厂商","肯定","性","就行了","导致","便于","第二种","加密","纠结","讲","程度","关系","二","很","deadline","半天","等","回调","关闭","一个","拿","技术","模式","different","utf","last","旋转","还是","借助","比如","做","就","资源","理解","可","一次","how","按照","）","主","learning","当然","来","!","一新","先","定时","两个","位置","第一个","对象","效果","解决","best","第二","将","std","？","进入","与","规模","none","那个","没","信赖","频繁","node","一种","图","行为","什么","中间件","默认","服务端","速度","定义","传送","场景","编译","文件","《","中心","这","en","包","qoshistorypolicy","命令","很多","个人","或者","年","顺利","数据通信","生变","配置","视频","订阅","优势",")","看","并","服务","找到","能源","1989","高通","选择","服务质量","丢失","例子","给","开发","转移","shutdown","参数","架构图","应用","无人机","去","行业","出现","org","点对点","run","每","进一步","相当于","解析","编写","单独","好吃","架构","bin","2004","质量","现在","先进","商业","当","强制","至关","供者","掉","py","小组","类","受到","类型","初始化","ros","组织","循环","框架","体","基本",",","更","退出","一套","一旦","相关","html","运转","兼容","一下","--","其他","、","冰山一角","成","需要","焕然一新","数据通","情况","不是","应该","无法","我","那该","设置","console","（","所以","处于","动作","但是","domain","接收者","有点","guides","提高","授权","成立","管理","函数","super","控制","这样","和","之上","原则","helloworld","bilibili","在","@","门","区别","string","4g","def","重大","i","=","它们","sysml","向","连接数","高速","知道","灵活","分组","service","effort","宗旨","占用","模型","决策","通路","无人","代码","连接","选项","复杂","容性","建模语言","地","父类","无用","info","输出","学习","缓存","应用程序","红色","性能","表示","当于","广泛应用","下边","效率","认识","于","8","忽略","uml","还有","建设","setup","而且","数以千计","为","coding","就行","帧","发生变化","空间","工业","需求","新","加入","字符串","收到","各种","广泛","分布式","企业","居","发生","同样","create","不管","日志","分别","heard","发送给","修改","感知","有","__","正常","通信模型","明显","而言","：","集中处理","，","啦","to","$","qos","相当","会","优化","驱动","此时","带领","第一","建立","集中","后","articles","video","用","符合","影响","该用","交通","multiple","课","方式","大大","自己","医疗","处理","指定","第三种","本身","pub","增长","只是","时","但","usr","使命","针对","核心","不多","时候","concepts","由于","'","通常","感兴趣","四大","通过","要求","其实","以","name","42","哪些","领域","entry","黑客","ros1","流畅","为了"," ","get","每条","最为","实时","历史数据","publishernode","高效","强调","哪","不变","上层","guyuehome","入口","程序","神经网络","呢","\\","兼容性问题","入个","问题","流畅性","无论如何","必须","不感兴趣","维护","发送","publisher","绑定","chatter","来到","他们","兴趣","一角","(","遥控","库","互相","类似","并且","]","示例","送给","单位","机器","到底","编程","啥意思","接下来","上边","更加","主讲人","一步","尽可能",":","边","from","import","一样","作为","能够","middleware","；","得","执行","{","points","多个","subscription","无论","合约","麻烦","}","真正","class","刚才","之间","重要","生态","到","过去","众多","销毁","运行","尽可","才能","都","https","广播","那","终端","profile","尽量","来看","技术标准","_","大大提高","跟","corba","qosprofile","话题","常用","可能","像","复用","接下","在于","接口标准","组成部分","试一试","链接","第四种","5g","版本","提供","working","data","docs","它","echo","主讲","msg","每次","运动","实现","特性","办法","数据传输","分布","同一个","reliable","图像","这里","提示","尽力","存在","这个","看下","所有","自动","发布者","满足","#","接口","21","专利","至关重要","verbose","地址","部分","终于","rclpy","行","把","为例","打开","组成","案例","下","兼容性","看到","主要","创建","服务器","你","更好","增多","据传","四种","客户端","durability","机理","客户","合适","带","可见","启动","int32","介绍","要","角色","没有","选用","成为","节点","中间","差别","双方","关心","人机","一","历史","延时","放在","设计","sub","欢迎","太多","不同","直接","%","有些","功能","大量","能力","只","分发","publish","说明","中","这么","》","msgs","scripts","大","对应","我们","提到","全称","能响","确实","id","航空","语言","有所","异常","/","vendors","避免","垂直","。","几种","者","过","或","作者","每个","方法","args","内","完成","吃","第四","结构","ros2","前边","貌似","具体地址","入门","处","初始","listener","树莓","尝试","如果","课程","许多","命令行","大小","像是","意思","对","升级","hello","只有","样","靠","华为","机器人","omg","太","快速","s","布式","如下","软件","有所不同","好","broker","信息","这些","非常复杂","瓶颈","databus","qosreliabilitypolicy","说了半天","驾驶","—","”","on","定时器","统一","about","等待","是","焕然","电脑","查看","可是","用户","with","destroy","reliability","务器","字符","init","神经","点","同一","让","bv12z4y167w2","大家","就是","任","专门","不用","截止","变化"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds","text":"Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。","text_tokens":["机器","hello","相当于","中","重大","靠","机器人"," ","话题","》","最为","《","主讲人","dds","通信","系统","网络","我","我们","好","讲到","神经网络","来","ros","动作","它","主讲","。","实现","—","底层","服务","过程","是","完成","神经网","都","的","ros2","前边","来到","，","学习","入门","他们","神经","欢迎","古月","相当","讲","当于","21","在","具体","课程","大家","、","终于","变化"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_1","text":"DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。","text_tokens":["广播","服务端","速度","忽略","而且","传送","通道","为","常用","可能","发生变化","中心","这","系统","在于","很多","第四种","非常","收到","各种","提供","发生","生变","第一种","它","想","订阅","优势","每次","并","实现","服务","找到","正常","请求","使用","明显","通信模型","多","这里","的","集中处理","之前","，","这个","所有","一条","这种","会","优化","包含","地址","第一","点对点","行","列出","建立","集中","有人","由","进一步","单独","消息","好吃","架构","进行","上","二种","dds","先进","影响","处理速度","服务器","当","增多","四种","客户端","客户","发布","受到","一种","自己","数据","处理","可见","框架","第三种","一定","了","更","不过","增长","时","一旦","角色","但","没有","成为","节点","针对","核心","双方","关心","运转","可以","感兴趣","也","太多","具体","有些","其实","以","其他","整个","感兴","只","第三","需要","中","ros1","所"," ","每条","通信","应该","无法","我们","能响","并行","之","火锅","异常","但是","。","几种","所有人","问题","有点","每个","必须","三种","不感兴趣","吃","第四","具体地址","导致","处","第二种","这样","和","兴趣","程度","关系","如果","类似","在","许多","很","并且","像是","一个","拿","更加","旋转","一步","连接数","就","软件","知道","作为","能够","broker","模型","瓶颈","databus","通路","麻烦","连接","是","解决","第二","真正","与","务器","规模","性能","到","就是","效率","都","不用","变化"],"title":"通信模型","title_tokens":["通信模型","通信","模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_1","text":"DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。","text_tokens":["一个","模块","需要","领域"," ","已经","借助","不是","通信","比如","dds","它们","需求","高速","新","很多","交通","非常","广泛","方式","好","航空","数据","医疗","定位","这些","决策","。","预测","感知","并","驾驶","能源","地","的","ros2","交换","之前","存在","，","可以","通常","和","自动","满足","会","应用","频繁","在","广泛应用","很","等","都","国防"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_2","text":"好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是 Data Distribution Service ，也就是 数据分发服务 ，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。","text_tokens":["于","中间件","uml","还有","数以千计","技术标准","为","听说","corba","完整","可能","中心","系统","需求","海军","分布式","各种","年","提供","data","它","订阅","服务","分布","1989","服务质量","的","这里","开发","，","啦","保障","满足","应用","行业","舰船","丰富","由","进行","兼容性","dds","2004","质量","现在","网络","标准","策略","课","强制","发布","数据","组织","一套","介绍","使命","成为","distribution","中间","环境","可以","兼容","一下","设计","也","建模","以","、","大量","分发","中","真实"," ","已经","实时","通信","高效","强调","我们","全称","语言","呢","/","最早","兼容性问题","垂直","。","问题","过","价值","美国","维护","成立","管理","和","半天","等","意思","一个","到底","技术","升级","啥意思","omg","做","比如","sysml","布式","可","软件","灵活","好","当然","来","service","说了半天","对象","统一","是","解决","复杂","容性","地","建模语言","？","就是","提","大家","专门"],"title":"什么是DDS","title_tokens":["是","什么","dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#ddsros2","text":"DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。","text_tokens":["构图","那","中间件","模块","建设","尽量","场景","大大提高","蓝色","如何","就行","可能","像","复用","任","系统","工业","接口标准","组成部分","开源","加入","很多","5g","个人","版本","分布式","企业","时间","不管","保证","想","实现","有","选择","分布","高通","使用","而言","多","的","这里","给","开发","，","这个","既然","转移","所有","架构图","会","应用","接口","驱动","专利","至关重要","部分","此时","把","每","建立","组成","用","架构","上","兼容性","符合","dds","商业","影响","你","该用","标准","综合","至关","大大","自己","ros","不","组织","基本","了","更","但","要","过程","选用","差别","中间","都","可以","由于","兼容","放在","设计","也","四大","根据","具体","功能","其他","、","某一","能力","需要","中","这么","为了"," ","通信","哪","不变","对应","我们","提到","上层","所以","呢","。","问题","或","无论如何","提高","厂商","授权","肯定","ros2","函数","性","他们","这样","之上","和","原则","纠结","在","如果","机器","一个","对","技术","编程","4g","华为","上边","机器人","还是","比如","就","布式","可","软件","边","按照","一样","能够","middleware","得","来","宗旨","多个","位置","无论","代码","统一","是","容性","用户","刚才","？","进入","红色","性能","重要","那个","让","生态","没","就是","大家","下边","一种"],"title":"DDS在ROS2中的应用","title_tokens":["中","应用","在","的","dds","ros2"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#qos","text":"DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是 Domain ，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为 数据提供者和接收者之间的合约 。 具体会有哪些策略？比如： DEADLINE 策略，表示通信数据必须要在每次截止时间内完成一次通信； HISTORY 策略，表示针对历史数据的一个缓存大小； RELIABILITY 策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式； DURABILITY 策略，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。","text_tokens":["行为","一些","举","默认","尽量","定义","来看","_","场景","为","如何","完整","可能","帧","空间","系统","需求","命令","新","不好","加入","时间","顺利","提供","数据通信","配置","完整性","视频","保证","黑入","发送给","每次","晚","运动","特性","实现","有","办法","服务","选择","通信模型","使用","丢失","可信赖","同一个","reliable","图像","的","例子","给","：","尽力","多","之前","这个","，","提供者","啦","所有","参数","qos","这种","满足","会","应用","无人机","出现","派","此时","每","用","进行","下","保证数据","dds","质量","网络","接收","更好","策略","durability","供者","客户","合适","一起","掉","小组","数据","带","ros","不","遥控器","指定","体","基本","一定","了","回忆","航拍","要","没有","过程","节点","针对","都","人机","时候","另外","历史","可以","的话","延时","可信","各个","也","通过","要求","不同","根据","具体","直接","功能","指令","成","哪些","传输","需要","焕然一新","中","黑客","所","流畅","这么"," ","数据通","情况","历史数据","通信","那该","我们","id","程序","处于","呢","但是","入个","domain","避免","。","全局","接收者","流畅性","必须","适应","内","history","完成","发送","结构","绑定","ros2","控制","导致","便于","这样","加密","和","遥控","树莓","关系","在","互相","类似","截止","deadline","如果","大小","送给","机器","门","对","一个","模式","只有","样","机器人","快速","比如","向","理解","资源","一次","尽可能","分组","好","；","effort","这些","占用","一新","模型","先","无人","合约","是","焕然","电脑","地","best","将","无用","？","reliability","缓存","之间","应用程序","表示","重要","那个","同一","让","过去","信赖","众多","就是","尽可","才能","大家","一种","图"],"title":"质量服务策略QoS","title_tokens":["qos","策略","服务","质量"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_3","text":"我们先来试一试在命令行中配置DDS的参数。 启动第一个终端，我们使用best_effort创建一个发布者节点，循环发布任意数据，在另外一个终端中，如果我们使用reliable模型订阅同一话题，无法实现数据通信，如果修改为同样的best_effort，才能实现数据传输。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort 如何去查看ROS2系统中每一个发布者或者订阅者的QoS策略呢，在topic命令后边跟一个\"--verbose\"参数就行了。 $ ros2 topic info /chatter --verbose","text_tokens":["终端","任意","_","跟","为","如何","话题","系统","试一试","命令","或者","数据通信","同样","配置","data","echo","订阅","msg","修改","实现","数据传输","使用","reliable","的","，","$","参数","qos","发布者","去","-","verbose","第一","每","dds","创建","据传","策略","发布","数据","循环","后边","启动","pub","int32","节点","topic","另外","--","\"","42","传输","中"," ","数据通","msgs","通信","无法","我们","呢","/","。","者","chatter","ros2","就行了","在","如果","命令行","一个",":","来","effort","模型","先","第一个","best","查看","info","std","reliability","同一","才能"],"title":"案例一：在命令行中配置DDS","title_tokens":["命令","中","：","案例","在","配置","命令行","dds","一"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_4","text":"接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。","text_tokens":["为例","world","hello","中","接下来"," ","话题","通信","dds","接下","我们","下来","配置","。","代码","之前","，","尝试","在","以"],"title":"案例二：DDS编程示例","title_tokens":["编程","案例","二","示例","dds","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_2","text":"启动两个终端，分别运行发布者和订阅者节点： $ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub 可以看到两个终端中的通信效果如下，和之前貌似并没有太大区别。 看效果确实差不多，不过底层通信机理上可是有所不同的。","text_tokens":["run","终端","区别","中","太","_"," ","上","看到","通信","差不多","大","如下","有所不同","确实","机理","learning","有所","发布","启动","订阅","分别","。","者","pub","看","两个","并","不过","底层","没有","节点","效果","可是","的","不多","：","ros2","之前","可以","，","貌似","$","和","qos","发布者","helloworld","sub","不同","运行"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_3","text":"我们看下在代码中，如果加入QoS的配置。 learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , },","text_tokens":["8","profile","填充","setup","_","编译","为","coding","话题","qosprofile","文件","系统","包","qoshistorypolicy","加入","字符串","居","create","data","配置","日志","msg",")","spin","并","__","[","reliable","提示","的","：","，","看下","shutdown","qos","发布者","env","古月","#","0.5","接口","python","-","秒","rclpy","world","名","打开","后","编写","timer","消息","进行","bin","创建","self","www","类型","py","类","depth","发布","初始化","数据","循环",",","pub","退出","usr","节点","'","callback",".","%","name","\"","功能","、","main","logger","“","publish","需要","说明","中","entry"," ","com","周期","get","msgs","publishernode","已经","scripts","我们","publishing","设置","guyuehome","console","入口","（","程序","1","keep","/","*","。","作者","python3","args","history","完成","publisher","chatter","ros2","super","函数","初始","原则","(","helloworld","库","在","如果","回调","示例","@","关闭","单位","一个","string","hello","def","utf","last","=","s","如下","知道","from",":","import","）","主","learning","信息","effort","执行","!","{","points","定时","qosreliabilitypolicy","”","代码","对象","定时器","等待","选项","}","best","父类","class","info","输出","std","destroy","reliability","字符","init","none","点","让","销毁","node"],"title":"发布者代码解析","title_tokens":["发布者","代码","解析","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_4","text":"订阅者中的QoS配置和发布者类似。 learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], }, DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们主要带领大家认识DDS，更多使用方法和相关内容，大家也可以参考下边的链接进行学习。","text_tokens":["8","profile","定义","setup","_","编译","coding","话题","qosprofile","文件","系统","包","链接","qoshistorypolicy","加入","非常","收到","居","create","data","配置","日志","订阅",")","msg","heard","spin","并","__","[","使用","reliable","提示","的","多","：","，","shutdown","qos","发布者","env","古月","#","接口","python","-","带领","rclpy","world","名","打开","后","编写","消息","进行","bin","dds","主要","创建","self","www","标准","内容","depth","py","类","类型","参考","发布","初始化","数据","处理","循环",",","本身","更","退出","pub","只是","相关","usr","节点","可以","'","sub","也","冰山","callback",".","%","name","\"","功能","、","冰山一角","main","subscribernode","logger","“","需要","说明","中","entry"," ","com","get","msgs","scripts","设置","我们","guyuehome","console","入口","（","程序","1","keep","/","*","。","者","作者","方法","python3","args","history","完成","chatter","ros2","super","函数","一角","初始","和","(","原则","helloworld","listener","库","类似","]","回调","示例","@","关闭","一个","对","string","hello","def","utf","last","i","=","s","如下","知道","from",":","import","）","主","learning","信息","effort","执行","!","非常复杂","{","points","subscription","qosreliabilitypolicy","”","代码","对象","等待","选项","是","}","复杂","best","父类","class","info","输出","std","destroy","reliability","学习","init","none","点","让","销毁","node","大家","下边","认识","\\"],"title":"订阅者代码解析","title_tokens":["订阅","者","解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_5","text":"https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["different","implementations","articles","_","video"," ","com","dds","en",":","how","multiple","www","working","middleware","rmw","docs","ros","vendors","/","design","on","guides","about","https","with","ros2","concepts","html","to","bilibili","humble",".","-","bv12z4y167w2","org"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/","text":"工作空间：开发过程的大本营 大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是 工程 。 工作空间是什么 类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做 工作空间 。 所以工作空间是一个存放项目开发相关文件的文件夹，也是 开发过程中存放所有资料的大本营 。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。 创建工作空间 了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 自动安装依赖 我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init $ rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y 编译工作空间 依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。 设置环境变量 编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["项目","什么","一些","工具","终端","定义","子","setup","大本","_","文件夹","编译","完全","bashrc","数量","文件","生效","en","这","空间","creator","工作","系统","所示","接下","新","命令","自动生产","包","链接","或者","大部分","各种","大部","唯一","配置","某","以及","成功","docs","日志","很少","手动","rosdep","echo","放置","并","有","clone","找到","w","里边","使用","的","这里","2","：","开发","之前","存在","，","这个","件夹","啦","所有","$","参数","典型","自动","子目录","#","会","点击","生产","21","子目","-","sh","出现","部分","此时","依赖","空间结构","允许","gitee","仅","org","产生","log","后","git","编写","编写程序","还","rosdistro","用","studio","进行","看到","保存","根目录","未来","变量","创建","ws","当","一点","内容","绝大","install","参考","一部分","自己","ros","了","至此","path","时","要","相关","mkdir","过程","针对","colcon","中间","脚本","环境","另外","..","可以","html","~","开始","里","也","错误","报错","humble","source",".","cd","功能","--","、","\"","b2",">","workspace","build","“","需要","警告","社区","中","概念","为了"," ","com","3","不是","大本营","情况","应该","src","强调","人为","总体","我们","y","中会","guyuehome","设置","环境变量","多少","tutorials","安装","下来","程序","所以","集成","1","/","缺少","用于","。","过","教程","行文","python3","rosdepc","完成","不会","https","dev","结构","了解","ros2","管理","以上","得到","和","名称","p","存放","关系","在","类似","a","b","并且","如果","等","像是","机器","结果","一个","qt","任何","想要","接下来","机器人","从","apt","i","当前","工具栏","来讲","比如","如图所示","后续","sudo","下载","就","local","如下","均","from",":","一样","工程","visual","；","pip","信息","能够","执行","creating","这些","多个","两个","一部","”","代码","选项","是","否则","eclipse","资料","update","可执行文件","学习","init","绝大部分","接触","让","到","操作","环境变","叫做","并列","四个","pip3","大家","就是","目录","运行","都","某些"],"title":"工作空间","title_tokens":["工作","空间"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_1","text":"大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是 工程 。","text_tokens":["一个","产生","工具","“","qt","中","想要","编写","编写程序","文件夹"," ","studio","工具栏","文件","应该","比如","creator","后续","创建","就","工作","新","当","我们","内容","工程","visual","程序","集成","以及","这些","。","放置","过","有","”","此时","里边","选项","是","eclipse","都","的","环境","开发","之前","学习","，","件夹","这个","所有","和","接触","会","点击","叫做","在","大家","等","、","某些"],"title":"工作空间：开发过程的大本营","title_tokens":["工作","大本","过程","空间","大本营","的","：","开发"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_2","text":"类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做 工作空间 。 所以工作空间是一个存放项目开发相关文件的文件夹，也是 开发过程中存放所有资料的大本营 。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。","text_tokens":["项目","一些","定义","子","大本","_","文件夹","编译","完全","数量","文件","这","空间","系统","工作","所示","新","或者","大部分","各种","大部","唯一","某","成功","日志","很少","放置","并","有","w","里边","的","这里","2","：","开发","存在","，","这个","件夹","所有","参数","典型","子目录","会","子目","部分","空间结构","允许","产生","log","后","编写","用","进行","保存","根目录","未来","创建","ws","一点","绝大","install","一部分","自己","ros","了","时","要","相关","过程","针对","中间","脚本","环境","另外","可以","开始","里","也","错误","功能","、","b2","build","警告","需要","中"," ","3","不是","大本营","情况","src","强调","人为","总体","我们","安装","所以","集成","1","用于","。","行文","dev","结构","管理","以上","得到","和","名称","存放","关系","在","类似","a","b","等","像是","机器","结果","一个","机器人","来讲","如图所示","比如","就","一样","工程","；","信息","执行","多个","两个","一部","代码","是","资料","可执行文件","绝大部分","到","操作","叫做","并列","四个","就是","运行","目录","都","某些"],"title":"工作空间是什么","title_tokens":["工作","是","什么","空间"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_3","text":"了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git","text_tokens":["结果","一个","git","概念","接下来","_"," ","com","接下","空间","工作","创建","下载","命令","ws","我们","如下","src","guyuehome",":","tutorials","下来","/","了","教程","clone","代码","mkdir","使用","dev","的","了解","：","ros2","可以","，","~","$","和","p","21",".","并且","-","cd","https","gitee"],"title":"创建工作空间","title_tokens":["创建","工作","空间"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_4","text":"我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init $ rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y","text_tokens":["一些","一个","工具","社区","中","从","apt","rosdistro"," ","i","src","sudo","下载","y","我们","from","各种","多少","安装","install","pip","--","手动","rosdep","path","有","代码","python3","rosdepc","使用","的","：","update","..","可以","，","init","$","自动","也","会","humble","-","pip3","cd","都","依赖"],"title":"自动安装依赖","title_tokens":["安装","自动","依赖"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_5","text":"依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。","text_tokens":["build","log","后","任何","中","_","apt","文件夹","编译"," ","文件","看到","应该","空间","sudo","工作","就","命令","中会","如下","ws","自动生产","或者","安装","install","ros","成功","缺少","/","了","。","有","代码","python3","过程","否则","使用","colcon","完成","不会","dev","的","：","可以","，","啦","~","件夹","$","自动","错误","报错","生产","如果","-","在","出现","cd","、","依赖"],"title":"编译工作空间","title_tokens":["工作","编译","空间"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_6","text":"编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。","text_tokens":[">","终端","需要","后","setup","_","还","编译","为了"," ","当前","bashrc","文件","生效","空间","系统","包","变量","local","ws","就","我们","设置","工作","均","环境变量","install","能够","配置","执行","成功","/","echo","了","。","至此","找到","行文","完成","创建","dev","的","环境","：","可执行文件","，","~","\"","所有","$","和","让","环境变","#","source",".","sh","在","功能","、","仅"],"title":"设置环境变量","title_tokens":["设置","环境变量","环境变","环境","变量"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_7","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["workspace",":","org","tutorials","humble",".","ros"," ","-","creating","en","docs","a","https","/","html"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/","text":"功能包：开发过程的大本营 在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做 功能包 。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。 创建功能包 如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python 编译功能包 在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash 功能包的结构 功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。 C++功能包 首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。 Python功能包 C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["一些","那","终端","继续","还有","尽量","setup","大本","_","文件夹","跟","编译","cmakelists","如何","数量","文件","该","可能","复用","en","bash","找","空间","机制","包","工作","这","命令","链接","别人","而是","很多","或者","是否","版本","版权","各种","create","配置","必然","docs","头疼","想","分别","看","感知","并","有","才能","正常","自主","里边","使用","之外","手上","例子","多","的","给","这里","：","开发","存在","，","这个","件夹","分享","所有","$","#","会","python","包含","-","只想","依赖","org","把","移动","解析","包是","编写","之后","规则","普通","用","下","看到","很快","包中","主要","五颜六色","绿豆","降低","创建","划分","ws","当","你","变量","包该","语法","译成","内容","类型","install","py","一起","参考","ros","讲解","不","了","源码","时","要","但","相关","介绍","过程","举个","colcon","package","是否是","视觉","环境","时候","红豆","可以","html","~","声明","放在","名字","xml","除此","之一","里","也","first","不同","一颗","source","humble",".","假设","--","功能","三个","、","指令","name","type","越","只",">","workspace","build","“","需要","社区","说明","中","entry"," ","不是","大本营","txt","src","<","我们","设置","c++","新建","环境变量","入口","tutorials","所以","语言","起来","呢","程序","混合","发现","/","但是","。","新创","是不是","教程","每个","原理","颜色","方法","很难","必须","判断","提高","行文","完成","https","dev","结构","ros2","袋子","控制","他们","pkg","名称","和","cmakerlists","关系","编译成","在","如果","除此之外","a","等","your","机器","一个","拿","编程","描述","c","机器人","立刻","率","出来","还是","ament","么","比如","包并","后续","下载","就","local","cmake","黄豆","耦合","软件","导航","如下","型",":","一样","好","拿出","；","learning","信息","当然","得","豆子","来","这些","执行","creating","新创建","放到","points","拆分","某种","两个","”","代码","是","将","刚才","？","可执行文件","首先","之间","表示","重要","到","环境变","叫做","大家","就是","cd","运行","都","其中","某些","分析"],"title":"功能包","title_tokens":["包","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_1","text":"在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做 功能包 。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。","text_tokens":["尽量","文件夹","如何","数量","文件","可能","复用","找","机制","包","别人","而是","很多","头疼","想","感知","并","有","自主","使用","手上","例子","多","的","给","，","这个","件夹","分享","会","只想","把","移动","普通","用","看到","很快","包中","五颜六色","绿豆","降低","划分","当","你","包该","一起","ros","不","了","源码","时","举个","视觉","时候","红豆","可以","放在","之一","里","也","不同","一颗","假设","功能","三个","、","越","只","需要","社区","说明","中"," ","不是","我们","所以","起来","混合","发现","但是","。","是不是","教程","每个","原理","颜色","方法","很难","提高","ros2","袋子","控制","他们","名称","关系","在","如果","等","机器","一个","拿","机器人","立刻","率","出来","么","比如","下载","就","黄豆","耦合","软件","导航","拿出","；","当然","得","豆子","这些","放到","拆分","某种","代码","是","之间","重要","到","叫做","大家","就是","都","其中","某些"],"title":"功能包：开发过程的大本营","title_tokens":["包","的","大本","过程","大本营","功能","：","开发"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_2","text":"如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python","text_tokens":["type",">","一个","那","终端","build","中","_","包是","跟","如何"," ","还是","ament","比如","src","创建","包","就","<","命令","我们","cmake","c++","新建","或者","ws","版本","cd","；","create","learning","呢","新创建","/","分别","name","。","新创","相关","使用","package","dev","的","这里","：","ros2","？","可以","这个","，","pkg","名字","~","$","表示","和","#","python","在","-","如果","--","功能","指令","c"],"title":"创建功能包","title_tokens":["创建","功能","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_3","text":"在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash","text_tokens":["继续","build","需要","setup","_","编写","之后","编译"," ","包中","bash","src","变量","创建","工作","空间","ws","包","我们","local","环境变量","好","cd","install","配置","/","代码","正常","colcon","完成","dev","的","环境","：","可以","，","~","所有","$","和","环境变","#","source","在",".","运行","才能","功能"],"title":"编译功能包","title_tokens":["包","编译","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_4","text":"功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。","text_tokens":["那","一个","文件夹","普通","如何","文件","不是","下","包并","包","创建","我们","是否","呢","来","新创建","。","新创","两个","判断","是否是","的","结构","刚才","？","，","件夹","功能","分析"],"title":"功能包的结构","title_tokens":["包","功能","结构","的"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#c","text":"首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。","text_tokens":["需要","描述","中","cmakelists","编译"," ","规则","如何","下","文件","txt","该","主要","包","语法","cmake","如下","设置","c++","版权","内容","各种","类型","所以","必然","依赖","。","看","两个","要","代码","必须","是","使用","package","的","：","存在","首先","，","声明","xml","和","cmakerlists",".","包含","在","运行","才能","功能","其中"],"title":"C++功能包","title_tokens":["包","功能","c++"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#python","text":"C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。","text_tokens":["一些","还有","“","需要","描述","解析","setup","entry","_","编程","中","编译"," ","如何","文件","这","主要","后续","包","型","译成","我们","c++","版权","版本","内容","各种","入口","一样","py","所以","语言","信息","执行","配置","程序","讲解","不","points","但是","。","源码","两个","有","但","”","介绍","行文","里边","是","之外","使用","package","的","将","给","：","可执行文件","，","声明","除此","xml","和","也","不同","会","编译成","python",".","包含","除此之外","在","大家","功能","依赖"],"title":"Python功能包","title_tokens":["包","功能","python"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_5","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["workspace"," ","en",":","tutorials","creating","ros","docs","/","package","https","ros2","html","first","humble",".","-","a","org","your"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/","text":"节点 机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。 通信模型 完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。 案例一：Hello World节点（面向过程） ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。 运行效果 大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ], 创建节点流程 代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。 案例二：Hello World节点（面向对象） 所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。 运行效果 接下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ], 创建节点流程 所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。 案例三：物体识别节点 没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。 运行效果 在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 Attention 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。 代码解析 在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ], 案例四：机器视觉识别节点 用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。 运行效果 启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 Attention 如果是在虚拟机中操作，需要进行以下设置： 1. 把虚拟机设置为兼容USB3.1； 2. 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。 代码解析 相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ], 节点命令行操作 节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息 思考题 现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["数值","一些","综合体","模块","理过","如何","ok","jpg","完整","该","系统","远程","左右","时间","呀","某","着急","四","spin","[","pyhton","使用","之外","+","虚拟","载体","多","的","苹果","2","之前","外界","既然","上去","可移植性","保障","webcam","read","算是","retr","这种","物体","env","古月","0.5","上角","相机","python","-","world","detect","还","编写程序","方便","上","进行","职责","疑惑","cvtcolor","self","www","综合","参考","一起","发布","不","总体而言","了","不过","过程","吧","环境","的话","另外","可以","除此","里","也","humble","根据","具体",".","\"","稍微","指令","main","左上","logger","硬件","“","nodes","com","周期","通信","乃至","框架图","岂","upper","后勤","想到","shape","考题","下来","java","1","发现","*","看上","python3","helloworldnode","img","轮廓","dev","编码方式","左上角","熟悉","计算","名称","纠结","50","二","b","很","color","等","cap","关闭","结果","一个","路径","各不相同","utf","想要","apple","读取","知其然","还是","框会","比如","做","就","理解","xy","可","）","主","learning","当然","来","!","understanding","time","先","搭载","调整","两个","object","对象","关注","效果","处理过程","home","自然","将","？","坐标","比喻","none","操作","相比","没","识别","四个","node","一种","面积","速度","窗口","更多要","编译","文件","中心","这","推动","en","包","命令","难","是否","或者","获取","配置",")","看","并","这份","waitkey","找到","一线","一台","给","开发","shutdown","5","参数","ret","面向对象","虚拟机","去","出现","org","绿点","run","每","解析","编写","bin","看看","未来","现在","当","py","类","install","算机","更多","初始化","chain","ros","循环","被","框架",",","更","退出","马","然后","destroyallwindows","共同","contours","html","兼容","一下","操作系统","厂房","只不过","、","cv2",">","图像处理","思考","需要","模块化","轮子","具备","出","一张","不是","180","应该","像素","任务","drawcontours","src","<","总体","设置","console","255","再","image","（","安装","所以","前后左右","位于","但是","inrange","来源","虽然","mask","super","函数","approx","控制","以下","这样","h","和","勾勒","至","helloworld","在","面向","这座","@","boundingrect","移植性","像头","def","hcx","=","对于","知道","if","实际","编程语言","图片","模型","却","相同","代码","连接","选项","复杂","父类","info","输出","可执行文件","学习","阈值","红色","表示","生成","np","可读","其中","认识","腿","分析","细胞","绿色","8","还有","没错","setup","宽","red","为","coding","机制","工作","一节","加入","字符串","分布式","各种","收到","摇杆","居","所以然","噪声","唯一","发生","下限","findcontours","日志","分别","修改","有","__","网上","0","正常","通信模型","而言","可视化","中心点","：","，","啦","状态","去除","$","circle","in","会","驱动","array","后","用","流程","ws","命名","做到","方式","动态","思考题","处理","ruby","太小","只是","但","时","videocapture","usr","联系","点画","视觉","hsv","时候","'","名字","还会","开始","进程","休眠","通过","调试","以","name","高","物理","entry","及","概念","地方"," ","get","图像识别","好像","最为","实时","人为","不要","guyuehome","入口","可视","tutorials","所在","程序","呢","简单","重新","三","imread","问题","行文","while","发送","他们","(","检测","过来","库","a","互相","除此之外","]","opencv","类似","并且","示例","可移植","机器","范围","到底","编程","bgr","从","接下来","更为","apt","更加","先拉","出来","摄像","sudo","每一项","from",":","同理","import","一样","；","得","执行","90","{","points","某种","此处","合理","摄像头","class","hierarchy","刚才","之间","监控","重要","到","负责","众多","叫做","销毁","as","运行","都","https","那","计算机","终端","for","来看","_","usb3.1","回到","打印","合体","常用","可能","像","溜溜","最大","接下","链接","推荐","不能","工人","提供","上限","成功","docs","它","骡子","移植","而已","为止","运动","实现","true","重点","保持联系","分布","w","sleep","图像","这里","保持","这个","经常","独立","#","接口","21","imshow","rclpy","把","为例","查询","打开","设备","移动","后勤部门","组成","案例","孤立","依然","下","看到","list","部门","创建","知其所以然","你","更好","一点","模拟","请","attention","128","启动","心里","改变","要","介绍","成为","节点","中间","转换","一","前后","放在","云端","注意","设计","bgr2hsv","不同","功能","int","步骤","会弹","numpy","说明","中","二值化","scripts","lower","y","我们","c++","编码","改成","语言","起来","/","取","关于","看上去","可读性","。","角度","是不是","过","作者","每个","方法","颜色","args","一帧","完成","结构","ros2","中将","初始","眼睛","得到","工厂","cnt","如果","课程","命令行","例程","hello","continue","太","机器人","150","一项","总结","布式","如下","前","好","信息","桌子","多种","这些","”","—","等待","是","列表","就让","电脑","显示","查看","这款","destroy","身体","用到","即可","字符","init","点","让","整体","后勤部","就是","大家","x","不用","某些","变化"],"title":"节点","title_tokens":["节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_1","text":"机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。","text_tokens":["细胞","机器","一些","一个","那","综合体","“","中","机器人","一项","合体"," ","像","机制","工作","就","每一项","我们","各种","综合","一起","ros","这些","取","了","。","”","连接","成为","是","节点","的","给","，","名字","通过","到","整体","众多","在","就是","功能"],"title":"节点","title_tokens":["节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_2","text":"完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。","text_tokens":["细胞","那","计算机","速度","还有","来看","编译","如何","完整","文件","可能","该","这","推动","接下","系统","远程","左右","工作","或者","分布式","工人","摇杆","获取","提供","唯一","配置","某","它","分别","运动","并","有","实现","分布","找到","一线","之外","一台","载体","多","的","：","外界","，","既然","这个","状态","保障","算是","参数","独立","去","python","每","查询","移动","后勤部门","还","认识","组成","上","看到","职责","部门","看看","当","你","命名","一起","算机","不","ruby","了","更","但","时","节点","共同","环境","时候","另外","前后","可以","除此","放在","云端","设计","还会","里","也","进程","操作系统","通过","不同","厂房","根据","具体","功能","、","物理","硬件","“","需要","中","轮子","地方"," ","不是","任务","乃至","人为","后勤","我们","想到","c++","下来","程序","语言","java","前后左右","位于","。","角度","每个","行文","腿","完成","虽然","控制","他们","这样","计算","眼睛","和","得到","名称","工厂","在","a","除此之外","b","互相","这座","等","机器","像头","一个","结果","到底","编程","各不相同","想要","从","机器人","更为","接下来","比如","摄像","做","就","布式","；","信息","桌子","执行","编程语言","来","这些","搭载","却","相同","—","”","连接","是","复杂","摄像头","自然","这款","身体","可执行文件","比喻","监控","让","到","操作","整体","生成","叫做","后勤部","就是","运行","都","某些"],"title":"通信模型","title_tokens":["通信模型","通信","模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world","text":"ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。","text_tokens":["一个","world","例程","终端","“","需要","hello","中","从","编写","编写程序","打印"," ","最为","我们","字符串","程序","当然","来","简单","不","循环","先","了","。","并","实现","”","节点","是","复杂","的","ros2","，","字符","开始","到","就是","功能"],"title":"案例一：Hello World节点（面向过程）","title_tokens":["world","hello","过程","：","（","节点","案例"," ","）","面向","一"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_3","text":"大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["run","终端","world","“","hello","后","中","_","编译","打印","先拉"," ","出来","下","如何","知其然","看到","溜溜","命令","不要","我们","知其所以然","字符串","再","做到","好","所以然","所以","learning","执行","来","成功","循环","骡子","先","着急","。","看","马","实现","然后","”","代码","过程","是","节点","效果","的","ros2","可以","，","这个","字符","$","也","helloworld","通过","在","课程","大家","运行","node","分析"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_4","text":"这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ],","text_tokens":["8","来看","setup","_","编译","如何","coding","ok","文件","系统","包","是否","加入","时间","居","配置","日志",")","并","实现","[","正常","使用","sleep","的","：","这个","，","shutdown","env","古月","#","0.5","接口","python","-","rclpy","world","打开","后","编写","进行","下","bin","创建","www","方式","py","类","发布","初始化","循环",",","usr","过程","节点","'","休眠",".","\"","功能","main","logger","“","需要","说明","entry"," ","com","get","scripts","我们","设置","guyuehome","console","入口","程序","呢","/","*","。","作者","python3","args","完成","while","ros2","函数","控制","初始","(","helloworld","库","]","面向","示例","@","关闭","hello","def","utf","=","如下","知道","from",":","import","主","learning","信息","!","{","time","points","”","代码","对象","选项","是","info","输出","destroy","？","init","none","点","让","销毁","node","运行"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_5","text":"代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。","text_tokens":["机器","一个","模块","编程","模块化","中","想要","机器人"," ","对于","应该","总结","未来","做","流程","创建","理解","系统","就","难","我们","编码","c++","或者","一点","做到","方式","初始化","简单","发现","先","但是","更","。","并","过","实现","有","方法","代码","pyhton","过程","使用","是","节点","复杂","的","这里","虽然","：","的话","函数","用到","，","学习","可以","经常","一下","这样","初始","这种","纠结","重要","会","销毁","接口","具体","如果","面向","大家","出现","很","功能","稍微","不用","关闭"],"title":"创建节点流程","title_tokens":["创建","节点","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world_1","text":"所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。","text_tokens":["移植性","一些","编程","中","更加","具备"," ","方便","比如","就","我们","更好","推荐","改成","方式","所以","起来","但是","移植","看上","看上去","更","了","可读性","。","代码","对象","使用","复杂","的","虽然","刚才","ros2","开发","可以","，","上去","可移植性","这样","和","也","面向对象","会","调试","在","面向","大家","可读","可移植"],"title":"案例二：Hello World节点（面向对象）","title_tokens":["world","hello","面向对象","对象","（","节点","案例"," ","二","面向","）","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_6","text":"接下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["run","终端","world","“","hello","后","中","接下来","_","打印"," ","还是","看到","接下","字符串","下来","learning","成功","循环","调整","。","”","节点","效果","class","的","：","ros2","可以","，","字符","一下","$","helloworld","在","运行","node"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_7","text":"功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ],","text_tokens":["8","setup","_","编译","coding","ok","文件","系统","包","是否","加入","时间","居","发生","配置","日志",")","看","spin","并","这份","实现","__","[","正常","使用","sleep","的","：","，","shutdown","面向对象","env","古月","#","0.5","接口","python","-","rclpy","world","打开","后","编写","进行","bin","创建","self","www","方式","py","类","发布","初始化","循环",",","了","退出","时","usr","节点","'","一下","休眠","具体",".","name","\"","功能","main","logger","“","需要","说明","entry"," ","com","get","scripts","我们","设置","guyuehome","console","入口","程序","/","但是","*","。","作者","python3","helloworldnode","args","完成","while","虽然","结构","ros2","super","函数","控制","初始","(","helloworld","库","]","面向","示例","@","关闭","一个","hello","def","utf","=","如下","知道","from",":","import","一样","主","learning","信息","!","{","time","points","”","代码","对象","等待","选项","父类","class","info","输出","destroy","init","none","点","让","销毁","node","运行","变化"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_8","text":"所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。","text_tokens":["机器","一些","一个","world","编程","还有","hello","中","机器人","打印"," ","依然","不是","做","这","任务","创建","疑惑","总体","编码","不能","方式","所以","得","初始化","总体而言","而已","为止","心里","了","。","不过","并","是不是","实现","改变","只是","节点","是","而言","完成","吧","的","这里","，","编码方式","初始","到","销毁","接口","只不过","具体","四个","大家","功能","步骤","关闭"],"title":"创建节点流程","title_tokens":["创建","节点","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_9","text":"没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。","text_tokens":["机器","为例","一个","没错","中","从","接下来","机器人","编写"," ","一张","任务","接下","就","我们","模拟","实际","下来","来","图片","先","。","实现","网上","找到","过程","节点","苹果","的","视觉","，","通过","识别","以"],"title":"案例三：物体识别节点","title_tokens":["物体","识别","案例","节点","：","三"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_10","text":"在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 Attention 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。","text_tokens":["窗口","_","编译","为","jpg","中心","成功",")","修改","使用","图像","可视化","的","苹果","中心点","：","这个","，","啦","$","#","21","-","绿点","把","run","后","看到","ws","请","install","attention","py","处理","被","然后","中间","可以","'","注意",".","指令","会弹","cv2","图像处理","需要","中"," ","出","src","我们","可视","tutorials","image","安装","重新","/","。","imread","python3","轮廓","dev","ros2","(","勾勒","库","在","opencv","一个","例程","路径","apt","apple","hcx","出来","框会","=","sudo","就","前","如下","实际","learning","图片","object","—","代码","home","将","用到","即可","表示","识别","运行","node","绿色"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_11","text":"在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ],","text_tokens":["数值","面积","一些","8","for","setup","理过","_","更多要","red","宽","编译","如何","coding","为","jpg","文件","中心","系统","包","加入","居","上限","噪声","下限","配置","findcontours",")","spin","并","实现","0","[","重点","waitkey","w","使用","+","图像","苹果","的","2","：","这个","，","去除","5","shutdown","retr","circle","in","env","古月","#","上角","接口","python","21","-","出现","imshow","rclpy","打开","array","detect","后","编写","进行","bin","list","创建","ws","cvtcolor","模拟","www","py","类","更多","128","chain","初始化","处理","循环",",","了","退出","太小","usr","过程","节点","destroyallwindows","转换","点画","contours","hsv","'","bgr2hsv","通过","具体",".","高","\"","功能","int","cv2","左上","main","logger","图像处理","numpy","需要","说明","中","概念","及","entry","图像识别"," ","com","二值化","不是","180","lower","像素","get","drawcontours","scripts","src","upper","<","y","我们","设置","shape","guyuehome","console","入口","255","tutorials","image","所在","程序","1","/","关于","*","inrange","。","imread","作者","颜色","python3","args","img","完成","轮廓","dev","mask","ros2","函数","approx","左上角","初始","计算","h","得到","(","cnt","检测","和","勾勒","helloworld","库","在","opencv","]","color","示例","@","关闭","boundingrect","机器","一个","范围","例程","bgr","def","utf","从","continue","机器人","150","apple","hcx","读取","出来","=","xy","如下","知道","from",":","if","import","主","learning","来","!","90","图片","模型","points","{","此处","object","代码","关注","对象","等待","是","效果","处理过程","选项","显示","home","class","hierarchy","将","info","destroy","坐标","阈值","init","红色","none","点","让","销毁","识别","as","大家","node","np","x"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_12","text":"用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。","text_tokens":["机器","像头","太","接下来","还","机器人","用","读取","好像","进行","应该","摄像","接下","我们","或者","下来","呀","动态","不","图片","。","问题","合理","有","颜色","节点","就让","摄像头","图像","苹果","的","，","眼睛","物体","没","识别","类似","其中"],"title":"案例四：机器视觉识别节点","title_tokens":["机器","四","识别","案例","节点","视觉","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_13","text":"启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 Attention 如果是在虚拟机中操作，需要进行以下设置： 1. 把虚拟机设置为兼容USB3.1； 2. 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。","text_tokens":["把","run","一个","终端","像头","设备","需要","移动","后","中","_","usb3.1"," ","为","进行","该","实时","摄像","就","可","如下","设置","attention","；","learning","1","成功","启动","。","object","连接","节点","是","虚拟","摄像头","2","的","：","ros2","以下","，","中将","可以","webcam","注意","兼容","$","红色","至","啦","物体","操作","#","虚拟机","识别","如果","在",".","运行","node","驱动","并且"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_14","text":"相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ],","text_tokens":["数值","面积","一些","8","for","setup","宽","_","red","编译","为","coding","ok","文件","最大","中心","系统","包","加入","居","上限","噪声","下限","配置","findcontours",")","修改","并","0","[","waitkey","true","w","使用","+","图像","苹果","这里","的","2","：","之前","read","，","webcam","去除","5","shutdown","retr","circle","in","ret","env","古月","相机","#","上角","接口","python","驱动","-","出现","imshow","rclpy","打开","array","detect","后","编写","进行","bin","list","创建","cvtcolor","www","py","类","128","chain","初始化","处理",",","了","太小","videocapture","usr","节点","转换","点画","contours","hsv","'","bgr2hsv","通过",".","高","\"","功能","int","cv2","左上","main","logger","图像处理","numpy","需要","说明","中","及","entry"," ","com","周期","二值化","180","get","lower","像素","scripts","drawcontours","upper","<","y","设置","shape","guyuehome","console","入口","255","image","所在","程序","1","/","*","inrange","。","作者","颜色","python3","args","img","一帧","完成","轮廓","while","来源","mask","ros2","函数","approx","左上角","初始","计算","h","得到","(","cnt","检测","和","勾勒","50","helloworld","库","opencv","并且","]","color","cap","示例","@","关闭","boundingrect","像头","范围","bgr","def","utf","从","continue","150","读取","出来","=","摄像","xy","如下","知道","from",":","if","import","主","learning","信息","来","!","90","图片","模型","points","{","object","代码","对象","选项","是","效果","摄像头","显示","class","hierarchy","将","info","destroy","坐标","阈值","init","红色","none","点","让","相比","销毁","识别","as","node","np","x","变化"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_15","text":"节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息","text_tokens":[">","_"," ","常用","list","命令","<","如下","信息","节点","列表","查看","的","info","：","ros2","$","操作","#","node","name"],"title":"节点命令行操作","title_tokens":["节点","命令","操作","命令行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_16","text":"现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。","text_tokens":["细胞","速度","没错","回到","常用","这","系统","工作","机制","一节","收到","摇杆","配置","运动","并","实现","有","保持联系","图像","的","给","保持","，","这个","参数","会","把","后","孤立","下","看到","现在","ros","框架","了","要","改变","介绍","联系","节点","另外","还会","开始","指令","中","概念"," ","不是","最为","应该","框架图","岂","我们","发现","。","问题","方法","发送","控制","熟悉","他们","和","过来","如果","a","在","b","很","机器","像头","一个","想要","机器人","比如","摄像","就","同理","得","多种","这些","某种","两个","连接","电脑","显示","摄像头","将","之间","负责","大家","一种"],"title":"思考题","title_tokens":["思考题","思考","考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_17","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":[":","org","tutorials","humble","nodes",".","ros","understanding","-","en","docs","https","/","ros2","html"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/","text":"话题 节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。 通信模型 以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。 发布/订阅模型 从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。 多对多通信 大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。 异步通信 话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。 消息接口 最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。 案例一：Hello World话题通信 了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 运行效果 启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。 发布者代码解析 我们来看下发布者的实现方法。 程序实现 learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口 订阅者代码解析 我们再来看下订阅者的实现方法。 程序实现 learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。 案例二：机器视觉识别 在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。 运行效果 这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。 发布者代码解析 learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], }, 订阅者代码解析 learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], }, 案例三：机器视觉识别优化 通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub 话题命令行操作 话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息 思考题 关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？ 参考链接 https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["是从","数值","想下","一些","举","填充","模块","接口协议","听说","如何","该","系统","呀","就要","某","建议","想","保证","万缕","spin","receiving","[","使用","+","多","的","2","苹果","之前","read","既然","可移植性","队列","webcam","接口定义","积木","retr","这种","hz","间","古月","env","相机","0.5","物体","上角","python","包含","-","秒","world","名","detect","基本原理","timer","还","消息","上","进行","dds","接收","cvtcolor","self","www","标准","不太","参考","转换成","topics","发布","数据","不","称之为","一定","了","不过","过程","topic","周期性","的话","另外","可以","说","里","也","humble","callback",".","拼接","\"","指令","号","感兴","main","左上","logger","subscribernode","硬件","传输","“","平时","com","周期","3","已经","通信","什么样","upper","指","publishing","shape","每换","sensor","考题","仔细","下来","个","1","不然","*","报社","python3","img","轮廓","肯定","左上角","以上","魔性","拍摄","计算","名称","做成","讲","关系","二","b","回调","cap","color","变化","关闭","桥梁","一个","描述","utf","任何","想要","读取","还是","做","比如","10","一行","就","听","理解","xy","一次","）","主","learning","当然","来","!","一新","understanding","先","定时","一份","两个","object","第一个","对象","一篇","效果","第二","自然","将","哪里","std","？","进入","与","坐标","none","操作","没","识别","node","微信","一种","二个","面积","什么","继续","定义","最","！","编译","不知","文件","中心","这","en","包","命令","通用","只要","bgr8","很多","是否","获取","配置","必然","视频","渲染","一般","稍后","订阅",")","之为","看","并","waitkey","cam","例子","给","开发","shutdown","5","转化","参数","无关","ret","感器","异步","bw","org","run","每","进一步","解析","编写","之后","bin","未来","块","现在","类型","py","类","频率","优先级","从而","install","初始化","chain","bridge","ros","cvbridge","组织","循环","被","基本",",","更","带宽","退出","contours","打","html","一下","又","另","杂志","中是","、","成","cv2",">","图像处理","逻辑性","思考","感觉","需要","模块化","焕然一新","第一次","传感","不是","180","应该","像素","drawcontours","无法","<","设置","console","255","再","image","（","安装","但是","方向","inrange","提高","虽然","了解","mask","super","函数","以下","控制","approx","这样","h","和","勾勒","helloworld","在","@","boundingrect","移植性","想象","比方","同学","string","def","i","率","耦","=","对于","放入","知道","if","imagepublisher","编程语言","exe","模型","代码","选项","复杂","父类","info","输出","阈值","区分","红色","转化成","np","挺","其中","不行","分析","8","还有","没错","setup","宽","red","完全","为","数量","小编","coding","本原","对劲","数据类型","需求","加入","字符串","收到","各种","摇杆","居","思想","噪声","唯一","同样","create","下限","findcontours","日志","精简","分别","heard","修改","有","__","0","通信模型","可视化","：","，","画面","啦","to","去除","各样","$","circle","in","会","优化","驱动","此时","第一","逻辑","array","后","video","用","符合","中文","联系方式","流程","传感器","数据结构","报纸","做到","方式","0.1","格式","自己","思考题","处理","他会","本身","pub","太小","videocapture","但","usr","联系","人","知识","点画","视觉","单向","hsv","时候","'","一句","名字","开始","感兴趣","要求","通过","以","name","高","各种各样","程序实现","传递数据","type","entry","及","概念"," ","get","好像","实时","publishernode","frame","换成","固定","不变","guyuehome","入口","可视","tutorials","所在","程序","呢","三","问题","发送","publisher","过瘾","chatter","兴趣","似乎","(","长宽","检测","库","a","类似","]","并且","opencv","互相","示例","可移植","单位","机器","范围","编程","bgr","从","接下来","apt","文章","出来","一步","sudo","from",":","千丝万缕","因为","一样","作为","import","rgb","能够","得","执行","接收数据","90","{","points","多个","某种","subscription","说干就干","无论","所谓","采集","}","class","hierarchy","刚才","之间","监控","重要","到","销毁","叫做","自行","as","运行","才能","优先","都","https","那","终端","for","imagesubscriber","来看","_","话题","常用","可能","出去","像","复用","接下","链接","词","留","不能","随处","上限","阅读","data","成功","docs","它","移植","echo","msg","换","解","运动","实现","数据传输","特性","true","w","图像","提示","这里","已","存在","保持","这个","所有","独立","发布者","在生活中","#","满足","接口","usb","imshow","rclpy","传递","把","为例","设备","打开","千丝","组成","案例","协议","下","看到","list","创建","你","更好","据传","合适","128","可见","讲解","启动","东西","要","叫","没有","发出","成为","节点","后缀","转换","一","目标","注意","设计","sub","bgr2hsv","几乎","%","直接","功能","int","控制指令","只","publish","numpy","说明","中","根本","排版","发送数据","msgs","二值化","scripts","随处可见","raw","lower","对应","适合","y","我们","等等","公众","最后","语言","集成","长度","/","关于","用于","。","者","角度","是不是","作者","每个","原理","方法","args","生活","内","颜色","一帧","完成","更换","基于","结构","ros2","初始","第二个","得到","cnt","英文","listener","如果","命令行","几个","谁","对","例程","hello","太","continue","机器人","150","cv","较强","imgmsg","来讲","么","总结","s","如下","软件","好","化成","信息","值","这些","”","定时器","统一","等待","是","焕然","原本","写","列表","显示","查看","用户","destroy","即可","字符","init","点","让","并不知道","就是","大家","x","某些","\\"],"title":"话题","title_tokens":["话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_1","text":"节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。","text_tokens":["机器","传递数据","桥梁","最","千丝","机器人"," ","话题","不是","联系方式","各种","千丝万缕","方式","数据","这些","它","了","万缕","。","并","实现","但","有","联系","节点","是","的","，","之间","各样","独立","重要","间","会","就是","功能","各种各样","一种","其中","传递"],"title":"话题","title_tokens":["话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_2","text":"以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。","text_tokens":["没错","话题","这","获取","某","必然","视频","渲染","它","想","之为","有","数据传输","实现","图像","可视化","的","给","存在","这个","，","相机","驱动","此时","传递","为例","设备","上","据传","方式","数据","ros","称之为","了","要","节点","可以","一下","以","功能","硬件","传输","中"," ","不是","实时","我们","可视","方向","。","是不是","拍摄","得到","这样","关系","a","在","b","机器","一个","桥梁","从","机器人","做","就","作为","信息","某种","两个","是","显示","查看","用户","将","？","之间","监控","到","大家","才能"],"title":"通信模型","title_tokens":["通信模型","通信","模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_3","text":"从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。","text_tokens":["是从","什么","来看","话题","小编","出去","数据类型","收到","随处","居","它","订阅","之为","看","实现","数据传输","特性","有","使用","的","，","这个","发布者","古月","在生活中","会","把","每","之后","dds","接收","据传","报纸","类型","发布","数据","格式","可见","组织","称之为","他会","本身","了","叫","没有","成为","节点","知识","打","的话","另外","可以","名字","感兴趣","也","要求","杂志","、","号","成","感兴","传输","需要","“","平时","排版"," ","发送数据","应该","随处可见","固定","无法","等等","公众","呢","/","。","者","角度","生活","发送","基于","兴趣","这样","和","名称","如果","类似","机器","一个","对","比方","从","机器人","文章","比如","就","好","接收数据","模型","”","对象","是","自然","？","到","叫做","大家","就是","微信","都"],"title":"发布/订阅模型","title_tokens":["订阅","/","发布","模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_4","text":"大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。","text_tokens":["想下","没错","数量","话题","该","可能","很多","摇杆","唯一","建议","订阅","之为","并","有","通信模型","多","的","2","存在","，","这个","画面","发布者","报纸","优先级","发布","ros","不","被","称之为","东西","了","要","人","节点","可以","注意","一下","里","也","杂志","指令","、","控制指令","号"," ","3","不是","通信","我们","公众","再","仔细","个","1","不然","。","者","是不是","每个","发送","控制","魔性","似乎","和","如果","谁","机器","对","一个","想象","机器人","还是","听","知道","因为","一样","这些","模型","多个","是","区分","大家","挺","优先"],"title":"多对多通信","title_tokens":["多","通信","对"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_5","text":"话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。","text_tokens":["一些","那","什么","还有","听说","话题","不知","可能","这","词","只要","收到","居","阅读","某","订阅","修改","运动","特性","有","的","，","这个","参数","发布者","古月","感器","异步","第一","逻辑","后","用","传感器","你","报纸","合适","发布","数据","不","更","了","发出","时候","可以","也","指令","号","逻辑性","传输","根本","第一次"," ","传感","周期","通信","指","适合","等等","公众","用于","。","者","报社","控制","如果","类似","一个","同学","太","文章","较强","比如","就","一次","知道","一份","所谓","一篇","是","？","让","叫做","并不知道","就是","某些"],"title":"异步通信","title_tokens":["异步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_6","text":"最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。","text_tokens":["定义","话题","文件","像","系统","不能","各种","订阅","msg","之为","有","数据传输","图像","的","这里","既然","，","接口定义","积木","各样","无关","发布者","会","接口","包含","消息","组成","进行","中文","块","据传","数据结构","标准","方式","发布","数据","格式","ros","称之为","了","节点","后缀","都","可以","说","也","通过",".","拼接","各种各样","、","成","传输","中","概念"," ","通信","像素","对应","等等","我们","最后","语言","。","者","每个","结构","这样","和","长宽","英文","在","机器","一个","编程","描述","机器人","比如","就","理解","一样","rgb","得","值","编程语言","统一","是","复杂","与","自行","一种"],"title":"消息接口","title_tokens":["接口","消息"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#hello-world","text":"了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。","text_tokens":["一个","world","例程","string","“","hello","定义","中","从","接下来","基本原理","编写","消息"," ","还是","话题","周期","接下","本原","创建","接收","我们","字符串","标准","再","类型","下来","就要","从而","发布","来","ros","基本","订阅","了","。","者","”","原理","代码","是","发送","的","了解","chatter","，","啦","这个","字符","开始","发布者","到"],"title":"案例一：Hello World话题通信","title_tokens":["world","hello","：","案例"," ","话题","通信","一"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_7","text":"启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。","text_tokens":["run","一个","终端","world","“","hello","_","消息"," ","话题","该","看到","字符串","收到","频率","learning","同样","发布","数据","循环","启动","订阅","。","者","pub","第一个","”","节点","topic","第二","的","：","ros2","可以","，","字符","第二个","$","sub","发布者","helloworld","也","几乎","运行","以","第一","二个"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_8","text":"我们来看下发布者的实现方法。","text_tokens":["。","我们","实现","发布者","来看","方法","发布","下","的"],"title":"发布者代码解析","title_tokens":["发布者","代码","解析","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_9","text":"learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], },","text_tokens":["8","填充","setup","_","编译","为","coding","话题","文件","系统","包","加入","字符串","居","create","data","配置","日志","msg",")","spin","并","__","[","提示","的","：","，","队列","shutdown","发布者","env","古月","#","0.5","接口","python","-","秒","rclpy","world","名","打开","后","编写","timer","消息","进行","bin","创建","self","www","类型","py","类","发布","初始化","数据","循环",",","pub","退出","usr","节点","topic","'","callback",".","%","name","\"","功能","、","main","logger","“","publish","需要","说明","中","entry"," ","com","周期","get","msgs","publishernode","已经","scripts","设置","publishing","guyuehome","console","入口","（","程序","长度","/","*","作者","python3","args","完成","publisher","chatter","ros2","super","函数","初始","(","helloworld","库","]","回调","示例","@","关闭","单位","一个","string","hello","def","utf","=","10","s","如下","知道","from",":","import","）","主","learning","信息","执行","!","{","points","定时","”","代码","对象","定时器","等待","选项","}","父类","class","info","输出","std","destroy","字符","init","none","点","让","销毁","node"],"title":"程序实现","title_tokens":["实现","程序","程序实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_10","text":"对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口","text_tokens":["对","一个","填充","编程","想要","消息"," ","进行","话题","流程","创建","我们","如下","程序","发布","初始化","并","实现","对象","节点","：","，","以上","初始","发布者","销毁","接口","如果","分析","关闭"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_11","text":"我们再来看下订阅者的实现方法。","text_tokens":["订阅","。","者","我们","实现","方法","来看","再","下","的"],"title":"订阅者代码解析","title_tokens":["订阅","者","解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_12","text":"learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], },","text_tokens":["8","定义","setup","_","编译","coding","话题","文件","系统","包","加入","收到","居","create","data","配置","日志","订阅",")","msg","heard","spin","并","__","[","提示","的","：","，","队列","shutdown","env","古月","#","接口","python","-","rclpy","world","名","打开","后","编写","消息","进行","bin","创建","self","www","标准","类型","py","类","初始化","数据","处理","循环",",","退出","pub","usr","节点","topic","'","sub","callback",".","%","name","\"","功能","、","main","subscribernode","logger","“","需要","说明","entry"," ","com","get","msgs","scripts","设置","guyuehome","console","入口","（","程序","长度","/","*","者","作者","python3","args","完成","chatter","ros2","super","函数","初始","(","helloworld","listener","库","]","回调","示例","@","关闭","一个","对","string","hello","def","utf","i","=","10","s","如下","知道","from",":","import","）","主","learning","信息","执行","!","{","points","subscription","”","代码","对象","等待","选项","}","父类","class","info","输出","std","destroy","init","none","点","让","销毁","node","\\"],"title":"程序实现","title_tokens":["实现","程序","程序实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_13","text":"对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。","text_tokens":["机器","对","一个","world","例程","编程","继续","hello","想要","接下来","还"," ","进行","话题","下","通信","接下","流程","创建","我们","如下","好","下来","程序","初始化","数据","处理","不","订阅","一定","。","者","并","实现","对象","节点","过瘾","的","视觉","基于","：","之前","函数","，","啦","以上","初始","优化","销毁","接口","如果","大家","回调","分析","关闭"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_14","text":"在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。","text_tokens":["机器","一个","对","模块","传输","模块化","中","概念","机器人","话题","周期","来讲","对于","我们","更好","做到","方式","程序","数据","讲解","但是","了","。","问题","并","实现","两个","没有","过程","联系","节点","是","图像","的","虽然","将","视觉","开发","，","这个","即可","红色","和","做成","物体","间","通过","相机","没","识别","在","驱动","并且","就是","功能"],"title":"案例二：机器视觉识别","title_tokens":["机器","识别","案例","二","视觉","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_15","text":"这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。","text_tokens":["终端","模块","定义","来看","_","完全","如何","话题","思想","保证","移植","分别","订阅","修改","并","实现","图像","的","保持","这个","，","可移植性","啦","webcam","$","这种","物体","相机","驱动","第一","run","消息","下","看到","未来","更好","标准","发布","ros","启动","了","pub","要","节点","topic","视觉","可以","设计","sub","另","中是","功能","只","需要","模块化"," ","不变","我们","。","内","更换","ros2","以下","第二个","在","如果","可移植","移植性","一个","范围","放入","就","软件","好","learning","先","两个","第一个","说干就干","是","效果","第二","将","？","即可","红色","识别","运行","二个"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_16","text":"learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], },","text_tokens":["8","setup","_","编译","为","coding","话题","文件","系统","包","bgr8","加入","居","create","配置","视频","成功","日志","稍后","msg",")","spin","并","__","0","true","[","图像","提示","的","：","read","，","to","webcam","队列","shutdown","ret","发布者","env","古月","#","相机","接口","python","驱动","-","秒","rclpy","设备","名","打开","后","video","编写","timer","消息","进行","bin","创建","self","www","类型","py","类","转换成","发布","初始化","0.1","bridge","cvbridge","ros","处理","循环",",","pub","退出","videocapture","usr","节点","topic","转换","'","sub","callback",".","name","\"","功能","、","号","cv2","main","logger","图像处理","publish","需要","说明","entry"," ","com","周期","get","msgs","frame","raw","已经","scripts","换成","设置","publishing","guyuehome","console","sensor","入口","image","（","程序","长度","/","用于","*","作者","python3","args","一帧","完成","publisher","ros2","super","函数","初始","(","helloworld","库","如果","opencv","]","回调","cap","示例","@","关闭","单位","一个","def","utf","读取","cv","imgmsg","=","10","如下","知道","from",":","if","import","）","主","imagepublisher","learning","信息","执行","!","{","points","定时","代码","对象","定时器","采集","等待","选项","}","父类","class","将","info","输出","destroy","与","init","none","点","让","销毁","node"],"title":"发布者代码解析","title_tokens":["发布者","代码","解析","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_17","text":"learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], },","text_tokens":["数值","面积","一些","8","for","imagesubscriber","setup","宽","_","shutdown","red","编译","为","coding","话题","文件","中心","系统","包","bgr8","加入","居","上限","噪声","create","下限","data","配置","findcontours","日志","订阅",")","msg","spin","并","__","0","[","waitkey","receiving","w","使用","+","图像","苹果","的","2","提示","已","：","，","to","webcam","队列","去除","5","retr","circle","in","转化","env","古月","#","上角","接口","python","-","imshow","rclpy","名","打开","array","detect","后","video","编写","消息","进行","bin","list","创建","cvtcolor","self","www","类型","py","类","128","初始化","chain","bridge","cvbridge","ros","处理","循环",",","退出","pub","太小","usr","节点","topic","转换","点画","contours","hsv","'","sub","bgr2hsv","callback",".","高","name","\"","功能","、","int","cv2","左上","main","logger","图像处理","numpy","需要","说明","中","及","entry"," ","com","get","二值化","msgs","180","lower","raw","像素","drawcontours","frame","scripts","upper","<","y","设置","shape","guyuehome","console","sensor","入口","255","image","（","所在","程序","1","长度","/","用于","*","inrange","者","作者","颜色","python3","args","img","完成","轮廓","mask","ros2","super","函数","approx","左上角","初始","计算","h","得到","(","cnt","检测","和","勾勒","helloworld","listener","库","互相","opencv","]","回调","color","示例","@","关闭","boundingrect","一个","范围","bgr","def","utf","从","continue","150","cv","出来","imgmsg","=","10","xy","如下","知道","from",":","if","import","）","主","learning","信息","化成","!","90","{","模型","points","subscription","object","代码","对象","等待","效果","选项","}","父类","显示","class","hierarchy","将","info","输出","destroy","进入","与","坐标","阈值","init","红色","none","转化成","点","让","销毁","as","node","np","x"],"title":"订阅者代码解析","title_tokens":["订阅","者","解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_18","text":"通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub","text_tokens":["什么","还有","接口协议","_","！","话题","常用","复用","可能","这","对劲","通用","只要","呀","精简","一般","换","解","有","使用","图像","cam","的","，","webcam","$","相机","接口","驱动","-","usb","run","进一步","协议","用","符合","现在","你","不太","标准","install","发布","自己","ros","不","了","不过","节点","topic","视觉","目标","可以","一句","sub","也","又","通过","humble","直接","功能","指令","只","感觉","需要","焕然一新","中"," ","好像","不是","换成","什么样","我们","每换","安装","集成","。","是不是","提高","ros2","似乎","这样","得到","对","一个","例程","任何","apt","率","耦","么","一步","做","一行","sudo","就","软件","好","learning","得","当然","exe","一新","无论","代码","是","焕然","原本","写","哪里","刚才","？","让","到","识别","大家","node","都","不行","变化"],"title":"案例三：机器视觉识别优化","title_tokens":["机器","优化","识别","案例","视觉","：","三"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_19","text":"话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息","text_tokens":["type",">","传输","_","消息"," ","常用","话题","list","命令","<","如下","频率","信息","发布","数据","data","echo","msg","带宽","pub","topic","列表","查看","的","info","：","ros2","hz","$","操作","#","name","bw"],"title":"话题命令行操作","title_tokens":["操作","命令","话题","命令行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_20","text":"关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？","text_tokens":["机器","一个","思考","举","传输","机器人","话题","周期","来讲","通信","对于","系统","需求","就","无法","适合","留","我们","是否","据传","考题","能够","思考题","数据","呢","关于","实现","特性","方法","原理","数据传输","是","复杂","完成","例子","这里","的","给","：","单向","周期性","肯定","？","，","所有","和","这种","到","讲","满足","大家","几个","传递"],"title":"思考题","title_tokens":["思考题","思考","考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_21","text":"https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":[":","org","tutorials","humble","topics",".","ros","understanding","-","en","docs","https","/","ros2","html"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/","text":"服务 话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。 通信模型 在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。 客户端/服务器模型 从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。 同步通信 这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。 一对多通信 比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。 服务接口 和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。 案例一：加法求解器 大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 运行效果 我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3 客户端代码解析 我们来看下客户端的实现方法。 程序实现 learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口 服务端代码解析 至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。 程序实现 learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口 案例二：机器视觉识别 好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。 运行效果 此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client 客户端代码解析 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], }, 服务端代码解析 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], }, 服务命令行操作 服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求 思考题 话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。 参考链接 https://docs.ros.org/en/humble/Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["数值","一些","封装","ok","系统","网页","adderserver","不好","圈圈","越快越好","大部","时间","网站","就要","spin","receiving","[","请求","使用","wait","+","多","的","苹果","2","之前","队列","retr","这种","物体","古月","env","相机","上角","python","-","名","detect","消息","上","进行","打印输出","e","应答","网络","接收","cvtcolor","self","www","标准","通信接口","参考","一起","发布","数据","objectclient","不","称之为","了","不过","上述","过程","周期性","另外","可以","发给","也","官方","humble","callback","具体",".","根据","\"","指令","add","main","左上","logger","硬件","传输","“","反馈","com","周期","3","已经","通信","本","sys","岂","至于","upper","shape","sensor","position","考题","下来","r","1","*","雷达","python3","希望","img","轮廓","return","左上角","以上","计算","50","讲","二","很","b","半天","回调","color","等","关闭","结果","一个","argv","那有","utf","想要","页面","n","还是","比如","10","就","xy","一次","按照","）","主","learning","!","understanding","两个","object","位置","第一个","对象","效果","第二","将","进入","与","坐标","none","操作","相比","识别","自定义","node","尽快","一种","二个","request","面积","什么","继续","界面","服务端","定义","once","越好","编译","场景","不知","文件","加法","中心","en","包","命令","浏览","通用","是否","而是","或者","bgr8","很多","获取","数据通信","配置","services","except","一般","订阅",")","之为","看","并","result","waitkey","服务","cam","给","开发","跟随","shutdown","5","转化","应用","出现","感器","异步","org","run","每","服务器发送","求解","解析","一问一答","编写","之后","bin","call","现在","当","一对","绝大","类型","py","类","频率","done","command","初始化","chain","bridge","ros","cvbridge","循环","基本",",","更","退出","response","然后","getobjectposition","...","比比皆是","contours","html","async","器","一直","、","d","成","cv2",">","图像处理","思考","需要","two","传感","数据通","不是","180","应该","像素","drawcontours","无法","我","<","设置","console","255","image","（","所以","但是","inrange","有点","判断","准备","了解","mask","super","函数","approx","控制","这样","h","和","勾勒","ints","在","展现","@","boundingrect","域名","def","附近","=","sec","后续","向","知道","if","service","exe","模型","of","跟踪","代码","选项","父类","info","输出","学习","阈值","红色","转化成","绝大部分","np","两种","浏览器","其中","分析","waiting","8","还有","setup","宽","同步","red","完全","为","coding","加法器","机制","需求","数据类型","加入","收到","各种","居","噪声","唯一","同样","create","下限","findcontours","日志","并不需要","分别","有","__","0","正常","最新","通信模型","：","，","啦","状态","去除","to","$","circle","in","again","会","后者","驱动","此时","第一","objecty","里程计","array","后","video","流程","传感器","软硬件","方式","思考题","处理","client","太小","但","时","usr","人","针对","转圈圈","点画","核心","视觉","单向","hsv","时候","'","开始","通过","要求","高","name","invalid","三个","程序实现","传递数据","type","问","entry","及"," ","图像识别","好像","get","frame","最为","上层","guyuehome","入口","tutorials","所在","程序","简单","adder","转圈","服务器端","变成","while","发送","(","检测","库","a","类似","并且","法器","]","opencv","回想","示例","互相","机器","范围","编程","bgr","从","接下来","cs","available","更加","常见","当前","出来","求和","随时","from",":","import","一样","；","else","执行","90","{","points","多个","放到","subscription","合理","}","简称","class","hierarchy","刚才","答","之间","软硬","形式","到","future","叫做","as","销毁","运行","timeout","都","https","终端","for","imagesubscriber","来看","_","interface","打印","前者","话题","常用","可能","出去","failed","接下","链接","大部分","提供","上限","data","成功","同步性","docs","msg","里程","运动","实现","true","w","server","图像","提示","已","存在","这个","target","经常","宕机","发布者","在生活中","#","满足","接口","某个","部分","usb","imshow","rclpy","传递","查询","打开","反应","案例","下","看到","list","创建","服务器","你","客户端","客户","128","send","exception","启动","要","介绍","没有","成为","节点","转换","一","目标","准确","设计","sub","bgr2hsv","不同","%","假设","功能","int","控制指令","numpy","说明","中","这么","访问","sum","二值化","接口类","msgs","scripts","lower","raw","y","适合","我们","提到","等等","发","有所","集成","长度","/","not","用于","。","者","addtwoints","作者","方法","原理","颜色","args","生活","完成","ros2","初始","第二个","得到","处","cnt","自定","listener","如果","课程","命令行","对","例程","adderclient","1.0","认为","continue","机器人","150","cv","imgmsg","相对","总结","传入","如下","有所不同","越快","好","objectx","化成","信息","比比","这些","拿到","接口类型","incoming","加数","break","—","”","等待","是","列表","电脑","显示","查看","destroy","try","用到","务器","init","繁杂","点","返回","让","并不知道","就是","大家","x","srv","某些","\\"],"title":"服务","title_tokens":["服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_1","text":"话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。","text_tokens":["问","传输","同步","消息"," ","话题","常用","通信","本","机制","无法","我","我们","知道","是否","你","收到","一起","发布","数据","ros","多个","订阅","。","者","实现","—","方法","服务","节点","使用","效果","的","单向","将","另外","可以","，","准确","之间","学习","答","这种","发布者","讲","类似","异步","一种"],"title":"服务","title_tokens":["服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_2","text":"在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。","text_tokens":["继续","话题","机制","而是","或者","并不需要","订阅","运动","并","实现","服务","请求","最新","使用","通信模型","图像","的","之前","，","这个","跟随","这种","物体","相机","应用","驱动","此时","查询","应答","你","频率","发布","数据","ros","更","了","然后","成为","节点","单向","目标","另外","时候","可以","发给","通过","不同","高","一直","问","传输","需要","反馈","中","这么","图像识别"," ","周期","好像","通信","我","我们","上层","发","有所","。","变成","希望","发送","这样","得到","和","在","课程","机器","一个","对","机器人","附近","比如","有所不同","按照","一样","信息","service","模型","位置","是","答","红色","形式","到","识别","尽快","其中"],"title":"通信模型","title_tokens":["通信模型","通信","模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_3","text":"从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。","text_tokens":["服务器发送","问","需要","反馈","来看","域名","从","页面","cs","之后"," ","为","上","进行","常见","通信","比如","机制","网页","就","应答","我","服务器","我们","你","浏览","向","或者","收到","各种","客户端","网站","客户","信息","数据","处理","/","模型","。","并","实现","服务器端","服务","生活","请求","针对","电脑","简称","发送","的","时候","答","，","务器","经常","这种","也","返回","形式","在生活中","通过","会","操作","叫做","某个","在","具体","很","就是","展现","浏览器","此时","某些"],"title":"客户端/服务器模型","title_tokens":["务器","服务器","服务","客户端","客户","/","模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_4","text":"这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。","text_tokens":["那有","中","同步","越好","反应","话题","可能","通信","网络","应答","接收","服务器","浏览","越快","你","圈圈","或者","越快越好","不好","我们","客户端","客户","所以","信息","一直","一般","称之为","了","之为","。","转圈","服务器端","服务","没有","过程","判断","是","转圈圈","的","可以","这个","，","务器","状态","宕机","也","要求","相比","通过","到","在","假设","半天","浏览器"],"title":"同步通信","title_tokens":["通信","同步"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_5","text":"比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。","text_tokens":["每","一个","界面","中","访问","完全","看到","通信","比如","服务器","客户端","网站","居","一样","客户","唯一","同样","所以","不","模型","但是","多个","。","并","但","服务器端","服务","没有","人","是","通信模型","的","存在","可以","这个","，","务器","古月","大家","都"],"title":"一对多通信","title_tokens":["多","通信","一对"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_6","text":"和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。","text_tokens":["传递数据","一个","还有","反馈","定义","中","消息"," ","还是","话题","文件","通信","比如","后续","srv","命令","我们","标准","一样","数据","这些","ros","msg","了","。","两个","要","位置","介绍","服务","变成","方法","请求","是","使用","核心","苹果","的","给","，","坐标","和","也","会","在","类似",".","大家","部分","传递"],"title":"服务接口","title_tokens":["接口","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_7","text":"大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。","text_tokens":["封装","_","加法","出去","接下","收到","提供","就要","并","有","实现","服务","请求","的","给","，","啦","这个","求解","后","编写","之后","进行","现在","应答","服务器","当","客户端","客户","数据","ros","基本","了","时","节点","针对","可以","开始","也","通过","官方","器","功能","成","add","“","需要","反馈","two"," ","通信","应该","我们","下来","简单","。","服务器端","发送","了解","计算","得到","ints","结果","对","一个","例程","从","接下来","想要","还是","相对","求和","就","加数","两个","”","代码","是","将","务器","大家"],"title":"案例一：加法求解器","title_tokens":["求解","：","案例","加法","器","一"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_8","text":"我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3","text_tokens":["结果","一个","终端","例程","服务端","run","_"," ","下","3","求和","传入","我们","如下","客户端","提供","客户","一起","learning","数据","service","启动","加数","adder","。","看","client","两个","并","实现","第一个","代码","原理","服务","请求","等待","节点","是","server","第二","发送","的","2","ros2","这个","，","第二个","$","操作","并且","运行","功能","第一","二个"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_9","text":"我们来看下客户端的实现方法。","text_tokens":["。","我们","实现","方法","来看","客户端","客户","下","的"],"title":"客户端代码解析","title_tokens":["客户","代码","解析","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_10","text":"learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], },","text_tokens":["request","8","for","定义","once","setup","_","interface","打印","编译","coding","ok","加法","文件","加法器","failed","系统","包","是否","加入","收到","居","create","配置","成功","except",")","spin","并","__","result","[","服务","正常","请求","wait","+","的","2","：","，","shutdown","env","古月","#","again","接口","python","-","异步","rclpy","名","打开","后","编写","进行","bin","打印输出","call","e","创建","接收","服务器","self","www","客户端","类型","py","类","客户","方式","done","初始化","数据","send","处理","循环","exception","启动",",","client","response","usr","节点","...","'",".","async","%","name","\"","功能","int","d","add","main","logger","需要","反馈","说明","two","entry"," ","com","get","sum","接口类","scripts","sys","设置","guyuehome","console","入口","（","r","程序","1","/","not","*","adder","addtwoints","作者","服务器端","python3","args","完成","while","发送","ros2","super","函数","初始","计算","(","自定","ints","库","a","法器","]","b","示例","@","关闭","argv","一个","adderclient","1.0","def","utf","available","=","sec","如下","一次","知道","from",":","if","import","）","learning","信息","else","service","执行","!","{","接口类型","points","of","加数","break","两个","代码","对象","等待","选项","}","父类","class","将","info","输出","destroy","try","务器","init","none","点","让","future","自定义","as","销毁","node","timeout","运行","srv","waiting"],"title":"程序实现","title_tokens":["实现","程序","程序实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_11","text":"对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口","text_tokens":["对","一个","编程","想要"," ","进行","流程","创建","应答","服务器","我们","如下","客户端","客户","程序","初始化","数据","并","实现","服务器端","服务","对象","请求","等待","节点","发送","：","，","务器","以上","初始","销毁","接口","如果","分析","关闭"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_12","text":"至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。","text_tokens":["什么","中","话题","不知","通信","机制","至于","服务器","知道","时间","数据","订阅","了","者","。","实现","有点","服务器端","服务","请求","的","用到","，","务器","函数","也","并不知道","类似","出现","回调"],"title":"服务端代码解析","title_tokens":["解析","代码","服务","服务端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_13","text":"learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], },","text_tokens":["request","8","定义","setup","_","interface","编译","coding","加法","文件","加法器","系统","adderserver","包","加入","收到","居","提供","create","配置","日志",")","spin","并","__","[","服务","请求","+","server","提示","的","：","，","shutdown","env","古月","#","接口","python","-","rclpy","名","打开","后","编写","进行","bin","创建","应答","服务器","self","www","类型","py","类","初始化","数据","处理","循环",",","client","退出","response","usr","节点","'","callback",".","%","name","功能","\"","、","d","add","main","logger","需要","反馈","说明","two","中","entry"," ","com","sum","get","接口类","已经","scripts","设置","guyuehome","console","入口","（","程序","/","*","adder","addtwoints","作者","python3","args","完成","ros2","super","函数","return","初始","计算","(","自定","ints","库","a","法器","]","b","回调","示例","@","关闭","结果","对","def","utf","n","=","求和","如下","知道","from",":","import","）","主","learning","信息","service","执行","!","{","接口类型","放到","incoming","points","代码","对象","等待","选项","}","父类","class","将","info","输出","destroy","务器","init","none","点","让","销毁","自定义","node","srv","\\"],"title":"程序实现","title_tokens":["实现","程序","程序实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_14","text":"对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口","text_tokens":["结果","对","一个","服务端","编程","反馈","想要"," ","进行","流程","创建","向","应答","服务器","我们","如下","客户端","客户","程序","初始化","并","实现","服务器端","服务","对象","节点","：","函数","，","务器","以上","初始","处","通过","销毁","接口","如果","回调","分析","关闭"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_15","text":"好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。","text_tokens":["求解","需要","更加","已经","加法","下","不是","通信","流程","机制","岂","我们","提到","当","知道","好","了","。","实现","位置","合理","服务","的","视觉","刚才","目标","时候","，","啦","物体","通过","识别","器","回想"],"title":"案例二：机器视觉识别","title_tokens":["机器","识别","案例","二","视觉","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_16","text":"此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client","text_tokens":["机器","run","一个","终端","需要","认为","_","机器人"," ","当前","就","服务器","我们","当","一次","随时","客户端","提供","客户","；","learning","发布","数据","集成","exe","service","拿到","启动","订阅","跟踪","了","。","分别","运动","client","object","有","位置","时","服务器端","服务","对象","然后","请求","上述","节点","是","server","准备","usb","图像","发送","视觉","的","cam","：","目标","ros2","可以","，","务器","$","相机","会","识别","根据","驱动","并且","运行","出现","node","三个","此时"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_17","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], },","text_tokens":["request","8","for","定义","once","setup","_","interface","编译","coding","ok","文件","failed","系统","包","加入","居","create","配置","except",")","spin","并","__","true","result","[","服务","请求","wait","server","的","：","，","target","shutdown","env","古月","#","again","接口","python","-","rclpy","打开","后","编写","进行","bin","call","e","创建","应答","self","www","py","类","done","初始化","objectclient","send","exception",",","client","response","usr","getobjectposition","节点","...","目标","'",".","async","%","name","\"","功能","d","main","logger","需要","说明","entry"," ","com","get","scripts","y","设置","guyuehome","console","position","入口","r","程序","\\","/","not","*","adder","作者","python3","args","完成","while","ros2","super","初始","(","自定","库","]","示例","@","关闭","1.0","def","utf","available","n","=","sec","如下","知道","from",":","if","import","learning","else","service","!","{","points","of","break","object","位置","代码","对象","等待","选项","}","父类","class","info","destroy","try","init","none","点","让","future","识别","自定义","as","销毁","node","timeout","x","srv","waiting"],"title":"客户端代码解析","title_tokens":["客户","代码","解析","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_18","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], },","text_tokens":["数值","面积","一些","request","8","for","imagesubscriber","定义","setup","宽","_","shutdown","red","interface","编译","为","coding","话题","文件","中心","系统","包","bgr8","加入","收到","已经","居","提供","上限","噪声","create","下限","data","配置","findcontours","日志","msg",")","订阅","spin","并","__","0","[","waitkey","服务","receiving","w","请求","true","使用","+","server","图像","苹果","的","2","提示","已","：","，","target","to","队列","去除","5","转化","retr","circle","in","物体","env","古月","#","上角","接口","python","-","imshow","rclpy","objecty","名","打开","array","detect","后","video","编写","消息","进行","bin","list","创建","服务器","cvtcolor","self","www","类型","py","类","command","128","初始化","chain","bridge","cvbridge","ros","处理","数据","循环",",","client","退出","太小","response","usr","getobjectposition","节点","转换","点画","contours","hsv","目标","'","sub","bgr2hsv","callback",".","%","高","name","\"","invalid","、","int","d","功能","cv2","左上","main","logger","图像处理","numpy","反馈","说明","中","及","需要","entry"," ","com","get","二值化","msgs","180","lower","raw","接口类","像素","drawcontours","frame","scripts","upper","<","y","设置","shape","guyuehome","console","sensor","position","255","入口","image","（","所在","程序","1","长度","/","用于","*","inrange","adder","者","作者","颜色","python3","args","img","完成","轮廓","mask","ros2","super","函数","approx","左上角","return","初始","计算","h","得到","(","cnt","检测","自定","和","勾勒","50","listener","库","互相","opencv","]","回调","color","示例","@","关闭","boundingrect","一个","范围","对","bgr","def","utf","从","continue","n","150","cv","出来","imgmsg","=","10","xy","如下","知道","from",":","if","import","）","objectx","主","learning","信息","化成","service","执行","else","!","90","{","接口类型","模型","points","subscription","object","代码","对象","等待","效果","选项","}","父类","显示","class","hierarchy","将","info","输出","destroy","进入","与","坐标","阈值","务器","init","红色","none","转化成","点","让","销毁","自定义","识别","as","node","np","x","srv","\\"],"title":"服务端代码解析","title_tokens":["解析","代码","服务","服务端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_19","text":"服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求","text_tokens":["type",">","_"," ","常用","list","call","数据类型","命令","<","如下","类型","data","service","数据","服务","请求","列表","查看","发送","的","：","ros2","$","操作","#","name"],"title":"服务命令行操作","title_tokens":["命令","服务","操作","命令行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_20","text":"话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。","text_tokens":["定义","同步","场景","前者","话题","常用","需求","数据类型","通用","很多","大部分","大部","获取","数据通信","就要","同步性","里程","服务","图像","的","开发","，","这个","后者","满足","应用","接口","感器","部分","里程计","一问一答","传感器","标准","通信接口","软硬件","绝大","类型","数据","ros","更","了","不过","过程","针对","比比皆是","视觉","单向","周期性","目标","时候","设计","也","要求","高","指令","、","控制指令","硬件","传输","中","传感"," ","数据通","周期","最为","通信","无法","适合","等等","我们","雷达","。","方法","控制","和","自定","在","类似","等","机器","机器人","比如","比比","这些","位置","是","繁杂","绝大部分","软硬","到","识别","自定义","两种","都"],"title":"思考题","title_tokens":["思考题","思考","考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_21","text":"https://docs.ros.org/en/humble/Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":[":","org","tutorials","services","humble",".","ros","understanding","-","en","docs","https","/","ros2","html"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/","text":"通信接口 在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。 接口的定义 接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。 ROS通信接口 接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。 语言无关 为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。 标准接口 大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。 案例一：服务接口的定义与使用 了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。 接口定义 在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ... 程序调用 我们在代码中再来重点看下接口的使用方法。 客户端接口调用 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 服务端接口调用 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 案例二：话题接口的定义与使用 话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。 运行效果 现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub 接口定义 在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ... 程序调用 我们在代码中再来重点看下接口的使用方法。 发布者接口调用 learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 订阅者接口调用 learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 接口命令行操作 接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义 参考链接 https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["数值","一些","布尔值","模块","封装","cmakelists","匹配","如何","ok","你来我往","系统","single","保证","想","spin","receiving","[","约束","小海龟","请求","使用","wait","+","多","的","苹果","20","2","之前","上去","队列","webcam","接口定义","retr","物体","env","古月","相机","上角","define","python","包含","-","原色","名","detect","由","编写程序","还","消息","方便","上","进行","e","转到第","应答","cvtcolor","self","www","标准","通信接口","内容","参考","一起","发布","数据","objectclient","主程序","称之为","了","过程","topic","的话","另外","可以","xml","runtime","各个","也","里","humble","根据","具体",".","callback","\"","指令","find","main","左上","logger","subscribernode","硬件","第三","传输","“","反馈","海龟","com","包装","周期","已经","通信","什么样","彼此","upper","形状","shape","sensor","position","下来","r","中有","转","1","看上","*","交流","插头","python3","img","三种","希望","轮廓","肯定","return","左上角","以上","便于","计算","做成","50","讲","关系","二","很","b","回调","等","color","转到","关闭","结果","一个","描述","路径","utf","n","旋转","还是","比如","10","理解","就","xy","一次","诞生","最终","中来","自语","）","主","learning","来","!","两个","object","第一个","位置","关注","对象","图形化","效果","depend","第二","将","std","？","进入","与","坐标","none","操作","project","识别","无论是","自定义","node","一种","二个","request","面积","什么","继续","速度","服务端","定义","once","文件夹","编译","文件","加法","减少","中心","这","en","包","命令","只要","而是","是否","或者","个人","bgr8","获取","g","分成","配置","except","订阅",")","之为","看","并","result","waitkey","服务","找到","例子","cam","给","开发","调用函数","件夹","shutdown","5","度","参数","无关","转化","应用","形象化","布尔","org","依赖","输入输出","exec","每","run","二维","解析","编写","编译器","bin","看看","call","现在","回顾","类型","py","类","done","command","每隔","各个领域","初始化","bridge","ros","cvbridge","chain","循环","体",",","更","退出","response","getobjectposition","举个","...","contours","输入","1s","html","一下","有机","async","、","d","成","cv2",">","图像处理","需要","轮子","use","不是","180","像素","drawcontours","<","目的","255","再","image","安装","（","所以","种","动作","inrange","一边","了解","mask","int64","函数","super","控制","approx","有没有","这样","h","和","勾勒","bool","数组","在","重复","软件开发","反正","@","boundingrect","相互","像头","string","def","整型","generate","=","sec","后续","知道","if","service","exe","模型","of","代码","连接","选项","形象","父类","info","输出","学习","阈值","区分","红色","表示","转化成","生成","np","手机","waiting","角速度","8","还有","宽","red","完全","为","coding","就行","机制","工作","别人","字符串","广泛","各种","收到","居","interfaces","micro","create","代码生成","下限","噪声","findcontours","不管","日志","分别","有","__","0","正常","涵盖","：","，","to","状态","去除","$","调用","in","circle","again","会","驱动","此时","第一","objecty","建立","array","后","video","符合","数据结构","32","传输数据","自己","处理","插座","自言自语","client","好奇","pub","精髓","太小","时","但","usr","人","联系","点画","核心","视觉","单向","hsv","时候","concepts","由于","一句","'","开始","通过","typec","高","name","invalid","三个","---","哪些","领域","及","概念","为了"," ","get","最为","frame","高效","换成","固定","and","64","guyuehome","入口","tutorials","所在","程序","default","呢","甚至","generators","必须","while","发送","publisher","required","他们","(","检测","库","a","并且","类似","小海","opencv","]","互相","示例","机器","范围","到底","编程","却是","bgr","从","接下来","更为","上边","available","常见","当前","出来","图形","摄像","求和","from",":","import","；","得","else","执行","90","{","造","subscription","无论","}","摄像头","话","class","hierarchy","之间","show","重要","到","研究","众多","加","future","as","销毁","运行","timeout","才能","位","都","https","那","终端","for","imagesubscriber","_","回到","interface","打印","详细","话题","常用","可能","出去","share","failed","接下","链接","标准接口","随处","提供","上限","data","以及","docs","它","标值","msg","packages","运动","实现","true","重点","w","server","图像","提示","这里","三原色","已","这个","target","自动","发布者","程序模块","#","接口","某个","usb","部分","imshow","rclpy","传递","把","查询","打开","三原","rosidl","组成","案例","下","看到","list","包中","主要","创建","降低","group","服务器","客户端","客户","128","键盘","action","可见","讲解","send","exception","启动","添加","int32","要","没有","节点","像素点","中间","package","转换","关心","一","目标","两者","准确","设计","sub","bgr2hsv","用来","不同","member","直接","%","功能","int","只","build","publish","numpy","说明","中","sum","二值化","msgs","txt","lower","随处可见","raw","接口类","线速度","将要","对应","y","我们","等等","c++","语言","长度","/","关于","not","看上去","用于","。","者","角度","作者","每个","方法","颜色","args","生活","一帧","完成","结构","ros2","初始","第二个","得到","cnt","自定","listener","课程","命令行","几个","像是","谁","对","例程","objectposition","只有","第三个","1.0","continue","机器人","150","cv","imgmsg","数","如下","软件","好","objectx","进度","信息","值","化成","这些","接口类型","坐标值","break","—","”","about","等待","是","两","衍生","电脑","列表","显示","30","查看","destroy","try","用到","务器","字符","init","让","大家","就是","x","srv","不用","\\"],"title":"通信接口","title_tokens":["通信","通信接口","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_1","text":"在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。","text_tokens":["一个","什么","定义","中","概念","为了"," ","还是","话题","你来我往","不是","通信","这","后续","系统","将要","理解","我们","而是","或者","个人","标准","通信接口","内容","自语","好","呢","甚至","数据","ros","动作","自言自语","。","更","并","两个","交流","—","无论","服务","人","是","多","的","给","结构","？","用到","，","学习","可以","重要","让","会","接口","在","大家","就是","都","传递"],"title":"通信接口","title_tokens":["通信","通信接口","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_2","text":"接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。","text_tokens":["角速度","什么","那","一些","模块","速度","定义","回到","完全","匹配","如何","话题","常用","这","系统","工作","机制","包","只要","广泛","随处","提供","g","micro","配置","它","之为","运动","有","实现","约束","正常","服务","使用","图像","多","的","三原色","给","例子","开发","调用函数","，","这个","上去","参数","调用","程序模块","相机","应用","接口","驱动","-","形象化","usb","输入输出","把","每","原色","建立","三原","由","解析","编写","编写程序","组成","上","进行","符合","主要","标准","内容","通信接口","传输数据","一起","发布","各个领域","一种","数据","可见","ros","自己","键盘","主程序","插座","称之为","更","了","精髓","时","要","但","节点","像素点","举个","输入","关心","时候","可以","两者","准确","一句","开始","各个","也","通过","typec","直接","具体","指令","、","硬件","传输","反馈","领域","中","概念"," ","包装","最为","通信","随处可见","像素","高效","固定","彼此","线速度","什么样","形状","等等","我们","目的","所在","安装","r","程序","所以","呢","关于","看上","看上去","。","每个","插头","必须","生活","结构","肯定","函数","他们","控制","和","讲","关系","在","并且","类似","很","b","等","像是","软件开发","反正","机器","相互","一个","像头","结果","编程","却是","只有","更为","机器人","常见","还是","出来","图形","比如","摄像","就","软件","一次","诞生","知道","好","；","得","值","这些","两个","无论","代码","关注","连接","图形化","是","形象","电脑","摄像头","话","输出","？","让","到","加","无论是","就是","手机","才能","大家","运行","都","不用"],"title":"接口的定义","title_tokens":["的","接口","定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#ros","text":"接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。","text_tokens":["每","定义","轮子"," ","方便","常用","话题","通信","减少","这","机制","降低","我们","别人","各种","一起","程序","种","一种","ros","动作","分别","。","造","有","代码","服务","联系","使用","是","三种","节点","核心","的","目标","可以","，","之间","便于","有机","也","让","通过","到","接口","就是","才能","重复","、","依赖"],"title":"ROS通信接口","title_tokens":["ros","通信接口","接口","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_3","text":"为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。","text_tokens":["数值","布尔值","什么","还有","定义","编译","话题","文件","就行","加法","机制","是否","分成","保证","分别","msg","运动","服务","小海龟","请求","使用","的","这里","20","之前","，","这个","状态","度","无关","自动","会","接口","python","包含","布尔","部分","此时","每","二维","还","看到","转到第","应答","数据结构","通信接口","32","每隔","数据","一种","action","ros","体","了","int32","过程","节点","中间","单向","目标","另外","1s","可以","由于","一下","设计","开始","里","用来","不同","通过",".","功能","三个","、","---","只","传输","需要","“","反馈","中","海龟","为了"," ","sum","周期","通信","对应","y","我们","c++","64","语言","转","动作","。","一边","一帧","完成","结构","int64","和","做成","bool","数组","在","a","b","小海","等","转到","机器","结果","一个","编程","描述","整型","机器人","旋转","当前","还是","比如","求和","10","数","知道","最终","进度","这些","90","两个","”","是","两","30","将","坐标","学习","区分","表示","让","生成","到","x","srv","位"],"title":"语言无关","title_tokens":["无关","语言"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_4","text":"大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。","text_tokens":["到底","哪些","打开","定义","路径","中","文件夹","文件","可能","share","看看","系统","我们","标准","安装","呢","ros","了","。","好奇","找到","涵盖","的","给","？","可以","，","件夹","众多","接口","在","大家","几个"],"title":"标准接口","title_tokens":["接口","标准","标准接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_5","text":"了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。","text_tokens":["机器","一个","查询","例程","服务端","第三","第三个","定义","需要","中","概念","接下来","从","编写","封装","如何"," ","话题","下","进行","通信","接下","就","我们","回顾","收到","通信接口","再","提供","下来","发布","来","以及","讲解","了","。","角度","实现","有","第一个","代码","服务","对象","位置","请求","使用","节点","是","第二","图像","发送","的","视觉","了解","目标","时候","之前","可以","，","这样","第二个","相机","研究","接口","识别","在","驱动","课程","三个","第一","二个"],"title":"案例一：服务接口的定义与使用","title_tokens":["与","定义","服务","：","接口","案例","使用","的","一"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_6","text":"在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ...","text_tokens":["服务端","定义","_","interface","cmakelists","为","编译","文件","包","获取","interfaces","代码生成","配置",")","packages","true","服务","使用","的","：","这个","，","接口定义","$","自动","#","会","接口","部分","依赖","exec","后","还","rosidl","编译器","group","了","添加","int32","getobjectposition","过程","package","...","目标","的话","xml","runtime","也","不同","member","根据",".","name","功能","指令","find","、","\"","---",">","build","需要","反馈","中"," ","get","txt","通信","y","<","我们","中有","语言","default","/","generators","。","完成","required","(","bool","在","例程","上边","generate","就","一次","learning","{","of","两个","位置","代码","选项","是","}","depend","坐标","表示","让","生成","project","x","srv"],"title":"接口定义","title_tokens":["接口","定义","接口定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_7","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["。","看","我们","方法","代码","中","再","重点","接口","使用","在","来","下","的"],"title":"程序调用","title_tokens":["调用","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_8","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["request","8","for","定义","once","_","interface","coding","ok","failed","居","create","except",")","spin","并","__","true","result","服务","请求","wait","的","，","target","shutdown","env","古月","#","again","接口","python","-","rclpy","进行","bin","call","e","创建","应答","self","www","py","类","done","初始化","objectclient","send","exception",",","client","response","usr","getobjectposition","节点","...","目标","'",".","async","%","name","\"","d","main","logger","说明"," ","com","get","y","guyuehome","position","r","\\","/","not","*","作者","python3","args","while","ros2","super","初始","(","自定","库","示例","@","关闭","1.0","def","utf","available","n","=","sec","from",":","if","import","learning","else","service","!","of","break","object","位置","对象","等待","父类","class","info","destroy","try","init","none","future","识别","自定义","as","销毁","node","timeout","x","srv","waiting"],"title":"客户端接口调用","title_tokens":["客户","接口","调用","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_9","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["数值","面积","一些","request","8","for","imagesubscriber","定义","宽","_","shutdown","red","interface","为","coding","话题","中心","bgr8","收到","已经","居","提供","上限","噪声","create","下限","data","findcontours","日志","msg",")","订阅","spin","并","__","0","[","waitkey","服务","receiving","w","请求","true","使用","+","server","图像","苹果","的","2","提示","已","，","target","to","队列","去除","5","转化","retr","circle","in","物体","env","古月","#","上角","接口","python","-","imshow","rclpy","objecty","名","array","detect","后","video","消息","进行","bin","list","创建","服务器","cvtcolor","self","www","类型","py","类","command","128","初始化","chain","bridge","cvbridge","ros","处理","数据","循环",",","退出","太小","response","usr","getobjectposition","节点","转换","点画","contours","hsv","目标","'","sub","bgr2hsv","callback",".","%","高","name","\"","invalid","、","int","d","cv2","左上","main","logger","图像处理","numpy","反馈","说明","中","及"," ","com","get","二值化","msgs","180","lower","raw","接口类","像素","drawcontours","frame","upper","<","y","shape","guyuehome","sensor","position","255","入口","image","（","所在","1","长度","/","用于","*","inrange","者","作者","颜色","python3","args","img","轮廓","mask","ros2","super","函数","approx","左上角","return","初始","计算","h","得到","(","cnt","检测","自定","和","勾勒","50","listener","库","互相","opencv","]","回调","color","示例","@","关闭","boundingrect","一个","范围","对","bgr","def","utf","从","continue","n","150","cv","出来","imgmsg","=","10","xy","from",":","if","import","）","objectx","主","learning","信息","化成","service","执行","else","!","90","接口类型","模型","subscription","object","对象","等待","效果","父类","显示","class","hierarchy","将","info","输出","destroy","进入","与","坐标","阈值","务器","init","红色","none","转化成","销毁","自定义","识别","as","node","np","x","srv","\\"],"title":"服务端接口调用","title_tokens":["接口","调用","服务","服务端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_10","text":"话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。","text_tokens":["机器","把","继续","需要","定义","从","案例","话题","周期","通信","换成","我们","通信接口","中来","发布","不管","想","。","位置","服务","没有","人","是","衍生","视觉","的","目标","之前","，","有没有","也","接口","识别","类似"],"title":"案例二：话题接口的定义与使用","title_tokens":["与","定义","接口","案例","使用","二","话题","的","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_11","text":"现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub","text_tokens":["谁","run","一个","终端","第三","需要","定义","第三个","中","封装","_","打印","消息"," ","interface","话题","出去","现在","就","我们","标准","image","；","learning","发布","数据","来","exe","ros","启动","订阅","分别","。","pub","并","object","第一个","位置","成","节点","使用","是","希望","topic","第二","图像","usb","的","将","视觉","：","目标","ros2","cam","，","这个","以上","第二个","$","sub","到","相机","会","识别","驱动","运行","node","功能","三个","此时","第一","二个"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_12","text":"在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ...","text_tokens":["定义","_","interface","cmakelists","编译","话题","包","interfaces","配置","标值","msg",")","服务","使用","的","：","这个","，","接口定义","$","自动","#","接口","后","还","rosidl","编译器","消息","进行","内容","了","int32","过程","package","...","目标","不同","根据",".","name","功能","\"","find","、","需要","中"," ","txt","通信","y","我们","语言","default","/","generators","。","完成","required","(","在","一个","例程","objectposition","描述","generate","learning","{","坐标值","位置","代码","选项","是","}","坐标","表示","让","生成","project","x"],"title":"接口定义","title_tokens":["接口","定义","接口定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_13","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["。","看","我们","方法","代码","中","再","重点","接口","使用","在","来","下","的"],"title":"程序调用","title_tokens":["调用","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_14","text":"learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["数值","面积","一些","8","for","imagesubscriber","定义","宽","_","shutdown","red","interface","为","coding","话题","中心","bgr8","居","上限","噪声","create","下限","data","findcontours","日志","msg",")","订阅","spin","并","__","0","[","waitkey","receiving","w","使用","+","图像","苹果","的","2","提示","已","，","to","队列","去除","5","转化","retr","circle","发布者","in","env","古月","#","上角","接口","python","-","webcam","imshow","rclpy","objecty","名","array","detect","后","video","消息","进行","bin","list","创建","cvtcolor","self","www","类型","py","类","128","发布","初始化","chain","bridge","cvbridge","ros","处理","循环",",","pub","退出","太小","usr","节点","topic","转换","点画","contours","hsv","目标","'","sub","bgr2hsv","callback",".","高","name","\"","、","int","cv2","左上","main","logger","图像处理","publish","numpy","说明","中","及"," ","com","get","二值化","msgs","180","lower","raw","像素","drawcontours","frame","upper","<","y","shape","guyuehome","sensor","position","255","入口","image","（","所在","1","长度","/","用于","*","inrange","者","作者","颜色","python3","args","img","轮廓","publisher","mask","ros2","super","函数","approx","左上角","初始","计算","h","得到","(","cnt","检测","自定","和","勾勒","50","listener","库","互相","opencv","]","回调","color","示例","@","关闭","boundingrect","一个","范围","objectposition","bgr","def","utf","从","continue","150","cv","出来","imgmsg","=","10","xy","from",":","if","import","）","objectx","主","learning","信息","化成","!","90","模型","subscription","object","位置","对象","等待","效果","父类","显示","class","hierarchy","将","info","输出","destroy","进入","与","坐标","阈值","init","红色","none","转化成","销毁","自定义","as","node","np","x"],"title":"发布者接口调用","title_tokens":["接口","发布者","调用","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_15","text":"learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["8","定义","_","interface","coding","话题","字符串","收到","居","create","日志","订阅",")","msg","spin","并","__","提示","的","，","target","队列","shutdown","env","古月","#","接口","python","-","rclpy","名","后","消息","进行","bin","创建","self","www","类型","py","类","初始化","数据","处理","循环",",","退出","usr","节点","topic","目标","'","sub","callback",".","%","name","\"","、","d","main","subscribernode","logger","说明"," ","com","get","msgs","y","guyuehome","position","入口","（","长度","/","*","者","作者","python3","args","ros2","super","函数","初始","(","自定","listener","库","回调","示例","@","关闭","一个","对","string","objectposition","def","utf","=","10","from",":","import","主","learning","信息","执行","!","subscription","object","位置","对象","等待","父类","class","info","输出","std","destroy","字符","init","none","销毁","自定义","node","x","\\"],"title":"订阅者接口调用","title_tokens":["订阅","接口","者","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_16","text":"接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义","text_tokens":[">","定义","_","interface","详细"," ","常用","list","包中","系统","命令","<","如下","列表","package","查看","的","：","ros2","show","$","接口定义","操作","#","接口","某个","name","功能"],"title":"接口命令行操作","title_tokens":["接口","命令","操作","命令行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_17","text":"https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["interface"," ","use","en","and",":","tutorials","interfaces","single","ros","docs","/","about","package","https","concepts","html","define","humble",".","-","org"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/","text":"动作 机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。 通信模型 举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。 客户端/服务器模型 动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。 一对多通信 和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。 同步通信 既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。 由服务和话题合成 大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。 案例一：小海龟的动作 我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback 案例二：机器人画圆 如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。 运行效果 启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。 接口定义 例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是 动作的目标 ，enable为true时，表示开始运动； 第二块是 动作的执行结果 ，finish为true，表示动作执行完成； 第三块是 动作的周期反馈 ，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ... 通信模型 通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。 服务端代码解析 learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], }, 客户端代码解析 learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], }, 动作命令行操作 动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["模块","rotateabsolute","封装","cmakelists","如何","ok","完整","理","系统","圈","秘密","含义","时间","某","想","spin","[","底层","小海龟","请求","使用","wait","多","的","20","之前","既然","接口定义","这种","env","古月","0.5","python","包含","-","succeed","名","隐藏","由","画圆","还","消息","received","上","进行","接收","self","www","标准","通信接口","range","参考","一起","发布","数据","不","了","过程","movecircleactionserver","另外","可以","也","humble","根据","具体",".","callback","\"","指令","整个","find","某一","add","main","logger","第三","应带","反馈","背后","海龟","处理函数","com","周期","通信","publishing","加深","仔细","下来","转","execute","三块","发现","*","拒绝","python3","希望","肯定","return","便于","段时间","二","很","回调","等","关闭","结果","一个","utf","旋转","读取","比如","10","就","理解","一次","按照","最终","）","主","learning","一点一点","来","!","understanding","time","先","两个","位置","对象","效果","不仅仅","第二","1.57","哪里","？","坐标","none","actionclient","操作","相比","handle","project","识别","自定义","不仅","node","一种","行为","转个","什么","服务端","定义","场景","编译","文件","en","这","抓取","包","命令","而是","是否","顺利","获取","配置","订阅",")","看","并","result","仅仅","服务","例子","干什么","shutdown","度","应用","异步","org","run","每","解析","编写","编译器","之后","bin","多少度","现在","当","分拣","一对","类型","py","类","done","每隔","初始化","ros","循环","被",",","第二块","取消","退出","一套","response","举个","...","1s","html","一下","又","async","--","、","d","拒绝执行",">","需要","accepted","不是","<","设置","目的","console","多少","再","所处","（","feedback","move","动作","但是","直到","同时","一边","虽然","管理","以下","有没有","控制","super","函数","这样","和","bool","在","absolute","@","def","i","generate","=","一块","知道","导航","真器","if","实际","第一块","模型","代码","选项","复杂","父类","enable","info","输出","表示","毕竟","生成","分析","8","没错","setup","同步","为","coding","圆周","机制","需求","数据类型","goal","加入","机械","theta","收到","居","turtle1","interfaces","日志","分别","发送给","一段","actionserver","有","__","0","通信模型","：","姿态","，","圆周运动","状态","$","调用","circle","in","会","其","二块","第一","使","送餐","仿真器","达到","后","流程","turtle","方式","控","处理","指定","client","时","但","usr","应用层","针对","'","名字","rejected","开始","还会","通过","其实","name","常常","三个","---","type","就此","仿真","entry","概念"," ","get","实时","送货","动","智能","guyuehome","入口","tutorials","程序","default","呢","能","简单","进度条","generators","再用","转圈","服务器端","不会","发送","竟然","required","teleop","(","合成","遥控","库","类似","]","小海","示例","送给","机器","到底","编程","从","接下来","更为","上边","当前","当中","随时","from",":","import","一样","；","得","执行","较长","{","points","多个","}","class","只能","到","负责","销毁","future","actions","运行","才能","都","https","那","终端","for","_","interface","话题","常用","可能","像","接下","链接","试一试","告诉","就此结束","data","成功","docs","msg","运动","实现","特性","true","server","sleep","这个","key","自动","发布者","满足","#","接口","某个","部分","rclpy","finish","把","一段时间","打开","rosidl","案例","下","看到","list","创建","服务器","一点","模拟","请","客户端","客户","合适","键盘","action","send","启动","int32","介绍","没有","发出","节点","package","一","目标","360","不同","rotate","直接","%","假设","清楚","功能","publish","movecircle","说明","中","这么","根本","接口类","txt","眼前","scripts","我们","语言","起来","/","not","。","者","角度","是不是","过","动图","方法","原理","作者","args","完成","基于","ros2","第三块","初始","自定","如果","命令行","装","moving","对","例程","只有","机器人","turtlesim","臂","结束","相对","如下","好","进度","信息","这些","state","接口类型","思路","—","等待","是","写","列表","查看","30","destroy","用到","务器","init","点","让","就是","大家","movecircleactionclient"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_1","text":"机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。","text_tokens":["行为","机器","送餐","一个","那","对","流程","需要","中","从","概念","机器人","这么","场景"," ","功能","上","完整","进行","通信","系统","送货","需求","机制","就","理解","我们","智能","含义","分拣","目的","好","键盘","一种","这些","ros","简单","动作","被","。","运动","并","实现","—","仅仅","是","复杂","不仅仅","的","目标","另外","管理","用到","，","这个","可以","名字","便于","这种","也","满足","会","遥控","识别","某个","具体","在","不仅","应用","就是","很","等","常常","、","某一"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_2","text":"举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。","text_tokens":["行为","转个","ok","像","这","圈","机制","命令","告诉","时间","想","一段","运动","并","使用","例子","的","20","，","度","把","一段时间","后","还","之后","多少度","现在","一点","合适","每隔","控","不","了","取消","没有","发出","过程","举个","1s","可以","一下","360","开始","假设","指令","、","需要","反馈","根本"," ","不是","眼前","通信","我们","多少","再","转","动作","进度条","直到","。","转圈","完成","发送","肯定","有没有","这样","段时间","在","如果","装","机器","一个","到底","机器人","更为","旋转","当前","结束","比如","10","就","当中","知道","随时","进度","一点一点","得","信息","执行","是","30","哪里","？","表示","让","到","才能"],"title":"通信模型","title_tokens":["通信模型","通信","模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_3","text":"动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。","text_tokens":["机器","什么","一个","就此","达到","反馈","后","中","机器人","之后"," ","当前","周期","臂","结束","可能","实时","通信","抓取","就","服务器","动","当","导航","机械","收到","客户端","再","所处","客户","就此结束","信息","起来","执行","动作","模型","想","同时","。","一边","运动","服务器端","服务","过程","使用","是","发送","的","干什么","目标","姿态","，","务器","控制","状态","这个","坐标","和","开始","也","又","让","如果","类似","整个"],"title":"客户端/服务器模型","title_tokens":["务器","服务器","服务","客户端","客户","/","模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_4","text":"和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。","text_tokens":["机器","一个","只有","中","机器人","下","通信","命令","服务器","客户端","一样","客户","执行","动作","但是","多个","先","。","运动","有","服务器端","服务","完成","发送","的","只能","可以","，","务器","和","毕竟","大家","才能","都"],"title":"一对多通信","title_tokens":["多","通信","一对"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_5","text":"既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。","text_tokens":["那","反馈","定义","中","同步","进行","文件","通信","机制","我们","通信接口","数据","action","动作","。","过","有","介绍","过程","是","使用","的","之前","既然","，","也","接口",".","一种"],"title":"同步通信","title_tokens":["通信","同步"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_6","text":"大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。","text_tokens":["一个","隐藏","模块","应带","反馈","没错","上边"," ","话题","下","不是","周期","通信","机制","秘密","命令","服务器","当","收到","再","客户端","仔细","客户","发布","来","其","动作","发现","订阅","。","看","者","运动","是不是","两个","有","动图","时","服务器端","服务","底层","过程","请求","应用层","是","使用","发送","的","基于","实现","目标","竟然","，","务器","还会","调用","也","表示","发布者","和","会","应用","大家","其实","就是","三个","一种"],"title":"由服务和话题合成","title_tokens":["和","由","合成","服务","话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_7","text":"我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback","text_tokens":["run","对","rotateabsolute","仿真器","仿真","概念","海龟","接下来","turtlesim","_","案例"," ","接下","理解","命令","我们","真器","goal","加深","theta",":","按照","turtle","下来","turtle1","feedback","某","action","send","动作","指定","/","启动","{","。","再用","运动","小海龟","使用","}","的","1.57","info","一","：","ros2","以下","，","控制","可以","姿态","key","$","teleop","让","到","rotate","-","小海","node","--","\"","absolute"],"title":"案例一：小海龟的动作","title_tokens":["动作","小海龟","海龟","：","案例","小海","的","一"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_8","text":"如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。","text_tokens":["机器","转个","一个","编程","中","封装","接下来","机器人","如何"," ","话题","通信","接下","圈","就","试一试","服务器","我们","而是","请","客户端","实际","好","下来","一起","客户","来","呢","动作","。","并","一套","实现","但","方法","代码","服务","有","特性","服务器端","过程","是","使用","针对","希望","不会","的","虽然","基于","？","，","务器","和","让","通过","接口","直接","在","假设"],"title":"案例二：机器人画圆","title_tokens":["机器","画圆","机器人","案例","二","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_9","text":"启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。","text_tokens":["机器","run","每","终端","例程","服务端","背后","反馈","中","_","机器人","接下来","之后"," ","结束","下","看到","接下","就","命令","服务器","我们","一次","模拟","客户端","最终","客户","下来","move","learning","信息","action","动作","启动","分别","。","client","运动","两个","并","实现","服务器端","服务","原理","server","完成","30","发送","的","：","ros2","目标","可以","，","务器","这个","一下","$","和","开始","度","运行","示例","分析"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_10","text":"例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是 动作的目标 ，enable为true时，表示开始运动； 第二块是 动作的执行结果 ，finish为true，表示动作执行完成； 第三块是 动作的周期反馈 ，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ...","text_tokens":["定义","_","interface","cmakelists","为","编译","包","是否","interfaces","配置","成功",")","运动","并","true","使用","的","：","，","接口定义","$","自动","#","接口","包含","二块","部分","第一","finish","后","还","编译器","rosidl","进行","标准","action","ros","第二块","int32","时","过程","package","...","目标","开始","通过","不同","根据",".","name","功能","三个","指令","find","\"","---","第三","需要","movecircle","反馈","中"," ","周期","不是","txt","我们","语言","default","三块","动作","/","generators","。","角度","完成","required","第三块","(","bool","自定","在","机器","结果","例程","机器人","旋转","当前","generate","一块","；","learning","执行","第一块","state","{","位置","代码","选项","是","}","第二","enable","表示","让","到","生成","project","自定义"],"title":"接口定义","title_tokens":["接口","定义","接口定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_11","text":"通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。","text_tokens":["机器","一个","例程","反馈","后","接下来","机器人"," ","周期","结束","话题","通信","理","相对","接下","服务器","我们","客户端","客户","下来","程序","信息","起来","较长","动作","模型","发送给","。","运动","并","思路","代码","服务","通信模型","写","分析","发送","的","一","目标","之前","，","务器","控制","这样","一下","开始","和","相比","清楚","就是","运行","送给"],"title":"通信模型","title_tokens":["通信模型","通信","模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_12","text":"learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["8","服务端","for","定义","setup","_","interface","编译","coding","文件","圆周","系统","包","goal","加入","收到","居","配置","成功","msg",")","运动","actionserver","并","__","0","result","true","服务","spin","[","server","sleep","的","：","圆周运动","，","shutdown","度","circle","in","env","古月","#","0.5","接口","python","-","rclpy","finish","succeed","名","打开","后","编写","之后","消息","进行","bin","创建","服务器","self","www","range","类型","py","类","发布","初始化","action","处理","循环",",","退出","usr","节点","...","movecircleactionserver","目标","'","360","callback",".","%","name","\"","功能","、","d","main","logger","publish","需要","movecircle","说明","反馈","entry","处理函数"," ","com","get","周期","接口类","scripts","设置","publishing","guyuehome","console","入口","（","move","feedback","程序","execute","/","动作","*","角度","作者","python3","args","完成","ros2","super","函数","return","初始","(","自定","库","]","回调","示例","moving","@","关闭","结果","一个","def","utf","从","i","当前","=","如下","知道","from",":","import","最终","）","主","learning","信息","执行","!","state","{","time","接口类型","points","代码","对象","等待","选项","}","父类","30","class","info","destroy","务器","init","none","表示","点","让","负责","到","handle","销毁","自定义","node"],"title":"服务端代码解析","title_tokens":["解析","代码","服务","服务端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_13","text":"learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["8","for","定义","setup","_","interface","编译","为","coding","文件","圆周","系统","包","goal","加入","收到","顺利","居","获取","配置","日志","msg",")","运动","并","spin","__","result","true","[","服务","请求","wait","server","的","：","圆周运动","，","shutdown","circle","env","古月","#","接口","python","-","异步","rclpy","finish","使","名","打开","后","编写","之后","消息","received","进行","bin","创建","接收","服务器","self","www","客户端","类型","py","客户","类","方式","done","初始化","数据","action","send","处理","循环","被","启动",",","client","退出","response","时","usr","节点","目标","'","rejected","开始","callback",".","async","%","name","\"","功能","、","拒绝执行","d","add","main","logger","需要","movecircle","说明","反馈","accepted","entry"," ","com","周期","get","接口类","scripts","设置","guyuehome","console","入口","（","move","feedback","程序","能","/","动作","not","*","拒绝","作者","服务器端","python3","args","希望","完成","发送","ros2","super","函数","return","初始","(","自定","库","如果","]","回调","示例","@","关闭","机器","结果","一个","def","utf","机器人","读取","=","如下","知道","from",":","if","import","最终","）","主","learning","执行","!","state","{","接口类型","points","代码","对象","等待","选项","}","父类","enable","class","info","输出","destroy","务器","init","none","actionclient","点","让","handle","future","自定义","销毁","node","movecircleactionclient"],"title":"客户端代码解析","title_tokens":["客户","代码","解析","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_14","text":"动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求","text_tokens":["type",">","_"," ","常用","list","数据类型","命令","<","如下","goal","类型","data","数据","action","send","动作","服务","请求","列表","查看","发送","的","info","：","ros2","$","操作","#","name"],"title":"动作命令行操作","title_tokens":["命令","动作","操作","命令行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":[":","org","tutorials","actions","humble",".","ros","understanding","-","en","docs","https","/","ros2","html"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/","text":"参数 话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。 通信模型 比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。 全局字典 在ROS系统中，参数是以 全局字典 的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。 可动态监控 在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。 案例一：小海龟例程中的参数 在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 启动两个终端，分别运行小海龟仿真器和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看参数列表 当前系统中有哪些参数呢？我们可以启动一个终端，并使用如下命令查询： $ ros2 param list 参数查询与修改 如果想要查询或者修改某个参数的值，可以在param命令后边跟get或者set子命令： $ ros2 param describe turtlesim background_b # 查看某个参数的描述信息 $ ros2 param get turtlesim background_b # 查询某个参数的值 $ ros2 param set turtlesim background_b 10 # 修改某个参数的值 参数文件保存与加载 一个一个查询/修改参数太麻烦了，不如试一试参数文件，ROS中的参数文件使用yaml格式，可以在param命令后边跟dump子命令，将某个节点的参数都保存到文件中，或者通过load命令一次性加载某个参数文件中的所有内容： $ ros2 param dump turtlesim >> turtlesim.yaml # 将某个节点的参数保存到参数文件中 $ ros2 param load turtlesim turtlesim.yaml # 一次性加载某一个文件中的所有参数 案例二：参数编程 接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。 运行效果 启动一个终端，先运行第一句指令，启动param_declare节点，终端中可以看到循环打印的日志信息，其中的“mbot”就是我们设置的一个参数值，参数名称是“robot_name”，通过命令行修改这个参数，看下终端中会发生什么？ $ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle 代码解析 我们来看下在代码中，如何声明、创建、修改一个参数的值。 learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], }, 案例三：机器视觉应用 参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。 运行效果 启动三个终端，分别运行： 相机驱动节点 视觉识别节点 修改红色阈值 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180 在启动的视觉识别节点中，我们故意将视觉识别中红色阈值的上限设置为0，如果不修改参数，将无法实现目标识别。 为了便于调整阈值，我们在节点中将红色阈值的限位修改为了ROS参数，通过命令行修改该参数的值，就可以实现视觉识别啦。 代码解析 我们来看下在视觉识别的代码中，是如何通过参数来设置阈值的。 learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["数值","很大","一些","all","nodeb","如何","该","系统","含义","非常","就要","某","传输方式","spin","receiving","[","小海龟","使用","+","苹果","的","2","队列","retr","物体","env","古月","相机","上角","python","-","秒","名","丰富","detect","由","nodea","timer","还","消息","进行","变量","作用","cvtcolor","self","www","内容","参考","数据","不","后边","了","过程","环境","可以","也","humble","callback",".","\"","指令","整个","号","main","左上","logger","提炼","传输","“","海龟","真实","已经","com","周期","通信","本","upper","字典","shape","sensor","下来","中有","1","*","全局","比较简单","限位","python3","img","三种","轮廓","比较","左上角","熟悉","便于","故意","计算","名称","一两","50","全局变量","二","param","b","回调","等","color","set","关闭","一个","描述","utf","想要","读取","比如","10","就","理解","xy","可","一次","参数值","）","主","learning","来","参数设置","!","understanding","先","调整","定时","两个","object","关注","对象","效果","将","光线","？","进入","与","坐标","none","那个","加载","识别","node","一种","yaml","面积","什么","继续","默认","分辨率","编译","文件","中心","这","en","包","命令","是否","很多","或者","bgr8","获取","哪个","配置","订阅","配置文件",")","看","并","waitkey","服务","不少","cam","robot","shutdown","度","参数","5","转化","应用","org","run","解析","编写","bin","类型","py","类","从而","初始化","chain","bridge","ros","cvbridge","循环",",","退出","然后","contours","输入","html","一下","new","其他","、","d","成","实现目标","cv2",">","图像处理","需要","两句","不是","180","像素","drawcontours","无法","<","设置","console","255","再","多少","image","（","动作","inrange","高级","background","提高","形态","了解","mask","super","函数","approx","控制","h","和","勾勒","在","@","boundingrect","string","def","立刻","=","美颜","条","知道","真器","if","exe","模型","代码","连接","选项","父类","info","输出","阈值","红色","表示","转化成","np","挺","其中","8","mbot","setup","宽","red","区域","为","coding","机制","integer","分辨","加入","居","端口","噪声","发生","create","下限","findcontours","日志","分别","发送给","修改","有","__","0","最新","通信模型","：","第一句","，","declare","啦","去除","to","$","circle","in","会","优化","驱动","第一","array","仿真器","后","video","影响","turtle","方式","大大","动态","格式","处理","指定","太小","usr","点画","核心","视觉","hsv","时候","一句","声明","'","开始","通过","以","name","高","三个","type","哪些","describe","仿真","entry","及","为了"," ","图像识别","get","frame","guyuehome","入口","tutorials","敏感","所在","parameter","程序","呢","简单","重新","三","不如","问题","易用性","辨率","发送","teleop","(","合成","检测","库","互相","类似","]","小海","opencv","易用","示例","送给","单位","机器","范围","编程","bgr","从","接下来","当前","出来","键值","from",":","import","一样","执行","90","滑动","{","points","多个","subscription","说干就干","麻烦","}","class","hierarchy","监控","到","销毁","叫做","as","运行","都","https","终端","for","imagesubscriber","子","来看","_","跟","打印","大大提高","话题","常用","可能","像","接下","链接","试一试","提供","上限","data","docs","输入框","msg","每次","特性","实现","办法","w","曝光","键和值","图像","提示","已","存在","这个","key","所有","#","接口","某个","usb","部分","imshow","rclpy","把","查询","打开","一次性","一两句","组成","案例","下","看到","list","保存","创建","dump","parameternode","键盘","128","启动","介绍","改变","叫","节点","默认值","转换","一","目标","sub","bgr2hsv","不同","%","清楚","功能","int","load","numpy","说明","中","访问","节","二值化","msgs","scripts","考虑","lower","raw","y","我们","等等","c++","编码","parameters","起来","长度","/","用于","。","者","作者","方法","颜色","args","完成","ros2","中将","初始","得到","cnt","listener","如果","命令行","几个","对","例程","hello","太","continue","机器人","turtlesim","150","cv","imgmsg","么","s","如下","化成","信息","值","这些","value","—","”","定时器","等待","是","写","列表","查看","体验","显示","destroy","用到","即可","init","点","让","大家","就是","x","共享","某些","变化"],"title":"参数","title_tokens":["参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_1","text":"话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。","text_tokens":["机器","编程","传输","中","机器人","节","已经","话题","常用"," ","通信","本","这","机制","系统","变量","我们","知道","是否","c++","字典","再","方式","程序","来","一种","数据","ros","不","动作","传输方式","多个","。","全局","介绍","—","服务","是","节点","三种","的","了解","可以","，","便于","参数","全局变量","在","类似","清楚","大家","运行","、","共享","某些"],"title":"参数","title_tokens":["参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_2","text":"比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。","text_tokens":["面积","很大","什么","一些","分辨率","nodeb","区域","文件","像","这","分辨","很多","或者","是否","哪个","端口","配置","分别","输入框","配置文件","有","使用","曝光","图像","的","，","度","参数","相机","会","驱动","部分","usb","后","nodea","进行","作用","影响","格式","改变","过程","节点","核心","视觉","输入","时候","可以","也","通过","不同","功能","整个","需要","中"," ","图像识别","考虑","设置","我们","编码","等等","多少","程序","。","问题","辨率","和","在","机器","比如","就","美颜","条","一样","执行","这些","参数设置","滑动","关注","连接","效果","是","阈值","那个","到","识别","就是","都"],"title":"通信模型","title_tokens":["通信模型","通信","模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_3","text":"在ROS系统中，参数是以 全局字典 的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。","text_tokens":["数值","什么","一个","名","编程","由","中","真实","跟","访问","组成"," ","为","像","系统","键值","就","理解","字典","我们","或者","参数值","一样","ros","后边","。","了","全局","有","然后","叫","是","使用","键和值","形态","的","时候","？","存在","可以","，","这个","即可","参数","名称","和","也","合成","叫做","在","就是","以","等","号"],"title":"全局字典","title_tokens":["字典","全局"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_4","text":"在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。","text_tokens":["数值","一个","对","丰富","编程","中","立刻","访问"," ","进行","可能","比如","这","知道","非常","获取","从而","某","了","修改","。","高级","特性","有","办法","最新","节点","的","ros2","可以","，","用到","参数","也","会","在","如果","大家","其他","都","共享"],"title":"可动态监控","title_tokens":["可","动态","监控"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_5","text":"在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 启动两个终端，分别运行小海龟仿真器和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["run","终端","例程","仿真器","仿真","中","海龟","turtlesim","_"," ","下","命令","含义","我们","真器","turtle","提供","起来","键盘","启动","分别","了","。","两个","方法","小海龟","使用","节点","不少","的","一","：","ros2","，","这个","熟悉","控制","key","$","参数","和","也","teleop","通过","在","小海","命令行","运行","node"],"title":"案例一：小海龟例程中的参数","title_tokens":["例程","参数","小海龟","中","海龟","：","案例","小海","的","一"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_6","text":"当前系统中有哪些参数呢？我们可以启动一个终端，并使用如下命令查询： $ ros2 param list","text_tokens":["一个","哪些","终端","查询","当前"," ","list","系统","命令","我们","如下","中有","呢","启动","并","使用","：","ros2","？","可以","，","$","参数","param"],"title":"查看参数列表","title_tokens":["参数","列表","查看"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_7","text":"如果想要查询或者修改某个参数的值，可以在param命令后边跟get或者set子命令： $ ros2 param describe turtlesim background_b # 查看某个参数的描述信息 $ ros2 param get turtlesim background_b # 查询某个参数的值 $ ros2 param set turtlesim background_b 10 # 修改某个参数的值","text_tokens":["查询","describe","描述","子","想要","_","turtlesim","跟"," ","get","10","命令","或者","信息","值","后边","修改","background","查看","的","：","ros2","可以","，","$","参数","#","某个","如果","在","param","b","set"],"title":"参数查询与修改","title_tokens":["参数","修改","查询","与"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_8","text":"一个一个查询/修改参数太麻烦了，不如试一试参数文件，ROS中的参数文件使用yaml格式，可以在param命令后边跟dump子命令，将某个节点的参数都保存到文件中，或者通过load命令一次性加载某个参数文件中的所有内容： $ ros2 param dump turtlesim >> turtlesim.yaml # 将某个节点的参数保存到参数文件中 $ ros2 param load turtlesim turtlesim.yaml # 一次性加载某一个文件中的所有参数","text_tokens":[">","一个","查询","load","子","中","太","一次性","turtlesim","跟"," ","文件","保存","试一试","命令","一次","或者","内容","dump","某","格式","ros","/","后边","不如","了","修改","麻烦","使用","节点","的","将","：","ros2","可以","，","所有","$","参数","加载","到","通过","#","某个","在",".","param","都","yaml"],"title":"参数文件保存与加载","title_tokens":["与","参数","加载","文件","保存"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_9","text":"接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。","text_tokens":["中","接下来","一两句","两句","读取","这","接下","就","几个","设置","我们","下来","就要","程序","来","简单","先","了","。","实现","比较简单","方法","使用","写","体验","的","比较","，","函数","可以","一下","开始","参数","和","一两","在","都"],"title":"案例二：参数编程","title_tokens":["编程","参数","案例","二","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_10","text":"启动一个终端，先运行第一句指令，启动param_declare节点，终端中可以看到循环打印的日志信息，其中的“mbot”就是我们设置的一个参数值，参数名称是“robot_name”，通过命令行修改这个参数，看下终端中会发生什么？ $ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle","text_tokens":["数值","run","一个","终端","什么","“","mbot","中","_","打印"," ","下","看到","命令","我们","设置","参数值","turtle","parameter","发生","信息","learning","日志","循环","先","启动","set","修改","看","”","节点","是","的","第一句","ros2","？","可以","，","一句","declare","这个","robot","$","参数","名称","通过","会","param","运行","就是","name","命令行","指令","其中","第一"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_11","text":"我们来看下在代码中，如何声明、创建、修改一个参数的值。 learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], },","text_tokens":["数值","8","默认","mbot","all","来看","setup","_","打印","编译","如何","coding","为","文件","系统","包","加入","居","create","配置","日志",")","发送给","修改","spin","并","__","[","的","2","：","，","declare","robot","shutdown","参数","env","古月","#","接口","python","-","秒","rclpy","打开","后","编写","timer","进行","下","bin","创建","self","www","py","类","parameternode","初始化","循环","指定",",","退出","usr","节点","默认值","声明","'","new","callback",".","%","name","\"","功能","、","type","main","logger","需要","说明","中","entry"," ","com","周期","get","scripts","我们","设置","guyuehome","console","入口","（","parameter","parameters","程序","/","重新","*","。","作者","python3","args","完成","发送","ros2","super","函数","初始","(","库","在","]","param","回调","示例","@","set","单位","送给","关闭","一个","string","hello","def","utf","从","读取","=","s","如下","知道","from",":","import","参数值","）","主","learning","信息","值","执行","!","value","{","points","定时","代码","定时器","对象","等待","选项","列表","}","父类","class","将","info","输出","destroy","init","none","点","让","到","销毁","node"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_12","text":"参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。","text_tokens":["机器","把","对","继续","提炼","来看","中","机器人","还","大大提高","如何","已经"," ","下","不是","么","就","我们","设置","再","敏感","大大","程序","呢","动态","先","不如","了","每次","修改","看","。","说干就干","代码","麻烦","易用性","过程","使用","是","提高","效果","视觉","的","光线","环境","？","比较","，","阈值","可以","参数","也","物体","不同","会","应用","优化","识别","在","大家","挺","运行","易用","示例","成","变化"],"title":"案例三：机器视觉应用","title_tokens":["机器","应用","案例","视觉","：","三"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_13","text":"启动三个终端，分别运行： 相机驱动节点 视觉识别节点 修改红色阈值 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180 在启动的视觉识别节点中，我们故意将视觉识别中红色阈值的上限设置为0，如果不修改参数，将无法实现目标识别。 为了便于调整阈值，我们在节点中将红色阈值的限位修改为了ROS参数，通过命令行修改该参数的值，就可以实现视觉识别啦。","text_tokens":["实现目标","run","终端","detect","中","_","red","为了"," ","为","该","180","upper","无法","命令","就","我们","设置","上限","parameter","learning","值","exe","ros","不","启动","分别","调整","。","修改","object","实现","0","限位","节点","usb","cam","视觉","的","将","：","ros2","目标","中将","，","阈值","可以","故意","红色","便于","$","h","参数","啦","通过","相机","识别","驱动","在","param","运行","node","如果","命令行","三个","set"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_14","text":"我们来看下在视觉识别的代码中，是如何通过参数来设置阈值的。 learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], },","text_tokens":["数值","面积","一些","8","for","imagesubscriber","来看","setup","宽","_","shutdown","red","打印","编译","如何","coding","话题","为","文件","中心","系统","包","integer","bgr8","加入","居","上限","噪声","create","下限","data","配置","findcontours","日志","msg",")","订阅","spin","并","__","0","[","waitkey","receiving","w","使用","+","图像","苹果","的","2","提示","已","：","，","declare","to","队列","去除","5","转化","参数","retr","in","circle","env","古月","#","上角","接口","python","-","imshow","rclpy","名","打开","array","detect","后","video","编写","消息","进行","下","bin","list","创建","cvtcolor","self","www","类型","py","类","128","初始化","chain","bridge","cvbridge","ros","处理","循环",",","退出","太小","usr","节点","转换","点画","视觉","contours","hsv","目标","'","sub","bgr2hsv","通过","callback",".","%","高","name","\"","功能","、","d","int","cv2","左上","main","logger","图像处理","numpy","需要","说明","中","及","entry"," ","com","get","二值化","msgs","180","lower","raw","像素","drawcontours","frame","scripts","upper","<","y","我们","设置","shape","guyuehome","console","sensor","入口","255","image","（","所在","parameter","程序","1","长度","/","用于","*","inrange","。","者","作者","颜色","python3","args","img","完成","轮廓","mask","ros2","super","函数","approx","左上角","初始","计算","h","得到","(","cnt","检测","和","勾勒","50","listener","库","在","opencv","param","]","互相","回调","color","示例","@","关闭","boundingrect","一个","范围","bgr","def","utf","从","continue","150","读取","cv","出来","imgmsg","=","10","xy","如下","知道","from",":","if","import","参数值","）","主","learning","信息","化成","来","!","90","value","{","模型","points","subscription","object","代码","对象","等待","是","效果","选项","}","父类","显示","class","hierarchy","info","将","输出","destroy","进入","与","坐标","阈值","init","红色","none","表示","转化成","点","让","到","销毁","识别","as","node","np","x"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":[":","org","tutorials","humble","parameters",".","ros","understanding","-","en","docs","https","/","ros2","html"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/","text":"分布式通信 智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。 分布式通信 什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。 分布式网络搭建 除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。 树莓派配置 在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。 装系统 我们先要给树莓派装系统，这里我们选择的是 Ubuntu Mate 针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/ 安装ROS2 在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。 编译代码 将我们课程的代码也下载到树莓派中，进行编译。 远程桌面 如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728 分布式数据传输 树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。 分布式网络分组 没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。 案例一：小海龟分布式控制 分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动： $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端 案例二：话题分布式通信 我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串： $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端 案例三：服务分布式通信 话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能： $ ros2 run learning_service service_adder_server # PC端 $ ros2 run learning_service service_adder_client 2 3 # 树莓派端 案例四：机器视觉分布式应用 以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体： $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 没有任何问题，视觉识别的效果如下。 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。 参考链接 https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["一些","系统","远程","镜像","非常","想","四","小海龟","使用","之外","虚拟","多","的","2","之前","上去","webcam","这种","pc","物体","blog","-","基本一致","派","world","卡顿","由","还","方便","上","进行","网络","友好","参考","发布","数据","不","了","不过","繁多","article","topic","除了","环境","的话","另外","消耗","可以","全都","发给","里","也","humble",".","具体","传输","鼠标","qq","海龟","所","更强","nodes","已经","3","通信","岂","如此","下来","个","中有","端的","看上","桌面","希望","笔记本","比较","局域网","以上","小","计算","讲","二","分配","等","your","一个","模式","任何","还是","比如","做","就","资源","52785580","learning","来","桥接","先","两个","反过来","效果","派装","将","？","122599728","操作","没","识别","频繁","node","一致","什么","继续","编译","加法","en","这","命令","只要","而是","很多","带来","是否","或者","顺利","小型","配置","订阅","变得","放置","并","服务","选择","采用","cam","给","开发","压力","虚拟机","应用","出现","感器","org","csdn","run","每","sd","编写","之后","派里","体积","demo","互通","py","算机","小组","ros","计算能力","框架","基本","放","然后","支持","html","一下","、","于是",">","感觉","需要","传感","情况","不是","任务","无法","我","<","再","安装","处于","位于","动作","domain","export","有点","派端","互联","测试","控制","真有","这样","和","helloworld","在","相互","像头","不在话下","平台","=","打通","服务器程序","真器","实际","分组","service","exe","代码","连接","复杂","试试","学习","红色","性能","毕竟","挺","不够","完全","为","机制","加入","字符串","分布式","各种","发生","则","修改","有","网上","而言","：","，","啦","$","典型","会","卡中","驱动","带领","建立","仿真器","后","用","远程桌面","流程","传感器","turtle","事情","处理","顺利实现","client","pub","针对","视觉","concepts","安排","一句","ubuntu","系列","通过","仿真","流畅"," ","实时","局域","智能","程序","呢","三","adder","问题","神奇","显示器","先要","任务分配","他们","似乎","如","teleop","过来","并且","类似","小海","download","机器","一系","接下来","上边","talker","求和","摄像","下载",":","不在","一样","作为","多个","采集","摄像头","一切","之间","监控","到","运行","才能","https","都","此外","计算机","局域网络","_","bashrc","话题","可能","像","经典","端","接下","链接","轻松","net","减轻","提供","成功","docs","拆解","运动","实现","数据传输","分布","server","同一个","图像","这里","搭建","key","经常","发布者","#","电机","较","usb","组成","案例","依然","下","cpp","主要","服务器","分布式系统","你","据传","模拟","请","客户端","attention","客户","键盘","一系列","启动","叫","没有","节点","一","两者","放在","mate","设计","之一","sub","不同","直接","几乎","功能","感受","步骤","能力","只","中","访问","这么","适合","我们","id","起来","/","看上去","客户端程序","。","者","过","方法","完成","结构","分布式应用","ros2","讲过","遇到","listener","树莓","如果","课程","命令行","装","款","笔记本电脑","例程","hello","机器人","turtlesim","笔记","布式","如下","控制器","好","信息","这些","简而言之","魅力","确保","—","about","是","原本","电脑","显示","资料","用到","即可","字符","务器","烧写","同一","整体","details","就是","大家","反过","变化"],"title":"分布式通信","title_tokens":["通信","布式","分布式","分布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_1","text":"智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。","text_tokens":["机器","不够","一个","计算机","卡顿","中","机器人"," ","平台","上","情况","不是","任务","这","岂","系统","布式","分布式系统","智能","等","分布式","减轻","算机","这些","处理","计算能力","多个","拆解","。","繁多","实现","分布","多","的","将","？","分配","可以","，","任务分配","放在","全都","计算","经常","遇到","里","压力","到","会","如果","运行","出现","就是","功能","、","能力"],"title":"分布式通信","title_tokens":["通信","布式","分布式","分布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_2","text":"什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。","text_tokens":["此外","什么","计算机","完全","为","可能","这","接下","系统","远程","非常","分布式","各种","减轻","配置","运动","有","实现","分布","采用","多","的","开发","之前","，","上去","压力","典型","这种","电机","较","应用","驱动","感器","派","带领","每","由","还","组成","方便","上","体积","派里","下","主要","传感器","分布式系统","算机","数据","ros","处理","不","框架","了","不过","放","叫","节点","视觉","环境","一","另外","消耗","可以","放在","设计","之一","也","不同","功能","感受","只","传输","需要","中","更强"," ","传感","已经","通信","任务","适合","我们","下来","起来","位于","看上","看上去","。","过","有点","笔记本","结构","比较","控制","小","计算","和","讲","树莓","在","并且","分配","等","变化","款","机器","相互","一个","笔记本电脑","任何","接下来","机器人","上边","平台","笔记","比如","做","就","布式","资源","作为","控制器","好","挺","信息","这些","魅力","两个","是","复杂","原本","电脑","将","？","之间","性能","监控","到","毕竟","就是","运行","大家","都","于是"],"title":"分布式通信","title_tokens":["通信","布式","分布式","分布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_3","text":"除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。","text_tokens":["机器","笔记本电脑","一个","机器人","平台","笔记","上","我","我们","模拟","控制器","了","。","放置","选择","使用","之外","除了","电脑","笔记本","的","另外","，","控制","计算","树莓","在","派"],"title":"分布式网络搭建","title_tokens":["网络","布式","搭建","分布式","分布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_4","text":"在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。","text_tokens":["需要","我们","很多","好","参考","配置","先","。","有","网上","都","的","环境","资料","开发","之前","可以","，","也","树莓","在","大家","派"],"title":"树莓派配置","title_tokens":["树莓","派","配置"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_5","text":"我们先要给树莓派装系统，这里我们选择的是 Ubuntu Mate 针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/","text_tokens":["sd","org","之后"," ","系统","下载","就","链接","我们","镜像",":","/","启动","了","。","选择","是","针对","派装","先要","https","的","这里","给","：","可以","，","mate","烧写","ubuntu","到","树莓","卡中",".","-","download","派"],"title":"装系统","title_tokens":["装","系统"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#ros2","text":"在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。","text_tokens":["流程","，","。","mate","和","ubuntu","中","一样","安装","好","在"," ","电脑","的","端","ros2","系统"],"title":"安装ROS2","title_tokens":["安装","ros2"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_6","text":"将我们课程的代码也下载到树莓派中，进行编译。","text_tokens":["下载","，","。","我们","也","代码","中","到","树莓","编译","课程","进行","的","将","派"],"title":"编译代码","title_tokens":["编译","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_7","text":"如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728","text_tokens":["鼠标","qq","_","访问"," ","方便","上","远程桌面","端","系统","远程","就","网络","流程","链接","如下","52785580","net",":","好","参考","键盘","配置","不","/","基本","了","。","桌面","有","显示器","连接","article","使用","电脑","显示","https","的","：","的话","可以","，","122599728","以上","和","也","通过","操作","整体","树莓","直接","如果","在","基本一致","大家","blog",".","details","一致","派","步骤","csdn"],"title":"远程桌面","title_tokens":["远程","远程桌面","桌面"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_8","text":"树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。","text_tokens":["什么","计算机","局域网络","_","为","话题","像","端","这","接下","命令","只要","而是","带来","很多","发生","配置","订阅","修改","并","实现","服务","使用","而言","虚拟","同一个","的","：","之前","，","$","pc","发布者","#","虚拟机","会","派","run","后","用","cpp","网络","demo","你","请","互通","attention","py","事情","算机","发布","小组","不","启动","了","不过","节点","可以","一下","里","也","直接","具体","、","能力","感觉","需要","中","所","nodes"," ","已经","通信","局域","无法","我们","下来","安装","个","处于","中有","呢","动作","。","者","问题","神奇","派端","互联","希望","完成","ros2","局域网","测试","他们","讲过","计算","如","和","这样","listener","树莓","在","并且","如果","命令行","等","一个","模式","接下来","平台","talker","做","打通","就","如下","一样","好","分组","桥接","简而言之","两个","确保","连接","效果","是","电脑","将","？","之间","同一","到","都"],"title":"分布式数据传输","title_tokens":["布式","据传","传输","数据传输","分布式","分布","数据"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_9","text":"没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。","text_tokens":[">","一个","计算机","中","_","bashrc"," ","通信","=","机制","就","无法","<","我们","加入","id","提供","分组","一样","处于","算机","配置","小组","ros","则","端的","domain","了","export","。","问题","实现","电脑","同一个","的","将","：","ros2","可以","，","一句","即可","两者","计算","这样","和","$","同一","到","不同","没","树莓","在","类似",".","如果","分配","才能","派","your"],"title":"分布式网络分组","title_tokens":["网络","布式","分布式","分布","分组"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_10","text":"分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动： $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端","text_tokens":["一些","run","继续","例程","建立","仿真器","仿真","中","海龟","turtlesim","这么","流畅","案例"," ","已经","上","依然","_","经典","通信","端","网络","布式","我们","是否","真器","或者","分布式","turtle","键盘","来","成功","ros","先","想","启动","了","。","运动","神奇","过","—","小海龟","分布","派端","反过来","节点","试试","电脑","的","：","ros2","之前","可以","，","真有","测试","学习","似乎","控制","反过","$","pc","也","teleop","key","#","树莓","过来","在","小海","node","派"],"title":"案例一：小海龟分布式控制","title_tokens":["布式","控制","分布式","小海龟","分布","海龟","：","案例","小海","一"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_11","text":"我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串： $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端","text_tokens":["run","world","例程","hello","任何","_","编写"," ","话题","情况","下","通信","端","我们","是否","字符串","作为","learning","发布","呢","不","先","订阅","修改","者","pub","代码","派端","使用","试试","topic","电脑","的","：","ros2","？","之前","可以","，","字符","$","sub","pc","发布者","helloworld","#","树莓","直接","在","派"],"title":"案例二：话题分布式通信","title_tokens":["布式","分布式","分布","案例","二","话题","通信","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_12","text":"话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能： $ ros2 run learning_service service_adder_server # PC端 $ ros2 run learning_service service_adder_client 2 3 # 树莓派端","text_tokens":["run","不在话下","_"," ","还是","话题","加法","3","端","求和","服务器程序","服务器","我们","不在","客户端","顺利","客户","程序","learning","service","顺利实现","客户端程序","adder","。","client","问题","实现","服务","没有","派端","电脑","server","2","：","ros2","可以","，","务器","$","pc","也","#","树莓","运行","功能"],"title":"案例三：服务分布式通信","title_tokens":["布式","分布式","服务","分布","案例","通信","：","三"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_13","text":"以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体： $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 没有任何问题，视觉识别的效果如下。 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。","text_tokens":["不够","_","为","端","接下","系统","轻松","只要","非常","分布式","提供","小型","配置","修改","变得","分布","使用","图像","cam","的","：","开发","，","啦","搭建","webcam","$","pc","物体","#","会","usb","派","run","还","上","网络","友好","模拟","一系列","ros","处理","不","了","然后","没有","节点","topic","支持","视觉","安排","可以","发给","sub","也","系列","通过","几乎","功能","需要","中"," ","实时","如此","我们","再","下来","端的","。","问题","方法","派端","ros2","测试","以上","树莓","在","类似","机器","像头","一个","例程","一系","任何","接下来","机器人","做","摄像","布式","如下","实际","好","learning","exe","这些","代码","采集","连接","效果","复杂","电脑","摄像头","将","？","一切","用到","红色","没","识别","频繁","node","都"],"title":"案例四：机器视觉分布式应用","title_tokens":["机器","布式","四","分布式应用","分布式","分布","应用","案例","视觉","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_14","text":"https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["domain",":","org","about","id","humble",".","ros","-","en","docs","https","/","concepts","html"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2_%E6%A6%82%E5%BF%B5%E6%80%BB%E8%A7%88/","text":"从本节开始，我们将进入第二个篇章，以ROS2的核心概念为线索，详细讲解ROS2的应用开发方法。","text_tokens":["线索","概念","详细","为","我们","篇章","开发方法","讲解","从本节","。","方法","本节","第二","核心","的","将","ros2","开发","进入","，","第二个","开始","应用","以","二个"],"title":"概念总览","title_tokens":["总览","概念"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/","text":"Launch：多节点启动与配置脚本 到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是 Launch启动文件 ，它是ROS系统中多节点启动与配置的一种脚本。 Launch文件 这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。 多节点启动 先来看看如何启动多个节点。 运行效果 启动终端，使用ros2中的launch命令来启动第一个launch文件示例： $ ros2 launch learning_launch simple.launch.py 运行成功后，就可以在终端中看到发布者和订阅者两个节点的日志信息啦。 文件解析 这两个节点是如何启动的呢？我们来分析下这个launch文件。 learning_launch/simple.launch.py from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'learning_topic' , # 节点所在的功能包 executable = 'topic_helloworld_pub' , # 节点的可执行文件 ), Node ( # 配置一个节点的启动 package = 'learning_topic' , # 节点所在的功能包 executable = 'topic_helloworld_sub' , # 节点的可执行文件名 ), ]) 命令行参数配置 我们使用ros2命令在终端中启动节点时，还可以在命令后配置一些传入程序的参数，使用launch文件一样可以做到。 运行效果 比如我们想要运行一个Rviz可视化上位机，并且加载某一个配置文件，使用命令行的话，是这样的： $ ros2 run rviz2 rviz2 -d <PACKAGE-PATH>/rviz/turtle_rviz.rviz 命令后边还得跟一长串配置文件的路径，如果放在launch文件里，启动就优雅很多了： $ ros2 launch learning_launch rviz.launch.py 文件解析 命令行后边的参数是如何通过launch传入节点的呢？来看下这个launch文件。 learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 rviz_config = os . path . join ( # 找到配置文件的完整路径 get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'rviz2' , # 节点所在的功能包 executable = 'rviz2' , # 节点的可执行文件名 name = 'rviz2' , # 对节点重新命名 arguments = [ '-d' , rviz_config ] # 加载命令行参数 ) ]) 资源重映射 ROS社区中的资源非常多，当我们使用别人代码的时候，经常会发现通信的话题名称不太符合我们的要求，能否对类似的资源重新命名呢？ 为了提高软件的复用性，ROS提供了资源重映射的机制，可以帮助我们解决类似的问题。 运行效果 启动一个终端，运行如下例程，很快会看到出现了两个小海龟仿真器界面；再打开一个终端，发布如下话题，让海龟1动起来，海龟2也会一起运动： $ ros2 launch learning_launch rviz.launch.py $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 文件解析 为什么两个海龟都会动呢？这里要用到turtlesim功能包里另外一个节点，叫做mimic，它的功能是订阅某一个海龟的Pose位置，通过计算，变换成一个同样运动的速度指令，发布出去。 至于mimic节点订阅或者发布的话题名叫什么呢？我们就可以通过重映射修改成对应任意海龟的名字。 learning_launch/remapping.launch.py from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 namespace = 'turtlesim1' , # 节点所在的命名空间 executable = 'turtlesim_node' , # 节点的可执行文件名 name = 'sim' # 对节点重新命名 ), Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 namespace = 'turtlesim2' , # 节点所在的命名空间 executable = 'turtlesim_node' , # 节点的可执行文件名 name = 'sim' # 对节点重新命名 ), Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 executable = 'mimic' , # 节点的可执行文件名 name = 'mimic' , # 对节点重新命名 remappings = [ # 资源重映射列表 ( '/input/pose' , '/turtlesim1/turtle1/pose' ), # 将/input/pose话题名修改为/turtlesim1/turtle1/pose ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), # 将/output/cmd_vel话题名修改为/turtlesim2/turtle1/cmd_vel ] ) ]) ROS参数设置 ROS系统中的参数，也可以在Launch文件中设置。 运行效果 启动一个终端，运行如下命令： $ ros2 launch learning_launch parameters.launch.py 在启动的海龟仿真器中，我们看到背景颜色被改变了，这个颜色参数的设置就是在launch文件中完成的。 文件解析 我们看下在launch文件中如何来设置参数的。 learning_launch/parameters.launch.py from launch import LaunchDescription # launch文件的描述类 from launch.actions import DeclareLaunchArgument # 声明launch文件内使用的Argument类 from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) # 创建一个Launch文件内参数（arg）background_r ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) # 创建一个Launch文件内参数（arg）background_g ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) # 创建一个Launch文件内参数（arg）background_b ) return LaunchDescription ([ # 返回launch文件的描述信息 background_r_launch_arg , # 调用以上创建的参数（arg） background_g_launch_arg , background_b_launch_arg , Node ( # 配置一个节点的启动 package = 'turtlesim' , executable = 'turtlesim_node' , # 节点所在的功能包 name = 'sim' , # 对节点重新命名 parameters = [{ # ROS参数列表 'background_r' : LaunchConfiguration ( 'background_r' ), # 创建参数background_r 'background_g' : LaunchConfiguration ( 'background_g' ), # 创建参数background_g 'background_b' : LaunchConfiguration ( 'background_b' ), # 创建参数background_b }] ), ]) Attention launch文件中出现的argument和parameter，虽都译为“参数”，但含义不同： - argument：仅限launch文件内部使用，方便在launch中调用某些数值； - parameter：ROS系统的参数，方便在节点见使用某些数值。 加载参数文件 以上例程我们在launch文件中一个一个的设置参数，略显麻烦，当参数比较多的时候，建议使用参数文件进行加载。 learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 config = os . path . join ( # 找到参数文件的完整路径 get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 executable = 'turtlesim_node' , # 节点的可执行文件名 namespace = 'turtlesim2' , # 节点所在的命名空间 name = 'sim' , # 对节点重新命名 parameters = [ config ] # 加载参数文件 ) ]) Launch文件包含 在复杂的机器人系统中，launch文件也会有很多，此时我们可以使用类似编程中的include机制，让launch文件互相包含。 文件解析 learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch.actions import IncludeLaunchDescription # 节点启动的描述类 from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction # launch文件中的执行动作 from launch_ros.actions import PushRosNamespace # ROS命名空间配置 def generate_launch_description (): # 自动生成launch文件的函数 parameter_yaml = IncludeLaunchDescription ( # 包含指定路径下的另外一个launch文件 PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( # 对指定launch文件中启动的功能加上命名空间 actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ # 返回launch文件的描述信息 parameter_yaml_with_namespace ]) 功能包编译配置 ... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ... 参考链接 https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docs.ros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["数值","一些","namespace","任意","如何","完整","系统","含义","非常","呀","某","建议","index","[","小海龟","使用","arg","+","多","的","2","上去","python","cmd","-","包含","长串","名","丰富","projects","rate","还","一长串","进行","方便","不太","1.8","参考","一起","发布","后边","了","files","executable","过程","os","虽","topic","脚本","的话","另外","可以","xml","各个","也","里","humble",".","\"","指令","main","“","目前为止","海龟","namespaces","仅限","通信","至于","r","1","linear","发现","看上","*","肯定","性","return","比较","以上","计算","名称","b","译","一个","重","描述","路径","想要","比如","就","资源","一次","remapping","）","learning","当然","来","参数设置","先","两个","第一个","位置","效果","解决","见","将","？","与","加载","node","一种","yaml","什么","界面","速度","编译","sim","文件","launchconfiguration","中多","en","这","包","命令","很多","或者","g","配置","订阅",")","配置文件","rviz2","找到","乍","参数","多样化","出现","org","run","解析","编写","pushrosnamespace","看看","名叫","join","当","argument","py","类","angular","ros","被",",","path","large","...","自由","输入","html","每当","--","d","成",">","需要","includelaunchdescription","<","设置","目的","再","（","动作","为什么","background","提高","2.0","了解","组装","函数","有没有","这样","和","helloworld","在","略显","之高","def","generate","text","using","=","真器","多样","z","代码","textsubstitution","turtlesim1","复杂","可执行文件","答案","背景","生成","分析","没错","为","空间","机制","新","别人","declarelaunchargument","各种","机","turtle1","同样","日志","glob","修改","有","0","config","可视化","：","，","啦","$","调用","相当","会","此时","带领","第一","变换","仿真器","后","符合","很快","launchdescription","命名","做到","方式","大大","turtle","指定","pub","目前","映射","时","但","核心","会动","时候","'","声明","名字","系列","通过","要求","name","仿真","前为","为了"," ","get","好像","动","rviz","可视","tutorials","所在","parameter","程序","default","呢","甚至","重新","问题","行文","output","(","这是","互相","类似","]","并且","小海","示例","机器","编程","一系","ament","from",":","arguments","import","一样","；","得","执行","{","多个","麻烦","}","到","actions","description","叫做","运行","都","input","resource","https","重新命名","geometry","那","终端","for","来看","_","上位","跟","话题","复用","像","share","出去","频次","84","链接","提供","阅读","data","成功","mimic","docs","它","为止","msg","packages","0.0","每次","运动","include","优雅","这里","这个","看下","经常","所有","turtlesim2","自动","发布者","#","查询","打开","pythonlaunchdescriptionsource","一次性","加上","下","看到","创建","能否","原有","attention","一系列","twist","启动","要","改变","没有","节点","package","groupaction","vel","nonamespace","放在","sub","不同","功能","合剂","社区","中","directory","msgs","对应","simple","y","我们","parameters","起来","/","122","看上去","。","者","方法","颜色","内","帮助","完成","基于","ros2","pose","粘合","模版","如果","命令行","对","例程","机器人","turtlesim","粘合剂","内部","传入","如下","软件","好","信息","value","launch","”","是","列表","sources","with","用到","返回","让","remappings","substitutions","就是","大家","x","某些"],"title":"Launch","title_tokens":["launch"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch","text":"到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是 Launch启动文件 ，它是ROS系统中多节点启动与配置的一种脚本。","text_tokens":["机器","一个","打开","终端","那","需要","前为","中","一次性","目前为止","机器人"," ","文件","中多","系统","命令","新","我们","一次","很多","方式","好","呀","当然","呢","一种","配置","ros","它","为止","启动","launch","。","每次","目前","麻烦","没有","节点","是","脚本","的","肯定","？","可以","，","有没有","答案","与","每当","这样","所有","到","运行","就是","都"],"title":"Launch：多节点启动与配置脚本","title_tokens":["与","launch","节点","配置","脚本","多","：","启动"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_1","text":"这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。","text_tokens":["那","没错","如何","完整","文件","像","系统","频次","命令","很多","或者","各种","呀","阅读","配置","它","使用","的","乍","，","上去","参数","相当","python","多样化","出现","带领","丰富","还","编写","进行","原有","大大","一系列","ros","启动","了","过程","节点","核心","自由","输入","可以","各个","也","系列","通过","功能","合剂","中"," ","好像","我们","目的","呢","甚至","看上","看上去","。","基于","了解","ros2","组装","这样","和","这是","模版","粘合","在","类似","命令行","一个","之高","例程","编程","描述","一系","粘合剂","就","一样","来","多样","launch","代码","是","就是","大家"],"title":"Launch文件","title_tokens":["launch","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_1","text":"先来看看如何启动多个节点。","text_tokens":["。","多个","节点","如何","来","看看","先","启动"],"title":"多节点启动","title_tokens":["多","节点","启动"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_2","text":"启动终端，使用ros2中的launch命令来启动第一个launch文件示例： $ ros2 launch learning_launch simple.launch.py 运行成功后，就可以在终端中看到发布者和订阅者两个节点的日志信息啦。","text_tokens":["一个","终端","后","中","_"," ","文件","看到","就","命令","simple","py","learning","信息","发布","来","成功","日志","启动","订阅","launch","。","者","两个","第一个","使用","节点","的","：","ros2","可以","，","啦","$","和","发布者",".","在","运行","示例","第一"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_3","text":"这两个节点是如何启动的呢？我们来分析下这个launch文件。 learning_launch/simple.launch.py from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'learning_topic' , # 节点所在的功能包 executable = 'topic_helloworld_pub' , # 节点的可执行文件 ), Node ( # 配置一个节点的启动 package = 'learning_topic' , # 节点所在的功能包 executable = 'topic_helloworld_sub' , # 节点的可执行文件名 ), ])","text_tokens":["一个","名","描述","def","_","如何"," ","generate","下","文件","=","launchdescription","这","包","simple","我们","from",":","import","py","类","所在","learning","信息","配置","呢","来","执行","ros","/","启动",",","launch","。",")","pub","两个","executable","[","行文","节点","是","topic","package","的","？","可执行文件","函数","这个","return","'","sub","(","自动","返回","helloworld","生成","#","actions","description",".","]","node","功能","分析"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_4","text":"我们使用ros2命令在终端中启动节点时，还可以在命令后配置一些传入程序的参数，使用launch文件一样可以做到。","text_tokens":["一些","终端","后","中","还","文件","传入","命令","我们","做到","一样","程序","配置","启动","launch","。","时","使用","节点","的","ros2","可以","，","参数","在"],"title":"命令行参数配置","title_tokens":["参数","命令","配置","命令行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_5","text":"比如我们想要运行一个Rviz可视化上位机，并且加载某一个配置文件，使用命令行的话，是这样的： $ ros2 run rviz2 rviz2 -d <PACKAGE-PATH>/rviz/turtle_rviz.rviz 命令后边还得跟一长串配置文件的路径，如果放在launch文件里，启动就优雅很多了： $ ros2 launch learning_launch rviz.launch.py","text_tokens":["run","一个",">","长串","路径","想要","_","上位","还","跟"," ","一长串","文件","比如","就","命令","<","我们","rviz","很多","机","可视","turtle","py","learning","配置","某","得","/","后边","启动","配置文件","launch","了","path","rviz2","优雅","使用","是","package","可视化","的","：","的话","ros2","，","放在","这样","$","里","加载",".","并且","-","运行","命令行","如果","d"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_6","text":"命令行后边的参数是如何通过launch传入节点的呢？来看下这个launch文件。 learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 rviz_config = os . path . join ( # 找到配置文件的完整路径 get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'rviz2' , # 节点所在的功能包 executable = 'rviz2' , # 节点的可执行文件名 name = 'rviz2' , # 对节点重新命名 arguments = [ '-d' , rviz_config ] # 加载命令行参数 ) ])","text_tokens":["来看","_","如何","文件","完整","share","包","命令","配置","index","packages",")","配置文件","[","rviz2","找到","config","的","这个","参数","自动","#","python","-","查询","名","下","launchdescription","join","命名","turtle","py","类","ros","后边","启动",",","path","executable","os","节点","package","'","通过",".","name","功能","d","directory"," ","get","rviz","所在","呢","/","重新","。","方法","行文","函数","return","(","]","命令行","一个","对","路径","描述","def","generate","ament","=","传入","from",":","arguments","import","learning","信息","执行","launch","是","？","可执行文件","返回","加载","生成","actions","description","node","重新命名"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_7","text":"ROS社区中的资源非常多，当我们使用别人代码的时候，经常会发现通信的话题名称不太符合我们的要求，能否对类似的资源重新命名呢？ 为了提高软件的复用性，ROS提供了资源重映射的机制，可以帮助我们解决类似的问题。","text_tokens":["对","重","社区","中","为了"," ","话题","复用","通信","符合","机制","能否","资源","当","我们","别人","软件","非常","不太","命名","提供","呢","ros","发现","重新","了","。","问题","映射","代码","使用","提高","解决","帮助","多","的","时候","？","性","，","可以","经常","名称","要求","会","类似","重新命名"],"title":"资源重映射","title_tokens":["资源","重","映射"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_8","text":"启动一个终端，运行如下例程，很快会看到出现了两个小海龟仿真器界面；再打开一个终端，发布如下话题，让海龟1动起来，海龟2也会一起运动： $ ros2 launch learning_launch rviz.launch.py $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":["geometry","一个","终端","例程","界面","仿真器","打开","rate","仿真","海龟","_"," ","话题","msgs","看到","很快","y","如下","动","真器","rviz",":","再","1.8","py","--","；","一起","learning","发布","起来","turtle1","1","angular","linear","/","{","twist","启动","msg","launch","了",",","pub","运动","两个","0.0","z","小海龟","topic","}","2.0","2","vel","：","ros2","，","$","也","让","会",".","cmd","运行","出现","小海","\"","x"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_9","text":"为什么两个海龟都会动呢？这里要用到turtlesim功能包里另外一个节点，叫做mimic，它的功能是订阅某一个海龟的Pose位置，通过计算，变换成一个同样运动的速度指令，发布出去。 至于mimic节点订阅或者发布的话题名叫什么呢？我们就可以通过重映射修改成对应任意海龟的名字。 learning_launch/remapping.launch.py from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 namespace = 'turtlesim1' , # 节点所在的命名空间 executable = 'turtlesim_node' , # 节点的可执行文件名 name = 'sim' # 对节点重新命名 ), Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 namespace = 'turtlesim2' , # 节点所在的命名空间 executable = 'turtlesim_node' , # 节点的可执行文件名 name = 'sim' # 对节点重新命名 ), Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 executable = 'mimic' , # 节点的可执行文件名 name = 'mimic' , # 对节点重新命名 remappings = [ # 资源重映射列表 ( '/input/pose' , '/turtlesim1/turtle1/pose' ), # 将/input/pose话题名修改为/turtlesim1/turtle1/pose ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), # 将/output/cmd_vel话题名修改为/turtlesim2/turtle1/cmd_vel ] ) ])","text_tokens":["namespace","什么","速度","任意","_","为","sim","话题","文件","出去","空间","包","或者","turtle1","同样","配置","某","mimic","它","订阅",")","修改","运动","[","这里","的","，","turtlesim2","自动","#","cmd","变换","名","launchdescription","名叫","命名","py","类","发布","ros","启动",",","映射","executable","要","节点","package","vel","会动","另外","可以","'","名字","里","通过",".","name","功能","指令","成","海龟"," ","input","至于","对应","我们","所在","呢","/","重新","。","为什么","行文","output","函数","return","计算","pose","(","]","一个","对","重","描述","def","turtlesim","generate","=","就","资源","remapping","from",":","import","learning","信息","执行","launch","两个","位置","是","turtlesim1","列表","将","？","可执行文件","用到","返回","生成","actions","叫做","description","remappings","node","都","重新命名"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#ros","text":"ROS系统中的参数，也可以在Launch文件中设置。","text_tokens":["可以","，","launch","。","设置","参数","也","中","ros","在","文件","的","系统"],"title":"ROS参数设置","title_tokens":["参数","ros","参数设置","设置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_10","text":"启动一个终端，运行如下命令： $ ros2 launch learning_launch parameters.launch.py 在启动的海龟仿真器中，我们看到背景颜色被改变了，这个颜色参数的设置就是在launch文件中完成的。","text_tokens":["一个","终端","仿真器","仿真","中","_","海龟"," ","文件","看到","命令","如下","我们","真器","设置","py","parameters","learning","被","启动","launch","了","。","改变","颜色","完成","的","：","ros2","，","这个","背景","$","参数",".","在","运行","就是"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_11","text":"我们看下在launch文件中如何来设置参数的。 learning_launch/parameters.launch.py from launch import LaunchDescription # launch文件的描述类 from launch.actions import DeclareLaunchArgument # 声明launch文件内使用的Argument类 from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) # 创建一个Launch文件内参数（arg）background_r ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) # 创建一个Launch文件内参数（arg）background_g ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) # 创建一个Launch文件内参数（arg）background_b ) return LaunchDescription ([ # 返回launch文件的描述信息 background_r_launch_arg , # 调用以上创建的参数（arg） background_g_launch_arg , background_b_launch_arg , Node ( # 配置一个节点的启动 package = 'turtlesim' , executable = 'turtlesim_node' , # 节点所在的功能包 name = 'sim' , # 对节点重新命名 parameters = [{ # ROS参数列表 'background_r' : LaunchConfiguration ( 'background_r' ), # 创建参数background_r 'background_g' : LaunchConfiguration ( 'background_g' ), # 创建参数background_g 'background_b' : LaunchConfiguration ( 'background_b' ), # 创建参数background_b }] ), ]) Attention launch文件中出现的argument和parameter，虽都译为“参数”，但含义不同： - argument：仅限launch文件内部使用，方便在launch中调用某些数值； - parameter：ROS系统的参数，方便在节点见使用某些数值。","text_tokens":["数值","_","如何","sim","为","文件","launchconfiguration","84","包","系统","含义","declarelaunchargument","g","配置",")","0","[","使用","arg","的","：","，","看下","参数","自动","调用","#","-","出现","方便","launchdescription","创建","argument","命名","py","类","attention","ros","启动",",","executable","但","节点","虽","package","声明","'","不同",".","name","功能","“","中"," ","仅限","我们","设置","所在","（","parameters","r","parameter","default","/","重新","122","。","内","background","函数","return","以上","和","(","在","]","b","译","一个","对","描述","def","turtlesim","内部","generate","text","=","from",":","import","）","；","learning","信息","来","value","{","launch","”","textsubstitution","列表","}","见","返回","生成","actions","description","substitutions","node","都","某些","重新命名"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_12","text":"以上例程我们在launch文件中一个一个的设置参数，略显麻烦，当参数比较多的时候，建议使用参数文件进行加载。 learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 config = os . path . join ( # 找到参数文件的完整路径 get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 executable = 'turtlesim_node' , # 节点的可执行文件名 namespace = 'turtlesim2' , # 节点所在的命名空间 name = 'sim' , # 对节点重新命名 parameters = [ config ] # 加载参数文件 ) ])","text_tokens":["namespace","_","sim","文件","完整","share","空间","包","配置","建议","index","packages",")","[","找到","使用","config","多","的","，","参数","自动","turtlesim2","#","python","查询","名","进行","launchdescription","join","当","命名","py","类","ros","启动",",","path","executable","os","节点","package","时候","'",".","name","功能","中","directory"," ","get","我们","设置","所在","parameters","/","重新","。","方法","行文","比较","函数","return","以上","(","在","]","略显","一个","对","例程","路径","描述","def","turtlesim","generate","ament","=","from",":","import","learning","信息","执行","launch","麻烦","可执行文件","返回","加载","生成","actions","description","node","yaml","重新命名"],"title":"加载参数文件","title_tokens":["参数","加载","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_2","text":"在复杂的机器人系统中，launch文件也会有很多，此时我们可以使用类似编程中的include机制，让launch文件互相包含。","text_tokens":["机器","编程","中","机器人","文件","系统","机制","我们","很多","launch","。","有","include","复杂","使用","的","可以","，","也","让","会","在","类似","互相","包含","此时"],"title":"Launch文件包含","title_tokens":["launch","包含","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_13","text":"learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch.actions import IncludeLaunchDescription # 节点启动的描述类 from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction # launch文件中的执行动作 from launch_ros.actions import PushRosNamespace # ROS命名空间配置 def generate_launch_description (): # 自动生成launch文件的函数 parameter_yaml = IncludeLaunchDescription ( # 包含指定路径下的另外一个launch文件 PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( # 对指定launch文件中启动的功能加上命名空间 actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ # 返回launch文件的描述信息 parameter_yaml_with_namespace ])","text_tokens":["namespace","_","文件","share","空间","包","配置","index","packages",")","[","的","turtlesim2","自动","#","python","包含","查询","pythonlaunchdescriptionsource","pushrosnamespace","加上","下","launchdescription","join","命名","py","类","ros","指定","启动",",","path","os","节点","package","groupaction","nonamespace","另外","'",".","功能","中","directory","namespaces"," ","get","includelaunchdescription","parameter","parameters","/","动作","方法","函数","return","(","]","一个","对","路径","描述","def","generate","ament","=","from",":","import","learning","信息","执行","launch","sources","with","返回","生成","actions","description","yaml"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_14","text":"... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ...","text_tokens":["_"," ","ament","=","share","join","rviz","py","data","/","glob","index",",","packages","files",")","launch","*","path","[","os","+","package","...","config","'","xml","(",".","]","name","resource"],"title":"功能包编译配置","title_tokens":["包","功能","配置","编译"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docs.ros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["main","for","projects"," ","using","en",":","tutorials","ros","docs","/","launch","large","https","ros2","html","humble",".","-","org"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/","text":"TF：机器人坐标系管理神器 坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器—— TF 。 机器人中的坐标系 机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做 基坐标系 Base Frame，机器人安装位置在外部环境下的参考系叫做 世界坐标系 World Frame，机器人末端夹爪的位置叫做 工具坐标系 ，外部被操作物体的位置叫做 工件坐标系 ，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是 基坐标系 Base Link，雷达所在的位置叫做 雷达坐标系 laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做 里程计坐标系 odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做 地图坐标系 map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为 平移和旋转 两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实就是向量的数学描述。 ROS中TF功能的底层原理，就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。 TF命令行操作 ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。 小海龟跟随例程 这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools $ sudo pip3 install transforms3d 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 当我们控制一只海龟运动时，另外一只海龟也会跟随运动。 查看TF树 在当前运行的两只海龟中，有哪些坐标系呢，我们可以通过这个小工具来做查看。 $ ros2 run tf2_tools view_frames 默认在当前终端路径下生成了一个frames.pdf文件，打开之后，就可以看到系统中各个坐标系的关系了。 查询坐标变换信息 只看到坐标系的结构还不行，如果我们想要知道某两个坐标系之间的具体关系，可以通过tf2_echo这个工具查看： $ ros2 run tf2_ros tf2_echo turtle2 turtle1 运行成功后，终端中就会循环打印坐标系的变换数值了，由平移和旋转两个部分组成，还有旋转矩阵。 坐标系可视化 看数值还不直观？可以试试用可视化软件来做显示： $ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 再让小海龟动起来，Rviz中的坐标轴就会开始运动，这样是不是更加直观了呢！ 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。 静态TF广播 我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为 静态TF变换 ，我们来看看在程序中该如何实现？ 运行效果 启动终端，运行如下命令： $ ros2 run learning_tf static_tf_broadcaster $ ros2 run tf2_tools view_frames 可以看到当前系统中存在两个坐标系，一个是world，一个是house，两者之间的相对位置不会发生改变，通过一个静态的TF对象进行维护。 代码解析 来看下在代码中是如何创建坐标系并且发布静态变换的。 learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？ TF监听 我们再来学习下如何查询两个坐标系之间的位置关系。 运行效果 启动一个终端，运行如下节点，就可以在终端中看到周期显示的坐标关系了。 $ ros2 run learning_tf tf_listener 代码解析 这个节点中是如何查询坐标关系的，我们来看下代码。 learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。 海龟跟随功能解析 还是之前小海龟跟随的示例，我们自己通过代码来实现一下。 运行效果 先看下实现的效果，启动终端后，通过如下命令启动例程： $ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 看到的效果和ROS自带的例程相同。 原理解析 在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心就是通过坐标系实现向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。 Launch文件解析 先来看下刚才运行的launch文件，里边启动了四个节点，分别是： 小海龟仿真器 海龟1的坐标系广播 海龟2的坐标系广播 海龟跟随控制 其中，两个坐标系的广播复用了turtle_tf_broadcaster节点，通过传入的参数名修改维护的坐标系名称。 learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ]) 坐标系动态广播 海龟1和海龟2在world坐标系下的坐标变换，在turtle_tf_broadcaster节点中实现，除了海龟坐标系的名字不同之外，针对两个海龟的功能是一样的。 learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 海龟跟随 坐标系都正常广播了，接下来我们就可以订阅两只海龟的位置关系，并且变换成速度指令进行控制啦。 learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":["数值","一些","封装","累积","如何","完整","该","10.0","系统","非常","时间","先看","某","呗","statictfbroadcaster","tools","两者之间","着急","四","显得","spin","失败","包括","[","底层","小海龟","请求","使用","之外","+","的","2","之前","经过","矩阵","这种","物体","env","古月","坐标轴","python","cmd","-","算法","相应","world","名","rate","由","还","timer","良好","消息","finished","进行","底盘","上","漂移","作用","tf2","self","www","内容","参考","一起","发布","数据","broadcaster1","不","称之为","spawner","了","executable","过程","除了","prefix","环境","格外","另外","可以","说","各个","也","拆","humble","source","具体",".","callback","根据","\"","指令","世界","main",".__","logger","背后","海龟","com","周期","3","已经","时刻","想起","spawning","transforms3d","下来","自带","1","stamp","linear","*","雷达","全局","python3","transformation","管理系","rel","转变","return","熟悉","小","便于","计算","名称","trans","关系","连线","很","回调","关闭","transformlistener","一个","就绪","描述","路径","utf","想要","旋转","还是","比如","做","就","理解","xy","激光雷达","按照","参数值","broadcaster","）","learning","来","!","time","先","static","距离","定时","broadcaster2","两个","位置","对象","map","平移","效果","否则","解决","将","？","进入","与","坐标","none","戳","操作","transform","没","四个","node","base","树","一种","request","又会有","继续","工具","默认","速度","lookup","定义","！","激光","编译","sim","文件","launchconfiguration","pos","中心","这","en","抓取","包","命令","只要","是否","很多","挑战","获取","哪个","生变","配置","except","怎么",")","外部环境","变得","看","之为","并","订阅","result","rviz2","服务","给","准备就绪","跟随","shutdown","5","5.0","参数","org","run","每","机器人学","解析","q","编写","之后","bin","看看","call","现在","demo","当","缓冲","至关","install","py","view","类","angular","初始化","speed","done","ros","循环","被","基本",",","直观","末端","源","退出","然后","html","爪","一下","又","坐标系","atan2","async","yaw","理论","器","中是","--","、","d","成",">","forward","需要","quaternion","出","情况","基","不是","应该","中画","一只","设置","转变成","console","再","安装","（","所以","odom","器类","方向","有点","准备","形态","了解","管理","super","函数","控制","及时","一本","这样","和","buffer","在","段","四元","@","string","动机","def","ex","generate","不断","=","向","scale","知道","夹","真器","if","看似","service","turtlefollowing","相同","z","代码","选项","复杂","试试","父类","info","学习","表示","生成","人学","pip3","不行","其中","角速度","8","还有","rotation","spawn","setup","following","false","为","coding","could","发生变化","空间","declarelaunchargument","加入","机械","theta","居","turtle1","发生","create","分别","修改","有","参考系","__","0","正常","中该","里边","可视化","中心点","：","姿态","，","to","declare","啦","$","两只","会","存储","变换","里程计","产生","仿真器","标志","后","statictransformbroadcaster","pitch","用","监听器","launchdescription","turtletfbroadcaster","turtle","tflistener","左边","动态","自己","处理","client","时","一层","usr","针对","知识","核心","时候","'","名字","开始","还会","successfully","通过","箭头","transformexception","其实","name","三个","哪些","仿真","entry","概念","教材"," ","get","frame","最为","随便","固定","不变","不要","动","rviz","guyuehome","入口","可视","tutorials","所在","理论知识","parameter","程序","default","呢","简单","pdf","变成","高中","不会","维护","publisher","发送","teleop","(","header","库","并且","]","小海","示例","clock","地图","机器","范围","你家","接下来","apt","更加","当前","常见","缓冲区","报告","sudo","from",":","同理","import","一样","得","else","{","points","4","subscription","child","}","class","刚才","怎么样","之间","roll","重要","frames","到","float","销毁","叫做","as","加","actions","description","运行","优先","都","位","euler","https","广播","geometry","那","终端","神器","now","来看","_","详细","打印","移动机器人","话题","复用","share","接下","链接","试一试","spawned","提供","成功","docs","turtlename","echo","msg","0.0","里程","运动","实现","true","w","link","提示","静态","存在","保持","这个","target","key","自动","#","接口","至关重要","部分","transformbroadcaster","rclpy","查询","打开","慢慢","移动","更新","组成","案例","依然","下","房子","看到","保存","主要","创建","服务器","怎样","f","客户端","客户","讲解","send","tf","启动","twist","ready","要","改变","没有","节点","默认值","转换","中间","package","vel","目标","两者","不同","%","清楚","功能","只","translation","变得复杂","工件","欧拉","the","说明","中","publish","msgs","scripts","线速度","y","我们","外部","house","id","parameters","有所","起来","长度","异常","/","关于","not","。","laser","者","角度","是不是","作者","方法","原理","args","内","跟随运动","完成","基于","结构","ros2","误差","基础","pkg","初始","得到","pose","is","listener","如果","命令行","分解","math","意思","对","例程","1.0","数学","机器人","turtlesim","臂","transformations","么","相对","监听","s","传入","turtle2","数","如下","软件","管理系统","欧拉角","好","向量","信息","这些","value","launch","四乘","—","on","定时器","等待","是","绝对","查看","显示","destroy","quat","try","transformstamped","sendtransform","务器","init","sqrt","点","让","substitutions","就是","大家","x","srv","变化"],"title":"TF","title_tokens":["tf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf","text":"坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器—— TF 。","text_tokens":["机器","一个","神器","机器人学","中","概念","机器人","如何"," ","完整","该","系统","我们","很多","非常","提供","这些","ros","tf","了","。","位置","—","是","的","给","？","存在","管理","坐标","，","熟悉","基础","之间","也","坐标系","重要","人学","会","关系","在"],"title":"TF：机器人坐标系管理神器","title_tokens":["机器","坐标","神器","坐标系","机器人","：","tf","管理"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_1","text":"机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做 基坐标系 Base Frame，机器人安装位置在外部环境下的参考系叫做 世界坐标系 World Frame，机器人末端夹爪的位置叫做 工具坐标系 ，外部被操作物体的位置叫做 工件坐标系 ，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是 基坐标系 Base Link，雷达所在的位置叫做 雷达坐标系 laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做 里程计坐标系 odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做 地图坐标系 map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为 平移和旋转 两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实就是向量的数学描述。 ROS中TF功能的底层原理，就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。","text_tokens":["又会有","一些","那","工具","封装","累积","详细","为","移动机器人","中心","抓取","系统","空间","机械","两者之间","外部环境","里程","变得","显得","四","有","参考系","底层","使用","link","的","中心点","，","跟随","这个","矩阵","物体","会","至关重要","部分","变换","里程计","每","world","机器人学","移动","良好","进行","下","漂移","主要","参考","至关","ros","讲解","被","tf","基本","了","末端","要","一层","过程","知识","环境","格外","可以","两者","爪","也","坐标系","通过","理论","其实","功能","世界","哪些","变得复杂","工件","中","教材"," ","出","基","frame","固定","中画","我们","外部","安装","所在","理论知识","odom","呢","简单","关于","雷达","。","laser","方法","原理","内","管理系","形态","管理","误差","一本","和","关系","在","分解","地图","机器","一个","范围","对","动机","描述","数学","机器人","旋转","臂","不断","相对","比如","就","夹","管理系统","一样","看似","向量","这些","四乘","两个","位置","map","平移","是","绝对","复杂","？","坐标","之间","重要","操作","人学","叫做","就是","大家","base","都","变化"],"title":"机器人中的坐标系","title_tokens":["机器","坐标","坐标系","中","机器人","的"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_1","text":"ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。","text_tokens":["机器","中","海龟","机器人","如何","该","下","我们","呢","ros","先","tf","。","小海龟","使用","的","了解","基于","？","，","坐标","跟随","坐标系","两只","通过","小海","算法","示例","一种"],"title":"TF命令行操作","title_tokens":["命令行","命令","操作","tf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_2","text":"这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools $ sudo pip3 install transforms3d 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 当我们控制一只海龟运动时，另外一只海龟也会跟随运动。","text_tokens":["相应","一个","run","需要","海龟","apt","_","之后","turtlesim"," ","如何","文件","sudo","包","就","tf2","试一试","一只","我们","demo","当","transforms3d","turtle","安装","install","py","来","ros","tools","先","启动","launch","。","运动","然后","时","小海龟","效果","跟随运动","的","ros2","另外","？","可以","这个","，","控制","跟随","key","$","teleop","自动","也","通过","会","humble","具体","-","pip3","小海","运行",".","功能","示例","其中"],"title":"小海龟跟随例程","title_tokens":["跟随","例程","小海龟","海龟","小海"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_2","text":"在当前运行的两只海龟中，有哪些坐标系呢，我们可以通过这个小工具来做查看。 $ ros2 run tf2_tools view_frames 默认在当前终端路径下生成了一个frames.pdf文件，打开之后，就可以看到系统中各个坐标系的关系了。","text_tokens":["run","一个","哪些","工具","默认","终端","打开","路径","中","海龟","_","之后","当前"," ","下","文件","看到","做","系统","tf2","就","我们","view","呢","来","tools","pdf","。","了","有","查看","的","ros2","可以","，","坐标","这个","小","$","各个","frames","坐标系","两只","通过","生成","关系","在",".","运行"],"title":"查看TF树","title_tokens":["树","tf","查看"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_3","text":"只看到坐标系的结构还不行，如果我们想要知道某两个坐标系之间的具体关系，可以通过tf2_echo这个工具查看： $ ros2 run tf2_ros tf2_echo turtle2 turtle1 运行成功后，终端中就会循环打印坐标系的变换数值了，由平移和旋转两个部分组成，还有旋转矩阵。","text_tokens":["数值","run","只","终端","工具","还有","后","由","中","想要","_","还","打印","旋转"," ","组成","看到","tf2","就","turtle2","我们","知道","turtle1","某","ros","成功","循环","echo","了","。","两个","平移","查看","的","结构","：","ros2","可以","坐标","，","之间","这个","$","和","矩阵","坐标系","通过","会","关系","如果","具体","运行","部分","不行","变换"],"title":"查询坐标变换信息","title_tokens":["坐标","查询","信息","变换"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_4","text":"看数值还不直观？可以试试用可视化软件来做显示： $ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 再让小海龟动起来，Rviz中的坐标轴就会开始运动，这样是不是更加直观了呢！ 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。","text_tokens":["数值","_","！","share","这",")","着急","看","运动","rviz2","小海龟","使用","可视化","的","：","，","跟随","$","会","坐标轴","-","run","慢慢","还","案例","用","下","tf2","怎样","turtle","py","不","tf","了","直观","prefix","可以","开始",".","--","d","背后","中","海龟"," ","不是","不要","动","我们","rviz","可视","再","起来","呢","/","。","是不是","有点","方法","原理","了解","ros2","pkg","便于","这样","(","小海","意思","更加","做","就","理解","软件","来","先","是","试试","显示","？","坐标","让","大家"],"title":"坐标系可视化","title_tokens":["坐标","坐标系","可视","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_3","text":"我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为 静态TF变换 ，我们来看看在程序中该如何实现？","text_tokens":["机器","对","那","一个","你家","中","机器人","激光","之后"," ","常见","进行","情况","房子","最为","相对","应该","发生变化","比如","底盘","主要","作用","系统","就","看看","如何","激光雷达","我们","只要","哪个","安装","好","发生","生变","程序","来","呗","简单","不","tf","基本","雷达","。","之为","称之为","实现","位置","中该","是","试试","不会","的","静态","？","管理","说","坐标","，","这个","之间","和","这种","也","坐标系","拆","关系","在","很","变换","变化"],"title":"静态TF广播","title_tokens":["广播","静态","tf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_5","text":"启动终端，运行如下命令： $ ros2 run learning_tf static_tf_broadcaster $ ros2 run tf2_tools view_frames 可以看到当前系统中存在两个坐标系，一个是world，一个是house，两者之间的相对位置不会发生改变，通过一个静态的TF对象进行维护。","text_tokens":["run","一个","终端","world","中","_"," ","当前","进行","看到","相对","系统","tf2","命令","如下","broadcaster","house","view","learning","发生","tools","tf","static","启动","两者之间","。","两个","位置","改变","对象","是","不会","维护","的","：","ros2","静态","存在","可以","，","坐标","两者","之间","$","frames","坐标系","通过","运行"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_6","text":"来看下在代码中是如何创建坐标系并且发布静态变换的。 learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？","text_tokens":["广播","geometry","8","now","来看","rotation","setup","_","编译","如何","coding","为","文件","该","10.0","这","系统","包","加入","时间","居","配置","statictfbroadcaster","msg",")","0.0","spin","并","__","0","[","w","使用","的","2","静态","：","保持","，","to","shutdown","经过","5.0","env","古月","#","接口","python","-","变换","rclpy","查询","world","打开","后","statictransformbroadcaster","pitch","编写","消息","进行","下","bin","创建","tf2","self","www","py","类","发布","初始化","ros","循环","tf",",","了","退出","源","usr","节点","转换","目标","时候","'","又","坐标系",".","yaw","清楚","器","中是","name","\"","功能","、","main","translation","欧拉","需要","说明","中","entry","quaternion"," ","com","get","3","msgs","frame","scripts","不变","y","设置","我们","guyuehome","console","入口","id","house","（","程序","呢","1","器类","stamp","/","*","。","作者","python3","args","完成","ros2","super","初始","(","header","关系","库","在","并且","]","段","示例","四元","@","clock","一个","def","utf","描述","旋转","transformations","=","向","数","如下","知道","欧拉角","from",":","import","broadcaster","）","learning","!","{","points","static","child","两个","z","位置","代码","对象","平移","等待","选项","}","是","父类","class","将","destroy","quat","？","transformstamped","坐标","sendtransform","init","roll","none","点","戳","让","到","transform","销毁","node","x","euler","变化"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_4","text":"我们再来学习下如何查询两个坐标系之间的位置关系。","text_tokens":["学习","坐标","查询","之间","我们","两个","。","位置","坐标系","再","关系","如何","来","下","的"],"title":"TF监听","title_tokens":["监听","tf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_7","text":"启动一个终端，运行如下节点，就可以在终端中看到周期显示的坐标关系了。 $ ros2 run learning_tf tf_listener","text_tokens":["run","一个","终端","中","_"," ","周期","看到","就","如下","learning","tf","启动","了","。","节点","显示","的","ros2","可以","，","坐标","$","关系","listener","在","运行"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_8","text":"这个节点中是如何查询坐标关系的，我们来看下代码。 learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。","text_tokens":["数值","继续","8","默认","lookup","now","来看","rotation","setup","_","编译","如何","coding","could","文件","pos","系统","包","加入","挑战","时间","居","获取","create","配置","某","except",")","失败","并","spin","__","0","[","w","使用","的","2","：","姿态","这个","，","declare","target","to","shutdown","啦","参数","跟随","env","古月","#","两只","接口","存储","python","-","变换","rclpy","查询","world","名","打开","后","编写","timer","案例","用","进行","下","bin","监听器","保存","现在","tf2","创建","缓冲","self","www","f","tflistener","py","类","左边","初始化","ros","处理","循环","tf",",","基本","了","退出","源","usr","节点","默认值","目标","'","坐标系","source",".","transformexception","%","中是","name","\"","--","功能","main",">","logger","translation","需要","说明","entry","海龟","quaternion"," ","com","get","周期","frame","scripts","固定","时刻","y","我们","外部","设置","guyuehome","console","入口","house","（","parameter","程序","有所","1","异常","/","not","*","。","作者","python3","args","完成","了解","ros2","super","return","初始","(","trans","关系","buffer","listener","库","如果","]","示例","四元","@","关闭","transformlistener","一个","对","string","1.0","def","utf","ex","当前","transformations","=","监听","缓冲区","报告","s","数","如下","知道","from",":","import","参数值","broadcaster","）","好","learning","信息","!","value","{","time","points","static","定时","两个","z","位置","代码","on","定时器","对象","否则","等待","选项","}","父类","class","info","quat","destroy","try","进入","坐标","之间","init","none","点","让","到","transform","销毁","as","node","x","大家","优先","euler"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_9","text":"还是之前小海龟跟随的示例，我们自己通过代码来实现一下。","text_tokens":["，","跟随","。","我们","一下","实现","代码","小海龟","通过","海龟","还是","小海","来","自己","的","示例","之前"],"title":"海龟跟随功能解析","title_tokens":["功能","跟随","解析","海龟"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_10","text":"先看下实现的效果，启动终端后，通过如下命令启动例程： $ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 看到的效果和ROS自带的例程相同。","text_tokens":["run","终端","例程","后","following","_","turtlesim"," ","下","看到","命令","如下","demo","turtle","py","先看","learning","自带","ros","tf","启动","launch","。","相同","实现","效果","的","：","ros2","，","key","$","teleop","和","通过","."],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_11","text":"在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心就是通过坐标系实现向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。","text_tokens":["广播","速度","定义","封装","如何","话题","该","中心","这","时间","turtle1","某","怎么","看","运动","实现","参考系","有","的","中心点","2","这个","，","跟随","两只","变换","world","仿真器","用","上","下","参考","一起","发布","动态","不","tf","了","要","时","然后","中间","核心","可以","两者","说","还会","也","坐标系","通过","箭头","三个","仿真","中","海龟"," ","周期","不是","随便","想起","我们","设置","动","再","所以","起来","1","长度","方向","。","角度","全局","是不是","方法","高中","这样","计算","和","得到","在","连线","很","一个","例程","描述","不断","么","相对","监听","比如","做","向","就","turtle2","真器","同理","按照","好","向量","得","距离","位置","代码","解决","怎么样","？","与","坐标","学习","表示","叫做","加","就是"],"title":"原理解析","title_tokens":["原理","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#launch","text":"先来看下刚才运行的launch文件，里边启动了四个节点，分别是： 小海龟仿真器 海龟1的坐标系广播 海龟2的坐标系广播 海龟跟随控制 其中，两个坐标系的广播复用了turtle_tf_broadcaster节点，通过传入的参数名修改维护的坐标系名称。 learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ])","text_tokens":["广播","来看","following","_","sim","文件","launchconfiguration","复用","declarelaunchargument","turtle1","turtlename","分别",")","修改","[","小海龟","里边","的","2","：","，","跟随","target","参数","名","仿真器","下","launchdescription","demo","turtle","py","broadcaster1","ros","tf","启动",",","了","executable","节点","package","'","坐标系","通过",".","name","仿真","海龟"," ","frame","parameters","default","1","/","。","维护","return","控制","名称","(","listener","]","小海","def","turtlesim","generate","=","传入","turtle2","真器","from",":","import","broadcaster","learning","value","{","先","launch","broadcaster2","两个","是","}","刚才","坐标","actions","description","四个","substitutions","运行","node","其中"],"title":"Launch文件解析","title_tokens":["launch","解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_12","text":"海龟1和海龟2在world坐标系下的坐标变换，在turtle_tf_broadcaster节点中实现，除了海龟坐标系的名字不同之外，针对两个海龟的功能是一样的。 learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], },","text_tokens":["数值","广播","geometry","8","默认","now","rotation","setup","_","编译","为","coding","文件","系统","包","加入","theta","时间","居","获取","create","配置","turtlename","msg",")","订阅","0.0","spin","并","实现","__","0","[","小海龟","w","使用","之外","的","2","：","，","declare","to","shutdown","参数","env","古月","#","接口","python","-","transformbroadcaster","变换","rclpy","world","打开","后","q","pitch","更新","编写","消息","用","进行","下","bin","tf2","创建","self","www","f","turtletfbroadcaster","turtle","py","类","动态","初始化","ros","处理","send","循环","tf",",","退出","源","usr","节点","针对","默认值","除了","转换","目标","'","名字","坐标系","不同","callback",".","yaw","器","name","\"","功能","、","main","translation","欧拉","需要","the","说明","中","entry","海龟","quaternion"," ","com","get","3","msgs","frame","scripts","y","设置","外部","转变成","guyuehome","console","入口","id","（","parameter","程序","1","stamp","/","*","。","者","作者","变成","python3","args","transformation","完成","转变","ros2","super","函数","及时","初始","和","(","pose","名称","header","listener","库","在","]","小海","回调","示例","四元","@","clock","关闭","一个","string","def","utf","turtlesim","旋转","transformations","=","向","数","如下","知道","欧拉角","from",":","import","broadcaster","一样","参数值","）","learning","信息","!","value","{","points","static","subscription","child","两个","z","位置","代码","对象","否则","是","平移","}","等待","选项","父类","class","将","destroy","transformstamped","坐标","sendtransform","init","roll","none","点","戳","让","到","transform","销毁","node","x","优先","euler","变化"],"title":"坐标系动态广播","title_tokens":["坐标","广播","坐标系","动态"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_13","text":"坐标系都正常广播了，接下来我们就可以订阅两只海龟的位置关系，并且变换成速度指令进行控制啦。 learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], },","text_tokens":["数值","广播","geometry","角速度","request","8","速度","默认","lookup","now","spawn","false","following","_","rotation","setup","编译","coding","话题","could","文件","接下","系统","包","是否","加入","theta","spawned","时间","居","turtle1","获取","create","配置","成功","except","订阅",")","msg","运动","失败","并","实现","__","0","result","正常","服务","true","请求","包括","使用","+","[","位","提示","的","2","准备就绪","：","姿态","，","啦","跟随","declare","to","5","shutdown","参数","两只","env","#","古月","接口","python","存储","-","cmd","变换","rclpy","名","产生","打开","标志","rate","后","还","timer","finished","消息","用","编写","进行","监听器","bin","依然","保存","call","spin","tf2","创建","服务器","缓冲","self","www","f","内容","客户端","turtle","py","类","客户","左边","speed","angular","初始化","发布","done","ros","数据","循环","tf","twist",",","spawner","了","client","退出","源","ready","usr","没有","节点","默认值","vel","目标","可以","'","坐标系","atan2","通过","successfully","source","根据",".","transformexception","async","name","功能","\"","指令","、","成","main",".__","logger","forward","translation","publish","需要","说明","entry","海龟"," ","com","get","已经","msgs","frame","周期","scripts","固定","时刻","线速度","spawning","y","我们","外部","设置","guyuehome","console","入口","下来","parameter","程序","1","异常","/","linear","not","*","。","角度","作者","python3","args","跟随运动","准备","rel","完成","发送","publisher","ros2","super","return","控制","初始","计算","(","is","trans","关系","buffer","库","listener","并且","如果","]","示例","math","@","关闭","transformlistener","一个","就绪","string","def","utf","ex","接下来","turtlesim","当前","transformations","=","监听","缓冲区","报告","就","turtle2","xy","scale","知道","如下","from",":","if","import","参数值","broadcaster","learning","信息","else","service","turtlefollowing","!","value","{","time","points","static","距离","定时","4","z","位置","on","代码","定时器","对象","否则","等待","选项","}","父类","查看","class","info","destroy","try","进入","坐标","务器","init","sqrt","none","表示","点","让","生成","transform","到","float","as","没","销毁","node","x","优先","srv","都","变化"],"title":"海龟跟随","title_tokens":["跟随","海龟"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_14","text":"https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":["tf2","main",":","org","tutorials","humble",".","ros","-","en","docs","https","/","html"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/","text":"URDF：机器人建模方法 ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法—— URDF ，用来描述机器人外观、性能等各方面属性。 机器人的组成 建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由 硬件结构、驱动系统、传感器系统、控制系统 四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备； 驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等； 传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境； 控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。 URDF ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是 XML格式 ，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为 连杆Link ，手肘就类似于机器人电机驱动部分，称为 关节joint 。 所以在URDF建模过程中，关键任务就是通过这里的<link>和<joint>，理清楚每一个连杆和关节的描述信息。 连杆Link的描述 <link>标签用来描述机器人某个刚体部分的 外观和物理属性 ，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。 link里边的<visual>部分用来描述机器人的外观，比如： <geometry>表示 几何形状 ，里边使用<mesh>调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的 <origin>表示 坐标系相对初始位置的偏移 ，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分<collision>，描述 碰撞参数 ，里边的内容似乎和<visual>一样，也有<geometry>和<origin>，看似相同，其实区别还是比较大的。 <visual>部分重在描述机器人看上去的状态，也就是视觉效果； <collision>部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过<visual>来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是<collision>里边<geometry>描述的形状。<origin>坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。 关节Joint描述 机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 parent标签：描述父连杆； child标签：描述子连杆，子连杆会相对父连杆发生运动； origin：表示两个连杆坐标系之间的关系，也就是图中红色的向量，可以理解为这两个连杆该如何安装到一起； axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的； limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等。 Info ROS中关于平移的默认单位是m，旋转是弧度（不是度），所以这里的3.14就表示可以在-180度到180度之间运动，线速度是m/s，角速度是rad/s。 完整机器人模型 最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。 创建机器人模型 好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。 功能包结构 机器人的模型放置在learning_urdf功能包中，功能包中包含的文件夹如下： urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件 模型可视化效果 我们先来看下这个模型的效果，尝试逆向分下一下机器人的结构。 $ ros2 launch learning_urdf display.launch.py 很快就可以看到Rviz中显示的机器人模型啦，大家可以使用鼠标拖拽观察。 从可视化的效果来看，这个机器人由五个link和4个joint组成。 查看URDF模型结构 我们分析的对不对呢，可以在模型文件的路径下，使用urdf_to_graphviz这个小工具来分析下。 $ urdf_to_graphviz mbot_base.urdf # 在模型文件夹下运行 运行成功后会产生一个pdf文件，打开之后就可以看到URDF模型分析的结果啦，是不是和我们的猜测完全相同呢！ 模型文件解析 具体URDF模型什么样的，还是要打开模型来研究。 learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot> 参考链接 https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":["外壳","拖拽","一些","包围","meshes","肌肉","如何","蓝色","length","该","完整","理","系统","网页","某","平面","着急","包括","使用","载体","多","的","之前","外界","3.14","上去","矩阵","这种","装置","相机","车体","包含","正","-","派","允许","先来","由","还","continuous","肘关节","进行","底盘","上","front","内容","wheel","参考","一起","black","不","相对运动","了","0.015","不过","过程","独自","rgba","环境","的话","可以","全都","xml","也","建模","编码器","humble",".","具体","stl","\"","origin","main","0.9","硬件","面上","鼠标","真实","清晰","0.025","驱动器","手臂","planar","什么样","形状","柱体","个","全为","图中","1","有点像","看上","雷达","应用软件","imu","0.20","管理系","为此","graphviz","比较","轴","熟悉","便于","axis","计算","小","名称","讲","关系","color","等","结果","一个","0.19","描述","路径","旋转","还是","0.95","第六","比如","就","理解","0.06","小臂","带有","按照","0.4","视觉效果","最终","）","visual","?","learning","当然","来","电源","先","等于","两个","位置","观察","平移","效果","圆柱","属于","第二","自身","将","？","与","坐标","操作","市面上","自定义","无论是","频繁","不仅","base","一致","一种","二个","什么","默认","速度","工具","定义","文件夹","！","文件","en","这","包","而是","度到","右侧","配置","渲染","sphere","一般","配置文件","外部环境","看","放置","驱使","给","开发","乍","称为","件夹","robot","度","参数","算力","应用","感器","org","每","解析","算作","之后","未来","质量","0.05","细节","0.18","类型","py","ros","revolute","相关","刚体","html","一下","坐标系","操作系统","back","、",">","需要","轮子","传感","碰撞检测","不是","单位向量","180","任务","猜测","无法","<","rad","再","安装","六种","围绕","所以","（","caster","码器","方向","弧度","有点","white","了解","管理","控制","各","这样","和","在","外观","像头","区别","material","动机","平台","=","一块","radius","实际","看似","模型","相同","z","代码","转关","连接","复杂","建模语言","质心","info","红色","性能","表示","提前","joint","两种","其中","认识","绿色","分析","于","角速度","mbot","旋转关节","控制系统","完全","为","连杆","大臂","源代码","机械","唯一","发生","则","分别","一段","感知","有","0","正常","fixed","里边","手肘","五个","可视化","：","rpy","，","啦","状态","to","$","调用","括号","会","驱动","碰撞","此时","产生","最小","尖括号","后","pitch","用","很快","传感器","方式","分下","格式","自己","时","少","视觉","时候","惯性","名字","系列","四大","通过","要求","沿某","其实","以","name","属性","高","物理","type","哪些","为了"," ","固定","哪","市面","rviz","可视","tutorials","尺寸","呢","实打实","偏移","urdf","pdf","模型简化","必须","局","collision","不会","几何","他们","似乎","检测","存放","mesh","标签","1.5707","类似","小车","示例","单位","机器","prismatic","一系","从","常见","limit","parent","摄像",":","一样","；","得","简化","滑动","圆柱体","重在","display","4","right","child","组合而成","无论","0.095","摄像头","引用","之间","roll","接触","到","研究","叫做","直线","运行","才能","都","https","geometry","子","来看","_","移动机器人","最大","找","在于","left","组成部分","第六种","链接","不能","提供","方面","以及","成功","docs","它","运动","link","这里","父","这个","框","看下","所有","version","独立","无限","#","电机","较","某个","部分","把","设备","板载","为例","打开","移动","组成","下","看到","保存","包中","主要","创建","一系列","cylinder","启动","要","介绍","叫","形成","组合","放在","关节","设计","xacro","用来","清楚","手","浮动","功能","中","这么","三维","raw","大","关键","线速度","y","我们","等等","编码","外部","全称","语言","起来","/","关于","0.16","看上去","。","角度","是不是","或","方法","每个","颜色","限制","完成","结构","ros2","初始","第二个","自定","树莓","尝试","如果","分解","对","1.0","yellow","机器人","floating","臂","完全相同","相对","s","如下","软件","管理系统","好","逆向","信息","桌子","向量","这些","m","launch","极限","思路","—","xyz","统一","是","电脑","显示","查看","这款","让","就是","大家","x","专门","变化"],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf","text":"ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法—— URDF ，用来描述机器人外观、性能等各方面属性。","text_tokens":["机器","把","一个","描述","外观","机器人","还","如何"," ","下","系统","我们","提供","当然","得","呢","一种","ros","方面","urdf","了","。","不过","要","介绍","方法","—","是","使用","的","给","为此","？","之前","，","啦","性能","各","操作系统","操作","让","建模","用来","在","等","属性","专门","认识","、"],"title":"URDF：机器人建模方法","title_tokens":["机器","方法","建模","机器人","：","urdf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_1","text":"建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由 硬件结构、驱动系统、传感器系统、控制系统 四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备； 驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等； 传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境； 控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。","text_tokens":["外壳","一些","控制系统","移动机器人","这","系统","组成部分","机械","以及","一般","感知","包括","正常","里边","使用","载体","驱使","的","开发","，","状态","参数","装置","电机","应用","驱动","感器","部分","派","板载","设备","把","每","由","移动","组成","进行","底盘","上","看到","主要","传感器","自己","了","过程","环境","可以","组合","操作系统","四大","通过","建模","编码器","清楚","其实","、","硬件","面上","需要","中"," ","传感","驱动器","我们","市面","编码","等等","外部","再","安装","语言","起来","实打实","码器","雷达","。","应用软件","imu","管理系","结构","管理","控制","熟悉","便于","计算","和","树莓","类似","等","分解","机器","像头","一个","动机","描述","机器人","常见","还是","臂","平台","比如","摄像","软件","管理系统","按照","；","这些","电源","先","思路","无论","是","建模语言","电脑","摄像头","操作","市面上","无论是","就是","都"],"title":"机器人的组成","title_tokens":["的","机器","组成","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_1","text":"ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是 XML格式 ，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为 连杆Link ，手肘就类似于机器人电机驱动部分，称为 关节joint 。 所以在URDF建模过程中，关键任务就是通过这里的<link>和<joint>，理清楚每一个连杆和关节的描述信息。","text_tokens":["于","包围","肌肉","如何","文件","连杆","理","大臂","源代码","网页","机械","右侧","外部环境","看","运动","使用","link","手肘","的","这里","开发","乍","，","上去","这个","称为","独立","括号","电机","驱动","部分","每","产生","由","尖括号","还","算作","之后","组成","肘关节","下","一系列","格式","自己","ros","相对运动","过程","刚体","独自","环境","可以","组合","xml","关节","也","系列","通过","建模","手","清楚","属性",">","中","清晰"," ","任务","手臂","关键","无法","<","我们","外部","全称","所以","呢","urdf","有点像","看上","看上去","。","有点","方法","必须","他们","这样","和","标签","在","类似","机器","一个","描述","一系","机器人","臂","相对","比如","就","小臂","信息","桌子","这些","模型","组合而成","代码","统一","连接","是","自身","？","叫做","joint","不仅","就是","大家","才能","都","其中"],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#link","text":"<link>标签用来描述机器人某个刚体部分的 外观和物理属性 ，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。 link里边的<visual>部分用来描述机器人的外观，比如： <geometry>表示 几何形状 ，里边使用<mesh>调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的 <origin>表示 坐标系相对初始位置的偏移 ，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分<collision>，描述 碰撞参数 ，里边的内容似乎和<visual>一样，也有<geometry>和<origin>，看似相同，其实区别还是比较大的。 <visual>部分重在描述机器人看上去的状态，也就是视觉效果； <collision>部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过<visual>来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是<collision>里边<geometry>描述的形状。<origin>坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。","text_tokens":["geometry","定义","蓝色","如何","移动机器人","该","连杆","文件","机械","它","则","分别","运动","有","包括","0","里边","使用","link","的","：","外界","，","这个","上去","状态","框","矩阵","参数","调用","算力","会","较","车体","某个","碰撞","部分","为例","移动","pitch","算作","用","上","未来","质量","内容","不","了","时","过程","刚体","视觉","时候","的话","可以","惯性","设计","也","坐标系","用来","通过","要求","以","name","stl","属性","、","origin","其实","物理","高",">","需要","中","真实","轮子","为了"," ","碰撞检测","三维","raw","大","形状","<","y","我们","柱体","尺寸","全为","偏移","看上","看上去","。","方向","模型简化","颜色","collision","几何","比较","控制","初始","第二个","似乎","和","名称","这样","计算","自定","检测","mesh","标签","在","类似","如果","小车","等","外观","机器","一个","区别","动机","描述","机器人","旋转","臂","还是","相对","比如","就","如下","软件","视觉效果","一样","好","visual","看似","；","实际","来","简化","圆柱体","重在","模型","相同","z","位置","连接","平移","是","效果","复杂","圆柱","第二","质心","将","与","坐标","roll","表示","提前","接触","到","自定义","joint","就是","x","一致","绿色","二个"],"title":"连杆Link的描述","title_tokens":["的","描述","link","连杆"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#joint","text":"机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 parent标签：描述父连杆； child标签：描述子连杆，子连杆会相对父连杆发生运动； origin：表示两个连杆坐标系之间的关系，也就是图中红色的向量，可以理解为这两个连杆该如何安装到一起； axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的； limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等。 Info ROS中关于平移的默认单位是m，旋转是弧度（不是度），所以这里的3.14就表示可以在-180度到180度之间运动，线速度是m/s，角速度是rad/s。","text_tokens":["一些","什么","角速度","默认","速度","旋转关节","子","为","如何","该","连杆","最大","这","在于","第六种","而是","机械","不能","度到","唯一","发生","某","平面","一般","一段","运动","有","fixed","使用","link","的","这里","父","：","，","这个","3.14","度","这种","无限","相机","电机","较","会","正","-","此时","允许","每","产生","最小","之后","continuous","上","进行","内容","类型","方式","一起","两种","ros","不","相对运动","revolute","了","不过","要","叫","少","刚体","都","可以","名字","xml","关节","也","坐标系","通过","沿某","浮动","origin","中","轮子"," ","不是","单位向量","180","固定","planar","哪","线速度","rad","六种","围绕","安装","图中","（","所以","1","/","urdf","关于","方向","。","角度","弧度","限制","不会","比较","轴","axis","这样","和","标签","关系","在","小车","等","单位","机器","一个","区别","prismatic","描述","机器人","floating","旋转","臂","还是","limit","相对","第六","比如","parent","s","就","理解","带有","最终","）","；","向量","m","滑动","模型","等于","child","两个","极限","z","位置","转关","连接","平移","是","属于","info","坐标","之间","红色","表示","到","直线","joint","频繁","就是","才能","一种","变化"],"title":"关节Joint描述","title_tokens":["joint","描述","关节"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_2","text":"最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。","text_tokens":["机器","对","一个","每","哪些","先来","描述","由","中","机器人","完全","组成"," ","之后","完整","下","一块","找","就","细节","再","最终","所以","某","不","模型","urdf","先","着急","了","。","看","时","每个","代码","局","是","形成","link","完成","的","了解","，","这个","组合","全都","所有","放在","和","robot","标签","joint","在","大家","部分"],"title":"完整机器人模型","title_tokens":["机器","模型","完整","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_3","text":"好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。","text_tokens":["机器","为例","一个","动机","移动","机器人","这么"," ","还是","移动机器人","完整","我们","好","一起","它","模型","urdf","了","看","。","要","过程","多","的","这款","，","啦","看下","讲","建模","以","示例"],"title":"创建机器人模型","title_tokens":["创建","机器","模型","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_4","text":"机器人的模型放置在learning_urdf功能包中，功能包中包含的文件夹如下： urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件","text_tokens":["机器","meshes","中","_","机器人","文件夹"," ","文件","保存","包中","如下","rviz","learning","配置","渲染","urdf","模型","启动","launch","配置文件","放置","或","相关","引用","的","：","，","件夹","存放","xacro","在","包含","功能"],"title":"功能包结构","title_tokens":["包","功能","结构"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_5","text":"我们先来看下这个模型的效果，尝试逆向分下一下机器人的结构。 $ ros2 launch learning_urdf display.launch.py 很快就可以看到Rviz中显示的机器人模型啦，大家可以使用鼠标拖拽观察。 从可视化的效果来看，这个机器人由五个link和4个joint组成。","text_tokens":["机器","拖拽","鼠标","由","来看","中","从","_","机器人","组成"," ","下","看到","很快","就","我们","rviz","可视","逆向","分下","py","learning","个","模型","先","urdf","launch","。","display","4","观察","效果","使用","link","显示","可视化","五个","的","结构","ros2","可以","这个","，","啦","一下","$","和","尝试","joint",".","大家"],"title":"模型可视化效果","title_tokens":["效果","可视","模型","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_2","text":"我们分析的对不对呢，可以在模型文件的路径下，使用urdf_to_graphviz这个小工具来分析下。 $ urdf_to_graphviz mbot_base.urdf # 在模型文件夹下运行 运行成功后会产生一个pdf文件，打开之后就可以看到URDF模型分析的结果啦，是不是和我们的猜测完全相同呢！","text_tokens":["结果","对","产生","工具","一个","打开","mbot","路径","后","_","文件夹","！","之后","完全"," ","完全相同","文件","下","看到","不是","猜测","就","我们","呢","来","成功","不","urdf","模型","pdf","。","相同","是不是","使用","的","graphviz","可以","，","to","这个","小","件夹","啦","$","和","#","会","在",".","运行","base","分析"],"title":"查看URDF模型结构","title_tokens":["结构","urdf","查看","模型"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_6","text":"具体URDF模型什么样的，还是要打开模型来研究。 learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot>","text_tokens":["type",">","什么","打开","geometry","material","0.19","mbot","1.0","yellow","0.9","_","continuous"," ","还是","length","0.95","=","parent","0.025","front","什么样","0.05","left","<","0.06","radius","0.4","?","wheel","visual","0.18","learning","caster","来","cylinder","1","black","sphere","/","模型","urdf","0.16","name","。","right","0.015","child","要","0","0.20","xyz","0.095","white","link","rgba","的","rpy","，","color","robot","xml","axis","version","back","研究","joint","具体",".","-","1.5707","base","\"","origin"],"title":"模型文件解析","title_tokens":["解析","模型","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_7","text":"https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":["main",":","org","tutorials","humble",".","ros","-","en","docs","https","/","urdf","html"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/","text":"Gazebo：三维物理仿真平台 ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台 Gazebo ，了解一下。 Gazebo仿真平台 介绍 Gazebo是ROS系统中最为常用的 三维物理仿真平台 ，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。 安装 Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-* 运行 通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py Attention 为保证模型顺利加载，请将离线模型下载并放置到~/.gazebo/models路径下 ，下载链接如下： https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。 XACRO机器人模型优化 我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本—— XACRO文件 。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义 ，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含 ，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口 ，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro 以下是一些常用的XACRO文件语法，大家了解下。 常量定义 <xacro:property>标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。 数学计算 如果需要做数学计算，同样是在“${}”中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 Info 所有数学运算都会转换成浮点数进行，以保证运算精度 宏定义 机器人的轮子我们也做成宏定义，定义方式是通过这个<xacro:macro>标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。 文件包含 宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。 机器人仿真模型配置 完善物理参数 第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。 添加Gazebo标签 第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。 配置传动装置 第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。 添加控制器插件 第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。 构建仿真环境 接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ]) 机器人运动仿真 万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard Attention 虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 通过键盘上的“i、j、，、l”几个按键，就可以控制机器人前后左右运动啦。 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。 Ignition：下一代Gazebo 随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为 Ignition ，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 运行成功后，会打开Ignition的仿真界面和Rviz上位机，我们可以看到RGBD相机仿真后发布的图像数据。 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/ 附录：机器人完整模型 learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["数值","一些","动力学","模块","all","如何","传动装置","length","完整","该","似曾相识","系统","左右","第二步","镜像","嵌套","网站","single","provided","某","必备","保证","index","[","小海龟","差速","使用","限飞","虚拟","+","多","的","2","20","之前","数学计算","摩擦力","这种","装置","第三步","相机","python","包含","-","cmd","算法","常量","world","丰富","rate","还","continuous","方便","进行","底盘","上","matrix","front","变量","ignition","友好","语法","www","wheel","参考","转换成","一起","diameter","发布","数据","black","不","spawner","一定","了","0.015","we","不过","executable","过程","想不起来","os","加速","topic","rgba","prefix","环境","另外","可以","xml","也","http","mechanicalreduction","官方","建模","humble","source",".","必要","\"","整个","find","origin","used","比","第三","硬件","“","turngravityoff","海龟","neighborhood","已经","com","3","0.025","差不多","万事","时刻","iyy","传动","下来","个","r","1","有点像","velocityjointinterface","*","0.20","点数","刚好","enabled","return","以上","导致","axis","计算","名称","做成","trans","关系","二步","b","很","分配","等","color","set","关闭","结果","一个","奇迹","0.19","技术","路径","描述","inertial","by","0.95","比如","做","一行","acceleration","就","理解","可","0.06","系数","camera","0.4","?","visual","learning","当然","来","参数设置","!","time","先","加大","两个","位置","效果","第二","见证","将","？","加载","没","频繁","不仅","node","base","controller","速度","界面","定义","ignitionrobotics","场景","sim","化","文件","加法","这","包","命令","很多","screen","顺利","配置","渲染","sphere","only","怎么",")","并","放置","simpletransmission","给","开发","手边","力学","表面","宏","robot","度","值为","参数","5","虚拟机","应用","无人机","去","gazebo","j","感器","出现","our","org","hardware","run","每","浮点","ign","未来","质量","0.05","join","drive","当","want","0.18","command","install","py","me","mass","bridge","ros",",","基本","更","path","然后","相关","支持","输入","较大","一下","back","三步","hardwareinterface","yaw","--","、","于是",">","0.2","需要","完善","公式","轮子","两句","传感","use","不是","params","includelaunchdescription","<","总体","设置","再","安装","所以","进步","caster","odom","前后左右","硬件加速","同时","export","实物","有点","colors","differential","这句","了解","osrf","引擎","测试","控制","函数","以下","where","这样","试一下","和","xmlns","h","火星车","在","file","filename","重复","像头","be","3.1415926","material","动机","可编","into","def","i","平台","generate","不断","=","size","ixz","下一代","真器","you","if","radius","模型","除法","z","无人","代码","复杂","试试","官方网","izz","info","上来","entity","区分","运算","记得","joint","pi","万事俱备","c","认识","跑","语句","mbot","似曾","spawn","false","摩擦","为","相识","新一代","新","附录","加入","机","冗余","同样","rgbd","名为","修改","有","0","条件","fixed","里边","：","第一句","rpy","，","啦","own","to","$","models","调用","in","括号","优化","github","会","碰撞","第二句","此时","第一","仿真器","后","用","构建","launchdescription","还要","流程","传感器","items","离线","命名","box","方式","格式","时","针对","火星","不多","force","时候","惯性","~","'","名字","一句","通过","高质","以","name","属性","部署","物理","---","传递数据","二句","type","仿真","及","流畅","为了"," ","get","最为","frame","this","换成","and","rviz","diff","尺寸","plugin","reference","呢","动力","甚至","简单","urdf","再用","问题","collision","不会","libgazebo","output","publisher","teleop","(","官方网站","随着","标签","互相","类似","a","]","小海","小车","odometry","机器","编程","transmission","从","接下来","apt","更为","不妨","图形","ament","0.001","important","一步","parent","摄像","motor","sudo","下载","sure","from",":","arguments","ixx","import","因为","一样","torque","val","得","make","{","放到","4","right","child","可编程","}","reflect","摄像头","have","实验","correctly","迭代","到","actions","description","弹性","inertia","怎么办","运行","https","都","geometry","那","max","for","尽量","defining","_","上位","interface","footprint","四步","移动机器人","常用","bashrc","可能","像","share","认识一下","接下","找","left","验证","链接","12","keyboard","不能","版本","提供","成功","它","为止","echo","packages","0.0","运动","实现","include","办法","true","主角","link","so","图像","这里","这个","所有","version","#","电机","接口","周边","重复使用","传递","把","pythonlaunchdescriptionsource","打开","移动","matter","下","看到","vgpu10","list","很长","t","主要","创建","你","模拟","property","请","separation","attention","change","键盘","cylinder","周边环境","twist","启动","doesn","tf","添加","介绍","要","叫","没有","节点","想不起","转换","package","gray","joints","vel","人机","前后","按键","设计","关节","iyz","xacro","用来","不同","装上","直接","弹性系数","功能","blue","ixy","spwan","load","publish","the","中","插件","directory","根本","切分","三维","actuator","考虑","y","我们","them","改成","语言","起来","/","0.16","。","really","角度","是不是","精度","方法","每个","颜色","第一步","帮助","完成","macro","第四","ros2","pkg","高质量","得到","浮点数","pose","俱备","is","尝试","如果","一代","课程","svga","l","几个","对","升级","1.0","yellow","数学","机器人","结束","么","相对","如下","文件格式","c语言","好","控制器","0.75","信息","m","这些","state","value","3.14159","launch","续航","确保","—","”","xyz","worlds","是","写","原本","sources","wiki","第四步","30","update","用到","让","大家","交给","x","就是","demos","某些","变化"],"title":"Gazebo","title_tokens":["gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo","text":"ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台 Gazebo ，了解一下。","text_tokens":["机器","仿真","机器人"," ","平台","三维","我们","当然","呢","ros","怎么","。","实物","问题","主角","没有","是","了解","？","手边","开发","，","一下","没","如果","gazebo","怎么办","物理"],"title":"Gazebo：三维物理仿真平台","title_tokens":["仿真","gazebo","平台","三维","：","物理"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_1","text":"","text_tokens":[],"title":"Gazebo仿真平台","title_tokens":["平台","仿真","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_1","text":"Gazebo是ROS系统中最为常用的 三维物理仿真平台 ，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。","text_tokens":["那","动力学","摩擦","场景","为","常用","可能","系统","验证","加入","提供","渲染","实现","办法","使用","限飞","多","的","开发","力学","，","表面","摩擦力","优化","应用","无人机","gazebo","算法","此时","周边","还","用","质量","模拟","ros","周边环境","了","更","要","没有","支持","火星","不多","环境","人机","可以","设计","高质","弹性系数","属性","、","部署","物理","仿真","中","及"," ","三维","最为","差不多","我们","再","所以","动力","。","实物","帮助","引擎","测试","导致","高质量","这样","和","火星车","在","类似","等","机器","一个","机器人","不妨","平台","图形","比如","做","就","系数","先","续航","无人","是","上来","实验","到","弹性","频繁","不仅","运行","都"],"title":"介绍","title_tokens":["介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_2","text":"Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-*","text_tokens":["把","一个","中","apt","为了","如何","不妨"," ","已经","完整","认识一下","系统","包","sudo","命令","我们","安装","install","起来","呢","ros","简单","它","先","*","。","了","确保","相关","使用","的","给","：","？","可以","，","一下","这样","和","$","通过","装上","humble","直接","互相","gazebo","-","大家","功能","都","认识","跑"],"title":"安装","title_tokens":["安装"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_3","text":"通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py Attention 为保证模型顺利加载，请将离线模型下载并放置到~/.gazebo/models路径下 ，下载链接如下： https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。","text_tokens":["_","为","移动机器人","该","接下","链接","命令","顺利","它","保证","运动","并","放置","的","：","之前","，","啦","$","models","github","gazebo","把","移动","还","下","还要","离线","请","py","attention","一起","ros","启动","了","环境","可以","~","设计","通过",".","仿真","中"," ","com","不是","我们","下来","/","。","是不是","这句","osrf","ros2","控制","尝试","在","课程","机器","动机","路径","接下来","机器人","么","下载","就","如下",":","模型","放到","launch","试试","将","？","记得","加载","到","大家","https","认识"],"title":"运行","title_tokens":["运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#xacro","text":"我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本—— XACRO文件 。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义 ，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含 ，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口 ，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro 以下是一些常用的XACRO文件语法，大家了解下。","text_tokens":["一些","模块","语句","定义","移动机器人","化","文件","常用","可能","像","接下","包","命令","加入","不能","版本","同样","放置","实现","有","条件","使用","link","多","的","这里","给","：","之前","，","宏","$","调用","优化","会","接口","包含","gazebo","-","感器","常量","此时","重复使用","传递","把","丰富","移动","还","底盘","下","很长","变量","创建","友好","传感器","语法","你","install","数据","格式","ros","了","更","介绍","然后","叫","要","没有","过程","时候","可以","一下","设计","也","xacro","通过","不同","建模","humble","直接","必要","功能","、","传递数据","需要","中","轮子","为了"," ","传感","切分","总体","我们","尺寸","下来","个","安装","甚至","urdf","。","再用","方法","每个","这句","了解","函数","以下","计算","在","a","如果","b","小车","重复","机器","像头","一个","对","编程","升级","可编","描述","动机","接下来","机器人","更为","apt","做","比如","摄像","sudo","就","可","文件格式","一样","好","放到","模型","先","4","—","代码","是","复杂","可编程","写","摄像头","让","没","大家","都"],"title":"XACRO机器人模型优化","title_tokens":["机器","xacro","优化","机器人","模型"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_4","text":"<xacro:property>标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。","text_tokens":["机器",">","一些","一个","把","“","动机","定义","移动","需要","中","_","机器人","轮子"," ","移动机器人","方便","文件","底盘","比如","未来","质量","一行","找","就","<","我们","property",":","尺寸","好","安装","数据","pi","m","这些","不","urdf","加大","模型","3.14159","名为","了","。","修改","”","位置","里边","使用","针对","原本","不会","都","的","时候","可以","，","这样","$","值为","调用","也","括号","xacro","用来","通过","标签","在","很","常量","、","变化"],"title":"常量定义","title_tokens":["常量","定义"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_5","text":"如果需要做数学计算，同样是在“${}”中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 Info 所有数学运算都会转换成浮点数进行，以保证运算精度","text_tokens":["数值","尽量","移动机器人","加法","可能","这","加入","很多","同样","某","保证","怎么","修改","有","的","，","这个","数学计算","所有","$","会","常量","浮点","移动","进行","未来","转换成","数据","了","想不起来","想不起","转换","时候","可以","通过","直接","以","“","需要","中","公式","根本"," ","换成","我们","改成","起来","。","精度","点数","计算","得到","和","浮点数","关系","如果","在","机器","结果","一个","动机","数学","机器人","相对","比如","做","就","来","{","模型","两个","除法","”","位置","是","写","}","info","运算","都"],"title":"数学计算","title_tokens":["计算","数学计算","数学"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_6","text":"机器人的轮子我们也做成宏定义，定义方式是通过这个<xacro:macro>标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。","text_tokens":["一些","定义","像","这","镜像","里边","使用","link","的","这里","，","这个","宏","参数","调用","会","包含","-","出现","把","还","当","方式","了","要","输入","时候","可以","名字","关节","也","xacro","通过","、",">","需要","中","轮子","两句"," ","<","我们","设置","1","同时","。","macro","刚好","函数","这样","名称","做成","和","标签","关系","a","在","b","几个","机器","一个","描述","机器人","比如","就",":","一样","好","来","参数设置","模型","两个","位置","是","用到","区分","记得","joint","c"],"title":"宏定义","title_tokens":["定义","宏"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_7","text":"宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。","text_tokens":["把","机器","一个","对","一些","模块","似曾","定义","仿真","中","接下来","机器人","还"," ","结束","底盘","文件","不是","似曾相识","像","做","接下","流程","相识","我们","嵌套","加入","再","c语言","下来","语言","得","必备","模型","为止","了","。","是不是","include","然后","没有","里边","是","使用","的","这里","另外","可以","，","函数","宏","和","做成","也","调用","这种","到","参数","优化","去","包含","很","某些","于是"],"title":"文件包含","title_tokens":["包含","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_8","text":"","text_tokens":[],"title":"机器人仿真模型配置","title_tokens":["机器","仿真","机器人","配置","模型"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_9","text":"第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。","text_tokens":["每","一个","需要","仿真","平台","一步","第一","因为","一定","。","有","确保","第一步","是","link","的","惯性","，","参数","和","gazebo","必要","碰撞","属性","都","物理"],"title":"完善物理参数","title_tokens":["参数","完善","物理"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_2","text":"第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。","text_tokens":["每","一个","中","为了","为","一步","做","主要","系统","第二步","因为","冗余","所以","得","配置","渲染","urdf","。","添加","颜色","是","link","第二","的","可以","，","这样","和","不同","标签","二步","gazebo","在"],"title":"添加Gazebo标签","title_tokens":["标签","添加","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_10","text":"第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。","text_tokens":["一个","第三","仿真","传动装置","为","理解","传动","配置","了","。","运动","要","是","的","给","可以","，","装置","第三步","三步","电机","joint"],"title":"配置传动装置","title_tokens":["传动装置","传动","装置","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_11","text":"第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。","text_tokens":["一个","那","速度","插件","四步","交给","下","就","控制器","来","了","添加","。","角度","两个","要","差速","是","完成","第四步","的","第四","可以","，","控制","这样","不同","电机","在","gazebo","分配","小车"],"title":"添加控制器插件","title_tokens":["控制器","控制","添加","插件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_12","text":"接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ])","text_tokens":["mbot","all","spawn","_","如何","sim","share","接下","screen","提供","single","provided","index","only","packages",")","0.0","include","true","[","的","，","to","own","robot","#","python","gazebo","-","our","把","run","pythonlaunchdescriptionsource","world","matter","launchdescription","t","join","items","want","py","change","me","ros","doesn",",","spawner","了","we","path","executable","os","节点","topic","package","force","'",".","yaw","name","功能","---","spwan","load","需要","the","中","directory","neighborhood"," ","get","use","考虑","includelaunchdescription","<","y","them","下来","/","urdf","。","really","output","publisher","enabled","return","pkg","where","(","pose","a","file","]","set","be","一个","into","def","接下来","by","generate","ament","=","sure","就","you","from",":","arguments","if","import","learning","val","!","make","state","{","模型","time","launch","z","worlds","sources","}","have","用到","entity","correctly","加载","到","actions","description","node","x"],"title":"构建仿真环境","title_tokens":["仿真","环境","构建"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_13","text":"万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard Attention 虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 通过键盘上的“i、j、，、l”几个按键，就可以控制机器人前后左右运动啦。 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。","text_tokens":["_","bashrc","接下","左右","命令","keyboard","很多","echo","运动","0","小海龟","虚拟","的","第一句","：","，","啦","$","虚拟机","gazebo","j","第二句","此时","第一","run","上","vgpu10","流程","py","attention","键盘","twist","启动","基本","了","不过","时","过程","加速","节点","环境","可以","前后","一句","~","按键","通过",".","\"","、","整个","二句",">","比","load","硬件","“","需要","仿真","中","海龟","两句"," ","已经","万事","时刻","我们","下来","前后左右","硬件加速","/","urdf","有点像","。","export","有点","ros2","控制","以上","teleop","和","俱备","小海","svga","l","几个","关闭","机器","奇迹","into","接下来","机器人","i","=","就","learning","launch","”","复杂","第二","见证","就是","运行","万事俱备"],"title":"机器人运动仿真","title_tokens":["机器","仿真","运动","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#ignitiongazebo","text":"随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为 Ignition ，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 运行成功后，会打开Ignition的仿真界面和Rviz上位机，我们可以看到RGBD相机仿真后发布的图像数据。 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/","text_tokens":["界面","ignitionrobotics","_","上位","为","新一代","新","版本","机","网站","渲染","成功","rgbd","有","图像","多","的","，","度","$","相机","会","gazebo","-","org","打开","仿真器","后","上","ign","看到","ignition","www","命名","install","py","参考","发布","数据","bridge","ros","更","都","较大","可以","一下","也","官方","humble",".","仿真","流畅"," ","我们","rviz","进步","/","。","ros2","试一下","和","官方网站","随着","在","一代","技术","从","apt","不妨","平台","不断","sudo","真器",":","camera","信息","来","launch","效果","官方网","迭代","运行","大家","demos","变化"],"title":"Ignition：下一代Gazebo","title_tokens":["ignition","一代","gazebo","：","下一代"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_14","text":"learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["geometry","controller","for","max","mbot","defining","false","_","interface","footprint","length","left","12","sphere",")","include","0","true","fixed","simpletransmission","+","link","so","2","20","rpy","to","robot","5","$","version","base","in","cmd","gazebo","-","org","hardware","rate","continuous","matrix","list","front","0.05","drive","property","www","separation","box","wheel","0.18","command","diameter","mass","black","cylinder","ros","tf","0.015","topic","joints","rgba","gray","prefix","vel","xml","iyz","xacro","http","mechanicalreduction","back","hardwareinterface","source",".","--","name","\"","find","origin","blue","ixy","used","type",">","0.2","turngravityoff","publish","the"," ","3","frame","actuator","0.025","this","params","<","y","and","iyy","diff","plugin","r","caster","reference","odom","1","/","urdf","velocityjointinterface","0.16","*","0.20","colors","differential","collision","libgazebo","macro","xmlns","axis","h","(","is","trans","filename","color","odometry","3.1415926","0.19","material","1.0","yellow","inertial","transmission","0.95","0.001","=","parent","important","ixz","motor","size","acceleration","0.06","ixx",":","torque","radius","0.4","?","visual","0.75","learning","!","m","value","{","right","child","z","xyz","wiki","}","reflect","30","izz","update","inertia","joint","x","pi"],"title":"附录：机器人完整模型","title_tokens":["机器","附录","机器人","完整","：","模型"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/","text":"Rviz：三维可视化显示平台 大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾—— Rviz ，一款 三维可视化显示 的神器。 Rviz三维可视化平台 机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。 Rviz介绍 一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。 运行方法 启动一个终端，使用如下命令即可启动： $ ros2 run rviz2 rviz2 彩色相机仿真与可视化 摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。 仿真插件配置 关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 learning_gazebo/urdf/sensers/camera_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"camera\" name= \"camera_node\" > <update_rate> 30.0 </update_rate> <camera name= \"head\" > <horizontal_fov> 1.3962634 </horizontal_fov> <image> <width> 1280 </width> <height> 720 </height> <format> R8G8B8 </format> </image> <clip> <near> 0.02 </near> <far> 300 </far> </clip> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.007 </stddev> </noise> </camera> <plugin name= \"gazebo_camera\" filename= \"libgazebo_ros_camera.so\" > <ros> <!-- <namespace>stereo</namespace> --> <remapping> ~/image_raw:=image_raw </remapping> <remapping> ~/camera_info:=camera_info </remapping> </ros> <camera_name> ${prefix} </camera_name> <frame_name> ${prefix}_link </frame_name> <hack_baseline> 0.2 </hack_baseline> </plugin> </sensor> </gazebo> 主要配置项如下： <sensor>标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 <camera>标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 <plugin>标签：加载摄像头仿真插件 运行仿真环境 模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py 可以使用命令行看下仿真出来的图像话题： 图像数据可视化 我们使用Rviz可视化显示图像信息，先来启动Rviz： $ ros2 run rviz2 rviz2 启动成功后，在左侧Displays窗口中点击“Add”，找到Image显示项，OK确认后就可以加入显示列表啦，然后配置好该显示项订阅的图像话题，就可以顺利看到机器人的摄像头图像啦。 三维相机仿真与可视化 二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。 仿真插件配置 三维相机使用的Gazebo插件也是libgazebo_ros_camera.so，配置方法如下： learning_gazebo/urdf/sensers/kinect_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"depth\" name= \"${prefix}\" > <always_on> true </always_on> <update_rate> 15.0 </update_rate> <pose> 0 0 0 0 0 0 </pose> <camera name= \"kinect\" > <horizontal_fov> ${60.0*M_PI/180.0} </horizontal_fov> <image> <format> R8G8B8 </format> <width> 640 </width> <height> 480 </height> </image> <clip> <near> 0.05 </near> <far> 8.0 </far> </clip> </camera> <plugin name= \"${prefix}_controller\" filename= \"libgazebo_ros_camera.so\" > <ros> <!-- <namespace>${prefix}</namespace> --> <remapping> ${prefix}/image_raw:=rgb/image_raw </remapping> <remapping> ${prefix}/image_depth:=depth/image_raw </remapping> <remapping> ${prefix}/camera_info:=rgb/camera_info </remapping> <remapping> ${prefix}/camera_info_depth:=depth/camera_info </remapping> <remapping> ${prefix}/points:=depth/points </remapping> </ros> <camera_name> ${prefix} </camera_name> <frame_name> ${prefix}_frame_optical </frame_name> <hack_baseline> 0.07 </hack_baseline> <min_depth> 0.001 </min_depth> <max_depth> 300.0 </max_depth> </plugin> </sensor> </gazebo> 运行仿真环境 使用如下命令启动仿真环境： $ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py 启动成功后，可以看下当前的话题列表，已经产生了三维相机的相关话题。 点云数据可视化 运行Rviz： $ ros2 run rviz2 rviz2 同样的流程，点击Add，添加PointCloud2，设置订阅的点云话题，还要配置Rviz的参考系是odom，就可以看到点云数据啦，每一个点都是由xyz位置和rgb颜色组成。 激光雷达仿真与可视化 除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。 仿真插件配置 雷达使用的Gazebo插件是libgazebo_ros_ray_sensor.so，配置方法如下： learning_gazebo/urdf/sensers/lidar_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"ray\" name= \"rplidar\" > <update_rate> 20 </update_rate> <ray> <scan> <horizontal> <samples> 360 </samples> <resolution> 1 </resolution> <min_angle> -3 </min_angle> <max_angle> 3 </max_angle> </horizontal> </scan> <range> <min> 0.10 </min> <max> 30.0 </max> <resolution> 0.01 </resolution> </range> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.01 </stddev> </noise> </ray> <plugin name= \"gazebo_rplidar\" filename= \"libgazebo_ros_ray_sensor.so\" > <ros> <namespace> / </namespace> <remapping> ~/out:=scan </remapping> </ros> <output_type> sensor_msgs/LaserScan </output_type> </plugin> </sensor> </gazebo> 运行仿真环境 使用如下命令启动仿真环境： $ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py 在话题列表中也可以看到激光雷达啦。 点云数据可视化 启动Rviz： $ ros2 run rviz2 rviz2 点击Add，选择Laserscan，然后配置订阅的话题名，rviz的固定坐标系依然是odom，此时就可以看到激光点啦。 Rviz vs Gazebo 好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下： Gazebo是 仿真平台 ，核心功能是 创造数据 ，我们没有机器人或者传感器，它可以帮我们做一个虚拟的； Rviz是 可视化平台 ，核心功能是 显示数据 ，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。 参考链接 https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":["namespace","一些","noise","如何","ok","一脸","horizontal","非常","想","畅想","包括","使用","虚拟","多","的","20","一分","这种","相机","-","名","先来","rate","mean","由","消息","方便","上","out","format","www","内容","range","涉及","depth","参考","发布","数据","不","了","不过","过程","满意","除了","prefix","环境","sensers","的话","可以","了然","全都","一位","也","官方",".","具体","hack","0.10","一款","\"","世界","add","optical","“","真实","180.0","已经","com","3","本","什么样","岂","眼中","sensor","自带","1","*","雷达","intel","希望","肯定","熟悉","拍摄","计算","讲","0.007","等","一个","描述","路径","还是","可贵","做","比如","就","理解","激光雷达","remapping","camera","按照","learning","当然","来","!","先","两个","位置","图形化","效果","640","？","与","坐标","一目了然","加载","拭目","node","一种","什么","stereo","工具","stddev","分辨率","displays","controller","窗口","范畴","场景","激光","这","命令","只要","很多","或者","顺利","获取","配置","渲染","订阅","外部环境","看","rviz2","realsense","找到","选择","不少","手上","给","开发","参数","点击","去","gazebo","感器","0.02","run","每","stereolabs","二维","搞定","r8g8b8","巧妇","ray","0.05","clip","类型","py","ros","框架","更","然后","左侧","相关","汽车","自由","确认","resolution","坐标系","--","、",">","0.2","需要","far","always","以待","传感","不是","点云","<","设置","255","再","image","所以","odom","一目","一分钱","提高","720","了解","有没有","300","这样","和","在","filename","嘉宾","分钱","像头","动机","into","平台","=","混淆","知道","导航","懵","拭目以待","width","模型","代码","试试","创造","info","重量级","pi","效率","分析","还有","mbot","480","pointcloud2","新","分辨","加入","机械","各种","机","同样","rgbd","噪音","有","0","参考系","可视化","：","，","啦","各样","$","height","玩起","会","github","此时","产生","0.01","后","head","用","流程","还要","传感器","baseline","60.0","命名","大大","格式","自己","只是","但","人","核心","时候","一句","~","通过","name","帮","各种各样","type","哪些","问","仿真","lidar"," ","玩起来","最为","frame","固定","强调","项","想不到","rviz","可视","plugin","reference","呢","能","urdf","问题","辨率","一个点","libgazebo","过瘾","output","常备","标签","scan","类似","并且","机器","范围","gaussian","qt","价格比","从","当前","出来","图形","0.001","摄像","体感","30.0","laserscan",":","kinect","能够","rgb","；","{","1.3962634","points","}","相信","摄像头","话","打造","彩色","到","众多","叫做","fov","运行","都","https","终端","神器","near","才","max","_","上位","大大提高","移动机器人","常用","话题","链接","试一试","不能","提供","成功","docs","它","0.0","运动","true","自主","巧妇难为无米之炊","so","link","层面","图像","这里","好该","这个","自动","不到","angle","300.0","usb","周边","把","出厂","对照","移动","组成","案例","依然","下","看到","主要","rplidar","你","会用","启动","添加","介绍","没有","min","设计","360","xacro","用来","1280","功能","8.0","vs","load","samples","说明","中","插件","三维","msgs","raw","长","对应","我们","等等","编码","外部","价格","起来","/","关于","。","laser","是不是","过","方法","颜色","很难","15.0","基于","ros2","开放","开放式","pose","如果","命令行","数字","装","0.07","几个","对","样","只有","机器人","内部","臂","难为","快速","么","如下","软件","啥","好","信息","这些","m","launch","不想","驾驶","—","”","on","xyz","这幅","是","列表","显示","规划","update","即可","点","重量","大家","一堆","就是","不用","某些","量级"],"title":"Rviz","title_tokens":["rviz"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz","text":"大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾—— Rviz ，一款 三维可视化显示 的神器。","text_tokens":["机器","像头","一个","什么","神器","范畴","中","机器人","如何"," ","三维","看到","本","摄像","这","什么样","就","眼中","我们","rviz","可视","涉及","能够","呢","ros","畅想","了","。","问题","过","介绍","—","没有","是","摄像头","图像","可视化","的","显示","？","有没有","，","拍摄","重量级","一位","到","讲","重量","大家","一款","世界","嘉宾","量级"],"title":"Rviz：三维可视化显示平台","title_tokens":["rviz","可视","平台","可视化","三维","显示","："]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_1","text":"机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。","text_tokens":["什么","还有","才","场景","激光","大大提高","移动机器人","一脸","很多","机械","各种","渲染","看","运动","0","自主","层面","图像","可视化","的","给","这里","开发","，","各样","相机","去","感器","周边","把","移动","搞定","看到","传感器","你","内容","大大","数据","自己","不","只是","但","过程","人","环境","可以","了然","全都","设计","坐标系","通过","用来","功能","各种各样","、","一款","哪些","问","需要","中"," ","传感","三维","长","岂","我们","等等","rviz","255","再","可视","所以","一目","雷达","。","颜色","很难","提高","希望","肯定","计算","这样","和","如果","类似","在","数字","机器","像头","动机","样","描述","路径","从","机器人","内部","臂","出来","快速","么","做","比如","摄像","理解","就","激光雷达","知道","导航","软件","啥","信息","当然","懵","这些","模型","位置","这幅","效果","是","规划","摄像头","？","坐标","一目了然","到","众多","就是","一堆","效率","都","分析"],"title":"Rviz三维可视化平台","title_tokens":["rviz","可视","平台","可视化","三维"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_2","text":"一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。","text_tokens":["机器","一个","对","工具","出厂","只有","说明","qt","中","插件","机器人","上位","消息"," ","平台","常用","话题","图形","看到","方便","做","项","就","对应","想不到","我们","只要","rviz","很多","或者","新","按照","可视","机","自带","发布","数据","自己","ros","不","它","框架","想","。","了","添加","更","有","没有","图形化","是","效果","满意","显示","可视化","话","的","核心","基于","打造","多","开发","可以","，","一句","开放","这个","开放式","不到","也","官方","如果","在","功能","某些"],"title":"Rviz介绍","title_tokens":["介绍","rviz"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_1","text":"启动一个终端，使用如下命令即可启动： $ ros2 run rviz2 rviz2","text_tokens":["，","即可","一个","终端","如下","命令","$","run","rviz2","使用"," ","：","ros2","启动"],"title":"运行方法","title_tokens":["方法","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_2","text":"摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。","text_tokens":["机器","像头","先来","机器人","传感","常用","上","最为","摄像","传感器","我们","了","。","是","摄像头","的","给","肯定","，","感器","装","一种"],"title":"彩色相机仿真与可视化","title_tokens":["与","彩色","仿真","可视","相机","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_3","text":"关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 learning_gazebo/urdf/sensers/camera_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"camera\" name= \"camera_node\" > <update_rate> 30.0 </update_rate> <camera name= \"head\" > <horizontal_fov> 1.3962634 </horizontal_fov> <image> <width> 1280 </width> <height> 720 </height> <format> R8G8B8 </format> </image> <clip> <near> 0.02 </near> <far> 300 </far> </clip> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.007 </stddev> </noise> </camera> <plugin name= \"gazebo_camera\" filename= \"libgazebo_ros_camera.so\" > <ros> <!-- <namespace>stereo</namespace> --> <remapping> ~/image_raw:=image_raw </remapping> <remapping> ~/camera_info:=camera_info </remapping> </ros> <camera_name> ${prefix} </camera_name> <frame_name> ${prefix}_link </frame_name> <hack_baseline> 0.2 </hack_baseline> </plugin> </sensor> </gazebo> 主要配置项如下： <sensor>标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 <camera>标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 <plugin>标签：加载摄像头仿真插件","text_tokens":["namespace","stereo","near","noise","stddev","分辨率","_","horizontal","分辨","提供","配置","噪音","0.0","使用","so","link","图像","的","给","：","，","这个","$","参数","height","gazebo","感器","0.02","对照","rate","mean","head","r8g8b8","主要","传感器","clip","baseline","format","命名","类型","格式","ros","介绍","prefix","自由","sensers","~","xacro","1280",".","hack","name","\"","--","type",">","0.2","需要","仿真","far","插件","传感"," ","frame","raw","项","对应","<","我们","设置","编码","sensor","image","plugin","reference","/","关于","urdf","。","方法","辨率","libgazebo","720","300","0.007","标签","filename","等","像头","范围","gaussian","描述","=","摄像","如下","remapping","30.0",":","camera","learning","!","width","{","模型","1.3962634","代码","}","摄像头","info","update","加载","fov","叫做","大家","node","都"],"title":"仿真插件配置","title_tokens":["仿真","配置","插件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_4","text":"模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py 可以使用命令行看下仿真出来的图像话题：","text_tokens":["把","像头","load","mbot","into","仿真","中","_","以待"," ","已经","出来","下","话题","看到","摄像","命令","我们","rviz","不能","camera","好","py","learning","信息","配置","拭目以待","成功","能","模型","launch","。","看","使用","摄像头","图像","的","：","ros2","可以","，","啦","$","拭目","在","并且","gazebo",".","命令行"],"title":"运行仿真环境","title_tokens":["仿真","环境","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_5","text":"我们使用Rviz可视化显示图像信息，先来启动Rviz： $ ros2 run rviz2 rviz2 启动成功后，在左侧Displays窗口中点击“Add”，找到Image显示项，OK确认后就可以加入显示列表啦，然后配置好该显示项订阅的图像话题，就可以顺利看到机器人的摄像头图像啦。","text_tokens":["机器","run","像头","displays","“","后","窗口","中","机器人"," ","ok","话题","看到","摄像","项","就","我们","rviz","加入","可视","顺利","image","信息","配置","来","成功","先","启动","订阅","。","”","然后","rviz2","左侧","找到","使用","列表","显示","图像","可视化","的","摄像头","：","ros2","好该","可以","，","啦","确认","$","点击","在","add"],"title":"图像数据可视化","title_tokens":["可视化","可视","数据","图像"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_6","text":"二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。","text_tokens":["像头","二维","仿真","价格比","传感","玩起来","常用","可贵","三维","比如","体感","摄像","点云","传感器","就","我们","外部","价格","或者","kinect","获取","起来","数据","不","想","外部环境","。","不想","不过","一分钱","intel","realsense","试试","不少","摄像头","过瘾","的","环境","一分","可以","，","这种","也","通过","相机","玩起","感器","usb","不用","分钱"],"title":"三维相机仿真与可视化","title_tokens":["与","仿真","可视","相机","可视化","三维"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_7","text":"三维相机使用的Gazebo插件也是libgazebo_ros_camera.so，配置方法如下： learning_gazebo/urdf/sensers/kinect_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"depth\" name= \"${prefix}\" > <always_on> true </always_on> <update_rate> 15.0 </update_rate> <pose> 0 0 0 0 0 0 </pose> <camera name= \"kinect\" > <horizontal_fov> ${60.0*M_PI/180.0} </horizontal_fov> <image> <format> R8G8B8 </format> <width> 640 </width> <height> 480 </height> </image> <clip> <near> 0.05 </near> <far> 8.0 </far> </clip> </camera> <plugin name= \"${prefix}_controller\" filename= \"libgazebo_ros_camera.so\" > <ros> <!-- <namespace>${prefix}</namespace> --> <remapping> ${prefix}/image_raw:=rgb/image_raw </remapping> <remapping> ${prefix}/image_depth:=depth/image_raw </remapping> <remapping> ${prefix}/camera_info:=rgb/camera_info </remapping> <remapping> ${prefix}/camera_info_depth:=depth/camera_info </remapping> <remapping> ${prefix}/points:=depth/points </remapping> </ros> <camera_name> ${prefix} </camera_name> <frame_name> ${prefix}_frame_optical </frame_name> <hack_baseline> 0.07 </hack_baseline> <min_depth> 0.001 </min_depth> <max_depth> 300.0 </max_depth> </plugin> </sensor> </gazebo>","text_tokens":["namespace","near","controller","max","_","480","horizontal","配置","true","0","使用","so","link","的","：","，","$","相机","height","300.0","gazebo","rate","r8g8b8","0.05","clip","baseline","format","60.0","depth","ros","min","prefix","sensers","也","xacro",".","hack","--","8.0","name","\"","type",">","optical","always","far","插件"," ","180.0","三维","frame","raw","<","sensor","image","plugin","reference","/","urdf","*","方法","libgazebo","15.0","pose","filename","0.07","0.001","=","如下","remapping",":","camera","kinect","rgb","learning","m","width","!","{","points","on","是","}","info","640","update","fov","pi"],"title":"仿真插件配置","title_tokens":["仿真","配置","插件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_8","text":"使用如下命令启动仿真环境： $ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py 启动成功后，可以看下当前的话题列表，已经产生了三维相机的相关话题。","text_tokens":["产生","load","mbot","into","仿真","后","_"," ","当前","话题","下","已经","三维","命令","如下","py","learning","成功","rgbd","启动","launch","了","看","。","相关","使用","列表","的","环境","：","ros2","可以","，","$","相机",".","gazebo"],"title":"运行仿真环境","title_tokens":["仿真","环境","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_9","text":"运行Rviz： $ ros2 run rviz2 rviz2 同样的流程，点击Add，添加PointCloud2，设置订阅的点云话题，还要配置Rviz的参考系是odom，就可以看到点云数据啦，每一个点都是由xyz位置和rgb颜色组成。","text_tokens":["run","每","一个","由","组成"," ","话题","看到","点云","流程","还要","pointcloud2","就","设置","rviz","参考","rgb","同样","配置","odom","数据","订阅","。","添加","参考系","位置","rviz2","xyz","颜色","一个点","是","的","：","ros2","可以","，","啦","$","和","点击","运行","都","add"],"title":"点云数据可视化","title_tokens":["点云","可视","数据","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_10","text":"除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。","text_tokens":["机器","像头","动机","移动","机器人","激光","传感","移动机器人","三维","摄像","传感器","试一试","激光雷达","我们","很多","来","雷达","。","驾驶","包括","汽车","是","除了","摄像头","的","，","和","自动","也","常备","相机","感器"],"title":"激光雷达仿真与可视化","title_tokens":["与","雷达","激光雷达","仿真","可视","激光","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_11","text":"雷达使用的Gazebo插件是libgazebo_ros_ray_sensor.so，配置方法如下： learning_gazebo/urdf/sensers/lidar_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"ray\" name= \"rplidar\" > <update_rate> 20 </update_rate> <ray> <scan> <horizontal> <samples> 360 </samples> <resolution> 1 </resolution> <min_angle> -3 </min_angle> <max_angle> 3 </max_angle> </horizontal> </scan> <range> <min> 0.10 </min> <max> 30.0 </max> <resolution> 0.01 </resolution> </range> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.01 </stddev> </noise> </ray> <plugin name= \"gazebo_rplidar\" filename= \"libgazebo_ros_ray_sensor.so\" > <ros> <namespace> / </namespace> <remapping> ~/out:=scan </remapping> </ros> <output_type> sensor_msgs/LaserScan </output_type> </plugin> </sensor> </gazebo>","text_tokens":["type",">","namespace","max","0.01","noise","rate","gaussian","lidar","samples","mean","stddev","插件","_"," ","3","msgs","=","ray","out","horizontal","rplidar","<","如下","remapping","30.0","laserscan","sensor",":","range","plugin","learning","reference","配置","1","ros","/","urdf","{","雷达","0.0","方法","使用","是","}","so","link","libgazebo","min","prefix","的","output","20","：","sensers","update","0.10","，","~","resolution","$","360","xacro","angle","scan",".","gazebo","-","filename","name","\""],"title":"仿真插件配置","title_tokens":["仿真","配置","插件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_12","text":"使用如下命令启动仿真环境： $ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py 在话题列表中也可以看到激光雷达啦。","text_tokens":["load","mbot","into","仿真","中","_","激光"," ","话题","看到","命令","激光雷达","如下","py","learning","启动","launch","雷达","laser","。","使用","列表","环境","：","ros2","可以","啦","$","也",".","gazebo","在"],"title":"运行仿真环境","title_tokens":["仿真","环境","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_13","text":"启动Rviz： $ ros2 run rviz2 rviz2 点击Add，选择Laserscan，然后配置订阅的话题名，rviz的固定坐标系依然是odom，此时就可以看到激光点啦。","text_tokens":["run","名","激光"," ","话题","依然","看到","固定","就","rviz","laserscan","配置","odom","启动","订阅","。","然后","rviz2","选择","是","的","：","ros2","可以","，","坐标","啦","$","点","坐标系","点击","此时","add"],"title":"点云数据可视化","title_tokens":["点云","可视","数据","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz-vs-gazebo","text":"好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下： Gazebo是 仿真平台 ，核心功能是 创造数据 ，我们没有机器人或者传感器，它可以帮我们做一个虚拟的； Rviz是 可视化平台 ，核心功能是 显示数据 ，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。","text_tokens":["一些","常用","这","很多","或者","非常","它","有","巧妇难为无米之炊","使用","虚拟","手上","可视化","的","这里","：","，","啦","不到","会","gazebo","感器","案例","用","下","巧妇","流程","传感器","会用","数据","自己","启动","了","不过","没有","核心","环境","时候","的话","可以","也","通过","具体","帮","功能","仿真","真实","传感","已经"," ","不是","强调","我们","rviz","可视","再","所以","。","是不是","方法","了解","熟悉","和","讲","如果","在","几个","机器","对","一个","机器人","平台","还是","难为","做","混淆","就","软件","好","；","信息","来","两个","是","相信","创造","显示","到","大家"],"title":"Rviz vs Gazebo","title_tokens":["vs"," ","gazebo","rviz"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_14","text":"https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":["rviz","stereolabs",":","www","rviz2","github",".","com"," ","docs","https","/","ros2"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/","text":"RQT：模块化可视化工具 ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具—— rqt 。 rqt介绍 正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，一些常用的功能如下： 日志显示 图像显示 发布话题数据/调用服务请求 绘制数据曲线 数据包管理 节点可视化 参考资料 https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":["一些","工具","模块","界面","场景","常用","话题","可能","en","命令","很多","提供","docs","日志","它","强大","实现","rqt","服务","里边","请求","使用","可视化","图像","的","：","开发","，","这个","$","调用","会","-","此时","org","曲线","进行","下","参考资料","命名","install","参考","发布","数据","ros","启动","了","更","不过","介绍","然后","节点","都","的话","另外","concepts","可以","html","一句","也","通过","humble","具体",".","有些","功能","指令","只","需要","模块化","中"," ","已经","我们","rviz","console","可视","tutorials","安装","觉得","简单","/","。","有点","每个","难免会","https","基于","难免","绘制","管理","小","这样","和","在","类似","很","像头","一个","qt","apt","using","比如","摄像","sudo","就","前","如下",":","一样","来","—","麻烦","about","是","而","显示","摄像头","资料","用到","加载","操作","数据包","正如","一种"],"title":"Rqt","title_tokens":["rqt"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt","text":"ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具—— rqt 。","text_tokens":["一些","只","一个","工具","模块","像头","需要","模块化","中","场景"," ","已经","下","可能","比如","摄像","就","我们","rviz","可视","提供","一种","ros","觉得","简单","了","更","强大","不过","。","有点","—","rqt","麻烦","使用","难免会","显示","可视化","摄像头","的","图像","难免","的话","另外","用到","，","操作","会","很","有些","功能","此时"],"title":"RQT：模块化可视化工具","title_tokens":["工具","模块","模块化","rqt","可视","可视化","："]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt_1","text":"正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，一些常用的功能如下：","text_tokens":["一些","一个","工具","界面","模块","需要","qt","apt"," ","进行","功能","常用","sudo","就","命令","前","我们","rviz","很多","如下","命名","可视","一样","安装","install","来","ros","它","启动","了","。","实现","然后","每个","rqt","里边","是","使用","而","可视化","的","基于","：","开发","可以","，","一句","这个","小","这样","$","和","也","加载","通过","humble","在","-","类似","具体","正如","指令","都"],"title":"rqt介绍","title_tokens":["介绍","rqt"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_1","text":"","text_tokens":[],"title":"日志显示","title_tokens":["日志","显示"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_2","text":"","text_tokens":[],"title":"图像显示","title_tokens":["显示","图像"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_3","text":"","text_tokens":[],"title":"发布话题数据/调用服务请求","title_tokens":["调用","服务","请求","话题","发布","数据","/"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_4","text":"","text_tokens":[],"title":"绘制数据曲线","title_tokens":["曲线","数据","绘制"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_5","text":"","text_tokens":[],"title":"数据包管理","title_tokens":["数据包","数据","管理"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_6","text":"","text_tokens":[],"title":"节点可视化","title_tokens":["节点","可视","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_7","text":"https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":["console",":","rqt","org","about","tutorials","humble",".","ros","-"," ","using","en","docs","https","/","concepts","html"],"title":"参考资料","title_tokens":["参考","资料","参考资料"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/","text":"资源汇总 常用框架 自主导航 比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/ 自动驾驶 自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/ 路径规划 此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/ 机器人学 ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。 视频课程 斯坦福大学公开课 —— 机器人学 (https://www.bilibili.com/video/av4506104/){:target=\"_blank\"} 台大机器人学之运动学 (https://www.bilibili.com/video/BV1v4411H7ez){:target=\"_blank\"} Self-Driving Cars with ROS2 & Autoware (https://www.youtube.com/watch?v=XTmlhvlmcf8&list=PLL57Sz4fhxLpCXgN0lvCF7aHAlRA5FoFr){:target=\"_blank\"} 古月学院 (https://class.guyuehome.com/){:target=\"_blank\"} 常用链接 ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":["此外","公开","工具","模块","还有","开课","_","学院","移动机器人","常用","完整","经典","《","en","这","documentation","系统","navigation","链接","很多","机械","非常","推荐","各种","版本","提供","居","阅读","必备","视频","docs","index",")","bv1v4411h7ez","感知","运动","实现","有","gazebosim","找到","选择","自主","使用","修炼","之外","多","的","内功","2","：","开发","，","这个","称为","target","典型","自动","古月","会","应用","github","汇总","行业","包含","-","gazebo","算法","碰撞","driving","org","斯坦福大学","丰富","机器人学","移动","watch","video","技能","上","进行","list","classic","中文","商业","roscon","self","分拣","经典著作","www","xtmlhvlmcf8","内容","基本功能","参考","gitlab","自己","ros","moveit","不","福大","框架","被","基本","斯坦福","了","更","要","相关","结合","著名","知识","都","商业化","视觉","公开课","可以","html","除此","仔细阅读","之一","感兴趣","也","ubuntu","http","这套","humble",".","理论","导论","功能","每一","、","\"","感兴","社区","中","工程师","具备"," ","碰撞检测","com","情况","》","最为","至于","对应","我们","guyuehome","人手","仔细","理论知识","之","/","。","auto","blank","v","&","autoware","https","台大","ros2","运动学","控制","兴趣","一本","和","(","本书","检测","bilibili","在","如果","除此之外","课程","等","几个","机器","一个","对","动机","路径","任何","机器人","autowarefoundation","大学","臂","基本功","快速","=","当今","比如","热门","资源","就","导航",":","?","好","工程","cn","著作","得","io","这些","{","导航系统","重在","书籍","驾驶","robots","—","代码","是","wiki","}","autowareauto","规划","自身","class","with","youtube","实操","学习","cars","pll57sz4fhxlpcxgn0lvcf7ahalra5fofr","即便","人学","av4506104","大家","一种"],"title":"资源汇总","title_tokens":["资源","汇总"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_1","text":"","text_tokens":[],"title":"资源汇总","title_tokens":["资源","汇总"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_2","text":"","text_tokens":[],"title":"常用框架","title_tokens":["常用","框架"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_3","text":"比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/","text_tokens":["机器","动机","移动","任何","中","org","机器人","具备"," ","移动机器人","上","完整","基本功","快速","进行","比如","系统","navigation","链接","我们","导航",":","各种","内容","基本功能","提供","好","参考","自己","ros","不","/","导航系统","框架","基本","了","。","实现","要","代码","相关","自主","使用","https","的","：","ros2","开发","可以","，","这个","和","也","即便","会","这套","应用","在","如果",".","大家","算法","功能","都"],"title":"自主导航","title_tokens":["导航","自主"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_4","text":"自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/","text_tokens":["感兴","机器","一个","对","模块","丰富","社区","中","org","机器人","autowarefoundation"," ","功能","最为","当今","这","系统","热门","商业","几个","链接","很多","非常",":","www","参考","gitlab","io","ros","/","框架","。","了","感知","auto","驾驶","有","—","实现","是","著名","autoware","autowareauto","规划","https","商业化","的","：","可以","，","控制","这个","兴趣","之一","自动","也","典型","和","感兴趣","应用","行业","在","包含","大家","如果",".","等","一种","、"],"title":"自动驾驶","title_tokens":["自动","驾驶"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_5","text":"此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/","text_tokens":["此外","还有","中","org","臂","碰撞检测","功能"," ","经典","这","链接","分拣","机械","等","非常","内容",":","ros","moveit","/","框架","。","更","运动","相关","找到","使用","是","规划","https","多","视觉","的","可以","，","这个","也","检测","在",".","大家","碰撞","都","、"],"title":"路径规划","title_tokens":["路径","规划"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_6","text":"ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。","text_tokens":["机器","工具","机器人学","工程师","机器人","技能"," ","情况","》","经典","《","比如","中文","至于","就","对应","人手","推荐","经典著作","版本","仔细","理论知识","工程","阅读","著作","得","必备","ros","这些","重在","被","书籍","。","有","相关","选择","结合","是","修炼","之外","知识","自身","内功","的","实操","开发","可以","，","学习","称为","除此","一本","仔细阅读","本书","人学","理论","导论","大家","除此之外","每一","都"],"title":"机器人学","title_tokens":["机器人","机器","机器人学","人学"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_7","text":"斯坦福大学公开课 —— 机器人学 (https://www.bilibili.com/video/av4506104/){:target=\"_blank\"} 台大机器人学之运动学 (https://www.bilibili.com/video/BV1v4411H7ez){:target=\"_blank\"} Self-Driving Cars with ROS2 & Autoware (https://www.youtube.com/watch?v=XTmlhvlmcf8&list=PLL57Sz4fhxLpCXgN0lvCF7aHAlRA5FoFr){:target=\"_blank\"} 古月学院 (https://class.guyuehome.com/){:target=\"_blank\"}","text_tokens":["机器","公开","斯坦福大学","driving","机器人学","开课","watch","video","机器人","_","大学","学院"," ","com","=","list","self","xtmlhvlmcf8","guyuehome",":","www","?","之","/","福大","{","斯坦福",")","bv1v4411h7ez","运动","—","blank","v","&","autoware","}","class","台大","with","youtube","ros2","运动学","公开课","target","cars","pll57sz4fhxlpcxgn0lvcf7ahalra5fofr","(","古月","人学","bilibili","av4506104",".","-","\"","https"],"title":"视频课程","title_tokens":["视频","课程"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_8","text":"ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":[" ","com","en","documentation","classic","roscon","guyuehome",":","www","居","cn","docs","ros","/","index","robots","gazebosim","wiki","https","2","：","ros2","html","ubuntu","古月","http","github","humble",".","gazebo","org"],"title":"常用链接","title_tokens":["链接","常用"]}]}