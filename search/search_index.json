{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的电气时代。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的数字时代，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发，智能机器人时代正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。 教程链接 课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 博客泡泡： https://www.guyuehome.com/ 教程问答： https://www.guyuehome.com/bubble/index 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 参考资料： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["，","要求","拉开序幕","图文","教程","驱动器","控制","劳动","劳动力","设备","送餐","俗称","人类","驱动","检测","感器","三个","和","局部","井喷","动力","载体","com","pan","ai","出现","参考","exc6","只能","_","最为","operating","主要","拉开","提出","狗","更加","呈","经历","问答","自动","www","、","工业生产","家庭","应用","这是","工业","快速","十年","agv","必将","/","1dvxugmhxlxnsnfdezuxw0g","算机","视频","服务","汽车","—","源码","软件","重要","机器","此时","2015","book","操作","github","类型","七八十","动作","缺少","序幕","减速机","控制器","爆发","七八","。","七八十年","人工智能","完全","gitee","机器人","八十年","工厂","电气","思考","大","按照","伺服电机","而言","环境","index","数字","多","21","时期","释放","tutorials","提取","后","四足","八十","class","技术","不断","过程","自主",":","传感器","guyuehome","baidu","system","视觉","伺服","但是","人工","感知","博客","驾驶","也","业生","等","robot","参考资料","泡泡","由示","发展","主角","有限","智能","热点","这","年","：","系统","是","链接","传感","最佳","逐渐","就是",".","2000","ros2","码","不过","不断丰富","太","对","丰富","状","的","智能化","高","更","仿生","bubble","s","层面","我们","操作系统","之后","成为","之一","随着","没有","于","关注","时代","并","资料","依然","年前","教器","了","电机","课程","计算机","操控"," ","https","开发","减速","前夜","执行","正式","横跨","计算","生产","命令","帮助"],"title":"引言","title_tokens":["引言"]},{"location":"#_1","text":"课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 博客泡泡： https://www.guyuehome.com/ 教程问答： https://www.guyuehome.com/bubble/index 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 参考资料： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["www","index","tutorials","图文","21","提取","教程","bubble","s","class",":","/","guyuehome","1dvxugmhxlxnsnfdezuxw0g","视频","baidu","源码","博客","book","资料","com","pan","github","课程","泡泡","参考","参考资料"," ","exc6","https","：","_","链接","gitee",".","ros2","码","问答"],"title":"教程链接","title_tokens":["教程","链接"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["交流学习","，","究其","众多","ros","内容","人才","本","及","高质量","明者","声明","传播","有限公司","万字","不","不得","和","单位","com","ai","课件","均","销售","学习","华语","知名","社区","致力","（","+","声明者","网站","www","构建","、","任何","面向","将","出版","实践","建立","但","视频","brand","源码","120","学","依法","机器","校企","创建","人才培养","居","微控","联系","版权","创新","拥有","未经","产品","面向未来","。","生态","或","机器人","提供","》","所有","培养","作品","被","有权","进行","交流","仅限","责任","上","畅销","对本","法律","抄录","通过","地区","《","追究","其它","合作","guyuehome","用户","包括","努力","致力于","违反","古月","等","追究其","许可","有限","武汉","年","是","高校","法律责任","上述",".","学习者","企业","使用","平台","捆绑","质量","赋能","的","1000","书面","个人","如需","公司","图书","为","万人","一体","小时","镜像","限于","2011","授权","复制","科技","集","未来","）","课程","超过","模式"," ","精锋","开发","@","线上","与","合法","修改","至今","请","优质","高质","累积"],"title":"关于教程","title_tokens":["教程","关于"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["交流学习","，","众多","ros","内容","人才","及","高质量","万字","com","ai","学习","华语","知名","社区","致力","（","+","www","构建","、","面向","出版","实践","建立","视频","120","机器","校企","创建","人才培养","居","创新","面向未来","。","生态","机器人","提供","》","培养","交流","畅销","通过","地区","《","合作","guyuehome","用户","努力","致力于","古月","等","年","是","高校",".","学习者","企业","平台","质量","赋能","的","1000","图书","为","万人","一体","小时","2011","集","未来","）","课程","超过","模式"," ","开发","线上","与","至今","优质","高质","累积"],"title":"学机器人，上古月居","title_tokens":["古月","居","，","机器人","上","学","机器"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["，","究其","本","明者","声明","传播","有限公司","不","不得","和","单位","com","课件","均","销售","学习","声明者","网站","、","任何","将","但","视频","brand","源码","依法","居","微控","版权","拥有","未经","产品","。","或","所有","作品","被","有权","进行","仅限","责任","对本","法律","抄录","追究","其它","用户","guyuehome","包括","违反","古月","等","追究其","许可","有限","武汉","法律责任","上述",".","使用","捆绑","的","书面","个人","如需","公司","为","镜像","限于","授权","复制","科技","课程"," ","精锋","@","修改","合法","与","请","联系"],"title":"版权声明","title_tokens":["版权","声明"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/","text":"ROS/ROS2是什么 智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。 ROS的诞生 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS的发展 ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称ROSCon，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。 ROS的特点 ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的应用案例在社区中沉淀下来； ROS本身也是完全开源的，商业许可证非常宽松； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品，缩短了产品的上市时间； ROS也可以跨平台使用，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多支持工业应用的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。 参考资料 关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["分享","，","年轻","ros","局限性","确定","迅猛","游戏","由","情况","不乏","上边","就","入门","来讲","大家","动力","陪","学术","访问量","熨烫","原本","15","便宜","answers","上市","百科全书","项目","operating","上图","最为","提出","当初","快","最后","既然","复合","world","比如","搜索","？","据库","限性","问答","跟随","全球","总而言之","推动","开始","之内","这是","这位","提问","快速","造","大大","做法","一套","做","苹果","—","到","工程师","投资","不多","有","居","给","接下","只","什么","一大笔钱","产品","。","自身","复用","发表","几乎","intel","主阵地","非常","所有","来自","四大","了解","时候","促使","论坛","而言","问题","2012","提取","有志","棒","大部","局限","齐聚一堂","组成","可以","让","价格","设计","2022","案例","低","说明","五年","清晰","第一个","许可","版本","智能","25","这","c","模块化","新鲜事","底盘","世界","进入","头发","新","以上","广泛","的","活跃","能够","看中","回到","款","公司","此","长远","围绕","我们","对于","事情","涉及","统计","肯定","针对","无论是","成为","随着","根据","所以","这个","最高","没有","介于","时代","肩负","却","向前走","研发","100","查看","模块","personal","四项","今日","各样","百科","年轻人","40","笔记","那","算是","部件","第一次","简单","所学","元素","在","没想","台球","条","毛巾","全球化","许可证","官方","革命","通信","大笔","笔记本","可为","大步","国家","青年","正式版","选择","人类","实验","功能","宽松","配合","美妙","踏上","大学","从中","参考","疫情","该","用","会","学习","一步","每","一款","记录","开发者","全","真的","游戏机","数据库","现在","要","用于","打","讲解","叠","移动机器人","增长速度","接下来","分钟","稳定","向","名称","举办","浪潮","5","应用","kinect","页面","软件系统","望而却步","身影","特性","步伐","框架","各项","其他","得到","阵地","服务","pr2","120","站","虽好","推进","尽量","2015","新增","下来","微软","不仅","创意","排名","a","只要","ubuntu","答案","进步","越来","斯坦福","discourse","开发工具","实验室","沉淀","为什么","想法","提供","几年","差不多","认识一下","物体","如果","被","年底","着","下","；","洗衣","多","成果","个","助推","加快","上","相关","正在","圈","20","通过","关键","标准","回答","不断","过程","做成","容易","剪头发","结晶","跨平台","月","电脑","robot","来","参考资料","turtlebot","制造","发展","整合","左右","年","才","维基百","很快","传感","体系",".","一群","ros2","平台","对","前","总称","智能化","目标","日常","度","张图","还","个人","每年","趋势","没想到","无论","层面","为","高效","willow","开源","为例","以","操作系统","挑战","福大","生态系统","这样","风险","使命","250","变为","完成","电路","于","发布","同学","资料","其中","高度","此后","同时","轰动","之上","开发","线上","然后","2","肩膀","至今","两年","b","正式","而","大量","150","曲线","一家","很多","更为","神兵","资本","同样","不同","内容","教程","掀起","想到","光靠","控制","多媒体系统","机械","不开","研究","次数","希望","繁荣","packages","地域","或者","感器","越来越","几百","速度","率","一样","复杂","增长","臂","一大步","多媒体","2010","而生","主要","简称","浏览","有人","几百万","甚至","真正","一定","木头","原型","任何","不想","受限于","多项","原因","类似","humble","一下","量级","起","包","整理","收拾","大有可为","受限","活动","视频","讨论","源码","嘉宾","软件","机器","方向","初期","手机","迎来","维基","深知","向前","看到","org","时间轴","近两年","改为","全新","各种各样","叫做","一个","亚马","居高不下","不到","离不开","图中","其实","浏览量","精致","带领","这里","进行","成功","index","多万","一大笔","神秘","怀揣","托管","标志","缩短","扫地","方式","实现","工程","来到","直到","上去","传感器","用户","家","同一","一系","本身","之","古月","也","等","进化","存储","外观","入门教程","泡泡","：","绝大部分","系统","如何","具备","是","利器","巨大","第一","做饭","各种","新鲜","xbox","2014","知识","生态系","使用","linux","后期","解决","一次","面纱","呢","程度","柔性","更","可能","时至今日","全人类","加","自己","迭代","下载","很","找到","板块","商业化","一系列","重量级","出来","成熟","成本","又","绝对","机制","诞生","限于","2011","一些","起来","基本","代码","处理","而且","专业","特点","正如"," ","后续","独立","普及","系列","图","认识","两个","都","嵌入式","其次","努力","总体","多年","全人","同年","横跨","还有","“","推出","做出","帮助","访问","全书","更好","百万","移动","人才","本","代表","之旅","2017","频繁","远","创始","万万","万左右","数据","野蛮","不","水下","和","所有人","长期","嵌入","来看","场景","扩展","月底","轮子","维基百科","聊天","支持","工具","智慧","社区","80","大会","这些","还是","人数","加上","不是","一切","一起","部分","经历","掌握","网站","方法","笔记本电脑","玩耍","、","一大","风险投资","google","同理","起点","乐意","说干就干","不要","注意","2007","将","核心","欢迎","绝大","工业","尝试","媒体","啦","/","这一波","等等","联合","终于","汽车","资源","重要","此时","代","一堂","操作","斯坦福大学","wiki","github","conference","引擎","生态","价格便宜","统统","因为","体感","基于","中","提高","人形","版","完全","机器人","为了","时间","已经","零部件","一届","大","干","ros1","得以","跑","友好","从","无聊","暴露","给出","因","团队","技术","更新","适用","衣服","效率","这群","不下","system","只想","重量","当时","但是","零","集合","这款","商业","roscon","历经","单独","效果","重新","普遍","活跃度","不断更新","别人","领域","garage","无疑","采购","万","之王","亚马逊","资金","应用软件","却步","最佳","逐渐","就是","推荐","做到","充足","性能","”","索引","首先","几个","通常","强悍","大部分","巨人","把","一段","他们","万人","肩负着","动机","近几年","你","每个","并","好","虽然","了","投了","直接","作为","熟悉","课程","关于","windows","人","早期","爆款","采用","以叠","详细","已有","明智","有没有","基本上"],"title":"ROS和ROS2是什么","title_tokens":["ros","ros2","什么","和","是"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#rosros2","text":"智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。","text_tokens":["面纱","的","，","智能化","呢","接下来","神秘","ros","向","掀起","正在","应用","我们","一下","量级","这位","操作系统","就","挑战","重量级","又","重量","时代","嘉宾","机器","方向","大家","操作","下来","进化","了","高度","场景","接下"," ","智能","什么","这","开发","。","系统","认识","是","中","巨大","而生","提出","机器人","全","那","ros2","认识一下","？","一起","对","带领"],"title":"ROS/ROS2是什么","title_tokens":["/","ros","什么","ros2","是"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。","text_tokens":["分享","，","台球","条","毛巾","同样","ros","光靠","大步","机械","就","研究","青年","实验","功能","或者","不","和","所有人","大家","越来越","陪","大学","从中","学术","复杂","熨烫","聊天","用","一大步","一款","而生","真的","最后","既然","有人","要","用于","不是","？","甚至","打","一切","一起","叠","木头","玩耍","、","分钟","原型","一大","推动","不想","说干就干","5","2007","应用","类似","之内","软件系统","整理","尝试","收拾","框架","一套","做","联合","服务","苹果","—","pr2","软件","机器","重要","初期","手机","此时","有","代","操作","斯坦福大学","深知","只要","向前","看到","只","答案","什么","。","越来","斯坦福","因为","基于","中","一个","实验室","机器人","想法","为什么","非常","不到","所有","已经","零部件","干","图中","得以","物体","如果","精致","时候","问题","洗衣","无聊","多","有志","个","给出","上","实现","因","圈","团队","技术","可以","标准","组成","设计","容易","剪头发","家","衣服","同一","效率","当时","一系","低","但是","这款","也","等","robot","很多","外观","别人","智能","：","年","这","系统","如何","才","是","很快","资金","应用软件","第一","就是","一群","做饭","头发","充足","性能","平台","后期","一次","的","呢","柔性","更","可能","强悍","还","个人","款","层面","高效","对于","我们","自己","事情","很","他们","涉及","肯定","操作系统","针对","找到","一系列","福大","出来","这样","为例","成为","你","所以","这个","诞生","没有","完成","电路","一些","并","却","处理","向前走","而且","虽然","其中","了","专业"," ","轰动","独立","人","100","开发","personal","系列","图","都","2","横跨","那","以叠","部件","第一次","在","有没有","做出","帮助"],"title":"ROS的诞生","title_tokens":["的","诞生","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_1","text":"ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称ROSCon，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。","text_tokens":["分享","，","资本","年轻","百万","官方","ros","局限性","教程","想到","确定","本","游戏","大笔","控制","2017","笔记本","不乏","就","各种各样","正式版","创始","改为","万万","功能","野蛮","感器","和","长期","越来越","大学","几百","一样","疫情","月底","该","增长","原本","会","便宜","2010","支持","项目","每","operating","一款","开发者","提出","大会","简称","游戏机","当初","几百万","world","现在","加上","真正","限性","部分","经历","讲解","受限于","跟随","笔记本电脑","全球","、","原型","一大","风险投资","推动","名称","开始","举办","注意","原因","2007","类似","应用","kinect","这是","望而却步","身影","起","5","humble","绝大","步伐","快速","受限","全新","大大","做","终于","pr2","服务","—","到","软件","机器","投资","虽好","迎来","重要","一堂","2015","操作","斯坦福大学","微软","起点","给","不仅","conference","ubuntu","一大笔钱","。","时间轴","价格便宜","越来","斯坦福","体感","叫做","中","近两年","因为","亚马","intel","一个","机器人","版","几年","居高不下","为了","所有","时间","一届","已经","来自","大","被","了解","年底","着","这里","进行","成功","从","下","问题","2012","一大笔","多","暴露","提取","助推","标志","加快","扫地","大部","圈","局限","齐聚一堂","团队","价格","让","可以","关键","设计","2022","过程","直到","传感器","适用","这群","不下","只想","system","但是","roscon","商业","五年","历经","单独","电脑","robot","也","等","第一个","turtlebot","发展","版本","garage","这","年","绝大部分","系统","亚马逊","是","很快","却步","底盘","传感","第一","逐渐","进入","各种","xbox","2014","ros2","使用","后期","前","的","更","能够","看中","回到","大部分","款","个人","公司","每年","没想到","为","自己","我们","迭代","把","willow","开源","他们","操作系统","肩负着","成熟","福大","成为","成本","出来","风险","随着","所以","这个","使命","诞生","变为","于","2011","肩负","每个","限于","发布","时代","介于","其中","投了","了","直接","熟悉","此后"," ","人","普及","之上","开发","线上","早期","爆款","采用","各样","两年","多年","年轻人","稳定","正式","同年","笔记","而","推出","在","一家","没想"],"title":"ROS的发展","title_tokens":["的","发展","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_2","text":"ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的应用案例在社区中沉淀下来； ROS本身也是完全开源的，商业许可证非常宽松； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品，缩短了产品的上市时间； ROS也可以跨平台使用，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多支持工业应用的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["分享","，","全球化","许可证","ros","移动","人才","代表","通信","多媒体系统","由","机械","就","远","繁荣","人类","功能","水下","来讲","和","大家","宽松","越来越","嵌入","率","轮子","臂","会","多媒体","工具","一步","智慧","上市","支持","社区","这些","最后","复合","还是","比如","用于","不是","一起","部分","移动机器人","全球","、","同理","不要","多项","将","应用","核心","身影","特性","工业","快速","媒体","造","做法","做","汽车","到","软件","机器","站","推进","尽量","有","新增","下来","创意","给","a","向前","看到","引擎","产品","。","进步","复用","自身","生态","各种各样","统统","越来","提高","中","人形","开发工具","一个","沉淀","完全","机器人","非常","时间","已经","ros1","四大","跑","被","这里","促使","友好","着","从","；","多","成果","怀揣","缩短","上","实现","组成","可以","标准","技术","设计","上去","做成","结晶","家","零","集合","案例","本身","商业","跨平台","重新","之","也","普遍","来","制造","整合","发展","别人","许可","智能","领域","c","采购","模块化","系统","：","具备","是","这","体系","就是","做到","各种","新","ros2","生态系","使用","linux","广泛","平台","对","”","总称","的","智能化","目标","更","通常","时至今日","全人类","还","公司","此","无论","巨人","长远","围绕","把","我们","自己","开源","他们","以","商业化","无论是","成为","生态系统","这样","动机","这个","机制","并","向前走","了","直接","特点","正如"," ","同时","windows","模块","开发","都","今日","肩膀","各样","嵌入式","至今","b","全人","那","已有","“","简单","明智","在","一家","很多"],"title":"ROS的特点","title_tokens":["特点","的","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_3","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。","text_tokens":["神兵","，","ros","不同","教程","革命","迅猛","代表","本","可为","情况","频繁","国家","上边","就","次数","希望","选择","万左右","packages","数据","地域","功能","不","和","大家","动力","越来越","来看","速度","参考","访问量","增长","维基百科","15","answers","会","学习","每","记录","上图","社区","提出","开发者","快","数据库","最为","80","浏览","比如","人数","这些","现在","？","据库","部分","网站","问答","增长速度","全球","、","总而言之","任何","乐意","浪潮","应用","核心","这是","包","页面","绝大","各项","快速","其他","大有可为","这一波","得到","等等","活动","讨论","源码","到","资源","重要","机器","曲线","不多","wiki","有","维基","给","排名","org","看到","什么","。","发表","越来","discourse","中","一个","机器人","几年","非常","差不多","已经","大","其实","浏览量","如果","这里","而言","论坛","从","；","index","问题","多万","多","助推","相关","上","棒","方式","正在","大部","20","通过","可以","回答","用户","新鲜事","说明","月","清晰","也","等","存储","活跃度","整合","发展","25","无疑","：","维基百","这","左右","万","绝大部分","是","利器","最佳","就是",".","各种","新鲜","新","以上","使用","更为","索引","的","呢","张图","几个","活跃","日常","度","加","程度","大部分","趋势","我们","下载","很","统计","万人","成为","近几年","你","根据","绝对","250","最高","每个","起来","发布","基本","研发","其中","了","作为","关于"," ","查看","人","开发","四项","两个","都","百科","总体","40","算是","150","元素","在","很多","基本上","访问"],"title":"ROS的社区","title_tokens":["社区","的","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#_1","text":"关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["分享","，","全书","更好","ros","内容","教程","本","之旅","不开","入门","和","大家","配合","美妙","踏上","参考","扩展","会","百科全书","工具","学习","项目","最为","社区","主要","最后","搜索","要","掌握","部分","一起","网站","方法","一定","google","开始","将","欢迎","绝大","提问","啦","阵地","视频","—","120","工程师","重要","机器","有","github","居","。","效果","几乎","中","一个","机器人","提供","主阵地","所有","离不开","这里","从","问题","托管","大部","工程","来到","技术","可以","不断","更新","努力","古月","也","参考资料","泡泡","入门教程","不断更新","这","绝大部分","之王","是","推荐","世界","ros2","知识","使用","解决","的","首先","几个","大部分","还","我们","一段","开源","找到","板块","万人","成为","你","这个","代码","同学","好","资料","作为","课程","关于"," ","后续","开发","然后","都","百科","其次","详细","还有","大量","所学","在"],"title":"参考资料","title_tokens":["参考资料","参考","资料"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/","text":"ROS2对比ROS1 在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。 ROS1的局限性 首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。 全新的ROS2 ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。 ROS2 vs ROS1 系统架构 在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。 DDS通信 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。 核心概念 ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。 编码方式 再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。 命令行 最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随课程，你就会慢慢理解这些特性。","text_tokens":["不太","某","，","售价","他","内部","接入","vs","大致","ros","局限性","还会","对比","之外","单兵作战","就","测试","自","理器","网络","驱动","不够","安全","5g","标准化","来讲","大家","历史","动力","方便","可靠","推倒重来","原有","catkin","学术","所示","不爽","原本","只能","名字","项目","最为","精力","discovery","最后","比如","生活","结合","（","程序","？","先","限性","跟随","全球","如","从而","开始","接收","一本","有线","运算","做","动力学","走","一套","—","fastrtps","到","有","优化","经验","编程语言","类型","给","印象","作战","什么","产品","。","复用","run","两者","几乎","雷达","非常","所有","了解","间层","时候","升级","而言","受制","udp","启动","问题","经常","后","看","大部","局限","一团乱","之初","可以","让","设计","勿躁","最","相对","加入","只有","么","说明","一团乱麻","也许","可选","命令行","比","第一个","编译系统","版本","智能","这","时","部头","基础","共享","共享内存","mcu","前方","完善","符合","真实","以上","面对","广泛","打交道","指挥","格局","的","分解","能够","款","走向","公司","是否","长远","我们","why","对于","大部头","保证","肯定","彼此","过","针对","另","减少","全部","随着","能力","所以","这个","写","道坎","没有","时代","移植性","打成","研发","迈过","）","编码方式","常","受制于","与","产品开发","各样","重来","那","计算","右侧","简单","管理器","在","是因为","实时","解算","除此之外","编译","学术研究","工作站","交付","变革","接触","通信","设备","涌现","需求","选择","之间","功能","一一","开发方式","该","难度","批量生产","会","用","交给","学习","一步","便于","每","一款","开发者","交道","全","里","主","批量","方案","成","没","用于","要","带来","中间","讲解","发现","过去","家庭","搬","深入","完整","稳定","名称","节点","应用","软件系统","特性","整体","框架","对系统","其他","一页","但","省略","小","pr2","服务","接近","尽量","不仅","再","单兵","消费","建筑","只要","答案","轻松","中间层","流程","越来","topic","为什么","提供","至关","幅度","进程","存在","稍安","如果","需要","下","；","运动学","多","怎样","上","一种","相关","厂商","通过","标准","不断","颠覆","过程","做成","行为","看看","跨平台","电脑","市场","来","发展","有限","移植","链接","出错","内","借鉴","颠覆性","ros2","python3","企业","现有","平台","对","布式","很大","丰富","远比","它","api","目标","张图","还","应该","无论","opensplice","层面","为","大幅","开源","一行","航天","操作系统","挑战","尽力","这样","工作","风险","条件","差异","算力","使命","完成","于","属性","下边","含义","发布","即可","macos","其中","保留","房子","分布式","同时","之上","编写","开发","然后","修改","信息","到底","成功经验","宕机","而","初次","另外","可移植","大量","装修","产品化","生产","命令","一家","很多","左侧","满足","灵活","同样","调用","不同","保障","教程","阶段","天翻地覆","控制","客户端","只不过","第二个","研究","通信协议","不难理解","考虑","项目管理","延迟","或者","消失","定义","最新","三个","入侵","网络连接","越来越","小伙伴","无法","专注","几百","率","一样","复杂","tcp","完","分散","强","乱麻","主要","简称","几百万","语言","更加","有且","可读","甚至","周期","真正","rosrun","基本保障","配置","一定","较","最早","由于","切记","任何","1ms","翻新","国际标准","类似","细节","一下","伙伴","确实","软件","android","机器","广泛应用","手机","二种","指定","理解","各种各样","全新","叫做","一个","新版","系统工程","其实","按照","这里","带领","环境","进行","成功","慢慢","上手","能","怀揣","层","行人","实现","方式","揭秘","工程","定性","尤其","二代","用户","突然","级别","课时","通用","客户","策略","实时性","消费市场","哪些","驾驶","也","等","这台","过来","主角","概念","：","绝大部分","依赖","系统","如何","具备","是","协议","放在","第一","巨大","去","以下几点","自家","常用","各种","使用","linux","不过","解决","适配","得","解密","呢","更","听","可能","上升","运行","变化","自己","物","复杂度","陌生","找到","rtos","之后","具体","成本","体现","机制","诞生","国际","可读性","一些","继续","基本","代码","处理","编码","面向对象","依然","未来","选项","调试"," ","后续","独立","普及","会成","一致","两个","都","嵌入式","管理","请","第二","可选项","稳定性","ament","总体","换成","提","联网","还有","除此","搭载","毛坯","wifi","强壮","一边","要求","实力","更好","百万","对象","当然","本","迁移","不再","几点","c++","一旦","频繁","意义","担忧","图像","历史使命","个体","话题","之前","数据","总之","电脑系统","不好","不","发送","和","毛坯房","而已","封装","小伙","软件开发","导致","最大","来看","嵌入","以下","场景","运动","想要","出现","不断涌现","amr","信号","发成","先进","支持","工具","担心","社区","rmw","这些","rostopic","足够","至关重要","唯一","完整性","不用","新一代","不是","高昂","colcon","部分","库会","方法","体验","自动","、","二个","盖","面向","注意","不要","将","核心","架构","相比","绝大","编译器","可移植性","啦","/","建立","面临","接口","汽车","发","学","资源","重要","纠结","底层","操作","rosbuild","性","控制器","不难","只是","因为","基于","听说","中","或","提高","机器人","下要","第二种","为了","黑客","时间","已经","举","大","ros1","dds","部署","应用层","从","翻地","适合","编程","大幅度","通信接口","变得","地方","图片","不会","100ms","一团","走向市场","诟病","开发成本","总结","干掉","不能","适用","但是","加密","更具","当","商业","集成","明显","重新","千差万别","暂且","陆续","连接","简单明了","诸多","可靠性","最佳","就是","厂家","改","分布","做到","充足","性能","通用性","是从","角度","ceo","用到","首先","高","大部分","除了","更接","推倒","丢","把","更换","他们","安全性","master","你","例子","良好","协作","一代","力学","每个","并","收","微控制器","好","以及","似乎","安装","虽然","了","多个","课程","直接","熟悉","总体而言","角色","windows","多功能","表示","第二代","致使","切换","借助","内存","最终","middleware","发布者","干扰","各位","python"],"title":"ROS2对比ROS1","title_tokens":["ros1","ros2","对比"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2ros1","text":"在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。","text_tokens":["从","的","，","多","能","ros","名称","上","变化","对比","我们","二代","就","过","之前","你","做","么","看看","不","和","有","也许","来看","其中"," ","这","。","第二代","学习","听说","或","就是","第二","一个","到底","ros2","ros1","大","使用","？","在"],"title":"ROS2对比ROS1","title_tokens":["ros1","ros2","对比"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros1","text":"首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。","text_tokens":["，","实力","他","内部","售价","学术研究","工作站","ros","当然","天翻地覆","通信","设备","涌现","单兵作战","就","担忧","研究","网络","数据","不够","或者","不","和","入侵","历史","网络连接","可靠","来看","嵌入","学术","出现","不断涌现","复杂","先进","批量生产","只能","会","用","原本","支持","一款","批量","比如","足够","更加","用于","要","不用","新一代","？","高昂","甚至","部分","自动","最早","家庭","由于","应用","类似","绝大","有线","框架","运算","小","pr2","服务","汽车","—","软件","资源","机器","有","类型","单兵","作战","什么","答案","产品","。","因为","中","一个","为什么","机器人","为了","黑客","时间","已经","ros1","从","；","翻地","问题","适合","上","地方","大部","走向市场","可以","让","设计","不断","做成","级别","但是","驾驶","也","市场","这台","第一个","发展","主角","有限","连接","：","这","绝大部分","系统","具备","是","可靠性","第一","就是","各种","充足","ros2","平台","的","首先","呢","目标","它","运行","款","大部分","走向","丢","why","我们","自己","保证","找到","航天","针对","具体","这样","成本","工作","风险","条件","算力","随着","能力","良好","没有","诞生","完成","一代","一些","并","处理","似乎","虽然","了","课程"," ","独立","普及","开发","致使","都","嵌入式","那","最终","计算","搭载","生产","干扰","在","是因为","实时"],"title":"ROS1的局限性","title_tokens":["的","局限","局限性","ros1","限性"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2","text":"ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。","text_tokens":["，","ros","还会","就","测试","理器","网络","安全","标准化","大家","历史","动力","方便","可靠","推倒重来","原有","catkin","原本","项目","比如","生活","结合","（","？","动力学","到","有","优化","经验","给","产品","。","所有","时候","升级","受制","问题","经常","后","之初","让","可以","设计","相对","说明","比","第一个","编译系统","智能","这","基础","mcu","前方","面对","格局","的","分解","能够","走向","长远","我们","肯定","针对","全部","所以","这个","没有","时代","打成","研发","）","受制于","与","各样","重来","那","简单","管理器","在","实时","解算","编译","变革","通信","需求","选择","之间","会","用","一款","开发者","全","方案","要","用于","发现","过去","完整","稳定","节点","应用","特性","框架","对系统","但","尽量","不仅","消费","建筑","流程","越来","提供","需要","下","运动学","多","怎样","上","一种","标准","颠覆","行为","跨平台","电脑","市场","移植","链接","出错","内","借鉴","颠覆性","ros2","python3","平台","对","布式","很大","远比","它","api","还","无论","层面","为","操作系统","挑战","尽力","这样","风险","工作","差异","算力","使命","于","完成","macos","保留","房子","分布式","同时","之上","编写","开发","修改","成功经验","宕机","大量","装修","产品化","很多","满足","不同","保障","阶段","控制","考虑","项目管理","或者","最新","入侵","网络连接","越来越","无法","复杂","强","语言","更加","甚至","周期","真正","基本保障","一定","较","任何","1ms","翻新","类似","细节","一下","软件","android","机器","手机","二种","各种各样","全新","叫做","一个","新版","系统工程","环境","进行","成功","能","怀揣","行人","实现","工程","定性","尤其","课时","通用","策略","实时性","消费市场","驾驶","也","等","：","系统","如何","具备","是","巨大","去","第一","以下几点","各种","使用","linux","得","解密","呢","更","可能","运行","变化","自己","rtos","具体","体现","机制","继续","基本","代码","未来","调试"," ","后续","独立","两个","都","管理","第二","稳定性","ament","提","搭载","毛坯","wifi","强壮","要求","不再","几点","c++","一旦","历史使命","个体","数据","电脑系统","不好","不","发送","和","毛坯房","导致","来看","以下","场景","运动","amr","出现","信号","工具","这些","完整性","不用","不是","colcon","方法","体验","自动","、","盖","架构","相比","编译器","面临","接口","汽车","纠结","操作","rosbuild","性","控制器","只是","中","机器人","下要","第二种","为了","黑客","已经","大","ros1","dds","部署","适合","不会","100ms","不能","但是","加密","更具","明显","重新","千差万别","连接","诸多","最佳","就是","分布","做到","通用性","性能","除了","推倒","把","他们","安全性","master","协作","力学","并","微控制器","好","以及","虽然","了","直接","课程","角色","windows","借助","最终","python"],"title":"全新的ROS2","title_tokens":["ros2","全新","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2-vs-ros1","text":"","text_tokens":[],"title":"ROS2 vs ROS1","title_tokens":["ros1","ros2","vs"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_1","text":"在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。","text_tokens":["不太","，","大致","调用","ros","对比","接触","通信","客户端","频繁","只不过","自","通信协议","就","理器","图像","不难理解","驱动","数据","消失","不","和","大家","而已","封装","一样","复杂","tcp","会","名字","学习","乱麻","交道","里","discovery","这些","主要","比如","更加","至关重要","成","程序","有且","先","中间","库会","方法","发现","、","从而","深入","稳定","节点","接收","开始","注意","应用","类似","将","架构","整体","框架","建立","但","走","一套","接口","—","重要","有","底层","操作","再","印象","不难","理解","。","中间层","两者","基于","中","一个","提供","至关","雷达","所有","进程","ros1","dds","如果","了解","间层","时候","需要","进行","应用层","udp","通信接口","变得","看","上","层","方式","通过","一团乱","一团","可以","标准","让","最","只有","突然","一团乱麻","明显","客户","哪些","也","可选","很多","连接","简单明了","这","依赖","协议","系统","共享","是","内","共享内存","就是","完善","是从","ros2","不过","linux","ceo","得","打交道","指挥","的","它","张图","听","应该","公司","变化","把","我们","更换","找到","rtos","肯定","彼此","master","操作系统","过","这样","写","这个","机制","下边","发布","并","好","安装","选项","macos","了","角色"," ","windows","后续","会成","开发","都","管理","请","信息","可选项","内存","而","那","另外","右侧","简单","大量","管理器","在","左侧"],"title":"系统架构","title_tokens":["架构","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#dds","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。","text_tokens":["灵活","某","，","接入","交付","不同","当然","ros","之外","通信","频繁","需求","就","通信协议","选择","数据","延迟","总之","功能","5g","不","定义","来讲","三个","最大","无法","专注","想要","场景","发成","率","一样","该","复杂","不爽","tcp","完","交给","用","会","每","社区","rmw","精力","简称","这些","比如","更加","唯一","程序","要","不用","不是","？","先","带来","部分","配置","、","稳定","国际标准","应用","类似","软件系统","相比","其他","/","省略","做","fastrtps","接口","发","软件","机器","广泛应用","纠结","底层","优化","再","给","只要","指定","产品","。","轻松","复用","基于","中","听说","提高","一个","机器人","提供","为了","举","ros1","其实","dds","如果","按照","这里","部署","udp","问题","多","一种","实现","厂商","诟病","可以","标准","让","设计","开发成本","最","用户","加入","适用","么","加密","商业","重新","也","等","过来","版本","移植","这","放在","系统","协议","如何","是","时","自家","就是","厂家","改","各种","性能","ros2","符合","不过","广泛","解决","适配","丰富","得","的","目标","高","更","能够","应该","除了","变化","opensplice","是否","层面","丢","我们","物","把","对于","更换","开源","一行","为","肯定","复杂度","master","另","这样","减少","成本","写","所以","这个","例子","国际","于","属性","每个","一些","并","代码","收","基本","好","安装","了","多个","熟悉"," ","常","开发","然后","切换","都","产品开发","联网","还有","middleware","简单","在","一家","满足"],"title":"DDS通信","title_tokens":["通信","dds"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_2","text":"ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。","text_tokens":["从","的","，","全球","百万","二个","应该","ros","方式","本","应用","迁移","我们","陌生","意义","伙伴","第二个","就","过","没有","到","不","含义","和","一一","并","大家","开发方式","以及","有","尽量","依然","小伙","也","小伙伴","其中","几百","了","保留","课程","熟悉"," ","概念","开发","。","一致","会","学习","讲解","几乎","便于","中","担心","开发者","第二","这些","几百万","非常","在","已经","存在","ros2","ros1","不用","使用","广泛","如果","部分","很多","各位","这里","方法"],"title":"核心概念","title_tokens":["核心","概念"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_3","text":"再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。","text_tokens":["一边","，","更好","同样","对象","教程","就","来讲","和","大家","软件开发","难度","所示","会","用","学习","一步","项目","语言","程序","可读","方法","发现","如","切记","搬","面向","不要","一本","特性","确实","一页","可移植性","软件","学","机器","接近","操作","编程语言","再","。","提高","中","一个","机器人","ros1","稍安","带领","而言","从","编程","多","图片","方式","实现","大部","过程","勿躁","看看","当","也","来","暂且","版本","移植","这","部头","如何","具备","是","角度","ros2","真实","企业","不过","的","用到","更","更接","我们","大部头","之后","具体","写","道坎","可读性","面向对象","一些","发布","移植性","编码","迈过","课程","总体而言"," ","后续","开发","两个","总体","可移植","发布者","在"],"title":"编码方式","title_tokens":["编码方式","方式","编码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_4","text":"最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随课程，你就会慢慢理解这些特性。","text_tokens":["某","，","除此之外","大致","ros","教程","之外","对比","通信","控制","就","话题","选择","功能","和","大家","难度","会","分散","工具","每","最为","这些","主","最后","rostopic","比如","没","rosrun","跟随","节点","核心","特性","啦","做","—","有","再","印象","理解","。","run","中","一个","topic","幅度","所有","ros1","dds","如果","而言","慢慢","下","启动","编程","上手","大幅度","相关","一种","揭秘","总结","干掉","相对","集成","命令行","也","陆续","概念","：","是","常用","就是","ros2","现有","以上","对","的","更","上升","变化","大幅","我们","把","master","你","即可","好","了","课程"," ","后续","独立","多功能","表示","开发","都","换成","初次","除此","命令","在"],"title":"命令行","title_tokens":["命令","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/","text":"ROS2安装方法 本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。 Linux系统简介 时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。 Ubuntu系统简介 我们后续课程使用到的Linux发行版就是ubuntu系统。 Ubuntu诞生于2004年10月份，每六个月发布一个新版本，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。 Ubuntu虚拟机安装 虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下： 1. 下载系统镜像 下载链接： https://ubuntu.com/download/desktop 2. 在虚拟机中创建系统 3. 设置虚拟机硬盘大小 4. 设置Ubuntu镜像路径 5. 启动虚拟机 6. 设置用户名和密码 7. 等待系统安装 8. 完成安装 Ubuntu系统安装好后，大家可以先随意使用熟悉一下。 ROS2系统安装 接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下： 1. 设置编码 $ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8 2. 添加源 $ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844 3. 安装ROS2 $ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop 4. 设置环境变量 $ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。 ROS2示例测试 为了验证ROS2安装成功，我们可以通过以下示例进行测试。 示例一：命令行示例 先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。 示例二：小海龟仿真示例 再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。 附：虚拟机镜像 为了方便大家入门学习，我们也提供了预装好ROS2软件和教程代码的虚拟机镜像，有需要的小伙伴可以通过以下链接下载： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["分享","提交","爱好","，","不太","他","centos","ros","之外","6","分别","迅猛","04","准备","workstation","情况","硬件","就","测试","入门","网络","上下左右","来讲","一应俱全","大家","方便","原有","node","变量","一句","虚拟","exc6","原本","名字","最为","快","比如","world","键盘","程序","githubusercontent","？","先","pro","www","检验","一应","附","开始","之内","通讯","sudo","基本相同","快速","会加","实践","操作方法","算机","一套","多任务","做","—","18","到","可","点击","en","有","创建","ubuntu20.04","share","给","接下","只","archive","什么","小海","。","run","个人爱好","了解","升级","时候","download","启动","问题","提取","后","自行","可以","让","2022","设计","修复","位置","最","动手做","guyuehome","加入","baidu","摩拳擦掌","说明","放到","命令行","至此","第一个","如遇","目前","爱好者","版本","智能","这","准确","时","字符","lts","月份","新","deb","最好","d","fedora","的","热情","回到","多人","lang","公司","是否","我们","保证","芬兰","无论是","成为","这套","绑定","所以","这个","开放","随意","没有","关注","curl","维护","任务","main","模式","utf","lc","后缀","hello","与","各样","光大","激发","持续","乐于","精神","计算","products","小海龟","仿真","第一次","在","打包","紧随其后","除此之外","可视","者","接触","通信","选择","upgrade","功能","一直","传播","合适","尚","二句","desktop","大学","cpp","参考","外衣","该","正常","&&","等待","_","会","路径","学习","每","开发者","redhat","中将","成","现在","failed","22","讲解","接下来","优先","稳定","节点","发扬光大","比较","应用","5","print","叫","install","其他","好者","但","强大","服务","林纳斯","文件","简介","下来","不仅","再","gnupg","奥义","ubuntu","arch","越来","8","字符串","提到","turtlesim","提供","户名","真器","其后","源","gen","如果","需要","俱全","下","locale","多","setup","demo","个","蕴藏","一种","上","usr","第一句","通过","标准","过程",":","节","华丽","验证","turtle","人工","月","电脑","其","设置","兼容","(","来","海龟","发展","有限","移植","左右","年","链接","其他软件",".","update","上下","ros2","企业","对","etc","|","vmware","还","个人","应该","每年","无论","locales","s","--","开源","为例","应用程序","操作系统","变动","以","list","这样","工作","于","并用","完成","发布","资料","macos","其中","10","同时","ubuntu22.04","listener","之上","开发","2","$","两年","-","命名","多用","另外","大量","architecture","命令","很多","预装","背景","衡量","codename","不同","本相","教程","各个",">","控制","第二个","考虑","packages","或者","普通","务器","多用户","越来越","com","pan","小伙伴","unix","一","一样","evaluation","编辑","真理","相同","传输","nodes","激起","试一试","主要","编辑器","浏览","量","甚至","source","免费","发行版","一定","lsb","行列","二","任何","http","humble","一下","六个","伙伴","gpg","~",")","1dvxugmhxlxnsnfdezuxw0g","占据","界面","软件","机器","rosdistro","订阅","keyrings","bug","看到","org","raw","热爱","各种各样","叫做","编号","一个","all","并且","3","顺序","by","connect","os","这里","技术实力","环境","进行","地址","成功","7","建议","看出","实现","步骤","操作界面","用户","通用","一般","也","等","dev","如下","概念","：","依赖","系统","出于","源代码","是","如何","release","六个月","第一","常用","动手","echo","各种","反馈","互联","密码","37844","码","linux","使用","浏览器","可视化","一次","仿真器","服务器","呢","更","可能","蓝色","运行","原理","null","自己","吸引","下载","很","之后","成熟","之一","绝对","诞生","一些","起来","基本","代码","编码","依然","未来","学生","计算机","指令"," ","后续","https","千层","html","两个","都","管理","请","第二","决定","当中","联网","千层浪","“","除此","数字","实力","本","任何人","代表","4","之前","数据","上层","不","和","长期","软件开发","小伙","最大","一位","内核","想要","场景","以下","运动","出现","key","硬盘","探索","支持","示例","环境变","还是","唯一","加上","一起","方法","经典","构建","、","二个","说干就干","o","将","核心","吧","发行","啦","/","紧随","等等","收费","发挥","export","重要","大小","此时","底层","操作","sources","指标","py","人工智能","=","效果","伴随","因为","[","中","或","版","机器人","为了","talker","时间","已经","大","dds","用户名","添加","从","好后","终端","适合","一石激起千层浪","to","ssl","环境变量","us","技术","试试","更新","keyring","适用","每隔","teleop","但是","商业","bashrc","重新","bash","报错","领域","按键","应用软件","就是","1","先要","互联网","虚拟机","性能","发扬","前先要","opt","唯一标准","”","tee","除了","apt","signed","把","介绍","master","第二句","影响","你","擦掌","镜像","1991","\"","并","2004","安装","好","虽然","了","多个","课程","直接","熟悉","关于","何人","windows","]","表示","采用","dpkg","出","已有","发布者","大学生"],"title":"ROS2安装方法","title_tokens":["ros2","安装","方法"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2","text":"本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。","text_tokens":["的","，","一种","本","我们","一下","操作系统","最","节","—","重要","安装","底层","操作","。","系统","先要","ros2","前先要","linux","了解","一起"],"title":"ROS2安装方法","title_tokens":["ros2","安装","方法"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#linux","text":"时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。","text_tokens":["分享","提交","爱好","，","衡量","他","实力","可视","不太","不同","本相","教程","centos","迅猛","本","任何人","情况","硬件","就","之前","功能","传播","或者","不","来讲","和","尚","多用户","务器","越来越","一位","原有","unix","大学","内核","场景","参考","出现","外衣","一样","真理","相同","原本","会","激起","名字","支持","每","开发者","主要","redhat","比如","操作方法","成","唯一","现在","程序","量","加上","？","甚至","先","一起","讲解","方法","免费","发行版","检验","、","行列","任何","稳定","说干就干","发扬光大","应用","核心","基本相同","叫","快速","好者","实践","其他","发行","但","强大","等等","算机","一套","多任务","做","收费","林纳斯","—","到","界面","软件","服务","重要","此时","底层","有","操作","不仅","给","bug","看到","ubuntu","指标","什么","。","热爱","各种各样","越来","伴随","个人爱好","叫做","中","或","一个","提到","并且","时间","已经","大","技术实力","需要","下","问题","适合","一石激起千层浪","多","后","上","实现","通过","技术","可以","标准","设计","修复","过程","操作界面","动手做","用户","最","加入","适用","华丽","通用","商业","放到","一般","重新","其","也","兼容","等","目前","发展","爱好者","有限","概念","版本","这","年","依赖","系统","出于","源代码","是","准确","应用软件","就是","动手","常用","各种","互联网","反馈","性能","互联","发扬","企业","ros2","linux","使用","最好","唯一标准","fedora","对","可视化","服务器","的","呢","热情","更","回到","多人","还","个人","原理","每年","公司","应该","把","自己","吸引","我们","开源","应用程序","芬兰","操作系统","成熟","之后","成为","这套","之一","绑定","所以","这个","开放","镜像","没有","并用","1991","一些","起来","基本","代码","并","安装","维护","任务","虽然","macos","其中","了","学生","模式","计算机","熟悉"," ","windows","何人","之上","开发","千层","与","都","各样","光大","管理","激发","决定","命名","当中","乐于","多用","联网","精神","计算","另外","已有","千层浪","大量","在","打包","很多","大学生"],"title":"Linux系统简介","title_tokens":["简介","linux","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu","text":"我们后续课程使用到的Linux发行版就是ubuntu系统。 Ubuntu诞生于2004年10月份，每六个月发布一个新版本，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。","text_tokens":["紧随其后","，","除此之外","不同","教程","之外","各个","代表","04","本","接触","硬件","就","4","选择","网络","考虑","之前","上层","一直","合适","普通","长期","一应俱全","大家","软件开发","最大","想要","参考","出现","编辑","虚拟","硬盘","会","支持","每","试一试","开发者","主要","快","编辑器","浏览","还是","比如","22","讲解","方法","免费","发行版","一定","、","优先","一应","稳定","比较","5","应用","之内","通讯","一下","六个","发行","会加","其他","紧随","占据","18","发挥","文件","到","软件","机器","重要","有","ubuntu20.04","再","ubuntu","只","。","人工智能","效果","因为","中","编号","或","一个","版","机器人","为了","其后","已经","顺序","如果","升级","时候","俱全","环境","进行","这里","从","多","建议","看出","个","上","通过","自行","可以","让","2022","位置","更新","用户","每隔","摩拳擦掌","但是","人工","月","电脑","也","等","版本","智能","领域","移植","年","系统","如何","时","是","六个月","lts","第一","就是","常用","各种","互联网","虚拟机","月份","新","性能","互联","使用","linux","浏览器","一次","的","更","可能","还","除了","无论","我们","自己","很","保证","为例","变动","以","之后","无论是","介绍","这样","影响","你","绝对","所以","擦掌","诞生","于","关注","发布","2004","好","安装","依然","维护","未来","资料","10","其中","了","课程","直接","熟悉","后续"," ","ubuntu22.04","windows","表示","开发","后缀","都","两年","持续","出","联网","已有","第一次","除此","数字","在","很多"],"title":"Ubuntu系统简介","title_tokens":["简介","系统","ubuntu"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu_1","text":"虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下：","text_tokens":["的","，","www","构建","vmware","运行","后","开始","准备","我们","workstation","下载","步骤","自行","让","可以","就","其他",":","啦","/","工作","完成","软件","和","并","大家","安装","com","操作","多个","同时"," ","如下","虚拟","之上","相同","https","：","。","evaluation","系统","html","是","其他软件","采用","叫做","-","请","一个",".","虚拟机","另外","products","已有","在","pro","这里","地址","环境"],"title":"Ubuntu虚拟机安装","title_tokens":["安装","虚拟机","ubuntu","虚拟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1","text":"下载链接： https://ubuntu.com/download/desktop","text_tokens":["com",".","desktop",":","/"," ","ubuntu","https","：","下载","链接","download"],"title":"1. 下载系统镜像","title_tokens":["1","."," ","镜像","系统","下载"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2","text":"","text_tokens":[],"title":"2. 在虚拟机中创建系统","title_tokens":["创建",".","虚拟机"," ","虚拟","系统","在","2","中"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3","text":"","text_tokens":[],"title":"3. 设置虚拟机硬盘大小","title_tokens":["设置",".","虚拟机"," ","虚拟","硬盘","3","大小"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4-ubuntu","text":"","text_tokens":[],"title":"4. 设置Ubuntu镜像路径","title_tokens":["设置",".","4"," ","ubuntu","镜像","路径"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#5","text":"","text_tokens":[],"title":"5. 启动虚拟机","title_tokens":[".","启动","虚拟机"," ","虚拟","5"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#6","text":"","text_tokens":[],"title":"6. 设置用户名和密码","title_tokens":["设置",".","户名","用户"," ","密码","6","和","用户名"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#7","text":"","text_tokens":[],"title":"7. 等待系统安装","title_tokens":[".","7"," ","等待","系统","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#8","text":"Ubuntu系统安装好后，大家可以先随意使用熟悉一下。","text_tokens":["好后","，","熟悉","ubuntu","随意","。","使用","系统","先","一下","大家","安装","可以"],"title":"8. 完成安装","title_tokens":["8","."," ","完成","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_1","text":"接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下：","text_tokens":["，","接下来","把","我们","步骤","可以","就","到","安装","下来","了","接下","ubuntu","如下","：","。","系统","中","ros2"],"title":"ROS2系统安装","title_tokens":["ros2","安装","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1_1","text":"$ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8","text_tokens":["locale","lang","apt","locales","us","sudo","install","export","en"," ","utf","lc","&&","_","=","$","-","8",".","update","all","gen"],"title":"1. 设置编码","title_tokens":["设置","1","."," ","编码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2_1","text":"$ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844","text_tokens":["，","codename","ros",">","packages","com","参考","key","&&","_","failed","githubusercontent","source","www","lsb","o","http","sudo","print","install","gpg","/",")","可","rosdistro","share","keyrings","gnupg","sources","arch","archive","org","raw","ubuntu","=","[","by","connect","os","to","ssl","usr",":","guyuehome","keyring","dev","(","如遇","报错","release",".","update","echo","d","deb","ros2","37844","etc","”","|","tee","apt","null","signed","--","master","list","curl","\"","main"," ","]","https","$","dpkg","-","“","architecture"],"title":"2. 添加源","title_tokens":["添加","."," ","源","2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3-ros2","text":"$ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop","text_tokens":["-","install","desktop","update","upgrade","sudo"," ","ros","apt","humble","$"],"title":"3. 安装ROS2","title_tokens":["."," ","ros2","3","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4","text":"$ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。","text_tokens":["，","setup","ros",">","humble","就","~","/","\"","bashrc","安装","好","至此","bash","了"," ","。","系统","$","中",".","echo","已经","ros2","opt","在","source"],"title":"4. 设置环境变量","title_tokens":["设置",".","4","变量"," ","环境变","环境变量","环境"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_2","text":"为了验证ROS2安装成功，我们可以通过以下示例进行测试。","text_tokens":["成功","测试","进行","，","以下","为了","ros2","验证","。","我们","通过","示例","安装","可以"],"title":"ROS2示例测试","title_tokens":["ros2","示例","测试"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_1","text":"先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。","text_tokens":["的","启动","终端","，","问题","demo","二个","者","节点","是否","通信","先","通过","吧","第二个","试试","数据","没有","说明","重要","发布","底层","订阅","以下","来","第一个","cpp","正常"," ","listener","传输","：","。","nodes","系统","_","py","run","hello","$","字符","两个","中","最为","第一","一个","第二","字符串","talker","world","在","ros2","“","发布者","dds","命令","如果","”"],"title":"示例一：命令行示例","title_tokens":["命令行","一","：","命令","示例"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_2","text":"再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["成功","背景","的","启动","终端","，","蓝色","运行","ros","蕴藏","教程","节点","上","分别","第一句","将","控制","我们","可以","就","第二句","啦","teleop","上下左右","—","turtle","点击","安装","二句","再","node","至此","来","运动","奥义","海龟","指令"," ","如下","一句","key","小海","该","：","。","左右","按键","_","探索","两个","run","示例","$","中","试一试","第一","一个","第二","持续","turtlesim","中将","”","上下","真器","键盘","小海龟","仿真","ros2","“","后续","在","关于","仿真器","经典"],"title":"示例二：小海龟仿真示例","title_tokens":["二","海龟","小海龟","仿真","小海","：","示例"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_3","text":"为了方便大家入门学习，我们也提供了预装好ROS2软件和教程代码的虚拟机镜像，有需要的小伙伴可以通过以下链接下载： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["的","，","提取","教程","s","我们","通过","下载","伙伴","可以","入门",":","/","1dvxugmhxlxnsnfdezuxw0g","baidu","镜像","软件","和","代码","大家","好","有","方便","小伙","pan","也","小伙伴","com","了","以下"," ","需要","虚拟","https","exc6","：","链接","学习",".","提供","为了","虚拟机","ros2","码","预装"],"title":"附：虚拟机镜像","title_tokens":["虚拟机","附","虚拟","镜像","："]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/","text":"ROS2命令行操作 在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。 Linux中的命令行 类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。 启动方式 回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。 常用命令操作 我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。 ROS2中的命令行 ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。 运行节点程序 想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看节点信息 当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim 查看话题信息 当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose 发布话题消息 想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 发送服务请求 一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\" 发送动作目标 想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\" 录制控制命令 系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["不太","某","，","数量","例如","大致","ros","转","04","这种","由","就","theta","后边","来讲","大家","款式","感兴","原有","进一步","node","麻烦","bag","找","令人","比如","科幻电影","结合","键盘","搜索","程序","看似","？","子","先","当前工作",",","cp","及其","t","sudo","srv","goal","ctrl","1.8","—","gedit","到","文件名称","msg","有","创建","规则","接下","子目","小海","什么","。","一二十个","run","所有","约束","买","目录","了解","时候","动","启动","msgs","问题","后","孤单","复现","目标目录","可以","让","商家","设计","2022","案例","<","twist","本节","产生","写字","命令行","系统管理员","第一个","这","字符","体操","里边","适应","看不到","以上","的","能够","看中","回到","此","跟","我们","对于","服装","十个","另","随着","根据","所以","这个","没有","其上","度高","精心设计","rosbag","感兴趣","什么样","查看","与","执行","必不可少","40","笔记","rate","片段","小海龟","仿真","第一次","在","总","受","可视","rotate","深色","管理员","turtle1","接触","呈现出","笔记本","所在","需求","选择","实验","功能","一直","absolute","该","正常","不变","_","会","用","路径","学习","一步","每","成","要","+","0","窗口","play","接下来","发指","深入","名称","节点","应用","有点","0.2","其他","但","alt","很少","小","多到","服务","文件","linear","下来","再","一件","轻松","}","实验室","topic","为什么","turtlesim","提供","做好","真器","如果","被","需要","列出","下","每次","多","材料","标目","一种","上","通过","某个",":","容易","异常","商场","打开","硬","显示","turtle","看看","消息","而是","电脑","来","海龟","链接","请求","保持",".","17","目","ros2","现有","对","它","目标","逛来逛去","还","想","无论","为","--","不一","以","为例","list","这样","工作","angular","于","完成","即可","发布","rosbag2","保留","info","2","$","手","至今","-","mkdir","信息","初次","主目录","命令","科幻","rm","很多","满足","灵活","背景","db3","一二十","调用","不同","内容",">","控制","死机","及","语法","感受","或者","快捷键","{","z","…","一","name","一样","编辑","相同","魅力","快捷","试一试","主要","编辑器","一点","具体操作","一定","原因","类似","一下","查","绝对路径","确实","2.0","pwd","逛去","若","软件","权限","移入","看到","指定","目的","叫做","多种","一个","随身带","不到","3","带领","这里","进行","慢慢","改变","方式","实现","鼠标","service","自主","用户","vel","枯燥","一系","件夹","哪些","也","等","文件名","如下","概念","布料","：","子目录","系统","如何","是","第一","去","常用","电影","echo","不可","各种","专门","使用","linux","不过","解决","一只","太","一次","可视化","仿真器","pose","呢","更","可能","11","随身","运行","自己","地","很","cmd","一系列","具体","复制到","又","绝对","改名","机制","rotateabsolute","呈现","一些","起来","复制","继续","未来","选项","调试","删除","指令"," ","系列","一二","call","都","0.0","体会","管理","死记","精心","还有","“","知道","推出","段","ls","拷贝","拷贝到","一边","spawn","则","并不一定","既定","本","觉得","话题","逛来","之前","数据","send","不","发送","和","terminal","列表","想象","想要","场景","既","便捷","均","key","工具","二十","这些","干什么","还是","帮上","不用","不是","加上","新建","一起","体验","笔记本电脑","令人发指","、","死记硬背","mv","将","核心","record","尝试","啦","/","难以","当前","怎么","重要","此时","操作","背","常用命令","动作","cd","统管","只是","参数","[","哪","因为","完全","中","定制","或","总有","右键","黑客","已经","输入","某段","x","这项","'","终端","现出","从来","详细信息","35","兴趣","录制","播放","忙","衣服","炫酷","teleop","但是","集成","y","感觉","就是","1","文件夹","角度","源文件","至于","呀","”","用到","二十个","pub","action","改了","把","geometry","你","\"","并","好","虽然","了","多个","直接","熟悉","]","表示","出","详细","记忆"],"title":"ROS2命令行操作","title_tokens":["命令","ros2","操作","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2","text":"在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。","text_tokens":["不太","的","，","一定","更","多","可能","运行","深入","一种","接触","将","有点","我们","可以","之前","随着","感受","案例","—","到","重要","本节","大家","命令行","了","调试","进一步","海龟"," ","小海","魅力","。","会","工具","一步","学习","中","第一","小海龟","ros2","第一次","适应","如果","使用","命令","在","一次","时候","带领"],"title":"ROS2命令行操作","title_tokens":["命令","ros2","操作","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#linux","text":"类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。","text_tokens":["灵活","某","，","受","可视","并不一定","既定","ros","呈现出","这种","需求","就","逛来","功能","一直","不","来讲","和","大家","想象","款式","想要","场景","麻烦","一样","便捷","会","工具","这些","还是","科幻电影","比如","结合","成","一点","在","不是","看似","？","先","一定","、","类似","其他","但","逛去","小","服务","软件","此时","操作","规则","一件","看到","什么","。","哪","完全","中","定制","一个","总有","为什么","做好","所有","已经","约束","买","被","时候","这里","每次","现出","问题","多","材料","一种","方式","可以","商家","设计","自主","容易","异常","衣服","炫酷","商场","但是","命令行","等","来","布料","是","去","就是","电影","不可","里边","各种","现有","linux","使用","呀","解决","可视化","的","呢","能够","逛来逛去","看中","无论","为","对于","我们","自己","服装","不一","这样","你","根据","没有","呈现","于","一些","其上","并","起来","度高","精心设计","虽然","了","保留","什么样"," ","都","手","至今","必不可少","精心","片段","推出","命令","科幻","很多","满足"],"title":"Linux中的命令行","title_tokens":["命令行","的","linux","命令","中"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_1","text":"回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。","text_tokens":["背景","，","数量","一二十","深色","本","笔记本","死机","所在","及","就","觉得","选择","功能","terminal","列表","快捷键","大家","既","正常","魅力","快捷","会","用","工具","二十","令人","科幻电影","在","搜索","不用","不是","+","窗口","一定","笔记本电脑","令人发指","发指","原因","应用","t","一下","确实","其他","ctrl","alt","很少","多到","难以","到","怎么","软件","有","操作","背","看到","什么","。","参数","一二十个","因为","叫做","多种","中","为什么","右键","随身带","黑客","不到","输入","时候","需要","这项","慢慢","终端","启动","从来","后","上","方式","鼠标","通过","可以","枯燥","打开","一系","但是","硬","而是","写字","电脑","命令行","也","来","：","这","是","字符","就是","常用","电影","专门","看不到","至于","使用","不过","对","的","用到","呢","回到","随身","二十个","我们","很","一系列","十个","又","随着","所以","这个","即可","并","熟悉","指令"," ","系列","一二","都","体会","手","笔记","初次","记忆","命令","科幻"],"title":"启动方式","title_tokens":["启动","方式"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_2","text":"我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。","text_tokens":["拷贝","拷贝到","，","一边","则","管理员",">","由","及","就","语法","功能","或者","不","列表","大家","原有","…","一","该","均","编辑","不变","找","会","路径","用","这些","编辑器","先","新建","体验","当前工作","cp","及其","死记硬背","名称","mv","将","一下","sudo","查","绝对路径","/","pwd","当前","若","文件","gedit","文件名称","创建","常用命令","权限","移入","cd","统管","指定","子目","只是","。","[","目的","中","或","一个","所有","目录","需要","列出","下","改变","多","标目","某个","目标目录","可以","用户","显示","打开","<","件夹","文件名","也","感觉","来","系统管理员","：","子目录","系统","链接","保持","常用","文件夹","目","源文件","linux","”","的","它","目标","回到","此","为","我们","地","把","对于","以","另","复制到","工作","绝对","改名","没有","复制","未来","选项","多个","删除","了","熟悉","指令"," ","]","管理","mkdir","执行","死记","出","“","主目录","命令","rm","ls"],"title":"常用命令操作","title_tokens":["命令","操作","常用","常用命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2_1","text":"ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。","text_tokens":["的","，","总","下","接下来","大致","不同","还","内容","节点","跟","我们","核心","可以","以","就","为例","一系列","具体","话题","了解","功能","机制","后边","感受","一系","继续","集成","有","操作","命令行","下来","也","node","第一个","海龟","接下"," ","相同","表示","什么","小海","。","参数","系列","概念","与","都","体操","目的","中","第一","一个","topic","主要","干什么","比如","所有","小海龟","具体操作","ros2","仿真","linux","不过","命令","在","一起","对"],"title":"ROS2中的命令行","title_tokens":["命令行","的","ros2","命令","中"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_3","text":"想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["，","例如","运行","节点","我们","某个","控制","可以","teleop","turtle","和","操作","node","想要","海龟"," ","key","：","_","run","$","中","turtlesim","键盘","要","ros2","仿真","使用","命令","进行"],"title":"运行节点程序","title_tokens":["程序","节点","运行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_4","text":"当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim","text_tokens":["的","某","呢","，","它","详细信息","运行","ros","节点","兴趣","可以","就","list","啦","这样","/","当前","有","哪些","感兴","node","感兴趣","来"," ","查看","：","info","系统","都","$","中","一个","信息","turtlesim","详细","ros2","加上","？","子","知道","命令","如果","对"],"title":"查看节点信息","title_tokens":["节点","信息","查看"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_5","text":"当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose","text_tokens":["某","，","呢","的","pose","还","想","turtle1","list","话题","/","数据","当前","即可","消息","有"," ","如下","查看","看到","：","系统","都","$","中","试一试","一个","topic","echo","ros2","加上","使用","子","命令"],"title":"查看话题信息","title_tokens":["信息","话题","查看"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_6","text":"想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":[",","，","msgs","还","pub","turtle1","--","我们","通过","控制","cmd","可以","geometry","话题",":","2.0","/","vel","angular","1.8","twist","\"","msg","起来","发布","{","linear","y","z","命令行","想要","直接","海龟","指令"," ","x","：","}","_","$","0.0","1","topic","rate","ros2","命令","动"],"title":"发布话题消息","title_tokens":["发布","消息","话题"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_7","text":"一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\"","text_tokens":["spawn","，",",","'","调用","还","孤单","改了","我们","service","0.2","srv",":","/","theta","服务","—","\"","{","产生","y","再","来","name","海龟"," ","：","}","call","2","$","试一试","一个","turtlesim","提供","真器","仿真","ros2","一只","x","太","仿真器"],"title":"发送服务请求","title_tokens":["服务","请求","发送"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_8","text":"想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\"","text_tokens":["的","，","目标","rotate","action","turtle1","转","通过","让","可以","goal","具体",":","这样","/","theta","忙","这个","send","rotateabsolute","完成","到","发送","\"","命令行","absolute","想要","动作","海龟"," ","指定","：","_","$","中","一个","turtlesim","提供","比如","真器","角度","仿真","帮上","ros2","3","命令","仿真器"],"title":"发送动作目标","title_tokens":["动作","目标","发送"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_9","text":"系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["的","，","play","db3","35","回到","11","运行","turtle1","实现","04","把","段","复现","record","我们","很","cmd","录制","可以","自己","2022","尝试","啦","播放","/","vel","数据","实验","功能","看看","大家","rosbag","有","好","rosbag2","下来","再","想要"," ","bag","这","轻松","：","系统","如何","用","与","_","$","。","中","-","每","实验室",".","就是","常用","一个","40","17","还是","还有","ros2","某段","以上","？","子","命令","如果","0","很多"],"title":"录制控制命令","title_tokens":["控制","命令","录制"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","text":"ROS2开发环境配置 ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。 Git git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git 下载教程源码 《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。 VSCode Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download VSCode插件配置 为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。 中文语言包 Python插件 C++插件 CMake插件 vscode-icons ROS插件 Msg Language Support Visual Studio IntelliCode URDF Markdown All in One VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["提交","神兵","，","编译","众多","成千","官方","千上万","ros","不同","审核","内容","教程","准备","c++","硬件","不开","作为","就","入门","之间","几千","驱动","功能","不","和","大家","码云","com","vscode","扩展","复杂","编辑","cmake","_","会","用","示例","工具","支持","项目","便于","而生","一款","开发者","官方网","这些","有些","简称","编辑器","浏览","比如","判断","语言","intellicode","搜索","？","先","配置","无限","网站","方法","自动","、","管理工具","应用","记事","sudo","特性","install","快速","/","语言包","但","强大","等等","one","做","源码","—","文件","软件","msg","机器","重要","上万","千万","广泛应用","有","2015","轻量","操作","github","微软","官方网站","给","bug","看到","只","。","冲突","中","gitee","开发工具","一个","喜欢","机器人","提供","all","为了","非常","》","所有","几千万","urdf","离不开","国内","哪里","被","如果","这里","需要","环境","进行","download","终端","每次","tutorials","21","理工","多","成千上万","language","非常简单","方式","不会","因","《","可以","让","设计","修复",":","两款","搭建","guyuehome","最","下载方式","合并","听到","一系","人工","这款","讲","集成","件夹","也","迅速","贡献","发展","版本","clone","这","：","年","系统","如何","源代码","是","利器","visualstudio","链接","行","增加",".","推荐","之父","文件夹","里边","管理软件","新","ros2","以上","linux","使用","广泛","support","浏览器","丰富","的","呢","更","可能","visual","常听到","还","个人","apt","高效","我们","中文","下载","自己","开源","git","一行","肯定","操作系统","之后","一系列","markdown","具体","成为","这样","所以","自带","记事本","完成","icons","一些","并","代码","以及","安装","好","macos","多个","了","课程","直接","插件","调试","in"," ","windows","查看","人","https","编写","开发","linus","略显","后续","系列","切换","与","都","$","code","组件","管理","-","网上","中会","出","另外","studio","功能强大","大量","已有","简单","推出","命令","在","变更","很多","python"],"title":"ROS2开发环境配置","title_tokens":["ros2","开发","配置","环境"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros2","text":"ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。","text_tokens":["的","，","呢","、","编译","ros","准备","我们","git","不开","肯定","两款","做","源码","—","完成","一些","和","机器","代码","大家","重要","给","课程","vscode","查看","编写","开发","。","如何","示例","工具","开发工具","中会","机器人","提供","这些","推荐","离不开","大量","？","先","配置","需要","环境"],"title":"ROS2开发环境配置","title_tokens":["ros2","开发","配置","环境"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#git","text":"git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git","text_tokens":["提交","，","众多","成千","千上万","不同","内容","审核","硬件","就","之间","几千","驱动","功能","不","和","大家","码云","会","工具","项目","而生","一款","开发者","这些","有些","比如","判断","网站","方法","自动","管理工具","应用","sudo","特性","install","等等","—","软件","上万","千万","广泛应用","有","github","bug","看到","。","冲突","中","gitee","一个","非常","所有","几千万","国内","哪里","被","需要","进行","终端","每次","理工","成千上万","非常简单","不会","因","可以","让","设计","修复","合并","听到","人工","这款","也","迅速","贡献","发展","版本","这","系统","是","行","增加","之父","管理软件","新","linux","使用","广泛","的","可能","常听到","apt","高效","我们","开源","git","一行","肯定","之后","具体","所以","完成","并","代码","以及","安装","多个","了","直接"," ","人","linus","开发","切换","都","$","管理","已有","简单","命令","在","变更"],"title":"Git","title_tokens":["git"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_1","text":"《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。","text_tokens":["的","，","tutorials","21","更","多","还","浏览器","方式","下载","记事","《","git","就","入门",":","这样","/","guyuehome","下载方式","自带","源码","文件","记事本","—","讲","和","集成","代码","好","有","件夹","com","课程","vscode"," ","复杂","clone","https","查看","：","开发","略显","系统","_","会","是","用","$","。","中","gitee","一个",".","推荐","文件夹","浏览","里边","》","另外","ros2","如果","很多","这里","环境"],"title":"下载教程源码","title_tokens":["教程","下载","源码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode","text":"Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download","text_tokens":["的","，","神兵","、","visual","官方","下载","可以","download","操作系统","快速","成为",":","搭建","/","但","强大","功能","和","轻量","代码","2015","com","操作","微软","macos","官方网站","vscode","扩展"," ","windows","编辑","https","开发","年","。","系统","源代码","：","是","code","支持","组件","利器","项目","visualstudio","链接","一个","官方网",".","简称","编辑器","非常","studio","功能强大","linux","推出","在","丰富","网站"],"title":"VSCode","title_tokens":["vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode_1","text":"为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。","text_tokens":["的","，","还","我们","可以","一系列","功能","一系","安装","调试","vscode","插件","扩展","后续","开发","。","系列","与","便于","为了","ros2","无限"],"title":"VSCode插件配置","title_tokens":["vscode","插件","配置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_2","text":"","text_tokens":[],"title":"中文语言包","title_tokens":["中文","语言包","语言"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#python","text":"","text_tokens":[],"title":"Python插件","title_tokens":["插件","python"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#c","text":"","text_tokens":[],"title":"C++插件","title_tokens":["插件","c++"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#cmake","text":"","text_tokens":[],"title":"CMake插件","title_tokens":["cmake","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode-icons","text":"","text_tokens":[],"title":"vscode-icons","title_tokens":["-","vscode","icons"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros","text":"","text_tokens":[],"title":"ROS插件","title_tokens":["插件","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#msg-language-support","text":"","text_tokens":[],"title":"Msg Language Support","title_tokens":["msg","language"," ","support"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#visual-studio-intellicode","text":"","text_tokens":[],"title":"Visual Studio IntelliCode","title_tokens":["studio","visual"," ","intellicode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#urdf","text":"","text_tokens":[],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#markdown-all-in-one","text":"VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["的","，","众多","个人","自己","可以","最","大家","也","作为","vscode","插件","只","开发","。","支持","喜欢","网上","出","推荐","搜索","以上","在","配置","环境"],"title":"Markdown All in One","title_tokens":["markdown","all","in","one"," "]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/","text":"DDS Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。 通信模型 DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。 DDS DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。 什么是DDS 好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是Data Distribution Service，也就是数据分发服务，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。 DDS在ROS2中的应用 DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。 质量服务策略QoS DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是Domain，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为数据提供者和接收者之间的合约。 具体会有哪些策略？比如这个列表中描述的DEADLINE策略，表示通信数据必须要在每次截止时间内完成一次通信，HISTORY策略，表示针对历史数据的一个缓存大小，RELIABILITY策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式。 还有这个DURABILITY，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。 案例一：在命令行中配置DDS 我们先来试一试在命令行中配置DDS的参数。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort $ ros2 topic info /chatter --verbose 案例二：DDS编程示例 接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。 运行效果 $ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub 发布者代码解析 learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , }, 订阅者代码解析 learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], }, 参考链接 DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们课上主要带领大家认识DDS，更多使用方法和相关内容，课程配套的教程中会有介绍，大家也可以参考这里的链接进行学习。 https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["，","ros","选用","填充","on","强制","这种","0.5","由","好吃","情况","上边","前边","入门","就","第四","网络","驱动","高速","5g","兼容性问题","subscribernode","__","大家","靠","优势","强调","感兴","历史","进一步","处理速度","node","麻烦","名","learning","缓存","任","最为","databus","既然","shutdown","比如","world","（","程序","美国","？","先","可信","sub","描述","体","www",",","profile","接收","数以千计","快速","depth","大大","一套","做","—","int32","到","可","msg","en","优化","有","创建","居","给","类型","决策","接下","只","什么","omg","。","复用","四种","run","那个","非常","》","所有","神经网","重大","四大","提示","升级","时候","而言","信赖","msgs","服务端","问题","publish","并行","domain","默认","后","publishing","class","组成","可以","让","设计","位置","sysml","guyuehome","加入","无论如何","只有","循环","console","案例","说明","接口标准","许多","太多","命令行","点对点","publishernode","分组","掉","版本","durability","这","航拍","时","一条","字符","how","原则","构图","定时器","进入","宗旨","通路","implementations","新","树莓","真实","符合","适应","广泛","的","小组","能够","销毁","同一个","articles","我们","该用","保证","肯定","针对","过","成为","海军","办法","last","根据","所以","这个","能力","绑定","没有","丢失","授权","冰山一角","维护","main","）","感兴趣","模式","模块","建模语言","占用","utf","helloworld","hello","与","执行","那","history","神经网络","在","实时","供者","编译","者","提供者","发生","通信","需求","遥控","服务质量","解析","人机","选择","uml","之间","*","意思","交通","功能","合适","\\","第一种","建设","具体地址","参考","正常","能响","中间件","不变","docs","组成部分","等待","_","会","啥意思","用","学习","一步","门","便于","每","课","有些","主","成","不感兴趣","现在","要","没","交换","中间","某一","过去","接下来","课上","完整","subscription","节点","半天","向","应用","有点","几种","规模","特性","框架","其他","reliable","但","技术标准","服务","不管","互相","文件","points","分发","大大提高","尽量","下来","华为","遥控器","库","发送给","%","}","concepts","处于","8","topic","提到","价值","提供","字符串","至关","存在","verbose","如果","可信赖","需要","列出","logger","下","每次","21","多","setup","different","相关","一种","上","usr","集中处理","厂商","集中","通道","通过","行业","处","标准","过程","延时","行为",":","异常","打开","消息","国防","电脑","配套","设置","兼容","(","来","42","年","入个","链接","vendors","综合","请求","内","design","初始",".","差别","晚","ros2","企业","python3","定时","对","丰富","布式","尽可","焕然一新","就行","容性","qoshistorypolicy","它","bin","应该","个人","想","组织","无论","主讲","s","为","高效","--","开源","边","keep","为例","以","应用程序","spin","尽力","这样","使命","舰船","完成","于","下边","所","发布","无人机","回忆","4g","秒","分布式","listener","之上","结构","编写","开发","info","专利","流畅","$","像是","qosprofile","create","-","焕然","截止","到底","信息","全称","另外","关心","大量","corba","数据通","命令","很多","满足","灵活","众多","string","保障","不同","内容","教程","各个","控制","客户端","相当于","像","主讲人","流畅性","定义","务器","非常复杂","{","合约","com","每条","中心","无法","运转","关闭","速度","一","一样","name","复杂","增长","传输","可见","qos","deadline","试一试","主要","火锅","定位","有人","无用","语言","更加","帧","i","真正","周期","配置","送给","一定","最早","二","由于","拿","类似","必须","humble","统一","一下","包","模型",")","timer","发生变化","视频","样","软件","机器","广泛应用","二种","订阅","第三","保证数据","指定","org","理解","get","架构图","一个","about","关系","并且","带","其实","按照","这里","地址","进行","环境","带领","方式","实现","高通","service","来到","《","才能","输出","函数","传送","说了半天","它们","用户","#","同一","的话","本身","best","chatter","none","客户","策略","航空","之","哪些","避免","古月","也","旋转","等","驾驶","建模","一角","callback","如下","放在","：","系统","如何","是","行","第一","常用","echo","各种","专门","heard","不过","使用","解决","一次","收到","得","服务器","程度","呢","兼容性","相当","更","可能","蓝色","运行","变化","entry","自己","地","很","找到","转移","全局","具体","env","第三种","effort","一些","基本","我","处理","代码","而且","working","from","选项","指令"," ","with","作者","https","医疗","吃","图","self","都","认识","html","args","管理","第二","提","data","还有","预测","reliability","数据通信","“","知道","父类","接收者","连接数","三种","要求","更好","qosreliabilitypolicy","对象","当然","init","广播","bilibili","频繁","一旦","图像","话题","入口","之前","数据","初始化","上层","不好","multiple","无人","不","发送","和","所有人","列表","单位","导致","来看","通信模型","场景","第四种","运动","对应","出现","先进","distribution","destroy","示例","!","rmw","包含","这些","还是","至关重要","完整性","不用","不是","部分","一起","方法","自动","垂直","、","在于","将","核心","欢迎","架构","工业","rclpy","尝试","啦","/","建立","终于","接口","历史数据","资源","重要","大小","此时","底层","纠结","coding","1989","当于","动作","这么","性","只是","std","参数","py","生态","=","哪","效果","[","提高","中","生变","听说","或","机器人","第二种","为了","黑客","时间","讲到","已经","忽略","举","ros1","dds","video","'","编程","to","点","受到","兴趣","技术","派","类","效率","当","但是","加密","讲","回调","商业","单独","明显","感知","红色","黑入","日志","空间","冰山","连接","领域","bv12z4y167w2","就是","1","分布","性能","质量","”","能源","成立","通常","id","pub","神经","把","尽可能","那该","他们","guides","介绍","def","一新","影响","你","双方","例子","退出","\"","每个","并","2004","好","import","了","作为","课程","多个","直接","角色","broker","顺利","super","publisher","表示","]","@","整个","scripts","借助","中会","瓶颈","刚才","middleware","发布者","增多","python"],"title":"**DDS**","title_tokens":["*","dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds","text":"Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。","text_tokens":["的","，","它","、","相当","21","ros","变化","神经","主讲","实现","通信","我们","来到","《","欢迎","他们","前边","入门","过程","具体","话题","相当于","网络","主讲人","终于","服务","—","完成","讲","机器","我","大家","靠","好","底层","古月","当于","课程","来","动作"," ","。","系统","hello","是","都","学习","中","最为","机器人","》","讲到","ros2","神经网","重大","神经网络","dds","在"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_1","text":"DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。","text_tokens":["，","发生","通信","广播","这种","客户端","由","好吃","一旦","就","第四","之前","数据","第一种","和","具体地址","务器","所有人","优势","感兴","导致","每条","中心","无法","进一步","处理速度","运转","速度","麻烦","第四种","通信模型","正常","能响","增长","先进","会","可见","一步","databus","包含","有些","火锅","有人","在","不感兴趣","更加","不用","真正","一定","在于","节点","拿","类似","必须","核心","有点","几种","规模","架构","模型","框架","其他","建立","但","发生变化","服务","到","软件","二种","优化","订阅","第三","只","。","四种","中","生变","一个","提供","第二种","关系","非常","并且","所有","忽略","ros1","其实","dds","如果","这里","地址","进行","需要","列出","服务端","每次","问题","多","并行","一种","上","受到","集中处理","实现","集中","通道","兴趣","可以","处","传送","异常","效率","当","但是","许多","单独","客户","明显","消息","太多","之","也","旋转","很多","点对点","连接","这","时","系统","是","一条","请求","第一","行","常用","就是","通路","各种","性能","不过","使用","解决","收到","服务器","的","它","程度","更","能够","可能","应该","变化","想","为","我们","自己","很","找到","以","针对","具体","成为","这样","第三种","影响","双方","这个","没有","每个","所","并","处理","发布","而且","了","作为","感兴趣","角色"," ","broker","整个","吃","与","都","像是","第二","瓶颈","关心","知道","连接数","增多","三种"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_1","text":"DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。","text_tokens":["的","，","能源","自动","通常","方式","应用","通信","地","很","频繁","需求","广泛","可以","它们","之前","数据","交通","高速","和","并","广泛应用","感知","国防","航空","好","驾驶","等","决策"," ","模块","领域","医疗","。","满足","会","都","一个","借助","这些","定位","比如","非常","新","已经","存在","ros2","预测","不是","交换","dds","在","很多","需要"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_2","text":"好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是Data Distribution Service，也就是数据分发服务，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。","text_tokens":["灵活","，","对象","保障","当然","强制","通信","由","需求","服务质量","uml","网络","数据","意思","和","兼容性问题","强调","大家","中心","复杂","中间件","distribution","啥意思","课","比如","语言","现在","美国","？","中间","垂直","最早","、","完整","半天","应用","数以千计","统一","一下","啦","/","技术标准","一套","做","服务","可","分发","软件","订阅","1989","omg","。","中","听说","一个","价值","提供","已经","dds","升级","这里","环境","进行","问题","service","技术","可以","标准","行业","设计","说了半天","sysml","策略","也","兼容","等","来","建模","年","系统","是","就是","分布","各种","专门","真实","解决","质量","丰富","布式","容性","的","它","呢","兼容性","成立","可能","组织","为","我们","高效","地","介绍","以","过","成为","海军","使命","舰船","于","发布","2004","好","维护","分布式"," ","建模语言","开发","管理","到底","提","全称","data","还有","大量","corba","实时","满足"],"title":"什么是DDS","title_tokens":["是","什么","dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#ddsros2","text":"DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。","text_tokens":["，","选用","ros","通信","上边","就","选择","像","驱动","上层","功能","5g","不","和","建设","大家","场景","一样","对应","中间件","不变","组成部分","会","用","任","每","既然","还是","比如","至关重要","没","要","？","部分","中间","某一","、","由于","应用","统一","架构","工业","其他","建立","但","大大","接口","不管","可","软件","大大提高","重要","机器","尽量","有","此时","纠结","华为","给","这么","性","。","复用","生态","架构图","哪","提高","中","或","一个","提到","机器人","那个","至关","为了","所有","时间","四大","dds","如果","按照","这里","而言","需要","编程","问题","多","一种","上","高通","实现","厂商","技术","可以","标准","让","设计","函数","组成","过程","位置","用户","加入","无论如何","接口标准","商业","红色","也","兼容","来","版本","放在","系统","如何","是","原则","综合","构图","就是","差别","分布","进入","宗旨","性能","ros2","企业","符合","使用","对","布式","得","就行","容性","的","呢","兼容性","更","能够","可能","蓝色","个人","想","组织","无论","把","我们","自己","开源","该用","他们","保证","肯定","转移","边","具体","这样","影响","你","根据","所以","这个","能力","下边","基本","授权","代码","了","多个","4g","分布式"," ","之上","模块","开发","都","专利","那","刚才","middleware","在","很多"],"title":"DDS在ROS2中的应用","title_tokens":["的","ros2","应用","dds","在","中"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#qos","text":"DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是Domain，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为数据提供者和接收者之间的合约。 具体会有哪些策略？比如这个列表中描述的DEADLINE策略，表示通信数据必须要在每次截止时间内完成一次通信，HISTORY策略，表示针对历史数据的一个缓存大小，RELIABILITY策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式。 还有这个DURABILITY，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。","text_tokens":["，","要求","供者","众多","更好","ros","不同","各个","提供者","通信","控制","这种","情况","需求","遥控","图像","人机","选择","之间","网络","之前","数据","功能","不好","合适","流畅性","无人","定义","发送","和","不","列表","大家","历史","合约","导致","来看","通信模型","场景","运动","出现","传输","_","会","qos","deadline","缓存","用","门","便于","每","这些","无用","比如","成","帧","程序","要","完整性","？","先","命令","可信","一起","配置","描述","送给","一定","体","过去","完整","节点","接收","向","将","应用","必须","类似","特性","模型","快速","啦","reliable","视频","服务","历史数据","样","互相","资源","重要","机器","大小","尽量","有","此时","给","保证数据","遥控器","这么","指定","理解","发送给","。","参数","中","处于","一个","机器人","提供","那个","关系","黑客","时间","所有","举","带","dds","可信赖","如果","时候","需要","进行","下","信赖","每次","多","domain","默认","一种","实现","通过","才能","派","可以","让","过程","延时","行为","加入","只有","同一","的话","但是","best","加密","避免","策略","客户","哪些","电脑","黑入","空间","也","分组","掉","durability","航拍","入个","系统","如何","是","内","就是","晚","新","树莓","ros2","适应","使用","质量","对","一次","焕然一新","尽可","的","小组","呢","可能","id","同一个","为","我们","尽可能","地","保证","那该","应用程序","全局","针对","具体","尽力","这样","办法","一新","绑定","根据","这个","例子","没有","完成","effort","丢失","一些","基本","所","无人机","好","回忆","了","直接","模式","指令"," ","顺利","结构","占用","表示","图","流畅","都","焕然","截止","history","另外","还有","reliability","数据通信","数据通","接收者","在","满足"],"title":"质量服务策略QoS","title_tokens":["qos","质量","服务","策略"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_3","text":"我们先来试一试在命令行中配置DDS的参数。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort $ ros2 topic info /chatter --verbose","text_tokens":["的","msgs","pub","先","我们","--",":","reliable","/","int32","best","chatter","msg","\"","effort","命令行","来","42"," ","info","。","参数","std","_","qos","$","中","试一试","-","topic","echo","data","verbose","ros2","reliability","dds","命令","在","配置"],"title":"案例一：在命令行中配置DDS","title_tokens":["命令行","一","：","案例","dds","命令","在","配置","中"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_4","text":"接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。","text_tokens":["，","接下来","通信","我们","为例","以","尝试","话题","之前","代码","下来","接下"," ","。","hello","中","world","dds","在","配置"],"title":"案例二：DDS编程示例","title_tokens":["编程","二","案例","：","dds","示例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_2","text":"$ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub","text_tokens":["qos"," ","pub","ros2","learning","helloworld","_","run","$","sub"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_3","text":"learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , },","text_tokens":["，","编译","string","qosreliabilitypolicy","对象","填充","init","0.5","话题","*","数据","初始化","功能","__","{","单位","com","关闭","node","name","名","learning","destroy","等待","_","qos","示例","!","主","shutdown","world","（","程序","周期","配置",",","www","profile","、","节点","包","rclpy","reliable","/",")","depth","timer","接口","文件","points","msg","coding","创建","居","类型","库","get","std","%","py","}","=","[","中","8","字符串","一个","已经","提示","需要","进行","logger","'","msgs","publish","setup","后","点","usr","publishing","class","输出","让","函数",":","guyuehome","#","加入","类","循环","console","打开","说明","best","chatter","回调","none","消息","日志","古月","设置","(","publishernode","callback","如下","：","系统","字符","原则","初始",".","1","定时器","ros2","python3","定时","”","qoshistorypolicy","的","bin","pub","销毁","entry","s","为","keep","spin","env","last","def","退出","完成","\"","effort","发布","并","代码","import","from","）","main","选项","秒"," ","publisher","作者","utf","super","编写","info","helloworld","@","hello","self","入口","qosprofile","create","args","-","scripts","信息","执行","data","history","“","发布者","reliability","知道","父类","python"],"title":"发布者代码解析","title_tokens":["解析","发布","发布者","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_4","text":"learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], },","text_tokens":["，","编译","string","qosreliabilitypolicy","对象","者","init","话题","*","数据","初始化","功能","\\","定义","subscribernode","__","{","com","关闭","node","name","名","learning","destroy","等待","_","qos","示例","!","主","shutdown","world","（","程序","i","sub","配置",",","www","profile","、","subscription","节点","包","rclpy","reliable","/",")","depth","接口","文件","points","msg","订阅","coding","创建","居","类型","库","get","std","%","py","}","=","[","8","一个","提示","需要","进行","logger","'","msgs","setup","后","点","usr","class","输出","让","标准","函数",":","guyuehome","#","加入","类","循环","console","打开","说明","best","chatter","回调","none","消息","日志","古月","设置","(","callback","如下","：","系统","原则","初始",".","1","heard","ros2","python3","对","”","收到","qoshistorypolicy","的","bin","销毁","pub","entry","s","keep","spin","env","last","def","退出","完成","\"","effort","并","代码","处理","import","from","）","main","选项"," ","listener","作者","utf","super","编写","info","helloworld","@","]","hello","self","入口","qosprofile","create","args","-","scripts","信息","执行","data","history","“","reliability","知道","父类","python"],"title":"订阅者代码解析","title_tokens":["订阅","解析","代码","者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_5","text":"DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们课上主要带领大家认识DDS，更多使用方法和相关内容，课程配套的教程中会有介绍，大家也可以参考这里的链接进行学习。 https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["的","，","www","更","多","to","different","课上","内容","相关","教程","articles","ros","on","humble","bilibili","我们","guides","可以","介绍","进行",":","/","multiple","本身","和","非常复杂","大家","冰山一角","有","配套","en","working","也","com","bv12z4y167w2","课程","一角","冰山","参考","复杂"," ","https","org","docs","how","只是","。","with","系统","_","认识","是","这里","链接","学习","html","concepts","vendors","-","design","一个","主要","中会",".","about","rmw","非常","implementations","middleware","ros2","使用","dds","video","带领","方法"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/","text":"工作空间：开发过程的大本营 大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是工程。 工作空间是什么 类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做工作空间。 所以工作空间是一个存放项目开发相关文件的文件夹，也是开发过程中存放所有资料的大本营。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。 创建工作空间 了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 自动安装依赖 我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init & rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y 编译工作空间 依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。 设置环境变量 编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["某","，","编译","数量","ros","内容","教程","init",">","接触","如图所示","情况","就","可执行文件","之前","功能","或者","来讲","定义","和","一部","大家","强调","local","com","想要","变量","参考","一样","出现","所示","均","docs","_","会","用","某些","学习","工具","pip3","项目","环境变","社区","这些","里","比如","唯一","一点","程序","要","用于","不是","i","子","colcon","结果","workspace","部分","工具栏","中间","source","配置","自动","、","接下来","qt","任何","开始","名称","类似","humble","仅","sudo","包","creating","绝大","install","pip","~","啦","脚本","/","得到","很少","编写程序","大本","文件","当前","到","eclipse","点击","机器","en","有","此时","创建","操作","下来","rosdistro","缺少","a","接下","cd","看到","子目","org","什么","。","参数","&","build","叫做","中","空间结构","完全","一个","gitee","..","机器人","关系","为了","并且","所有","存在","3","path","目录","了解","log","错误","如果","这里","需要","进行","环境","成功","从","；","终端","tutorials","21","警告","setup","环境变量","后","相关","保存","不会","大部","工程","可以","让","允许","过程",":","guyuehome","#","rosdepc","sh","一部分","当","集成","bashrc","日志","产生","件夹","y","空间","也","等","存放","dev","四个","设置","至此","creator","如下","clone","概念","报错","：","子目录","这","时","系统","绝大部分","是","人为","依赖","链接","就是","1",".","update","echo","文件夹","典型","里边","各种","新","ros2","python3","以上","使用","”","的","能够","visual","运行","应该","大部分","rosdep","还","apt","src","--","我们","自己","下载","git","自动生产","找到","过","针对","否则","p","工作","手动","生效","ws","所以","这个","完成","\"","一些","并","代码","以及","资料","安装","未来","选项","from","了","多个"," ","后续","放置","https","结构","编写","开发","html","两个","都","2","$","像是","管理","w","信息","根目录","执行","总体","b","b2","mkdir","-","中会","大本营","另外","studio","“","并列","多少","生产","命令","在","行文"],"title":"**工作空间：开发过程的大本营**","title_tokens":["空间","的","过程","工作","*","大本营","大本","：","开发"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_1","text":"大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是工程。","text_tokens":["的","，","、","visual","qt","应该","内容","接触","我们","工程","就","过","工作","之前","编写程序","这个","文件","当","和","eclipse","集成","点击","大家","产生","有","此时","创建","件夹","选项","等","以及","想要","creator"," ","后续","放置","编写","开发","。","会","是","某些","学习","都","工具","叫做","中","一个","这些","文件夹","比如","里边","studio","新","所有","程序","“","在","工具栏","”","环境"],"title":"工作空间：开发过程的大本营","title_tokens":["空间","的","过程","工作","大本营","大本","：","开发"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_2","text":"类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做工作空间。 所以工作空间是一个存放项目开发相关文件的文件夹，也是开发过程中存放所有资料的大本营。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。","text_tokens":["某","，","编译","数量","ros","如图所示","情况","就","可执行文件","功能","或者","来讲","定义","和","一部","强调","一样","所示","_","会","用","某些","项目","里","比如","唯一","一点","要","用于","不是","子","结果","部分","中间","、","开始","名称","类似","绝大","install","脚本","得到","很少","大本","文件","到","机器","有","创建","操作","a","子目","。","参数","build","叫做","中","空间结构","完全","一个","机器人","关系","所有","存在","3","目录","log","错误","这里","需要","进行","环境","成功","；","警告","后","相关","保存","大部","工程","可以","允许","过程","一部分","集成","日志","件夹","产生","空间","也","等","存放","dev","四个","子目录","这","绝大部分","时","系统","：","人为","是","就是","1","文件夹","典型","各种","里边","新","以上","的","运行","大部分","src","我们","自己","针对","工作","ws","所以","这个","一些","并","代码","安装","资料","未来","了","多个","放置"," ","结构","编写","开发","两个","都","2","像是","管理","w","信息","根目录","执行","总体","b","b2","大本营","另外","并列","在","行文"],"title":"工作空间是什么","title_tokens":["是","工作","空间","什么"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_3","text":"了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git","text_tokens":["的","，","接下来","tutorials","21","教程","src","我们","下载","git","可以","p","~",":","工作","/","guyuehome","ws","和","代码","创建","空间","下来","dev","com","了","接下"," ","如下","cd","概念","clone","https","：","_","$","-","gitee","一个","mkdir",".","并且","ros2","使用","结果","命令","了解"],"title":"创建工作空间","title_tokens":["创建","空间","工作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_4","text":"我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init & rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y","text_tokens":["从","的","，","自动","rosdep","init","apt","src","humble","--","我们","下载","sudo","可以","install","pip","手动","rosdepc","一些","代码","安装","有","y","rosdistro","也","from","cd"," ","：","依赖","&","会","都","工具","$","pip3","中","-","社区","一个","..","update","各种","i","python3","多少","使用","path"],"title":"自动安装依赖","title_tokens":["自动","依赖","安装"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_5","text":"依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。","text_tokens":["成功","的","，","自动","编译","、","任何","应该","后","ros","apt","不会","sudo","自动生产","可以","就","install","过程","否则","啦","~","工作","/","ws","文件","完成","或者","代码","安装","有","件夹","空间","dev","了","缺少","出现","cd"," ","如下","报错","看到","log","：","。","依赖","_","build","$","中","-","中会","文件夹","在","python3","colcon","使用","生产","命令","如果","错误"],"title":"编译工作空间","title_tokens":["工作","空间","编译"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_6","text":"编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。","text_tokens":["成功","的","，","终端","编译","、","能够","setup","还","后","环境变量","配置",">","仅","我们","包","找到","让","就","install","~","可执行文件","/","#","生效","ws","工作","功能","sh","文件","当前","完成","\"","和","bashrc","local","创建","设置","dev","空间","至此","变量","了"," ","均","：","。","系统","_","$","环境变","执行",".","echo","为了","所有","在","行文","source","需要","环境"],"title":"设置环境变量","title_tokens":["设置","环境","变量","环境变量","环境变"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_7","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["-",".",":","tutorials","/","a"," ","ros","https","org","docs","workspace","humble","html","creating","en"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/","text":"功能包：开发过程的大本营 在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做功能包。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。 创建功能包 如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python 编译功能包 在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash 功能包的结构 功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。 C++功能包 首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。 Python功能包 C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["分享","新创建","除此之外","，","数量","编译","不同","当然","教程","移动","ros",">","分别","内容","之外","控制","c++","就","解析","耦合","语法","之间","可执行文件","声明","功能","划分","拿出","普通","不","三个","或者","type","和","大家","local","变量","name","率","一样","该","正常","参考","cmake","docs","learning","找","_","会","用","某些","名字","环境变","社区","主要","包含","这些","里","比如","还是","判断","语言","xml","要","程序","不是","colcon","？","型","workspace","一起","新建","配置","source","描述","方法","讲解","发现","很难","头疼","、","假设","行文","颜色","分析","名称","拿","将","必须","humble","包","creating","红豆","install","越","~","/","但","是不是","大本","文件","源码","到","黄豆","软件","points","机器","绿豆","重要","en","尽量","有","创建","豆子","规则","给","类型","版权","a","cd","看到","只","org","。","复用","py","build","叫做","中","提高","一颗","一个","机器人","关系","所有","存在","如果","时候","这里","需要","环境","下","；","终端","编程","tutorials","多","setup","必然","txt","环境变量","相关","看","才能","可以","过程","自主",":","#","cmakerlists","your","只想","导航","么","视觉","但是","当","说明","<","感知","放到","package","件夹","而是","空间","也","等","dev","举个","bash","来","包该","是否是","设置","编译成","别人","如下","版本","：","放在","c","时","如何","依赖","是","很快","这","链接","混合","手上","就是",".","文件夹","各种","里边","ros2","译成","使用","袋子","”","得","的","首先","呢","可能","运行","原理","新创","想","是否","entry","src","跟","把","我们","pkg","下载","--","他们","介绍","立刻","之后","出来","之一","工作","你","ws","所以","这个","例子","机制","完成","每个","起来","并","代码","继续","五颜六色","好","一些","包是","其中","了","降低","某种","指令"," ","后续","https","表示","包中","开发","编写","结构","html","两个","都","$","入口","create","-","信息","拆分","ament","执行","大本营","那","刚才","还有","“","cmakelists","除此","命令","在","很多","包并","first","python"],"title":"**功能包：开发过程的大本营**","title_tokens":["的","过程","*","大本营","功能","大本","开发","：","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_1","text":"在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做功能包。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。","text_tokens":["分享","，","数量","不同","当然","教程","移动","ros","控制","就","耦合","之间","功能","划分","拿出","普通","不","三个","大家","率","找","会","用","某些","社区","这些","里","比如","不是","一起","方法","发现","很难","头疼","、","假设","颜色","名称","拿","包","红豆","越","是不是","文件","源码","到","黄豆","软件","机器","绿豆","重要","尽量","有","豆子","给","看到","只","。","复用","叫做","中","提高","一颗","一个","机器人","关系","如果","时候","需要","；","多","可以","自主","只想","导航","么","视觉","但是","当","说明","感知","放到","件夹","而是","也","等","举个","包该","别人","放在","时","如何","是","很快","混合","手上","就是","文件夹","ros2","使用","袋子","得","的","可能","原理","想","把","我们","下载","他们","立刻","出来","之一","你","所以","这个","例子","机制","每个","起来","并","代码","五颜六色","其中","了","降低","某种"," ","包中","都","拆分","在","很多"],"title":"功能包：开发过程的大本营","title_tokens":["的","过程","大本营","功能","大本","：","开发","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_2","text":"如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python","text_tokens":["新创建","的","；","呢","，","终端","相关","新创",">","分别","src","跟","--","我们","pkg","包","c++","可以","就","~","/","#","ws","功能","这个","或者","<","和","type","package","创建","dev","包是","name","指令"," ","cd","版本","cmake","表示","：","c","。","learning","如何","build","_","$","名字","create","中","-","一个","ament","还是","那","比如","ros2","？","使用","如果","命令","在","新建","这里","python"],"title":"创建功能包","title_tokens":["创建","包","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_3","text":"在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash","text_tokens":["的","，","编译","setup","运行","环境变量","source","src","我们","包","才能","可以","之后","install","~","/","#","工作","ws","功能","完成","和","继续","代码","local","好","创建","空间","dev","变量","bash","cd","正常"," ","包中","编写","：","_","build","$","环境变",".","所有","colcon","在","配置","需要","环境"],"title":"编译功能包","title_tokens":["包","功能","编译"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_4","text":"功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。","text_tokens":["新创建","的","，","呢","下","分析","新创","是否","我们","包","功能","文件","普通","件夹","创建","来","是否是","结构","。","如何","两个","一个","文件夹","那","判断","刚才","不是","？","包并"],"title":"功能包的结构","title_tokens":["结构","包","的","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#c","text":"首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。","text_tokens":["下","首先","的","，","编译","txt","必然","运行","内容","看","必须","包","才能","c++","语法","cmakerlists","声明","功能","所以","文件","和","代码","package","规则","设置","其中","类型","版权","该"," ","如下","需要","cmake","：","。","依赖","如何","两个","是","中",".","主要","包含","各种","xml","存在","要","cmakelists","使用","在","描述"],"title":"C++功能包","title_tokens":["包","c++","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#python","text":"C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。","text_tokens":["的","，","除此之外","编程","编译","setup","不同","内容","配置","之外","entry","将","我们","包","c++","介绍","解析","可执行文件","但","声明","功能","所以","源码","文件","但是","不","points","一些","和","描述","package","大家","有","也","给","版权","一样","编译成"," ","后续","版本","这","：","。","py","依赖","会","是","两个","_","入口","讲解","如何","中","信息","执行",".","主要","包含","各种","语言","里边","xml","还有","程序","译成","“","型","除此","使用","在","行文","”","需要","python"],"title":"Python功能包","title_tokens":["包","功能","python"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_5","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["tutorials","ros","humble","creating",":","/","your","en","package","a"," ","org","https","docs","html","-",".","ros2","workspace","first"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/","text":"节点 机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。 通信模型 完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。 案例一：Hello World节点（面向过程） ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。 运行效果 大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ], 创建节点流程 代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。 案例二：Hello World节点（面向对象） 所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。 运行效果 下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ], 创建节点流程 所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。 案例三：物体识别节点 没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。 运行效果 在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。 代码解析 在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ], 案例四：机器视觉识别节点 用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。 运行效果 启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 注意：如果是在虚拟机中操作，需要进行以下设置： 把虚拟机设置为兼容USB3.1； 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。 代码解析 相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ], 节点命令行操作 节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息 思考题 现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["某","，","厂房","ros","之外","还会","分别","128","180","circle","这种","0.5","硬件","就","像素","驱动","__","部门","大家","方便","node","桌子","虚拟","learning","名字","最为","既然","shutdown","比如","world","（","程序","？","结果","先",",","www","一节","图像识别","四","每一项","腿","推动","开始","上限","sudo","左上","坐标","算机","做","image","苹果","—","到","可","en","有","创建","居","编程语言","给","云端","接下","。","run","心里","马","videocapture","读取","休眠","打印","细胞","摇杆","时候","而言","考题","启动","像头","问题","tutorials","一项","经常","upper","boundingrect","后","好像","看","生成","jpg","class","组成","可以","让","设计","疑惑","guyuehome","加入","循环","console","案例","说明","<","命令行","这","模块化","时","字符","自然","改成","red","所以然","h","的","回到","销毁","是否","mask","我们","对于","cv2","过","孤立","成为","着急","重点","approx","后勤部门","根据","所以","这个","关注","移植性","却","任务","main","）","编码方式","获取","in","宽","某种","查看","utf","模块","helloworld","for","hello","ret","drawcontours","执行","那","算是","计算","简单","在","实时","联系","除此之外","编译","可视","太小","发生","通信","所在","设备","解析","之间","可执行文件","*","功能","if","载体","远程","参考","该","正常","docs","等待","_","会","路径","某些","学习","用","眼睛","每","来源","里","主","中将","没","现在","要","+","0","中间","窗口","一线","发现","inrange","ok","接下来","图像处理","颜色","完整","分析","节点","名称","5","前后左右","整体","install","框架","身体","点画","但","得到","编写程序","此处","文件","互相","points","color","看上","hierarchy","cap","下来","再","a","状态","库","流程","8","字符串","提供","findcontours","进程","chain","物体","如果","被","需要","logger","下","；","多","setup","21","上","usr","一种","通过","工人","过程",":","true","思考题","255","视觉","看看","打开","显示","usb3.1","电脑","设置","兼容","(","来","二值化","移植","左右","链接","综合","保持","初始",".","合理","动态","ros2","python3","imshow","布式","前","例程","它","bin","还","应该","会弹","src","为","imread","为例","以","操作系统","spin","list","destroyallwindows","这样","工作","绿色","完成","即可","发布","其中","分布式","结构","编写","info","开发","然后","修改","2","$","入口","至","b","-","信息","到底","保持联系","命名","apple","另外","可移植","150","命令","更为","这座","行文","众多","比喻","img","不同","保障","想到","后勤","cnt",">","控制","轮廓","前后","只不过","及","像","检测","或者","{","com","numpy","中心","关闭","速度","一","一样","name","复杂","相同","nodes","相机","先拉","稍微","cvtcolor","更多要","语言","更加","一点","可读","周期","知其所以然","配置","understanding","50","二","实际","类似","hsv","humble","一下","包","模型",")","机器","物理","看到","org","理解","get","叫做","多种","一个","这份","并且","工厂","思考","这里","环境","进行","成功","上角","改变","xy","方式","实现","框会","岂","输出","步骤","函数","上去","#","各不相同","的话","none","webcam","ruby","溜溜","古月","也","等","dev","处理过程","过来","如下","概念","噪声","：","放在","系统","如何","具备","是","人为","一张","int","去","勾勒","常用","各种","90","使用","不过","太","可视化","得","收到","呢","更","可能","运行","阈值","共同","变化","entry","很","找到","理过","env","具体","出来","机制","可读性","一些","面向对象","起来","取","代码","编码","处理","依然","未来","识别","from","选项","中心点","调试","计算机","左上角","指令"," ","独立","作者","https","认识","self","都","两个","html","args","摄像","请","总体","合体","还有","“","更多","除此","搭载","知道","父类","更好","没错","detect","对象","当然","init","移动","java","c++","图像","continue","之前","初始化","不","发送","和","列表","而已","最大","来看","通信模型","想要","运动","以下","出现","轮子","destroy","乃至","示例","!","看上去","这些","还是","唯一","三","as","不用","不是","bgr","转换","home","一起","负责","方法","、","contours","同理","object","面向","不要","注意","将","opencv","模拟","吧","相比","rclpy","retr","可移植性","啦","/","框架图","是不是","接口","去除","重要","纠结","coding","操作","面积","摄像头","lower","只是","参数","py","=","[","效果","中","机器人","sleep","time","时间","read","位于","x","为止","array","从","'","终端","编程","waitkey","点","地方","图片","数值","职责","总结","后勤部","不能","类","np","当","但是","绿点","这款","日志","红色","重新","y","难","综合体","四个","连接","shape","范围","调整","就是","1","分布","推荐","做到","helloworldnode","虚拟机","角度","呀","”","hcx","用到","bgr2hsv","高","apt","把","一台","他们","介绍","pyhton","def","外界","你","ws","退出","监控","\"","每个","并","好","安装","虽然","import","了","课程","知其然","熟悉","总体而言","骡子","关于","]","super","while","表示","查询","@","就让","一帧","w","scripts","网上","出","刚才","下限","python"],"title":"**节点**","title_tokens":["节点","*"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_1","text":"机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。","text_tokens":["的","，","众多","一项","每一项","ros","节点","我们","通过","就","整体","成为","工作","像","功能","机制","到","一些","机器","取","综合体","了","给"," ","连接","。","是","名字","综合","中","一个","就是","机器人","合体","这些","各种","那","“","细胞","在","一起","”"],"title":"节点","title_tokens":["节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_2","text":"完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。","text_tokens":["除此之外","，","某","编译","比喻","厂房","不同","保障","移动","之外","还会","想到","分别","后勤","控制","前后","java","c++","硬件","就","可执行文件","功能","或者","不","和","部门","载体","远程","来看","想要","速度","运动","桌子","该","复杂","相同","轮子","某些","乃至","眼睛","每","里","这些","既然","比如","语言","唯一","程序","不是","结果","一起","配置","一线","、","接下来","腿","完整","推动","节点","名称","前后左右","整体","身体","但","得到","算机","做","—","文件","到","互相","机器","有","物理","操作","下来","编程语言","a","云端","状态","看到","摄像头","接下","。","参数","叫做","中","一个","机器人","提供","工厂","进程","位于","细胞","摇杆","时候","需要","环境","从","；","像头","编程","多","上","地方","生成","实现","职责","通过","组成","可以","让","工人","设计","后勤部","各不相同","看看","当","这款","ruby","也","等","来","连接","：","放在","左右","系统","这","时","人为","是","如何","自然","去","就是","分布","角度","布式","”","更为","的","它","更","可能","运行","还","共同","我们","一台","他们","找到","操作系统","具体","这样","外界","工作","后勤部门","你","根据","这个","监控","完成","每个","并","却","这座","任务","虽然","了","获取","计算机","分布式"," ","独立","查询","认识","都","摄像","b","信息","执行","到底","命名","那","另外","算是","计算","还有","“","除此","搭载","在","行文","python"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world","text":"ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。","text_tokens":["从","的","，","终端","当然","开始","节点","实现","我们","编写程序","功能","循环","到","不","并","了","来"," ","需要","复杂","编写","。","hello","是","字符","中","最为","一个","就是","字符串","world","程序","ros2","简单","“","打印","先","”","例程"],"title":"案例一：Hello World节点（面向过程）","title_tokens":["过程","）","一","world"," ","（","节点","：","案例","面向","hello"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_3","text":"大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["成功","的","，","下","终端","编译","运行","分析","后","看","节点","不要","实现","我们","通过","可以","过程","出来","着急","所以","这个","循环","代码","大家","好","溜溜","也","再","node","课程","来","知其然","骡子"," ","看到","learning","。","helloworld","然后","如何","_","run","是","先拉","效果","$","hello","中","字符","执行","字符串","做到","马","world","在","所以然","ros2","“","打印","先","命令","知其所以然","”"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_4","text":"这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ],","text_tokens":["，","编译","对象","init","控制","0.5","*","初始化","功能","{","com","来看","关闭","node","正常","learning","destroy","_","示例","!","主","shutdown","world","程序","？","配置",",","www","ok","节点","面向","包","rclpy","/",")","接口","文件","points","coding","创建","居","库","get","。","py","=","[","8","sleep","time","时间","休眠","需要","进行","logger","下","'","setup","后","点","usr","方式","实现","输出","让","函数","过程",":","guyuehome","#","加入","类","循环","console","打开","说明","none","日志","古月","设置","(","如下","：","系统","如何","是","初始",".","ros2","python3","使用","”","的","呢","bin","运行","销毁","是否","entry","我们","env","def","这个","完成","\"","发布","代码","并","import","from","main","选项"," ","]","作者","utf","while","编写","info","helloworld","@","hello","入口","args","-","scripts","信息","“","知道","python"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_5","text":"代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。","text_tokens":["发现","的","用到","，","编程","更","机器","经常","销毁","应该","节点","面向","方式","实现","我们","这种","一下","对于","很","c++","可以","函数","pyhton","过","总结","过程","具体","就","这样","初始化","做","接口","功能","的话","或者","但是","重要","代码","大家","编码","并","纠结","有","未来","创建","虽然","难","关闭","想要","出现"," ","复杂","理解","模块","：","。","模块化","系统","流程","会","是","学习","中","一个","初始","稍微","机器人","做到","一点","不用","简单","使用","先","如果","这里","方法"],"title":"创建节点流程","title_tokens":["创建","节点","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world_1","text":"所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。","text_tokens":["的","，","编程","更好","更","对象","面向","方式","我们","可以","就","上去","可移植性","这样","所以","但是","可读性","面向对象","一些","和","代码","大家","看上","移植性","起来","方便","虽然","也","了","调试"," ","复杂","移植","开发","。","会","具备","中","改成","看上去","推荐","比如","刚才","更加","可移植","ros2","使用","可读","在"],"title":"案例二：Hello World节点（面向对象）","title_tokens":["）","二","world","对象"," ","（","节点","案例","：","面向","hello","面向对象"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_6","text":"下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["成功","的","，","终端","运行","后","节点","一下","class","可以","循环","下来","node"," ","看到","：","learning","helloworld","。","_","hello","run","字符","$","效果","中","调整","字符串","还是","world","ros2","“","打印","在","”"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_7","text":"功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ],","text_tokens":["，","编译","对象","init","发生","控制","0.5","*","初始化","功能","__","{","com","关闭","node","name","一样","正常","learning","destroy","等待","_","示例","!","主","shutdown","world","程序","配置",",","www","ok","节点","面向","一下","包","rclpy","/",")","接口","文件","points","coding","创建","居","库","get","。","py","=","[","8","一个","这份","sleep","time","时间","休眠","需要","进行","logger","'","setup","后","点","看","usr","方式","实现","class","输出","让","函数",":","guyuehome","#","加入","类","循环","console","打开","但是","说明","none","日志","古月","设置","(","如下","：","时","系统","初始",".","helloworldnode","ros2","python3","使用","”","的","bin","运行","销毁","变化","是否","entry","我们","spin","具体","env","def","退出","完成","\"","面向对象","发布","代码","并","虽然","import","from","main","了","选项"," ","]","作者","utf","结构","super","while","helloworld","@","info","hello","self","编写","入口","args","-","scripts","信息","“","知道","父类","python"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_8","text":"所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。","text_tokens":["的","，","改变","编程","销毁","节点","方式","实现","步骤","吧","得","只不过","具体","疑惑","是不是","不能","初始化","所以","做","接口","功能","到","完成","一些","并","机器","而已","编码","大家","依然","创建","任务","四个","编码方式","了","关闭","总体而言"," ","这","。","只是","hello","是","心里","中","总体","初始","一个","机器人","world","还有","不是","不过","打印","为止","这里","而言"],"title":"创建节点流程","title_tokens":["创建","节点","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_9","text":"没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。","text_tokens":["从","的","，","接下来","没错","实际","节点","图片","实现","我们","通过","模拟","找到","为例","以","就","过程","苹果","视觉","机器","识别","任务","下来","来","接下"," ","编写","。","一张","中","网上","一个","机器人","先"],"title":"案例三：物体识别节点","title_tokens":["识别","三","节点","：","案例","物体"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_10","text":"在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。","text_tokens":["，","编译","可视","轮廓","就","图像","中心","node","learning","_","路径","home","中间","窗口","图像处理","实际","object","注意","将","opencv","sudo","install","啦","/",")","image","苹果","—","库","看到","。","py","=","run","中","一个","被","需要","成功","'","tutorials","21","后","图片","框会","jpg","可以","#","绿点","重新","dev","(","如下","：","勾勒",".","ros2","python3","使用","hcx","前","例程","可视化","用到","的","运行","apt","会弹","src","为","我们","把","imread","cv2","出来","ws","这个","绿色","即可","代码","处理","安装","识别","中心点","指令"," ","表示","然后","修改","$","-","请","出","apple","在"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_11","text":"在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ],","text_tokens":["，","编译","img","detect","对象","init","128","太小","180","cnt","circle","轮廓","所在","及","图像","像素","*","continue","检测","初始化","功能","和","if","大家","{","com","numpy","中心","关闭","node","出现","learning","destroy","等待","_","示例","!","cvtcolor","主","shutdown","更多要","程序","as","bgr","不是","转换","+","home","0","配置","inrange",",","www","图像处理","图像识别","contours","颜色","节点","object","5","上限","hsv","将","opencv","模拟","包","左上","rclpy","模型","retr","坐标","点画","/",")","得到","image","此处","苹果","接口","去除","文件","points","机器","color","coding","hierarchy","居","创建","库","面积","lower","get","。","py","=","[","效果","中","一个","8","机器人","findcontours","读取","chain","x","需要","array","进行","logger","从","上角","xy","'","tutorials","21","setup","upper","boundingrect","waitkey","后","点","usr","图片","数值","实现","jpg","通过","class","让","函数","过程",":","guyuehome","#","加入","类","255","np","循环","console","显示","说明","<","none","打开","红色","y","古月","dev","设置","(","来","处理过程","如下","二值化","概念","噪声","：","shape","如何","范围","是","系统","int","勾勒","1",".","初始","red","ros2","python3","90","使用","imshow","hcx","例程","h","的","bgr2hsv","高","bin","销毁","阈值","entry","src","mask","为","我们","imread","理过","cv2","list","destroyallwindows","具体","env","def","重点","approx","出来","spin","ws","这个","退出","关注","完成","\"","一些","并","代码","处理","识别","import","from","宽","了","in","main","选项","左上角","关于"," ","]","作者","utf","编写","info","@","for","helloworld","2","入口","drawcontours","args","-","w","scripts","apple","下限","计算","150","更多","知道","在","python"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_12","text":"用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。","text_tokens":["的","，","像头","问题","接下来","好像","还","应该","颜色","节点","图片","类似","我们","图像","物体","苹果","或者","不","机器","有","识别","下来","其中","接下","摄像头","。","用","就让","眼睛","摄像","合理","机器人","动态","没","读取","呀","太","进行"],"title":"案例四：机器视觉识别节点","title_tokens":["识别","四","节点","视觉","案例","：","机器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_13","text":"启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 注意：如果是在虚拟机中操作，需要进行以下设置： 把虚拟机设置为兼容USB3.1； 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。","text_tokens":["成功","的","启动","终端","，","像头","；","运行","后","节点","object","移动","注意","把","为","设备","可以","就","啦","#","驱动","可","usb3.1","webcam","红色","识别","设置","操作","兼容","node","以下","该"," ","如下","摄像头","虚拟","连接","：","learning","。","_","run","是","$","至","中","摄像","一个","中将","并且","虚拟机","在","ros2","物体","如果","实时","需要","进行"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_14","text":"相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ],","text_tokens":["，","编译","img","detect","对象","init","128","太小","180","cnt","circle","轮廓","所在","及","图像","像素","*","之前","驱动","检测","continue","初始化","功能","和","if","{","com","最大","numpy","中心","关闭","node","出现","learning","destroy","_","相机","示例","!","来源","cvtcolor","主","shutdown","程序","as","bgr","转换","+","周期","0","配置","inrange","50",",","www","ok","图像处理","contours","颜色","节点","object","5","上限","hsv","将","opencv","包","相比","左上","rclpy","模型","retr","坐标","点画",")","/","得到","image","接口","苹果","去除","文件","points","color","coding","hierarchy","居","创建","cap","库","面积","摄像头","lower","get","。","py","=","[","效果","中","8","并且","findcontours","videocapture","读取","read","chain","x","这里","需要","进行","array","logger","从","上角","xy","像头","'","setup","upper","boundingrect","waitkey","后","点","图片","usr","数值","通过","class","让","函数",":","guyuehome","#","true","加入","类","255","np","console","显示","说明","<","none","打开","webcam","红色","y","古月","设置","(","来","如下","二值化","噪声","：","shape","范围","系统","是","int","勾勒","1",".","初始","red","ros2","python3","90","使用","imshow","h","的","bgr2hsv","高","bin","销毁","阈值","变化","entry","mask","为","cv2","list","env","出来","def","approx","完成","\"","一些","并","代码","处理","识别","from","import","宽","了","in","main","选项","左上角"," ","]","作者","utf","while","编写","info","@","for","helloworld","修改","2","入口","ret","一帧","drawcontours","args","摄像","-","信息","w","scripts","下限","计算","150","知道","python"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_15","text":"节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息","text_tokens":["的","节点",">","list","#","<","列表","操作","node","name"," ","如下","查看","：","info","_","$","常用","信息","ros2","命令"],"title":"节点命令行操作","title_tokens":["命令","节点","操作","命令行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_16","text":"现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。","text_tokens":["，","没错","ros","还会","控制","就","图像","之间","发送","和","大家","想要","运动","速度","会","最为","这些","比如","现在","要","不是","配置","负责","方法","发现","一节","同理","开始","节点","将","框架","框架图","机器","有","给","a","看到","摄像头","。","参数","中","多种","一个","机器人","细胞","如果","摇杆","下","改变","像头","问题","后","一种","实现","岂","显示","电脑","过来","概念","连接","这","系统","保持","常用","得","收到","的","回到","应该","把","我们","很","他们","介绍","孤立","工作","这个","机制","并","了","某种","熟悉","指令"," ","两个","b","摄像","保持联系","另外","在","联系"],"title":"思考题","title_tokens":["思考","考题","思考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_17","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["-",".",":","tutorials","/","ros","https","org","docs","ros2","nodes","humble","html","en","understanding"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/","text":"话题 节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。 通信模型 以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。 发布/订阅模型 从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为发布者，接收数据的对象称之为订阅者，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。 多对多通信 大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。 异步通信 话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。 消息接口 最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过.msg后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。 案例一：Hello World话题通信 了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 运行效果 启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。 发布者代码解析 我们来看下发布者的实现方法。 程序实现 learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口 订阅者代码解析 我们再来看下订阅者的实现方法。 程序实现 learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。 案例二：机器视觉识别 在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。 运行效果 这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。 发布者代码解析 learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], }, 订阅者代码解析 learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], }, 案例三：机器视觉识别优化 通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub 话题命令行操作 话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息 思考题 关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？ 参考链接 https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["不太","某","，","数量","ros","填充","128","分别","180","circle","这种","0.5","sensor","硬件","就","像素","驱动","来讲","subscribernode","__","大家","英文","感兴","发出","node","进一步","名","一句","learning","原本","名字","最后","既然","shutdown","比如","生活","world","（","程序","exe","？","先","sub","描述",",","www","从而","公众","开始","接收","每换","上限","sudo","左上","数据传输","随处可见","坐标","做","image","苹果","到","msg","en","有","优化","创建","居","编程语言","积木","给","类型","画面","接下","只","长宽","什么","。","复用","run","根本","几乎","桥梁","万缕","所有","videocapture","接收数据","读取","提示","了解","之为","摇杆","时候","考题","启动","msgs","问题","publish","tutorials","必然","upper","boundingrect","好像","后","看","publishing","异步","class","自行","可以","让","组成","设计","最","guyuehome","加入","循环","console","案例","么","说明","<","化成","命令行","第一个","publishernode","这","模块化","阅读","字符","自然","定时器","块","red","进入","符合","以上","h","的","能够","销毁","是否","mask","我们","对于","保证","肯定","cv2","成为","另","换","approx","转换成","写","这个","没有","解","移植性","main","）","感兴趣","获取","in","某种","宽","什么样","查看","utf","模块","后缀","helloworld","for","hello","与","ret","各样","drawcontours","执行","固定","那","计算","第一次","在","实时","联系","他会","编译","可视","稍后","拼接","词","者","太小","通信","耦","！","所在","设备","需求","解析","之间","东西","*","功能","合适","\\","type","if","参考","该","不变","docs","等待","_","会","用","某些","一步","每","里","主","成","没","现在","要","用于","逻辑","带宽","+","打","0","讲解","传递","inrange","接下来","图像处理","优先","颜色","分析","subscription","节点","名称","5","cam","特性","叫","install","点画","思想","但","得到","想下","一份","文件","points","互相","color","hierarchy","cap","下来","不行","再","a","只要","库","指","采集","%","}","bw","流程","topics","据传","8","字符串","topic","cvbridge","findcontours","存在","chain","物体","如果","被","哪里","需要","logger","下","imagesubscriber","多","setup","个","一种","上","usr","转化","通过","标准","过程",":","做成","程序实现","true","255","号","思考题","视觉","显示","打开","消息","设置","(","来","二值化","移植","链接","传感","内","保持","初始",".","ros2","python3","定时","imshow","对","杂志","焕然一新","例程","它","目标","bin","应该","还","单向","想","组织","无论","s","为","一行","为例","以","spin","list","区分","这样","比方","完成","即可","发布","同学","所谓","其中","10","秒","listener","结构","编写","较强","队列","info","挺","开发","修改","2","$","入口","频率","create","b","-","信息","焕然","另外","可移植","150","命令","receiving","很多","满足","数据类型","格式","img","string","同样",">","cnt","控制","轮廓","第二个","及","像","检测","感器","定义","{","千丝万缕","com","numpy","中心","无法","关闭","一","name","一样","率","复杂","传输","不知","可见","相机","cvtcolor","语言","i","周期","配置","understanding","一定","二","任何","类似","hsv","humble","统一","一下","包","模型","不然",")","timer","视频","软件","周期性","机器","方向","订阅","看到","排版","理解","raw","get","org","控制指令","各种各样","叫做","一个","关系","并且","对劲","传递数据","思考","3","这里","进行","成功","上角","xy","一篇","建议","方式","实现","输出","才能","谁","函数","基本原理","长度","用户","传感器","#","魔性","的话","通用","本身","平时","chatter","none","webcam","一般","古月","也","callback","如下","发送数据","概念","rgb","噪声","：","系统","如何","协议","是","联系方式","int","第一","勾勒","常用","0.1","echo","各种","报社","heard","知识","90","使用","不过","太","一次","可视化","收到","得","呢","逻辑性","听","更","可能","运行","原理","阈值","变化","entry","bgr8","自己","中文","拍摄","本原","之后","env","出来","cv","又","中是","一些","继续","基本","代码","处理","识别","未来","from","选项","放入","接口定义","左上角","指令"," ","独立","作者","https","self","两个","都","html","args","换成","第二","usb","data","还有","“","知道","父类","出去","要求","更好","接口协议","没错","detect","对象","当然","init","小编","图像","话题","之前","数据","就要","初始化","continue","不","发送","和","列表","想象","单位","来看","frame","通信模型","想要","运动","以下","对应","destroy","示例","!","包含","这些","还是","唯一","三","as","转换","不是","bgr","文章","称之为","值","方法","、","contours","二个","已","数据结构","说干就干","注意","object","将","opencv","imgmsg","rclpy","retr","啦","可移植性","/","bridge","留","是不是","等等","接口","去除","千丝","重要","此时","coding","操作","面积","lower","std","参数","py","=","[","效果","因为","基于","中","听说","随处","完全","提高","机器人","无关","已经","举","read","dds","x","video","仔细","array","从","'","终端","编程","适合","to","waitkey","点","数值","兴趣","总结","不能","类","np","但是","回调","讲","集成","日志","红色","y","感觉","shape","范围","微信","就是","1","精简","做到","报纸","角度","是从","呀","过瘾","”","bgr2hsv","高","几个","pub","并不知道","在生活中","apt","把","更换","def","渲染","一新","你","退出","例子","监控","\"","每个","并","说","好","安装","似乎","虽然","import","了","作为","多个","直接","优先级","关于","publisher","super","人","]","间","@","一帧","w","scripts","下限","刚才","发布者","imagepublisher","转化成","hz","python"],"title":"**话题**","title_tokens":["*","话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_1","text":"节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。","text_tokens":["的","，","它","节点","一种","方式","实现","话题","之间","最","但","数据","功能","千丝","并","机器","重要","千丝万缕","有","其中","了"," ","独立","间","。","会","各种各样","是","联系方式","各样","就是","机器人","这些","桥梁","万缕","各种","传递数据","不是","传递","联系"],"title":"话题","title_tokens":["话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_2","text":"以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。","text_tokens":["某","，","可视","没错","ros","设备","硬件","就","图像","话题","之间","驱动","数据","功能","大家","传输","相机","要","不是","？","传递","称之为","节点","将","一下","数据传输","得到","是不是","做","视频","到","机器","方向","有","此时","给","a","。","据传","中","一个","机器人","关系","桥梁","存在","之为","从","必然","上","方式","实现","才能","可以","用户","显示","这","是","可视化","的","它","想","我们","拍摄","为例","以","这样","渲染","这个","监控","了","获取","作为","某种"," ","查看","两个","b","信息","在","实时"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_3","text":"从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为发布者，接收数据的对象称之为订阅者，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。","text_tokens":["他会","格式","，","要求","对象","者","小编","就","话题","数据","发送","和","大家","感兴","来看","无法","传输","会","可见","名字","每","比如","生活","成","？","打","文章","称之为","、","公众","节点","接收","名称","类似","特性","叫","数据传输","模型","随处可见","/","等等","到","机器","有","订阅","居","类型","排版","什么","。","据传","基于","叫做","随处","一个","机器人","接收数据","dds","如果","之为","需要","从","看","实现","兴趣","可以","号","的话","本身","平时","古月","也","发送数据","是","微信","自然","就是","报纸","角度","是从","知识","使用","对","”","收到","杂志","的","它","呢","应该","在生活中","组织","把","之后","成为","这样","比方","这个","没有","发布","好","了","感兴趣"," ","都","固定","另外","“","发布者","出去","数据类型"],"title":"发布/订阅模型","title_tokens":["订阅","/","发布","模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_4","text":"大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。","text_tokens":["，","数量","没错","ros","者","通信","控制","话题","东西","不","发送","和","大家","想象","通信模型","一样","该","这些","里","还是","唯一","要","不是","称之为","、","优先","公众","节点","注意","一下","模型","不然","是不是","想下","机器","有","订阅","再","画面","。","控制指令","因为","一个","机器人","存在","3","如果","被","之为","摇杆","仔细","多","建议","个","谁","可以","号","魔性","也","是","1","报纸","杂志","对","的","听","可能","我们","区分","这个","每个","并","发布","似乎","多个","了","优先级","指令"," ","人","挺","2","发布者","知道","很多"],"title":"多对多通信","title_tokens":["多","对","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_5","text":"话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。","text_tokens":["某","，","词","者","通信","控制","就","话题","数据","合适","不","感器","发出","运动","传输","不知","用","某些","比如","用于","逻辑","？","周期","文章","公众","类似","特性","等等","一份","有","订阅","居","只要","指","什么","。","参数","根本","叫做","听说","一个","如果","时候","适合","一篇","后","异步","可以","让","传感器","号","古月","也","这","是","阅读","传感","第一","就是","报纸","报社","太","一次","收到","的","逻辑性","更","可能","并不知道","你","这个","一些","发布","同学","所谓","了","指令"," ","较强","修改","那","还有","第一次","发布者","知道"],"title":"异步通信","title_tokens":["异步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_6","text":"最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过.msg后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。","text_tokens":["格式","，","拼接","ros","者","通信","就","图像","话题","像素","像","数据","定义","和","英文","对应","一样","复杂","传输","会","包含","既然","最后","比如","语言","成","称之为","描述","值","、","节点","数据结构","统一","数据传输","等等","接口","文件","msg","机器","有","订阅","编程语言","积木","理解","长宽","。","各种各样","据传","中","一个","机器人","无关","之为","这里","进行","编程","一种","方式","通过","自行","可以","标准","组成","不能","消息","也","概念","rgb","系统","是",".","块","各种","得","的","我们","中文","这样","每个","发布","说","了","接口定义"," ","结构","后缀","与","都","各样","发布者","在"],"title":"消息接口","title_tokens":["接口","消息"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#hello-world","text":"了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。","text_tokens":["从","的","，","接下来","string","从而","ros","者","原理","开始","接收","我们","本原","标准","基本原理","话题","啦","就要","这个","到","定义","chatter","发送","基本","代码","发布","消息","订阅","创建","下来","再","了","类型","来","接下"," ","编写","。","hello","是","字符","中","一个","字符串","还是","world","“","发布者","周期","了解","”","例程"],"title":"案例一：Hello World话题通信","title_tokens":["通信","话题","一","world"," ","：","案例","hello"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_7","text":"启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。","text_tokens":["的","启动","终端","，","同样","运行","pub","二个","者","节点","第二个","可以","以","话题","数据","循环","发布","消息","订阅","也","第一个","该"," ","看到","：","learning","helloworld","。","_","hello","run","字符","$","几乎","频率","第一","一个","topic","第二","字符串","”","world","ros2","“","发布者","sub","收到"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_8","text":"我们来看下发布者的实现方法。","text_tokens":["下","来看","的","发布者","。","实现","我们","发布","方法"],"title":"发布者代码解析","title_tokens":["解析","发布","发布者","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_9","text":"learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], },","text_tokens":["，","编译","string","对象","填充","init","0.5","话题","*","数据","初始化","功能","__","{","单位","com","关闭","node","name","名","learning","destroy","等待","_","示例","!","主","shutdown","world","（","程序","周期","配置",",","www","、","节点","包","rclpy","/",")","timer","接口","文件","points","msg","coding","创建","居","]","类型","库","get","std","%","py","}","=","[","中","8","topic","字符串","一个","已经","提示","需要","进行","logger","'","msgs","publish","setup","后","点","usr","publishing","class","输出","让","函数","长度",":","guyuehome","#","加入","类","循环","console","打开","说明","回调","chatter","none","消息","日志","古月","设置","(","publishernode","callback","如下","：","系统","字符","初始",".","定时器","ros2","python3","定时","”","的","bin","pub","销毁","entry","s","为","spin","env","def","退出","完成","\"","发布","并","代码","import","from","10","）","main","选项","秒"," ","publisher","作者","utf","super","队列","info","helloworld","@","编写","hello","self","入口","create","args","-","scripts","信息","执行","data","“","发布者","知道","父类","python"],"title":"程序实现","title_tokens":["程序","程序实现","实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_10","text":"对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口","text_tokens":["，","编程","对象","销毁","分析","填充","节点","实现","我们","话题","初始化","接口","发布","并","消息","创建","关闭","想要"," ","如下","：","流程","一个","初始","程序","发布者","以上","如果","对","进行"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_11","text":"我们再来看下订阅者的实现方法。","text_tokens":["订阅","下","来看","再","的","者","。","实现","我们","方法"],"title":"订阅者代码解析","title_tokens":["订阅","解析","代码","者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_12","text":"learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], },","text_tokens":["，","编译","string","对象","者","init","话题","*","数据","初始化","功能","\\","定义","subscribernode","__","{","com","关闭","node","name","名","learning","destroy","等待","_","示例","!","主","shutdown","world","（","程序","i","sub","配置",",","www","、","subscription","节点","包","rclpy","/",")","接口","文件","points","msg","订阅","coding","创建","居","]","类型","库","get","std","%","py","}","=","[","8","topic","一个","提示","需要","进行","logger","'","msgs","setup","后","点","usr","class","输出","让","标准","函数","长度",":","guyuehome","#","加入","类","循环","console","打开","说明","回调","chatter","none","消息","日志","古月","设置","(","callback","如下","：","系统","初始",".","heard","ros2","python3","对","”","收到","的","bin","销毁","pub","entry","s","spin","env","def","退出","完成","\"","并","代码","处理","import","from","10","）","main","选项"," ","listener","作者","utf","super","队列","info","helloworld","@","编写","hello","self","入口","create","args","-","scripts","信息","执行","data","“","知道","父类","python"],"title":"程序实现","title_tokens":["程序","程序实现","实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_13","text":"对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。","text_tokens":["一定","下","，","编程","的","接下来","对象","销毁","分析","者","节点","还","实现","通信","我们","函数","过瘾","话题","啦","之前","数据","初始化","接口","视觉","回调","不","继续","并","机器","处理","大家","好","优化","订阅","创建","下来","关闭","想要","接下"," ","如下","：","。","流程","hello","基于","一个","初始","world","程序","以上","如果","对","例程","进行"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_14","text":"在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。","text_tokens":["的","，","问题","更好","节点","方式","实现","将","我们","通过","对于","过程","图像","做成","话题","驱动","数据","功能","这个","没有","视觉","但是","来讲","即可","和","机器","并","红色","识别","虽然","了","概念","模块","传输","开发","。","模块化","间","相机","是","两个","讲解","中","一个","就是","机器人","做到","并且","没","程序","物体","周期","在","对","联系"],"title":"案例二：机器视觉识别","title_tokens":["识别","二","视觉","案例","：","机器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_15","text":"这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。","text_tokens":["，","更好","ros","分别","这种","第二个","就","图像","话题","驱动","功能","定义","来看","以下","不变","learning","_","相机","要","？","先","sub","二个","节点","说干就干","将","可移植性","啦","思想","软件","订阅","看到","只","。","run","效果","完全","一个","topic","物体","如果","需要","下","启动","终端","实现","可以","标准","设计","视觉","webcam","消息","红色","第一个","移植","模块化","如何","范围","是","第一","保持","内","ros2","的","运行","pub","更换","我们","保证","另","中是","这个","移植性","即可","并","发布","好","识别","未来","了","放入"," ","模块","修改","两个","$","第二","可移植","在"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_16","text":"learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], },","text_tokens":["，","编译","稍后","对象","ros","init","sensor","设备","图像","话题","*","驱动","初始化","功能","__","if","{","单位","com","frame","node","关闭","name","名","learning","destroy","等待","_","相机","示例","!","主","shutdown","（","用于","程序","转换","周期","0","配置","sub",",","www","、","图像处理","节点","将","opencv","包","imgmsg","rclpy","/",")","bridge","timer","image","接口","视频","文件","points","msg","coding","创建","居","cap","类型","库","采集","raw","get","}","py","=","[","8","topic","一个","cvbridge","videocapture","读取","已经","read","提示","如果","video","需要","进行","成功","logger","'","msgs","publish","to","setup","后","点","usr","publishing","class","输出","让","函数","长度",":","guyuehome","#","true","加入","类","号","循环","console","打开","说明","回调","none","webcam","消息","日志","古月","设置","(","callback","如下","：","系统","初始",".","定时器","0.1","ros2","python3","定时","的","bin","pub","销毁","entry","为","bgr8","cv2","spin","env","def","cv","转换成","退出","完成","\"","发布","并","处理","代码","import","from","10","）","main","选项","秒"," ","publisher","作者","utf","super","队列","info","@","编写","helloworld","]","self","与","ret","一帧","入口","create","args","-","换成","信息","执行","scripts","发布者","imagepublisher","知道","父类","python"],"title":"发布者代码解析","title_tokens":["解析","发布","发布者","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_17","text":"learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], },","text_tokens":["，","编译","img","detect","对象","ros","者","init","128","太小","180","cnt","circle","轮廓","sensor","所在","及","图像","话题","像素","*","continue","检测","初始化","功能","和","__","if","{","com","numpy","中心","frame","node","关闭","name","名","learning","destroy","等待","_","示例","!","cvtcolor","主","shutdown","（","用于","as","转换","bgr","程序","+","0","sub","配置","inrange",",","www","、","图像处理","contours","颜色","已","subscription","节点","object","5","上限","hsv","将","opencv","包","左上","imgmsg","rclpy","模型","retr","坐标","点画","/",")","bridge","得到","image","接口","苹果","去除","互相","文件","points","msg","color","订阅","coding","创建","居","hierarchy","类型","库","面积","lower","raw","get","}","py","=","[","效果","中","8","topic","一个","cvbridge","findcontours","提示","chain","x","video","需要","array","进行","logger","从","'","msgs","上角","xy","imagesubscriber","to","setup","upper","boundingrect","waitkey","后","点","usr","数值","转化","class","输出","让","函数","长度",":","guyuehome","#","加入","类","255","np","循环","console","显示","说明","回调","none","<","打开","webcam","消息","日志","红色","y","化成","古月","设置","(","callback","如下","二值化","噪声","：","shape","范围","系统","int","勾勒","初始",".","1","red","进入","ros2","python3","90","使用","imshow","h","的","bgr2hsv","高","bin","销毁","pub","阈值","entry","mask","为","bgr8","cv2","list","spin","env","出来","def","approx","cv","退出","完成","\"","一些","并","代码","处理","import","from","10","）","in","宽","main","左上角","选项"," ","]","作者","utf","super","listener","队列","@","for","info","编写","self","与","2","入口","helloworld","create","drawcontours","args","-","w","信息","scripts","data","下限","计算","150","知道","父类","转化成","receiving","python"],"title":"订阅者代码解析","title_tokens":["订阅","解析","代码","者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_18","text":"通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub","text_tokens":["不太","，","接口协议","ros","当然","耦","！","就","图像","话题","驱动","功能","不","大家","进一步","node","率","一句","learning","原本","_","用","相机","一步","现在","不是","exe","？","sub","任何","节点","每换","humble","sudo","cam","install","得到","是不是","做","接口","到","软件","有","不行","只要","只","什么","。","复用","run","提高","中","一个","topic","对劲","哪里","需要","好像","通过","让","可以","标准","么","视觉","通用","集成","webcam","一般","也","感觉","这","协议","是","常用","精简","ros2","符合","不过","使用","呀","对","焕然一新","得","例程","的","目标","可能","apt","无论","变化","我们","自己","一行","换","这样","一新","又","你","写","解","发布","代码","安装","好","似乎","识别","了","直接","什么样","指令"," ","都","$","-","焕然","换成","usb","刚才","还有"],"title":"案例三：机器视觉识别优化","title_tokens":["识别","三","视觉","：","案例","机器","优化"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_19","text":"话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息","text_tokens":["的","pub",">","list","话题","#","数据","<","msg","type","列表","发布","消息","操作","name"," ","如下","查看","传输","：","info","bw","_","$","频率","常用","topic","信息","echo","data","ros2","带宽","命令","hz"],"title":"话题命令行操作","title_tokens":["命令","操作","命令行","话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_20","text":"关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？","text_tokens":["考题","的","，","呢","适合","几个","能够","单向","原理","是否","实现","通信","我们","对于","这种","需求","特性","肯定","就","数据传输","话题","留","数据","思考题","例子","到","来讲","周期性","讲","和","机器","完成","大家","无法","给","关于","复杂","传输","：","系统","是","据传","一个","机器人","所有","举","思考","？","周期","传递","这里","满足","方法"],"title":"思考题","title_tokens":["思考","考题","思考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_21","text":"https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["-",".",":","tutorials","/","ros","https","org","docs","ros2","humble","html","topics","en","understanding"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/","text":"服务 话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。 通信模型 在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。 客户端/服务器模型 从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。 同步通信 这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。 一对多通信 比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。 服务接口 和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。 案例一：加法求解器 大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 运行效果 我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3 客户端代码解析 我们来看下客户端的实现方法。 程序实现 learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口 服务端代码解析 至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。 程序实现 learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_server = learning_service.service_adder_server:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口 案例二：机器视觉识别 好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。 运行效果 此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client 客户端代码解析 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], }, 服务端代码解析 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], }, 服务命令行操作 服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求 思考题 话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["，","ros","128","分别","180","circle","准备","position","这种","sensor","硬件","就","像素","网络","驱动","回想","__","大家","node","名","learning","最为","wait","shutdown","比如","生活","（","程序","exe","else","结果","sub","跟随","www","add",",","图像识别","开始","接收","上限","自定义","左上","srv","坐标","image","苹果","—","到","msg","en","有","创建","居","给","类型","接下","什么","。","域名","run","invalid","一问一答","雷达","of","r","打印","提示","了解","之为","时候","考题","比比","启动","msgs","服务端","tutorials","经常","好像","upper","后","boundingrect","看","大部","异步","class","有所不同","可以","让","设计","位置","guyuehome","相对","加入","循环","接口类","案例","console","返回","说明","<","放到","化成","interface","命令行","第一个","反应","准确","时","future","once","red","圈圈","进入","d","拿到","以上","h","的","销毁","是否","mask","我们","objectclient","cv2","针对","认为","成为","approx","根据","所以","这个","一对","没有","main","）","in","宽","获取","查看","utf","for","与","drawcontours","执行","计算","done","简单","getobjectposition","在","服务器发送","编译","官方","者","太小","通信","所在","command","需求","解析","之间","*","功能","一直","...","\\","type","if","objectx","越快越好","参考","正常","result","docs","等待","_","会","某些","学习","问","每","传入","主","变成","成","现在","要","failed","用于","available","+","0","传递","inrange","ok","假设","接下来","图像处理","颜色","分析","subscription","节点","向","半天","形式","5","应用","有点","页面","cam","软硬","点画","得到","但","法器","服务","文件","points","互相","color","hierarchy","下来","sum","a","状态","库","%","}","流程","8","提到","提供","cvbridge","findcontours","存在","chain","物体","如果","需要","logger","下","；","imagesubscriber","多","setup","器","一种","上","usr","网页","转化","通过","某个","标准","处","过程",":","随时","程序实现","true","255","思考题","视觉","打开","显示","消息","而是","电脑","设置","(","二值化","incoming","链接","waiting","传感","请求","初始",".","合理","同步性","ros2","python3","imshow","services","对","例程","并不需要","目标","bin","try","应该","单向","为","spin","list","这样","完成","发给","async","发布","其中","10","objecty","two","sys","listener","队列","编写","info","开发","然后","2","$","入口","频率","create","-","b","信息","break","宕机","另外","150","数据通","命令","timeout","receiving","很多","满足","数据类型","img","同样","不同","sec",">","cnt","控制","轮廓","客户端","cs","第二个","及","希望","检测","或者","定义","三个","最新","感器","同步","务器","{","com","numpy","中心","无法","关闭","一","name","一样","传输","不知","相机","argv","简称","cvtcolor","跟踪","浏览","判断","更加","return","周期","配置","understanding","加法器","50","二","加法","1.0","类似","hsv","humble","包","模型",")","界面","周期性","机器","订阅","里程","看到","org","raw","get","控制指令","叫做","一个","并且","传递数据","思考","3","按照","进行","成功","上角","xy","服务器端","n","比比皆是","两种","server","target","方式","实现","岂","service","输出","ints","函数","长度","adder","传感器","#","通用","none","客户","一般","古月","也","等","软硬件","callback","如下","噪声","：","绝大部分","系统","是","加数","int","第一","上述","常用","勾勒","各种","反馈","90","使用","里程计","不过","浏览器","一次","收到","服务器","常见","更","可能","运行","原理","阈值","entry","bgr8","很","之后","具体","env","出来","cv","打印输出","机制","繁杂","一些","继续","基本","我","处理","代码","识别","from","选项","左上角","指令"," ","后续","作者","https","self","两个","都","call","html","args","第二","usb","data","还有","“","数据通信","后者","知道","父类","出去","访问","要求","detect","对象","init","本","again","图像","话题","之前","数据","就要","初始化","上层","continue","不好","send","不","发送","和","exception","列表","封装","来看","frame","通信模型","想要","运动","场景","出现","destroy","示例","!","这些","求和","还是","唯一","as","转换","不是","bgr","一起","部分","越快","称之为","网站","方法","那有","、","contours","二个","已","object","展现","将","核心","opencv","相比","转圈圈","绝大","imgmsg","rclpy","retr","啦","/","bridge","等等","接口","发","当前","去除","此时","coding","操作","这么","面积","lower","py","=","[","效果","完全","中","client","机器人","not","时间","已经","自定","接口类型","x","前者","video","array","从","'","终端","编程","adderclient","适合","to","通信接口","waitkey","request","点","数值","总结","求解","类","except","np","但是","当","回调","讲","集成","日志","红色","y","e","尽快","response","shape","范围","就是","1","答","至于","附近","”","用到","高","bgr2hsv","大部分","并不知道","在生活中","有所","介绍","def","越好","你","退出","应答","\"","并","好","addtwoints","import","多个","了","课程","]","super","人","while","查询","@","w","scripts","转圈","刚才","下限","发布者","adderserver","转化成","python"],"title":"**服务**","title_tokens":["服务","*"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_1","text":"话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。","text_tokens":["的","，","ros","单向","者","节点","是否","一种","实现","本","通信","我们","这种","异步","将","类似","可以","话题","之间","数据","你","机制","服务","—","讲","发布","我","消息","同步","订阅","无法","多个"," ","传输","准确","。","效果","学习","问","常用","另外","答","发布者","使用","知道","一起","收到","方法"],"title":"服务","title_tokens":["服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_2","text":"在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。","text_tokens":["，","不同","ros","通信","这种","图像","话题","希望","之前","驱动","数据","上层","一直","或者","发送","和","最新","通信模型","运动","一样","传输","相机","问","比如","变成","周期","跟随","图像识别","节点","形式","应用","模型","得到","服务","发","到","机器","此时","订阅","这么","。","中","一个","机器人","物体","按照","时候","需要","好像","实现","通过","service","有所不同","可以","位置","红色","而是","尽快","是","请求","反馈","答","使用","附近","对","并不需要","的","目标","高","更","单向","有所","我们","成为","这样","你","这个","机制","应答","发给","继续","并","发布","我","识别","其中","了","课程"," ","查询","然后","频率","信息","另外","在"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_3","text":"从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。","text_tokens":["从","的","，","服务器","服务器端","常见","服务器发送","经常","上","在生活中","向","形式","实现","网页","为","通信","这种","某个","客户端","很","我们","通过","cs","页面","就","针对","模型","之后","具体","/","数据","你","机制","服务","或者","应答","发送","返回","并","我","客户","务器","处理","此时","电脑","操作","也","来看"," ","。","展现","域名","会","某些","问","叫做","请求","信息","就是","简称","浏览","生活","比如","反馈","答","各种","网站","在","浏览器","时候","收到","需要","进行"],"title":"客户端/服务器模型","title_tokens":["服务器","模型","/","务器","服务","客户端","客户"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_4","text":"这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。","text_tokens":["服务器","的","要求","，","服务器端","假设","可能","半天","接收","通信","我们","通过","客户端","相比","转圈圈","可以","过程","话题","越好","网络","你","所以","这个","服务","一直","没有","不好","或者","到","应答","同步","务器","一般","客户","也","了","越快越好","状态","反应","。","是","中","转圈","信息","宕机","圈圈","浏览","判断","之为","在","浏览器","越快","称之为","那有"],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_5","text":"比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。","text_tokens":["服务器","的","，","服务器端","同样","通信","客户端","可以","模型","访问","但","所以","这个","服务","没有","界面","但是","不","并","务器","客户","大家","古月","居","多个","通信模型","一样","看到","人","。","是","都","完全","每","中","一个","比如","唯一","存在","网站"],"title":"一对多通信","title_tokens":["多","一对","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_6","text":"和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。","text_tokens":["的","，","ros","类似","通信","核心","我们","标准","介绍","srv","话题","位置","坐标","数据","服务","苹果","文件","定义","和","msg","消息","大家","也","了","给","一样"," ","后续","。","会","两个","是","请求","中","一个",".","这些","还是","比如","变成","反馈","传递数据","还有","要","使用","命令","在","部分","传递","方法"],"title":"服务接口","title_tokens":["接口","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_7","text":"大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。","text_tokens":["，","官方","ros","通信","客户端","就","数据","就要","功能","发送","务器","大家","封装","想要","_","求和","还是","成","现在","结果","add","接下来","开始","节点","加法","将","啦","得到","服务","有","下来","给","接下","。","一个","提供","了解","需要","进行","从","服务器端","器","后","实现","通过","ints","可以","相对","求解","当","客户","也","时","是","加数","请求","反馈","对","”","收到","例程","服务器","的","应该","我们","针对","之后","这个","应答","基本","代码","并","了"," ","two","编写","两个","计算","简单","“","出去"],"title":"案例一：加法求解器","title_tokens":["一","器","求解","：","案例","加法"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_8","text":"我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3","text_tokens":["下","，","的","启动","终端","服务端","运行","二个","原理","看","节点","server","实现","我们","service","客户端","第二个","adder","数据","功能","这个","服务","发送","并","代码","客户","操作","第一个"," ","如下","learning","。","等待","_","两个","是","$","加数","run","client","请求","第一","2","一个","第二","传入","提供","求和","并且","ros2","3","结果","一起","例程"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_9","text":"我们来看下客户端的实现方法。","text_tokens":["下","来看","的","。","实现","我们","客户端","客户","方法"],"title":"客户端代码解析","title_tokens":["解析","客户端","客户","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_10","text":"learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], },","text_tokens":["，","编译","对象","init","sec","客户端","again","*","数据","初始化","...","功能","send","定义","发送","__","务器","if","exception","{","com","关闭","node","name","正常","名","result","learning","destroy","等待","_","示例","!","argv","wait","shutdown","（","failed","as","程序","else","available","+","配置","加法器",",","www","add","ok","节点","接收","加法","1.0","将","自定义","包","rclpy","srv","/",")","法器","接口","服务","文件","points","coding","创建","居","sum","类型","a","库","get","%","}","py","=","[","client","8","一个","not","of","r","打印","自定","接口类型","需要","进行","成功","logger","'","启动","adderclient","服务器端","setup","request","后","点","usr","方式","service","异步","class","ints","输出","让","函数","adder",":","guyuehome","#","加入","类","except","循环","接口类","console","打开","说明","none","客户","interface","古月","设置","e","(","如下","response","：","系统","加数","waiting","int","请求","初始",".","1","future","once","反馈","d","ros2","python3","编写","一次","收到","服务器","的","bin","try","运行","销毁","是否","entry","spin","env","def","打印输出","完成","\"","async","并","代码","处理","addtwoints","import","from","）","main","选项"," ","sys","作者","utf","super","two","while","@","for","info","]","self","两个","2","call","入口","create","args","-","b","信息","执行","break","scripts","计算","done","知道","父类","timeout","python"],"title":"程序实现","title_tokens":["程序","程序实现","实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_11","text":"对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口","text_tokens":["服务器","，","编程","服务器端","对象","销毁","分析","节点","实现","我们","客户端","数据","初始化","接口","服务","应答","发送","并","务器","客户","创建","关闭","想要"," ","如下","：","等待","流程","请求","一个","初始","程序","以上","如果","对","进行"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_12","text":"至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。","text_tokens":["服务器","的","，","用到","服务器端","者","并不知道","实现","类似","通信","有点","函数","话题","数据","服务","机制","回调","务器","订阅","也","了","出现","什么","不知","。","请求","中","时间","至于","知道"],"title":"服务端代码解析","title_tokens":["服务","代码","服务端","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_13","text":"learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_server = learning_service.service_adder_server:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], },","text_tokens":["，","编译","对象","init","*","数据","初始化","功能","\\","定义","__","务器","{","com","关闭","node","name","名","learning","destroy","等待","_","示例","!","主","求和","shutdown","（","程序","return","+","结果","配置","加法器",",","www","add","、","节点","加法","将","自定义","包","rclpy","srv","/",")","法器","接口","服务","文件","points","coding","创建","居","sum","类型","a","库","get","%","}","py","=","[","中","8","提供","已经","提示","自定","接口类型","需要","进行","logger","'","n","setup","request","后","server","点","usr","service","class","ints","输出","让","函数","adder",":","guyuehome","#","加入","类","循环","接口类","console","打开","说明","回调","none","放到","日志","interface","古月","设置","(","callback","如下","incoming","response","：","系统","请求","初始",".","反馈","d","ros2","python3","对","收到","服务器","的","bin","销毁","entry","spin","env","def","退出","完成","应答","\"","并","代码","处理","addtwoints","import","from","）","main","选项"," ","two","作者","utf","super","编写","info","@","]","self","入口","create","args","-","b","信息","执行","scripts","计算","adderserver","知道","父类","python"],"title":"程序实现","title_tokens":["程序","程序实现","实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_14","text":"对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口","text_tokens":["服务器","，","编程","服务端","服务器端","对象","销毁","分析","节点","向","实现","我们","通过","客户端","函数","处","初始化","接口","服务","回调","应答","并","务器","客户","创建","关闭","想要"," ","如下","：","流程","一个","初始","反馈","程序","以上","结果","如果","对","进行"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_15","text":"好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。","text_tokens":["下","，","的","目标","器","加法","实现","通信","我们","通过","岂","啦","位置","求解","回想","服务","机制","视觉","当","好","识别","了","。","流程","合理","提到","刚才","更加","已经","不是","知道","物体","时候","需要"],"title":"案例二：机器视觉识别","title_tokens":["识别","二","视觉","案例","：","机器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_16","text":"此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client","text_tokens":["服务器","的","，","；","服务器端","目标","启动","终端","对象","运行","server","节点","object","分别","准备","我们","service","客户端","cam","可以","就","认为","图像","位置","驱动","数据","随时","根据","服务","视觉","当前","当","三个","发送","发布","集成","务器","客户","机器","此时","识别","订阅","有","了","node","运动","出现"," ","：","。","learning","时","然后","会","相机","是","$","run","_","client","请求","上述","一个","机器人","提供","usb","跟踪","并且","拿到","ros2","exe","一次","需要"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_17","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], },","text_tokens":["，","编译","对象","init","sec","position","again","*","初始化","...","功能","send","\\","定义","__","if","exception","{","com","关闭","node","name","result","learning","destroy","等待","_","示例","!","wait","shutdown","failed","as","程序","else","available","配置",",","www","ok","节点","object","1.0","自定义","包","rclpy","srv","/",")","接口","服务","文件","points","coding","创建","居","库","get","%","}","py","=","[","client","8","not","of","r","自定","x","需要","进行","logger","'","n","setup","request","后","点","server","usr","target","service","class","让","adder",":","位置","guyuehome","#","true","加入","类","except","console","打开","说明","none","y","interface","古月","设置","e","(","如下","response","：","系统","waiting","请求","初始",".","future","once","d","ros2","python3","的","目标","bin","try","销毁","entry","objectclient","spin","env","def","完成","应答","\"","async","并","代码","识别","import","from","main","选项"," ","]","作者","utf","super","while","info","@","for","编写","self","call","入口","create","args","-","scripts","break","done","getobjectposition","知道","父类","timeout","python"],"title":"客户端代码解析","title_tokens":["解析","客户端","客户","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_18","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], },","text_tokens":["，","编译","img","detect","对象","ros","者","init","128","太小","180","cnt","circle","position","轮廓","sensor","所在","command","及","图像","话题","像素","*","continue","数据","检测","初始化","功能","\\","定义","和","__","务器","if","{","com","numpy","中心","frame","node","objectx","关闭","name","名","learning","destroy","等待","_","示例","!","cvtcolor","主","shutdown","（","用于","as","转换","bgr","return","else","程序","+","0","sub","配置","inrange","50",",","www","、","图像处理","contours","颜色","已","subscription","节点","object","5","上限","hsv","将","opencv","自定义","包","左上","imgmsg","rclpy","srv","模型","retr","坐标","点画","/","bridge",")","得到","image","接口","服务","苹果","去除","互相","文件","points","msg","color","订阅","coding","创建","居","hierarchy","类型","库","面积","lower","raw","get","%","}","py","=","[","效果","invalid","中","client","8","一个","提供","cvbridge","findcontours","已经","提示","自定","chain","接口类型","x","物体","video","需要","array","进行","logger","从","'","msgs","上角","xy","imagesubscriber","n","to","setup","upper","boundingrect","waitkey","后","server","request","usr","数值","target","点","转化","service","class","输出","让","函数","长度","adder",":","guyuehome","#","true","加入","类","255","np","循环","接口类","console","显示","说明","回调","none","<","打开","消息","日志","红色","y","interface","化成","古月","设置","(","callback","如下","二值化","噪声","response","：","shape","范围","系统","int","请求","勾勒","初始",".","1","red","进入","反馈","d","ros2","python3","90","使用","imshow","对","收到","h","服务器","的","目标","bgr2hsv","高","bin","销毁","阈值","entry","mask","为","bgr8","cv2","list","spin","env","出来","def","approx","cv","退出","完成","\"","一些","并","代码","处理","识别","import","from","10","）","in","objecty","宽","左上角","main","选项"," ","]","作者","utf","super","listener","队列","@","for","info","编写","self","与","2","入口","create","drawcontours","args","-","w","信息","执行","scripts","data","下限","计算","150","getobjectposition","知道","父类","转化成","receiving","python"],"title":"服务端代码解析","title_tokens":["服务","代码","服务端","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_19","text":"服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求","text_tokens":["的",">","service","list","#","数据","服务","<","发送","type","列表","操作","类型","name"," ","如下","查看","：","_","call","$","请求","常用","data","ros2","命令","数据类型"],"title":"服务命令行操作","title_tokens":["命令","服务","操作","命令行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_20","text":"话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。","text_tokens":["，","要求","ros","通信","控制","硬件","需求","图像","话题","数据","就要","感器","定义","和","同步","无法","场景","传输","最为","这些","比如","周期","部分","方法","、","类似","应用","自定义","绝大","软硬","等等","接口","服务","到","周期性","机器","里程","类型","。","控制指令","中","一问一答","机器人","雷达","自定","前者","时候","比比","适合","通信接口","比比皆是","两种","大部","标准","设计","过程","位置","传感器","视觉","通用","也","等","软硬件","绝大部分","是","传感","常用","同步性","不过","里程计","的","目标","高","更","大部分","单向","我们","针对","这个","繁杂","识别","了","获取","指令"," ","开发","都","后者","数据通信","数据通","在","很多","满足","数据类型"],"title":"思考题","title_tokens":["思考","考题","思考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_21","text":"https://docs.ros.org/en/ humble /Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["-",".",":","tutorials","/"," ","ros","https","org","docs","ros2","humble","html","services","en","understanding"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/","text":"通信接口 在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。 接口的定义 接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。 ROS通信接口 接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。 语言无关 为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。 标准接口 大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。 案例一：服务接口的定义与使用 了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。 接口定义 在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ... 程序调用 我们在代码中再来重点看下接口的使用方法。 客户端接口调用 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 服务端接口调用 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 案例二：话题接口的定义与使用 话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。 运行效果 现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub 接口定义 在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ... 程序调用 我们在代码中再来重点看下接口的使用方法。 发布者接口调用 learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 订阅者接口调用 learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 接口命令行操作 接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义 参考链接 https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["，","ros","128","分别","180","转","circle","position","由","硬件","sensor","上边","就","像素","驱动","subscribernode","__","大家","三原","方便","node","一句","名","自言自语","learning","各个领域","最为","wait","shutdown","比如","生活","键盘","主程序","程序","（","exe","？","else","结果","sub","描述","体","www",",","开始","上限","自定义","左上","srv","随处可见","坐标","造","种","image","苹果","—","int32","到","msg","en","有","创建","居","share","给","类型","接下","只","什么","小海","。","run","两者","invalid","角速度","of","r","约束","提示","打印","bool","了解","之为","时候","msgs","像头","服务端","启动","publish","tutorials","你来我往","upper","boundingrect","后","看","生成","class","组成","让","可以","设计","位置","guyuehome","只有","循环","像素点","案例","接口类","说明","<","化成","interface","命令行","第一个","这","准确","时","字符","三原色","future","once","64","red","进入","depend","d","符合","以上","广泛","h","的","回到","销毁","是否","mask","我们","objectclient","保证","肯定","彼此","cv2","无论是","减少","重点","approx","根据","所以","这个","没有","关注","main","）","in","获取","降低","宽","什么样","代码生成","查看","模块","utf","包中","用来","for","转到","与","drawcontours","执行","固定","那","计算","小海龟","done","getobjectposition","在","联系","member","中来","编译","形象","者","objectposition","太小","通信","所在","command","解析","之间","*","功能","...","\\","包装","if","objectx","参考","正常","result","docs","等待","_","会","路径","学习","便于","每","里","主","成","现在","要","failed","用于","available","+","0","中间","传递","讲解","形象化","inrange","ok","接下来","图像处理","反正","颜色","subscription","节点","use","5","应用","cam","点画","标值","但","得到","编写程序","服务","文件","互相","不管","color","看上","hierarchy","下来","sum","再","a","只要","两","状态","库","define","数组","}","%","build","concepts","8","topic","字符串","提供","进度","cvbridge","findcontours","chain","物体","需要","logger","交流","；","下","imagesubscriber","多","上","一种","usr","转化","通过","20","某个","转到第","标准","过程","做成",":","true","255","视觉","打开","看看","显示","package","消息","而是","电脑","required","举个","(","来","整型","海龟","二值化","链接","waiting","请求","初始",".","ros2","python3","imshow","程序模块","对","micro","例程","重复","就行","它","目标","度","bin","位","runtime","try","还","个人","单向","想","无论","第三个","高效","为","spin","list","区分","这样","工作","完成","async","发布","10","objecty","listener","结构","编写","开发","info","队列","2","$","入口","像是","create","-","b","break","到底","信息","输入输出","另外","关心","150","cmakelists","命令","更为","timeout","receiving","众多","img","string","调用","不同","内容","各个",">","sec","cnt","控制","轮廓","客户端","第二个","及","研究","希望","show","single","packages","检测","或者","定义","三个","涵盖","interfaces","务器","{","com","numpy","布尔","关闭","中心","速度","一","name","传输","可见","相机","主要","cvtcolor","语言","传输数据","xml","return","甚至","周期","原色","配置","50","二","由于","相互","好奇","加法","1.0","类似","必须","hsv","humble","一下","包","回顾","模型","generate",")","图形","自语","软件","机器","手机","订阅","第三","看到","org","理解","raw","get","default","int64","目的","一个","about","关系","并且","这里","generators","进行","上角","xy","n","txt","server","target","实现","service","输出","才能","谁","函数","长度","上去","32","#","的话","none","webcam","客户","中有","件夹","哪些","古月","也","等","旋转","callback","如下","概念","匹配","噪声","：","图形化","依赖","系统","如何","是","int","第一","勾勒","常用","将要","各种","反馈","90","使用","g","exec","一次","group","得","收到","插头","形状","服务器","1s","呢","常见","更","加","可能","运行","阈值","bgr8","自己","很","找到","具体","出来","数","env","cv","机制","诞生","一些","继续","代码","处理","识别","选项","from","接口定义","左上角","指令"," ","后续","作者","https","self","两个","都","call","html","args","摄像","换成","第二","usb","data","还有","“","知道","父类","出去","三种","一边","and","插座","对象","detect","init","c++","again","图像","话题","之前","数据","continue","初始化","send","发送","和","exception","列表","封装","软件开发","frame","运动","对应","轮子","标准接口","destroy","示例","!","看上去","包含","这些","求和","还是","调用函数","project","as","不用","不是","转换","bgr","30","一起","部分","称之为","值","方法","自动","、","contours","二个","已","数据结构","object","将","核心","opencv","imgmsg","rclpy","retr","编译器","/","建立","bridge","等等","接口","当前","去除","重要","此时","coding","操作","动作","面积","摄像头","lower","std","参数","分成","py","=","[","效果","完全","中","client","随处","机器人","not","无关","为了","有机","find","输入","却是","已经","自定","x","接口类型","线速度","video","array","添加","从","'","终端","编程","衍生","通信接口","to","waitkey","request","数值","坐标值","每隔","类","except","二维","np","rosidl","回调","讲","日志","y","红色","e","别人","领域","连接","response","shape","范围","就是","1","布尔值","文件夹","角度","”","用到","几个","bgr2hsv","高","pub","action","把","他们","---","def","例子","退出","话","应答","\"","每个","并","好","安装","精髓","以及","import","了","直接","课程","关于","]","super","人","表示","while","查询","@","publisher","typec","一帧","w","最终","下限","详细","发布者","转化成","有没有","python"],"title":"**通信接口**","title_tokens":["接口","*","通信接口","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_1","text":"在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。","text_tokens":["的","，","用到","交流","呢","更","多","通信接口","你来我往","ros","个人","内容","无论","通信","我们","让","可以","标准","话题","数据","接口","服务","—","或者","自语","定义","重要","并","大家","好","而是","给","动作","后续"," ","概念","人","自言自语","什么","。","理解","系统","结构","会","两个","都","学习","是","中","一个","就是","将要","还是","为了","这","不是","？","甚至","在","传递"],"title":"通信接口","title_tokens":["接口","通信接口","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_2","text":"接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。","text_tokens":["，","插座","形象","调用","ros","内容","各个","通信","控制","由","硬件","所在","就","解析","图像","话题","像素","驱动","数据","包装","定义","和","大家","三原","软件开发","运动","速度","正常","一句","传输","可见","相机","各个领域","每","最为","主要","看上去","这些","还是","比如","生活","调用函数","传输数据","主程序","程序","要","不用","键盘","？","结果","一起","原色","配置","称之为","形象化","值","、","反正","相互","开始","节点","应用","必须","类似","包","随处可见","图形","建立","但","等等","编写程序","接口","服务","到","软件","机器","看上","手机","有","给","只要","摄像头","什么","。","参数","两者","目的","完全","中","随处","一个","机器人","提供","关系","并且","输入","角速度","却是","r","约束","之为","时候","线速度","进行","；","编程","像头","多","通信接口","上","一种","实现","通过","输出","才能","组成","让","函数","标准","可以","上去","只有","像素点","讲","电脑","也","等","举个","概念","领域","匹配","连接","图形化","这","时","系统","准确","是","如何","就是","三原色","常用","反馈","符合","使用","g","广泛","程序模块","一次","更为","micro","得","插头","形状","的","它","呢","常见","更","加","回到","运行","无论","把","我们","高效","自己","很","他们","肯定","彼此","无论是","具体","出来","工作","所以","这个","机制","例子","诞生","话","关注","每个","一些","发布","代码","好","安装","精髓","了","直接","什么样","关于"," ","指令","模块","结构","编写","开发","typec","两个","都","像是","-","摄像","b","usb","固定","输入输出","那","关心","知道","在"],"title":"接口的定义","title_tokens":["接口","的","定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#ros","text":"接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。","text_tokens":["重复","的","，","目标","、","ros","一种","节点","分别","通信","我们","核心","通过","才能","可以","让","话题","之间","减少","造","种","接口","机制","服务","到","定义","代码","有","方便","也","降低","动作","别人"," ","轮子","这","。","依赖","是","便于","每","就是","常用","各种","有机","程序","使用","一起","联系","三种"],"title":"ROS通信接口","title_tokens":["接口","通信接口","ros","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_3","text":"为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。","text_tokens":["一边","，","编译","不同","ros","分别","转","通信","c++","话题","之前","数据","功能","定义","三个","和","布尔","运动","对应","传输","会","学习","每","包含","这些","里","求和","比如","还是","语言","结果","周期","30","部分","中间","描述","体","自动","、","由于","开始","节点","数据结构","加法","将","一下","srv","坐标","接口","服务","int32","文件","到","当前","msg","机器","此时","sum","动作","a","状态","两","看到","只","什么","小海","数组","。","分成","int64","中","一个","机器人","无关","为了","进度","x","bool","这里","需要","编程","通信接口","一种","生成","数值","通过","20","转到第","可以","让","设计","过程","做成","32","每隔","二维","y","等","旋转","整型","海龟","是","请求",".","布尔值","64","反馈","90","使用","”","就行","的","1s","目标","度","位","还","单向","action","是否","我们","保证","数","区分","---","这个","机制","完成","应答","10","了"," ","表示","结构","用来","转到","两个","一帧","b","另外","最终","还有","小海龟","“","知道","在","python"],"title":"语言无关","title_tokens":["语言","无关"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_4","text":"大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。","text_tokens":["的","，","呢","众多","几个","可能","ros","好奇","我们","找到","可以","标准","接口","文件","打开","看看","定义","涵盖","大家","安装","哪些","件夹","share","给","了","。","系统","路径","中","到底","文件夹","？","在"],"title":"标准接口","title_tokens":["标准","标准接口","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_5","text":"了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。","text_tokens":["从","的","，","下","服务端","接下来","目标","通信接口","对象","二个","节点","实现","第三个","通信","我们","回顾","第二个","可以","就","研究","图像","话题","这样","位置","之前","驱动","接口","服务","视觉","定义","三个","发送","发布","代码","机器","以及","有","识别","封装","第三","下来","再","了","课程","来","第一个","接下"," ","需要","概念","编写","查询","。","如何","相机","是","中","第一","请求","一个","第二","提供","在","角度","使用","了解","讲解","时候","收到","例程","进行"],"title":"案例一：服务接口的定义与使用","title_tokens":["的","一","接口","服务","：","案例","使用","定义","与"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_6","text":"在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ...","text_tokens":["member","，","编译","不同",">","通信","上边","就","packages","功能","...","定义","interfaces","{","name","learning","_","会","语言","xml","project","部分","配置","自动","、","包","srv","编译器","坐标","generate","/",")","接口","服务","int32","文件","get","default","。","}","build","中","find","of","x","bool","generators","需要","添加","服务端","txt","后","生成","让","过程","位置","#","true","的话","rosidl","<","package","中有","y","interface","required","也","(","：","依赖","是",".","反馈","depend","使用","exec","一次","group","例程","的","目标","runtime","还","为","我们","---","根据","这个","完成","\"","代码","选项","了","获取","接口定义","指令"," ","代码生成","表示","两个","$","cmakelists","getobjectposition","在"],"title":"接口定义","title_tokens":["接口","接口定义","定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_7","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["下","的","再","来","重点","方法","接口","看","。","使用","我们","在","代码","中"],"title":"程序调用","title_tokens":["程序","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_8","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["，","对象","init","sec","position","again","*","初始化","...","send","\\","定义","__","if","exception","com","关闭","node","name","result","learning","destroy","等待","_","示例","!","wait","shutdown","failed","as","else","available",",","www","ok","节点","object","1.0","自定义","rclpy","srv","/",")","接口","服务","coding","创建","居","库","get","%","py","=","client","8","not","of","r","自定","x","进行","logger","'","n","request","usr","target","service","class",":","位置","guyuehome","#","true","类","except","说明","none","y","interface","古月","e","(","response","waiting","请求","初始",".","future","once","d","ros2","python3","的","目标","bin","try","销毁","objectclient","spin","env","def","应答","\"","async","并","识别","import","from","main"," ","作者","utf","super","while","info","@","for","self","call","create","args","-","break","done","getobjectposition","父类","timeout","python"],"title":"客户端接口调用","title_tokens":["接口","客户端","客户","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_9","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["，","img","detect","对象","ros","者","init","128","太小","180","cnt","circle","position","轮廓","sensor","所在","command","及","图像","话题","像素","*","continue","数据","检测","初始化","\\","定义","和","__","务器","if","com","numpy","中心","frame","node","objectx","关闭","name","名","learning","destroy","等待","_","示例","!","cvtcolor","主","shutdown","（","用于","as","转换","bgr","return","else","+","0","sub","inrange","50",",","www","、","图像处理","contours","颜色","已","subscription","节点","object","5","上限","hsv","将","opencv","自定义","左上","imgmsg","rclpy","srv","模型","retr","坐标","点画","/","bridge",")","得到","image","接口","服务","苹果","去除","互相","msg","color","订阅","coding","创建","居","hierarchy","类型","库","面积","lower","raw","get","%","py","=","[","效果","invalid","中","8","一个","提供","cvbridge","findcontours","已经","提示","自定","chain","接口类型","x","物体","video","array","进行","logger","从","'","msgs","上角","xy","imagesubscriber","n","to","upper","boundingrect","waitkey","后","server","request","usr","数值","target","转化","service","class","输出","函数","长度",":","guyuehome","#","true","类","255","np","循环","接口类","显示","说明","回调","none","<","消息","日志","红色","y","interface","化成","古月","(","callback","二值化","噪声","response","shape","范围","int","请求","勾勒","初始",".","1","red","进入","反馈","d","ros2","python3","90","使用","imshow","对","收到","h","服务器","的","目标","bgr2hsv","高","bin","销毁","阈值","mask","为","bgr8","cv2","list","spin","env","出来","def","approx","cv","退出","\"","一些","并","处理","识别","import","from","10","）","in","objecty","宽","左上角","main"," ","]","作者","utf","super","listener","队列","@","for","info","self","与","2","入口","create","drawcontours","args","-","w","信息","执行","data","下限","计算","150","getobjectposition","父类","转化成","receiving","python"],"title":"服务端接口调用","title_tokens":["接口","服务","调用","服务端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_10","text":"话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。","text_tokens":["从","的","，","中来","目标","衍生","通信接口","想","类似","通信","我们","把","话题","位置","之前","接口","服务","视觉","案例","不管","定义","没有","继续","机器","发布","识别","也","人","。","是","换成","周期","有没有","需要"],"title":"案例二：话题接口的定义与使用","title_tokens":["的","话题","二","接口","案例","：","使用","定义","与"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_11","text":"现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub","text_tokens":["的","，","；","目标","终端","启动","运行","ros","二个","pub","节点","object","分别","第三个","将","我们","谁","cam","第二个","标准","就","图像","话题","位置","希望","驱动","数据","image","功能","这个","视觉","到","定义","三个","发布","并","消息","此时","识别","封装","订阅","第三","interface","node","来","第一个"," ","需要","：","。","learning","_","会","相机","是","$","run","中","第一","一个","第二","topic","usb","成","现在","ros2","以上","使用","打印","exe","sub","出去"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_12","text":"在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ...","text_tokens":["，","编译","不同","objectposition","内容","通信","话题","功能","...","定义","interfaces","{","name","learning","_","语言","project","配置","描述","自动","、","包","编译器","坐标","generate","/","标值",")","接口","服务","int32","msg","default","。","}","中","一个","find","x","generators","需要","进行","txt","后","生成","坐标值","让","过程","位置","#","rosidl","消息","package","y","interface","required","(","：","是",".","使用","例程","的","目标","还","我们","根据","这个","完成","\"","代码","选项","了","接口定义"," ","表示","$","cmakelists","在"],"title":"接口定义","title_tokens":["接口","接口定义","定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_13","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["下","的","再","来","重点","方法","接口","看","。","使用","我们","在","代码","中"],"title":"程序调用","title_tokens":["程序","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_14","text":"learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["，","img","detect","对象","ros","objectposition","者","128","init","180","太小","cnt","circle","position","轮廓","sensor","所在","及","图像","话题","像素","*","continue","检测","初始化","定义","和","__","if","com","numpy","中心","frame","node","objectx","关闭","name","名","learning","destroy","等待","_","示例","!","cvtcolor","主","shutdown","（","用于","as","转换","bgr","+","0","sub","inrange","50",",","www","、","图像处理","contours","颜色","已","subscription","节点","object","5","上限","hsv","将","opencv","自定义","左上","imgmsg","rclpy","模型","retr","坐标","点画","/",")","bridge","得到","image","接口","苹果","去除","互相","msg","color","订阅","coding","创建","居","hierarchy","类型","库","面积","lower","raw","get","py","=","[","效果","中","8","topic","一个","cvbridge","findcontours","提示","自定","chain","x","video","array","进行","logger","从","'","msgs","上角","xy","imagesubscriber","publish","to","upper","boundingrect","waitkey","后","usr","数值","转化","class","输出","函数","长度",":","位置","guyuehome","#","类","255","np","循环","显示","说明","回调","none","<","webcam","消息","日志","红色","y","interface","化成","古月","(","callback","二值化","噪声","shape","范围","int","勾勒","初始",".","1","red","进入","ros2","python3","90","使用","imshow","h","的","目标","bgr2hsv","高","bin","pub","销毁","阈值","mask","为","bgr8","cv2","list","spin","env","出来","def","approx","cv","退出","\"","一些","发布","并","处理","import","from","10","）","in","objecty","宽","左上角","main"," ","]","作者","utf","super","listener","队列","@","publisher","for","info","self","与","2","入口","create","drawcontours","args","-","w","信息","data","下限","计算","150","发布者","父类","转化成","receiving","python"],"title":"发布者接口调用","title_tokens":["接口","发布","发布者","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_15","text":"learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["，","string","对象","objectposition","者","init","position","话题","*","数据","初始化","\\","定义","subscribernode","__","com","关闭","node","name","名","learning","destroy","等待","_","示例","!","主","shutdown","（","sub",",","www","、","subscription","节点","object","自定义","rclpy","/",")","接口","msg","订阅","coding","创建","居","类型","库","get","std","%","py","=","8","topic","字符串","一个","提示","自定","x","进行","logger","'","msgs","后","usr","target","class","输出","函数","长度",":","位置","guyuehome","#","类","循环","说明","回调","none","消息","日志","y","interface","古月","(","callback","字符","初始",".","d","ros2","python3","对","收到","的","目标","bin","销毁","spin","env","def","退出","\"","并","处理","import","from","10","main"," ","listener","作者","utf","super","队列","info","@","self","入口","create","args","-","信息","执行","父类","python"],"title":"订阅者接口调用","title_tokens":["订阅","调用","接口","者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_16","text":"接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义","text_tokens":["的",">","某个","list","show","#","功能","接口","<","定义","列表","package","interface","操作","name","接口定义"," ","如下","查看","包中","：","系统","_","$","常用","详细","ros2","命令"],"title":"接口命令行操作","title_tokens":["接口","操作","命令行","命令"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_17","text":"https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["and","tutorials","ros","use","humble",":","/","single","interfaces","package","en","interface","define"," ","org","https","docs","html","concepts","-","about","."],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/","text":"动作 机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。 通信模型 举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。 客户端/服务器模型 动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。 一对多通信 和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。 同步通信 既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。 由服务和话题合成 大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。 案例一：小海龟的动作 我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback 案例二：机器人画圆 如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。 运行效果 启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。 接口定义 例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是动作的目标，enable为true时，表示开始运动； 第二块是动作的执行结果，finish为true，表示动作执行完成； 第三块是动作的周期反馈，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ... 通信模型 通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。 服务端代码解析 learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], }, 客户端代码解析 learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], }, 动作命令行操作 动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["某","，","ros","还会","分别","转","circle","这种","0.5","由","清楚","上边","就","theta","movecircleactionserver","__","大家","发出","node","二块","名","learning","只能","送货","名字","wait","既然","shutdown","比如","键盘","（","取消","程序","？","先","结果","使",",","www","add","开始","接收","自定义","goal","坐标","一套","加深","execute","—","int32","到","msg","en","有","创建","居","类型","接下","什么","小海","。","run","根本","state","不仅仅","读取","move","bool","动","启动","服务端","publish","tutorials","后","看","生成","publishing","异步","class","分拣","可以","让","位置","guyuehome","相对","加入","只有","循环","接口类","案例","console","说明","<","interface","命令行","眼前","所处","智能","这","时","future","d","达到","拒绝","的","理","销毁","是否","我们","肯定","过","针对","写","根据","这个","一对","没有","range","360","main","）","in","获取","查看","模块","utf","for","进度条","执行","那","小海龟","仿真","done","简单","合成","在","handle","实时","编译","rotate","者","turtle1","通信","遥控","需求","解析","抓取","*","feedback","功能","...","合适","type","if","absolute","参考","result","docs","等待","_","会","便于","每","主","现在","一点一点","0","某一","发现","ok","假设","接下来","完整","分析","节点","应用","转个","特性","但","movecircleactionclient","服务","文件","points","下来","不仅","再","常常","状态","库","发送给","%","}","流程","finish","8","turtlesim","进度","真器","被","哪里","如果","需要","logger","下","；","多","setup","一种","上","usr","某个","圈","20","通过","三块","标准","过程","行为",":","随时","true","导航","打开","turtle","package","消息","而是","其","required","设置","举个","(","来","海龟","多少度","链接","请求","初始",".","ros2","python3","对","例程","目标","度","bin","还","想","--","为","处理函数","隐藏","spin","list","这样","含义","完成","async","发布","姿态","10","同时","enable","告诉","编写","info","$","入口","-","信息","到底","另外","cmakelists","命令","更为","满足","数据类型","一块","调用","不同",">","控制","客户端","机械","希望","像","仅仅","定义","三个","同步","务器","interfaces","{","com","关闭","一","name","一样","复杂","第一块","臂","试一试","语言","actionserver","一点","i","return","再用","周期","配置","understanding","送给","二","圆周运动","实际","类似","humble","一下","包","rejected","模型","一段时间","generate",")","装","机器","订阅","第三","指定","看到","理解","org","get","default","第二块","目的","一个","其实","按照","generators","进行","成功","服务器端","txt","能","server","方式","实现","输出","才能","直到","圆周","函数","#","较长","none","客户","竟然","古月","也","等","旋转","就此结束","callback","如下","毕竟","概念","：","拒绝执行","系统","如何","是","第一","常用","反馈","使用","画圆","一次","仿真器","得","收到","服务器","1s","呢","可能","运行","原理","entry","succeed","很","1.57","之后","具体","env","received","又","机制","rotateabsolute","起来","代码","处理","识别","选项","from","接口定义","指令"," ","accepted","作者","https","self","两个","都","html","args","管理","请","第二","当中","data","秘密","知道","父类","一边","没错","对象","init","送餐","话题","之前","数据","初始化","send","不","发送","和","列表","封装","通信模型","场景","运动","以下","key","destroy","第三块","示例","控","!","包含","这些","干什么","actionclient","project","不是","30","一起","部分","负责","方法","自动","、","模拟","相比","rclpy","编译器","/","是不是","接口","当前","底层","coding","操作","动作","这么","py","=","[","效果","基于","中","client","机器人","背后","not","movecircle","sleep","find","时间","time","moving","动图","自定","应带","接口类型","仔细","应用层","从","'","终端","编程","通信接口","点","就此","不会","每隔","teleop","类","rosidl","当","但是","回调","日志","response","就是","角度","用到","action","把","一段","介绍","---","def","例子","退出","思路","actions","\"","并","好","段时间","虽然","import","了","多个","直接","]","super","顺利","表示","@","整个","scripts","转圈","结束","最终","发布者","多少","有没有","python"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_1","text":"机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。","text_tokens":["从","的","，","用到","目标","、","ros","完整","一种","上","实现","应用","通信","我们","某个","这种","很","分拣","遥控","送餐","需求","就","可以","进行","具体","行为","仅仅","功能","这个","机制","—","含义","并","机器","好","识别","也","不仅","等","场景","运动","常常","动作","这么","复杂"," ","智能","理解","概念","。","系统","满足","会","是","送货","名字","目的","流程","便于","中","管理","一个","就是","机器人","这些","不仅仅","那","另外","键盘","简单","被","在","对","需要","某一"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_2","text":"举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。","text_tokens":["，","转","通信","就","像","合适","不","发送","发出","运动","控","比如","现在","一点","取消","不是","一点一点","？","30","ok","假设","、","开始","一下","转个","一段时间","装","当前","到","机器","再","动作","。","根本","一个","机器人","进度","时间","哪里","如果","需要","后","圈","20","才能","可以","让","直到","过程","行为","随时","每隔","旋转","举个","眼前","多少度","这","是","反馈","使用","得","更为","的","1s","度","还","想","把","我们","一段","肯定","之后","这样","例子","机制","没有","完成","360","并","段时间","10","了","指令"," ","告诉","表示","进度条","转圈","到底","结束","信息","执行","当中","多少","知道","命令","在","有没有"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_3","text":"动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。","text_tokens":["服务器","的","，","一边","目标","服务器端","可能","后","开始","想","就此","类似","通信","控制","客户端","让","机械","就","之后","模型","过程","坐标","抓取","又","导航","这个","服务","当前","当","发送","和","起来","机器","务器","客户","姿态","也","再","运动","动作","就此结束","同时"," ","状态","所处","什么","。","臂","整个","是","中","一个","执行","结束","机器人","信息","干什么","反馈","达到","使用","周期","如果","实时","收到","动"],"title":"客户端/服务器模型","title_tokens":["服务器","模型","/","务器","服务","客户端","客户"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_4","text":"和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。","text_tokens":["服务器","的","，","下","服务器端","通信","客户端","才能","可以","只有","服务","但是","完成","发送","和","机器","务器","大家","客户","有","多个","运动","动作","一样","毕竟","。","只能","都","中","一个","执行","机器人","先","命令"],"title":"一对多通信","title_tokens":["多","一对","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_5","text":"既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。","text_tokens":["的","，","通信接口","action","一种","通信","我们","介绍","过","过程","之前","数据","接口","机制","文件","定义","同步","有","也","动作","。","是","中",".","既然","那","反馈","使用","进行"],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_6","text":"大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。","text_tokens":["发现","服务器","下","的","，","目标","服务器端","应用层","没错","调用","者","看","还会","一种","实现","应用","通信","客户端","上边","隐藏","过程","话题","是不是","服务","机制","当","三个","发送","和","发布","务器","大家","竟然","客户","有","周期","订阅","其","也","底层","再","来","运动","动作"," ","模块","表示","。","时","会","两个","是","基于","请求","一个","就是","反馈","不是","动图","秘密","使用","应带","命令","其实","发布者","收到","仔细"],"title":"由服务和话题合成","title_tokens":["话题","服务","合成","和","由"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_7","text":"我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback","text_tokens":["的","启动","对","，","接下来","某","rotate","action","turtle1","--","我们","控制","1.57","可以","让","goal",":","/","theta","teleop","加深","feedback","send","rotateabsolute","案例","到","turtle","\"","姿态","{","下来","absolute","node","以下","运动","动作","海龟","接下"," ","一","指定","概念","小海","理解","：","。","key","info","_","}","run","$","-","turtlesim","真器","小海龟","仿真","ros2","再用","使用","命令","按照","仿真器"],"title":"案例一：小海龟的动作","title_tokens":["的","一","动作","海龟","小海龟","小海","：","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_8","text":"如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。","text_tokens":["服务器","的","，","编程","呢","接下来","假设","服务器端","实际","实现","不会","通信","我们","通过","圈","客户端","转个","特性","让","就","针对","过程","希望","话题","但","一套","接口","服务","和","并","代码","机器","客户","好","有","而是","封装","虽然","下来","务器","来","直接","动作","接下"," ","。","如何","是","基于","中","试一试","请","一个","机器人","？","使用","在","一起","方法"],"title":"案例二：机器人画圆","title_tokens":["机器人","二","案例","：","画圆","机器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_9","text":"启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。","text_tokens":["服务器","的","启动","终端","，","服务端","目标","服务器端","度","接下来","下","运行","action","server","开始","分析","分别","原理","实现","我们","一下","客户端","模拟","可以","就","之后","这个","服务","完成","发送","和","机器","务器","客户","并","下来","运动","动作","30"," ","看到","接下","：","learning","。","_","两个","run","$","示例","client","中","每","信息","结束","机器人","背后","反馈","最终","ros2","move","命令","一次","例程"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_10","text":"例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是动作的目标，enable为true时，表示开始运动； 第二块是动作的执行结果，finish为true，表示动作执行完成； 第三块是动作的周期反馈，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ...","text_tokens":["，","一块","编译","ros","不同","功能","...","定义","三个","interfaces","{","运动","name","二块","第一块","learning","_","第三块","包含","语言","project","不是","结果","周期","部分","配置","自动","开始","自定义","包","编译器","generate","/",")","接口","int32","当前","到","机器","第三","动作","default","。","}","finish","第二块","中","机器人","state","movecircle","find","自定","bool","generators","需要","进行","成功","；","txt","后","生成","通过","三块","让","标准","过程","位置","#","true","rosidl","package","interface","required","旋转","(","：","时","是","第一",".","反馈","角度","使用","例程","的","目标","还","action","是否","为","我们","---","根据","完成","\"","并","代码","选项","接口定义","指令"," ","enable","表示","$","第二","执行","cmakelists","在"],"title":"接口定义","title_tokens":["接口","接口定义","定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_11","text":"通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。","text_tokens":["服务器","的","，","目标","接下来","理","运行","后","开始","分析","通信","控制","我们","一下","客户端","清楚","相比","模型","话题","这样","相对","之前","较长","写","服务","思路","发送","和","起来","机器","务器","客户","并","代码","下来","通信模型","运动","动作","一","接下"," ","发送给","。","就是","一个","结束","机器人","信息","反馈","程序","周期","例程","送给"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_12","text":"learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["，","编译","对象","init","circle","0.5","*","movecircleactionserver","初始化","...","feedback","功能","定义","__","务器","{","com","关闭","node","运动","name","名","result","learning","destroy","等待","_","示例","!","主","shutdown","actionserver","（","程序","i","return","结果","30","周期","0","配置","负责",",","www","、","圆周运动","节点","自定义","包","rclpy","goal","/",")","execute","接口","服务","当前","文件","到","points","msg","coding","创建","居","类型","动作","库","get","%","}","py","=","finish","[","8","一个","state","movecircle","sleep","time","move","moving","自定","接口类型","需要","进行","logger","从","'","成功","服务端","publish","setup","后","server","点","usr","publishing","class","让","函数","圆周",":","guyuehome","#","true","加入","类","循环","接口类","console","打开","说明","回调","none","消息","interface","古月","设置","(","callback","如下","：","系统","初始",".","反馈","角度","d","ros2","python3","收到","服务器","的","目标","度","bin","销毁","action","entry","succeed","处理函数","之后","spin","env","def","退出","完成","\"","range","360","并","处理","发布","代码","import","from","）","in","main","选项"," ","]","作者","utf","super","表示","info","@","for","编写","self","入口","args","-","scripts","信息","执行","最终","知道","父类","handle","python"],"title":"服务端代码解析","title_tokens":["服务","代码","服务端","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_13","text":"learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["，","编译","对象","init","circle","客户端","希望","*","数据","初始化","feedback","功能","send","定义","发送","__","务器","if","{","com","关闭","node","运动","name","名","result","learning","destroy","等待","_","示例","!","wait","主","shutdown","actionclient","（","程序","return","结果","周期","配置","使",",","www","add","、","圆周运动","开始","节点","接收","自定义","包","rejected","rclpy","goal","/",")","movecircleactionclient","接口","服务","文件","points","msg","机器","coding","创建","居","]","类型","动作","库","get","%","}","py","=","finish","[","client","8","一个","机器人","not","state","movecircle","读取","move","自定","接口类型","如果","被","需要","进行","logger","'","启动","服务器端","setup","能","后","server","点","usr","方式","异步","class","输出","让","函数","圆周",":","guyuehome","#","true","加入","类","循环","接口类","console","打开","说明","回调","none","客户","消息","日志","interface","古月","设置","(","callback","如下","response","：","拒绝执行","时","系统","请求","初始",".","future","反馈","d","ros2","python3","拒绝","收到","服务器","的","目标","bin","销毁","action","entry","为","之后","spin","env","def","received","退出","完成","\"","async","并","代码","处理","import","from","）","main","获取","选项"," ","enable","作者","utf","super","accepted","info","@","for","顺利","编写","self","入口","args","-","scripts","执行","最终","done","知道","父类","handle","python"],"title":"客户端代码解析","title_tokens":["解析","客户端","客户","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_14","text":"动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求","text_tokens":["的","action",">","goal","list","#","数据","服务","send","<","发送","type","列表","操作","类型","name","动作"," ","如下","查看","：","info","_","$","请求","常用","data","ros2","命令","数据类型"],"title":"动作命令行操作","title_tokens":["命令","操作","动作","命令行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["-",".",":","tutorials","/","ros","https","org","docs","ros2","humble","actions","html","en","understanding"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/","text":"参数 话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。 通信模型 比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。 全局字典 在ROS系统中，参数是以全局字典的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。 可动态监控 在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。 案例一：小海龟例程中的参数 在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 参数列表 参数查询与修改 $ ros2 param describe turtlesim background_b $ ros2 param get turtlesim background_b $ ros2 param set turtlesim background_b 10 参数文件保存与加载 $ ros2 param dump turtlesim >> turtlesim.yaml $ ros2 param load turtlesim turtlesim.yaml 案例二：参数编程 接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。 运行效果 $ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle 代码解析 learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], }, 案例三：机器视觉应用 参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。 运行效果 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180 代码解析 learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["某","，","ros","光线","128","分别","180","circle","清楚","由","sensor","就","像素","驱动","后边","__","大家","node","变量","麻烦","名","learning","shutdown","比如","（","程序","exe","？","先","sub",",","www","图像识别","从而","开始","上限","左上","坐标","大大","image","苹果","—","到","可","不少","msg","en","有","优化","创建","居","类型","接下","什么","小海","。","run","那个","非常","读取","打印","提示","了解","加载","时候","msgs","问题","tutorials","端口","upper","boundingrect","后","默认","看","class","组成","可以","让","guyuehome","加入","循环","console","案例","么","说明","<","比较简单","化成","命令行","这","共享","定时器","red","进入","d","真实","h","的","销毁","是否","跟","mask","我们","cv2","办法","approx","写","这个","关注","main","）","in","获取","宽","形态","utf","for","hello","与","drawcontours","执行","计算","小海龟","仿真","简单","合成","在","条","编译","者","太小","通信","所在","解析","默认值","*","功能","set","type","if","字典","提炼","参考","docs","等待","_","会","某些","便于","主","成","用于","background","+","曝光","0","inrange","接下来","一两","图像处理","颜色","分辨","subscription","节点","名称","比较","5","应用","cam","特性","叫","区域","其他","点画","得到","服务","文件","points","互相","大大提高","color","hierarchy","下来","再","库","发送给","%","}","mbot","8","turtlesim","提供","cvbridge","真器","findcontours","存在","chain","物体","如果","需要","辨率","logger","下","每次","imagesubscriber","setup","一种","usr","转化","通过","过程",":","255","号","节","视觉","打开","显示","传输方式","turtle","消息","设置","robot","(","来","海龟","二值化","链接","初始",".","declare","动态","ros2","python3","定时","imshow","对","丰富","很大","例程","目标","度","bin","还","s","为","以","立刻","spin","list","含义","完成","即可","易用性","10","秒","listener","队列","编写","info","new","然后","挺","修改","2","$","入口","create","b","-","信息","150","命令","receiving","很多","格式","img","string","不同",">","cnt","一两句","轮廓","及","像","考虑","检测","或者","value","最新","{","com","numpy","中心","关闭","一","name","一样","传输","不如","相机","cvtcolor","周期","配置","understanding","送给","50","配置文件","二","类似","hsv","humble","一下","包","模型",")","timer","dump","机器","订阅","指定","org","理解","raw","get","美颜","叫做","一个","all","进行","环境","上角","改变","xy","方式","实现","输出","函数","长度","#","nodea","键和值","none","古月","也","等","callback","如下","噪声","：","系统","如何","是","int","勾勒","常用","90","使用","敏感","仿真器","呢","可能","运行","阈值","变化","entry","bgr8","全局","env","出来","参数设置","cv","机制","一些","起来","继续","代码","处理","编码","识别","输入框","from","选项","左上角"," ","作者","https","两句","self","html","都","args","usb","data","describe","知道","父类","访问","三种","detect","对象","init","本","c++","yaml","图像","话题","integer","continue","数据","作用","就要","初始化","不","发送","和","列表","单位","来看","parameternode","frame","通信模型","key","destroy","示例","!","这些","三","as","转换","不是","bgr","部分","方法","值","体验","、","contours","parameter","已","param","说干就干","object","将","核心","opencv","imgmsg","rclpy","retr","参数值","/","bridge","等等","接口","去除","易用","coding","load","键值","动作","面积","lower","参数","nodeb","py","=","[","效果","提高","中","机器人","已经","输入","x","video","array","从","'","编程","to","waitkey","点","数值","保存","parameters","teleop","类","np","回调","分辨率","日志","红色","重新","y","连接","shape","范围","就是","1","高级","用到","几个","bgr2hsv","高","全局变量","把","滑动","介绍","def","影响","退出","哪个","监控","\"","并","import","多个","了","熟悉","]","super","表示","查询","@","整个","w","scripts","下限","多少","转化成","python"],"title":"**参数**","title_tokens":["*","参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_1","text":"话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。","text_tokens":["的","，","编程","、","运行","ros","一种","是否","节点","方式","本","类似","通信","我们","全局变量","清楚","c++","可以","介绍","全局","话题","数据","服务","机制","节","—","不","传输方式","机器","大家","字典","再","多个","变量","来","动作"," ","传输","这","。","参数","系统","共享","是","某些","便于","中","常用","机器人","在","已经","程序","知道","了解","三种"],"title":"参数","title_tokens":["参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_2","text":"比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。","text_tokens":["格式","，","条","不同","分别","就","图像","像","驱动","考虑","作用","功能","或者","和","一样","会","相机","这些","比如","程序","曝光","部分","配置","配置文件","图像识别","分辨","节点","核心","区域","等等","文件","到","机器","有","面积","什么","。","参数","nodeb","效果","美颜","中","那个","输入","时候","需要","进行","辨率","改变","问题","端口","后","通过","可以","过程","视觉","nodea","分辨率","设置","也","连接","这","是","就是","使用","很大","的","度","阈值","是否","我们","滑动","参数设置","影响","哪个","关注","一些","编码","识别","输入框"," ","整个","都","执行","usb","多少","在","很多"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_3","text":"在ROS系统中，参数是以全局字典的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。","text_tokens":["的","，","编程","ros","名称","数值","跟","为","我们","由","组成","可以","以","叫","全局","就","参数值","像","号","这个","后边","或者","键和值","和","即可","有","也","字典","等","了","键值","一样"," ","形态","名","理解","什么","。","参数","系统","然后","是","叫做","中","一个","就是","存在","真实","？","合成","使用","在","时候","访问"],"title":"全局字典","title_tokens":["全局","字典"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_4","text":"在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。","text_tokens":["高级","的","，","某","编程","用到","可能","从而","节点","数值","可以","特性","立刻","其他","办法","最新","大家","有","也","了","获取"," ","这","。","参数","共享","修改","都","会","中","一个","比如","非常","ros2","如果","知道","在","对","丰富","访问","进行"],"title":"可动态监控","title_tokens":["动态","可","监控"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_5","text":"在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["的","，","下","我们","通过","teleop","这个","含义","turtle","不少","起来","和","也","命令行","了","node","一","熟悉","海龟"," ","key","小海","。","参数","_","run","$","中","turtlesim","提供","真器","小海龟","仿真","ros2","使用","命令","在","仿真器","例程","方法"],"title":"案例一：小海龟例程中的参数","title_tokens":["的","一","海龟","小海龟","小海","：","案例","参数","例程","中"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_6","text":"","text_tokens":[],"title":"参数列表","title_tokens":["列表","参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_7","text":"$ ros2 param describe turtlesim background_b $ ros2 param get turtlesim background_b $ ros2 param set turtlesim background_b 10","text_tokens":["b","turtlesim","10","describe"," ","ros2","param","get","set","background","_","$"],"title":"参数查询与修改","title_tokens":["与","查询","修改","参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_8","text":"$ ros2 param dump turtlesim >> turtlesim.yaml $ ros2 param load turtlesim turtlesim.yaml","text_tokens":[".","yaml","turtlesim","load"," ","ros2","param","dump",">","$"],"title":"参数文件保存与加载","title_tokens":["保存","文件","参数","与","加载"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_9","text":"接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。","text_tokens":["体验","的","，","接下来","一两","几个","开始","比较","实现","一两句","我们","一下","可以","函数","就","就要","写","比较简单","和","设置","下来","了","来","接下","这","。","参数","两句","都","中","读取","程序","简单","使用","先","在","方法"],"title":"案例二：参数编程","title_tokens":["编程","二","案例","：","参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_10","text":"$ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle","text_tokens":["robot","declare","name","parameter"," ","turtle","ros2","param","learning","set","_","run","$"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_11","text":"learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], },","text_tokens":["，","编译","string","对象","init","默认值","*","初始化","功能","value","set","发送","type","__","列表","{","单位","com","parameternode","node","关闭","name","learning","destroy","等待","_","示例","!","主","shutdown","（","程序","周期","配置","值","送给",",","www","、","parameter","节点","param","将","包","rclpy","参数值","/",")","timer","接口","文件","points","到","coding","创建","居","库","指定","发送给","get","%","参数","py","}","=","[","mbot","中","8","一个","all","读取","打印","需要","进行","logger","从","'","setup","默认","后","点","usr","数值","class","输出","parameters","让","函数",":","guyuehome","#","加入","类","循环","console","打开","说明","回调","none","日志","重新","古月","robot","设置","(","callback","如下","：","系统","初始",".","定时器","declare","ros2","python3","定时","的","bin","销毁","entry","s","为","spin","env","def","退出","完成","\"","并","代码","import","from","）","main","选项","秒"," ","]","作者","utf","super","编写","info","@","new","hello","self","修改","2","入口","create","args","-","scripts","信息","执行","知道","父类","python"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_12","text":"参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。","text_tokens":["的","，","呢","每次","下","运行","不同","光线","阈值","还","说干就干","看","比较","变化","应用","把","我们","先","可以","就","过程","大大","么","视觉","大大提高","继续","机器","代码","大家","易用","优化","识别","设置","也","易用性","提炼","了","来看","再","敏感","麻烦"," ","。","参数","挺","如何","会","是","修改","示例","不如","效果","提高","中","机器人","动态","成","已经","程序","不是","使用","？","物体","在","对","环境"],"title":"案例三：机器视觉应用","title_tokens":["三","视觉","：","案例","应用","机器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_13","text":"$ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180","text_tokens":["h","detect","parameter","upper","param","object","180","cam","set","node"," ","learning","_","run","$","usb","red","ros2","exe"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_14","text":"learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], },","text_tokens":["，","编译","img","detect","对象","ros","者","init","128","太小","180","cnt","circle","轮廓","sensor","所在","及","图像","话题","像素","integer","*","continue","检测","初始化","功能","value","和","__","if","{","numpy","com","中心","frame","node","关闭","name","名","learning","destroy","等待","_","示例","!","cvtcolor","主","shutdown","（","用于","as","转换","bgr","程序","+","0","sub","配置","inrange","50",",","www","、","图像处理","contours","parameter","颜色","已","subscription","节点","param","object","5","上限","hsv","将","opencv","包","左上","imgmsg","rclpy","模型","参数值","retr","坐标","点画","/",")","bridge","得到","image","接口","苹果","去除","互相","到","文件","points","msg","color","订阅","coding","创建","居","hierarchy","类型","库","面积","lower","raw","get","%","参数","py","}","=","[","效果","中","8","一个","cvbridge","findcontours","读取","打印","chain","提示","x","video","需要","array","进行","logger","从","'","msgs","上角","xy","imagesubscriber","to","setup","upper","boundingrect","waitkey","后","点","usr","数值","转化","通过","class","输出","让","函数","长度",":","guyuehome","#","加入","类","255","np","循环","console","显示","说明","回调","none","<","打开","消息","日志","红色","y","化成","古月","设置","(","callback","如下","二值化","噪声","：","shape","范围","系统","int","勾勒","初始",".","1","red","declare","进入","d","ros2","python3","90","使用","imshow","编写","h","的","目标","bgr2hsv","高","bin","销毁","阈值","entry","mask","为","bgr8","cv2","list","spin","env","出来","def","approx","cv","退出","完成","\"","一些","并","代码","处理","识别","import","from","）","10","in","宽","main","左上角","选项"," ","]","作者","utf","super","队列","listener","@","表示","info","for","self","与","2","入口","create","drawcontours","args","-","w","信息","scripts","data","下限","计算","150","知道","父类","转化成","receiving","python"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["-",".",":","tutorials","/","ros","https","org","docs","ros2","humble","html","en","parameters","understanding"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/","text":"分布式通信 智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统，可以实现多计算平台上的任务分配。 分布式通信 什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。 分布式网络搭建 除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。 树莓派配置 在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。 装系统 我们先要给树莓派装系统，这里我们选择的是Ubuntu Mate针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/ 装ROS2 在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。 编译代码 将我们课程的代码也下载到树莓派中，进行编译。 远程桌面 如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728 分布式数据传输 树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 * 如使用虚拟机，请将虚拟机网络修改为桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。 分布式网络分组 没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。 案例一：小海龟分布式控制 分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动。 $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端 案例二：话题分布式通信 我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串。 $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端 案例三：服务分布式通信 话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能。 案例四：机器视觉分布式应用 以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体。 $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。 参考链接 https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["，","ros","之外","于是","这种","情况","由","上边","就","压力","测试","端的","不在","网络","驱动","不够","大家","方便","node","一句","虚拟","learning","原本","csdn","比如","world","键盘","程序","exe","？","体积","先","sub","反过","顺利实现","如","四","局域网","反过来","数据传输","算机","做","放","122599728","—","到","en","遇到","有","给","接下","只","什么","小海","。","run","pc","两者","几乎","非常","download","而言","article","启动","像头","问题","经常","后","domain","组成","可以","设计","加入","案例","<","命令行","分组","智能","这","字符","典型","树莓","以上","的","小组","确保","款","同一个","是否","我们","事情","过","针对","能力","没有","任务","模式","helloworld","hello","笔记","计算","小海龟","仿真","在","实时","桥接","编译","卡中","者","发生","通信","笔记本","端","选择","之间","局域","*","功能","远程","cpp","基本一致","参考","计算能力","docs","拆解","会","_","用","学习","每","里","没","带来","卡顿","接下来","节点","比较","应用","有点","cam","叫","整体","框架","小","服务","看上","mate","下来","再","只要","ubuntu","采集","轻松","流程","concepts","据传","处于","字符串","topic","turtlesim","sd","提供","真器","烧写","物体","如果","需要","下","多","demo","个","上","通过","派端","客户端程序",":","远程桌面","视觉","显示","turtle","电脑","而是","来","海龟","链接","传感",".","显示器","ros2","平台","布式","例程","还","想","为","打通","这样","完成","即可","发给","发布","所","任务分配","资料","分布式","listener","结构","编写","开发","挺","然后","修改","流畅","$","-","信息","另外","分配","命令","很多","不同",">","控制","客户端","希望","像","感受","或者","感器","net","务器","无法","一","一样","复杂","传输","魅力","nodes","如此","主要","52785580","配置","真有","较","桌面","二","互通","任何","实际","相互","加法","类似","humble","一下","装","讲过","机器","订阅","org","一个","about","并且","带领","这里","环境","进行","成功","实现","鼠标","岂","步骤","才能","上去","传感器","#","your","全都","同一","的话","一系","webcam","客户","中有","也","等","过来","如下","毕竟","放在","：","系统","是","各种","派里","互联","不过","使用","仿真器","消耗","服务器","呢","可能","运行","变化","派装","下载","此外","之后","一系列","具体","之一","机制","简而言之","一些","起来","基本","我","处理","代码","继续","依然","不在话下","识别","计算机"," ","放置","https","系列","一致","html","两个","都","摄像","请","usb","安排","访问","繁多","服务器程序","减轻","则","分布式系统","qq","频繁","图像","话题","之前","数据","不","和","分布式应用","运动","出现","key","支持","看上去","这些","求和","还是","三","不是","一切","经典","方法","笔记本电脑","、","将","模拟","啦","/","建立","神奇","export","资源","操作","动作","这么","摄像头","控制器","py","=","效果","完全","中","机器人","details","talker","已经","位于","友好","适合","变得","小型","派","试试","搭建","teleop","讲","bashrc","红色","感觉","连接","就是","分布","先要","虚拟机","性能","局域网络","blog","用到","id","pub","除了","更强","他们","你","镜像","监控","并","好","安装","似乎","电机","多个","作为","了","课程","直接","顺利","采用","网上","发布者"],"title":"**分布式通信**","title_tokens":["分布","*","分布式","通信","布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_1","text":"智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统，可以实现多计算平台上的任务分配。","text_tokens":["繁多","的","，","、","减轻","多","经常","运行","上","实现","将","岂","分布式系统","情况","可以","压力","全都","功能","算机","能力","不够","到","机器","处理","遇到","任务分配","任务","等","多个","计算机","出现","分布式"," ","计算能力","智能","放在","这","。","系统","拆解","会","中","一个","就是","机器人","里","这些","分布","计算","不是","？","分配","平台","如果","卡顿","布式"],"title":"分布式通信","title_tokens":["分布式","布式","分布","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_2","text":"什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。","text_tokens":["，","减轻","ros","不同","于是","通信","控制","这种","分布式系统","笔记本","由","上边","就","压力","之间","之前","驱动","数据","功能","感受","不","感器","和","大家","方便","远程","运动","一","复杂","传输","魅力","原本","每","主要","看上去","这些","比如","？","体积","配置","较","笔记本电脑","接下来","任何","相互","节点","比较","将","应用","有点","叫","框架","算机","小","做","放","到","资源","机器","看上","有","下来","接下","只","控制器","什么","。","完全","中","一个","机器人","并且","非常","已经","位于","带领","需要","环境","下","适合","多","上","实现","组成","可以","派","设计","上去","传感器","视觉","讲","电脑","也","等","毕竟","这","放在","系统","是","传感","就是","分布","典型","各种","派里","性能","树莓","不过","平台","布式","消耗","的","可能","运行","款","还","变化","更强","为","我们","此外","过","之一","监控","起来","处理","好","任务","电机","作为","了","计算机","分布式"," ","结构","开发","挺","两个","都","采用","信息","笔记","另外","计算","分配","在"],"title":"分布式通信","title_tokens":["分布式","布式","分布","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_3","text":"除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。","text_tokens":["的","笔记本电脑","，","除了","之外","上","我们","控制","模拟","笔记本","派","选择","机器","我","电脑","了","放置","控制器","。","一个","机器人","笔记","另外","计算","树莓","使用","平台","在"],"title":"分布式网络搭建","title_tokens":["分布","搭建","网络","分布式","布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_4","text":"在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。","text_tokens":["的","，","我们","派","可以","之前","大家","好","有","资料","也","参考","开发","。","都","网上","树莓","先","在","很多","配置","需要","环境"],"title":"树莓派配置","title_tokens":["树莓","配置","派"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_5","text":"我们先要给树莓派装系统，这里我们选择的是Ubuntu Mate针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/","text_tokens":["的","，","启动","卡中","我们","派装","下载","派","可以","就","针对","之后",":","选择","/","镜像","到","mate","给","了"," ","ubuntu","https","org","：","。","系统","是","链接","-",".","先要","sd","树莓","烧写","这里","download"],"title":"装系统","title_tokens":["装","系统"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#ros2","text":"在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。","text_tokens":["电脑","的","，","端","一样"," ","ubuntu","ros2","安装","。","系统","流程","和","在","mate","好","中"],"title":"装ROS2","title_tokens":["ros2","装"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_6","text":"将我们课程的代码也下载到树莓派中，进行编译。","text_tokens":["的","也","，","进行","编译","课程","树莓","中","。","到","将","我们","下载","代码","派"],"title":"编译代码","title_tokens":["代码","编译"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_7","text":"如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728","text_tokens":["的","，","article","桌面","上","鼠标","通过","步骤","qq","端","可以","派","就","整体",":","远程桌面","网络","/","122599728","的话","显示","不","和","net","基本","大家","好","有","方便","电脑","远程","也","操作","了","直接","基本一致","参考"," ","如下","https","连接","：","。","系统","流程","一致","_","链接",".","csdn","details","52785580","键盘","显示器","树莓","以上","使用","如果","在","配置","blog","访问"],"title":"远程桌面","title_tokens":["远程桌面","远程","桌面"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_8","text":"树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 * 如使用虚拟机，请将虚拟机网络修改为桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。","text_tokens":["，","者","发生","通信","端","测试","就","希望","话题","局域","网络","*","之前","像","之间","不","和","无法","cpp","一样","虚拟","nodes","_","用","会","里","？","带来","配置","接下来","如","、","互通","局域网","节点","将","一下","神奇","算机","做","服务","讲过","到","订阅","下来","动作","接下","只要","什么","。","py","run","效果","pc","中","处于","一个","talker","并且","已经","如果","而言","需要","启动","问题","demo","个","后","实现","派端","派","可以","#","同一","中有","电脑","而是","命令行","等","也","感觉","分组","如下","连接","：","这","是","虚拟机","树莓","ros2","局域网络","互联","使用","不过","平台","的","小组","呢","确保","同一个","为","我们","事情","他们","打通","具体","这样","你","能力","简而言之","完成","所","发布","并","安装","好","了","直接","模式","计算机"," ","listener","两个","都","修改","$","请","计算","发布者","命令","在","很多","桥接"],"title":"分布式数据传输","title_tokens":["数据传输","分布","分布式","数据","传输","据传","布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_9","text":"没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。","text_tokens":["的","，","小组","问题","则","id","ros","domain","不同","同一个",">","实现","类似","通信","我们","将","才能","可以","派","就","端的","这样","your","加入","算机","同一","机制","到","export","即可","和","<","bashrc","电脑","无法","了","计算机","分组","一样"," ","一句","：","。","_","=","两者","中","处于","一个",".","提供","没","计算","树莓","ros2","如果","分配","在","配置"],"title":"分布式网络分组","title_tokens":["分布","网络","分组","分布式","布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_10","text":"分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动。 $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端","text_tokens":["真有","成功","反过","的","，","启动","ros","上","是否","想","节点","反过来","通信","我们","仿真器","控制","派端","端","可以","派","测试","过","试试","网络","建立","之前","神奇","#","teleop","案例","—","或者","turtle","一些","继续","似乎","电脑","依然","也","了","node","来","运动","分布式","这么"," ","海龟","过来","key","小海","。","_","run","流畅","学习","$","pc","中","turtlesim","分布","真器","已经","小海龟","仿真","树莓","键盘","ros2","先","在","布式","例程","经典"],"title":"案例一：小海龟分布式控制","title_tokens":["分布","一","海龟","分布式","小海龟","小海","：","案例","控制","布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_11","text":"我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串。 $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端","text_tokens":["的","下","，","呢","任何","pub","者","是否","通信","我们","派端","情况","端","可以","派","试试","话题","#","之前","不","发布","代码","电脑","订阅","作为","直接"," ","编写","learning","。","helloworld","hello","_","修改","字符","$","run","pc","字符串","topic","world","树莓","ros2","发布者","使用","？","先","在","sub","例程"],"title":"案例二：话题分布式通信","title_tokens":["话题","分布","二","分布式","案例","：","通信","布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_12","text":"话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能。","text_tokens":["服务器","顺利实现","，","服务器程序","问题","运行","加法","实现","我们","派端","客户端","端","客户端程序","可以","话题","不在","功能","服务","没有","务器","客户","不在话下","电脑","也"," ","顺利","。","求和","还是","程序","树莓"],"title":"案例三：服务分布式通信","title_tokens":["分布","分布式","三","服务","：","案例","通信","布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_13","text":"以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体。 $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。","text_tokens":["，","ros","频繁","端","测试","端的","图像","网络","不够","功能","不","node","复杂","learning","_","会","支持","如此","这些","没","exe","？","一切","sub","配置","方法","接下来","任何","实际","节点","将","类似","模拟","cam","啦","做","机器","下来","再","接下","只要","摄像头","采集","。","轻松","run","pc","几乎","中","一个","topic","机器人","提供","非常","物体","需要","友好","像头","问题","变得","上","通过","派端","小型","派","可以","搭建","#","视觉","一系","webcam","红色","电脑","也","连接","系统","分布","树莓","ros2","以上","使用","布式","例程","的","用到","还","为","我们","一系列","没有","发给","代码","处理","好","识别","了","分布式"," ","开发","系列","然后","修改","都","$","摄像","usb","安排","在","实时"],"title":"案例四：机器视觉分布式应用","title_tokens":["分布","四","分布式","视觉","案例","：","应用","机器","分布式应用","布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_14","text":"https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["-","about",".",":","/","id","ros","https","org","docs","domain","humble","html","concepts","en"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2_%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/","text":"从本节开始，我们将进入第二个篇章，以ROS2的核心概念为线索，详细讲解ROS2的应用开发方法。","text_tokens":["的","，","二个","开始","将","为","核心","我们","应用","第二个","以","开发方法","本节","概念","篇章","开发","。","从本节","第二","线索","进入","详细","ros2","讲解","方法"],"title":"2 核心概念","title_tokens":["核心","2","概念"," "]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/","text":"Launch：多节点启动与配置脚本 到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是Launch启动文件。 它是ROS系统中多节点启动与配置的一种脚本。 Launch文件 这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。 多节点启动 运行效果 文件解析 learning_launch/simple.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'learning_topic' , executable = 'topic_helloworld_pub' , ), Node ( package = 'learning_topic' , executable = 'topic_helloworld_sub' , ), ]) 命令行参数配置 运行效果 文件解析 learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): rviz_config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ Node ( package = 'rviz2' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' , rviz_config ] ) ]) 资源重映射 运行效果 文件解析 learning_launch/remapping.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , namespace = 'turtlesim2' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , executable = 'mimic' , name = 'mimic' , remappings = [ ( '/input/pose' , '/turtlesim1/turtle1/pose' ), ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), ] ) ]) ROS参数设置 运行效果 文件解析 learning_launch/parameters.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node def generate_launch_description (): background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) ) return LaunchDescription ([ background_r_launch_arg , background_g_launch_arg , background_b_launch_arg , Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [{ 'background_r' : LaunchConfiguration ( 'background_r' ), 'background_g' : LaunchConfiguration ( 'background_g' ), 'background_b' : LaunchConfiguration ( 'background_b' ), }] ), ]) learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , namespace = 'turtlesim2' , name = 'sim' , parameters = [ config ] ) ]) Launch文件包含 运行效果 文件解析 learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction from launch_ros.actions import PushRosNamespace def generate_launch_description (): parameter_yaml = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ parameter_yaml_with_namespace ]) learning_launch/parameters_nonamespace.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [ config ] ) ]) 功能包编译配置 ... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ... 参考链接 https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docsros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["，","编译","没错","ros","当然","各个","turtle1","turtlesim2","includelaunchdescription","substitutions","就","解析","yaml","像","*","packages","功能","...","或者","value","模版","和","turtlesim1","sim","大家","launch","{","原有","node","pythonlaunchdescriptionsource","name","麻烦","出现","一样","重","参考","mimic","docs","learning","_","看上去","包含","groupaction","84","xml","return","input","？","background","甚至","+","0","配置","sub","描述","text",",","config","parameter","完整","122","节点","类似","humble","目前为止","核心","这是","包","乍","directory","launchconfiguration","组装","generate","脚本","/","大大",")","文件","到","资源","机器","看上","en","频次","namespace","share","description","粘合","sources","org","答案","get","default","。","参数","py","}","=","[","效果","namespaces","目的","resource","基于","中","glob","一个","topic","机器人","turtlesim","合剂","所有","输入","r","path","了解","为止","os","带领","需要","进行","docsros","'","启动","终端","每次","编程","index","多","tutorials","多样","好像","arguments","remappings","一种","自由","方式","前为","通过","之高","映射","parameters","可以","上去","过程",":","vel","中多","打开","多样化","一系","launchdescription","turtle","large","package","一次性","设置","命令行","也","executable","files","很多","来","(","projects","目前","textsubstitution","：","每当","系统","如何","是","阅读","链接","remapping","就是",".","output","rviz2","各种","新","d","ros2","使用","g","呀","一次","丰富","粘合剂","例程","的","它","呢","pose","相当","运行","还","pub","我们","cmd","arg","肯定","一系列","这样","def","rviz","参数设置","simple","没有","actions","代码","好","from","import","main","了"," ","]","with","https","编写","helloworld","系列","for","join","html","与","都","declarelaunchargument","nonamespace","-","b","ament","data","那","using","pushrosnamespace","命令","在","有没有","python"],"title":"**Launch：多节点启动与配置脚本**","title_tokens":["启动","多","*","脚本","节点","：","与","配置","launch"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch","text":"到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是Launch启动文件。 它是ROS系统中多节点启动与配置的一种脚本。","text_tokens":["的","，","终端","每次","启动","呢","它","运行","ros","当然","节点","一种","方式","我们","前为","目前为止","可以","肯定","这样","脚本","中多","没有","打开","到","文件","机器","launch","好","一次性","麻烦","目前"," ","答案","一次","。","每当","系统","是","都","与","中","一个","就是","机器人","有没有","那","所有","新","？","呀","命令","为止","很多","配置","需要"],"title":"Launch：多节点启动与配置脚本","title_tokens":["启动","多","脚本","节点","：","与","配置","launch"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_1","text":"这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。","text_tokens":["，","没错","ros","各个","就","像","功能","或者","模版","和","大家","launch","原有","出现","一样","看上去","甚至","配置","描述","完整","节点","类似","核心","这是","乍","组装","大大","文件","看上","频次","粘合","。","参数","目的","基于","中","一个","合剂","输入","了解","带领","进行","启动","编程","多样","好像","自由","通过","之高","可以","上去","过程","多样化","一系","命令行","也","来","系统","如何","是","阅读","就是","各种","ros2","使用","呀","丰富","粘合剂","例程","的","它","呢","相当","还","我们","一系列","这样","代码","了"," ","编写","系列","那","命令","在","很多","python"],"title":"Launch文件","title_tokens":["文件","launch"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_1","text":"","text_tokens":[],"title":"多节点启动","title_tokens":["多","节点","启动"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_2","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_3","text":"learning_launch/simple.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'learning_topic' , executable = 'topic_helloworld_pub' , ), Node ( package = 'learning_topic' , executable = 'topic_helloworld_sub' , ), ])","text_tokens":["'",",","ros","pub","generate","def",":","/",")","simple","launchdescription","actions","package","launch","from","import","description","node","(","executable"," ","]","learning","helloworld","py","_","=","[",".","topic","return","sub"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_4","text":"","text_tokens":[],"title":"命令行参数配置","title_tokens":["命令","命令行","配置","参数"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_5","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_6","text":"learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): rviz_config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ Node ( package = 'rviz2' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' , rviz_config ] ) ])","text_tokens":["'","index","config",",","arguments","ros","directory","generate","def","rviz","/",")",":","packages","launchdescription","actions","turtle","package","launch","import","from","share","node","description","(","executable","name"," ","]","get","learning","py","_","=","join","[","-",".","ament","rviz2","d","return","os","path","python"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_7","text":"","text_tokens":[],"title":"资源重映射","title_tokens":["资源","重","映射"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_8","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_9","text":"learning_launch/remapping.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , namespace = 'turtlesim2' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , executable = 'mimic' , name = 'mimic' , remappings = [ ( '/input/pose' , '/turtlesim1/turtle1/pose' ), ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), ] ) ])","text_tokens":["'",",","pose","remappings","ros","turtle1","turtlesim2","cmd","generate","def",":","/",")","vel","launchdescription","actions","turtlesim1","sim","package","launch","namespace","from","import","description","node","(","executable","name"," ","]","mimic","learning","py","_","=","[","remapping",".","output","turtlesim","return","input"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#ros","text":"","text_tokens":[],"title":"ROS参数设置","title_tokens":["参数设置","设置","参数","ros"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_10","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_11","text":"learning_launch/parameters.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node def generate_launch_description (): background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) ) return LaunchDescription ([ background_r_launch_arg , background_g_launch_arg , background_b_launch_arg , Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [{ 'background_r' : LaunchConfiguration ( 'background_r' ), 'background_g' : LaunchConfiguration ( 'background_g' ), 'background_b' : LaunchConfiguration ( 'background_b' ), }] ), ]) learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , namespace = 'turtlesim2' , name = 'sim' , parameters = [ config ] ) ])","text_tokens":[",","'","index","config","ros","122","turtlesim2","parameters","arg","substitutions","directory","launchconfiguration","yaml","generate","def",":","/",")","packages","value","launchdescription","actions","sim","package","launch","{","namespace","from","import","description","node","(","executable","name","os","share"," ","]","textsubstitution","get","learning","default","}","py","_","=","[","join","declarelaunchargument","b",".","ament","turtlesim","84","return","r","background","g","0","path","text","python"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_2","text":"","text_tokens":[],"title":"Launch文件包含","title_tokens":["文件","包含","launch"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_12","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_13","text":"learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction from launch_ros.actions import PushRosNamespace def generate_launch_description (): parameter_yaml = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ parameter_yaml_with_namespace ]) learning_launch/parameters_nonamespace.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [ config ] ) ])","text_tokens":["'","index",",","config","parameter","ros","turtlesim2","includelaunchdescription","parameters","directory","yaml","generate","def",":","/",")","packages","launchdescription","actions","sim","package","launch","namespace","import","from","share","description","pythonlaunchdescriptionsource","(","node","executable","sources","name"," ","]","with","get","learning","namespaces","py","_","=","[","join","nonamespace",".","ament","turtlesim","groupaction","return","pushrosnamespace","os","path","python"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_14","text":"... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ...","text_tokens":["'","index",",","config","rviz","/",")","*","packages","...","package","launch","files","share","(","name"," ","]","resource","py","_","=","[","join","glob",".","ament","data","xml","+","os","path"],"title":"功能包编译配置","title_tokens":["配置","包","编译","功能"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docsros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["tutorials","ros","humble",":","/","large","en","launch","projects","main"," ","org","https","docs","for","html","-",".","using","ros2","docsros"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/","text":"TF：机器人坐标系管理神器 坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器——TF。 机器人中的坐标系 机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做基坐标系Base Frame，机器人安装位置在外部环境下的参考系叫做世界坐标系World Frame，机器人末端夹爪的位置叫做工具坐标系，外部被操作物体的位置叫做工件坐标系，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是基坐标系Base Link，雷达所在的位置叫做雷达坐标系laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做里程计坐标系odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做地图坐标系map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为平移和旋转两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实向量的数学描述。 ROS中TF功能的底层原理，其实就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。 TF命令行操作 ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。 小海龟跟随例程 这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 查看TF树 $ ros2 run tf2_tools view_frames 查询坐标变换信息 $ ros2 run tf2_ros tf2_echo turtle2 turtle1 坐标系可视化 $ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。 静态TF广播 我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为静态TF变换，我们来看看在程序中该如何实现？ 运行效果 $ ros2 run learning_tf static_tf_broadcaster 代码解析 learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？ TF监听 我们再来学习下如何查询两个坐标系之间的位置关系。 运行效果 $ ros2 run learning_tf tf_listener 代码解析 learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。 海龟跟随功能解析 运行效果 $ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 原理解析 在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？这两个向量我们可以根据海龟的位置话题计算出来，那这个位置向量不就容易得到了么。 我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心是这个向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。 Launch文件解析 learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ]) 坐标系动态广播 learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 海龟跟随 learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":["某","，","树","ros","还会","on","准备","这种","情况","清楚","substitutions","就","quat","header","theta","左边","prefix","__","大家","算法","launch","变换","node","及时","名","learning","准备就绪","监听","最为","shutdown","比如","world","平移","（","程序","你家","看似","？","tools","坐标系","先","else","描述","跟随","www",",","两者之间","transformlistener","四","sudo","一本","srv","坐标","做","—","到","msg","en","有","创建","居","share","description","给","小海","q","。","broadcaster1","run","两者","turtlename","odom","clock","非常","雷达","角速度","参考系","提示","了解","之为","时候","向量","动","启动","msgs","pitch","publish","tutorials","后","默认","看","生成","一层","statictransformbroadcaster","class","可以","让","10.0","位置","the","guyuehome","相对","加入","循环","console","案例","么","说明","twist","spawning","产生","命令行","神器","这","时","scale","基础","算出","夹","底盘","定时器","世界","进入","trans","d","管理系统","缓冲","view","的","分解","销毁","是否","我们","pkg","否则","着急","根据","所以","这个","没有","successfully","main","）","获取","buffer","形态","查看","utf","与","broadcaster","固定","那","base","rate","计算","小海龟","仿真","done","简单","在","编译","可视","距离","者","turtle1","发生","怎么样","所在","transformations","house","解析","默认值","之间","抓取","*","意思","功能","sim","if","forward","参考","该","不变","result","docs","等待","_","会","statictfbroadcaster","child","学习","用","便于","每","translation","变成","现在","没","要","+","0","讲解","中间","机器人学","移动机器人","末端","优先","理论","完整","subscription","节点","向","turtletfbroadcaster","following","名称","5","有点","install","turtlefollowing","得到","服务","文件","points","linear","再","只要","库","%","}","8","turtlesim","提供","至关","真器","存在","源","tflistener","static","物体","被","如果","需要","logger","下","setup","器","demo","怎样","一种","usr","上","通过","随便","不断","过程","激光",":","经过","异常","容易","true","看看","打开","launchdescription","turtle","消息","package","箭头","speed","设置","(","来","atan2","海龟",".__","矩阵","链接","报告","请求","内","保持","初始",".","激光雷达","f","declare","动态","stamp","跟随运动","ros2","python3","定时","变得复杂","对","例程","目标","bin","try","位","应该","还","s","为","--","戳","spin","挑战","map","这样","就绪","frames","angular","quaternion","ex","外部","完成","async","发布","姿态","其中","房子","listener","could","编写","info","然后","2","$","入口","create","-","信息","欧拉角","transformation","另外","tf2","命令","很多","string","内容","5.0",">","控制","客户端","机械","计算出来","格外","value","定义","三个","务器","{","z","com","中心","关闭","name","速度","一样","复杂","呗","臂","试一试","主要","return","周期","配置","source","人学","转变成","1.0","humble","包","launchconfiguration","generate",")","timer","发生变化","想起","机器","方向","订阅","里程","org","理解","外部环境","get","default","叫做","一个","关系","其实","3","两只","按照","环境","进行","慢慢","成功","xy","标志","target","实现","service","now","教材","函数","长度","spawned","#","vel","包括","sqrt","none","客户","爪","turtle2","哪些","古月","也","旋转","存储","executable","callback","如下","概念","：","系统","如何","transformexception","是","rel","echo","rviz2","知识","显得","里程计","使用","一只","器类","解决","可视化","仿真器","得","spawner","lookup","服务器","pose","呢","常见","link","连线","加","运行","原理","变化","entry","很","cmd","之后","全局","具体","env","数","欧拉","出来","又","绝对","时刻","误差","一些","继续","基本","代码","处理","起来","依然","from","选项","中心点","指令"," ","作者","https","self","两个","都","call","html","0.0","declarelaunchargument","args","管理","laser","高中","tf","知道","基","父类","段","spawn","对象","管理系","init","移动","广播","4","话题","作用","数据","四乘","初始化","send","不","发送","和","sendtransform","封装","frame","拆","运动","key","destroy","工具","示例","监听器","!","这些","四元","至关重要","as","转换","不是","roll","部分","一起","称之为","方法","自动","、","parameter","同理","不要","将","核心","transformstamped","rclpy","参数值","啦","/","是不是","接口","当前","euler","怎么","重要","底层","coding","操作","失败","参数","py","=","[","效果","基于","中","生变","client","工件","机器人","理论知识","背后","not","time","时间","已经","地图","x","线速度","'","to","request","变得","点","数值","保存","不会","漂移","transformbroadcaster","parameters","试试","更新","teleop","类","except","回调","中画","y","空间","transform","float","broadcaster2","范围","ready","is","就是","1","转变","角度","pos","math","静态","又会有","id","yaw","apt","有所","false","geometry","def","动机","rviz","退出","良好","哪个","actions","\"","并","说","安装","好","缓冲区","import","了","熟悉","关于","finished","]","super","数学","表示","中该","查询","@","publisher","相应","w","scripts","出","详细","rotation","累积","python"],"title":"**TF：机器人坐标系管理神器**","title_tokens":["管理","机器人","坐标","*","tf","神器","：","坐标系","机器"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf","text":"坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器——TF。","text_tokens":["机器人学","的","，","人学","ros","完整","我们","坐标","位置","之间","—","重要","机器","也","给","了","熟悉","该"," ","概念","神器","。","系统","如何","基础","是","会","中","管理","一个","机器人","这些","提供","关系","非常","tf","存在","？","坐标系","在","很多"],"title":"TF：机器人坐标系管理神器","title_tokens":["管理","机器人","坐标","tf","神器","：","坐标系","机器"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_1","text":"机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做基坐标系Base Frame，机器人安装位置在外部环境下的参考系叫做世界坐标系World Frame，机器人末端夹爪的位置叫做工具坐标系，外部被操作物体的位置叫做工件坐标系，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是基坐标系Base Link，雷达所在的位置叫做雷达坐标系laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做里程计坐标系odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做地图坐标系map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为平移和旋转两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实向量的数学描述。 ROS中TF功能的底层原理，其实就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。","text_tokens":["，","管理系","ros","移动","所在","机械","就","之间","抓取","四乘","功能","格外","和","大家","封装","中心","frame","变换","参考","一样","复杂","臂","会","工具","每","主要","这些","比如","world","平移","至关重要","要","看似","？","坐标系","部分","讲解","描述","方法","机器人学","跟随","移动机器人","人学","两者之间","四","末端","理论","一本","坐标","机器","重要","有","底层","操作","里程","外部环境","。","两者","叫做","中","odom","一个","工件","机器人","理论知识","关系","至关","雷达","地图","其实","参考系","物体","被","向量","环境","进行","下","变得","漂移","一层","通过","教材","可以","不断","过程","位置","相对","中画","爪","哪些","空间","也","旋转","矩阵","系统","范围","是","夹","内","就是","世界","管理系统","知识","显得","里程计","使用","变得复杂","对","的","又会有","呢","分解","link","原理","变化","为","我们","map","动机","绝对","这个","误差","良好","外部","一些","基本","安装","中心点","了","关于"," ","形态","数学","两个","都","管理","出","laser","固定","那","base","tf","详细","简单","基","在","累积"],"title":"机器人中的坐标系","title_tokens":["的","机器人","坐标","坐标系","机器","中"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_1","text":"ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。","text_tokens":["的","，","呢","下","跟随","ros","一种","坐标系","我们","通过","坐标","机器","算法","海龟","该","小海","。","如何","示例","基于","中","机器人","tf","小海龟","使用","？","先","了解","两只"],"title":"TF命令行操作","title_tokens":["命令","操作","命令行","tf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_2","text":"这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key","text_tokens":["的","，","启动","自动","跟随","运行","ros","demo","apt","humble","我们","通过","控制","包","sudo","可以","就","之后","install","具体","teleop","功能","这个","文件","turtle","launch","安装","其中","来","运动","海龟"," ","key","小海","。","然后","py","会","如何","效果","示例","$","_","相应","run","-","试一试","一个",".","turtlesim","另外","小海龟","跟随运动","ros2","tf2","？","一只","先","tools","需要"],"title":"小海龟跟随例程","title_tokens":["跟随","海龟","小海龟","小海","例程"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_2","text":"$ ros2 run tf2_tools view_frames","text_tokens":["frames"," ","ros2","tf2","tools","_","view","run","$"],"title":"查看TF树","title_tokens":["tf","树","查看"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_3","text":"$ ros2 run tf2_ros tf2_echo turtle2 turtle1","text_tokens":["echo"," ","ros","ros2","tf2","turtle1","_","run","$","turtle2"],"title":"查询坐标变换信息","title_tokens":["变换","信息","查询","坐标"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_4","text":"$ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。","text_tokens":["慢慢","跟随","的","，","呢","下","原理","怎样","不要","--","有点","pkg","我们","rviz",")","/","着急","意思","prefix","案例","turtle","大家","share","(","来","海龟"," ","理解","小海","这","。","py","_","run","是","$","便于","-",".","背后","rviz2","tf","d","小海龟","ros2","tf2","？","使用","先","了解","方法"],"title":"坐标系可视化","title_tokens":["可视","可视化","坐标","坐标系"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_3","text":"我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为静态TF变换，我们来看看在程序中该如何实现？","text_tokens":["的","，","常见","应该","变化","发生","不会","实现","我们","这种","很","情况","就","之后","试试","激光","坐标","位置","之间","相对","作用","发生变化","这个","哪个","看看","不","静态","和","机器","基本","说","安装","好","也","拆","变换","来","房子","只要","呗"," ","中该","。","系统","如何","是","底盘","中","管理","最为","一个","主要","生变","机器人","激光雷达","关系","比如","那","tf","雷达","之为","程序","简单","你家","？","坐标系","在","对","称之为","进行"],"title":"静态TF广播","title_tokens":["广播","tf","静态"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_5","text":"$ ros2 run learning_tf static_tf_broadcaster","text_tokens":["tf"," ","ros2","learning","static","broadcaster","_","run","$"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_6","text":"learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？","text_tokens":["，","编译","对象","ros","init","5.0","广播","清楚","transformations","house","quat","header","*","初始化","功能","__","{","sendtransform","z","com","frame","变换","node","name","该","不变","learning","destroy","等待","_","child","statictfbroadcaster","示例","!","translation","shutdown","world","平移","四元","（","程序","转换","roll","？","坐标系","0","配置","描述",",","www","、","节点","向","将","包","transformstamped","rclpy","坐标","/",")","接口","文件","points","到","euler","msg","coding","创建","居","库","get","}","py","=","[","中","8","一个","clock","关系","时间","源","static","3","x","时候","需要","进行","'","msgs","pitch","to","setup","器","后","点","usr","statictransformbroadcaster","class","now","让","10.0",":","位置","经过","guyuehome","#","加入","类","循环","console","打开","说明","none","消息","y","古月","transform","设置","旋转","(","如下","：","这","系统","如何","是","保持","初始",".","1","stamp","ros2","python3","使用","器类","静态","的","呢","目标","bin","id","销毁","yaw","变化","entry","为","我们","戳","geometry","spin","env","数","def","欧拉","又","quaternion","退出","完成","\"","并","代码","import","from","）","main","选项","了"," ","]","作者","utf","super","编写","查询","@","self","两个","2","broadcaster","入口","0.0","args","-","w","scripts","欧拉角","tf","rotation","tf2","知道","父类","段","python"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_4","text":"我们再来学习下如何查询两个坐标系之间的位置关系。","text_tokens":["下","的","再","坐标","位置","来","之间","关系","坐标系","查询","。","如何","我们","两个","学习"],"title":"TF监听","title_tokens":["tf","监听"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_7","text":"$ ros2 run learning_tf tf_listener","text_tokens":["tf"," ","listener","ros2","learning","_","run","$"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_8","text":"learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。","text_tokens":["某","，","编译","string","对象","ros","init","on",">","transformations","house","quat","默认值","之间","*","左边","初始化","功能","value","__","大家","{","z","com","frame","变换","node","关闭","name","名","learning","destroy","等待","_","用","示例","监听","监听器","!","translation","shutdown","world","四元","现在","（","程序","as","return","坐标系","周期","0","source","配置",",","www","跟随","transformlistener","parameter","优先","节点","1.0","包","rclpy","参数值","坐标","啦","/",")","timer","接口","当前","文件","到","points","euler","失败","coding","创建","居","库","get","%","参数","py","}","=","[","。","8","一个","not","time","时间","tflistener","源","static","x","如果","了解","两只","需要","进行","logger","'","to","setup","默认","后","点","usr","数值","target","保存","now","class","让",":","位置","异常","guyuehome","#","加入","类","except","循环","console","案例","打开","说明","none","y","古月","transform","存储","设置","(","海龟","如下","：","系统","transformexception","报告","f","初始",".","定时器","1","declare","进入","trans","pos","ros2","python3","缓冲","使用","定时","对","lookup","的","目标","bin","try","销毁","entry","有所","s","--","我们","spin","挑战","env","否则","def","数","时刻","ex","quaternion","退出","外部","完成","\"","继续","并","代码","处理","姿态","好","基本","缓冲区","import","from","）","main","获取","buffer","选项","了"," ","listener","作者","utf","super","could","info","@","]","编写","self","两个","2","入口","broadcaster","create","args","-","w","信息","scripts","固定","tf","rotation","tf2","知道","父类","python"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_9","text":"","text_tokens":[],"title":"海龟跟随功能解析","title_tokens":["解析","海龟","跟随","功能"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_10","text":"$ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key","text_tokens":[".","turtlesim","tf"," ","turtle","demo","teleop","ros2","key","learning","following","py","_","run","$","launch"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_11","text":"在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？这两个向量我们可以根据海龟的位置话题计算出来，那这个位置向量不就容易得到了么。 我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心是这个向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。","text_tokens":["某","，","距离","还会","turtle1","怎么样","广播","就","话题","计算出来","定义","三个","和","不","封装","中心","变换","运动","参考","速度","该","用","学习","监听","比如","world","要","不是","？","坐标系","周期","一起","中间","描述","方法","跟随","同理","向","核心","坐标","得到","是不是","做","想起","怎么","方向","有","再","。","两者","叫做","中","一个","真器","时间","参考系","两只","按照","向量","动","下","上","看","实现","可以","随便","长度","不断","位置","容易","相对","么","turtle2","箭头","设置","也","海龟","这","时","如何","算出","是","1","就是","动态","角度","解决","仿真器","得","例程","的","连线","加","我们","很","全局","出来","这样","根据","所以","这个","起来","发布","代码","说","好","中心点","了"," ","表示","然后","两个","2","与","高中","那","tf","计算","仿真","在"],"title":"原理解析","title_tokens":["原理","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#launch","text":"learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ])","text_tokens":["'",",","demo","ros","target","following","turtle1","parameters","substitutions","launchconfiguration","generate","def",":","/",")","value","launchdescription","turtle","actions","sim","package","launch","{","turtle2","from","import","description","node","(","executable","name","frame"," ","]","listener","broadcaster2","learning","default","}","py","_","=","[","broadcaster1","broadcaster","turtlename","declarelaunchargument",".","turtlesim","tf","return"],"title":"Launch文件解析","title_tokens":["解析","文件","launch"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_12","text":"learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], },","text_tokens":["，","编译","string","对象","ros","者","init","广播","transformations","默认值","header","*","theta","初始化","功能","send","value","__","{","sendtransform","z","com","frame","变换","node","及时","name","关闭","learning","destroy","等待","_","用","child","示例","!","translation","shutdown","world","平移","变成","四元","（","程序","转换","roll","坐标系","0","配置",",","www","转变成","、","parameter","优先","subscription","节点","turtletfbroadcaster","名称","向","将","包","transformstamped","rclpy","参数值","坐标","/",")","接口","文件","points","到","euler","msg","订阅","coding","创建","居","库","小海","get","q","参数","py","}","=","[","turtlename","中","8","一个","clock","turtlesim","时间","源","3","static","x","需要","进行","'","msgs","pitch","to","setup","器","默认","后","点","usr","数值","transformbroadcaster","now","class","让","函数","the",":","位置","更新","guyuehome","#","加入","类","循环","console","打开","说明","回调","turtle","none","消息","y","古月","设置","transform","旋转","(","海龟","callback","如下","：","系统","f","初始",".","1","declare","转变","动态","stamp","ros2","python3","使用","的","pose","目标","bin","id","销毁","yaw","变化","entry","为","戳","geometry","spin","env","否则","def","欧拉","数","quaternion","退出","外部","完成","\"","并","代码","处理","import","from","）","main","获取","选项"," ","]","作者","utf","super","编写","listener","@","self","2","broadcaster","入口","create","0.0","args","-","w","信息","scripts","欧拉角","transformation","tf","小海龟","rotation","tf2","知道","父类","python"],"title":"坐标系动态广播","title_tokens":["动态","广播","坐标","坐标系"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_13","text":"learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], },","text_tokens":["spawn","，","编译","string","对象","ros","距离","init","内容","on","turtle1","准备","控制","客户端","transformations","4","默认值","话题","theta","*","左边","数据","初始化","功能","value","发送","__","if","务器","{","z","com","forward","frame","node","变换","关闭","速度","name","运动","名","result","learning","destroy","等待","_","用","准备就绪","示例","监听","监听器","!","translation","shutdown","没","程序","as","return","else","坐标系","周期","+","0","source","配置","跟随","www",",","、","transformlistener","parameter","优先","节点","following","5","包","rclpy","srv","参数值","turtlefollowing","坐标","/",")","timer","接口","服务","当前","文件","到","points","msg","linear","失败","coding","创建","居","]","库","get","参数","py","}","=","[","client","8","一个","turtlesim","not","time","时间","已经","角速度","源","提示","static","x","如果","线速度","需要","进行","成功","logger","'","msgs","xy","publish","to","setup","request","默认","标志","后","usr","生成","数值","实现","保存","点","通过","service","class","now","让","spawned",":","位置","异常","guyuehome","#","vel","true","包括","类","except","加入","循环","console","打开","说明","twist","turtle","spawning","sqrt","none","消息","客户","产生","turtle2","y","speed","古月","transform","存储","设置","(","atan2","海龟",".__","如下","float","：","系统","transformexception","rel","scale","ready","is","报告","请求","f","初始",".","1","定时器","declare","进入","trans","角度","跟随运动","ros2","python3","缓冲","使用","定时","math","spawner","lookup","服务器","的","目标","bin","位","try","还","销毁","变化","是否","entry","false","cmd","geometry","spin","env","否则","def","就绪","根据","时刻","ex","angular","退出","没有","外部","完成","\"","async","发布","并","successfully","姿态","代码","缓冲区","依然","finished","import","from","main","选项","获取","buffer","指令"," ","listener","作者","utf","super","publisher","info","@","could","查看","表示","self","call","2","编写","入口","create","broadcaster","args","-","scripts","信息","固定","rate","tf","计算","done","rotation","tf2","知道","父类","python"],"title":"海龟跟随","title_tokens":["海龟","跟随"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_14","text":"https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":["-",".","main",":","tutorials","/","ros","https","org","docs","tf2","humble","html","en"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/","text":"URDF：机器人建模方法 ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法——URDF，用来描述机器人外观、性能等各方面属性。 机器人的组成 建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由硬件结构、驱动系统、传感器系统、控制系统四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备，驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等，传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境，控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。 URDF ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是XML格式，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为连杆Link，手肘就类似于机器人电机驱动部分，称为关节joint。 所以在URDF建模过程中，关键任务就是通过这里的 和 ，理清楚每一个连杆和关节的描述信息。 连杆Link的描述 标签用来描述机器人某个刚体部分的外观和物理属性，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。Link里边的 部分用来描述机器人的外观，比如 表示几何形状，里边使用 调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的。 表示坐标系相对初始位置的偏移，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分 ，描述碰撞参数，里边的内容似乎和 一样，也有 和 ，看似相同，其实区别还是比较大的。 部分重在描述机器人看上去的状态，也就是视觉效果， 部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过 来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是 里边 描述的形状。 坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。 关节Joint描述 机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 第一种continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 第二种revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 第三种prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 第四种是fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 第五种Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 既然是运动，就是相对的，parent标签描述父连杆，child标签描述子连杆，子连杆会相对父连杆发生运动。 这里的origin表示两个连杆坐标系之间的关系，也就是这个向量，可以理解为这两个连杆该如何安装到一起。 Axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的。 Limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等，大家注意单位，ROS中关于平移的默认单位都是m，旋转是弧度，不是度，所以这里3.14就表示可以在-180度到180度之间运动，速度也是m/s，或者rad/s。 完整机器人模型 最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。 创建机器人模型 好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。 功能包结构 urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件 查看URDF模型结构 $ urdf_to_graphiz mbot_base.urdf # 在模型文件夹下 模型可视化效果 模型文件解析 learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot> 参考链接 https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":["某","，","ros","分别","180","这种","由","硬件","清楚","就","meshes","第四","驱动","left","大家","launch","桌子","learning","找","名字","控制系统","既然","比如","平移","等于","看似","？","子","先","坐标系","描述","各","大臂","自定义","局","坐标","碰撞","—","到","caster","en","有","创建","给","称为","三维","类型","独自","肘关节","什么","。","自身","floating","四种","雷达","所有","四大","了解","时候","向量","启动","像头","pitch","tutorials","默认","看","惯性","组成","让","可以","设计","位置","相对","0.16","<","偏移","产生","清晰","这","graphiz","时","底盘","里边","树莓","管理系统","真实","看下","的","分解","理","围绕","我们","无论是","0.20","着急","所以","这个","刚体","任务","main","3.14","查看","建模语言","用来","算作","与","0.095","相对运动","固定","base","计算","右侧","引用","在","revolute","可视","少","0.4","发生","接触","设备","解析","之间","有点像","功能","version","第一种","type","载体","带有","参考","该","正常","关节","sphere","docs","组成部分","_","会","用","child","0.19","便于","每","要","0","移动机器人","0.05","父","1.5707","颜色","完整","名称","比较","应用","有点","0.18","0.025","叫","直线","视觉效果","文件","color","看上","不仅","再","肌肉","状态","mbot","0.015","提供","组合","几何","如果","标签","rgba","需要","下","多","相关","一种","上","网页","转关","通过","某个","第六种","关键","过程",":","视觉","实打实","m","电脑","而是","robot","第五种","来","planar","矩阵","柱体","链接","传感","初始",".","平台","对","它","平面","度","visual","还","无论","s","xacro","组合而成","为","0.95","为例","以","操作系统","这样","算力","绿色","外部","于","属性","完成","其中","right","结构","框","开发","$","手","-","信息","全称","手臂","back","格式","一块","质心","调用","内容",">","驱动器","rad","控制","模型简化","机械","第二个","检测","五种","或者","感器","定义","z","无法","name","速度","一样","复杂","相同","臂","fixed","相机","板载","主要","限制","语言","驱使","xml","沿某","parent","配置","较","配置文件","实际","1.0","类似","必须","humble","统一","细节","包","模型","浮动","0.9","length","软件","机器","方向","二种","物理","第三","尖括号","小臂","看到","第六","理解","外部环境","raw","cylinder","org","叫做","一个","极限","关系","其实","按照","这里","进行","环境","先来","front","两种","方式","continuous","手肘","才能","重在","电源","允许","小车","上去","传感器","#","包括","全都","的话","一系","一般","件夹","哪些","也","等","旋转","外观","建模","如下","：","放在","系统","如何","源代码","是","stl","xyz","joint","第一","专门","使用","不过","可视化","得","形状","属于","呢","常见","link","面上","蓝色","括号","变化","自己","之后","一系列","区别","市面","第三种","一些","起来","代码","编码","未来"," ","放置","独立","https","市面上","系列","单位向量","一致","认识","为此","都","imu","两个","html","管理","摄像","第二","三种","要求","则","管理系","当然","移动","第五","频繁","white","之前","碰撞检测","不","形成","和","单位","最大","material","运动","第四种","rpy","轮子","limit","轴","示例","外壳","看上去","简化","这些","还是","唯一","radius","最小","不是","roll","部分","一起","无限","度到","方法","axis","、","在于","二个","提前","注意","将","乍","啦","/","等等","装置","此时","操作","这么","摄像头","参数","=","效果","哪","完全","中","或","机器人","全为","第二种","车体","为了","urdf","大","圆柱","自定","x","六种","正","to","圆柱体","保存","不会","?","派","方面","不能","连杆","讲","这款","感知","y","存放","prismatic","包围","连接","wheel","应用软件","就是","1","yellow","文件夹","码器","角度","性能","编码器","质量","高","尺寸","旋转关节","把","一段","origin","他们","滑动","介绍","geometry","动机","外界","渲染","rviz","思路","0.06","\"","每个","安装","以及","好","似乎","电机","了","熟悉","关于","表示","black","弧度","最终"],"title":"**URDF：机器人建模方法**","title_tokens":["机器人","建模","*","urdf","：","机器","方法"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf","text":"ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法——URDF，用来描述机器人外观、性能等各方面属性。","text_tokens":["下","，","的","呢","、","ros","当然","还","一种","各","把","我们","让","介绍","操作系统","啦","方面","之前","—","属性","机器","操作","等","给","了","外观","建模"," ","用来","。","系统","如何","认识","是","为此","一个","机器人","提供","专门","性能","要","urdf","使用","不过","？","在","得","描述","方法"],"title":"URDF：机器人建模方法","title_tokens":["机器人","建模","urdf","：","机器","方法"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_1","text":"建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由硬件结构、驱动系统、传感器系统、控制系统四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备，驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等，传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境，控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。","text_tokens":["，","管理系","移动","驱动器","控制","由","硬件","机械","设备","清楚","驱动","感器","和","载体","正常","组成部分","臂","控制系统","便于","每","外壳","板载","主要","这些","比如","还是","语言","驱使","先","部分","描述","移动机器人","、","应用","类似","等等","软件","机器","装置","操作","再","状态","看到","摄像头","。","参数","中","一个","机器人","雷达","组合","其实","四大","按照","需要","进行","环境","像头","上","通过","组成","可以","电源","派","过程","传感器","包括","感知","一般","实打实","电脑","等","建模","这","系统","是","传感","底盘","应用软件","就是","码器","里边","树莓","管理系统","编码器","使用","平台","的","常见","分解","面上","无论","把","自己","我们","操作系统","无论是","市面","动机","思路","外部","一些","起来","编码","安装","以及","电机","了","熟悉"," ","建模语言","结构","开发","市面上","都","imu","管理","摄像","计算"],"title":"机器人的组成","title_tokens":["机器","的","机器人","组成"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_1","text":"ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是XML格式，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为连杆Link，手肘就类似于机器人电机驱动部分，称为关节joint。 所以在URDF建模过程中，关键任务就是通过这里的 和 ，理清楚每一个连杆和关节的描述信息。","text_tokens":["格式","，","ros","由","清楚","机械","就","有点像","驱动","和","大家","无法","运动","桌子","关节","臂","每","看上去","这些","比如","xml","？","部分","描述","方法","大臂","有点","必须","统一","类似","乍","模型","文件","机器","看上","不仅","尖括号","小臂","肌肉","独自","称为","肘关节","外部环境","。","自身","叫做","中","一个","机器人","urdf","组合","标签","这里","环境","下","看","网页","通过","手肘","才能","组成","可以","关键","上去","过程","相对","连杆","一系","产生","清晰","也","建模","包围","连接","源代码","如何","是","joint","就是","使用","的","呢","link","理","还","括号","组合而成","自己","我们","他们","之后","一系列","这样","所以","这个","外部","于","属性","代码","刚体","任务","电机","其中"," ","独立","开发","系列","算作","都","手","相对运动","信息","全称","手臂","右侧","在"],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#link","text":"标签用来描述机器人某个刚体部分的外观和物理属性，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。Link里边的 部分用来描述机器人的外观，比如 表示几何形状，里边使用 调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的。 表示坐标系相对初始位置的偏移，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分 ，描述碰撞参数，里边的内容似乎和 一样，也有 和 ，看似相同，其实区别还是比较大的。 部分重在描述机器人看上去的状态，也就是视觉效果， 部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过 来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是 里边 描述的形状。 坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。","text_tokens":["，","要求","质心","则","调用","内容","移动","分别","接触","控制","模型简化","机械","第二个","就","检测","碰撞检测","定义","不","和","z","name","运动","一样","该","复杂","相同","轮子","臂","会","用","看上去","简化","比如","平移","还是","roll","看似","坐标系","部分","0","描述","较","移动机器人","、","颜色","二个","实际","名称","提前","比较","将","类似","自定义","模型","视觉效果","坐标","碰撞","文件","到","软件","机器","方向","看上","有","物理","三维","状态","raw","。","参数","效果","中","一个","机器人","全为","车体","为了","大","圆柱","其实","自定","x","几何","如果","标签","时候","需要","pitch","上","圆柱体","惯性","某个","通过","可以","重在","设计","小车","上去","过程","位置","相对","包括","连杆","的话","视觉","偏移","y","也","等","旋转","外观","来","如下","矩阵","连接","：","柱体","时","如何","stl","是","joint","就是","初始","里边","真实","使用","质量","形状","的","它","高","link","尺寸","蓝色","我们","为例","以","区别","这样","外界","动机","算力","这个","绿色","属性","好","似乎","刚体","未来","了"," ","表示","框","用来","一致","算作","与","第二","计算","在"],"title":"连杆Link的描述","title_tokens":["link","描述","的","连杆"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#joint","text":"机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 第一种continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 第二种revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 第三种prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 第四种是fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 第五种Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 既然是运动，就是相对的，parent标签描述父连杆，child标签描述子连杆，子连杆会相对父连杆发生运动。 这里的origin表示两个连杆坐标系之间的关系，也就是这个向量，可以理解为这两个连杆该如何安装到一起。 Axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的。 Limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等，大家注意单位，ROS中关于平移的默认单位都是m，旋转是弧度，不是度，所以这里3.14就表示可以在-180度到180度之间运动，速度也是m/s，或者rad/s。","text_tokens":["某","，","少","ros","内容","180","发生","第五","rad","这种","频繁","机械","就","第四","之间","五种","或者","不","第一种","和","大家","单位","z","最大","带有","运动","第四种","速度","该","关节","轮子","limit","臂","fixed","相机","轴","名字","child","会","每","既然","比如","限制","平移","还是","唯一","xml","要","等于","最小","不是","子","沿某","坐标系","parent","一起","无限","描述","axis","度到","较","父","在于","比较","注意","叫","模型","直线","浮动","坐标","/","到","机器","方向","二种","有","此时","第三","类型","第六","理解","什么","。","floating","四种","哪","中","一个","极限","机器人","第二种","关系","urdf","六种","标签","正","这里","向量","进行","两种","默认","一种","上","方式","continuous","转关","不会","通过","第六种","才能","可以","允许","小车","位置","相对","不能","连杆","一般","m","产生","而是","也","旋转","等","第五种","prismatic","planar","连接","这","如何","是","joint","第一","就是","1","角度","不过","使用","的","属于","平面","度","link","变化","围绕","旋转关节","s","origin","一段","为","滑动","之后","区别","这样","第三种","所以","这个","一些","安装","刚体","电机","了","3.14","关于"," ","表示","单位向量","两个","都","-","相对运动","第二","弧度","固定","最终","在","revolute","三种"],"title":"关节Joint描述","title_tokens":["描述","joint","关节"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_2","text":"最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。","text_tokens":["的","，","某","一块","先来","link","下","完整","看","细节","由","组成","局","就","之后","模型","了解","着急","全都","所以","这个","完成","形成","不","每个","和","机器","代码","大家","哪些","robot","再","了"," ","放在","。","找","时","是","joint","完全","中","每","一个","机器人","最终","所有","urdf","组合","先","在","部分","对","描述","标签"],"title":"完整机器人模型","title_tokens":["机器","模型","机器人","完整"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_3","text":"好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。","text_tokens":["的","，","移动机器人","它","多","完整","看","移动","我们","为例","以","模型","过程","啦","动机","讲","这款","机器","好","了","建模","这么"," ","。","示例","一个","机器人","还是","要","urdf","一起","看下"],"title":"创建机器人模型","title_tokens":["创建","机器","模型","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_4","text":"urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件","text_tokens":["的","启动","配置文件","相关","保存","xacro","模型","meshes","渲染","rviz","文件","机器","launch","存放"," ","放置","：","中","或","机器人","urdf","引用","配置"],"title":"功能包结构","title_tokens":["结构","包","功能"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_2","text":"$ urdf_to_graphiz mbot_base.urdf # 在模型文件夹下","text_tokens":[".","模型","下","文件夹","to","#","base"," ","urdf","graphiz","文件","_","在","$","mbot","件夹"],"title":"查看URDF模型结构","title_tokens":["urdf","结构","模型","查看"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_5","text":"","text_tokens":[],"title":"模型可视化效果","title_tokens":["可视","效果","模型","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_6","text":"learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot>","text_tokens":["parent","0.05","link","visual","1.5707","front","0.4",">","1.0","continuous","0.95","origin","?","white","0.18","0.025","geometry","0.20","/","0.16","0.9","version","left","length","<","\"","0.06","type","caster","color","robot","material","right","name"," ","rpy","sphere","learning","cylinder","black","_","=","0.19","xyz","wheel","mbot","joint","child","0.095","-","0.015","yellow",".","1","base","xml","radius","urdf","back","rgba","0","axis"],"title":"模型文件解析","title_tokens":["解析","模型","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_7","text":"https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":["-",".","main",":","tutorials","/","ros","https","org","docs","urdf","humble","html","en"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/","text":"Gazebo：三维物理仿真平台 ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台Gazebo，了解一下。 Gazebo仿真平台 介绍 Gazebo是ROS系统中最为常用的三维物理仿真平台，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。 安装 Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-* 运行 通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py 注意：为保证模型顺利加载，请将离线模型文件库下载并放置到~/.gazebo/models路径下， https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。 XACRO机器人模型优化 我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本——XACRO文件。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro 常量定义 一些常用的XACRO文件语法，大家了解下。 标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。 数学计算 如果需要做数学计算，同样是在$加大括号中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 注意：所有数学运算都会转换成浮点数进行，以保证运算精度 宏定义 机器人的轮子我们也做成宏定义，定义方式是通过这个 标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。 文件包含 宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。 机器人仿真模型配置 完善物理参数 第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。 添加Gazebo标签 第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。 配置传动装置 第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。 添加控制器插件 第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。 构建仿真环境 接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ]) 机器人运动仿真 万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard 注意：虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。 Ignition：下一代Gazebo 随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为Ignition，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/ 附录：机器人完整模型 learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["某","，","ros","于是","keyboard","这种","硬件","就","测试","第四","left","prefix","hardwareinterface","算法","大家","launch","动力","方便","二步","node","变量","12","c语言","一句","虚拟","learning","找","原本","名字","最为","硬件加速","比如","world","键盘","？","先","结果","化","make","描述","enabled",",","www","footprint","velocityjointinterface","want","force","值为","t","sudo","四步","碰撞","运算","动力学","做","—","plugin","到","可","caster","宏","不多","优化","有","创建","share","description","给","官方网站","三维","接下","小海","似曾相识","0.75","。","ignition","run","可编","根本","odom","state","必要","所有","r","了解","加载","时候","升级","turngravityoff","启动","像头","问题","be","publish","max","惯性","joints","可以","让","设计","the","位置","相对","加入","0.16","么","<","twist","放到","interface","me","比","版本","这","c","时","底盘","改成","完善","trans","里边","新","怎么办","装上","diameter","以上","into","h","的","精度","确保","worlds","include","摩擦力","motor","我们","pkg","保证","ixy","针对","0.20","办法","差速","语句","写","所以","这个","转换成","似曾","没有","随着","in","gazebo","插件","模块","万事","用来","for","iyy","pi","our","除法","那","base","rate","计算","小海龟","仿真","简单","在","path","官方","0.4","command","人机","有点像","*","实验","功能","version","set","sim","if","传动装置","type","二句","pythonlaunchdescriptionsource","参考","该","关节","sphere","限飞","奇迹","_","用","路径","会","某些","一步","交给","0.19","每","想不起来","child","官方网","so","没","要","+","0","传递","where","移动机器人","0.05","actuator","接下来","颜色","完整","名称","节点","use","5","应用","有点","0.2","0.18","0.025","叫","install","得到","inertial","文件","互相","点数","color","尽量","下来","不仅","再","a","库","really","inertia","进步","}","流程","很长","mbot","drive","0.015","topic","提供","差不多","真器","认识一下","上来","刚好","如果","rgba","标签","实物","这句","需要","下","transmission","多","blue","个","相关","上","第一句","通过","20","不断","系数","重复使用","过程",":","做成","true","验证","launchdescription","package","m","设置","robot","doesn","(","来","海龟","试一下","sure","传感",".","output","update","加大","摩擦","ros2","第三步","controller","平台","对","切分","丰富","重复","它","度","visual","odometry","还","ignitionrobotics","xacro","0.95","为","--","reference","手边","一行","以","vgpu10","list","区分","这样","条件","spwan","完成","属性","无人机","right","同时","还要","开发","然后","修改","流畅","$","2","params","-","b","信息","demos","命名","另外","3.1415926","分配","命令","更为","高质","很多","rgbd","back","格式","同样","调用","不同","iyz","colors",">","控制","correctly","及","语法","高质量","像","考虑","packages","single","defining","xmlns","value","定义","感器","differential","俱备","{","z","com","关闭","速度","name","一样","复杂","you","fixed","this","主要","周边环境","val","语言","xml","return","再用","甚至","parent","配置","source","一定","neighborhood","浮点","常量","加法","1.0","类似","humble","http","一下","包","directory","ixx","模型","~","generate",")","图形","第四步","have","length","机器","物理","第三","org","理解","get","cylinder","不妨","一个","all","mechanicalreduction","关系","property","传递数据","第二步","3","simpletransmission","by","them","os","这里","环境","进行","index","front","方式","实现","continuous","冗余","collision","必备","函数","小车","传感器","#","0.001","vel","续航","也","等","executable","important","建模","screen","主角","想不起","：","系统","如何","是","xyz","joint","svga","第一","去","常用","echo","models","entity","camera","使用","不过","附录","仿真器","得","spawner","pose","呢","更","link","可能","mass","izz","运行","括号","变化","下载","迭代","很","cmd","参数设置","used","时刻","一些","起来","基本","代码","未来","from","万事俱备"," ","放置","https","3.14159","两句","认识","两个","都","文件格式","0.0","摄像","请","总体","换成","第二","ament","见证","第一步","tf","“","reflect","帮助","spawn","and","change","当然","移动","includelaunchdescription","频繁","4","file","matrix","之前","数据","provided","周边","无人","不","和","表面","导致","material","frame","场景","运动","出现","rpy","轮子","离线","支持","!","包含","这些","acceleration","radius","转换","不是","新一代","30","一起","网站","方法","axis","构建","、","嵌套","gray","注意","将","模拟","弹性","尝试","啦","/","bridge","是不是","数学计算","接口","only","torque","export","怎么","记得","装置","hardware","三步","此时","wiki","github","load","下一代","sources","浮点数","we","引擎","摄像头","控制器","参数","py","=","[","效果","因为","中","ign","机器人","为了","time","find","已经","输入","urdf","加速","跑","x","为止","size","部署","友好","添加","从","'","编程","to","arguments","弹性系数","数值","不会","libgazebo","传动","?","技术","试试","own","火星","不能","teleop","当","bashrc","y","名为","公式","wheel","is","可编程","1","就是","yellow","items","虚拟机","角度","质量","”","diff","用到","几个","尺寸","yaw","apt","把","origin","false","matter","介绍","geometry","第二句","def","渲染","动机","---","你","镜像","火星车","相识","separation","一代","actions","\"","力学","每个","并","0.06","安装","好","import","电机","filename","了","直接","课程","较大","顺利","publisher","数学","]","整个","join","black","结束","macro","osrf","box","ixz","python"],"title":"**Gazebo：三维物理仿真平台**","title_tokens":["物理","三维","gazebo","*","仿真","：","平台"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo","text":"ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台Gazebo，了解一下。","text_tokens":["，","呢","问题","ros","当然","我们","一下","手边","了解","没有","怎么","机器","物理","三维","gazebo","主角","开发","。","是","机器人","没","怎么办","仿真","？","平台","如果","实物"],"title":"Gazebo：三维物理仿真平台","title_tokens":["物理","三维","gazebo","仿真","：","平台"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_1","text":"","text_tokens":[],"title":"Gazebo仿真平台","title_tokens":["仿真","gazebo","平台"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_1","text":"Gazebo是ROS系统中最为常用的三维物理仿真平台，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。","text_tokens":["，","ros","频繁","及","就","测试","人机","高质量","实验","周边","无人","和","算法","表面","动力","导致","场景","限飞","用","支持","最为","周边环境","比如","要","先","、","类似","应用","模拟","弹性","图形","动力学","做","到","机器","不多","此时","物理","优化","不仅","再","三维","引擎","。","不妨","中","一个","机器人","提供","差不多","上来","实物","环境","部署","多","弹性系数","实现","可以","设计","系数","加入","火星","验证","续航","等","系统","是","常用","摩擦","使用","平台","质量","的","更","可能","运行","还","摩擦力","为","我们","办法","这样","渲染","所以","火星车","没有","属性","力学","无人机","高质","了","gazebo"," ","开发","都","那","仿真","在","帮助"],"title":"介绍","title_tokens":["介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_2","text":"Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-*","text_tokens":["的","它","呢","，","确保","ros","完整","相关","apt","humble","把","我们","通过","一下","包","sudo","可以","install","这样","*","功能","互相","和","起来","大家","安装","给","了","直接","gazebo"," ","：","。","系统","如何","认识","不妨","都","$","命令","中","-","一个","为了","已经","装上","简单","认识一下","？","使用","先","跑"],"title":"安装","title_tokens":["安装"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_3","text":"通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py 注意：为保证模型顺利加载，请将离线模型文件库下载并放置到~/.gazebo/models路径下， https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。","text_tokens":["，","ros","移动","控制","就","之前","大家","launch","com","运动","该","离线","_","路径","不是","？","一起","移动机器人","接下来","注意","将","模型","尝试","啦","~","/","是不是","文件","到","机器","记得","github","下来","库","接下","。","py","中","机器人","加载","这句","环境","下","启动","通过","可以","设计","试试",":","么","放到","：",".","models","ros2","的","它","还","为","我们","把","下载","保证","动机","并","了","课程","gazebo"," ","顺利","放置","https","还要","认识","$","请","osrf","仿真","命令","在"],"title":"运行","title_tokens":["运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#xacro","text":"我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本——XACRO文件。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro","text_tokens":["格式","，","同样","调用","不同","ros","移动","就","4","像","之前","数据","功能","定义","感器","大家","变量","一样","复杂","轮子","会","包含","比如","没","要","再用","甚至","先","化","传递","描述","方法","移动机器人","、","接下来","常量","humble","一下","包","sudo","叫","install","模型","做","接口","文件","—","可","机器","宏","优化","此时","创建","有","下来","给","a","接下","摄像头","。","可编","很长","中","一个","机器人","为了","必要","传递数据","urdf","如果","升级","这里","需要","友好","时候","这句","编程","像头","多","个","实现","通过","可以","让","函数","设计","小车","重复使用","过程","传感器","不能","加入","放到","也","建模","版本","：","是","传感","底盘","可编程","使用","对","切分","更为","丰富","重复","的","更","link","可能","尺寸","还","apt","xacro","把","我们","介绍","动机","条件","语句","你","写","没有","一些","每个","代码","好","安装","了","直接","gazebo"," ","放置","模块","然后","都","文件格式","$","摄像","b","总体","-","计算","命令","在"],"title":"XACRO机器人模型优化","title_tokens":["模型","机器人","xacro","机器","优化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_4","text":"一些常用的XACRO文件语法，大家了解下。 标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。","text_tokens":["的","，","下","移动机器人","、","尺寸","调用","括号","移动","常量","变化","xacro","不会","把","值为","通过","我们","质量","很","一行","可以","就","针对","模型","语法","这样","动机","位置","数据","文件","定义","不","一些","机器","大家","m","好","安装","方便","未来","也","了"," ","3.14159","轮子","用来","。","名为","原本","_","找","修改","都","$","pi","底盘","中","常用","一个","机器人","这些","加大","比如","里边","在","urdf","“","时候","使用","了解","标签","”","需要"],"title":"常量定义","title_tokens":["常量","定义"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_5","text":"如果需要做数学计算，同样是在$加大括号中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 注意：所有数学运算都会转换成浮点数进行，以保证运算精度","text_tokens":["某","，","同样","移动","就","数据","和","会","想不起来","比如","转换","结果","移动机器人","浮点","常量","加法","注意","模型","得到","运算","做","数学计算","点数","怎么","机器","尽量","有","浮点数","。","根本","中","一个","机器人","关系","所有","如果","时候","需要","进行","数值","通过","可以","位置","相对","加入","来","想不起","这","：","公式","是","改成","加大","的","精度","可能","括号","我们","保证","以","动机","写","转换成","这个","起来","未来","了","直接"," ","数学","两个","都","$","修改","换成","除法","计算","在","很多"],"title":"数学计算","title_tokens":["数学","计算","数学计算"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_6","text":"机器人的轮子我们也做成宏定义，定义方式是通过这个 标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。","text_tokens":["的","，","用到","、","几个","link","调用","还","名称","方式","把","我们","通过","可以","函数","就","模型","区分","做成","这样","位置","像","参数设置","这个","镜像","当","定义","一些","和","机器","记得","宏","好","设置","也","了","来","一样","a"," ","需要","同时","关节","轮子","出现","c","。","参数","这","两句","会","是","两个","名字","joint","中","b","-","1","一个","包含","机器人","关系","比如","里边","输入","要","使用","刚好","在","标签","时候","这里","描述"],"title":"宏定义","title_tokens":["宏","定义"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_7","text":"宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。","text_tokens":["的","，","嵌套","接下来","调用","include","还","于是","把","我们","这种","很","得","可以","函数","必备","模型","做成","像","是不是","加入","似曾","做","相识","文件","没有","到","定义","一些","和","机器","宏","优化","也","下来","再","了","接下"," ","c语言","模块","似曾相识","。","参数","然后","流程","是","某些","底盘","中","去","一个","包含","机器人","结束","里边","另外","语言","仿真","不是","使用","为止","对","这里"],"title":"文件包含","title_tokens":["文件","包含"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_8","text":"","text_tokens":[],"title":"机器人仿真模型配置","title_tokens":["模型","机器人","仿真","机器","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_9","text":"第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。","text_tokens":["一定","的","，","link","确保","惯性","碰撞","属性","和","有","物理","gazebo","。","参数","是","都","因为","一步","每","第一","一个","第一步","必要","仿真","平台","需要"],"title":"完善物理参数","title_tokens":["物理","参数","完善"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_2","text":"第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。","text_tokens":["添加","的","，","link","颜色","不同","为","冗余","可以","这样","渲染","所以","做","和","二步","gazebo","。","系统","是","因为","一步","每","中","第二","主要","一个","为了","urdf","第二步","在","标签","配置","得"],"title":"添加Gazebo标签","title_tokens":["添加","标签","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_10","text":"第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。","text_tokens":["的","，","为","传动","可以","装置","传动装置","三步","第三","电机","给","了","运动","理解","。","是","joint","一个","要","仿真","第三步","配置"],"title":"配置传动装置","title_tokens":["装置","传动装置","配置","传动"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_11","text":"第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。","text_tokens":["添加","的","，","下","不同","控制","可以","就","小车","四步","第四","这样","第四步","差速","完成","电机","了","来","gazebo","插件","速度","控制器","。","交给","是","两个","一个","那","角度","要","分配","在"],"title":"添加控制器插件","title_tokens":["控制","添加","插件","控制器"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_12","text":"接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ])","text_tokens":["spawn","，","change","ros","includelaunchdescription","correctly","就","file","single","考虑","packages","功能","provided","set","sim","if","launch","{","z","node","pythonlaunchdescriptionsource","name","you","learning","_","!","world","val","return","make","enabled","where",",","接下来","want","neighborhood","节点","use","force","t","directory","模型","generate","/",")","only","have","到","下来","load","share","description","sources","接下","we","really","a","get","。","}","py","=","[","run","mbot","中","一个","topic","all","提供","state","time","urdf","by","x","them","os","加载","需要","'","index","be","to","arguments","own","the",":","#","true","launchdescription","<","package","y","robot","doesn","me","executable","(","screen","sure","如何",".","output","entity","items","into","spawner","用到","的","pose","worlds","include","yaw","把","pkg","matter","def","---","spwan","actions","import","from","了","gazebo"," ","publisher","]","join","0.0","-","ament","our","path","python"],"title":"构建仿真环境","title_tokens":["仿真","构建","环境"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_13","text":"万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard 注意：虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。","text_tokens":["，","keyboard",">","控制","硬件","有点像","和","俱备","launch","二句","关闭","复杂","一句","虚拟","learning","奇迹","_","硬件加速","键盘","0","接下来","节点","注意","有点","~","/","export","机器","此时","下来","load","接下","小海","。","py","流程","=","run","中","机器人","加速","已经","urdf","需要","环境","启动","第一句","过程","teleop","twist","bashrc","比","海龟","：","时","svga","第一","就是",".","echo","虚拟机","ros2","以上","不过","into","的","运行","我们","vgpu10","第二句","时刻","\"","基本","了","gazebo","万事俱备"," ","万事","两句","整个","$","第二","见证","小海龟","仿真","命令","很多"],"title":"机器人运动仿真","title_tokens":["仿真","运动","机器","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#ignitiongazebo","text":"随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为Ignition，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/","text_tokens":["从","的","，","www","度","更","多","官方","ros","上","变化","apt","ignitionrobotics","humble","为","我们","迭代","一下","sudo","技术","可以","不断","install",":","渲染","/","bridge","随着","一代","和","大家","launch","有","也","官方网站","来","gazebo","较大","参考"," ","org","版本","试一下","进步","。","py","ignition","不妨","_","效果","流畅","都","$","-","ign","信息",".","官方网","demos","命名","真器","camera","新","仿真","ros2","新一代","平台","在","rgbd","仿真器","网站"],"title":"Ignition：下一代Gazebo","title_tokens":["下一代","gazebo","：","一代","ignition"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_14","text":"learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["and","ros","iyz","colors","0.4",">","command","matrix","*","defining","xmlns","version","prefix","hardwareinterface","left","value","differential","type","{","z","material","frame","name","12","rpy","sphere","learning","_","0.19","child","fixed","this","!","acceleration","so","xml","radius","+","30","parent","0","source","axis","www","0.05","actuator","footprint","velocityjointinterface","gray","1.0","http","5","0.2","0.18","0.025","ixx","/",")","inertial","plugin","torque","length","caster","color","hardware","wiki","org","inertia","0.75","cylinder","}","=","mbot","drive","0.015","odom","topic","mechanicalreduction","property","find","urdf","r","3","simpletransmission","x","rgba","size","turngravityoff","transmission","publish","to","max","front","blue","continuous","libgazebo","20","joints","?","collision","the",":","0.001","vel","0.16","true","<","m","y","interface","robot","(","important","wheel","xyz","joint","is","1",".","yellow","update","trans","diameter","controller","diff","h","link","visual","mass","izz","include","odometry","motor","xacro","0.95","--","origin","false","reference","cmd","ixy","geometry","list","0.20","used","separation","0.06","\"","filename","in","right","gazebo"," ","for","black","iyy","2","$","params","pi","-","macro","box","base","rate","tf","3.1415926","ixz","reflect","back"],"title":"附录：机器人完整模型","title_tokens":["模型","机器人","完整","：","附录","机器"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/","text":"Rviz：三维可视化显示平台 大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾——Rviz，一款三维可视化显示的神器。 Rviz三维可视化平台 机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。 Rviz介绍 一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。 运行方法 $ ros2 run rviz2 rviz2 彩色相机仿真与可视化 摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。 仿真插件配置 关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 主要配置项如下： 标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 标签：加载摄像头仿真插件 运行仿真环境 模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py 图像数据可视化 $ ros2 run rviz2 rviz2 三维相机仿真与可视化 二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。 仿真插件配置 运行仿真环境 $ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py 点云数据可视化 $ ros2 run rviz2 rviz2 激光雷达仿真与可视化 除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。 仿真插件配置 运行仿真环境 $ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py 点云数据可视化 $ ros2 run rviz2 rviz2 Rviz vs Gazebo 好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下，Gazebo是仿真平台，核心功能是创造数据，我们没有机器人或者传感器，它可以帮我们做一个虚拟的，Rviz是可视化平台，核心功能是显示数据，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。 参考链接 https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":["，","内部","vs","ros","这种","就","开放式","大家","launch","强调","方便","一句","虚拟","learning","最为","比如","？","坐标系","描述","www","qt","快速","坐标","大大","做","—","到","不少","有","给","类型","三维","什么","。","点云","run","拭目","intel","雷达","非常","啥","加载","了解","时候","启动","像头","问题","满意","看","创造","价格","可以","设计","位置","可贵","只有","么","案例","说明","分钱","神器","这","世界","新","真实","难为","常备","into","这幅","的","能够","我们","涉及","肯定","过","所以","这个","开放","没有","眼中","获取","gazebo","什么样","插件","用来","一目了然","与","会用","各样","计算","仿真","在","可视","官方","功能","type","混淆","参考","docs","_","会","路径","某些","问","用","一款","噪音","so","0","移动机器人","颜色","分辨","分析","kinect","框架","但","大大提高","再","只要","巧妇难为无米之炊","流程","mbot","提供","如果","标签","需要","辨率","下","多","一种","上","自由","通过","过程","激光","拭目以待",":","255","导航","玩起","显示","消息","设置","来","才","链接","传感",".","激光雷达","ros2","平台","巧妇","对","上位","它","懵","想","层面","这样","外部","发布","一分钱","玩起来","realsense","开发","$","信息","命名","rgbd","很多","格式","项","众多","内容","机","机械","规划","希望","或者","感器","com","name","臂","相机","试一试","主要","价格比","配置","不想","类似","彩色","量级","模型","图形","装","样","嘉宾","软件","机器","看到","理解","外部环境","各种各样","叫做","一个","并且","不到","按照","这里","环境","成功","先来","能","岂","自主","stereolabs","传感器","包括","全都","的话","哪些","以待","驾驶","也","等","如下","：","图形化","如何","是","去","常用","手上","rviz2","各种","camera","使用","不过","一堆","可视化","呢","更","运行","帮","自己","拍摄","重量级","出来","具体","一些","起来","代码","编码"," ","https","两个","都","摄像","范畴","usb","laser","还有","知道","数字","畅想","当然","移动","一目","本","图像","话题","数据","相信","周边","不","和","一位","场景","运动","对应","了然","工具","这些","还是","不用","不是","方法","很难","自动","、","一分","核心","搞定","啦","/","是不是","等等","汽车","github","load","对照","摄像头","只是","参数","py","效果","体感","提高","中","基于","机器人","已经","添加","从","libgazebo","打造","试试","不能","效率","二维","重量","讲","分辨率","范围","就是","过瘾","长","一脸","几个","除了","把","介绍","rviz","渲染","动机","你","自带","话","出厂","好","了","熟悉","关于","人","想不到","有没有"],"title":"**Rviz：三维可视化显示平台**","title_tokens":["rviz","可视","*","三维","：","显示","平台","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz","text":"大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾——Rviz，一款三维可视化显示的神器。","text_tokens":["的","，","呢","问题","像头","可视","能够","畅想","ros","本","我们","量级","拍摄","涉及","介绍","就","过","重量级","图像","rviz","没有","显示","到","重量","嘉宾","讲","—","机器","大家","眼中","一位","了","三维","什么样"," ","看到","摄像头","什么","神器","这","。","如何","是","中","摄像","范畴","一个","一款","机器人","世界","？","有没有","可视化"],"title":"Rviz：三维可视化显示平台","title_tokens":["rviz","可视","三维","：","显示","平台","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_1","text":"机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。","text_tokens":["，","内部","众多","可视","内容","当然","移动","一目","机械","就","规划","图像","希望","数据","功能","周边","不","感器","和","场景","运动","了然","臂","路径","相机","问","一款","这些","比如","？","坐标系","0","描述","很难","移动机器人","、","颜色","分析","类似","搞定","模型","快速","坐标","但","大大","等等","做","样","到","大大提高","软件","机器","再","给","三维","看到","摄像头","理解","什么","只是","。","各种各样","效果","提高","中","机器人","雷达","啥","如果","这里","需要","环境","从","像头","看","岂","通过","可以","设计","过程","自主","位置","激光","传感器","255","导航","效率","全都","么","哪些","才","是","传感","去","就是","激光雷达","各种","一堆","可视化","长","这幅","的","一脸","懵","层面","把","我们","自己","肯定","出来","这样","渲染","动机","rviz","你","所以"," ","人","开发","用来","一目了然","都","各样","摄像","信息","还有","计算","知道","数字","在","很多"],"title":"Rviz三维可视化平台","title_tokens":["rviz","可视","三维","平台","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_2","text":"一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。","text_tokens":["添加","项","的","，","它","对","上位","可视","满意","更","多","qt","官方","ros","按照","机","想","我们","核心","自己","打造","可以","就","开放式","框架","话题","rviz","图形","数据","只有","功能","做","开放","自带","没有","话","说明","显示","不","出厂","或者","机器","发布","消息","有","方便","也","了","插件","对应","只要"," ","一句","看到","开发","。","图形化","是","效果","工具","某些","基于","中","一个","常用","机器人","想不到","不到","在","新","平台","如果","很多","可视化","这个"],"title":"Rviz介绍","title_tokens":["rviz","介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_1","text":"$ ros2 run rviz2 rviz2","text_tokens":["rviz2"," ","ros2","run","$"],"title":"运行方法","title_tokens":["运行","方法"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_2","text":"摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。","text_tokens":["的","，","像头","先来","一种","上","我们","肯定","传感器","装","感器","机器","了","给","摄像头","。","是","传感","摄像","最为","常用","机器人"],"title":"彩色相机仿真与可视化","title_tokens":["彩色","可视","与","仿真","相机","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_3","text":"关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 主要配置项如下： 标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 标签：加载摄像头仿真插件","text_tokens":["辨率","项","格式","的","，","像头","ros","分辨","自由","libgazebo","我们","介绍","模型","图像","传感器","这个","感器","分辨率","type","描述","代码","大家","编码","设置","等","给","类型","对照","gazebo","插件","对应","关于"," ","如下","摄像头","name","：","。","参数","_","范围","都","传感","叫做","摄像",".","主要","提供","命名","噪音","so","camera","仿真","使用","加载","标签","配置","需要","方法"],"title":"仿真插件配置","title_tokens":["仿真","插件","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_4","text":"模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py","text_tokens":["成功","，","像头","能","把","我们","模型","出来","啦","图像","rviz","拭目以待","into","不能","launch","好","以待","load","gazebo"," ","看到","摄像头","learning","。","py","_","拭目","$","mbot","中","摄像","信息",".","并且","已经","camera","仿真","ros2","在","配置"],"title":"运行仿真环境","title_tokens":["仿真","运行","环境"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_5","text":"$ ros2 run rviz2 rviz2","text_tokens":["rviz2"," ","ros2","run","$"],"title":"图像数据可视化","title_tokens":["可视","可视化","数据","图像"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_6","text":"二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。","text_tokens":["的","，","像头","不想","想","一分","我们","kinect","这种","通过","价格","可以","就","试试","可贵","传感器","数据","玩起","二维","或者","不","感器","外部","不少","起来","一分钱","分钱","也","玩起来","realsense","三维","获取","摄像头","外部环境","。","相机","点云","体感","传感","摄像","常用","intel","usb","价格比","比如","仿真","不用","不过","过瘾","环境"],"title":"三维相机仿真与可视化","title_tokens":["三维","可视","与","仿真","相机","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_7","text":"","text_tokens":[],"title":"仿真插件配置","title_tokens":["仿真","插件","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_8","text":"$ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py","text_tokens":[".","load","gazebo"," ","ros2","learning","py","_","into","rgbd","$","mbot","launch"],"title":"运行仿真环境","title_tokens":["仿真","运行","环境"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_9","text":"$ ros2 run rviz2 rviz2","text_tokens":["rviz2"," ","ros2","run","$"],"title":"点云数据可视化","title_tokens":["可视","点云","可视化","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_10","text":"除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。","text_tokens":["移动机器人","，","像头","的","自动","除了","移动","我们","激光","动机","传感器","包括","汽车","感器","和","机器","驾驶","也","三维","来","摄像头","。","是","相机","传感","摄像","试一试","激光雷达","机器人","雷达","常备","很多"],"title":"激光雷达仿真与可视化","title_tokens":["激光雷达","激光","可视","雷达","仿真","与","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_11","text":"","text_tokens":[],"title":"仿真插件配置","title_tokens":["仿真","插件","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_12","text":"$ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py","text_tokens":[".","load","laser","gazebo"," ","ros2","learning","py","_","into","$","mbot","launch"],"title":"运行仿真环境","title_tokens":["仿真","运行","环境"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_13","text":"$ ros2 run rviz2 rviz2","text_tokens":["rviz2"," ","ros2","run","$"],"title":"点云数据可视化","title_tokens":["可视","点云","可视化","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz-vs-gazebo","text":"好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下，Gazebo是仿真平台，核心功能是创造数据，我们没有机器人或者传感器，它可以帮我们做一个虚拟的，Rviz是可视化平台，核心功能是显示数据，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。","text_tokens":["，","可视","就","数据","功能","相信","或者","感器","和","大家","混淆","强调","虚拟","会","用","还是","不是","方法","核心","啦","是不是","做","到","软件","机器","有","再","巧妇难为无米之炊","。","流程","一个","机器人","非常","不到","已经","如果","了解","时候","这里","环境","下","启动","创造","通过","可以","传感器","案例","显示","的话","讲","也","来","这","是","传感","手上","常用","真实","使用","难为","平台","不过","巧妇","对","可视化","的","它","几个","帮","我们","自己","具体","rviz","所以","没有","一些","好","了","gazebo","熟悉"," ","两个","会用","信息","仿真","在","很多"],"title":"Rviz vs Gazebo","title_tokens":["rviz","gazebo","vs"," "]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_14","text":"https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":["com",".","github","www",":","stereolabs","rviz","/","rviz2"," ","https","ros2","docs"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/","text":"RQT：模块化可视化工具 ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具——rqt。 rqt介绍 正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，接下来，大家就可以跟随我的思路，我们一起来试一试。 日志显示 图像显示 接口控制 数据曲线 数据包管理 节点可视化 参考资料 https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":["，","可视","ros","控制","就","觉得","图像","数据","功能","难免","和","大家","场景","一","麻烦","一样","参考","一句","docs","会","数据包","工具","试一试","有些","比如","跟随","接下来","qt","节点","humble","有点","类似","sudo","install","/","强大","小","接口","—","界面","en","曲线","此时","操作","下来","接下","org","只","摄像头","。","concepts","基于","中","一个","about","提供","已经","加载","需要","进行","下","启动","像头","tutorials","一种","实现","通过","可以",":","console","的话","显示","日志","也","来","参考资料","：","模块化","是",".","里边","不过","使用","rqt","难免会","可视化","前","的","用到","它","更","可能","apt","我们","很","介绍","具体","这样","rviz","这个","思路","一些","每个","起来","我","安装","资料","了","正如"," ","指令","https","模块","开发","然后","html","都","$","摄像","-","管理","命名","而","另外","using","简单","命令","在","很多"],"title":"**RQT：模块化可视化工具**","title_tokens":["可视","*","模块","：","模块化","rqt","工具","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt","text":"ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具——rqt。","text_tokens":["的","，","下","像头","用到","更","可视","可能","ros","一种","有点","我们","很","就","觉得","图像","rviz","强大","功能","难免","的话","显示","—","一些","此时","操作","了","场景","麻烦"," ","只","模块","摄像头","模块化","。","会","工具","中","摄像","一个","有些","提供","比如","另外","已经","简单","不过","使用","rqt","难免会","可视化","需要"],"title":"RQT：模块化可视化工具","title_tokens":["可视","模块","：","模块化","rqt","工具","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt_1","text":"正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，接下来，大家就可以跟随我的思路，我们一起来试一试。","text_tokens":["的","，","它","启动","接下来","可视","跟随","qt","ros","apt","实现","humble","类似","我们","通过","sudo","可以","就","install","具体","这样","rviz","小","功能","这个","界面","思路","和","每个","起来","我","大家","安装","也","下来","了","来","一","一样","正如","指令","一句"," ","模块","接下","开发","。","然后","是","都","工具","$","基于","-","试一试","一个","命名","而","里边","加载","使用","命令","在","rqt","很多","可视化","前","需要","进行"],"title":"rqt介绍","title_tokens":["介绍","rqt"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_1","text":"","text_tokens":[],"title":"日志显示","title_tokens":["显示","日志"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_2","text":"","text_tokens":[],"title":"图像显示","title_tokens":["显示","图像"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_3","text":"","text_tokens":[],"title":"接口控制","title_tokens":["接口","控制"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_4","text":"","text_tokens":[],"title":"数据曲线","title_tokens":["曲线","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_5","text":"","text_tokens":[],"title":"数据包管理","title_tokens":["管理","数据包","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_6","text":"","text_tokens":[],"title":"节点可视化","title_tokens":["可视","节点","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_7","text":"https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":["-","about",".",":","tutorials","/"," ","ros","https","org","docs","rqt","console","using","humble","html","concepts","en"],"title":"参考资料","title_tokens":["参考资料","参考","资料"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/","text":"资源汇总 常用框架 自主导航 比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/ 自动驾驶 自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/ 路径规划 此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/ 机器人学 ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。 视频课程 斯坦福大学公开课 —— 机器人学 台大机器人学之运动学 Self-Driving Cars with ROS2 & Autoware 古月学院 常用链接 ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":["除此之外","，","autowarefoundation","ros","内容","移动","导论","之外","控制","情况","机械","就","autoware","规划","热门","选择","documentation","技能","检测","功能","碰撞检测","不","和","算法","大家","感兴","com","大学","运动","参考","对应","driving","基本功能","docs","臂","会","路径","工具","学习","最为","社区","包含","这些","比如","结合","要","仔细阅读","每一","即便","当今","学院","经典","人手","机器人学","移动机器人","自动","www","人学","、","任何","理论","完整","经典著作","http","应用","humble","一本","cars","框架","快速","/","碰撞","公开课","视频","—","资源","机器","工程师","汇总","en","有","著名","wiki","斯坦福大学","居","github","称为","台大","org","ubuntu","。","自身","&","斯坦福","中","auto","gitlab","一个","理论知识","机器人","提供","非常","》","基本功","如果","被","仔细","进行","运动学","index","cn","多","内功","书籍","相关","上","一种","实现","工程","《","分拣","兴趣","可以","行业","重在","实操","必备","robots","自主",":","guyuehome","导航","视觉","classic","roscon","商业","感知","之","驾驶","也","等","古月","版本","：","这","系统","具备","是","链接","阅读","开课","navigation","常用",".","推荐","公开","gazebosim","典型","各种","ros2","知识","至于","使用","对","丰富","得","的","几个","更","我们","自己","中文","找到","此外","商业化","autowareauto","福大","这套","之一","动机","这个","著作","基本","代码","好","了","感兴趣","课程","gazebo"," ","with","https","模块","开发","moveit","修炼","self","本书","都","2","html","-","还有","除此","io","在","很多","导航系统"],"title":"**资源汇总**","title_tokens":["资源","*","汇总"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_1","text":"","text_tokens":[],"title":"资源汇总","title_tokens":["资源","汇总"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_2","text":"","text_tokens":[],"title":"常用框架","title_tokens":["常用","框架"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_3","text":"比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/","text_tokens":["移动机器人","的","，","任何","ros","完整","相关","移动","上","内容","实现","应用","我们","自己","可以","进行","框架","自主","这套","快速","动机",":","/","导航","功能","这个","不","和","基本","机器","算法","代码","好","大家","也","了","参考"," ","org","https","基本功能","开发","。","：","系统","具备","会","都","链接","navigation","中",".","机器人","提供","比如","各种","要","ros2","基本功","即便","使用","如果","在","导航系统"],"title":"自主导航","title_tokens":["自主","导航"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_4","text":"自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/","text_tokens":["自动","的","，","对","、","几个","www","autowarefoundation","ros","一种","实现","应用","控制","兴趣","行业","可以","商业化","autoware","框架","热门","规划","之一",":","/","autowareauto","功能","这个","—","和","机器","感知","商业","大家","有","著名","感兴","驾驶","也","等","了","很多","感兴趣","参考"," ","org","https","模块","这","。","：","系统","是","链接","中","最为","gitlab","社区","一个","包含","机器人",".","auto","典型","非常","如果","io","在","当今","丰富"],"title":"自动驾驶","title_tokens":["驾驶","自动"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_5","text":"此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/","text_tokens":["的","，","、","更","多","ros","内容","相关","分拣","找到","机械","可以","此外","规划","框架",":","碰撞","/","检测","功能","这个","碰撞检测","视觉","大家","也","等","运动"," ","org","https","这","moveit","臂","。","是","都","链接","中",".","非常","还有","使用","在","经典"],"title":"路径规划","title_tokens":["路径","规划"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_6","text":"ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。","text_tokens":["机器人学","的","，","人学","除此之外","内功","书籍","ros","理论","相关","导论","之外","经典著作","工程","中文","《","一本","情况","实操","重在","就","必备","可以","选择","技能","经典","著作","工程师","机器","大家","有","称为","对应"," ","版本","开发","。","修炼","自身","是","阅读","学习","工具","都","本书","理论知识","机器人","推荐","这些","比如","》","结合","仔细阅读","知识","至于","除此","每一","被","得","仔细","人手"],"title":"机器人学","title_tokens":["机器","人学","机器人","机器人学"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_7","text":"斯坦福大学公开课 —— 机器人学 台大机器人学之运动学 Self-Driving Cars with ROS2 & Autoware 古月学院","text_tokens":["机器人学","人学","运动学","cars","autoware","福大","公开课","—","机器","之","古月","斯坦福大学","大学","运动","driving","台大"," ","with","&","self","开课","斯坦福","-","机器人","公开","ros2","学院"],"title":"视频课程","title_tokens":["视频","课程"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_8","text":"ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":["www","index","cn","ros","http","humble","robots",":","documentation","/","guyuehome","classic","roscon","en","wiki","com","古月","居","github","gazebo"," ","org","https","ubuntu","docs","：","html","2",".","gazebosim","ros2"],"title":"常用链接","title_tokens":["常用","链接"]}]}