{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"引言 机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的 电气时代 。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的 数字时代 ，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发， 智能机器人时代 正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。 教程链接汇总 课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/90 博客泡圈： https://www.guyuehome.com/","text_tokens":["横跨","。","服务","劳动","bubble","也","帮助","七八","关注","七八十年","按照","高","思考","，","电气","局部","智能","控制","没有","最为","之后","agv","主角","热点","robot","伺服",".","层面","多","重要","于","家庭","设备","传感器","等","—","年","生产","驾驶","完全","只能","狗","90","成为","system","时期","七八十","丰富","链接","经历","随着","/","此时","工业","汇总","驱动","gitee","和","大","com","教程","机器人","ros2","控制器","工业生产"," ","有限","感器","拉开","www","三个","由示","驱动器","检测","感知","最佳","智能化","俗称","依然","软件","呈","逐渐","动力","快速","ai","出现","id","开发","计算","视觉","视频","应用","不断","八十","命令","时代","伺服电机","序幕","电机","计算机","工厂","_","circledetail","类型",":","图文","环境","的","井喷","要求","汽车","泡圈","operating","缺少","：","tutorials","太","十年","系统","操作系统","主要","状","载体","过程","减速","之一","提出","更加","21","减速机","执行","技术","仿生","人工智能","博客","这","送餐","正式","拉开序幕","而言","劳动力","自主","我们","对","四足","引言","释放","、","课程","发展","自动","更","人工","book","传感","动作","算机","人类","教器","是","数字","就是","问答","八十年","操作","了","2000","必将","这是","爆发","年前","机器","不过","不断丰富","后","并","class","操控","但是","github","前夜","https","guyuehome","源码","业生","2015"],"title":"引言","title_tokens":["引言"]},{"location":"#_1","text":"机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的 电气时代 。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的 数字时代 ，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发， 智能机器人时代 正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。","text_tokens":["横跨","。","服务","劳动","也","帮助","七八","关注","七八十年","按照","高","思考","，","电气","局部","智能","控制","没有","最为","之后","agv","主角","热点","robot","伺服","层面","多","重要","于","家庭","设备","传感器","等","—","年","生产","驾驶","完全","只能","狗","成为","system","时期","七八十","丰富","经历","随着","此时","工业","驱动","和","大","机器人","控制器","工业生产"," ","有限","感器","拉开","三个","由示","驱动器","检测","感知","最佳","智能化","俗称","依然","软件","呈","逐渐","动力","快速","ai","出现","开发","计算","视觉","应用","不断","八十","命令","时代","伺服电机","序幕","电机","计算机","工厂","类型","环境","的","井喷","要求","汽车","operating","缺少","太","十年","系统","操作系统","主要","状","载体","过程","减速","之一","提出","更加","减速机","执行","技术","仿生","人工智能","这","送餐","正式","拉开序幕","而言","劳动力","自主","我们","对","四足","释放","、","课程","发展","自动","更","人工","传感","动作","算机","人类","教器","是","数字","就是","八十年","操作","了","2000","必将","这是","爆发","年前","机器","不过","不断丰富","后","并","操控","但是","前夜","业生","2015"],"title":"引言","title_tokens":["引言"]},{"location":"#_2","text":"课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/90 博客泡圈： https://www.guyuehome.com/","text_tokens":["课程","泡圈","bubble","book","/","：","gitee","tutorials","com","教程","ros2"," ","问答","www","21","id","博客",".","class","视频","github","https","guyuehome","_","circledetail","源码","90",":","图文"],"title":"教程链接汇总","title_tokens":["教程","汇总","链接"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["。","本","小时","努力","超过","上","产品","包括","有权","，","人才","质量","创新","传播","法律责任","内容","华语","声明","精锋","培养","单位","微控","不得","与","公司","请",".","居","通过","等","年","合法","依法","追究","建立","将","图书","地区","为","《","提供","武汉","使用","声明者","一体","但","com","和","销售","法律","有限公司","机器人","120","2011","修改","课件","学习","被"," ","有限","www","版权","企业","责任","拥有","复制","抄录","ai","模式","集","科技","许可","用户","开发","ros","视频","万字","+","镜像","所有","万人","1000","生态","众多","未来","的","学习者","其它","明者","赋能","致力","个人","授权","线上","优质","限于","书面","高校","》","不","构建","创建","面向","违反","作品","累积","合作","学","联系","追究其","实践","及","知名","出版","、","课程","仅限","究其","社区","交流学习","畅销","致力于","校企","捆绑","@","是","（","如需","）","上述","进行","机器","面向未来","均","平台","未经","高质量","对本","至今","或","人才培养","brand","网站","高质","guyuehome","交流","源码","任何","古月"],"title":"关于我们","title_tokens":["关于","我们"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["。","小时","努力","超过","，","人才","质量","创新","内容","华语","培养","与",".","居","通过","等","年","建立","图书","地区","为","《","提供","一体","com","机器人","120","2011","学习"," ","www","企业","ai","模式","集","用户","开发","ros","视频","万字","+","万人","1000","生态","众多","未来","的","学习者","赋能","致力","线上","优质","高校","》","构建","创建","面向","累积","合作","实践","及","知名","出版","、","课程","社区","交流学习","畅销","致力于","校企","是","（","）","机器","面向未来","平台","高质量","至今","人才培养","高质","guyuehome","交流","古月"],"title":"学机器人，上古月居","title_tokens":["学","机器人","机器","，","居","古月","上"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["。","本","产品","包括","有权","，","传播","法律责任","声明","精锋","单位","微控","不得","与","公司","请",".","居","等","合法","依法","追究","将","为","武汉","使用","声明者","但","和","销售","com","法律","有限公司","修改","课件","学习","被"," ","有限","版权","责任","拥有","复制","抄录","科技","许可","用户","视频","镜像","所有","的","其它","明者","个人","授权","限于","书面","不","违反","作品","联系","追究其","仅限","、","课程","究其","捆绑","@","如需","上述","进行","均","未经","对本","或","brand","网站","guyuehome","源码","任何","古月"],"title":"版权声明","title_tokens":["版权","声明"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/","text":"ROS/ROS2是什么 智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。 ROS的诞生 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人—— PR2 ，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS的发展 ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称 ROSCon ，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。 ROS的特点 ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。 参考资料 关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["回答","服务","本","嵌入","上去","踏上","大部","packages","很多","近两年","广泛","高效","资源","同一","上","一款","全","产品","，","底盘","许可证","应用软件","来看","得到","当时","最为","有没有","就","已经","成果","公司","conference","居","风险","万左右","一起","这个","—","效果","自身","尝试","全球","成为","将","肯定","每","对于","2","一下","功能","提供","轰动","随着","利器","/","游戏","通信","方向","和","了解","xbox","教程","ros2","机制","被","当初","kinect","学习","每年","近几年","目标","基于","核心","活动","25","还有","日常","量级","陪","引擎","改为","逐渐","willow","第一","移动机器人","推荐","条","由","ros","版本","视频","集合","应用","衣服","一大步","官方","年轻","生态系统","原本","主阵地","把","一个","情况","专业","看到","不下","次数","汽车","柔性","新增","roscon","回到","方式","页面","garage","大部分","org","无疑","到","版","图","前","大会","资料","限于","起","万万","普及","却步","比如","掌握","原因","推出","着","部件","曲线","访问量","答案","几乎","想到","而言","下来","简单","历经","我们","手机","风险投资","受限于","等等","a","做","虽好","personal","一次","名称","好","社区","说明","一样","无聊","度","不乏","百万","早期","活跃","之旅","问答","标准","这里","沉淀","一段","讲解","处理","绝大部分","并","受限","pr2","尽量","成功","效率","多年","长远","源码","任何","直到","也","零","轮子","活跃度","图中","40","诞生","动机","会","增长速度","远","学术","光靠","体系","解决","两个","智能","真的","代","跟随","两年","四项","跑","研究","给出","几个","给","特点","完成","有","以叠","全人类",".","层面","甚至","多","重要","此","阵地","啦","2022","团队","方法","配合","等","来到","越来越","ros1","款","这位","开源","统统","一步","正如","世界","所以","这样","此时","全新","上边","大量","百科全书","充足","大","重量","想法","所有人","成熟","做法","进入","120","大学","时间","单独","复合","来","浏览量","联合","系列","最后","不仅","特性","加","最佳","代码","“","今日","张图","整理","确定","相关","用户","便宜","聊天","b","国家","资金","时代","革命","暴露","c","可以","各种各样","机械","类似","本身","四大","电路","迭代","笔记本电脑","为例","总而言之","选择","只想","维基","离不开","根据","围绕","数据库","不想","青年","操作系统","线上","精致","以上","主要","为什么","助推","？","不是","长期","认识","一系列","同样","低","总体","同年","率","人","生态系","不到","其实","直接","250","时间轴","第一次","自己","humble","正式","泡泡","能够","基本","部分","全人","剪头发","对","world","怀揣","月底","所学","新鲜","你","发展","收拾","电脑","传感","普遍","因为","来讲","具备","局限性","工具","人类","全书","步伐","注意","制造","2007","简称","月","稳定","windows","身影","采用","涉及","进行","年底","托管","容易","一家","案例","平台","起点","肩负","不多","又","网站","一大笔钱","几百","居高不下","原型","整合","存储","同时","头发","资本","据库","而生","绝大","古月","而且","支持","。","深知","第一个","繁荣","工程","帮助","很","虽然","叠","程度","希望","关键","适用","提高","还","一定","神秘","物体","可能","扫地","模块","清晰","多媒体系统","内容","分享","论坛","软件系统","频繁","新","robot","2010","神兵","说干就干","传感器","通过","接下","同学","年","针对","创始","入门","同理","百科","实验","该","设计","如何","叫做","turtlebot","成本","移动","代表","之上","索引","元素","作为","苹果","2011","速度","这款"," ","齐聚一堂","掀起","领域","爆款","趋势","现在","真正","面纱","强悍","智能化","越来","软件","许可","数据","肩负着","美妙","迎来","不断","价格便宜","”","做到","不断更新","intel","挑战","或者","实现","的","这些","笔记本","实验室","总称","operating","下载","然后","向前走","重新","友好","家","系统","各项","因","分钟","过程","100","明智","如果","得以","项目","不","大家","变为","技术","其他","详细","在","大大","找到","记录","组成","此后","这","中","linux","木头","后续","野蛮","商业","、","浏览","下","更","投资","介于","宽松","2017","框架","斯坦福","干","性能","一堂","大笔","几年","一些","微软","个","很快","了","他们","讨论","这是","一系","向","新鲜事","复杂","发表","这一波","20","重量级","至今","google","玩耍","增长","没想","时至今日","正式版","index","最高","知识","创意","举办","2012","都","只要","2015","更好","福大","横跨","结晶","推动","维基百科","提问","无论","努力","不开","以","绝对","亚马逊","做成","快","2014","开发工具","15","巨大","多媒体","人才","多项","更新","控制","出来","什么","没有","别人","各样","模块化","跨平台","接下来","时候","一群","巨人","外观","而","于","望而却步","圈","还是","洗衣","排名","浪潮","局限","终于","多万","无论是","认识一下","非常","欢迎","既然","水下","呢","为了","完全","更为","笔记","后期","工程师","system","为","搜索","差不多","使用","经历","独立","discourse","工业","游戏机","熨烫","一届","一大","做出","让","地域","臂","机器人","疫情","场景","进化","有志","一套","商业化","研发","零部件","人形","推进","感器","首先","肩膀","上图","体感","有人","向前","快速","动力","开发","要","进步","不要","才","万","所有","左右","之","万人","打","生态","可为","熟悉","；","乐意","大有可为","标志","开始","限性","已有","用","初期","ubuntu","那","：","wiki","站","斯坦福大学","棒","年轻人","促使","个人","加上","一切","开发者","其次","只","维基百","提出","发布","入门教程","参考","复用","参考资料","迅猛","台球","其中","不同","人数","各种","大步","智慧","高度","从","来自","课程","150","之内","查看","用于","造","五年","嵌入式","带领","板块","这群","提取","answers","上市","访问","全球化","亚马","媒体","每个","采购","关于","是","就是","事情","没想到","统计","扩展","从中","操作","通常","一大笔","5","却","缩短","机器","之王","看中","几百万","做饭","嘉宾","起来","问题","算是","使命","但是","基本上","包","github","正在","投了","毛巾","价格","加快","80"],"title":"ROS和ROS2是什么","title_tokens":["ros2","是","和","ros","什么"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#rosros2","text":"智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。","text_tokens":["。","一下","那","带领","方向","重量","系统","操作系统","机器人","全","ros2","场景","进化","神秘","巨大","？"," ","是","，","掀起","提出","操作","认识","智能","了","什么","面纱","这位","量级","智能化","大家","向","接下来","就","机器","开发","嘉宾","ros","重量级","这","应用","接下","一起","又","中","时代","下来","正在","认识一下","我们","高度","对","呢","而生","挑战","的"],"title":"ROS/ROS2是什么","title_tokens":["ros2","是","/","ros","什么"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人—— PR2 ，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。","text_tokens":["福大","。","服务","深知","横跨","推动","也","帮助","很","虽然","很多","叠","高效","图中","同一","诞生","上","一款","还","物体","可能","光靠","学术","，","智能","真的","出来","什么","应用软件","分享","代","没有","软件系统","别人","研究","给出","当时","时候","有没有","就","一群","已经","完成","有","外观","说干就干","robot","层面","甚至","以叠","重要","多","圈","洗衣","团队","一起","这个","等","—","年","针对","非常","越来越","款","尝试","既然","呢","实验","设计","成为","肯定","后期","如何","对于","2","功能","轰动","所以","独立","这样","此时","充足","和","熨烫","所有人","想法","做出","一大","机器人","苹果","大学","有志","一套","这款","零部件"," ","联合","系列","基于","最后","强悍","越来","有人","向前","软件","陪","整理","第一","开发","要","条","ros","聊天","才","应用","衣服","资金","一大步","所有","可以","打","机械","类似","一个","电路","专业","看到","实现","或者","的","实验室","为例","用","初期","柔性","那","：","向前走","斯坦福大学","家","系统","不想","青年","个人","操作系统","因","精致","分钟","图","一切","为什么","？","不是","100","只","如果","得以","一系列","同样","低","不","大家","技术","人","台球","在","不到","其中","部件","答案","找到","第一次","组成","自己","这","中","大步","木头","我们","手机","剪头发","做","、","personal","你","一次","更","收拾","之内","用于","无聊","因为","框架","斯坦福","干","性能","2007","是","就是","事情","一些","个","很快","从中","操作","标准","了","5","他们","却","涉及","一系","机器","复杂","容易","处理","做饭","平台","并","问题","玩耍","但是","pr2","原型","效率","毛巾","都","头发","只要","而生","而且"],"title":"ROS的诞生","title_tokens":["的","诞生","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_1","text":"ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称 ROSCon ，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。","text_tokens":["福大","。","支持","服务","推动","第一个","直到","也","大部","本","近两年","关键","亚马逊","适用","诞生","2014","一款","会","扫地","，","底盘","控制","跟随","出来","分享","两年","各样","给","就","已经","2010","robot","公司","而","conference","多","于","望而却步","圈","重要","风险","2022","团队","传感器","这个","等","—","年","局限","终于","创始","越来越","款","全球","为了","该","成为","笔记","后期","开源","设计","system","每","叫做","为","turtlebot","使用","成本","随着","功能","所以","游戏","经历","全新","游戏机","之上","一届","大","和","一大","成熟","让","了解","xbox","教程","机器人","2011","疫情","大学","时间","ros2","进入","单独","被","当初","kinect"," ","每年","齐聚一堂","感器","爆款","现在","不仅","真正","体感","越来","软件","改为","确定","willow","快速","逐渐","第一","开发","肩负着","ros","版本","便宜","迎来","应用","官方","价格便宜","所有","年轻","暴露","原本","时代","可以","各种各样","intel","类似","把","一个","迭代","不下","熟悉","标志","开始","的","笔记本","限性","笔记本电脑","operating","ubuntu","roscon","只想","回到","斯坦福大学","garage","年轻人","系统","大部分","个人","操作系统","加上","线上","到","版","前","大会","助推","开发者","限于","过程","起","万万","长期","项目","提出","普及","却步","发布","原因","变为","同年","人","推出","着","在","其中","大大","直接","时间轴","此后","这","自己","想到","中","正式","humble","各种","能够","历经","我们","受限于","风险投资","部分","world","月底","从","来自","野蛮","做","商业","虽好","、","下","发展","投资","名称","更","介于","电脑","传感","一样","五年","因为","这群","提取","2017","局限性","斯坦福","一堂","步伐","注意","大笔","亚马","2007","百万","早期","简称","不乏","几年","是","每个","没想到","微软","很快","操作","稳定","一大笔","了","身影","采用","5","他们","这里","这是","进行","年底","机器","一家","看中","讲解","几百万","绝大部分","问题","起点","使命","但是","增长","没想","肩负","受限","正式版","pr2","一大笔钱","几百","居高不下","原型","成功","投了","多年","价格","举办","2012","加快","资本","绝大","2015"],"title":"ROS的发展","title_tokens":["的","发展","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_2","text":"ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["支持","繁荣","。","结晶","上去","嵌入","也","零","无论","轮子","很多","广泛","以","做成","提高","上","开发工具","还","动机","会","产品","多媒体","远","体系","模块","，","多媒体系统","人才","多项","智能","许可证","分享","跑","别人","模块化","各样","跨平台","给","就","新","巨人","已经","成果","有","公司","特点","全人类","多","还是","此","一起","这个","自身","无论是","非常","越来越","ros1","同理","水下","完全","全球","成为","将","设计","开源","统统","一步","正如","功能","使用","这样","工业","移动","代表","通信","和","做法","臂","机器人","ros2","时间","机制","复合","来","商业化"," ","人形","推进","被","目标","核心","领域","最后","肩膀","特性","智能化","越来","向前","“","今日","软件","引擎","快速","移动机器人","许可","开发","由","进步","ros","不要","b","集合","应用","”","c","之","做到","生态系统","可以","生态","机械","各种各样","把","一个","四大","本身","看到","；","实现","这些","的","汽车","已有","总称","新增","那","：","重新","站","向前走","友好","家","围绕","促使","系统","到","不是","明智","比如","复用","大家","技术","率","着","在","生态系","直接","组成","自己","这","中","各种","智慧","简单","下来","linux","我们","部分","全人","对","怀揣","a","从","做","商业","、","发展","更","社区","宽松","用于","造","普遍","嵌入式","来讲","具备","上市","工具","全球化","人类","制造","媒体","采购","是","就是","通常","windows","标准","身影","了","他们","这里","沉淀","缩短","机器","一家","案例","平台","并","至今","时至今日","尽量","整合","创意","长远","都","同时"],"title":"ROS的特点","title_tokens":["的","特点","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_3","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。","text_tokens":["回答","。","本","维基百科","也","很","大部","packages","活跃度","很多","程度","希望","绝对","资源","快","40","上","15","会","增长速度","清晰","，","两个","什么","来看","得到","四项","论坛","最为","频繁","几个","给","新","就","已经","神兵","有",".","多","重要","浪潮","排名","万左右","通过","等","多万","非常","越来越","百科","呢","全球","更为","成为","每","功能","使用","差不多","利器","上边","discourse","代表","索引","和","大","元素","作为","地域","教程","机器人","速度","研发","学习","浏览量"," ","近几年","核心","活动","25","趋势","现在","上图","加","日常","最佳","越来","张图","快速","动力","相关","开发","数据","用户","ros","国家","应用","万","革命","左右","万人","可以","可为","一个","情况","；","乐意","看到","这些","大有可为","的","次数","总而言之","选择","下载","：","wiki","方式","维基","根据","页面","数据库","棒","大部分","org","各项","无疑","到","以上","助推","？","开发者","维基百","如果","提出","发布","比如","不","参考","大家","总体","其他","迅猛","人","在","其中","曲线","其实","访问量","250","记录","不同","这","人数","中","各种","而言","基本","我们","部分","等等","从","新鲜","、","浏览","150","发展","你","社区","说明","查看","answers","访问","度","活跃","关于","每个","几年","是","就是","问答","月","统计","了","据库","讨论","这里","这是","机器","新鲜事","发表","绝大部分","这一波","起来","算是","问题","20","增长","基本上","不多","包","index","网站","最高","正在","整合","存储","都","源码","任何","绝大","80"],"title":"ROS的社区","title_tokens":["社区","的","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#_1","text":"关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["工程","。","本","提问","也","大部","踏上","努力","不开","还","一定","会","，","解决","更新","内容","分享","最为","几个","有","啦","阵地","重要","居","方法","配合","一起","同学","这个","—","效果","来到","入门","欢迎","百科","成为","将","开源","工程师","搜索","提供","使用","世界","百科全书","大量","和","作为","教程","机器人","120","ros2","学习"," ","首先","还有","最后","代码","开发","推荐","要","ros","视频","美妙","不断","所有","万人","不断更新","可以","主阵地","一个","开始","的","然后","离不开","大部分","主要","资料","其次","项目","入门教程","掌握","参考","参考资料","大家","技术","详细","在","几乎","找到","这","中","泡泡","我们","部分","所学","后续","从","课程","你","好","社区","板块","工具","全书","关于","扩展","之旅","是","这里","之王","托管","机器","一段","绝大部分","问题","google","网站","github","知识","都","古月","绝大","更好"],"title":"参考资料","title_tokens":["参考","参考资料","资料"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/","text":"ROS2对比ROS1 在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。 ROS1的局限性 首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。 全新的ROS2 ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。 ROS2 vs ROS1 系统架构 在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。 DDS通信 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。 核心概念 ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。 编码方式 再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。 命令行 最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随教程，你就会慢慢理解这些特性。","text_tokens":["服务","嵌入","本","大部","除了","信号","很多","安全性","广泛","资源","上","一款","完整性","全","接收","按照","面向对象","迁移","产品","测试","盖","项目管理","接口","api","，","听","有且","左侧","变化","来看","不用","换成","最为","之后","就","已经","发布者","公司","大部头","带来","名字","风险","完善","借助","这个","—","rmw","没","驾驶","生活","提","全球","将","肯定","每","对于","提供","一下","功能","随着","常","/","一行","通信","驱动","但","和","接近","了解","标准化","教程","ros2","表示","翻新","迈过","学习","机制","不够","目标","基于","核心","还有","过去","接触","延迟","依然","从而","第一","出现","航天","保障","搭载","移植","先","接入","ros","版本","行为","应用","安装","只不过","属性","原本","学术研究","只是","走向","一个","把","类型","时","加入","历史使命","汽车","交给","考虑","这台","方式","wifi","方便","宕机","大部分","到","以下几点","运行","架构","tcp","印象","普及","相对","最大","比如","某","减少","也许","面向","第二代","较","几乎","答案","看","总之","学","继续","而言","简单","开发成本","我们","手机","交付","上升","保证","适配","运动学","做","可靠","借鉴","轻松","好","名称","优化","社区","复杂度","语言","说明","一样","指定","可选项","对象","只有","房子","哪些","百万","总体而言","依赖","标准","集成","不会","这里","至关","便于","讲解","处理","绝大部分","并","pr2","尽力","尽量","成功","长远","升级","软件开发","任何","重来","黑客","原有","也","再","二个","编码方式","到底","诞生","产品开发","会","另","学术","100ms","小伙伴","如","突然","解决","两个","智能","很大","udp","跟随","打成","他","之间","python","研究","消失","给","程序","主角","与","完成","有","稍安","受制于","甚至","层面","多","重要","放在","啦","方法","等","毛坯","catkin","开发方式","下边","体现","越来越","ros1","大致","款","纠结","只能","编写","开源","丰富","一步","之初","链接","广泛应用","陌生","所以","这样","信息","全新","稳定性","大量","二代","动力学","充足","大","共享","存在","系统工程","不难理解","完整","暂且","单兵作战","可选","时间","控制器","来","master","选项","发成","网络连接","应该","角色","差异","比","不仅","特性","三个","最后","最佳","代码","发现","张图","相关","一团乱","用户","是否","内部","安全","产品化","移植性","图片","时代","可以","各种各样","是从","类似","专注","未来","两者","当然","上手","topic","选择","先进","新一代","历史","过","网络","操作系统","细节","诟病","主要","以上","写","为什么","？","似乎","不是","建筑","更加","同样","对比","右侧","总体","结合","分解","率","一页","周期","其实","直接","走","一边","自己","共享内存","能够","基本","唯一","部分","一旦","对","一一","怀揣","担忧","你","发展","面临","ament","rtos","android","电脑","不能","由于","因为","来讲","rostopic","多个","具备","局限性","层","工具","当","注意","调用","简称","理解","对系统","稳定","windows","1ms","走向市场","无法","最新","过来","厂商","进行","不过","一家","后","平台","良好","尤其","物","几百","算力","入侵","分布","colcon","编码","同时","绝大","第一个","。","支持","干扰","工程","可移植","之前","虽然","一代","勿躁","可读","国际标准","适用","提高","还","一定","概念","python3","高","具体","可能","节点","中间层","一致","全部","力学","软件系统","除此","出错","频繁","整体","家庭","通过","现有","通信协议","针对","乱麻","rosrun","封装","生产","角度","应用层","设计","最","以下","该","如何","叫做","c++","成本","行人","vs","符合","之上","足够","有线","各位","分散","调试","毛坯房","打交道","管理","一团"," ","指挥","还会","有限","进程","amr","伙伴","真实","搬","真正","企业","越来","连接","软件","个体","诸多","实时性","数据","得","干掉","计算","运算","部署","更具","分布式","售价","不断","做到","之外","dds","微控制器","工作","经常","挑战","或者","环境","的","要求","这些","面对","实现","一种","另外","通信接口","大幅","总结","然后","重新","条件","致使","例子","不爽","系统","切换","fastrtps","中间","会成","过程","满足","如果","不太","项目","大幅度","底层","不","大家","布式","其他","用到","不再","在","基本保障","找到","实力","命令行","最终","这","下要","性","中","理器","推倒重来","linux","电脑系统","需求","能力","第二","基础","后续","确实","商业","、","编译","下","更","意义","不好","客户","第二个","编程语言","陆续","明显","管理器","里","框架","强壮","性能","策略","彼此","收","一些","它","作战","颠覆","配置","了","经验","他们","前方","一团乱麻","慢慢","几点","复杂","所示","远比","翻地","体验","含义","运动","成功经验","图像","初次","听说","middleware","都","不断涌现","macos","自家","只要","更好","无论","天翻地覆","做成","千差万别","相比","内","担心","mcu","级别","颠覆性","多功能","巨大","控制","什么","丢","受制","没有","批量生产","各样","推倒","至关重要","跨平台","时候","高昂","而已","主","请","而","解密","更接","于","新版","设备","协作","批量","局限","非常","建立","呢","为了","解算","市场","变革","为","使用","独立","rosbuild","变得","让","适合","机器人","修改","场景","一套","研发","简单明了","想要","是因为","run","通用","首先","编译系统","切记","更换","涌现","二种","流程","省略","发送","交道","阶段","方案","动力","小伙","内存","开发","要","单兵","导致","不难","加密","不要","强","命令","所有","道坎","熟悉","；","ceo","discovery","开始","限性","雷达","第二种","用","实时","那","：","客户端","发","即可","去","完","通用性","部头","why","opensplice","开发者","难度","需要","可靠性","发布","定义","复用","国际","可移植性","编译器","可读性","话题","其中","精力","自","最早","以及","5g","不同","各种","启动","除此之外","成","幅度","从","课程","消费","联网","自动","用于","嵌入式","定性","地方","间层","带领","一本","协议","课时","么","能","库会","每个","是","就是","揭秘","（","操作","消费市场","）","怎样","改","机器","小","几百万","深入","问题","工作站","或","使命","但是","常用","灵活","编程","格局","装修","看看","保留","厂家","举"],"title":"ROS2对比ROS1","title_tokens":["ros1","ros2","对比"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2ros1","text":"在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。","text_tokens":["。","你","名称","之前","使用","二代","到底","过","大","和","上","么","ros2","能","学习","？"," ","就是","，","变化","来看","不","对比","也许","第二代","就","在","有","其中","多","ros","或","这","ros1","我们","看看","第二","听说","一个","从","做","的"],"title":"ROS2对比ROS1","title_tokens":["ros1","ros2","对比"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros1","text":"首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。","text_tokens":["第一个","。","服务","支持","黑客","嵌入","干扰","也","大部","虽然","天翻地覆","一代","资源","做成","诞生","上","一款","级别","会","产品","具体","学术","，","什么","来看","不用","丢","他","没有","批量生产","研究","就","主角","高昂","完成","有","已经","甚至","风险","家庭","设备","批量","—","针对","生产","ros1","款","驾驶","呢","为了","只能","设计","市场","成本","随着","独立","这样","通信","充足","足够","和","有线","让","适合","单兵作战","机器人","ros2","时间"," ","是因为","不够","目标","网络连接","首先","有限","涌现","连接","软件","第一","出现","航天","开发","数据","搭载","计算","运算","单兵","ros","内部","要","售价","应用","不断","原本","学术研究","可以","工作","类似","走向","一个","类型","；","当然","或者","的","汽车","用","先进","实时","新一代","那","：","这台","条件","历史","致使","大部分","网络","系统","运行","why","为什么","？","似乎","更加","普及","可靠性","比如","不","在","找到","答案","最早","实力","最终","这","自己","中","各种","我们","能力","部分","保证","从","担忧","可靠","课程","发展","自动","用于","由于","嵌入式","因为","地方","具备","框架","一些","是","就是","它","作战","了","走向市场","机器","小","复杂","处理","绝大部分","平台","并","问题","工作站","良好","但是","翻地","pr2","算力","入侵","都","不断涌现","绝大"],"title":"ROS1的局限性","title_tokens":["限性","局限","ros1","局限性","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2","text":"ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。","text_tokens":["除了","信号","很多","安全性","上","完整性","一款","全","产品","测试","盖","项目管理","接口","api","，","不用","来看","变化","就","已经","风险","借助","这个","驾驶","生活","提","肯定","提供","一下","通信","但","和","标准化","ros2","翻新","机制","过去","第一","出现","保障","搭载","移植","ros","行为","应用","原本","只是","走向","一个","把","历史使命","汽车","考虑","wifi","方便","宕机","到","以下几点","运行","架构","相对","比如","较","继续","简单","我们","手机","运动学","可靠","借鉴","好","优化","语言","说明","房子","标准","不会","并","尽力","尽量","成功","长远","升级","任何","重来","黑客","原有","也","会","100ms","两个","智能","很大","打成","之间","python","给","与","完成","有","受制于","甚至","层面","多","方法","等","毛坯","catkin","体现","越来越","ros1","纠结","编写","之初","链接","所以","这样","稳定性","全新","大量","动力学","大","系统工程","完整","控制器","master","网络连接","角色","差异","比","不仅","特性","最佳","代码","发现","安全","产品化","时代","各种各样","可以","类似","未来","选择","历史","网络","操作系统","细节","？","不是","建筑","更加","结合","分解","周期","直接","自己","能够","基本","一旦","对","怀揣","面临","ament","rtos","android","电脑","不能","具备","工具","对系统","稳定","windows","1ms","无法","最新","进行","后","平台","尤其","算力","入侵","分布","colcon","同时","工程","。","第一个","虽然","还","一定","python3","具体","可能","节点","全部","力学","出错","针对","设计","以下","如何","叫做","c++","行人","之上","调试","毛坯房","管理"," ","还会","amr","真正","越来","连接","软件","个体","诸多","实时性","得","数据","部署","更具","分布式","做到","dds","微控制器","工作","经常","实现","挑战","或者","环境","的","要求","这些","面对","一种","重新","系统","满足","项目","不","大家","布式","不再","在","基本保障","最终","这","下要","性","中","理器","推倒重来","linux","电脑系统","需求","基础","第二","后续","、","编译","下","更","不好","明显","管理器","框架","强壮","性能","策略","它","颠覆","了","经验","他们","前方","几点","复杂","远比","体验","运动","成功经验","都","macos","无论","千差万别","相比","内","mcu","颠覆性","巨大","控制","受制","没有","推倒","各样","跨平台","时候","解密","于","新版","协作","解算","为了","呢","市场","变革","为","使用","独立","rosbuild","让","适合","机器人","修改","场景","研发","通用","编译系统","二种","流程","发送","阶段","方案","动力","开发","要","导致","加密","强","所有","第二种","用","实时","那","：","去","通用性","开发者","需要","编译器","以及","不同","各种","课程","消费","自动","用于","定性","课时","能","是","就是","（","操作","消费市场","）","怎样","机器","问题","使命","但是","格局","装修","保留"],"title":"全新的ROS2","title_tokens":["的","ros2","全新"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2-vs-ros1","text":"","text_tokens":[],"title":"ROS2 vs ROS1","title_tokens":["ros1","ros2"," ","vs"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_1","text":"在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。","text_tokens":["。","再","也","很多","内","上","接收","会","接口","有且","节点","，","听","突然","中间层","左侧","udp","变化","至关重要","消失","时候","频繁","程序","就","整体","而已","有","公司","请","而","重要","名字","完善","方法","通过","这个","—","通信协议","乱麻","下边","封装","ros1","大致","建立","应用层","最","将","肯定","提供","这样","信息","大量","通信","驱动","变得","和","但","共享","让","了解","不难理解","打交道","管理","可选","ros2","一套","简单明了","机制","一团","master","选项"," ","指挥","进程","学习","应该","角色","基于","更换","接触","交道","连接","发现","张图","从而","内存","一团乱","得","数据","开发","先","ros","不难","应用","安装","只不过","所有","dds","可以","是从","类似","把","一个","两者","ceo","discovery","通信接口","的","这些","另外","雷达","开始","那","客户端","方式","过","系统","操作系统","中间","主要","会成","写","架构","tcp","印象","如果","不太","更加","需要","发布","比如","底层","不","对比","右侧","大家","在","自","找到","走","看","这","共享内存","中","理器","成","简单","linux","我们","后续","、","好","rtos","一样","客户","间层","明显","可选项","里","管理器","协议","层","框架","只有","注意","库会","哪些","彼此","调用","依赖","是","就是","它","理解","稳定","操作","标准","windows","了","一团乱麻","至关","进行","不过","复杂","深入","并","图像","都","macos"],"title":"系统架构","title_tokens":["系统","架构"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#dds","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。","text_tokens":["。","也","再","除了","广泛","相比","国际标准","适用","提高","产品开发","按照","会","产品","高","另","接口","，","解决","udp","变化","丢","不用","软件系统","频繁","程序","就","给","层面","带来","多","于","放在","等","这个","通信协议","rmw","ros1","纠结","为了","该","设计","最","肯定","开源","如何","每","对于","丰富","为","广泛应用","功能","常","提供","成本","所以","/","这样","符合","一行","通信","让","机器人","ros2","场景","master"," ","想要","发成","应该","基于","目标","还有","更换","三个","省略","代码","延迟","软件","数据","得","用户","开发","要","移植","接入","ros","先","版本","加密","部署","是否","应用","安装","属性","之外","dds","可以","类似","把","一个","熟悉","专注","时","当然","实现","这些","加入","的","一种","交给","用","选择","然后","重新","例子","发","不爽","系统","完","切换","fastrtps","诟病","写","opensplice","？","不是","满足","tcp","如果","更加","最大","比如","某","底层","不","定义","复用","减少","国际","其他","率","在","精力","其实","5g","不同","这","总之","中","各种","简单","能够","基本","唯一","开发成本","我们","需求","交付","部分","适配","做","商业","、","联网","轻松","更","好","优化","社区","复杂度","一样","指定","来讲","多个","协议","么","性能","简称","每个","收","是","就是","一些","稳定","标准","配置","了","无法","过来","改","这里","厂商","机器","不过","一家","复杂","只要","并","问题","物","灵活","听说","厂家","middleware","都","自家","举"],"title":"DDS通信","title_tokens":["通信","dds"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_2","text":"ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。","text_tokens":["课程","。","本","陌生","也","二个","意义","使用","很多","方式","第二个","广泛","各位","存在","和","过","担心","概念","ros2","迁移","到","百万","会","学习","开发者","小伙伴"," ","伙伴","，","如果","应该","一致","了","不用","不","没有","大家","这里","依然","便于","就","小伙","已经","在","有","开发","其中","几百万","几乎","以及","讲解","并","ros","方法","应用","中","含义","开发方式","几百","尽量","非常","ros1","我们","第二","部分","保留","全球","一一","熟悉","从","这些","的"],"title":"核心概念","title_tokens":["核心","概念"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_3","text":"再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。","text_tokens":["。","可移植","再","也","大部","勿躁","可读","提高","面向对象","会","具体","如","，","两个","程序","之后","就","发布者","稍安","大部头","更接","多","方法","ros1","角度","如何","一步","和","接近","暂且","教程","机器人","ros2","迈过","学习","来"," ","真实","搬","切记","特性","企业","软件","发现","开发","移植","版本","不要","移植性","图片","道坎","一个","实现","的","用","方式","部头","写","过程","难度","项目","同样","发布","总体","大家","可移植性","面向","用到","一页","可读性","在","一边","这","学","中","而言","我们","后续","从","确实","课程","更","语言","编程语言","带领","来讲","具备","一本","对象","当","总体而言","是","一些","操作","机器","不过","所示","编程","看看","编码","软件开发","更好"],"title":"编码方式","title_tokens":["方式","编码","编码方式"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_4","text":"最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随教程，你就会慢慢理解这些特性。","text_tokens":["。","再","也","多功能","概念","会","节点","，","控制","跟随","变化","除此","换成","最为","就","主","有","啦","现有","—","没","rosrun","ros1","大致","每","功能","独立","通信","和","分散","教程","ros2","表示","master"," ","run","核心","最后","特性","相关","开发","干掉","ros","命令","所有","之外","dds","把","一个","上手","大幅","的","这些","topic","一种","总结","选择","：","即可","以上","难度","印象","如果","相对","大幅度","比如","某","对比","大家","话题","在","命令行","中","启动","而言","除此之外","我们","上升","幅度","对","后续","做","下","你","更","好","陆续","rostopic","工具","是","就是","理解","揭秘","集成","了","慢慢","常用","编程","初次","都"],"title":"命令行","title_tokens":["命令行","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/","text":"ROS2安装方法 本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。 Linux系统简介 时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。 Ubuntu系统简介 我们后续课程使用到的Linux发行版就是 ubuntu系统 。 Ubuntu诞生于2004年10月份， 每六个月发布一个新版本 ，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。 Ubuntu虚拟机安装 虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下： 1. 下载系统镜像 下载链接： https://ubuntu.com/download/desktop 2. 在虚拟机中创建系统 3. 设置虚拟机硬盘大小 4. 设置Ubuntu镜像路径 5. 启动虚拟机 6. 设置用户名和密码 7. 等待系统安装 8. 完成安装 Ubuntu系统安装好后，大家可以先随意使用熟悉一下。 ROS2系统安装 接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下： 1. 设置编码 $ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8 2. 添加源 $ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844 3. 安装ROS2 $ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop 4. 设置环境变量 $ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。 ROS2示例测试 为了验证ROS2安装成功，我们可以通过以下示例进行测试。 示例一：命令行示例 先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。 示例二：小海龟仿真示例 再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["服务","本","合适","除了","packages","很多","一应","点击","上","介绍","字符","虚拟","测试","architecture","rosdistro","放到","，","&&","等待","应用软件","如遇","自行","最为","之后","就","千层浪","已经","量","发布者","公司","一","8","lts","名字","ubuntu22.04","一起","这个","—","效果","大学生","可视化","月份","试试","成为","将","每","基本相同","2","一下","功能","signed","/","通信","但","和","试一试","后缀","了解","locales","教程","ros2","key","表示","字符串","sources","每年","by","etc","核心","上下","www","接触","二","dpkg","依然","release","export","第一","出现","移植","先","ros","版本","按键","应用","安装","镜像","一句","原本","curl","把","一个","情况","看到","时",":","加入","学生","免费","考虑","建议","回到","最好","org","到","版","运行","资料","deb","locale","最大","比如","互联","精神","创建","吧","bash","伴随","决定","紧随","并用","地址","多任务","下来","实践","我们","保证","等等","做","好","一次","keyrings","redhat","说明","一样","互联网","turtlesim","千层","提交","衡量","示例","o","依赖","发行","--","failed","标准","准确","绑定","俱全","这里","os","讲解","并","成功","升级","软件开发","任何","服务器","lsb","原有","也","4","再","密码","乐于","二个",">","诞生","指标","会","环境变","吸引","两个","准备","智能","两年","他","程序","给","顺序","source","与","unix","有","完成","啦","步骤","甚至",".","多","重要","1991","raw","node","方法","2022","(","等","擦掌","发扬光大","越来越","技术实力","vmware","download","海龟","开源","维护","编号","链接","所以","此时","叫","这样","可","大量","大","成熟","大学","时间","1",")","master","来","http","应该","发扬","不仅","代码","上下左右","“","硬盘","用户","一石激起千层浪","是否","芬兰","源代码","持续","硬件","好者","archive","18","可以","各种各样","计算机","未来","为例","选择","简介","变量","通讯","好后","任务","list","第一句","背景","网络","操作系统","多用户","主要","？","长期","之一","-","keyring","热情","html","其他软件","用户名","林纳斯","~","人工智能","本相","直接","$","第一次","爱好","自己","humble","操作界面","基本","唯一","六个","发行版","对","world","发展","你","出","电脑","py","强大","因为","来讲","多个","出于","fedora","月","当中","稳定","windows","采用","二句","这套","进行","上层","相同","路径","后","真理","大小","tee","to","编码","guyuehome","真器","同时","echo","支持","。","第一个","探索","之前","很","先要","虽然","适用","报错","经典","还","[","行列","概念","反馈","外衣","一定","gen","pro","cpp","可能","节点","传播","分享","应用程序","除此","新","us","光大","说干就干","至此","3","listener","通过","接下","年","nodes","源","37844","唯一标准","bug","lang","设计","最","以下","该","如何","叫做","仿真器","代表","之上","激起","com","如下","奥义","]","\"","管理","尚","share"," ","有限","d","2004","领域","现在","各个","企业","越来","软件","数据","计算","7","热爱","任何人","”","之外","dds","工作","_","爱好者","实现","或者","位置","的","环境","另外","一种","蓝色","指令","下载","重新","apt","内核","系统","操作方法","6","过程","all","如果","不太","中将","编辑器","底层","不","大家","22","技术","其他","构建","看出","在","一般","实力","命令行","usr","这","中","文件","动手","linux","开放","影响","第二","后续","update","商业","、","前先要","下","浏览","更","talker","紧随其后","会加","第二个","检验","界面","性能","一些","个","了","可视","何人","传输","普通","null","小海龟","运动","六个月","https","者","都","比较","arch","macos","connect","ubuntu20.04","无论","激发","=","|","绝对","以","快","en","打包","关注","添加","codename","demo","收费","占据","键盘","hello","更新","务器","控制","什么","utf","原理","upgrade","没有","各样","时候","接下来","户名","请","teleop","于","还是","turtle","其","无论是","验证","摩拳擦掌","呢","为了","sudo","opt","编辑","一直","使用","小海","多人","evaluation","蕴藏","第二句","让","适合","机器人","场景","一套","想要","run","通用","优先","快速","发挥","lc","模式","开发","设置","虚拟机","命令","左右","多用","订阅","熟悉","浏览器","开始","分别","已有","setup","目前","ubuntu","04","：","动手做","个人","修复","dev","加上","一应俱全","兼容","开发者","提到","环境变量","一位","只","ssl","需要","发布","参考","仿真","其后","迅猛","centos","其中","install","不同","bashrc","各种","启动","除此之外","成","desktop","main","print","节","workstation","从","变动","课程","联网","华丽","命名","之内","人工","10","个人爱好","算机","终端","关于","是","就是","数字","操作","随意","5","products","githubusercontent","gnupg","并且","机器","gpg","正常","起来","问题","或","常用","但是","每隔"],"title":"ROS2安装方法","title_tokens":["安装","方法","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2","text":"本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。","text_tokens":["前先要","。","本","一种","一下","先要","系统","了解","操作系统","ros2","，","操作","底层","重要","一起","安装","—","linux","我们","节","最","的"],"title":"ROS2安装方法","title_tokens":["安装","方法","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#linux","text":"时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。","text_tokens":["支持","。","本","服务","原有","也","之前","虽然","乐于","激发","很多","打包","适用","上","还","行列","指标","反馈","收费","会","概念","外衣","吸引","放到","，","传播","务器","什么","分享","应用程序","应用软件","原理","他","没有","各样","程序","之后","就","千层浪","与","unix","光大","量","说干就干","已经","甚至","公司","多","重要","1991","名字","方法","通过","一起","这个","其","等","—","年","大学生","发扬光大","越来越","可视化","唯一标准","技术实力","呢","bug","最","设计","成为","开源","维护","每","基本相同","叫做","功能","使用","多人","所以","此时","叫","大量","之上","激起","但","和","大","成熟","适合","教程","管理","ros2","大学","时间","一套","尚","场景"," ","每年","有限","应该","通用","发扬","核心","不仅","现在","企业","代码","越来","软件","快速","模式","出现","用户","开发","一石激起千层浪","计算","先","芬兰","源代码","版本","热爱","硬件","应用","好者","安装","任何人","镜像","原本","多用","可以","各种各样","计算机","把","一个","熟悉","爱好者","看到","情况","实现","或者","加入","的","另外","学生","已有","免费","目前","ubuntu","回到","重新","动手做","任务","最好","内核","系统","操作方法","个人","修复","操作系统","多用户","加上","到","主要","兼容","过程","开发者","？","提到","一位","不太","之一","需要","热情","比如","底层","不","参考","互联","技术","其他","林纳斯","精神","迅猛","centos","在","其中","伴随","决定","实力","并用","本相","一般","爱好","不同","自己","这","中","各种","多任务","操作界面","成","动手","实践","基本","唯一","linux","我们","开放","发行版","服务器","对","等等","做","商业","、","给","联网","华丽","发展","更","下","命名","redhat","一样","强大","互联网","来讲","千层","提交","个人爱好","出于","算机","检验","衡量","界面","性能","fedora","依赖","发行","是","一些","就是","当中","操作","windows","标准","稳定","了","准确","绑定","这套","可视","并且","何人","讲解","相同","后","起来","问题","并","或","真理","常用","有","都","任何","macos"],"title":"Linux系统简介","title_tokens":["简介","系统","linux"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu","text":"我们后续课程使用到的Linux发行版就是 ubuntu系统 。 Ubuntu诞生于2004年10月份， 每六个月发布一个新版本 ，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。","text_tokens":["支持","。","本","ubuntu20.04","4","很","无论","也","合适","除了","之前","再","很多","一应","绝对","以","快","关注","诞生","上","还","介绍","一定","会","占据","虚拟","可能","，","更新","智能","两年","除此","自行","时候","之后","新","就","顺序","已经","有","多","于","还是","重要","lts","ubuntu22.04","2022","方法","通过","等","年","效果","擦掌","无论是","月份","摩拳擦掌","为了","编辑","如何","每","维护","编号","一直","一下","使用","所以","这样","代表","试一试","让","后缀","教程","机器人","表示"," ","想要","优先","2004","领域","各个","接触","硬盘","软件","依然","发挥","第一","出现","用户","开发","移植","虚拟机","版本","持续","硬件","应用","安装","之外","18","可以","一个","熟悉","未来","时","浏览器","位置","的","环境","已有","免费","为例","选择","考虑","ubuntu","04","通讯","建议","系统","网络","到","版","主要","一应俱全","资料","开发者","只","如果","长期","发布","编辑器","比如","最大","参考","大家","互联","22","其他","其后","看出","在","其中","人工智能","紧随","直接","第一次","不同","自己","中","各种","除此之外","文件","linux","六个","我们","发行版","影响","保证","后续","从","变动","、","课程","浏览","联网","你","更","好","一次","出","之内","人工","紧随其后","10","会加","电脑","互联网","因为","性能","月","发行","是","就是","数字","个","稳定","windows","了","5","俱全","这里","进行","机器","上层","讲解","或","常用","但是","普通","六个月","每隔","升级","软件开发","都","比较"],"title":"Ubuntu系统简介","title_tokens":["系统","简介","ubuntu"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu_1","text":"虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下：","text_tokens":["另外","。","已有","叫做","/","下载","：","evaluation","之上","和","多个","如下","com","系统","让","运行","虚拟","pro","是"," ","，","-","操作","www","准备","html","其他软件","采用","products","大家","这里","软件","其他","构建","自行","就","在","完成","请","相同","步骤",".","后","啦","并","虚拟机","安装","地址","https","开始","我们","可以","workstation","工作","同时","一个","vmware",":","环境","的"],"title":"Ubuntu虚拟机安装","title_tokens":["虚拟","ubuntu","安装","虚拟机"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1","text":"下载链接： https://ubuntu.com/download/desktop","text_tokens":["链接","desktop","ubuntu"," ","https","下载","：","/",".","com","download",":"],"title":"1. 下载系统镜像","title_tokens":["1","镜像"," ","下载",".","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2","text":"","text_tokens":[],"title":"2. 在虚拟机中创建系统","title_tokens":["中","2","创建","虚拟"," ","在",".","虚拟机","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3","text":"","text_tokens":[],"title":"3. 设置虚拟机硬盘大小","title_tokens":["硬盘","虚拟"," ","设置",".","虚拟机","3","大小"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4-ubuntu","text":"","text_tokens":[],"title":"4. 设置Ubuntu镜像路径","title_tokens":["镜像","4","ubuntu"," ","路径","设置","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#5","text":"","text_tokens":[],"title":"5. 启动虚拟机","title_tokens":["启动","虚拟"," ",".","虚拟机","5"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#6","text":"","text_tokens":[],"title":"6. 设置用户名和密码","title_tokens":["用户名","密码","户名"," ","用户","设置",".","和","6"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#7","text":"","text_tokens":[],"title":"7. 等待系统安装","title_tokens":["安装"," ",".","7","等待","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#8","text":"Ubuntu系统安装好后，大家可以先随意使用熟悉一下。","text_tokens":["安装","大家","。","一下","使用","ubuntu","好后","，","可以","先","随意","熟悉","系统"],"title":"8. 完成安装","title_tokens":["安装"," ","完成",".","8"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_1","text":"接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下：","text_tokens":["。","ubuntu","：","如下","系统","ros2","到","，","了","接下来","就","步骤","接下","安装","中","下来","我们","可以","把"],"title":"ROS2系统安装","title_tokens":["系统","ros2","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1_1","text":"$ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8","text_tokens":["sudo","=","apt","en","locales","gen","all"," ","locale","-","&&","utf","export","lc","us","$",".","8","install","_","update","lang"],"title":"1. 设置编码","title_tokens":["1"," ","设置",".","编码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2_1","text":"$ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844","text_tokens":["packages","=","|",">","报错","[","codename","architecture","rosdistro","，","&&","如遇","source","list","raw",".","(","37844","sudo","signed","/","可","com","]","\"","ros2","key","share",")","master"," ","http","by","sources","etc","d","www","dpkg","“","release","ros","archive","”","curl","_",":","ubuntu","apt","org","dev","deb","-","ssl","keyring","参考","$","install","usr","main","print","update","keyrings","o","--","failed","githubusercontent","gnupg","os","gpg","null","tee","to","https","guyuehome","echo","arch","lsb","connect"],"title":"2. 添加源","title_tokens":["2","源"," ",".","添加"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3-ros2","text":"$ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop","text_tokens":["humble","update","desktop"," ","$","-","apt","ros","sudo","install","upgrade"],"title":"3. 安装ROS2","title_tokens":["安装","ros2"," ",".","3"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4","text":"$ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。","text_tokens":["。","setup","好","/",">","系统","\"","ros2"," ","，","了","~","source","就","bash","已经","在","$",".","ros","至此","bashrc","安装","humble","中","echo","opt"],"title":"4. 设置环境变量","title_tokens":["4","环境变","变量","环境变量"," ","设置",".","环境"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_2","text":"为了验证ROS2安装成功，我们可以通过以下示例进行测试。","text_tokens":["安装","。","示例","ros2","进行","测试","验证","成功","，","我们","可以","为了","以下","通过"],"title":"ROS2示例测试","title_tokens":["测试","示例","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_1","text":"先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。","text_tokens":["第一个","。","talker","二个","说明","：","py","通信","第二个","系统","终端","ros2","demo","cpp","字符","来","字符串"," ","run","节点","，","如果","hello","两个","发布","底层","没有","“","最为","吧","第一","在","数据","发布者","$","先","重要","是否","正常","传输","问题","listener","通过","中","启动","nodes","命令","”","dds","订阅","试试","第二","者","_","world","一个","以下","的"],"title":"示例一：命令行示例","title_tokens":["示例","命令","：","一","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_2","text":"再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["。","探索","蓝色","再","小海","指令","仿真器","：","turtlesim","如下","点击","试一试","第一句","背景","第二句","经典","终端","上","蕴藏","奥义","示例","ros2","key","教程","运行","来","关于"," ","run","节点","，","键盘","中将","上下","两个","控制","二句","上下左右","“","仿真","就","第一","在","$","啦","node","teleop","ros","turtle","至此","按键","持续","安装","中","小海龟","—","启动","一句","运动","左右","”","成功","我们","第二","可以","真器","_","后续","一个","该","将","海龟","分别","的"],"title":"示例二：小海龟仿真示例","title_tokens":["示例","小海龟","仿真","小海","：","二","海龟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/","text":"ROS2命令行操作 在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。 Linux中的命令行 类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。 启动方式 回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。 常用命令操作 我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。 ROS2中的命令行 ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。 运行节点程序 想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看节点信息 当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim 查看话题信息 当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose 发布话题消息 想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 发送服务请求 一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\" 发送动作目标 想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\" 录制控制命令 系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["复制到","服务","本","x","y","拷贝到","很多","上","段","字符","死记","，","一件","不用","逛来","就","找","已经","转","一","0.2","一起","这个","死记硬背","—","terminal","专门","可视化","ls","参数","尝试","将","每","对于","2","功能","一下","提供","随着","/","科幻","但","不一","和","试一试","产生","了解","ros2","key","表示","学习","被","机制","play","主目录","目标","核心","angular","还有","接触","t","第一","cmd","一二","多到","先","由","ros","应用","衣服","只是","定制","把","一个","看到","及其",":","总","回到","服装","方式","呀","死机","rate","到","消息","运行","必不可少","比如","某","call","原因","多种","快捷","创建","推出","做好","继续","下来","srv","我们","逛去","msg","删除","轻松","一次","名称","好","<","一样","子目","指定","turtlesim","科幻电影","哪些","}","--","手","数量","集成","感觉","具体操作","这里","…","改了","其上","theta","并","新建","查","随身","ctrl","黑客","原有","也","再","统管",">","40","1.8","输入","会","快捷键","另","解决","并不一定","程序","约束","msgs","与","list","有","完成","啦","absolute","node","alt","多","重要","此","0",".","子目录","2022","干什么","等","不变","款式","大致","感兴趣","海龟","子","一步","链接","里边","所以","这样","此时","信息","目","1","来","选项","系列","买","17","spawn","“","常用命令","复制","用户","现出","一二十个","cp","跟","而是","感兴","service","改变","管理员","可以","右键","类似","地","未来","目标目录","topic","深色","笔记本电脑","为例","窗口","选择","根据","背景","以上","主要","为什么","？","不是","-","一系列","文件名","结合","呈现出","不到","二十个","$","直接","第一次","一边","打开","自己","精心设计","能够","对","文件名称","goal","及","你","出","电脑","材料","因为","来讲","多个","工具","rm","动","调用","便捷","cd","改名","列表","进行","bag","不过","容易","进一步","路径","案例","后","均","相同","知道","录制","又","db3","例如","帮上","真器","echo","体操","商场","第一个","。","之前","很","mkdir","虽然","枯燥","还","[","一定","觉得","显示","概念","具体","可能","十个","节点","商家","内容","这项","列出","异常","这种","后边","某个","拷贝","3","现有","通过","接下","感受","pub","保持","硬","魅力","角度","实验","该","设计","info","如何","叫做","看不到","linear","rosbag","仿真器","语法","'","如下","调试","]","\"","管理"," ","{","所在","体会","逛来逛去","软件","系统管理员","想象","数据","”","工作","_","实现","这些","或者","的","笔记本","一种","实验室","有点","指令","send","太","系统","兴趣","满足","如果","不太","record","编辑器","不","执行","大家","其他","z","用到","详细","在","命令行","这","中","文件","linux","件夹","哪","需求","至于","写字","确实","、","下","更","麻烦","一只","炫酷","片段","一些","背","它","想","本节","了","移入","源文件","慢慢","可视","一系","至今","体验","忙","小海龟","精心","目录","初次","当前","从来","都","电影","标目","不可","rosbag2","无论","绝对","规则","以","则","0.0","一点","键盘","控制","看似","什么","没有","权限","时候","接下来","鼠标","布料","teleop","于","还是","一二十","turtle","令人发指","某段","绝对路径","呢","完全","记忆","sudo","geometry","笔记","度高","编辑","为","一直","搜索","使用","小海","11","action","让",",","场景","播放","想要","run","rotateabsolute","复现","发送","2.0","很少","随身带","35","要","请求","既定","什么样","当前工作","+","命令","所有","mv","受","熟悉","用","适应","04","：","既","呈现","即可","去","gedit","加上","发指","需要","发布","仿真","话题","详细信息","不同","各种","pose","启动","目的","成","自主","怎么","总有","每次","查看","动作","带领","孤单","终端","文件夹","turtle1","name","是","就是","二十","操作","pwd","令人","rotate","小","看中","twist","深入","正常","起来","问题","或","若","但是","难以","常用","灵活","vel","看看","保留"],"title":"ROS2命令行操作","title_tokens":["命令行","ros2","操作","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2","text":"在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。","text_tokens":["。","一种","一次","一步","有点","之前","小海","使用","适应","更","随着","带领","调试","工具","一定","到","ros2","会","运行","学习","可能"," ","，","如果","不太","本节","了","接触","大家","时候","第一","在","进一步","案例","命令行","深入","多","重要","第一次","中","小海龟","感受","—","命令","我们","可以","魅力","将","海龟","的"],"title":"ROS2命令行操作","title_tokens":["命令行","ros2","操作","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#linux","text":"类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。","text_tokens":["。","服务","不可","无论","虽然","很多","规则","一定","一点","会","，","商家","解决","一件","看似","什么","异常","逛来","没有","这种","时候","并不一定","就","约束","已经","布料","多","于","还是","现有","等","款式","可视化","呢","完全","设计","度高","对于","为","一直","功能","使用","里边","这样","此时","科幻","但","不一","和","场景","被","来"," ","想要","买","逛来逛去","软件","想象","现出","先","ros","既定","什么样","衣服","命令","所有","可以","定制","类似","一个","受","看到","这些","的","一种","服装","方式","呀","呈现","根据","去","为什么","？","不是","满足","必不可少","比如","某","不","大家","结合","其他","呈现出","推出","在","命令行","做好","自己","精心设计","中","各种","成","自主","能够","linux","哪","我们","需求","总有","每次","逛去","、","你","一样","材料","来讲","麻烦","工具","科幻电影","炫酷","片段","一些","是","就是","手","操作","便捷","了","这里","可视","小","容易","其上","看中","并","起来","问题","至今","但是","灵活","精心","保留","都","电影","商场"],"title":"Linux中的命令行","title_tokens":["中","命令","linux","命令行","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_1","text":"回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。","text_tokens":["。","本","ctrl","黑客","也","很","上","输入","枯燥","一定","觉得","会","字符","快捷键","十个","，","这项","什么","不用","时候","就","鼠标","有","alt","一二十","令人发指","通过","这个","terminal","专门","硬","参数","魅力","呢","记忆","笔记","叫做","看不到","功能","使用","搜索","随着","一下","所以","科幻","来"," ","系列","所在","体会","软件","很少","t","随身带","一二","多到","一二十个","而是","应用","+","命令","右键","可以","熟悉","看到","的","笔记本","深色","笔记本电脑","用","窗口","选择","指令","：","回到","既","方式","死机","背景","即可","到","为什么","不是","发指","一系列","需要","原因","大家","多种","其他","快捷","用到","在","不到","二十个","命令行","打开","这","中","启动","怎么","我们","对","至于","写字","及","确实","电脑","因为","工具","终端","科幻电影","是","就是","背","二十","手","操作","数量","令人","慢慢","列表","一系","不过","后","正常","并","但是","难以","常用","又","初次","从来","都","随身","电影"],"title":"启动方式","title_tokens":["方式","启动"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_2","text":"我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。","text_tokens":["复制到","。","标目","原有","也","mkdir","拷贝到","统管","绝对","以",">","则","[","显示","会","死记","另","，","列出","没有","权限","某个","就","找","一","多","此","拷贝","子目录","死记硬背","保持","不变","ls","绝对路径","sudo","该","将","编辑","对于","为","一下","功能","链接","/","语法","目","]","管理","来","选项"," ","主目录","目标","“","常用命令","复制","系统管理员","用户","由","先","cp","当前工作","命令","mv","”","所有","改变","管理员","只是","可以","工作","把","一个","地","未来","熟悉","及其","或者","这些","的","目标目录","用","指令","：","回到","系统","gedit","需要","编辑器","不","文件名","执行","大家","创建","一边","打开","中","目的","文件","linux","件夹","我们","文件名称","及","删除","下","名称","出","<","子目","指定","多个","文件夹","rm","它","pwd","了","移入","感觉","源文件","cd","改名","列表","…","均","路径","新建","或","若","常用","体验","目录","查","当前"],"title":"常用命令操作","title_tokens":["常用命令","操作","常用","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2_1","text":"ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。","text_tokens":["第一个","topic","。","下","为例","功能","也","小海","以","了解","还","ros2","主要","表示","概念","具体","机制"," ","节点","，","系列","核心","操作","一系列","内容","集成","比如","具体操作","什么","后边","一系","接下来","仿真","就","第一","话题","与","不过","在","有","相同","命令行","node","跟","不同","干什么","接下","中","小海龟","继续","一起","目的","感受","命令","所有","下来","linux","我们","大致","参数","可以","对","都","一个","体操","海龟","总","的"],"title":"ROS2中的命令行","title_tokens":["中","ros2","命令","命令行","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_3","text":"想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["使用","：","和","turtlesim","ros2","key","运行","想要"," ","节点","，","run","键盘","操作","控制","某个","仿真","进行","$","node","要","teleop","turtle","中","命令","例如","我们","可以","_","海龟"],"title":"运行节点程序","title_tokens":["节点","程序","运行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_4","text":"当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim","text_tokens":["子","查看","/","这样","：","信息","turtlesim","系统","兴趣","加上","ros2","哪些","运行","来","？"," ","节点","，","如果","它","某","就","详细","list","有","知道","$","详细信息","node","啦","ros","感兴","中","命令","当前","感兴趣","可以","呢","对","都","一个","info","的"],"title":"查看节点信息","title_tokens":["查看","信息","节点"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_5","text":"当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose","text_tokens":["topic","子","使用","查看","/","：","如下","即可","试一试","系统","turtle1","还","加上","ros2","消息"," ","想","，","某","话题","list","有","数据","$","中","pose","命令","当前","echo","呢","都","一个","看到","的"],"title":"查看话题信息","title_tokens":["查看","话题","信息"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_6","text":"想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":["y","topic","x","linear","指令","/","：","1.8","rate",",","turtle1","还","\"","0.0","ros2","动","1","}","想要"," ","--","，","{","angular","控制","发布","2.0","z","话题","cmd","msgs","$","直接","命令行","twist","起来","通过","pub","命令","vel","我们","可以","_","geometry",":","海龟","msg"],"title":"发布话题消息","title_tokens":["话题","消息","发布"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_7","text":"一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\"","text_tokens":["y","服务","x","2","提供","再","仿真器","/","：","太","turtlesim","'","试一试","产生","孤单",",","一只","还","\"","name","ros2","}","调用","来"," ","{","，","spawn","call","仿真","改了","$","theta","0.2","service","—","srv","我们","真器","一个",":","海龟"],"title":"发送服务请求","title_tokens":["请求","服务","发送"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_8","text":"想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\"","text_tokens":["提供","仿真器","这样","：","/","动作","send","指定","action","turtlesim","让","turtle1","\"","到","ros2","具体","想要"," ","，","目标","rotate","rotateabsolute","比如","发送","仿真","完成","转","absolute","$","theta","命令行","3","通过","忙","中","这个","命令",":","帮上","可以","真器","角度","_","一个","goal","海龟","的"],"title":"发送动作目标","title_tokens":["目标","动作","发送"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_9","text":"系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["每","。","轻松","子","实验室","rosbag","功能","再","很","好","用","rosbag2","/","04","：","回到","很多","11","40","系统","turtle1","段","ros2","以上","运行","？","播放","想要"," ","play","，","如果","就是","-","还有","record","17","复现","大家","bag","与","cmd","数据","有","$","录制","35",".","啦","还是","0","2022","一个","这","常用","如何","自己","中","命令","下来","db3","vel","某段","我们","看看","可以","尝试","_","把","实验","实现","的"],"title":"录制控制命令","title_tokens":["录制","控制","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","text":"ROS2开发环境配置 ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。 Git git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git 下载教程源码 《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。 VSCode Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download VSCode插件配置 为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。 中文语言包 Python插件 C++插件 CMake插件 vscode-icons ROS插件 Msg Language Support Visual Studio IntelliCode URDF Markdown All in One VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["支持","。","插件","也","markdown","不开","很多","广泛","高效","开发工具","一款","还","会","具体","可能","，","准备","内容","无限","in","之间","python","给","新","就","之后","与","完成","有","神兵","讲",".","轻量","msg","多","重要","管理工具","方法","成千","中会","—","年","自带","非常","入门","记事","language","呢","为了","增加","bug","sudo","设计","成为","肯定","编写","开源","如何","编辑","visualstudio","download","丰富","《","广泛应用","提供","功能","使用","链接","里边","有些","所以","/","这样","利器","c++","大量","驱动","一行","gitee","但","和","com","作为","调试","让","教程","机器人","管理","ros2","2015","icons","这款","被"," ","系列","intellicode","特性","中文","代码","软件","略显","快速","冲突","码云","开发","推荐","先","ros","版本","理工","clone","源代码","硬件","应用","安装","语言包","官方","命令","所有","上万","几千万","可以","_","众多","一个","看到","变更",":","这些","环境","的","浏览器","另外","功能强大","已有","用","下载","：","方式","tutorials","离不开","apt","系统","切换","修复","个人","因","操作系统","记事本","以上","all","？","开发者","urdf","只","如果","项目","合并","需要","一系列","-","21","编辑器","比如","搭建","linus","不","》","网上","喜欢","大家","人","推出","在","审核","直接","千万","以及","国内","$","git","不同","install","这","自己","中","文件","简单","linux","件夹","code","我们","迅速","每次","等等","之父","后续","one","官方网","做","、","课程","成千上万","编译","发展","自动","下载方式","好","更","浏览","出","查看","人工","语言","最","support","强大","搜索","哪里","提交","多个","工具","终端","文件夹","示例","简称","扩展","一些","两款","是","微软","操作","windows","配置","了","集成","不会","这里","管理软件","一系","进行","组件","便于","机器","判断","visual","复杂","贡献","cmake","行","并","官方网站","听到","网站","github","几千","千上万","studio","https","常听到","guyuehome","都","源码","非常简单","macos","而生","vscode"],"title":"ROS2开发环境配置","title_tokens":["ros2","配置","环境","开发"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros2","text":"ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。","text_tokens":["课程","vscode","。","提供","查看","不开","大量","离不开","和","工具","开发工具","机器人","示例","的","、","编译","？","一些","两款","，","需要","准备","配置","做","代码","大家","给","机器","完成","开发","推荐","先","重要","ros","git","中会","—","我们","肯定","呢","源码","编写","这些","环境","如何"],"title":"ROS2开发环境配置","title_tokens":["ros2","配置","环境","开发"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#git","text":"git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git","text_tokens":["。","也","广泛","高效","一款","会","具体","可能","，","内容","之间","之后","新","就","完成","有","管理工具","方法","成千","—","非常","增加","bug","sudo","设计","肯定","开源","广泛应用","功能","使用","有些","所以","一行","驱动","gitee","和","让","管理","这款","被"," ","特性","代码","软件","冲突","码云","开发","版本","理工","硬件","应用","安装","命令","所有","上万","几千万","可以","众多","一个","看到","变更","这些","的","已有","apt","系统","切换","修复","因","开发者","项目","合并","需要","比如","linus","不","大家","人","在","审核","直接","千万","以及","国内","$","git","不同","install","这","中","简单","linux","我们","迅速","每次","等等","之父","成千上万","发展","自动","人工","哪里","提交","多个","工具","终端","是","了","不会","管理软件","进行","判断","贡献","行","并","听到","网站","github","几千","千上万","常听到","都","非常简单","而生"],"title":"Git","title_tokens":["git"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_1","text":"《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。","text_tokens":["课程","浏览","下载方式","另外","《","好","更","用","vscode","。","里边","查看","/","下载","：","这样","很多","方式","gitee","tutorials","com","和","系统","文件夹","还","记事本","ros2","会"," ","是","，","如果","集成","21","》","代码","这里","略显","就","有","复杂","讲","$",".","推荐","多","开发","clone","git","一个","中","—","文件","自带","件夹","入门","https","记事","guyuehome","_","源码",":","浏览器","环境","的"],"title":"下载教程源码","title_tokens":["教程","下载","源码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode","text":"Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download","text_tokens":["支持","vscode","功能强大","丰富","。","功能","链接","利器","/","下载","：","强大","但","和","com","系统","操作系统","、","简称","扩展"," ","是","，","微软","项目","操作","windows","编辑器","搭建","代码","快速","组件","推出","visual","在","开发","神兵","轻量",".","源代码","官方网站","年","编辑","成为","官方","网站",":","studio","code","linux","非常","https","可以","一个","download","macos","官方网","visualstudio","2015","的"],"title":"VSCode","title_tokens":["vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode_1","text":"为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。","text_tokens":["。","插件","功能","调试","还","ros2","扩展","，","系列","一系列","一系","便于","与","开发","安装","我们","可以","后续","为了","无限","vscode","的"],"title":"VSCode插件配置","title_tokens":["插件","vscode","配置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_2","text":"","text_tokens":[],"title":"中文语言包","title_tokens":["语言","语言包","中文"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#python","text":"","text_tokens":[],"title":"Python插件","title_tokens":["python","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#c","text":"","text_tokens":[],"title":"C++插件","title_tokens":["插件","c++"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#cmake","text":"","text_tokens":[],"title":"CMake插件","title_tokens":["cmake","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode-icons","text":"","text_tokens":[],"title":"vscode-icons","title_tokens":["icons","-","vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros","text":"","text_tokens":[],"title":"ROS插件","title_tokens":["插件","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#msg-language-support","text":"","text_tokens":[],"title":"Msg Language Support","title_tokens":["language"," ","support","msg"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#visual-studio-intellicode","text":"","text_tokens":[],"title":"Visual Studio IntelliCode","title_tokens":["studio"," ","visual","intellicode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#urdf","text":"","text_tokens":[],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#markdown-all-in-one","text":"VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["支持","。","插件","搜索","也","出","作为","个人","以上","只","，","配置","喜欢","网上","大家","在","开发","推荐","自己","可以","众多","最","vscode","环境","的"],"title":"Markdown All in One","title_tokens":["all","markdown"," ","one","in"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/","text":"DDS Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。 通信模型 DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。 DDS DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。 什么是DDS 好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是 Data Distribution Service ，也就是 数据分发服务 ，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。 DDS在ROS2中的应用 DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。 质量服务策略QoS DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是 Domain ，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为 数据提供者和接收者之间的合约 。 具体会有哪些策略？比如： DEADLINE 策略，表示通信数据必须要在每次截止时间内完成一次通信； HISTORY 策略，表示针对历史数据的一个缓存大小； RELIABILITY 策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式； DURABILITY 策略，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。 案例一：在命令行中配置DDS 我们先来试一试在命令行中配置DDS的参数。 启动第一个终端，我们使用best_effort创建一个发布者节点，循环发布任意数据，在另外一个终端中，如果我们使用reliable模型订阅同一话题，无法实现数据通信，如果修改为同样的best_effort，才能实现数据传输。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort 如何去查看ROS2系统中每一个发布者或者订阅者的QoS策略呢，在topic命令后边跟一个\"--verbose\"参数就行了。 $ ros2 topic info /chatter --verbose 案例二：DDS编程示例 接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。 运行效果 启动两个终端，分别运行发布者和订阅者节点： $ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub 可以看到两个终端中的通信效果如下，和之前貌似并没有太大区别。 看效果确实差不多，不过底层通信机理上可是有所不同的。 发布者代码解析 我们看下在代码中，如果加入QoS的配置。 learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , }, 订阅者代码解析 订阅者中的QoS配置和发布者类似。 learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], }, DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们主要带领大家认识DDS，更多使用方法和相关内容，大家也可以参考下边的链接进行学习。 参考链接 https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["服务","受到","coding","合适","chatter","很多","结构","广泛","高效","资源","同一","强制","video","上","完整性","介绍","按照","接收","字符","env","接口","分发","，","包含","数据通信","等待","变化","不用","差别","来看","红色","最为","冰山一角","焕然一新","就","已经","神经网","发布者","publisher","讲","瓶颈","空间","交换","一","主讲","关系","int32","8","42","居","qoshistorypolicy","借助","一起","增多","这个","—","没","效果","rmw","专门","参数","驾驶","corba","全局","提","尝试","成为","将","肯定","vendors","关心","每","提供","一下","功能","rclpy","点","/","非常复杂","四种","通信","行业","驱动","但","和","试一试","ros2","reliability","表示","console","on","学习","字符串","核心","databus","www","还有","过去","profile","二","全称","第一","id","出现","保障","args","由","先","ros","版本","视频","行为","集中","应用","高通","国防","只是","日志","把","一个","太多","情况","时","std",":","看到","加入","类型","bv12z4y167w2","方式","接收者","垂直","可信赖","org","授权","高速","到","消息","决策","图","能源","同一个","运行","with","架构","架构图","无论如何","顺利","看下","比如","subscription","effort","创建","名","主讲人","可见","通路","看","地址","而言","下来","我们","保证","做","timer","msg","好","一次","优化","articles","语言","说明","一样","指定","靠","对象","作者","只有","示例","哪些","}","有所","--","集中处理","multiple","标准","遥控器","绑定","父类","这里","至关","第三","回忆","便于","点对点","处理","并","互相","成立","尽力","区别","尽量","航空","效率","升级","默认","服务器","黑客","也","库","占用","那该","到底","体","\\","会","super","解决","两个","填充","原则","!","输出","之间","python","信赖","服务端","给","程序","msgs","与","完成","omg","有","啦",".","node","shutdown","多","重要","放在","docs","方法","(","等","循环","下边","来到","不变","ros1","感兴趣","纠结","编写","开源","destroy","维护","丰富","一步","广泛应用","链接","所以","解析","这样","此时","规模","可","大量","上边","信息","存在","大","所有人","历史数据","uml","完整","进入","单独","时间","1","来",")","选项","遥控","应该","角色","特性","感知","logger","代码","关闭","“","相关","用户","强调","跟","感兴","service","learning","专利","生变","可以","本身","我","类似","建设","地","四大","当然","分组","topic","为例","history","选择","先进","尽可","历史","根据","callback","过","网络","退出","华为","主要","*","？","不是","-","认识","更加","所","树莓","同样","html","》","数据通","qos","spin","周期","价值","其实","直接","$","打开","自己","__","humble","具体地址","能够","基本","guides","一旦","部分","对","world","机理","任意","你","%","电脑","第三种","distribution","由于","py","多个","兼容性问题","当于","当","数以千计","相当于","啥意思","reliable","理解","第四种","无法","厂商","进行","s","不过","上层","知道","进一步","案例","后","大小","不多","to","可信","分布","办法","广播","guyuehome","无人","echo","古月","能响","而且","第一个","。","subscribernode","之前","很","sysml","bilibili","样","程度","keep","像","预测","提高","[","一定","python3","具体","1989","模块","可能","初始化","节点","定时器","string","发生变化","一新","内容","综合","列出","应用程序","流畅性","异常","这种","后边","定时","建模","频繁","美国","单位","新","#","入个","listener","通过","接下","pub","concepts","避免","about","年","针对","接口标准","销毁","派","据传","入门","i","这么","必须","设计","海军","统一","info","如何","符合","之上","构图","就行了","中间件","如下","收到","com","作为","'","门","]","\"","管理","速度","双方","一条"," ","真实","{","领域","2004","现在","秒","真正","各个","企业","转移","那个","连接","软件","数据传输","qosprofile","数据","得","分布式","提供者","”","处于","dds","刚才","每条","_","几种","实现","这些","环境","的","神经","位置","一种","另外","要求","蓝色","有点","初始","指令","连接数","例子","太","或者","系统","兴趣","中间","传送","过程","满足","verbose","如果","21","模型","底层","不","执行","大家","布式","在于","其他","技术","可是","def","有所不同","depth","在","兼容性","大大","找到","命令行","working","组成","usr","这","性","中","第四","文件","帧","design","哪","需求","能力","第二","影响","合约","就行","heard","确实","商业","、","编译","下","对应","不管","更","缓存","才能","黑入","不好","客户","重大","许多","麻烦","明显","服务质量","入口","none","框架","性能","策略","一些","想","它","entry","配置","了","一角","他们","publish","向","复杂","行","交通","class","传输","航拍","增长","尽可能","运动","图像","https","者","听说","middleware","都","deadline","中心","更好","讲到","神经网络","无论","焕然","=","以","宗旨","忽略","en","data","内","init","hello","三种","质量","流畅","小组","务器","控制","无人机","什么","utf","相当","没有","至关重要","定位","技术标准","时候","接下来","import","domain","主","冰山","于","还是","拿","半天","终于","人机","durability","任","非常","截止","欢迎","建立","既然","呢","容性","为了","implementations","建模语言","的话","不感兴趣","《","为","差不多","使用","提示","有些","how","4g","前边","工业","函数","无用","让",",","机器人","修改","points","场景","一套","helloworld","run","best","通道","二种","sub","旋转","发送","有人","快速","模式","开发","设置","scripts","要","broker","导致","请求","加密","该用","舰船","命令","所有","之","订阅","生态","优势","众多","；","分别","setup","第二种","用","from","适应","实时","晚","那","客户端","：","类","带","create","通信模型","去","个人","回调","兼容","提到","publishernode","只","边","需要","发布","定义","参考","复用","吃","话题","组织","最早","5g","不同","各种","启动","成","发送给","bin","main","处理速度","处","保证数据","并行","每次","get","课程","自动","qosreliabilitypolicy","查看","动作","带领","different","name","发生","终端","@","运转","每个","火锅","送给","是","就是","貌似","self","通常","（","整个","大大提高","）","并且","组成部分","说了半天","选用","机器","丢失","供者","某一","0.5","正常","医疗","问题","使命","或","常用","但是","意思","灵活","好吃","包","第一种","编程","像是","它们","课","掉","延时","last","publishing","举"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds","text":"Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。","text_tokens":["课程","。","服务","神经网络","好","《","前边","动作","通信","重大","当于","靠","系统","网络","机器人","ros2","的","相当于","、","学习","具体","过程","来","是"," ","它","，","hello","21","变化","底层","》","他们","相当","大家","最为","话题","机器","主讲人","在","完成","讲","神经网","主讲","ros","中","神经","—","终于","来到","dds","入门","欢迎","我们","我","都","古月","实现","讲到"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_1","text":"DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。","text_tokens":["。","服务","受到","也","很","之前","很多","程度","以","忽略","上","一定","会","具体","可能","节点","，","包含","解决","三种","务器","发生变化","变化","不用","列出","异常","没有","这种","服务端","就","与","瓶颈","多","关系","拿","增多","这个","针对","非常","ros1","建立","感兴趣","必须","成为","关心","不感兴趣","一步","为","提供","使用","有些","这样","四种","规模","通信","但","和","收到","所有人","作为","速度","单独","双方","一条"," ","应该","核心","角色","databus","通道","真正","二种","旋转","有人","连接","软件","第一","数据","由","broker","导致","请求","感兴","集中","所有","之","dds","生变","订阅","可以","类似","每条","一个","太多","优势","时","几种","实现","的","一种","第二种","有点","先进","客户端","连接数","系统","通信模型","兴趣","到","消息","传送","架构","只","如果","需要","更加","所","发布","模型","在于","其他","吃","在","其实","找到","可见","通路","自己","这","中","地址","各种","第四","具体地址","能够","处理速度","我们","处","一旦","影响","第二","并行","每次","更","优化","第三种","客户","许多","麻烦","明显","当","框架","发生","性能","运转","每个","火锅","是","就是","它","想","集中处理","了","整个","第四种","无法","这里","第三","并且","进行","点对点","不过","知道","进一步","处理","行","正常","并","问题","常用","增长","但是","好吃","第一种","像是","效率","广播","都","服务器","中心","能响","而且"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_1","text":"DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。","text_tokens":["。","自动","广泛应用","好","之前","很","很多","方式","通信","广泛","存在","和","预测","高速","ros2","会","决策","能源","模块","不是"," ","满足","，","通常","领域","需要","感知","比如","定位","频繁","新","已经","在","数据","交通","医疗","并","交换","借助","应用","等","它们","航空","dds","国防","非常","需求","驾驶","可以","都","一个","地","这些","的"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_2","text":"好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是 Data Distribution Service ，也就是 数据分发服务 ，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。","text_tokens":["服务","。","也","sysml","到底","以","高效","data","强制","介绍","1989","可能","分发","，","解决","质量","建模","技术标准","美国","omg","已经","啦","于","等","半天","年","专门","corba","呢","容性","提","成为","设计","海军","统一","建模语言","维护","丰富","为","提供","一下","/","可","大量","通信","行业","和","中间件","uml","完整","管理","一套","来"," ","真实","2004","还有","现在","软件","全称","数据","保障","开发","由","强调","分布式","service","应用","舰船","dds","订阅","可以","一个","地","当然","环境","的","实时","过","垂直","系统","网络","中间","兼容","？","满足","发布","比如","大家","布式","技术","组织","价值","兼容性","最早","中","各种","我们","需求","做","、","好","语言","distribution","服务质量","兼容性问题","对象","数以千计","策略","啥意思","是","就是","它","标准","这里","进行","说了半天","复杂","问题","使命","意思","灵活","成立","课","分布","听说","升级","中心"],"title":"什么是DDS","title_tokens":["什么","dds","是"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#ddsros2","text":"DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。","text_tokens":["。","也","无论","很多","像","宗旨","上边","提高","上","按照","会","具体","模块","可能","接口","，","原则","差别","综合","红色","至关重要","给","就","有","多","重要","还是","放在","这个","没","接口标准","下边","不变","任","这么","建立","既然","纠结","呢","为了","容性","设计","肯定","开源","统一","如何","每","功能","使用","所以","此时","4g","可","符合","工业","之上","通信","构图","但","和","中间件","函数","驱动","让","进入","机器人","ros2","场景","时间","来"," ","企业","转移","代码","那个","软件","用户","开发","得","要","ros","版本","分布式","该用","应用","高通","所有","专利","dds","刚才","可以","生态","把","一个","建设","四大","实现","位置","的","加入","一种","蓝色","用","选择","那","根据","系统","个人","华为","授权","中间","兼容","过程","提到","？","架构","边","架构图","如果","无论如何","需要","比如","不","复用","大家","布式","技术","其他","组织","在","兼容性","大大","5g","组成","自己","性","中","而言","能够","基本","哪","我们","能力","部分","影响","保证","对","就行","商业","、","对应","不管","你","更","由于","一样","多个","性能","是","就是","想","标准","了","他们","大大提高","这里","至关","厂商","组成部分","选用","机器","上层","某一","这样","问题","或","编程","尽量","分布","middleware","都"],"title":"DDS在ROS2中的应用","title_tokens":["中","应用","ros2","dds","在","的"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#qos","text":"DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是 Domain ，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为 数据提供者和接收者之间的合约 。 具体会有哪些策略？比如： DEADLINE 策略，表示通信数据必须要在每次截止时间内完成一次通信； HISTORY 策略，表示针对历史数据的一个缓存大小； RELIABILITY 策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式； DURABILITY 策略，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。","text_tokens":["。","服务","黑客","之前","也","合适","焕然","占用","样","那该","结构","资源","同一","体","内","完整性","接收","一定","会","具体","可能","节点","，","质量","流畅","小组","控制","数据通信","无人机","一新","来看","应用程序","流畅性","这种","之间","信赖","没有","时候","焕然一新","程序","新","给","domain","完成","有","入个","空间","啦","多","重要","关系","通过","一起","这个","避免","人机","针对","durability","派","截止","这么","参数","全局","必须","呢","将","如何","每","的话","为","提供","功能","使用","这样","此时","通信","无用","和","历史数据","让","完整","门","机器人","reliability","场景","表示","时间","ros2"," ","遥控","best","过去","特性","各个","发送","那个","快速","id","模式","出现","数据","要","先","ros","导致","视频","行为","加密","提供者","应用","举","所有","命令","处于","dds","可以","_","类似","一个","地","情况","；","分组","实现","这些","加入","的","要求","另外","一种","用","众多","history","选择","适应","晚","指令","尽可","：","历史","例子","接收者","根据","带","通信模型","系统","网络","可信赖","图","同一个","过程","？","满足","如果","需要","所","树莓","模型","比如","顺利","数据通","定义","不","qos","大家","effort","在","直接","不同","中","成","发送给","基本","帧","我们","需求","合约","保证数据","保证","对","每次","下","一次","缓存","才能","好","黑入","电脑","不好","客户","指定","只有","哪些","策略","送给","reliable","是","就是","一些","理解","配置","了","遥控器","绑定","回忆","向","进行","便于","机器","丢失","供者","传输","互相","航拍","但是","大小","尽可能","尽力","运动","尽量","可信","图像","掉","办法","延时","都","无人","默认","deadline","更好"],"title":"质量服务策略QoS","title_tokens":["策略","质量","服务","qos"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_3","text":"我们先来试一试在命令行中配置DDS的参数。 启动第一个终端，我们使用best_effort创建一个发布者节点，循环发布任意数据，在另外一个终端中，如果我们使用reliable模型订阅同一话题，无法实现数据通信，如果修改为同样的best_effort，才能实现数据传输。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort 如何去查看ROS2系统中每一个发布者或者订阅者的QoS策略呢，在topic命令后边跟一个\"--verbose\"参数就行了。 $ ros2 topic info /chatter --verbose","text_tokens":["第一个","。","chatter","同一","data","节点","，","数据通信","后边","msgs","发布者","int32","42","pub","循环","据传","参数","呢","info","如何","每","为","使用","/","通信","就行了","试一试","\"","修改","ros2","reliability","来"," ","best","第一","数据传输","数据","先","跟","命令","dds","订阅","_","一个","std",":","实现","或者","的","另外","topic","去","系统","verbose","如果","-","同样","发布","模型","数据通","qos","effort","创建","话题","在","$","命令行","中","启动","我们","任意","msg","才能","查看","终端","策略","reliable","--","配置","无法","传输","者","echo"],"title":"案例一：在命令行中配置DDS","title_tokens":["中","命令","dds","：","在","案例","一","命令行","配置"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_4","text":"接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。","text_tokens":["。","为例","之前","通信","以"," ","，","hello","配置","代码","接下来","话题","在","接下","中","下来","dds","我们","尝试","world"],"title":"案例二：DDS编程示例","title_tokens":["示例","编程","dds","：","案例","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_2","text":"启动两个终端，分别运行发布者和订阅者节点： $ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub 可以看到两个终端中的通信效果如下，和之前貌似并没有太大区别。 看效果确实差不多，不过底层通信机理上可是有所不同的。","text_tokens":["。","差不多","之前","：","通信","太","和","如下","大","终端","上","ros2","运行","有所","helloworld"," ","run","节点","，","貌似","两个","发布","底层","sub","qos","没有","可是","有所不同","不过","发布者","$","并","机理","看","不同","不多","pub","中","启动","效果","区别","learning","订阅","可以","者","_","看到","确实","分别","的"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_3","text":"我们看下在代码中，如果加入QoS的配置。 learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , },","text_tokens":["。","coding","库","chatter","=","keep","data","init","[","python3","字符","env","super","接口","初始化","节点","，","定时器","hello","string","填充","等待","原则","utf","!","定时","输出","python","单位","import","程序","msgs","#","publisher","发布者","已经","完成",".","node","8","主","qoshistorypolicy","shutdown","居","(","pub","循环","销毁","编写","destroy","info","为","提示","rclpy","功能","点","/","信息","函数","com","'","如下","让",",","\"","points","ros2","reliability","1","console",")","字符串","helloworld"," ","选项","best","{","www","profile","秒","logger","代码","关闭","“","qosprofile","数据","设置","args","scripts","learning","”","日志","_","一个","类型","std",":","加入","的","setup","初始","from","history","：","类","create","callback","系统","回调","退出","消息","*","publishernode","如果","-","需要","看下","发布","执行","qos","effort","def","创建","名","spin","话题","depth","在","周期","打开","usr","__","中","文件","bin","main","我们","world","timer","msg","、","get","编译","qosreliabilitypolicy","%","说明","py","入口","name","作者","对象","none","示例","}","@","reliable","self","entry","（","配置","）","父类","publish","进行","s","知道","0.5","后","class","并","包","last","guyuehome","publishing","古月"],"title":"发布者代码解析","title_tokens":["解析","代码","发布者","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_4","text":"订阅者中的QoS配置和发布者类似。 learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], }, DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们主要带领大家认识DDS，更多使用方法和相关内容，大家也可以参考下边的链接进行学习。","text_tokens":["。","coding","subscribernode","也","库","chatter","=","keep","data","init","\\","[","python3","env","super","接口","初始化","节点","，","hello","string","内容","等待","原则","utf","!","输出","python","冰山一角","程序","import","msgs","#","主","发布者","完成","shutdown",".","node","8","冰山","qoshistorypolicy","多","居","方法","listener","(","pub","循环","下边","销毁","非常","i","编写","destroy","info","提示","rclpy","功能","点","使用","链接","/","非常复杂","信息","函数","和","com","收到","'","如下","让",",","]","\"","points","ros2","reliability","1","console","学习",")","helloworld"," ","选项","best","{","www","profile","logger","sub","关闭","代码","“","相关","qosprofile","数据","设置","args","scripts","learning","”","dds","订阅","只是","可以","本身","日志","类似","_","一个","std",":","类型","加入","的","setup","初始","from","history","：","类","create","callback","系统","回调","退出","消息","主要","*","-","认识","需要","发布","subscription","定义","执行","参考","qos","大家","effort","def","创建","名","spin","话题","depth","打开","usr","__","中","文件","bin","main","我们","对","world","heard","get","msg","、","编译","更","qosreliabilitypolicy","%","说明","py","带领","入口","name","作者","对象","none","示例","}","@","reliable","是","self","entry","（","标准","配置","一角","）","父类","进行","s","复杂","知道","处理","后","class","并","包","者","guyuehome","last","古月"],"title":"订阅者代码解析","title_tokens":["者","解析","代码","订阅"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_5","text":"https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["articles","bv12z4y167w2","/","how","bilibili","com","en","different","org","video","ros2","with","on"," ","multiple","-","www","html",".","docs","working","ros","humble","concepts","about","to","rmw","design","dds","https","guides","middleware","_","implementations",":","vendors"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/","text":"工作空间：开发过程的大本营 大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是 工程 。 工作空间是什么 类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做 工作空间 。 所以工作空间是一个存放项目开发相关文件的文件夹，也是 开发过程中存放所有资料的大本营 。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。 创建工作空间 了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 自动安装依赖 我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init $ rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y 编译工作空间 依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。 设置环境变量 编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["工程","。","y","之前","也","大部","mkdir","自动生产","结构","生效","点击",">","en","报错","init","还","一点","概念","会","python3","环境变","看到","rosdistro","结果","一部","，","log","两个","内容","什么","得到","creator","否则","人为","接下来","程序","新","就","source","rosdepc","完成","有","#","空间",".","啦","docs","关系","至此","3","工具栏","子目录","中会","接下","等","这个","creating","空间结构","针对","错误","生产","i","参数","完全","为了","sudo","编写","子","2","eclipse","叫做","功能","四个","使用","链接","里边","所以","/","此时","信息","pip3","qt","gitee","和","存在","如下","com","产生","了解","让","根目录","机器人","管理","教程","ros2","1","\"","如图所示","学习","workspace","local","选项"," ","想要","应该","并列","接触","可执行文件","代码","src","“","很少","多少","相关","出现","开发","编写程序","设置","要","ros","clone","强调","b","某些","安装","build","命令","所有","”","行文","仅","可以","工作","类似","_","一个","日志","未来","时","；","情况","这些","开始","环境","的","或者","另外",":","setup","用","from","ws","变量","缺少","下载","：","tutorials","apt","过","系统","大部分","org","放置","dev","到","中间","以上","运行","资料","过程","警告","不是","环境变量","如果","项目","典型","需要","-","21","html","比如","某","存放","定义","执行","手动","参考","大家","总体","脚本","大本营","创建","一部分","~","在","$","找到","以及","b2","install","git","这","自己","bashrc","中","各种","humble","文件","下来","能够","件夹","唯一","我们","部分","后续","update","a","从","、","编译","自动","名称","保存","社区","大本","用于","p","一样","子目","来讲","多个","里","path","工具","当","文件夹","终端","rosdep","pip","依赖","是","就是","一些","允许","--","操作","数量","集成","了","配置","cd","不会","这里","并且","进行","机器","visual","均","所示","绝大部分","后","并","w","包","sh","目录","像是","studio","成功","https","..","colcon","当前","guyuehome","都","echo","任何","绝大"],"title":"工作空间","title_tokens":["空间","工作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_1","text":"大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是 工程 。","text_tokens":["工程","。","eclipse","叫做","之前","里边","此时","qt","和","过","点击","工具","当","产生","文件夹","放置","会","、","学习","选项"," ","想要","是","，","应该","内容","集成","接触","比如","creator","大家","“","创建","程序","新","就","在","开发","有","visual","编写程序","以及","某些","工具栏","中","等","这个","文件","所有","”","studio","件夹","我们","工作","后续","都","一个","编写","这些","环境","的"],"title":"工作空间：开发过程的大本营","title_tokens":["大本营","过程","大本","：","开发","空间","工作","的"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_2","text":"类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做 工作空间 。 所以工作空间是一个存放项目开发相关文件的文件夹，也是 开发过程中存放所有资料的大本营 。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。","text_tokens":["工程","。","也","大部","结构","一点","会","结果","一部","，","log","两个","得到","人为","就","新","有","空间","关系","3","子目录","等","这个","空间结构","针对","错误","参数","完全","编写","子","2","叫做","四个","功能","里边","所以","信息","和","存在","产生","根目录","机器人","管理","1","如图所示"," ","并列","可执行文件","代码","src","很少","相关","开发","要","ros","强调","b","某些","安装","build","所有","行文","可以","工作","类似","_","一个","日志","未来","；","时","情况","或者","开始","的","环境","另外","用","ws","：","系统","大部分","放置","dev","到","中间","以上","运行","资料","过程","警告","不是","项目","典型","需要","某","存放","比如","定义","执行","总体","脚本","大本营","一部分","创建","在","b2","install","这","自己","中","各种","文件","件夹","唯一","我们","部分","a","、","编译","名称","保存","大本","用于","一样","子目","来讲","多个","里","文件夹","是","就是","一些","允许","操作","数量","集成","了","这里","进行","机器","所示","绝大部分","后","并","w","目录","像是","成功","都","绝大"],"title":"工作空间是什么","title_tokens":["空间","是","工作","什么"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_3","text":"了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git","text_tokens":["使用","mkdir","ws","p","/","下载","：","gitee","tutorials","和","如下","com","了解","dev","教程","概念","ros2"," ","结果","，","-","了","21","代码","src","cd","并且","接下来","创建","~","空间","$",".","clone","git","接下","命令","下来","https","我们","可以","工作","_","guyuehome","一个",":","的"],"title":"创建工作空间","title_tokens":["空间","工作","创建"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_4","text":"我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init $ rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y","text_tokens":["y","自动","update","社区","也","使用","from","pip3","下载","：","apt","path","工具","init","python3","会","rosdep","pip","依赖","rosdistro","一些"," ","--","，","-","手动","代码","cd","src","多少","rosdepc","有","$","install","安装","中","各种","humble","..","i","我们","可以","都","一个","sudo","从","的"],"title":"自动安装依赖","title_tokens":["安装","依赖","自动"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_5","text":"依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。","text_tokens":["。","自动","使用","ws","缺少","/","：","自动生产","apt","如下","报错","文件夹","dev","python3","编译","、","依赖","过程"," ","，","如果","应该","-","log","了","否则","代码","不会","cd","~","就","出现","完成","有","在","空间","啦","后","$","ros","install","中会","安装","中","build","命令","文件","错误","成功","colcon","生产","件夹","可以","工作","_","sudo","任何","看到","或者","的"],"title":"编译工作空间","title_tokens":["空间","工作","编译"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_6","text":"编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。","text_tokens":["。","setup","功能","ws","变量","/","：","生效","和",">","系统","让","终端","dev","还","\"","编译","、","环境变","local","环境变量"," ","，","需要","配置","了","可执行文件","执行","~","创建","source","就","#","在","均","完成","$","找到","后","设置",".","空间","至此","install","bashrc","包","sh","文件","所有","能够","成功","行文","我们","仅","当前","工作","为了","_","echo","环境","的"],"title":"设置环境变量","title_tokens":["环境变","变量","环境变量","设置","环境"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_7","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["humble","workspace","a","/","https"," ","html","tutorials",".","docs","-","ros","en",":","org","creating"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/","text":"功能包：开发过程的大本营 在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做 功能包 。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。 创建功能包 如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python 编译功能包 在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash 功能包的结构 功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。 C++功能包 首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。 Python功能包 C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["。","也","是不是","first","很多","结构","type","规则",">","en","提高","豆子","介绍","会","环境变","可能","放到","，","包含","两个","内容","控制","出来","分享","绿豆","声明","原理","很难","红豆","之间","别人","python","除此","时候","给","就","之后","找","#","完成","有","source","空间",".","docs","放在","多","黄豆","关系","重要","还是","拿","方法","名字","包并","creating","一起","等","这个","手上","呢","描述","必须","举个","该","将","编写","如何","叫做","功能","使用","c++","链接","里边","所以","/","语法","拿出","移动","降低","解析","信息","但","和","存在","如下","教程","机器人","points","ros2","workspace","表示","类型","机制","来","local"," ","首先","版权","还有","导航","感知","混合","三个","可执行文件","代码","src","“","软件","发现","相关","新创","开发","得","分析","设置","要","视觉","是否","ros","版本","跟","某些","而是","头疼","build","新创建","命令","learning","所有","c","之外","刚才","”","行文","可以","工作","_","把","一个","拆分","时","看到","当然","这些","假设","的","；","包是","或者","分别","环境","setup","用","ws","指令","变量","只想","下载","：","那","your","tutorials","例子","create","org","dev","到","主要","运行","过程","？","不是","package","只","环境变量","xml","如果","之一","-","需要","html","比如","不","执行","复用","是否是","大家","cmakerlists","参考","大本营","创建","~","编译成","率","bash","在","其中","$","某种","install","不同","看","这","中","各种","继续","humble","除此之外","文件","自主","件夹","我们","txt","后续","a","、","包中","编译","下","你","好","名称","ament","社区","才能","<","说明","大本","语言","py","一样","包该","入口","型","里","必然","name","文件夹","当","袋子","么","终端","每个","依赖","是","想","一颗","就是","--","很快","一些","entry","数量","配置","了","他们","立刻","cd","这里","五颜六色","机器","cmake","判断","讲解","颜色","pkg","并","划分","起来","新建","正常","cmakelists","但是","普通","包","编程","尽量",":","耦合","colcon","https","程序","越","译成","都","源码"],"title":"功能包","title_tokens":["包","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_1","text":"在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做 功能包 。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。","text_tokens":["。","也","是不是","很多","提高","豆子","会","可能","放到","，","控制","出来","分享","绿豆","原理","很难","红豆","之间","别人","时候","给","就","找","有","放在","多","黄豆","关系","重要","拿","方法","一起","等","这个","手上","举个","如何","叫做","功能","使用","所以","拿出","移动","降低","教程","机器人","ros2","机制"," ","导航","感知","混合","三个","代码","软件","发现","得","视觉","ros","某些","而是","头疼","可以","把","一个","拆分","时","看到","当然","假设","这些","的","；","用","只想","下载","例子","到","不是","只","如果","之一","需要","比如","不","复用","大家","率","在","其中","某种","不同","中","文件","自主","件夹","我们","、","包中","你","名称","社区","说明","包该","里","文件夹","当","袋子","么","每个","是","想","一颗","就是","很快","数量","了","他们","立刻","五颜六色","机器","颜色","并","划分","起来","但是","普通","包","尽量","耦合","越","都","源码"],"title":"功能包：开发过程的大本营","title_tokens":["包","功能","大本营","过程","大本","：","开发","的"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_2","text":"如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python","text_tokens":["。","功能","使用","c++","指令","<","ament","/","那","：","ws","create","type","和",">","name","终端","dev","ros2","的","表示","？"," ","--","package","，","如果","-","比如","cd","python","src","这里","~","创建","就","相关","cmake","#","在","新创","$","pkg","还是","新建","名字","版本","跟","中","包","这个","build","新创建","命令","learning","c","我们","可以","呢","_","一个","；","包是","或者","分别","如何"],"title":"创建功能包","title_tokens":["包","功能","创建"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_3","text":"在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash","text_tokens":["包中","好","setup","功能","才能","ws","变量","/","：","和","dev","的","运行","环境变","local","环境变量"," ","，","需要","配置","代码","cd","src","~","创建","之后","source","#","在","完成","bash","$","空间",".","正常","install","包","继续","build","所有","colcon","我们","可以","工作","_","编写","环境","编译"],"title":"编译功能包","title_tokens":["包","功能","编译"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_4","text":"功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。","text_tokens":["下","。","功能","那","结构","文件夹","的","来","？","不是","，","两个","是否是","创建","判断","分析","新创","是否","包并","普通","包","新创建","文件","件夹","刚才","我们","呢","一个","如何"],"title":"功能包的结构","title_tokens":["包","结构","功能","的"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#c","text":"首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。","text_tokens":["下","。","功能","c++","才能","使用","所以","语法","：","和","存在","如下","规则","必然","主要","运行","编译","依赖"," ","package","xml","，","包含","是","首先","两个","内容","版权","需要","声明","代码","cmakerlists","该","cmake","在","其中",".","设置","要","cmakelists","看","如何","包","各种","中","文件","txt","描述","必须","类型","的"],"title":"C++功能包","title_tokens":["包","功能","c++"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#python","text":"C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。","text_tokens":["。","setup","功能","c++","也","使用","语言","所以","解析","里边","：","py","一样","信息","入口","但","型","和","points","介绍","的","主要","会","依赖","是","一些"," ","，","package","xml","包含","entry","需要","两个","内容","版权","还有","配置","可执行文件","不","执行","声明","python","除此","“","大家","编译成","程序","给","在","有","讲解",".","版本","不同","但是","这","如何","包","各种","中","除此之外","文件","编程","”","之外","行文","我们","译成","描述","_","后续","源码","将","编译"],"title":"Python功能包","title_tokens":["python","包","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_5","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["first","/","your","tutorials","en","org","workspace","ros2"," ","package","-","html",".","docs","ros","creating","humble","https","a",":"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/","text":"节点 机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。 通信模型 完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。 案例一：Hello World节点（面向过程） ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。 运行效果 大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ], 创建节点流程 代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。 案例二：Hello World节点（面向对象） 所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。 运行效果 接下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ], 创建节点流程 所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。 案例三：物体识别节点 没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。 运行效果 在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 Attention 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。 代码解析 在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ], 案例四：机器视觉识别节点 用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。 运行效果 启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 Attention 如果是在虚拟机中操作，需要进行以下设置： 1. 把虚拟机设置为兼容USB3.1； 2. 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。 代码解析 相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ], 节点命令行操作 节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息 思考题 现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["y","x","coding","上去","宽","是不是","结构","255","上","面向对象","介绍","for","字符","env","虚拟","接口","，","pyhton","ruby","等待","得到","来看","不用","变化","勾勒","imshow","红色","最为","摄像头","就","面积","一","8","难","监控","名字","居","usb3.1","一起","这个","去除","—","效果","没","可视化","approx","参数","成为","将","每","对于","2","四个","功能","提供","rclpy","点","一下","/","上角","通信","驱动","但","和","更多","ros2","console","表示","机制","学习","字符串","心里","被","像素","www","还有","二","模拟","物理","例程","依然","出现","编写程序","保障","搭载","推荐","args","移植","先","ros","attention","绿点","安装","只不过","helloworldnode","sleep","只是","相机","日志","把","一个","看到","时",":","加入","ws","位于","回到","方式","方便","呀","mask","read","org","到","运行","前","cv2","shape","获取","后勤","会弹","上限","比如","某","最大","改成","多种","面向","创建","吧","if","h","看","想到","就让","而言","下来","简单","我们","a","一节","至","做","好","名称","chain","<","语言","说明","动态","ok","一样","作者","对象","孤立","home","示例","总体而言","父类","身体","各不相同","这里","continue","处理","并","互相","读取","成功","一项","as","云端","后勤部","也","再","轮子","库","int","编码方式","到底","imread","destroyallwindows",">","retr","部门","处理过程","会","super","结果","两个","!","输出","之间","python","人为","给","程序","状态","完成","有","list","shutdown",".","node","步骤","细胞","放在","多","重要","啦","0","方法","范围","(","180","等","识别","循环","red","纠结","90","编写","destroy","休眠","webcam","链接","着急","所以","摇杆","这样","信息","解析","可","xy","lower","完整","image","时间","1","来",")","选项","好像","溜溜","应该","logger","每一项","代码","关闭","“","发现","color","分析","更多要","腿","厂房","坐标","是否","b","硬件","移植性","图片","learning","实际","行文","改变","hsv","可以","这座","计算机","类似","docs","未来","当然","像头","为例","窗口","java","circle","tutorials","根据","过","任务","退出","操作系统","*","？","不是","左上","-","认识","更加","html","网上","这份","总体","spin","周期","$","数值","图像处理","打开","__","humble","唯一","world","及","保持联系","你","出","电脑","不能","外界","py","一线","具备","当","注意","理解","二值化","前后左右","过来","太小","绿色","乃至","列表","负责","进行","boundingrect","理过","不过","知道","相同","案例","后","路径","颜色","看上","drawcontours","分布","看上去","自然","编码","guyuehome","古月","。","可移植","之前","很","虽然","object","upper","像","可读","下限","还","[","概念","python3","高","眼睛","具体","显示","模块","可能","物体","初始化","节点","比喻","综合","in","这种","除此","取","阈值","整体","#","点画","一张","通过","接下","detect","nodes","重点","保持","摄像","销毁","videocapture","同理","角度","该","设计","以下","info","如何","叫做","contours","c++","移动","岂","ret","com","如下","'","收到","调试","]","此处","\"","苹果","速度","这款","hcx"," ","进程","还会","{","三","现在","所在","128","连接","骡子","得","计算","视觉","cvtcolor","分布式","共同","”","之外","做到","刚才","工作","_","经常","生成","实现","这些","环境","的","或者","另外","jpg","一种","array","初始","总结","指令","然后","稍微","重新","apt","太","转换","系统","understanding","中间","综合体","过程","numpy","如果","一台","中将","桌子","模型","21","知其然","一帧","不","执行","while","大家","布式","def","np","用到","在","opencv","找到","命令行","某种","组成","usr","这","疑惑","中","文件","bgr","编译","、","下","更","编程语言","入口","里","none","框架","cnt","一些","它","entry","配置","了","他们","hierarchy","可视","复杂","class","w","运动","图像","没错","https","都","中心","查询","更好","合理","findcontours","推动","=","以","相比","en","关注","init","一点","inrange","思考","hello","控制","出来","左上角","utf","模块化","时候","接下来","import","50","主","而已","请","还是","设备","合体","轮廓","思考题","既然","呢","更为","sudo","的话","为","使用","独立","函数","bgr2hsv","噪声","让",",","time","工人","机器人","points","修改","为止","helloworld","想要","run","远程","检测","可执行文件","流程","马","src","发送","开发","框会","设置","scripts","要","虚拟机","不要","某些","+","命令","左右","waitkey","众多","工厂","熟悉","；","分别","开始","setup","用","from","实时","那","：","类","即可","通信模型","去","dev","来源","载体","兼容","框架图","需要","发布","参考","可移植性","可读性","其中","调整","cap","考题","install","不同","true","各种","图像识别","启动","除此之外","联系","bin","main","中心点","从","get","课程","150","命名","查看","所以然","地方","算机","终端","发生","name","apple","@","知其所以然","每个","关于","是","就是","self","操作","（","先拉","前后","却","）","5","并且","机器","打印","0.5","正常","起来","算是","问题","但是","后勤部门","常用","包","编程","四","看看","img","职责"],"title":"节点","title_tokens":["节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_1","text":"机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。","text_tokens":["。","功能","那","像","机器人","到","综合体","机制","是","一些"," ","，","就是","节点","了","综合","每一项","连接","“","给","就","取","机器","整体","在","细胞","ros","名字","通过","一起","中","各种","合体","”","我们","工作","众多","一个","一项","成为","这些","的"],"title":"节点","title_tokens":["节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_2","text":"完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。","text_tokens":["。","云端","推动","后勤部","也","虽然","轮子","到底","部门","上","还","眼睛","具体","可能","结果","节点","，","控制","ruby","比喻","得到","来看","除此","python","人为","时候","摄像头","程序","就","接下来","状态","整体","完成","有","放在","监控","细胞","多","通过","一起","这个","等","接下","—","摄像","参数","既然","角度","更为","该","设计","如何","每","叫做","功能","c++","提供","摇杆","这样","信息","移动","独立","但","和","让","完整","工人","机器人","速度","这款","来"," ","想要","还会","进程","还有","远程","可执行文件","连接","物理","“","保障","搭载","腿","厂房","计算","b","某些","分布式","硬件","共同","左右","之外","”","行文","可以","这座","计算机","工作","工厂","一个","看到","；","生成","这些","环境","像头","的","另外","或者","时","分别","实现","位于","那","：","java","根据","任务","系统","去","操作系统","到","运行","载体","不是","一台","获取","后勤","需要","认识","桌子","比如","某","不","执行","布式","在","找到","不同","组成","这","想到","中","除此之外","文件","下来","唯一","我们","a","从","做","编译","、","你","更","名称","命名","语言","外界","编程语言","地方","一线","里","算机","当","每个","是","就是","它","操作","配置","了","前后","却","他们","前后左右","身体","各不相同","乃至","机器","复杂","相同","并","算是","互相","后勤部门","运动","编程","分布","看看","自然","都","职责","查询"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world","text":"ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。","text_tokens":["。","功能","实现","终端","ros2","到","字符","来","字符串","是"," ","节点","，","就是","hello","需要","了","不","“","例程","最为","程序","打印","编写程序","复杂","先","并","中","循环","简单","”","我们","world","一个","从","当然","编写","开始","的"],"title":"案例一：Hello World节点（面向过程）","title_tokens":["面向","过程"," ","：","节点","案例","一","hello","（","world","）"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_3","text":"大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["课程","下","。","好","再","着急","也","所以","然后","所以然","终端","ros2","的","运行","字符","知其所以然","来","过程","helloworld","是","溜溜"," ","，","run","节点","hello","字符串","先拉","出来","知其然","马","代码","执行","大家","“","骡子","分析","在","打印","$","node","后","先","看","不要","通过","如何","这个","中","效果","循环","命令","learning","做到","”","成功","我们","可以","_","world","看到","实现","编译"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_4","text":"这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ],","text_tokens":["。","coding","库","=","init","[","python3","env","接口","初始化","节点","，","hello","控制","来看","utf","!","输出","python","程序","import","#","主","完成","shutdown",".","node","8","居","(","这个","循环","销毁","呢","编写","destroy","info","如何","休眠","功能","使用","rclpy","点","/","信息","函数","com","如下","'","让",",","time","]","\"","points","ros2","时间","console",")","helloworld"," ","选项","{","www","logger","代码","关闭","“","设置","args","scripts","是否","learning","”","sleep","日志","_",":","实现","加入","的","setup","初始","from","：","方式","类","系统","运行","*","过程","？","-","需要","发布","while","def","面向","创建","打开","usr","文件","bin","main","我们","world","get","编译","下","说明","py","ok","入口","none","作者","对象","示例","@","是","entry","配置","进行","知道","0.5","后","正常","并","包","guyuehome","古月"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_5","text":"代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。","text_tokens":["。","的话","对于","更","初始","一下","使用","总结","功能","c++","虽然","很","这样","：","函数","稍微","方式","过","系统","机器人","一点","会","具体","学习","过程","模块","接口","是"," ","节点","，","理解","想要","初始化","如果","应该","pyhton","做","不用","流程","代码","关闭","这种","大家","这里","模块化","发现","创建","用到","面向","就","出现","机器","有","复杂","先","重要","并","难","方法","一个","但是","中","编程","简单","做到","销毁","我们","纠结","可以","编码","经常","未来","实现","或者","的"],"title":"创建节点流程","title_tokens":["流程","节点","创建"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world_1","text":"所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。","text_tokens":["。","可移植","更","上去","使用","也","虽然","所以","这样","方式","方便","可读","和","具备","调试","对象","面向对象","ros2","会"," ","一些","，","更加","了","比如","代码","改成","大家","可移植性","面向","就","可读性","在","开发","推荐","复杂","移植","起来","但是","中","移植性","编程","看上","刚才","我们","看上去","可以","更好","的"],"title":"案例二：Hello World节点（面向对象）","title_tokens":["面向对象","面向"," ","：","节点","案例","hello","（","world","二","）","对象"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_6","text":"接下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["。","一下","：","终端","ros2","运行","字符","字符串","helloworld"," ","run","节点","，","hello","“","接下来","在","打印","$","调整","后","node","class","还是","接下","中","效果","循环","learning","下来","”","成功","可以","_","world","看到","的"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_7","text":"功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ],","text_tokens":["。","coding","虽然","库","=","结构","init","面向对象","[","python3","具体","env","super","接口","初始化","节点","，","hello","控制","等待","变化","utf","!","输出","python","程序","import","#","主","完成","shutdown",".","node","8","居","(","循环","销毁","编写","destroy","info","休眠","功能","一下","使用","rclpy","点","/","信息","函数","com","如下","'","让",",","time","]","\"","points","ros2","时间","console",")","helloworld"," ","选项","{","www","logger","代码","关闭","“","设置","args","scripts","是否","helloworldnode","learning","”","sleep","日志","_","一个",":","时","实现","加入","的","setup","初始","from","：","方式","类","系统","退出","运行","*","-","需要","发布","这份","while","def","面向","创建","spin","看","打开","usr","__","文件","bin","main","我们","world","get","编译","说明","一样","py","ok","入口","name","发生","作者","对象","none","示例","@","self","entry","配置","了","父类","进行","知道","0.5","后","正常","class","并","但是","包","guyuehome","古月"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_8","text":"所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。","text_tokens":["。","四个","初始","功能","是不是","所以","不能","编码方式","方式","实现","任务","机器人","到","为止","具体","总体而言","接口","是","一些","节点","，"," ","初始化","不是","心里","还有","hello","了","关闭","总体","大家","这里","依然","创建","吧","机器","不过","而已","打印","得","步骤","完成","并","这","疑惑","中","只不过","而言","编程","销毁","改变","只是","编码","world","一个","做","的"],"title":"创建节点流程","title_tokens":["流程","节点","创建"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_9","text":"没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。","text_tokens":["。","为例","以","任务","机器人","苹果","过程","来"," ","节点","，","网上","模拟","编写","接下来","就","机器","找到","视觉","先","一张","通过","接下","中","识别","图片","下来","实际","没错","我们","一个","从","实现","的"],"title":"案例三：物体识别节点","title_tokens":["识别","物体","三","：","节点","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_10","text":"在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 Attention 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。","text_tokens":["。","库","object","=","imread","python3","，","出来","勾勒","就","#","请","啦",".","node","(","这个","识别","—","轮廓","可视化","sudo","将","为","使用","/","'","如下","修改","image","ros2","苹果","表示","hcx",")","被"," ","run","代码","src","例程","框会","attention","绿点","安装","图片","learning","实际","可以","_","把","一个","看到","jpg","的","窗口","ws","指令","然后","：","重新","tutorials","apt","即可","dev","中间","运行","前","cv2","-","需要","21","会弹","用到","在","opencv","$","图像处理","install","中","我们","中心点","编译","出","py","apple","home","注意","可视","绿色","路径","处理","后","图像","成功","中心"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_11","text":"在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ],","text_tokens":["y","。","x","findcontours","coding","宽","库","int","object","=","upper","imread","255","destroyallwindows","关注","retr","下限","init","处理过程","[","概念","python3","inrange","for","具体","env","高","显示","接口","初始化","节点","，","等待","左上角","得到","出来","utf","in","!","勾勒","imshow","python","让","红色","程序","import","阈值","#","list","面积","主","shutdown",".","node","8","完成","0","居","范围","点画","通过","(","这个","识别","180","detect","去除","效果","循环","销毁","轮廓","red","approx","90","将","编写","destroy","info","如何","console","2","为","功能","rclpy","contours","使用","点","/","上角","函数","bgr2hsv","com","和","'","如下","噪声","lower",",","此处","更多","\"","机器人","苹果","ros2","]","image","img","1","hcx","来",")","像素"," ","选项","{","helloworld","www","logger","检测","所在","模拟","128","src","关闭","代码","例程","出现","color","更多要","坐标","args","计算","cvtcolor","设置","scripts","+","图片","learning","waitkey","hsv","_","一个",":","实现","加入","的","jpg","array","初始","setup","from","ws","circle","：","类","tutorials","mask","转换","系统","xy","points","dev","退出","*","过程","cv2","不是","shape","左上","numpy","-","需要","21","上限","模型","大家","def","np","创建","spin","if","在","opencv","h","数值","图像处理","打开","usr","中","图像识别","文件","bin","main","我们","从","bgr","及","get","编译","150","chain","<","说明","py","入口","none","作者","对象","apple","home","示例","cnt","@","关于","是","一些","entry","二值化","配置","了","5","hierarchy","太小","进行","continue","boundingrect","理过","机器","知道","处理","颜色","后","并","class","w","包","图像","读取","drawcontours","guyuehome","as","古月","重点","中心"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_12","text":"用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。","text_tokens":["。","用","动态","呀","太","或者","还","机器人","苹果","眼睛","物体","好像","节点","，","应该","不","接下来","进行","摄像头","机器","有","其中","颜色","问题","就让","接下","识别","图片","没","下来","摄像","图像","读取","我们","类似","合理","像头","的"],"title":"案例四：机器视觉识别节点","title_tokens":["识别","机器","四","：","节点","案例","视觉"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_13","text":"启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 Attention 如果是在虚拟机中操作，需要进行以下设置： 1. 把虚拟机设置为兼容USB3.1； 2. 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。","text_tokens":["。","2","为","webcam","实时","：","object","可","移动","驱动","如下","终端","注意","ros2","1","运行","兼容","虚拟","物体"," ","run","节点","，","如果","是","中将","操作","需要","连接","红色","并且","摄像头","进行","就","#","在","$","设置","node",".","后","啦","虚拟机","attention","usb3.1","设备","中","识别","启动","learning","摄像","成功","可以","_","把","一个","该","；","至","以下","像头","的"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_14","text":"相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ],","text_tokens":["y","。","x","findcontours","coding","之前","宽","库","int","object","=","upper","255","相比","retr","下限","init","[","python3","inrange","for","env","高","显示","接口","初始化","节点","，","左上角","变化","得到","utf","in","!","勾勒","出来","python","imshow","红色","让","摄像头","程序","import","阈值","#","list","面积","50","主",".","node","8","shutdown","完成","0","居","范围","点画","(","通过","识别","180","去除","detect","效果","摄像","销毁","videocapture","red","轮廓","approx","90","将","编写","destroy","info","2","为","webcam","使用","rclpy","contours","功能","点","/","上角","信息","函数","驱动","bgr2hsv","ret","com","和","如下","'","噪声","lower",",","]","xy","\"","修改","苹果","ros2","image","img","1","points","console",")","来","像素"," ","选项","{","helloworld","www","logger","检测","所在","代码","128","关闭","出现","color","坐标","args","计算","cvtcolor","设置","scripts","+","图片","learning","waitkey","hsv","相机","_",":","像头","的","加入","array","初始","setup","from","circle","：","类","mask","转换","read","系统","来源","*","cv2","shape","左上","numpy","-","需要","最大","上限","模型","一帧","while","def","np","创建","周期","if","opencv","h","数值","cap","图像处理","true","打开","usr","中","文件","bin","main","从","bgr","及","get","编译","150","chain","<","说明","py","ok","入口","none","作者","对象","示例","cnt","@","是","一些","entry","二值化","配置","了","5","这里","hierarchy","太小","并且","进行","continue","boundingrect","知道","处理","颜色","后","并","class","w","包","图像","读取","drawcontours","guyuehome","as","古月","中心"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_15","text":"节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息","text_tokens":["<","查看","：","信息","如下",">","name","ros2"," ","节点","操作","列表","#","list","$","node","常用","命令","_","info","的"],"title":"节点命令行操作","title_tokens":["命令行","操作","节点","命令"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_16","text":"现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。","text_tokens":["。","很","介绍","概念","显示","会","节点","，","两个","控制","之间","最为","摄像头","给","就","有","细胞","方法","这个","保持","摄像","同理","参数","将","摇杆","岂","和","收到","机器人","速度","机制"," ","想要","还会","应该","现在","发送","连接","发现","得","要","ros","b","改变","工作","把","一个","熟悉","看到","实现","这些","像头","开始","的","另外","一种","指令","回到","系统","框架图","不是","如果","比如","大家","多种","在","某种","这","中","联系","我们","a","一节","保持联系","下","电脑","框架","孤立","配置","了","他们","过来","负责","机器","后","并","问题","常用","运动","图像","没错"],"title":"思考题","title_tokens":["思考题","考题","思考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_17","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["humble","ros2","nodes","/","https","html","tutorials",".","docs","-","ros","en",":","understanding","org"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/","text":"话题 节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。 通信模型 以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。 发布/订阅模型 从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。 多对多通信 大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。 异步通信 话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。 消息接口 最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。 案例一：Hello World话题通信 了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 运行效果 启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。 发布者代码解析 我们来看下发布者的实现方法。 程序实现 learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口 订阅者代码解析 我们再来看下订阅者的实现方法。 程序实现 learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。 案例二：机器视觉识别 在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。 运行效果 这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。 发布者代码解析 learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], }, 订阅者代码解析 learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], }, 案例三：机器视觉识别优化 通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub 话题命令行操作 话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息 思考题 关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？ 参考链接 https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["报社","y","x","coding","宽","是不是","合适","chatter","很多","exe","结构","255","video","上","接收","for","字符","env","接口","听","，","包含","等待","得到","来看","勾勒","变化","imshow","换成","红色","自行","焕然一新","之后","就","已经","publisher","发布者","面积","讲","一","一份","8","监控","关系","名字","居","这个","去除","效果","没","拍摄","可视化","参数","生活","approx","平时","将","成为","优先级","肯定","每","对于","2","功能","一下","rclpy","点","/","思想","上角","一行","通信","驱动","但","方向","和","后缀","了解","千丝万缕","ros2","console","被","字符串","不知","像素","中是","基本原理","基于","目标","www","还有","中文","二","传递","万缕","例程","从而","第一","带宽","单向","微信","args","移植","先","转化","ros","视频","安装","格式","一句","原本","相机","日志","把","一个","类型","看到",":","std","加入","建议","方式","呀","mask","read","稍后","org","到","消息","运行","称之为","cv2","数据类型","联系方式","shape","rgb","获取","上限","某","比如","subscription","每换","发出","随处","创建","名","if","h","几乎","可见","看","继续","发送数据","下来","我们","接口定义","保证","等等","a","值","做","timer","msg","好","名称","一次","优化","chain","<","语言","说明","一样","较强","对象","作者","示例","}","数量","标准","集成","感觉","精简","父类","这里","桥梁","continue","讲解","处理","并","互相","读取","成功","渲染","as","任何","也","再","二个","库","int","bridge",">","retr","\\","会","另","super","两个","填充","!","输出","之间","python","几个","给","程序","msgs","与","完成","有","list","啦",".","node","shutdown","多","重要","raw","0","范围","数据结构","方法","接口协议","(","180","识别","留","循环","不变","red","异步","感兴趣","90","编写","destroy","一步","周期性","webcam","链接","摇杆","这样","信息","此时","叫","解析","存在","xy","lower","image","进入","1","来",")","选项","好像","应该","挺","特性","最后","logger","代码","关闭","化成","“","color","分析","用户","坐标","是否","b","硬件","感兴","移植性","learning","hsv","各种各样","可以","本身","是从","类似","docs","未来","当然","topic","为例","circle","tutorials","他会","callback","退出","0.1","以上","写","*","usb","？","不是","似乎","左上","-","同样","html","东西","spin","率","想下","人","周期","$","直接","数值","第一次","图像处理","打开","自己","__","humble","能够","基本","唯一","并不知道","谁","对","world","及","你","%","传感","不能","py","因为","来讲","多个","间","必然","号","注意","长度","理解","二值化","无法","太小","列表","imagesubscriber","进行","boundingrect","s","已","不过","知道","比方","案例","后","颜色","进一步","又","to","随处可见","drawcontours","自然","bw","guyuehome","在生活中","echo","古月","第一个","。","可移植","subscribernode","之前","虽然","object","杂志","所谓","upper","type","像","不然","提高","下限","还","[","一定","概念","显示","python3","高","物体","可能","模块","初始化","节点","定时器","一篇","string","一新","in","传递数据","定时","这种","单位","阈值","#","说干就干","点画","3","传感器","listener","通过","文章","同学","块","接下","pub","detect","保持","销毁","videocapture","据传","i","画面","角度","该","最","设计","统一","以下","info","如何","cam","叫做","contours","符合","ret","小编","com","'","收到","如下","作为","长宽","]","\"","苹果","指"," ","程序实现","{","三","秒","现在","所在","128","软件","放入","想象","数据传输","数据","得","排版","计算","视觉","cvtcolor","cvbridge","”","做到","dds","刚才","本原","_","实现","这些","的","要求","另外","一种","array","初始","拼接","总结","指令","例子","太","apt","转换","系统","understanding","逻辑","兴趣","过程","满足","numpy","如果","不太","控制指令","模型","一帧","不","执行","大家","def","np","在","opencv","一般","命令行","说","某种","阅读","组成","这","usr","中","文件","cv","imgmsg","需求","第二","无关","bgr","heard","、","编译","下","对应","更","才能","固定","对劲","编程语言","第二个","入口","hz","里","none","频率","cnt","一些","想","它","entry","个","配置","了","publish","hierarchy","可视","复杂","逻辑性","class","传输","w","过瘾","运动","图像","知识","没错","转换成","https","者","听说","都","只要","中心","更好","findcontours","之为","无论","焕然","=","以","做成","en","data","内","init","inrange","解","思考","hello","控制","左上角","什么","出来","utf","转化成","原理","没有","各样","模块化","时候","接下来","import","主","还是","设备","轮廓","思考题","既然","仔细","呢","描述","完全","采集","sudo","的话","为","提示","使用","独立","函数","bgr2hsv","积木","噪声","让",",","适合","机器人","修改","points","helloworld","run","想要","感器","优先","通用","更换","检测","队列","流程","sub","发送","开发","设置","scripts","要","frame","某些","接收数据","什么样","+","出去","命令","所有","waitkey","订阅","打","不行","开始","分别","setup","用","from","实时","那","：","类","create","即可","通信模型","回调","千丝","publishernode","只","需要","发布","定义","参考","复用","可移植性","话题","组织","其中","报纸","sensor","cap","考题","true","install","各种","启动","成","联系","bin","main","topics","从","魔性","get","150","就要","查看","用于","10","哪里","协议","name","终端","么","换","@","每个","关于","是","就是","self","（","操作","5","）","区分","并且","！","机器","0.5","问题","英文","bgr8","但是","常用","包","公众","编程","receiving","耦","imagepublisher","publishing","img","举","根本","词"],"title":"话题","title_tokens":["话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_1","text":"节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。","text_tokens":["。","一种","功能","独立","方式","但","间","机器人","千丝","千丝万缕","会","不是","联系方式","就是","节点","，","它","是"," ","了","传递","传递数据","之间","各样","万缕","桥梁","机器","话题","有","其中","数据","并","重要","各种","联系","各种各样","最","实现","这些","的"],"title":"话题","title_tokens":["话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_2","text":"以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。","text_tokens":["。","之为","是不是","以","上","显示","节点","，","两个","得到","之间","给","就","有","监控","关系","设备","这个","据传","拍摄","可视化","将","功能","一下","这样","信息","此时","驱动","方向","存在","作为","机器人"," ","传递","数据传输","用户","数据","要","ros","视频","b","硬件","相机","可以","一个","实现","的","为例","实时","方式","到","称之为","？","不是","获取","某","大家","话题","在","某种","这","中","我们","从","a","做","才能","查看","必然","是","想","它","了","可视","桥梁","机器","传输","图像","没错","渲染"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_3","text":"从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。","text_tokens":["。","也","之为","杂志","接收","会","节点","，","什么","来看","没有","之后","就","发布者","有","名字","居","文章","这个","据传","感兴趣","生活","呢","角度","平时","成为","每","的话","叫做","使用","/","叫","这样","小编","和","收到","机器人"," ","应该","基于","特性","发送","“","数据传输","数据","微信","排版","感兴","接收数据","格式","出去","”","dds","订阅","是从","本身","打","可以","把","一个","类似","类型","实现","的","要求","另外","他会","兴趣","到","称之为","？","数据类型","如果","需要","发布","模型","比如","大家","随处","话题","组织","可见","报纸","看","成","发送数据","对","等等","从","、","好","名称","固定","对象","号","是","就是","它","了","无法","机器","比方","传输","公众","知识","随处可见","自然","者","在生活中","都","古月"],"title":"发布/订阅模型","title_tokens":["模型","/","订阅","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_4","text":"大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。","text_tokens":["。","再","也","之为","是不是","很多","杂志","不然","可能","节点","，","听","控制","发布者","有","多","还是","3","这个","画面","仔细","该","优先级","2","一下","摇杆","通信","和","存在","机器人","1","被"," ","优先","挺","发送","想象","要","ros","订阅","可以","一个","这些","的","指令","建议","通信模型","称之为","不是","似乎","如果","控制指令","发布","模型","不","大家","东西","想下","人","话题","报纸","唯一","我们","谁","对","魔性","、","一样","因为","多个","里","号","注意","每个","是","个","数量","了","区分","机器","知道","并","公众","没错","者"],"title":"多对多通信","title_tokens":["对","多","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_5","text":"话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。","text_tokens":["报社","。","也","合适","所谓","可能","，","一篇","控制","什么","时候","就","有","发布者","一份","居","传感器","文章","这个","同学","异步","参数","叫做","通信","收到","让","适合","修改","指","不知"," ","感器","还有","特性","第一","数据","某些","订阅","可以","类似","一个","的","用","指令","那","太","逻辑","？","如果","发布","比如","某","不","发出","话题","周期","报纸","第一次","阅读","这","并不知道","等等","你","一次","更","用于","传感","较强","号","是","就是","一些","了","知道","逻辑性","后","只要","传输","公众","运动","者","听说","古月","根本","词"],"title":"异步通信","title_tokens":["异步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_6","text":"最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。","text_tokens":["。","也","之为","结构","像","概念","会","接口","节点","，","包含","各样","自行","就","与","发布者","有",".","数据结构","通过","块","据传","既然","描述","统一","这样","通信","积木","和","后缀","长宽","机器人","像素"," ","最后","中文","数据传输","数据","得","ros","格式","订阅","可以","各种各样","一个","的","一种","拼接","方式","系统","消息","称之为","rgb","发布","比如","定义","话题","在","说","组成","中","各种","成","文件","我们","接口定义","等等","无关","值","msg","、","对应","语言","不能","一样","编程语言","每个","是","理解","标准","了","这里","进行","机器","复杂","传输","英文","编程","图像","者","都"],"title":"消息接口","title_tokens":["接口","消息"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#hello-world","text":"了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。","text_tokens":["。","就要","再","chatter","了解","接收","到","消息","类型","字符","来","字符串"," ","是","，","基本原理","hello","标准","string","了","发布","定义","原理","代码","发送","“","例程","接下来","创建","从而","话题","周期","发布者","啦","还是","ros","接下","这个","中","下来","”","基本","订阅","我们","本原","者","world","一个","从","编写","开始","的"],"title":"案例一：Hello World话题通信","title_tokens":[" ","话题","：","案例","一","hello","通信","world"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_7","text":"启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。","text_tokens":["第一个","topic","。","也","二个","：","第二个","以","收到","终端","频率","ros2","消息","运行","字符","字符串","helloworld"," ","run","节点","，","hello","同样","发布","sub","“","第一","话题","发布者","数据","$","几乎","pub","启动","循环","learning","”","订阅","第二","可以","者","_","world","一个","该","看到","的"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_8","text":"我们来看下发布者的实现方法。","text_tokens":["下","。","发布者","我们","发布","来看","方法","实现","的"],"title":"发布者代码解析","title_tokens":["解析","代码","发布者","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_9","text":"learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], },","text_tokens":["coding","库","chatter","=","data","init","[","python3","字符","env","super","接口","初始化","节点","定时器","，","hello","string","填充","等待","utf","!","定时","输出","python","单位","import","程序","msgs","#","publisher","发布者","已经","完成",".","node","8","主","shutdown","居","(","pub","循环","销毁","编写","destroy","info","为","提示","rclpy","功能","点","/","信息","函数","com","'","如下","让",",","]","\"","points","ros2","console",")","字符串","helloworld"," ","选项","{","www","秒","logger","队列","代码","关闭","“","数据","设置","args","scripts","learning","”","日志","_","一个","类型","std",":","加入","的","topic","setup","初始","from","：","类","create","callback","系统","回调","退出","消息","*","publishernode","-","需要","发布","执行","def","创建","名","spin","话题","周期","打开","usr","__","中","文件","bin","main","world","timer","msg","、","get","编译","%","说明","10","py","入口","name","作者","对象","none","示例","长度","}","@","self","entry","（","配置","）","父类","publish","进行","s","知道","0.5","后","class","并","包","guyuehome","publishing","古月"],"title":"程序实现","title_tokens":["程序","程序实现","实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_10","text":"对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口","text_tokens":["初始","：","如下","对象","以上","消息","接口","想要"," ","初始化","，","如果","节点","填充","发布","流程","关闭","创建","进行","程序","话题","分析","发布者","并","编程","销毁","我们","对","一个","实现"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_11","text":"我们再来看下订阅者的实现方法。","text_tokens":["下","。","再","订阅","我们","者","来看","方法","实现","的"],"title":"订阅者代码解析","title_tokens":["者","解析","代码","订阅"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_12","text":"learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], },","text_tokens":["coding","subscribernode","库","chatter","=","data","init","\\","[","python3","env","super","接口","初始化","节点","，","hello","string","等待","utf","!","输出","python","程序","import","msgs","#","主","完成","shutdown",".","node","8","居","listener","(","pub","循环","销毁","i","编写","destroy","info","提示","rclpy","功能","点","/","信息","函数","com","'","收到","如下","让",",","]","\"","points","ros2","console",")","helloworld"," ","选项","{","www","logger","队列","sub","关闭","代码","“","数据","设置","args","scripts","learning","”","订阅","日志","_","一个","std",":","类型","加入","的","topic","setup","初始","from","：","类","create","callback","系统","回调","退出","消息","*","-","需要","subscription","定义","执行","def","创建","名","spin","话题","打开","usr","__","文件","bin","main","对","world","heard","get","msg","、","编译","%","说明","10","py","入口","name","作者","对象","none","示例","长度","}","@","self","entry","（","标准","配置","）","父类","进行","s","知道","处理","后","class","并","包","者","guyuehome","古月"],"title":"程序实现","title_tokens":["程序","程序实现","实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_13","text":"对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。","text_tokens":["下","。","好","初始","优化","之前","：","函数","通信","如下","对象","回调","还","一定","以上","接口","想要"," ","初始化","，","如果","节点","hello","基于","流程","不","关闭","大家","例程","创建","进行","程序","接下来","话题","机器","分析","数据","啦","处理","视觉","并","接下","继续","过瘾","编程","下来","销毁","订阅","我们","者","对","world","一个","实现","的"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_14","text":"在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。","text_tokens":["。","对于","功能","虽然","方式","驱动","来讲","和","做成","即可","间","机器人","概念","过程","物体","模块","是","就是","节点","，","两个","了","没有","红色","模块化","并且","程序","机器","话题","在","开发","讲解","数据","周期","视觉","并","问题","传输","但是","通过","中","识别","这个","没","联系","做到","图像","我们","相机","对","一个","将","实现","更好","的"],"title":"案例二：机器视觉识别","title_tokens":["识别","机器","：","案例","视觉","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_15","text":"这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。","text_tokens":["第一个","。","可移植","二个","内","另","模块","物体","节点","，","两个","来看","这种","红色","模块化","就","啦","说干就干","范围","这个","识别","pub","效果","保持","不变","完全","设计","将","以下","如何","功能","webcam","思想","驱动","修改","ros2"," ","run","中是","更换","sub","软件","放入","第一","要","视觉","移植","ros","先","移植性","learning","订阅","相机","可以","_","一个","未来","看到","实现","分别","的","topic","即可","消息","运行","？","只","如果","需要","发布","定义","可移植性","话题","在","$","启动","我们","第二","保证","下","好","第二个","终端","是","标准","了","并","图像","更好"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_16","text":"learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], },","text_tokens":["coding","库","=","bridge","init","video","[","python3","env","super","接口","初始化","节点","定时器","，","等待","utf","!","定时","输出","python","换成","单位","import","程序","msgs","#","与","发布者","publisher","raw",".","node","8","已经","完成","0","居","shutdown","设备","(","pub","循环","销毁","videocapture","采集","将","编写","destroy","info","为","webcam","rclpy","提示","功能","点","/","信息","函数","驱动","ret","com","'","如下","让",",","]","\"","image","points","ros2","console",")","选项"," ","{","helloworld","www","秒","logger","队列","代码","关闭","sub","设置","args","scripts","ros","视频","frame","learning","cvbridge","相机","日志","_","一个","类型",":","加入","的","topic","setup","初始","from","：","类","create","callback","转换","read","稍后","系统","0.1","回调","退出","消息","*","cv2","如果","-","需要","发布","一帧","执行","def","创建","名","spin","话题","周期","opencv","if","sensor","cap","图像处理","true","打开","usr","__","文件","bin","cv","main","imgmsg","timer","msg","、","get","编译","说明","用于","10","py","入口","name","作者","对象","号","none","示例","长度","}","@","self","entry","（","配置","）","父类","publish","进行","知道","处理","后","class","并","bgr8","包","to","图像","读取","成功","转换成","imagepublisher","guyuehome","publishing","主","古月"],"title":"发布者代码解析","title_tokens":["解析","代码","发布者","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_17","text":"learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], },","text_tokens":["y","x","findcontours","coding","宽","库","int","object","=","bridge","upper","255","data","retr","下限","init","video","[","python3","inrange","for","env","高","显示","super","接口","初始化","节点","，","等待","左上角","得到","出来","utf","in","!","勾勒","imshow","python","输出","红色","让","程序","import","msgs","#","与","阈值","list","raw",".","node","8","面积","主","0","居","范围","点画","listener","(","180","pub","去除","detect","效果","循环","shutdown","销毁","轮廓","red","approx","90","将","编写","destroy","info","2","为","webcam","rclpy","contours","使用","提示","功能","/","上角","信息","函数","bgr2hsv","com","'","和","如下","噪声","lower",",","]","xy","\"","image","img","ros2","苹果","1","进入","点","points",")","console","像素"," ","选项","{","helloworld","www","logger","检测","队列","所在","sub","128","化成","关闭","代码","color","坐标","args","计算","cvtcolor","转化","ros","设置","scripts","frame","+","learning","cvbridge","waitkey","订阅","hsv","日志","_","一个","类型",":","加入","的","topic","array","初始","setup","from","circle","：","类","create","callback","mask","转换","系统","回调","退出","消息","*","cv2","shape","左上","numpy","-","需要","上限","模型","subscription","def","np","创建","名","spin","话题","if","opencv","h","sensor","数值","图像处理","完成","打开","usr","__","中","文件","bin","cv","main","imgmsg","从","bgr","及","get","msg","、","150","编译","chain","<","说明","用于","10","py","转化成","入口","name","作者","对象","none","示例","长度","}","cnt","@","一些","self","entry","（","二值化","配置","5","）","父类","hierarchy","太小","imagesubscriber","进行","continue","boundingrect","已","知道","处理","颜色","后","class","并","互相","bgr8","w","包","to","receiving","图像","drawcontours","者","guyuehome","as","古月","中心"],"title":"订阅者代码解析","title_tokens":["者","解析","代码","订阅"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_18","text":"通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub","text_tokens":["。","也","无论","是不是","焕然","exe","提高","可能","接口","解","节点","，","一新","什么","得到","变化","换成","焕然一新","就","有","node","接口协议","通过","识别","sudo","cam","一步","功能","使用","webcam","这样","符合","一行","驱动","让","ros2"," ","好像","run","目标","通用","还有","现在","代码","sub","例程","软件","得","视觉","ros","什么样","安装","一句","learning","原本","刚才","相机","可以","_","一个","不行","当然","的","topic","用","指令","呀","apt","到","写","usb","？","似乎","不是","只","不太","-","需要","发布","不","每换","复用","大家","率","话题","一般","$","直接","install","这","自己","中","humble","我们","对","做","你","好","对劲","哪里","协议","换","么","是","标准","集成","了","感觉","精简","！","不过","进一步","常用","又","图像","耦","都","任何","只要"],"title":"案例三：机器视觉识别优化","title_tokens":["识别","优化","机器","三","：","案例","视觉"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_19","text":"话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息","text_tokens":["topic","msg","<","查看","：","信息","type","如下",">","hz","data","name","频率","ros2","消息"," ","操作","发布","列表","带宽","话题","#","list","数据","$","传输","常用","pub","命令","bw","_","echo","info","的"],"title":"话题命令行操作","title_tokens":["命令行","话题","操作","命令"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_20","text":"关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？","text_tokens":["对于","周期性","：","通信","例子","来讲","和","系统","适合","机器人","到","关于","？","满足","是","思考","，","特性","原理","传递","这种","大家","无法","这里","几个","给","就","话题","周期","机器","单向","数据","讲","复杂","数据传输","完成","是否","传输","考题","方法","留","所有","能够","据传","我们","思考题","肯定","需求","呢","一个","举","实现","的"],"title":"思考题","title_tokens":["思考题","考题","思考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_21","text":"https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["humble","ros2","/","https","html","tutorials",".","docs","topics","-","ros","en",":","understanding","org"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/","text":"服务 话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。 通信模型 在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。 客户端/服务器模型 从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。 同步通信 这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。 一对多通信 比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。 服务接口 和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。 案例一：加法求解器 大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 运行效果 我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3 客户端代码解析 我们来看下客户端的实现方法。 程序实现 learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口 服务端代码解析 至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。 程序实现 learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口 案例二：机器视觉识别 好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。 运行效果 此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client 客户端代码解析 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], }, 服务端代码解析 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], }, 服务命令行操作 服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求 思考题 话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。 参考链接 https://docs.ros.org/en/humble/Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["y","服务","本","x","coding","宽","大部","很多","exe","回想","255","video","上","接收","按照","介绍","for","env","接口","future","放到","，","越快越好","等待","数据通信","得到","来看","勾勒","imshow","红色","最为","之后","就","已经","面积","发布者","讲","一","response","8","居","那有","objectclient","一起","这个","去除","—","效果","自定","approx","繁杂","生活","展现","将","成为","每","2","功能","提供","rclpy","点","/","上角","通信","驱动","但","和","了解","ros2","console","机制","学习","不知","像素","目标","核心","www","还有","二","传递","例程","第一","出现","单向","args","转化","ros","应用","官方","相机","附近","日志","一个","类型","看到","时",":","加入","方式","页面","mask","宕机","大部分","org","available","到","消息","运行","称之为","cv2","数据类型","shape","获取","相对","上限","比如","subscription","里程","call","request","形式","创建","名","1.0","if","target","h","看","继续","下来","简单","srv","我们","等等","a","client","msg","一次","好","chain","<","说明","一样","ok","变成","作者","对象","里程计","示例","}","有所","failed","标准","集成","准确","父类","continue","处理","绝大部分","并","互相","接口类型","自定义","服务器端","成功","as","服务器","也","二个","库","int","...","一对","bridge",">","retr","\\","会","转圈圈","super","结果","两个","准备","跟随","!","cs","之间","python","输出","给","服务端","程序","状态","msgs","完成","有","与","啦",".","node","shutdown","多","raw","0","docs","范围","方法","ints","(","argv","识别","180","objecty","等","循环","red","异步","90","编写","destroy","周期性","链接","waiting","所以","解析","此时","信息","这样","存在","xy","lower","前者","image","进入","1","时间",")","选项","好像","应该","logger","三个","代码","关闭","化成","“","求解","color","分析","坐标","是否","b","而是","硬件","service","timeout","learning","addtwoints","hsv","可以","我","类似","一问一答","假设","域名","circle","tutorials","根据","callback","return","list","网络","退出","以上","*","incoming","usb","不是","问","左上","-","更加","同样","html","sum","数据通","getobjectposition","spin","人","周期","sys","$","数值","图像处理","打开","__","humble","基本","唯一","并不知道","后者","部分","对","及","你","%","电脑","传感","py","多个","again","当","长度","简称","二值化","无法","最新","太小","列表","server","imagesubscriber","进行","boundingrect","已","不过","上层","知道","案例","颜色","后","exception","打印输出","to","网站","drawcontours","guyuehome","在生活中","n","古月","绝大","第一个","。","之前","很","object","希望","传入","upper","type","比比皆是","下限","[","反馈","高","python3","具体","答","物体","可能","显示","初始化","节点","in","传递数据","这种","某个","加数","阈值","#","点画","3","listener","传感器","通过","接下","detect","两种","针对","销毁","封装","这么","except","设计","info","cam","叫做","contours","岂","async","com","如下","收到","'","接口类","]","\"","苹果"," ","程序实现","{","d","软硬件","现在","所在","128","拿到","数据","result","计算","视觉","cvtcolor","网页","cvbridge","”","刚才","wait","_","not","经常","实现","或者","位置","的","要求","另外","一种","这些","array","初始","有点","总结","指令","然后","once","send","转换","系统","understanding","过程","adderserver","满足","e","interface","numpy","如果","控制指令","模型","不","执行","while","大家","def","np","用到","有所不同","在","同步","一般","opencv","命令行","usr","中","文件","cv","imgmsg","需求","第二","同步性","后续","至于","bgr","编译","浏览","下","、","更","add","不好","客户","第二个","入口","none","频率","加法","界面","cnt","一些","entry","配置","了","hierarchy","向","上述","判断","class","传输","w","运动","图像","https","当前","者","都","中心","查询","合理","findcontours","反应","break","之为","=","相比","data","en","init","inrange","思考","随时","务器","控制","左上角","什么","出来","utf","转化成","原理","没有","时候","接下来","import","50","主","还是","done","半天","服务器发送","轮廓","思考题","完全","position","尽快","objectx","为","一直","提示","使用","应答","函数","bgr2hsv","比比","噪声","让",",","command","适合","机器人","points","场景","想要","run","services","发给","感器","r","通用","检测","队列","常见","流程","sub","发送","越好","圈圈","开发","设置","scripts","要","请求","软硬","adder","某些","frame","通信接口","+","法器","命令","出去","waitkey","订阅","；","浏览器","开始","分别","雷达","setup","from","客户端","：","类","create","发","认为","通信模型","回调","越快","求和","提到","需要","else","发布","定义","参考","转圈","话题","其中","加法器","sensor","考题","true","不同","返回","各种","图像识别","启动","成","bin","main","处","从","跟踪","get","课程","150","try","就要","查看","用于","10","two","访问","name","终端","invalid","器","@","是","就是","self","操作","（","并不需要","5","）","并且","机器","打印","正常","bgr8","常用","但是","adderclient","包","of","sec","编程","receiving","img"],"title":"服务","title_tokens":["服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_1","text":"话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。","text_tokens":["另外","本","一种","服务","你","。","使用","通信","多个","收到","消息","机制","学习","答"," ","问","节点","，","发布","准确","无法","这种","之间","话题","数据","单向","发布者","知道","讲","同步","是否","传输","ros","方法","常用","一起","—","效果","订阅","我们","异步","可以","者","我","类似","将","实现","的"],"title":"服务","title_tokens":["服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_2","text":"在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。","text_tokens":["。","服务","之前","希望","按照","反馈","高","答","物体","节点","，","跟随","得到","这种","红色","时候","通过","识别","这个","这么","成为","尽快","一直","使用","此时","信息","这样","应答","驱动","通信","和","机器人","机制"," ","好像","发给","目标","发送","数据","单向","ros","请求","而是","应用","service","订阅","相机","可以","附近","我","一个","实现","或者","位置","的","另外","然后","发","通信模型","到","问","需要","发布","模型","比如","形式","有所不同","话题","周期","在","其中","不同","中","继续","图像识别","我们","对","课程","你","更","一样","变成","频率","有所","是","并不需要","了","最新","机器","上层","并","传输","运动","图像","查询"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_3","text":"从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。","text_tokens":["浏览","服务","。","你","叫做","为","域名","也","很","电脑","/","此时","客户端","信息","应答","客户","通信","页面","收到","或者","上","反馈","会","具体","机制","答","简称"," ","问","就是","，","操作","需要","务器","模型","常见","来看","比如","cs","这种","发送","形式","某个","时候","进行","之后","就","向","在","数据","处理","并","请求","某些","返回","网页","通过","各种","服务器端","服务器发送","网站","针对","我们","生活","展现","我","在生活中","经常","从","服务器","实现","浏览器","的"],"title":"客户端/服务器模型","title_tokens":["服务","/","客户端","客户","务器","模型","服务器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_4","text":"这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。","text_tokens":["要求","服务","浏览","你","反应","一直","。","也","之为","所以","客户端","应答","不好","信息","通信","客户","宕机","或者","相比","网络","接收","到","转圈圈","称之为","越快","过程","可能","是","，","越快越好","务器","了","没有","假设","转圈","越好","圈圈","话题","在","一般","判断","状态","同步","那有","通过","这个","半天","中","服务器端","我们","可以","服务器","浏览器","的"],"title":"同步通信","title_tokens":["通信","同步"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_5","text":"比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。","text_tokens":["每","服务","古月","。","所以","一样","客户端","客户","通信","但","多个","存在","访问","通信模型","界面","看到","是","，","务器","同样","模型","比如","不","没有","大家","人","并","居","但是","这个","中","服务器端","网站","唯一","可以","完全","都","一个","服务器","的"],"title":"一对多通信","title_tokens":["一对","多","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_6","text":"和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。","text_tokens":["服务","。","也","使用","msg","一样","通信","和","变成","苹果","介绍","反馈","消息","会"," ","是","，","核心","两个","还有","标准","了","比如","定义","传递","传递数据","大家","给","话题","在","数据","坐标",".","要","还是","ros","请求","方法","中","命令","文件","srv","我们","部分","类似","后续","一个","这些","位置","的"],"title":"服务接口","title_tokens":["服务","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_7","text":"大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。","text_tokens":["服务","。","也","反馈","结果","节点","，","两个","务器","得到","接下来","给","加数","就","之后","有","啦","还是","ints","通过","接下","这个","针对","封装","将","编写","功能","提供","应答","通信","收到","了解"," ","想要","应该","现在","代码","发送","“","例程","求解","数据","计算","ros","请求","官方","出去","”","可以","_","一个","时","实现","开始","的","客户端","求和","需要","相对","大家","成","下来","简单","基本","我们","对","从","就要","add","客户","two","当","加法","器","是","了","进行","后","并","服务器端","服务器"],"title":"案例一：加法求解器","title_tokens":["器","求解","：","案例","一","加法"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_8","text":"我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3","text_tokens":["第一个","下","。","服务","2","提供","功能","二个","客户端","传入","客户","第二个","如下","终端","ros2","运行","求和"," ","是","节点","，","结果","run","操作","两个","等待","原理","代码","发送","例程","并且","server","服务端","加数","第一","数据","$","并","请求","看","adder","3","service","一起","这个","启动","learning","我们","第二","_","一个","实现","client","的"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_9","text":"我们来看下客户端的实现方法。","text_tokens":["下","。","客户端","我们","客户","来看","方法","实现","的"],"title":"客户端代码解析","title_tokens":["客户","解析","代码","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_10","text":"learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], },","text_tokens":["服务","coding","break","库","int","...","=","init","[","接收","python3","for","反馈","env","super","接口","初始化","future","节点","，","两个","务器","等待","utf","!","输出","python","程序","加数","import","#","完成","response",".","node","8","shutdown","done","居","ints","(","argv","自定","循环","销毁","异步","except","将","编写","destroy","info","2","功能","rclpy","点","waiting","/","信息","函数","async","com","'","收到","如下","接口类",",","]","让","\"","points","ros2","1","console",")","选项"," ","{","d","r","www","logger","代码","关闭","发送","数据","result","设置","args","计算","scripts","是否","请求","adder","b","service","timeout","+","法器","learning","addtwoints","wait","_","not","一个","类型",":","加入","的","setup","初始","from","客户端","：","once","类","send","方式","create","系统","available","运行","*","e","interface","-","需要","else","sum","定义","call","while","执行","request","def","创建","名","spin","1.0","sys","if","加法器","打开","usr","__","启动","文件","bin","main","srv","服务器","a","client","get","编译","try","一次","%","说明","add","py","ok","客户","two","入口","name","作者","对象","加法","again","none","示例","}","@","self","entry","（","failed","配置","）","父类","进行","打印","知道","处理","后","正常","class","并","exception","打印输出","接口类型","自定义","adderclient","of","服务器端","包","sec","成功","guyuehome","as","古月"],"title":"程序实现","title_tokens":["程序","程序实现","实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_11","text":"对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口","text_tokens":["服务","初始","客户端","：","应答","客户","如下","对象","以上","接口","想要"," ","初始化","，","如果","节点","务器","等待","流程","关闭","发送","创建","进行","程序","分析","数据","并","请求","服务器端","编程","销毁","我们","对","一个","服务器","实现"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_12","text":"至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。","text_tokens":["服务","。","有点","也","函数","通信","回调","时间","机制","不知","，","务器","了","什么","用到","话题","出现","数据","知道","请求","中","服务器端","订阅","并不知道","者","类似","至于","服务器","实现","的"],"title":"服务端代码解析","title_tokens":["服务端","服务","解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_13","text":"learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], },","text_tokens":["服务","coding","库","=","init","\\","[","python3","反馈","env","super","接口","初始化","结果","节点","，","放到","务器","等待","utf","!","输出","python","程序","import","#","完成","已经","主","response",".","node","8","shutdown","居","ints","(","自定","循环","销毁","将","编写","destroy","info","提供","功能","rclpy","提示","点","/","信息","函数","应答","com","'","收到","如下","接口类",",","让","]","\"","points","ros2","console",")","选项"," ","{","d","www","logger","代码","关闭","数据","设置","args","计算","scripts","请求","adder","b","service","+","法器","learning","addtwoints","日志","_","类型",":","加入","的","setup","初始","from","：","类","create","callback","return","系统","回调","退出","*","adderserver","求和","incoming","interface","-","需要","sum","定义","执行","request","def","创建","名","spin","加法器","打开","usr","__","中","文件","bin","main","srv","服务器","对","a","get","、","编译","client","%","说明","add","py","two","入口","name","作者","对象","加法","none","示例","}","@","self","entry","（","配置","）","父类","server","进行","知道","处理","后","class","并","接口类型","自定义","包","guyuehome","n","古月"],"title":"程序实现","title_tokens":["程序","程序实现","实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_14","text":"对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口","text_tokens":["服务","初始","：","函数","客户端","应答","客户","如下","对象","回调","以上","反馈","接口","想要"," ","初始化","，","如果","节点","结果","务器","流程","关闭","创建","进行","程序","服务端","向","分析","并","通过","服务器端","编程","销毁","我们","处","对","一个","服务器","实现"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_15","text":"好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。","text_tokens":["下","服务","。","好","岂","通信","回想","当","加法","器","机制","物体","提到","不是","，","目标","需要","更加","了","流程","时候","求解","已经","知道","啦","视觉","通过","识别","刚才","我们","实现","合理","位置","的"],"title":"案例二：机器视觉识别","title_tokens":["识别","机器","：","案例","视觉","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_16","text":"此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client","text_tokens":["服务","。","cam","一次","提供","此时","：","客户端","然后","object","驱动","客户","认为","根据","exe","对象","当","终端","机器人","ros2","会","运行","usb","时"," ","是","节点","，","随时","目标","run","需要","准备","三个","发布","集成","了","务器","发送","client","并且","上述","server","就","出现","机器","拿到","有","数据","$","node","视觉","请求","跟踪","service","识别","服务器端","启动","运动","learning","图像","订阅","我们","当前","相机","服务器","可以","分别","_","一个","；","位置","的"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_17","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], },","text_tokens":["y","服务","x","coding","break","库","object","...","=","init","\\","[","python3","for","env","super","接口","初始化","future","节点","，","等待","utf","!","python","程序","import","#","完成","response",".","node","8","shutdown","done","居","objectclient","(","识别","自定","销毁","except","position","编写","destroy","info","功能","rclpy","点","waiting","/","应答","async","com","'","如下","让",",","]","\"","points","ros2","console",")","选项"," ","{","目标","d","r","www","logger","代码","关闭","result","设置","args","scripts","请求","adder","service","timeout","learning","wait","_","not",":","n","位置","的","加入","setup","初始","from","：","once","类","send","create","系统","available","*","e","interface","-","需要","else","定义","call","while","request","def","getobjectposition","创建","spin","1.0","target","if","true","打开","usr","__","文件","bin","main","srv","get","client","编译","try","%","说明","py","ok","入口","name","作者","again","none","对象","示例","}","@","self","entry","failed","配置","父类","server","进行","知道","后","class","并","exception","自定义","包","of","sec","guyuehome","as","古月"],"title":"客户端代码解析","title_tokens":["客户","解析","代码","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_18","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], },","text_tokens":["y","服务","x","findcontours","coding","宽","库","int","object","=","bridge","upper","反馈","255","data","retr","下限","init","video","\\","[","python3","inrange","for","env","高","显示","super","接口","初始化","物体","节点","，","务器","等待","左上角","得到","出来","utf","in","!","勾勒","imshow","python","输出","红色","command","已经","让","程序","import","msgs","#","与","阈值","list","raw",".","node","8","面积","response","0","居","范围","点画","listener","(","180","识别","去除","objecty","自定","detect","效果","循环","shutdown","销毁","轮廓","red","approx","90","position","将","编写","objectx","info","destroy","2","为","提供","rclpy","contours","使用","提示","功能","/","上角","信息","函数","bgr2hsv","com","'","和","收到","如下","噪声","lower",",","]","接口类","\"","image","img","ros2","苹果","1","进入","点","points",")","console","像素"," ","选项","{","50","目标","d","www","logger","检测","队列","所在","sub","128","化成","关闭","代码","color","数据","坐标","args","计算","cvtcolor","转化","ros","请求","设置","frame","scripts","adder","service","+","learning","cvbridge","waitkey","hsv","订阅","日志","_","一个","类型",":","n","加入","的","array","初始","setup","from","circle","：","类","create","callback","mask","return","转换","系统","xy","回调","退出","消息","*","cv2","shape","左上","interface","numpy","-","需要","else","上限","模型","subscription","定义","执行","request","def","getobjectposition","np","创建","名","spin","话题","target","opencv","if","h","sensor","数值","图像处理","完成","true","打开","usr","__","中","文件","bin","cv","srv","imgmsg","main","服务器","对","从","bgr","及","get","msg","、","150","编译","client","chain","%","<","说明","用于","10","py","转化成","入口","name","作者","对象","none","invalid","示例","长度","}","cnt","@","一些","self","entry","（","二值化","配置","5","）","父类","hierarchy","太小","server","imagesubscriber","进行","continue","boundingrect","已","知道","处理","颜色","后","class","并","互相","bgr8","接口类型","自定义","w","包","to","receiving","图像","drawcontours","者","guyuehome","主","as","古月","中心"],"title":"服务端代码解析","title_tokens":["服务端","服务","解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_19","text":"服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求","text_tokens":["服务","<","查看","：","type","如下",">","data","name","ros2","数据类型"," ","操作","call","发送","列表","#","list","数据","$","请求","常用","service","命令","_","类型","的"],"title":"服务命令行操作","title_tokens":["服务","命令行","操作","命令"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_20","text":"话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。","text_tokens":["服务","。","也","大部","很多","比比皆是","高","接口","，","控制","数据通信","最为","时候","方法","传感器","等","识别","这个","两种","自定","针对","繁杂","设计","周期性","通信","比比","和","前者","适合","机器人","场景"," ","目标","感器","通用","软硬件","数据","单向","开发","视觉","ros","软硬","硬件","应用","一问一答","类似","类型","这些","位置","的","要求","通信接口","雷达","指令","大部分","到","过程","数据类型","满足","获取","控制指令","里程","比如","数据通","定义","话题","周期","在","同步","中","我们","后者","同步性","部分","需求","等等","、","更","就要","传感","里程计","是","标准","了","无法","机器","不过","绝大部分","传输","常用","自定义","图像","都","绝大"],"title":"思考题","title_tokens":["思考题","考题","思考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_21","text":"https://docs.ros.org/en/humble/Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["humble","ros2","/","https","html","services","tutorials",".","docs","-","ros","en",":","understanding","org"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/","text":"通信接口 在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。 接口的定义 接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。 ROS通信接口 接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。 语言无关 为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。 标准接口 大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。 案例一：服务接口的定义与使用 了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。 接口定义 在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ... 程序调用 我们在代码中再来重点看下接口的使用方法。 客户端接口调用 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 服务端接口调用 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 案例二：话题接口的定义与使用 话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。 运行效果 现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub 接口定义 在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ... 程序调用 我们在代码中再来重点看下接口的使用方法。 发布者接口调用 learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 订阅者接口调用 learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 接口命令行操作 接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义 参考链接 https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["y","服务","形象","x","上去","coding","64","宽","packages","exe","结构","广泛","高效","255","video","上","for","字符","env","接口","future","，","包含","等待","不用","得到","勾勒","imshow","换成","红色","最为","摄像头","有没有","就","已经","面积","转","发布者","讲","int32","一","8","response","publisher","关系","居","objectclient","一起","这个","find","去除","—","自定","效果","approx","参数","生活","举个","好奇","将","肯定","关心","每","2","提供","功能","一下","rosidl","rclpy","衍生","/","上角","主程序","通信","驱动","但","和","各个领域","了解","ros2","表示","学习","机制","字符串","像素","目标","核心","www","还有","二","传递","例程","第一","编写程序","单向","涵盖","args","由","转化","线速度","ros","包装","应用","安装","一句","相机","日志","把","一个","---","类型","看到","插头","时","原色",":","std","你来我往","回到","方便","mask","org","图形化","available","到","消息","运行","称之为","标准接口","cv2","shape","package","获取","上限","比如","subscription","call","减少","request","随处","相互","创建","名","1.0","target","if","h","可见","看","继续","下来","srv","我们","手机","接口定义","保证","等等","a","值","client","msg","包中","好","一次","chain","<","语言","说明","ok","第三个","三原","对象","整型","只有","作者","示例","project","度","哪些","}","依赖","30","failed","标准","准确","父类","这里","第三","continue","便于","讲解","处理","并","互相","位","接口类型","32","自定义","交流","软件开发","as","服务器","也","再","二个","轮子","库","int","...","bridge","到底",">","体","retr","诞生","\\","输入","会","回顾","super","结果","and","两个","转到第","输出","!","之间","python","研究","几个","给","程序","约束","状态","与","完成","有","重复","服务端",".","甚至","node","多","重要","shutdown","runtime","0","数据结构","方法","范围","有机","(","interfaces","等","二维","识别","180","objecty","循环","red","90","海龟","编写","destroy","webcam","链接","waiting","所以","解析","此时","1s","这样","上边","信息","xy","lower","image","进入","1","来",")","选项","三个","自语","加","logger","代码","关闭","化成","“","color","坐标","是否","b","而是","硬件","service","timeout","坐标值","learning","话","hsv","可以","docs","类似","两者","像头","topic","程序模块","精髓","circle","tutorials","根据","callback","return","list","退出","以上","主要","usb","*","？","不是","左上","-","html","匹配","sum","generate","getobjectposition","spin","人","周期","$","直接","数值","布尔值","一边","图像处理","打开","自己","__","humble","部分","谁","对","及","%","电脑","由于","py","again","长度","调用","理解","像素点","二值化","形状","太小","列表","server","imagesubscriber","进行","boundingrect","required","已","知道","路径","案例","后","颜色","exception","to","看上","反正","随处可见","drawcontours","传输数据","看上去","guyuehome","n","古月","第一个","。","subscribernode","之前","很","object","希望","upper","下限","数组","还","[","概念","反馈","python3","高","具体","显示","模块","可能","物体","初始化","节点","内容","string","in","某个","阈值","#","点画","角速度","listener","通过","接下","pub","concepts","about","detect","摄像","销毁","封装","except","必须","角度","设计","info","如何","cam","contours","c++","却是","符合","depend","async","com","'","收到","如下","接口类","]","用来","\"","苹果","速度","share"," ","{","自言自语","d","领域","现在","各个","所在","128","标值","连接","软件","分成","数据","得","result","计算","视觉","cvtcolor","show","build","cvbridge","”","种","工作","_","not","wait","生成","实现","通信接口","或者","的","这些","另外","一种","位置","array","初始","single","指令","once","send","例子","转换","系统","中间","过程","e","interface","numpy","模型","一帧","执行","while","大家","进度","def","np","用到","详细","在","opencv","找到","命令行","中有","最终","组成","usr","这","中","文件","cv","件夹","generators","imgmsg","第二","txt","后续","typec","无关","就行","bgr","、","micro","编译","对应","下","更","不管","才能","固定","客户","第二个","入口","里","none","加法","cnt","彼此","一些","想","它","两","配置","了","他们","publish","hierarchy","int64","exec","数","20","传输","class","w","小海龟","运动","三原色","图像","https","当前","者","都","只要","中心","查询","findcontours","break","无论","之为","输入输出","=","做成","en","添加","关注","data","init","objectposition","inrange","插座","键盘","三种","控制","务器","出来","什么","左上角","utf","转化成","没有","别人","g","时候","接下来","import","50","主","调用函数","还是","done","中来","无论是","轮廓","建立","呢","为了","更为","完全","描述","position","default","objectx","的话","为","提示","使用","小海","应答","函数","降低","bgr2hsv","action","噪声","让",",","command","机器人","run","bool","r","检测","队列","常见","将要","sub","旋转","发送","开发","要","请求","frame","什么样","+","出去","raw","命令","waitkey","订阅","众多","；","开始","分别","from","那","：","客户端","msgs","类","create","个人","回调","求和","只","xml","需要","else","发布","定义","参考","图形","编译器","话题","以及","sensor","true","不同","各种","启动","目的","成","联系","bin","main","从","member","get","课程","150","try","自动","查看","造","10","用于","define","动作","name","文件夹","invalid","终端","形象化","@","关于","每个","是","就是","转到","self","（","操作","5","）","区分","布尔","并且","机器","打印","use","正常","cmakelists","bgr8","常用","包","of","编程","sec","receiving","像是","每隔","看看","group","img","重点","代码生成"],"title":"通信接口","title_tokens":["通信","接口","通信接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_1","text":"在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。","text_tokens":["服务","。","你来我往","更","好","无论","动作","通信","结构","系统","让","个人","概念","会","学习","？","接口"," ","不是","是","，","自言自语","理解","就是","两个","内容","标准","自语","什么","将要","传递","定义","大家","用到","给","人","话题","在","数据","甚至","多","还是","ros","重要","通信接口","并","而是","这","中","—","我们","可以","呢","后续","都","一个","交流","为了","或者","的"],"title":"通信接口","title_tokens":["通信","接口","通信接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_2","text":"接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。","text_tokens":["。","形象","服务","上去","也","很","无论","之为","输入输出","结构","广泛","高效","关注","诞生","上","输入","概念","反馈","插座","具体","模块","接口","结果","节点","，","键盘","两个","内容","控制","出来","什么","不用","输出","g","最为","时候","摄像头","程序","就","给","约束","有","讲","多","还是","调用函数","关系","角速度","通过","一起","这个","等","摄像","无论是","建立","生活","必须","参数","更为","完全","举个","呢","编写","肯定","关心","如何","每","提供","使用","所以","解析","却是","主程序","函数","符合","通信","驱动","但","和","各个领域","让","机器人","速度","机制","像素"," ","r","领域","加","各个","常见","所在","代码","连接","软件","开发","编写程序","数据","得","要","由","线速度","ros","b","包装","硬件","应用","什么样","安装","一句","话","相机","可以","工作","类似","把","一个","两者","时","插头","原色","通信接口","像头","的","这些","开始","一种","；","实现","指令","程序模块","精髓","那","回到","例子","系统","图形化","到","主要","运行","称之为","usb","？","-","发布","匹配","比如","定义","大家","图形","随处","相互","话题","在","直接","可见","组成","这","自己","中","目的","我们","手机","等等","typec","值","、","micro","更","一次","才能","好","固定","电脑","三原","只有","形象化","调用","关于","彼此","每个","是","就是","它","一些","像素点","标准","配置","了","准确","他们","形状","并且","进行","机器","知道","正常","传输","常用","包","运动","编程","三原色","像是","图像","随处可见","看上","反正","传输数据","看上去","软件开发","都","只要"],"title":"接口的定义","title_tokens":["接口","定义","的"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#ros","text":"接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。","text_tokens":["每","。","服务","一种","才能","使用","也","造","轮子","降低","动作","方便","通信","让","到","、","机制","依赖","接口"," ","就是","是","，","目标","核心","三种","节点","定义","代码","减少","之间","别人","程序","便于","话题","有","重复","ros","这","常用","通过","有机","一起","各种","联系","我们","可以","种","分别","的"],"title":"ROS通信接口","title_tokens":["通信","接口","通信接口","ros"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_3","text":"为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。","text_tokens":["y","。","x","服务","64","之前","结构","做成","体","数组","还","反馈","会","接口","结果","节点","，","包含","两个","转到第","什么","python","状态","完成","转","int32",".","还是","数据结构","通过","等","这个","二维","描述","为了","90","设计","将","海龟","每","功能","使用","c++","小海","一下","1s","此时","应答","通信","action","和","让","用来","机器人","表示","学习","机制"," ","bool","目标","还有","三个","旋转","“","分成","数据","单向","坐标","是否","ros","请求","b","”","可以","---","一个","生成","看到","通信接口","这些","的","分别","另外","一种","开始","到","中间","求和","过程","只","需要","比如","sum","一帧","定义","进度","话题","周期","在","数值","布尔值","一边","最终","不同","中","文件","srv","我们","部分","保证","无关","就行","a","msg","、","编译","对应","自动","语言","10","由于","动作","里","整型","加法","度","是","转到","30","两","了","区分","这里","int64","布尔","机器","知道","数","20","传输","位","32","小海龟","运动","编程","每隔","当前"],"title":"语言无关","title_tokens":["语言","无关"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_4","text":"大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。","text_tokens":["。","到底","系统","文件夹","哪些","share","可能","接口","？","，","标准","了","定义","大家","几个","给","在","涵盖","路径","找到","ros","打开","安装","中","文件","件夹","我们","看看","可以","呢","众多","好奇","的"],"title":"标准接口","title_tokens":["接口","标准","标准接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_5","text":"了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。","text_tokens":["课程","下","。","服务","第一个","提供","再","使用","之前","二个","这样","第三个","通信","驱动","第二个","收到","了解","对象","概念","回顾","来","接口"," ","是","节点","，","目标","需要","三个","了","发布","定义","代码","发送","编写","研究","例程","第三","接下来","时候","服务端","就","第一","话题","机器","在","有","讲解","进行","以及","视觉","请求","如何","接下","中","识别","查询","下来","图像","封装","我们","相机","第二","可以","角度","一个","从","实现","通信接口","位置","的"],"title":"案例一：服务接口的定义与使用","title_tokens":["服务","使用","接口","与","：","案例","一","定义","的"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_6","text":"在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ...","text_tokens":["y","服务","x","。","也","packages","...",">","添加","还","反馈","会","接口","，","两个","服务端","就","#","完成",".","int32","runtime","interfaces","(","这个","find","default","的话","为","功能","使用","rosidl","/","上边","通信","depend","让","\"","表示",")","选项"," ","bool","{","目标","代码","例程","坐标","build","learning","_","---","生成","位置","的","指令","：","根据","过程","package","xml","interface","获取","需要","定义","generate","getobjectposition","编译器","在","$","中有","true","不同","中","文件","generators","srv","我们","部分","接口定义","txt","member","get","、","编译","一次","自动","<","语言","name","project","}","依赖","是","配置","了","required","exec","后","cmakelists","包","of","group","代码生成"],"title":"接口定义","title_tokens":["接口定义","接口","定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_7","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["中","下","方法","。","再","使用","来","接口","在","我们","看","重点","代码","的"],"title":"程序调用","title_tokens":["调用","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_8","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["y","服务","x","coding","break","库","object","...","=","init","\\","python3","for","env","super","接口","初始化","future","节点","，","等待","utf","!","python","import","#","response",".","node","8","shutdown","done","居","objectclient","(","识别","自定","销毁","except","position","destroy","info","rclpy","waiting","/","应答","async","com","'",",","\"","ros2",")"," ","目标","d","r","www","logger","关闭","result","args","请求","service","timeout","learning","wait","_","not",":","n","位置","的","初始","from","once","类","send","create","available","*","e","interface","-","else","定义","call","while","request","def","getobjectposition","创建","spin","1.0","target","if","true","usr","__","bin","main","srv","get","client","try","%","说明","py","ok","name","作者","again","none","对象","示例","@","self","failed","父类","进行","class","并","exception","自定义","of","sec","guyuehome","as","古月"],"title":"客户端接口调用","title_tokens":["调用","客户","接口","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_9","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["y","服务","x","findcontours","coding","宽","库","int","object","=","bridge","upper","反馈","255","data","retr","下限","init","video","\\","[","python3","inrange","for","env","高","显示","super","接口","初始化","物体","节点","，","务器","等待","左上角","得到","出来","utf","in","!","勾勒","imshow","python","输出","红色","command","已经","import","msgs","#","与","阈值","list","raw",".","node","8","面积","response","0","居","范围","点画","listener","(","180","识别","去除","objecty","自定","detect","效果","循环","shutdown","销毁","轮廓","red","approx","90","position","将","objectx","info","destroy","2","为","提供","rclpy","contours","使用","提示","/","上角","信息","函数","bgr2hsv","com","'","和","收到","噪声","lower",",","]","接口类","\"","image","img","ros2","苹果","1","进入",")","像素"," ","50","目标","d","www","logger","检测","队列","所在","sub","128","化成","关闭","color","数据","坐标","args","计算","cvtcolor","转化","ros","请求","frame","service","+","learning","cvbridge","waitkey","hsv","订阅","日志","_","一个","类型",":","n","的","array","初始","from","circle","类","create","callback","mask","return","转换","xy","回调","退出","消息","*","cv2","shape","左上","interface","numpy","-","else","上限","模型","subscription","定义","执行","request","def","getobjectposition","np","创建","名","spin","话题","target","opencv","if","h","sensor","数值","图像处理","true","usr","__","中","bin","cv","srv","imgmsg","main","服务器","对","从","bgr","及","get","msg","、","150","chain","%","<","说明","用于","10","py","转化成","入口","name","作者","对象","none","invalid","示例","长度","cnt","@","一些","self","（","二值化","5","）","父类","hierarchy","太小","server","imagesubscriber","进行","continue","boundingrect","已","处理","颜色","后","class","并","互相","bgr8","接口类型","自定义","w","to","receiving","图像","drawcontours","者","guyuehome","主","as","古月","中心"],"title":"服务端接口调用","title_tokens":["服务端","服务","接口","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_10","text":"话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。","text_tokens":["服务","。","不管","也","之前","衍生","通信","接口","是","想","，","目标","需要","发布","定义","没有","换成","有没有","人","话题","机器","周期","案例","视觉","识别","继续","中来","我们","类似","把","从","通信接口","位置","的"],"title":"案例二：话题接口的定义与使用","title_tokens":["使用","接口","话题","与","：","案例","二","定义","的"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_11","text":"现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub","text_tokens":["第一个","。","cam","topic","功能","使用","二个","此时","：","object","希望","驱动","第二个","第三个","exe","；","终端","image","到","消息","会","运行","以上","ros2","来","usb"," ","是","节点","，","目标","run","interface","需要","标准","三个","发布","现在","定义","sub","第三","就","第一","话题","打印","数据","$","node","视觉","并","ros","中","识别","这个","启动","pub","成","出去","learning","图像","封装","订阅","我们","分别","相机","第二","谁","_","一个","将","位置","的"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_12","text":"在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ...","text_tokens":["y","服务","x","。","...","还","objectposition","接口","，","内容","#","完成",".","int32","interfaces","(","这个","find","描述","default","功能","使用","rosidl","/","通信","让","\"","表示",")","选项"," ","{","目标","代码","标值","例程","坐标","坐标值","learning","_","一个","生成","位置","的","：","根据","消息","过程","package","interface","需要","定义","generate","编译器","话题","在","$","不同","中","generators","我们","接口定义","txt","msg","、","编译","自动","语言","name","project","}","是","配置","了","进行","required","后","cmakelists","包"],"title":"接口定义","title_tokens":["接口定义","接口","定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_13","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["中","下","方法","。","再","使用","来","接口","在","我们","看","重点","代码","的"],"title":"程序调用","title_tokens":["调用","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_14","text":"learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["y","x","findcontours","coding","宽","库","int","object","=","bridge","upper","255","data","retr","下限","init","video","[","objectposition","python3","inrange","for","env","高","显示","super","接口","初始化","节点","，","等待","左上角","得到","出来","utf","in","!","勾勒","imshow","python","输出","红色","import","msgs","#","与","阈值","publisher","raw",".","node","8","发布者","list","0","居","范围","点画","listener","(","180","pub","去除","objecty","自定","detect","效果","循环","shutdown","销毁","轮廓","red","approx","90","position","将","objectx","info","destroy","2","为","contours","rclpy","使用","提示","webcam","/","上角","信息","函数","bgr2hsv","com","'","和","噪声","lower",",","]","xy","\"","image","img","ros2","苹果","1","进入",")","像素"," ","50","目标","www","logger","检测","队列","所在","sub","128","化成","关闭","color","坐标","args","计算","cvtcolor","转化","ros","frame","+","learning","cvbridge","waitkey","hsv","订阅","日志","_","一个","类型",":","位置","的","topic","array","初始","from","circle","类","create","callback","mask","转换","回调","退出","消息","*","cv2","shape","左上","interface","numpy","-","发布","上限","模型","subscription","定义","def","np","创建","名","spin","话题","if","opencv","h","sensor","数值","图像处理","usr","__","中","bin","cv","main","imgmsg","从","bgr","及","get","msg","、","150","chain","面积","说明","用于","10","<","py","转化成","入口","name","作者","对象","none","示例","长度","cnt","@","一些","self","（","二值化","5","）","父类","publish","hierarchy","太小","imagesubscriber","进行","continue","boundingrect","已","处理","颜色","后","class","并","互相","bgr8","自定义","w","to","receiving","图像","drawcontours","者","guyuehome","主","as","古月","中心"],"title":"发布者接口调用","title_tokens":["调用","接口","发布者","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_15","text":"learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["y","x","coding","subscribernode","库","object","=","init","\\","objectposition","python3","字符","env","super","接口","初始化","节点","，","string","等待","utf","!","输出","python","import","msgs","#","主","shutdown",".","node","8","居","listener","(","自定","循环","销毁","position","destroy","info","提示","rclpy","/","信息","函数","com","'","收到",",","\"","ros2",")","字符串"," ","目标","d","www","logger","队列","sub","关闭","数据","args","learning","订阅","日志","_","一个","类型","std",":","位置","的","topic","初始","from","类","create","callback","回调","退出","消息","*","interface","-","subscription","定义","执行","def","创建","名","spin","话题","target","usr","__","bin","main","对","get","msg","、","%","说明","10","py","入口","name","作者","对象","none","示例","长度","@","self","（","父类","进行","处理","后","class","并","自定义","者","guyuehome","古月"],"title":"订阅者接口调用","title_tokens":["调用","接口","者","订阅"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_16","text":"接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义","text_tokens":["包中","功能","<","查看","：","如下",">","系统","name","ros2","接口"," ","package","interface","操作","定义","列表","某个","详细","#","list","$","show","常用","命令","接口定义","_","的"],"title":"接口命令行操作","title_tokens":["命令行","接口","操作","命令"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_17","text":"https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["single","/","define","tutorials","en","org"," ","package","interface","-","and","html","use",".","docs","ros","interfaces","humble","concepts","about","https",":"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/","text":"动作 机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。 通信模型 举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。 客户端/服务器模型 动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。 一对多通信 和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。 同步通信 既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。 由服务和话题合成 大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。 案例一：小海龟的动作 我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback 案例二：机器人画圆 如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。 运行效果 启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。 接口定义 例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是 动作的目标 ，enable为true时，表示开始运动； 第二块是 动作的执行结果 ，finish为true，表示动作执行完成； 第三块是 动作的周期反馈 ，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ... 通信模型 通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。 服务端代码解析 learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], }, 客户端代码解析 learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], }, 动作命令行操作 动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["服务","coding","是不是","合适","再用","上","介绍","按照","接收","for","env","接口","future","，","包含","等待","就此结束","有没有","之后","就","转","发布者","response","一","int32","8","名字","居","一起","这个","find","—","效果","自定","举个","一段时间","肯定","每","功能","一下","rosidl","rclpy","隐藏","点","/","通信","但","和","试一试","ros2","key","表示","console","机制","被","理","目标","基于","www","二","模拟","例程","第一","args","由","先","ros","行为","应用","sleep","日志","把","一个","---","类型","时",":","看到","动图","加入","控","方式","画圆","org","到","消息","运行","数据类型","package","获取","相对","顺利","比如","某","发出","创建","名","if","看","简单","下来","我们","接口定义","第二块","client","msg","好","一次","<","语言","说明","ok","一样","指定","turtlesim","第一块","作者","moving","只有","毕竟","对象","示例","project","度","}","--","30","一块","标准","父类","不会","rejected","第三","便于","一段","theta","处理","并","多少度","接口类型","movecircleactionclient","自定义","服务器端","读取","成功","服务器","思路","直到","也","再","库","...","一对","到底",">","会","super","结果","两个","智能","!","输出","python","服务端","程序","状态","完成","有","absolute","shutdown",".","node","list","多","docs","0","方法","干什么","(","interfaces","识别","等","循环","仅仅","actionserver","异步","只能","海龟","编写","destroy","链接","分拣","1s","解析","这样","信息","上边","move","完整","时间","来",")","选项","遥控","不仅","三个","特性","logger","代码","关闭","发现","多少","分析","达到","坐标","是否","而是","learning","实际","可以","机械","类似","假设","circle","tutorials","根据","callback","过","return","succeed","退出","写","*","？","不是","-","html","generate","结束","spin","一点一点","周期","抓取","其实","$","直接","state","handle","一边","打开","__","humble","部分","对","goal","%","accepted","py","秘密","多个","当","动","调用","理解","当中","列表","server","负责","进行","required","进度条","知道","案例","后","又","取消","真器","guyuehome","同时","古月","。","之前","很","虽然","希望","type","像","还","[","概念","反馈","python3","具体","模块","可能","初始化","节点","360","所处","in","这种","常常","某个","合成","#","通过","接下","针对","销毁","封装","i","这么","角度","应用层","以下","圆周运动","info","如何","拒绝执行","仿真器","async","com","'","收到","如下","接口类","]","\"","管理"," ","{","还会","d","现在","导航","清楚","得","数据","result","姿态","竟然","wait","_","not","received","生成","实现","这些","通信接口","的","位置","另外","一种","初始","指令","send","加深","例子","系统","understanding","过程","满足","interface","如果","第三块","模型","底层","不","执行","actionclient","大家","进度","def","用到","在","同步","命令行","最终","usr","这","中","文件","generators","需求","第二","txt","actions","、","编译","下","才能","add","客户","入口","none","拒绝","想","entry","配置","了","movecircle","publish","复杂","20","class","告诉","含义","小海龟","运动","没错","https","当前","者","都","=","相比","data","en","init","一点","随时","键盘","背后","务器","控制","什么","utf","原理","没有","接下来","import","主","请","teleop","done","应带","圈","turtle","finish","其","转个","既然","仔细","呢","更为","default","为","使用","小海","1.57","函数","送货","action","让","time",",","臂","机器人","points","场景","一套","处理函数","run","bool","rotateabsolute","流程","旋转","发送","movecircleactionserver","设置","scripts","请求","range","命令","订阅","较长","；","开始","分别","二块","setup","from","实时","那","客户端","：","类","通信模型","回调","就此","不仅仅","需要","发布","使","定义","参考","仿真","编译器","转圈","话题","true","不同","送餐","眼前","启动","目的","发送给","bin","main","从","圆周","get","自动","查看","10","enable","动作","哪里","name","终端","turtle1","能","@","送给","是","就是","self","（","rotate","操作","整个","）","三块","机器","某一","0.5","feedback","起来","cmakelists","但是","常用","包","段时间","编程","装","每隔","publishing","execute","根本"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_1","text":"机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。","text_tokens":["。","另外","一种","好","功能","也","很","分拣","那","动作","通信","送货","系统","完整","上","机器人","管理","的","场景","会","概念","具体","机制","被","满足","是","遥控","不仅仅","，","键盘","目标"," ","就是","需要","理解","智能","不仅","流程","这种","常常","某个","用到","进行","就","便于","机器","在","复杂","某一","并","ros","名字","行为","应用","送餐","识别","等","中","—","运动","这个","含义","简单","仅仅","目的","这么","我们","需求","可以","对","一个","从","实现","这些","、"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_2","text":"举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。","text_tokens":["。","直到","再","合适","到底","像","还","一点","反馈","随时","，","360","没有","有没有","之后","就","完成","转","圈","转个","更为","举个","一段时间","肯定","一下","使用","1s","这样","信息","通信","让","机器人","时间","表示","机制"," ","现在","旋转","发送","多少","得","行为","命令","可以","把","一个","假设","开始","的","指令","控","例子","到","过程","？","不是","如果","需要","比如","不","执行","结束","发出","进度","一点一点","转圈","在","这","眼前","我们","、","才能","10","ok","动作","哪里","度","是","想","当中","30","了","机器","一段","进度条","知道","后","并","20","多少度","告诉","段时间","运动","取消","装","每隔","当前","根本"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_3","text":"动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。","text_tokens":["服务","。","使用","也","再","实时","客户端","信息","动作","客户","通信","和","收到","让","当","就此","臂","机器人","反馈","动","过程","可能","是","想"," ","，","目标","如果","务器","控制","模型","什么","导航","所处","整个","执行","发送","结束","就此结束","之后","就","机器","周期","状态","抓取","达到","坐标","后","起来","姿态","一边","干什么","中","这个","服务器端","又","运动","当前","机械","类似","同时","一个","服务器","开始","的"],"title":"客户端/服务器模型","title_tokens":["服务","/","客户端","客户","务器","模型","服务器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_4","text":"和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。","text_tokens":["服务","下","。","才能","一样","客户端","动作","通信","客户","和","多个","只有","毕竟","机器人","，","务器","执行","发送","大家","机器","完成","有","先","但是","中","服务器端","运动","命令","可以","只能","都","一个","服务器","的"],"title":"一对多通信","title_tokens":["一对","多","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_5","text":"既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。","text_tokens":["。","一种","也","之前","使用","那","动作","通信","action","过","介绍","反馈","机制","过程","接口","是","，","定义","进行","有","同步","数据",".","中","文件","我们","既然","通信接口","的"],"title":"同步通信","title_tokens":["通信","同步"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_6","text":"大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。","text_tokens":["下","。","服务","一种","再","使用","也","是不是","隐藏","上边","客户端","动作","通信","客户","秘密","和","收到","当","来","反馈","会","表示","调用","模块","过程","不是"," ","是","还会","，","目标","就是","基于","两个","三个","务器","发布","底层","发送","大家","发现","话题","周期","机制","有","发布者","其实","应带","竟然","请求","看","应用","其","服务器端","运动","命令","没错","订阅","仔细","服务器","者","一个","应用层","时","实现","动图","的"],"title":"由服务和话题合成","title_tokens":["服务","合成","话题","由","和"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_7","text":"我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback","text_tokens":["。","使用","小海","仿真器","/","：","1.57","动作","加深","send","action","指定","turtlesim","让","再用","turtle1","\"","按照","概念","到","ros2","key","}"," ","run","{","，","理解","--","-","rotate","控制","rotateabsolute","某","仿真","接下来","absolute","案例","一","$","node","teleop","theta","feedback","姿态","turtle","接下","小海龟","启动","运动","命令","下来",":","我们","可以","真器","对","_","goal","海龟","以下","info","的"],"title":"案例一：小海龟的动作","title_tokens":["小海龟","小海","：","案例","一","动作","海龟","的"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_8","text":"如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。","text_tokens":["服务","。","好","使用","虽然","客户端","动作","希望","通信","客户","但","和","试一试","让","机器人","一套","来","？","接口"," ","是","过程","，","基于","特性","务器","代码","不会","接下来","就","话题","机器","在","有","请","直接","并","圈","方法","而是","如何","通过","中","接下","一起","服务器端","编程","针对","实际","下来","封装","转个","我们","呢","一个","服务器","实现","假设","的"],"title":"案例二：机器人画圆","title_tokens":["机器人","机器","：","案例","二","画圆"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_9","text":"启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。","text_tokens":["每","服务","。","下","一次","一下","客户端","：","信息","动作","客户","action","和","move","终端","机器人","示例","ros2","度","反馈","运行"," ","run","，","目标","背后","30","两个","务器","模拟","原理","发送","结束","client","例程","server","接下来","服务端","之后","就","机器","完成","分析","$","并","最终","接下","中","这个","服务器端","启动","运动","命令","learning","下来","开始","我们","可以","服务器","_","看到","实现","分别","的"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_10","text":"例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是 动作的目标 ，enable为true时，表示开始运动； 第二块是 动作的执行结果 ，finish为true，表示动作执行完成； 第三块是 动作的周期反馈 ，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ...","text_tokens":["。","...","还","反馈","接口","结果","，","包含","#","完成",".","int32","finish","interfaces","通过","(","find","自定","角度","default","为","功能","使用","rosidl","/","action","让","\"","机器人","表示",")","选项"," ","bool","{","目标","三个","代码","旋转","例程","第一","是否","ros","learning","_","---","；","时","生成","位置","开始","的","二块","指令","：","根据","到","过程","不是","package","interface","需要","第三块","定义","执行","generate","编译器","周期","在","$","state","true","不同","中","generators","我们","部分","第二","第二块","txt","接口定义","编译","自动","语言","enable","动作","第一块","name","project","}","是","一块","标准","配置","movecircle","第三","三块","进行","机器","required","后","并","cmakelists","自定义","包","运动","成功","当前"],"title":"接口定义","title_tokens":["接口定义","接口","定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_11","text":"通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。","text_tokens":["思路","服务","。","一下","之前","这样","客户端","信息","动作","通信","客户","和","相比","通信模型","机器人","反馈","运行","写","送给"," ","就是","理","，","目标","相对","务器","控制","模型","清楚","代码","发送","结束","例程","接下来","程序","机器","周期","话题","分析","一","后","并","起来","接下","运动","发送给","下来","我们","较长","一个","服务器","开始","的"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_12","text":"learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["服务","coding","库","...","=","init","[","python3","反馈","for","env","super","接口","初始化","结果","节点","360","，","务器","等待","utf","in","!","python","服务端","import","之后","程序","#","主","完成","shutdown",".","node","8","0","居","finish","(","自定","循环","actionserver","销毁","i","角度","圆周运动","destroy","info","编写","功能","rclpy","点","/","信息","函数","action","com","'","收到","move","如下","接口类","time",",","让","\"","points","]","ros2","表示","console","处理函数",")","选项"," ","{","目标","d","www","logger","代码","关闭","movecircleactionserver","result","设置","args","scripts","range","learning","sleep","_","一个","类型",":","加入","的","setup","初始","from","circle","：","类","callback","return","系统","succeed","回调","退出","到","消息","*","interface","-","需要","发布","定义","执行","def","创建","名","spin","周期","state","handle","最终","true","打开","usr","__","文件","bin","main","服务器","从","goal","圆周","get","、","msg","编译","%","说明","py","动作","入口","name","作者","moving","none","对象","示例","度","}","@","self","entry","（","30","配置","movecircle","）","父类","publish","server","负责","进行","知道","处理","0.5","后","feedback","class","并","接口类型","自定义","包","运动","成功","当前","guyuehome","publishing","execute","古月"],"title":"服务端代码解析","title_tokens":["服务端","服务","解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_13","text":"learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["服务","coding","库","希望","=","init","接收","[","python3","for","反馈","env","super","接口","初始化","future","节点","，","结果","务器","等待","utf","!","输出","python","之后","import","程序","#","主","完成","response",".","node","8","shutdown","done","居","finish","(","自定","循环","销毁","异步","圆周运动","destroy","info","编写","为","拒绝执行","功能","rclpy","点","/","函数","async","action","com","'","收到","move","如下","接口类",",","让","]","\"","机器人","points","ros2","console",")","被","选项"," ","{","目标","d","www","logger","代码","关闭","发送","数据","result","设置","args","scripts","请求","learning","wait","日志","_","not","一个","received","类型",":","时","开始","的","加入","setup","初始","from","客户端","circle","：","类","send","方式","callback","return","系统","回调","退出","消息","*","interface","如果","-","获取","需要","顺利","使","定义","执行","actionclient","def","创建","名","spin","周期","if","state","handle","最终","true","打开","usr","__","启动","文件","bin","main","服务器","goal","圆周","client","、","msg","get","编译","%","说明","add","accepted","py","enable","动作","客户","入口","name","作者","拒绝","none","对象","示例","能","}","@","self","entry","（","配置","movecircle","）","父类","rejected","server","进行","机器","知道","处理","后","feedback","class","并","接口类型","movecircleactionclient","自定义","包","服务器端","运动","读取","guyuehome","古月"],"title":"客户端代码解析","title_tokens":["客户","解析","代码","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_14","text":"动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求","text_tokens":["服务","<","查看","：","动作","send","type","action","如下",">","data","name","ros2","数据类型"," ","操作","发送","列表","#","list","数据","$","请求","常用","命令","_","类型","goal","info","的"],"title":"动作命令行操作","title_tokens":["动作","命令行","操作","命令"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["humble","ros2","/","https","html","tutorials",".","docs","-","ros","en",":","understanding","org","actions"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/","text":"参数 话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。 通信模型 比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。 全局字典 在ROS系统中，参数是以 全局字典 的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。 可动态监控 在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。 案例一：小海龟例程中的参数 在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 启动两个终端，分别运行小海龟仿真器和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看参数列表 当前系统中有哪些参数呢？我们可以启动一个终端，并使用如下命令查询： $ ros2 param list 参数查询与修改 如果想要查询或者修改某个参数的值，可以在param命令后边跟get或者set子命令： $ ros2 param describe turtlesim background_b # 查看某个参数的描述信息 $ ros2 param get turtlesim background_b # 查询某个参数的值 $ ros2 param set turtlesim background_b 10 # 修改某个参数的值 参数文件保存与加载 一个一个查询/修改参数太麻烦了，不如试一试参数文件，ROS中的参数文件使用yaml格式，可以在param命令后边跟dump子命令，将某个节点的参数都保存到文件中，或者通过load命令一次性加载某个参数文件中的所有内容： $ ros2 param dump turtlesim >> turtlesim.yaml # 将某个节点的参数保存到参数文件中 $ ros2 param load turtlesim turtlesim.yaml # 一次性加载某一个文件中的所有参数 案例二：参数编程 接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。 运行效果 启动一个终端，先运行第一句指令，启动param_declare节点，终端中可以看到循环打印的日志信息，其中的“mbot”就是我们设置的一个参数值，参数名称是“robot_name”，通过命令行修改这个参数，看下终端中会发生什么？ $ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle 代码解析 我们来看下在代码中，如何声明、创建、修改一个参数的值。 learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], }, 案例三：机器视觉应用 参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。 运行效果 启动三个终端，分别运行： 相机驱动节点 视觉识别节点 修改红色阈值 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180 在启动的视觉识别节点中，我们故意将视觉识别中红色阈值的上限设置为0，如果不修改参数，将无法实现目标识别。 为了便于调整阈值，我们在节点中将红色阈值的限位修改为了ROS参数，通过命令行修改该参数的值，就可以实现视觉识别啦。 代码解析 我们来看下在视觉识别的代码中，是如何通过参数来设置阈值的。 learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["y","服务","本","declare","coding","x","宽","很多","exe","255","video","介绍","for","env","接口","，","等待","变化","来看","得到","勾勒","键值","imshow","红色","就","已经","面积","new","一","8","监控","居","这个","去除","高级","—","效果","approx","参数","全局","将","2","功能","提供","一下","rclpy","点","/","上角","通信","驱动","和","试一试","了解","ros2","key","console","表示","机制","像素","目标","核心","www","二","例程","从而","第一","args","条","由","先","ros","转化","默认值","应用","格式","一句","参数设置","相机","日志","把","一个","类型","看到",":","加入","曝光","考虑","mbot","方式","mask","org","到","消息","运行","cv2","shape","load","获取","上限","比如","某","subscription","比较简单","名","创建","分辨率","if","h","看","继续","下来","简单","我们","一两","等等","值","不如","timer","msg","一次","美颜","名称","set","优化","chain","说明","<","端口","动态","一样","指定","turtlesim","作者","对象","示例","度","哪些","}","父类","continue","便于","处理","并","互相","输入框","读取","默认","as","dump","再","也","故意","库","int","bridge",">","retr","输入","会","区域","super","两个","很大","!","输出","python","几个","程序","msgs","与","list","有","完成","shutdown",".","node","啦","raw","docs","0","范围","方法","(","180","识别","等","循环","red","nodeb","90","海龟","编写","destroy","子","丰富","链接","解析","叫","信息","可","存在","共享","易用性","xy","lower","image","进入","1","光线","来",")","选项","挺","特性","logger","三个","代码","关闭","化成","“","多少","color","坐标","是否","一两句","跟","b","learning","hsv","改变","可以","类似","辨率","变量","circle","tutorials","callback","第一句","退出","键和值","写","usb","*","？","不是","左上","-","html","spin","周期","$","数值","图像处理","一次性","打开","param","__","humble","部分","对","及","%","py","多个","号","长度","理解","二值化","无法","最新","作用","太小","列表","imagesubscriber","进行","boundingrect","s","已","知道","案例","颜色","后","to","drawcontours","办法","编码","真器","guyuehome","古月","。","object","upper","type","像","提高","下限","还","[","python3","高","显示","物体","可能","初始化","节点","定时器","内容","string","声明","in","定时","后边","某个","单位","合成","阈值","#","robot","integer","说干就干","点画","listener","通过","接下","detect","销毁","敏感","字典","该","info","如何","cam","叫做","contours","c++","仿真器","com","如下","'","]","\"","苹果","加载"," ","真实","{","三","d","秒","所在","两句","清楚","128","那个","连接","background","数据","计算","视觉","cvtcolor","cvbridge","”","_","实现","这些","或者","的","环境","一种","parameters","array","初始","指令","然后","重新","太","转换","系统","understanding","过程","all","numpy","如果","中将","模型","不","执行","大家","其他","def","np","用到","在","opencv","大大","命令行","中有","组成","usr","这","中","配置文件","限位","文件","cv","imgmsg","影响","bgr","、","编译","下","保存","入口","麻烦","none","传输方式","cnt","一些","entry","配置","了","立刻","hierarchy","parameternode","class","传输","体验","w","含义","小海龟","图像","https","当前","者","都","比较","中心","查询","findcontours","=","以","en","data","关注","init","inrange","键盘","hello","三种","控制","左上角","什么","出来","utf","转化成","时候","接下来","import","50","主","参数值","分辨","teleop","turtle","轮廓","非常","呢","描述","为了","为","提示","使用","小海","函数","bgr2hsv","全局变量","噪声","让",",","机器人","修改","points","parameter","run","想要","describe","易用","滑动","检测","队列","sub","发送","设置","scripts","frame","某些","nodea","+","命令","所有","waitkey","订阅","熟悉","分别","开始","setup","from","：","类","create","即可","value","通信模型","回调","需要","参考","仿真","话题","其中","调整","sensor","不同","图像识别","启动","提炼","发送给","成","bin","main","节","每次","从","get","150","就要","查看","用于","10","动作","哪个","访问","name","终端","发生","么","实现目标","@","送给","是","就是","self","（","整个","5","）","大大提高","不少","机器","打印","起来","问题","bgr8","常用","包","编程","receiving","形态","yaml","img"],"title":"参数","title_tokens":["参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_1","text":"话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。","text_tokens":["服务","本","一种","。","再","c++","变量","动作","通信","方式","全局变量","多个","共享","系统","了解","介绍","机器人","的","传输方式","运行","机制","来"," ","是","节点","，","三种","清楚","不","大家","程序","便于","话题","已经","在","数据","知道","机器","是否","ros","传输","某些","这","常用","中","—","编程","我们","参数","全局","节","可以","类似","字典","、"],"title":"参数","title_tokens":["参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_2","text":"比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。","text_tokens":["。","也","很多","像","关注","输入","会","区域","节点","，","很大","什么","时候","程序","就","阈值","面积","有","分辨","通过","识别","效果","参数","nodeb","功能","使用","驱动","和"," ","核心","滑动","那个","连接","多少","设置","条","视觉","是否","格式","nodea","参数设置","改变","相机","可以","或者","这些","辨率","分别","的","曝光","考虑","到","usb","过程","需要","比如","执行","分辨率","在","不同","这","中","配置文件","图像识别","文件","我们","部分","影响","等等","美颜","端口","一样","哪个","度","是","一些","就是","配置","整个","作用","进行","机器","后","问题","输入框","图像","编码","都"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_3","text":"在ROS系统中，参数是以 全局字典 的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。","text_tokens":["。","叫做","名称","为","也","使用","叫","一样","然后","像","以","存在","和","即可","系统","访问","号","键和值","？","是"," ","真实","，","理解","就是","了","什么","键值","后边","名","时候","就","合成","在","有","由","数值","参数值","ros","跟","组成","中","等","这个","编程","形态","我们","参数","全局","字典","可以","一个","或者","的"],"title":"全局字典","title_tokens":["全局","字典"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_4","text":"在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。","text_tokens":["。","丰富","也","共享","访问","修改","ros2","会","可能"," ","节点","，","如果","获取","特性","了","某","比如","立刻","最新","大家","其他","进行","从而","用到","在","有","知道","数值","这","中","高级","编程","非常","参数","可以","办法","对","都","一个","的"],"title":"可动态监控","title_tokens":["动态","监控","可"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_5","text":"在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 启动两个终端，分别运行小海龟仿真器和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["下","。","提供","也","小海","使用","仿真器","：","和","turtlesim","终端","ros2","key","运行"," ","run","节点","，","键盘","两个","控制","了","例程","不少","仿真","在","$","一","命令行","node","teleop","起来","turtle","方法","通过","中","小海龟","这个","含义","启动","命令","我们","参数","真器","_","熟悉","海龟","分别","的"],"title":"案例一：小海龟例程中的参数","title_tokens":["中","小海龟","例程","小海","：","案例","一","参数","海龟","的"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_6","text":"当前系统中有哪些参数呢？我们可以启动一个终端，并使用如下命令查询： $ ros2 param list","text_tokens":["使用","：","如下","系统","终端","ros2","哪些","？"," ","，","list","$","中有","并","param","启动","命令","当前","我们","参数","可以","呢","一个","查询"],"title":"查看参数列表","title_tokens":["参数","查看","列表"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_7","text":"如果想要查询或者修改某个参数的值，可以在param命令后边跟get或者set子命令： $ ros2 param describe turtlesim background_b # 查看某个参数的描述信息 $ ros2 param get turtlesim background_b # 查询某个参数的值 $ ros2 param set turtlesim background_b 10 # 修改某个参数的值","text_tokens":["子","set","查看","10","：","信息","turtlesim","或者","修改","ros2","想要"," ","describe","，","如果","后边","某个","#","在","background","$","跟","b","param","命令","参数","可以","描述","_","值","查询","get","的"],"title":"参数查询与修改","title_tokens":["参数","修改","与","查询"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_8","text":"一个一个查询/修改参数太麻烦了，不如试一试参数文件，ROS中的参数文件使用yaml格式，可以在param命令后边跟dump子命令，将某个节点的参数都保存到文件中，或者通过load命令一次性加载某个参数文件中的所有内容： $ ros2 param dump turtlesim >> turtlesim.yaml # 将某个节点的参数保存到参数文件中 $ ros2 param load turtlesim turtlesim.yaml # 一次性加载某一个文件中的所有参数","text_tokens":["子","一次","保存","使用","/","：","太","麻烦","turtlesim",">","试一试","或者","修改","到","ros2","加载"," ","节点","，","load","内容","了","某","后边","某个","#","在","$",".","ros","跟","一次性","param","通过","中","格式","文件","命令","所有","yaml","参数","可以","都","一个","将","dump","不如","查询","的"],"title":"参数文件保存与加载","title_tokens":["保存","文件","加载","与","参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_9","text":"接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。","text_tokens":["。","一下","就要","使用","函数","和","写","来","，","了","两句","比较简单","接下来","几个","程序","就","在","设置","先","一两句","方法","这","体验","接下","中","下来","简单","读取","我们","参数","可以","一两","都","比较","实现","开始","的"],"title":"案例二：参数编程","title_tokens":["编程","：","案例","参数","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_10","text":"启动一个终端，先运行第一句指令，启动param_declare节点，终端中可以看到循环打印的日志信息，其中的“mbot”就是我们设置的一个参数值，参数名称是“robot_name”，通过命令行修改这个参数，看下终端中会发生什么？ $ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle","text_tokens":["declare","下","名称","set","指令","信息","mbot","第一句","name","终端","发生","修改","ros2","会","运行","parameter","？","是","就是","节点","，"," ","run","什么","“","第一","打印","其中","robot","$","设置","命令行","数值","先","参数值","turtle","看","param","通过","中","这个","启动","一句","循环","命令","”","learning","我们","参数","可以","日志","_","一个","看到","的"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_11","text":"我们来看下在代码中，如何声明、创建、修改一个参数的值。 learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], },","text_tokens":["。","declare","coding","库","=","type","init","[","python3","env","super","接口","初始化","节点","，","定时器","hello","string","等待","来看","utf","声明","!","定时","输出","python","单位","import","程序","#","robot","主","new","shutdown",".","node","8","参数值","完成","居","(","循环","销毁","参数","将","编写","destroy","info","如何","2","为","功能","rclpy","点","/","信息","函数","com","'","如下","让",",","]","\"","修改","points","ros2","console","parameter",")","选项"," ","{","www","秒","logger","代码","关闭","发送","设置","args","scripts","默认值","learning","日志","_","一个",":","加入","的","parameters","setup","初始","from","mbot","：","重新","类","create","callback","value","系统","回调","退出","到","*","all","-","需要","执行","def","创建","spin","周期","在","数值","打开","usr","param","__","中","发送给","文件","bin","main","我们","从","值","timer","、","get","下","编译","set","%","说明","py","入口","指定","name","作者","none","对象","示例","}","@","送给","self","entry","（","配置","）","父类","列表","进行","s","parameternode","打印","知道","后","class","并","包","读取","guyuehome","默认","古月"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_12","text":"参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。","text_tokens":["下","。","优化","使用","也","再","动态","麻烦","易用性","提高","么","还","机器人","示例","的","修改","会","光线","运行","物体","？","过程"," ","是","不是","，","易用","挺","了","变化","来看","大大提高","代码","大家","程序","就","机器","已经","在","阈值","大大","设置","说干就干","视觉","先","看","不同","应用","中","识别","继续","效果","提炼","成","敏感","我们","参数","可以","呢","对","每次","把","比较","不如","环境","如何"],"title":"案例三：机器视觉应用","title_tokens":["机器","三","：","案例","视觉","应用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_13","text":"启动三个终端，分别运行： 相机驱动节点 视觉识别节点 修改红色阈值 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180 在启动的视觉识别节点中，我们故意将视觉识别中红色阈值的上限设置为0，如果不修改参数，将无法实现目标识别。 为了便于调整阈值，我们在节点中将红色阈值的限位修改为了ROS参数，通过命令行修改该参数的值，就可以实现视觉识别啦。","text_tokens":["cam","。","为","set","故意","：","object","驱动","exe","upper","终端","修改","实现目标","ros2","运行","parameter","usb"," ","run","节点","，","如果","目标","中将","值","三个","上限","不","无法","红色","便于","就","阈值","在","h","$","设置","node","调整","视觉","命令行","0","ros","啦","param","通过","180","识别","中","启动","detect","限位","learning","命令","red","我们","相机","参数","可以","_","为了","该","将","实现","分别","的"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_14","text":"我们来看下在视觉识别的代码中，是如何通过参数来设置阈值的。 learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], },","text_tokens":["y","。","declare","findcontours","coding","x","宽","库","int","object","=","bridge","upper","255","data","retr","下限","init","video","[","python3","inrange","for","env","高","显示","super","接口","初始化","节点","，","等待","左上角","得到","来看","utf","in","!","勾勒","出来","python","imshow","红色","输出","让","程序","import","阈值","#","msgs","与","integer","raw",".","node","8","参数值","list","0","居","范围","点画","listener","通过","(","识别","180","去除","detect","效果","循环","shutdown","销毁","轮廓","red","approx","参数","90","将","编写","destroy","info","如何","console","2","为","contours","rclpy","使用","提示","功能","点","/","上角","信息","函数","bgr2hsv","com","'","和","如下","噪声","lower",",","]","xy","\"","image","img","ros2","苹果","表示","1","parameter","进入","来",")","像素"," ","选项","{","50","目标","d","www","logger","检测","队列","所在","代码","128","sub","化成","关闭","color","设置","坐标","计算","视觉","cvtcolor","ros","转化","args","frame","scripts","+","learning","cvbridge","waitkey","hsv","订阅","日志","_","一个","类型",":","加入","的","array","初始","setup","from","circle","：","类","create","callback","mask","转换","value","系统","points","回调","退出","到","消息","*","cv2","shape","左上","numpy","-","需要","上限","模型","subscription","def","np","创建","名","spin","话题","if","在","opencv","h","sensor","数值","图像处理","完成","打开","usr","param","__","中","文件","bin","cv","main","imgmsg","我们","从","bgr","及","get","msg","、","下","150","编译","chain","%","面积","说明","用于","10","<","py","转化成","入口","name","作者","对象","none","示例","长度","}","cnt","@","是","一些","self","entry","（","二值化","配置","5","）","父类","hierarchy","太小","imagesubscriber","进行","continue","boundingrect","已","打印","知道","颜色","处理","后","class","并","互相","bgr8","w","包","to","receiving","图像","读取","drawcontours","者","guyuehome","主","as","古月","中心"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["humble","parameters","ros2","/","https","html","tutorials",".","docs","-","ros","en",":","understanding","org"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/","text":"分布式通信 智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。 分布式通信 什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。 分布式网络搭建 除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。 树莓派配置 在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。 装系统 我们先要给树莓派装系统，这里我们选择的是 Ubuntu Mate 针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/ 安装ROS2 在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。 编译代码 将我们课程的代码也下载到树莓派中，进行编译。 远程桌面 如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728 分布式数据传输 树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。 分布式网络分组 没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。 案例一：小海龟分布式控制 分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动： $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端 案例二：话题分布式通信 我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串： $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端 案例三：服务分布式通信 话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能： $ ros2 run learning_service service_adder_server # PC端 $ ros2 run learning_service service_adder_client 2 3 # 树莓派端 案例四：机器视觉分布式应用 以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体： $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 没有任何问题，视觉识别的效果如下。 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。 参考链接 https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["服务","上去","除了","很多","exe","结构","资源","同一","卡顿","上","分布式应用","打通","字符","测试","虚拟","，","sd","变化","红色","局域网络","摄像头","之后","就","顺利实现","已经","发布者","讲","一","带来","监控","—","效果","没","不在","端","试试","将","派里","每","2","功能","一下","提供","客户端程序","/","通信","驱动","和","反过来","ros2","key","机制","学习","qq","字符串","不够","details","二","模拟","例程","依然","export","id","出现","csdn","122599728","由","先","ros","attention","应用","安装","镜像","一句","更强","原本","一个","情况",":","加入","位于","确保","方便","org","到","同一个","运行","资料","顺利","比如","互联","相互","较","几乎","放","继续","而言","计算能力","下来","我们","做","client","轻松","好","<","一样","turtlesim","简而言之","毕竟","感觉","这里","处理","并","派装","全都","成功","任何","服务器","也","再",">","会","如","两个","智能","之间","给","程序","完成","有","啦",".","步骤","node","放在","多","docs","方法","等","识别","款","download","海龟","编写","链接","webcam","叫","上边","信息","这样","减轻","桥接","控制器","来","派端","系列","挺","代码","是否","桌面","而是","service","learning","实际","可以","计算机","电机","于是","我","类似","两者","分组","像头","topic","笔记本电脑","选择","卡中","your","过","任务","网络","放置","如此","pc","以上","主要","usb","？","不是","似乎","之一","-","一系列","所","树莓","反过","html","网上","真有","$","直接","互通","humble","基本","world","你","电脑","传感","py","52785580","多个","采用","无法","过来","server","进行","不过","案例","后","平台","看上","blog","分布","看上去","真器","支持","。","之前","先要","希望","像","经典","压力","还","显示","cpp","具体","mate","物体","可能","节点","一致","这种","频繁","整体","#","此外","net","3","传感器","listener","通过","接下","pub","感受","concepts","about","nodes","针对","摄像","派","据传","这么","魅力","设计","cam","仿真器","岂","如下","作为"," ","三","连接","数据传输","数据","计算","视觉","分布式","之外","处于","_","经常","实现","这些","环境","的","或者","笔记本","另外","有点","下载","然后","友好","系统","如果","典型","不","大家","布式","消耗","繁多","用到","在","命令行","中有","组成","这","中","能力","安排","、","编译","下","讲过","talker","才能","客户","里","框架","加法","性能","一些","想","个","配置","了","他们","烧写","一系","遇到","复杂","传输","分配","小海龟","运动","图像","https","者","都","比较","只要","显示器","=","en","远程桌面","则","demo","键盘","流畅","hello","小组","控制","务器","什么","没有","拆解","神奇","接下来","鼠标","domain","请","teleop","还是","turtle","非常","建立","完全","呢","采集","笔记","的话","为","使用","小海","变得","适合","机器人","修改","helloworld","run","发给","感器","远程","不在话下","流程","sub","模式","开发","虚拟机","adder","命令","订阅","基本一致","用","ubuntu","实时","：","客户端","小型","即可","一切","求和","只","需要","发布","搭建","局域网","参考","分布式系统","仿真","话题","体积","不同","bashrc","各种","启动","课程","article","动作","带领","访问","算机","发生","是","就是","事情","操作","服务器程序","并且","端的","任务分配","机器","小","起来","问题","局域","装","四"],"title":"分布式通信","title_tokens":["分布式","布式","分布","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_1","text":"智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。","text_tokens":["。","功能","岂","多个","任务","减轻","里","卡顿","算机","系统","上","压力","机器人","到","会","运行","、","？","不是"," ","就是","，","不够","如果","智能","经常","拆解","布式","分布式系统","繁多","任务分配","机器","遇到","出现","处理","计算","放在","多","平台","分布式","这","分配","等","中","全都","计算能力","分布","能力","可以","计算机","一个","情况","将","实现","这些","的"],"title":"分布式通信","title_tokens":["分布式","布式","分布","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_2","text":"什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。","text_tokens":["。","上去","之前","也","结构","资源","上","压力","还","可能","节点","，","两个","控制","什么","变化","这种","之间","接下来","就","已经","有","讲","此外","一","多","放在","监控","传感器","接下","等","感受","派","非常","款","魅力","完全","笔记","将","派里","设计","每","为","功能","叫","上边","信息","通信","驱动","和","减轻","作为","适合","机器人","控制器"," ","感器","挺","远程","数据","开发","由","计算","视觉","ros","分布式","应用","更强","原本","可以","计算机","电机","于是","一个","实现","这些","环境","的","笔记本","另外","笔记本电脑","有点","位于","方便","过","任务","系统","到","主要","运行","？","只","典型","之一","需要","树莓","比如","不","大家","布式","消耗","相互","分布式系统","较","在","体积","组成","不同","这","放","中","各种","下来","我们","做","下","好","电脑","传感","带领","算机","框架","毕竟","性能","是","就是","配置","了","采用","并且","机器","小","不过","复杂","处理","平台","起来","传输","分配","运动","看上","分布","看上去","都","比较","任何"],"title":"分布式通信","title_tokens":["分布式","布式","分布","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_3","text":"除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。","text_tokens":["笔记本","另外","笔记本电脑","。","使用","选择","除了","电脑","放置","上","机器人","控制器","，","控制","了","树莓","模拟","机器","在","计算","平台","之外","派","我们","我","一个","笔记","的"],"title":"分布式网络搭建","title_tokens":["布式","分布","搭建","分布式","网络"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_4","text":"在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。","text_tokens":["。","好","之前","也","很多","资料","，","需要","配置","树莓","网上","参考","大家","在","开发","有","先","派","我们","可以","都","环境","的"],"title":"树莓派配置","title_tokens":["派","配置","树莓"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_5","text":"我们先要给树莓派装系统，这里我们选择的是 Ubuntu Mate 针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/","text_tokens":["。","链接","先要","选择","ubuntu","卡中","下载","：","/","系统","org","到","mate","是"," ","，","sd","-","树莓","了","这里","烧写","给","之后","就",".","派装","启动","镜像","针对","派","https","我们","可以","download",":","的"],"title":"装系统","title_tokens":["系统","装"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#ros2","text":"在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。","text_tokens":["安装","中","。","ros2","好","mate","端","ubuntu"," ","电脑","在","，","一样","和","系统","流程","的"],"title":"安装ROS2","title_tokens":["安装","ros2"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_6","text":"将我们课程的代码也下载到树莓派中，进行编译。","text_tokens":["课程","中","。","到","也","进行","编译","派","下载","我们","，","树莓","将","代码","的"],"title":"编译代码","title_tokens":["代码","编译"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_7","text":"如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728","text_tokens":["。","的话","好","链接","使用","也","电脑","/","article","：","方便","52785580","和","如下","远程桌面","网络","访问","上","系统","以上","显示","qq"," ","，","如果","键盘","操作","一致","配置","树莓","远程","了","details","不","流程","参考","大家","连接","就","鼠标","整体","在","有","csdn","122599728","直接","步骤",".","net","桌面","通过","端","派","基本","https","blog","可以","_",":","显示器","基本一致","的"],"title":"远程桌面","title_tokens":["远程桌面","桌面","远程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_8","text":"树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。","text_tokens":["。","服务","之前","也","很多","希望","像","同一","打通","demo","cpp","会","具体","测试","如","虚拟","节点","，","两个","小组","什么","之间","神奇","局域网络","接下来","就","已经","完成","发布者","请","#","带来","listener","接下","等","效果","nodes","端","派","呢","将","为","一下","使用","这样","通信","和","如下","修改","桥接","ros2"," ","派端","run","连接","模式","计算","虚拟机","attention","而是","安装","命令","处于","订阅","可以","计算机","_","一个","分组","实现","的","用","确保","：","网络","pc","到","同一个","？","如果","需要","所","树莓","局域网","发布","不","互联","话题","在","$","直接","命令行","互通","中有","这","中","而言","启动","下来","我们","能力","做","讲过","、","你","talker","好","电脑","py","一样","动作","简而言之","里","算机","发生","是","事情","个","配置","了","感觉","他们","无法","并且","不过","后","平台","并","问题","局域","者","都","只要"],"title":"分布式数据传输","title_tokens":["布式","据传","分布","数据传输","数据","传输","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_9","text":"没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。","text_tokens":["。","提供","才能","<","电脑","这样","一样","：","your","通信","=","和",">","同一","即可","则","算机","ros2","到","同一个","机制"," ","，","如果","小组","配置","了","树莓","无法","export","端的","就","id","domain","在","$",".","计算","问题","ros","不同","bashrc","分配","中","没","一句","处于","派","我们","可以","计算机","类似","_","一个","两者","将","分组","实现","加入","的"],"title":"分布式网络分组","title_tokens":["布式","分布","分布式","分组","网络"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_10","text":"分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动： $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端","text_tokens":["。","之前","小海","也","电脑","仿真器","：","通信","过","turtlesim","网络","经典","上","反过来","pc","ros2","key","测试","学习","来","似乎","一些","想"," ","，","键盘","节点","流畅","run","派端","控制","了","树莓","反过","过来","神奇","布式","例程","依然","仿真","真有","已经","在","#","案例","$","node","先","是否","ros","turtle","teleop","分布式","中","小海龟","继续","—","启动","运动","端","派","成功","分布","我们","这么","建立","试试","可以","真器","_","海龟","或者","的"],"title":"案例一：小海龟分布式控制","title_tokens":["小海龟","布式","小海","分布","：","案例","一","控制","分布式","海龟"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_11","text":"我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串： $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端","text_tokens":["下","topic","之前","使用","电脑","：","通信","作为","修改","pc","ros2","字符","？","字符串"," ","run","helloworld","，","派端","hello","树莓","发布","不","代码","sub","例程","话题","#","在","发布者","$","直接","先","是否","pub","learning","端","派","订阅","我们","试试","可以","者","呢","_","world","情况","任何","编写","的"],"title":"案例二：话题分布式通信","title_tokens":["布式","话题","分布","：","案例","通信","二","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_12","text":"话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能： $ ros2 run learning_service service_adder_server # PC端 $ ros2 run learning_service service_adder_client 2 3 # 树莓派端","text_tokens":["服务","。","2","功能","也","客户端程序","电脑","客户端","：","客户","加法","pc","ros2","运行","求和"," ","派端","run","，","不在话下","树莓","务器","顺利","服务器程序","没有","server","程序","顺利实现","话题","#","$","还是","问题","adder","3","service","不在","learning","端","我们","可以","_","服务器","实现","client"],"title":"案例三：服务分布式通信","title_tokens":["服务","布式","分布","三","：","案例","通信","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_13","text":"以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体： $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 没有任何问题，视觉识别的效果如下。 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。","text_tokens":["支持","。","再","也","exe","上","还","会","测试","物体","节点","，","没有","红色","接下来","摄像头","频繁","#","啦","node","方法","通过","接下","识别","没","效果","摄像","端","派","非常","采集","将","cam","为","功能","使用","webcam","提供","变得","如下","机器人","修改","ros2"," ","run","派端","不够","发给","系列","模拟","sub","代码","连接","例程","开发","视觉","ros","分布式","learning","实际","可以","_","类似","一个","这些","像头","的","topic","实时","然后","：","小型","友好","系统","网络","如此","pc","以上","一切","usb","？","一系列","需要","树莓","搭建","不","布式","用到","在","$","几乎","中","下来","我们","安排","做","轻松","好","电脑","配置","了","一系","端的","机器","复杂","处理","问题","图像","分布","都","任何","只要"],"title":"案例四：机器视觉分布式应用","title_tokens":["布式","机器","四","：","分布","案例","视觉","分布式","分布式应用","应用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_14","text":"https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["humble","concepts","about","id","/","https","domain","html",".","docs","-","ros","en",":","org"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2_%E6%A6%82%E5%BF%B5%E6%80%BB%E8%A7%88/","text":"从本节开始，我们将进入第二个篇章，以ROS2的核心概念为线索，详细讲解ROS2的应用开发方法。","text_tokens":["。","为","二个","开发方法","第二个","以","进入","ros2","概念","，","核心","本节","篇章","详细","开发","讲解","从本节","方法","线索","应用","我们","第二","将","开始","的"],"title":"概念总览","title_tokens":["总览","概念"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/","text":"Launch：多节点启动与配置脚本 到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是 Launch启动文件 ，它是ROS系统中多节点启动与配置的一种脚本。 Launch文件 这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。 多节点启动 先来看看如何启动多个节点。 运行效果 启动终端，使用ros2中的launch命令来启动第一个launch文件示例： $ ros2 launch learning_launch simple.launch.py 运行成功后，就可以在终端中看到发布者和订阅者两个节点的日志信息啦。 文件解析 这两个节点是如何启动的呢？我们来分析下这个launch文件。 learning_launch/simple.launch.py from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'learning_topic' , # 节点所在的功能包 executable = 'topic_helloworld_pub' , # 节点的可执行文件 ), Node ( # 配置一个节点的启动 package = 'learning_topic' , # 节点所在的功能包 executable = 'topic_helloworld_sub' , # 节点的可执行文件名 ), ]) 命令行参数配置 我们使用ros2命令在终端中启动节点时，还可以在命令后配置一些传入程序的参数，使用launch文件一样可以做到。 运行效果 比如我们想要运行一个Rviz可视化上位机，并且加载某一个配置文件，使用命令行的话，是这样的： $ ros2 run rviz2 rviz2 -d <PACKAGE-PATH>/rviz/turtle_rviz.rviz 命令后边还得跟一长串配置文件的路径，如果放在launch文件里，启动就优雅很多了： $ ros2 launch learning_launch rviz.launch.py 文件解析 命令行后边的参数是如何通过launch传入节点的呢？来看下这个launch文件。 learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 rviz_config = os . path . join ( # 找到配置文件的完整路径 get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'rviz2' , # 节点所在的功能包 executable = 'rviz2' , # 节点的可执行文件名 name = 'rviz2' , # 对节点重新命名 arguments = [ '-d' , rviz_config ] # 加载命令行参数 ) ]) 资源重映射 ROS社区中的资源非常多，当我们使用别人代码的时候，经常会发现通信的话题名称不太符合我们的要求，能否对类似的资源重新命名呢？ 为了提高软件的复用性，ROS提供了资源重映射的机制，可以帮助我们解决类似的问题。 运行效果 启动一个终端，运行如下例程，很快会看到出现了两个小海龟仿真器界面；再打开一个终端，发布如下话题，让海龟1动起来，海龟2也会一起运动： $ ros2 launch learning_launch rviz.launch.py $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 文件解析 为什么两个海龟都会动呢？这里要用到turtlesim功能包里另外一个节点，叫做mimic，它的功能是订阅某一个海龟的Pose位置，通过计算，变换成一个同样运动的速度指令，发布出去。 至于mimic节点订阅或者发布的话题名叫什么呢？我们就可以通过重映射修改成对应任意海龟的名字。 learning_launch/remapping.launch.py from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 namespace = 'turtlesim1' , # 节点所在的命名空间 executable = 'turtlesim_node' , # 节点的可执行文件名 name = 'sim' # 对节点重新命名 ), Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 namespace = 'turtlesim2' , # 节点所在的命名空间 executable = 'turtlesim_node' , # 节点的可执行文件名 name = 'sim' # 对节点重新命名 ), Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 executable = 'mimic' , # 节点的可执行文件名 name = 'mimic' , # 对节点重新命名 remappings = [ # 资源重映射列表 ( '/input/pose' , '/turtlesim1/turtle1/pose' ), # 将/input/pose话题名修改为/turtlesim1/turtle1/pose ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), # 将/output/cmd_vel话题名修改为/turtlesim2/turtle1/cmd_vel ] ) ]) ROS参数设置 ROS系统中的参数，也可以在Launch文件中设置。 运行效果 启动一个终端，运行如下命令： $ ros2 launch learning_launch parameters.launch.py 在启动的海龟仿真器中，我们看到背景颜色被改变了，这个颜色参数的设置就是在launch文件中完成的。 文件解析 我们看下在launch文件中如何来设置参数的。 learning_launch/parameters.launch.py from launch import LaunchDescription # launch文件的描述类 from launch.actions import DeclareLaunchArgument # 声明launch文件内使用的Argument类 from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) # 创建一个Launch文件内参数（arg）background_r ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) # 创建一个Launch文件内参数（arg）background_g ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) # 创建一个Launch文件内参数（arg）background_b ) return LaunchDescription ([ # 返回launch文件的描述信息 background_r_launch_arg , # 调用以上创建的参数（arg） background_g_launch_arg , background_b_launch_arg , Node ( # 配置一个节点的启动 package = 'turtlesim' , executable = 'turtlesim_node' , # 节点所在的功能包 name = 'sim' , # 对节点重新命名 parameters = [{ # ROS参数列表 'background_r' : LaunchConfiguration ( 'background_r' ), # 创建参数background_r 'background_g' : LaunchConfiguration ( 'background_g' ), # 创建参数background_g 'background_b' : LaunchConfiguration ( 'background_b' ), # 创建参数background_b }] ), ]) Attention launch文件中出现的argument和parameter，虽都译为“参数”，但含义不同： - argument：仅限launch文件内部使用，方便在launch中调用某些数值； - parameter：ROS系统的参数，方便在节点见使用某些数值。 加载参数文件 以上例程我们在launch文件中一个一个的设置参数，略显麻烦，当参数比较多的时候，建议使用参数文件进行加载。 learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 config = os . path . join ( # 找到参数文件的完整路径 get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 executable = 'turtlesim_node' , # 节点的可执行文件名 namespace = 'turtlesim2' , # 节点所在的命名空间 name = 'sim' , # 对节点重新命名 parameters = [ config ] # 加载参数文件 ) ]) Launch文件包含 在复杂的机器人系统中，launch文件也会有很多，此时我们可以使用类似编程中的include机制，让launch文件互相包含。 文件解析 learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch.actions import IncludeLaunchDescription # 节点启动的描述类 from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction # launch文件中的执行动作 from launch_ros.actions import PushRosNamespace # ROS命名空间配置 def generate_launch_description (): # 自动生成launch文件的函数 parameter_yaml = IncludeLaunchDescription ( # 包含指定路径下的另外一个launch文件 PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( # 对指定launch文件中启动的功能加上命名空间 actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ # 返回launch文件的描述信息 parameter_yaml_with_namespace ]) 功能包编译配置 ... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ... 参考链接 https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docs.ros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["y","x","上去","packages","files","很多","自由","资源","config","for","，","包含","textsubstitution","来看","有没有","就","发布者","空间","名字","一起","这个","效果","可视化","模版","参数","将","text","肯定","2","功能","提供","/","通信","但","和","了解","ros2","机制","被","sources","基于","核心","angular","中多","例程","第一","出现","cmd","先","ros","attention","includelaunchdescription","参数设置","多样化","日志","一个","看到",":","时","建议","呀","方式","方便","rate","org","到","with","运行","package","频次","看下","比如","某","名","创建","答案","glob","我们","msg","好","一次","名称","社区","<","一样","指定","turtlesim","示例","}","--","能否","executable","这里","os","互相","成功","原有","也","再","input","...",">","1.8","输入","粘合","会","sim","重","解决","两个","groupaction","python","程序","msgs","与","完成","有","啦",".","甚至","node","多","放在","0","docs","方法","(","海龟","编写","虽","丰富","链接","前为","解析","这样","信息","此时","include","完整","1","来",")","好像","系列","多样","代码","“","发现","arguments","分析","内部","跟","b","learning","行文","改变","可以","类似","当然","topic","译","tutorials","return","背景","以上","为什么","重新命名","？","*","-","一系列","同样","html","generate","$","数值","打开","一次性","humble","remapping","对","任意","ament","py","会动","多个","目前为止","当","动","调用","列表","进行","substitutions","launchdescription","路径","后","颜色","84","directory","namespace","看上","using","看上去","真器","第一个","。","帮助","乍","传入","launch","像","映射","提高","还","[","之高","mimic","节点","声明","后边","新","#","通过","pub","declarelaunchargument","output","如何","linear","叫做","仿真器","符合","'","如下","]","\"","share","速度","加载"," ","{","d","各个","所在","软件","background","得","turtlesim2","计算","做到","”","_","经常","生成","或者","位置","的","要求","另外","一种","parameters","指令","合剂","nonamespace","重新","系统","粘合剂","过程","如果","不太","执行","大家","z","def","用到","在","大大","找到","命令行","一长串","阅读","这","性","中","配置文件","优雅","文件","至于","仅限","actions","pythonlaunchdescriptionsource","编译","下","对应","麻烦","里","界面","一些","launchconfiguration","它","很快","配置","了","可视","这是","一系","resource","复杂","含义","小海龟","index","运动","没错","https","者","都","比较","查询","=","en","data","内","0.0","join","什么","名叫","相当","没有","别人","g","时候","import","simple","turtle","非常","呢","描述","为了","geometry","default","的话","为","使用","小海","函数","remappings","让",",","机器人","修改","为止","rviz2","parameter","large","helloworld","想要","run","r","122","可执行文件","sub","2.0","略显","设置","要","某些","上位","+","命令","所有","description","出去","turtlesim1","订阅","；","argument","rviz","from","目前","那","：","每当","类","value","加上","xml","需要","发布","长串","参考","复用","脚本","仿真","话题","不同","返回","各种","pose","启动","目的","成","main","arg","projects","每次","get","自动","命名","机","动作","带领","path","name","终端","turtle1","是","就是","（","见","组装","）","并且","机器","twist","起来","问题","变换","namespaces","pushrosnamespace","包","编程","yaml","vel","看看"],"title":"Launch","title_tokens":["launch"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch","text":"到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是 Launch启动文件 ，它是ROS系统中多节点启动与配置的一种脚本。","text_tokens":["。","一种","好","一次","目前","前为","这样","那","每当","很多","呀","方式","launch","麻烦","系统","目前为止","终端","机器人","到","为止","运行","？","是","就是","节点","，"," ","它","需要","中多","配置","没有","脚本","有没有","新","机器","与","答案","ros","打开","一次性","中","启动","命令","所有","文件","我们","可以","呢","每次","都","一个","当然","肯定","的"],"title":"Launch：多节点启动与配置脚本","title_tokens":["脚本","启动","与","节点","：","launch","多","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_1","text":"这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。","text_tokens":["。","上去","原有","也","乍","很多","launch","像","自由","输入","还","粘合","之高","节点","，","相当","python","就","甚至","通过","模版","参数","描述","呢","编写","如何","丰富","功能","使用","这样","和","完整","了解","ros2","来","好像"," ","系列","基于","核心","多样","各个","代码","例程","出现","ros","命令","多样化","可以","类似","一个","或者","的","合剂","那","呀","系统","粘合剂","过程","频次","一系列","大家","在","大大","命令行","阅读","中","各种","启动","目的","文件","我们","一样","带领","是","就是","它","配置","了","组装","这是","一系","进行","编程","看上","没错","看上去"],"title":"Launch文件","title_tokens":["launch","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_1","text":"先来看看如何启动多个节点。","text_tokens":["。","启动","来","节点","看看","先","多个","如何"],"title":"多节点启动","title_tokens":["启动","多","节点"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_2","text":"启动终端，使用ros2中的launch命令来启动第一个launch文件示例： $ ros2 launch learning_launch simple.launch.py 运行成功后，就可以在终端中看到发布者和订阅者两个节点的日志信息啦。","text_tokens":["第一个","。","使用","：","py","信息","launch","和","终端","示例","ros2","运行","来"," ","节点","，","两个","发布","就","第一","在","发布者","$","simple",".","后","啦","中","启动","命令","文件","learning","成功","订阅","可以","者","日志","_","一个","看到","的"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_3","text":"这两个节点是如何启动的呢？我们来分析下这个launch文件。 learning_launch/simple.launch.py from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'learning_topic' , # 节点所在的功能包 executable = 'topic_helloworld_pub' , # 节点的可执行文件 ), Node ( # 配置一个节点的启动 package = 'learning_topic' , # 节点所在的功能包 executable = 'topic_helloworld_sub' , # 节点的可执行文件名 ), ])","text_tokens":["下","。","topic","自动","功能","from","生成","/","py","函数","信息","类","=","launch","'","return",",","]","[","来","？",")","是"," ","节点","package","helloworld","executable","两个","配置","所在","可执行文件","generate","执行","sub","def","名","import","#","分析","simple",".","launchdescription","node","ros","这","返回","如何","(","这个","包","pub","启动","文件","learning","description","行文","我们","呢","_","描述","一个",":","actions","的"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_4","text":"我们使用ros2命令在终端中启动节点时，还可以在命令后配置一些传入程序的参数，使用launch文件一样可以做到。","text_tokens":["。","使用","一样","传入","launch","终端","还","ros2","一些","节点","，","配置","程序","在","后","中","启动","命令","文件","做到","我们","参数","可以","时","的"],"title":"命令行参数配置","title_tokens":["参数","命令行","配置","命令"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_5","text":"比如我们想要运行一个Rviz可视化上位机，并且加载某一个配置文件，使用命令行的话，是这样的： $ ros2 run rviz2 rviz2 -d <PACKAGE-PATH>/rviz/turtle_rviz.rviz 命令后边还得跟一长串配置文件的路径，如果放在launch文件里，启动就优雅很多了： $ ros2 launch learning_launch rviz.launch.py","text_tokens":["的话","rviz","使用","<","/","这样","：","机","很多","py","launch",">","里","path","还","ros2","rviz2","运行","加载","想要","是"," ","，","run","d","-","package","如果","配置","长串","了","某","比如","后边","可视","并且","就","得","$",".","命令行","路径","放在","一长串","turtle","跟","上位","配置文件","优雅","启动","文件","命令","learning","我们","可视化","_","一个","的"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_6","text":"命令行后边的参数是如何通过launch传入节点的呢？来看下这个launch文件。 learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 rviz_config = os . path . join ( # 找到配置文件的完整路径 get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'rviz2' , # 节点所在的功能包 executable = 'rviz2' , # 节点的可执行文件名 name = 'rviz2' , # 对节点重新命名 arguments = [ '-d' , rviz_config ] # 加载命令行参数 ) ])","text_tokens":["。","packages","传入","=","launch","[","config","节点","join","来看","后边","python","import","#",".","node","turtle","方法","通过","(","这个","参数","呢","描述","如何","功能","/","信息","函数","'","完整",",","]","share","rviz2","加载",")"," ","d","所在","可执行文件","arguments","ros","命令","learning","description","行文","_","一个","生成",":","的","rviz","from","重新","类","return","重新命名","？","package","-","generate","执行","def","名","找到","命令行","返回","配置文件","启动","文件","对","actions","get","下","自动","ament","命名","py","path","name","是","executable","配置","os","路径","launchdescription","包","directory","index","查询"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_7","text":"ROS社区中的资源非常多，当我们使用别人代码的时候，经常会发现通信的话题名称不太符合我们的要求，能否对类似的资源重新命名呢？ 为了提高软件的复用性，ROS提供了资源重映射的机制，可以帮助我们解决类似的问题。","text_tokens":["要求","。","名称","命名","社区","使用","提供","帮助","符合","重新","通信","资源","映射","提高","当","会","机制","重新命名","？"," ","能否","，","重","不太","解决","了","代码","复用","别人","软件","发现","时候","话题","多","ros","问题","性","中","非常","我们","可以","呢","对","类似","经常","为了","的"],"title":"资源重映射","title_tokens":["资源","映射","重"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_8","text":"启动一个终端，运行如下例程，很快会看到出现了两个小海龟仿真器界面；再打开一个终端，发布如下话题，让海龟1动起来，海龟2也会一起运动： $ ros2 launch learning_launch rviz.launch.py $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":["y","topic","x","2","linear","rviz","再","小海","也","仿真器","/","：","py","launch","如下","；","1.8","让","终端","rate","turtle1","界面","\"",",","ros2","动","会","运行","1","0.0","}"," ","--","{","，","很快","angular","两个","了","发布","例程","2.0","z","仿真","出现","话题","cmd","msgs","$",".","twist","起来","打开","一起","pub","小海龟","启动","运动","learning",":","vel","真器","_","一个","geometry","看到","海龟","msg"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_9","text":"为什么两个海龟都会动呢？这里要用到turtlesim功能包里另外一个节点，叫做mimic，它的功能是订阅某一个海龟的Pose位置，通过计算，变换成一个同样运动的速度指令，发布出去。 至于mimic节点订阅或者发布的话题名叫什么呢？我们就可以通过重映射修改成对应任意海龟的名字。 learning_launch/remapping.launch.py from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 namespace = 'turtlesim1' , # 节点所在的命名空间 executable = 'turtlesim_node' , # 节点的可执行文件名 name = 'sim' # 对节点重新命名 ), Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 namespace = 'turtlesim2' , # 节点所在的命名空间 executable = 'turtlesim_node' , # 节点的可执行文件名 name = 'sim' # 对节点重新命名 ), Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 executable = 'mimic' , # 节点的可执行文件名 name = 'mimic' , # 对节点重新命名 remappings = [ # 资源重映射列表 ( '/input/pose' , '/turtlesim1/turtle1/pose' ), # 将/input/pose话题名修改为/turtlesim1/turtle1/pose ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), # 将/output/cmd_vel话题名修改为/turtlesim2/turtle1/cmd_vel ] ) ])","text_tokens":["。","input","=","launch","映射","资源","[","mimic","sim","节点","，","重","两个","什么","名叫","就","import","#","空间",".","node","名字","通过","(","呢","描述","output","将","海龟","叫做","为","功能","/","信息","函数","'","remappings",",","]","修改","速度",")"," ","所在","可执行文件","cmd","turtlesim2","要","计算","ros","出去","learning","description","turtlesim1","订阅","行文","可以","_","一个",":","生成","或者","位置","的","另外","from","指令","重新","类","return","为什么","重新命名","？","package","同样","发布","某","generate","执行","def","名","用到","话题","返回","pose","remapping","启动","成","文件","我们","对","至于","任意","actions","对应","自动","命名","py","会动","turtlesim","里","name","turtle1","是","它","executable","配置","这里","列表","launchdescription","变换","包","运动","namespace","vel","都"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#ros","text":"ROS系统中的参数，也可以在Launch文件中设置。","text_tokens":["中","。","也","文件","在","，","参数","可以","launch","设置","ros","系统","的"],"title":"ROS参数设置","title_tokens":["参数设置","参数","设置","ros"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_10","text":"启动一个终端，运行如下命令： $ ros2 launch learning_launch parameters.launch.py 在启动的海龟仿真器中，我们看到背景颜色被改变了，这个颜色参数的设置就是在launch文件中完成的。","text_tokens":["。","parameters","仿真器","：","py","launch","如下","背景","终端","ros2","运行","被"," ","就是","，","了","仿真","在","完成","$",".","颜色","设置","中","这个","启动","命令","learning","文件","我们","改变","参数","真器","_","一个","看到","海龟","的"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_11","text":"我们看下在launch文件中如何来设置参数的。 learning_launch/parameters.launch.py from launch import LaunchDescription # launch文件的描述类 from launch.actions import DeclareLaunchArgument # 声明launch文件内使用的Argument类 from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) # 创建一个Launch文件内参数（arg）background_r ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) # 创建一个Launch文件内参数（arg）background_g ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) # 创建一个Launch文件内参数（arg）background_b ) return LaunchDescription ([ # 返回launch文件的描述信息 background_r_launch_arg , # 调用以上创建的参数（arg） background_g_launch_arg , background_b_launch_arg , Node ( # 配置一个节点的启动 package = 'turtlesim' , executable = 'turtlesim_node' , # 节点所在的功能包 name = 'sim' , # 对节点重新命名 parameters = [{ # ROS参数列表 'background_r' : LaunchConfiguration ( 'background_r' ), # 创建参数background_r 'background_g' : LaunchConfiguration ( 'background_g' ), # 创建参数background_g 'background_b' : LaunchConfiguration ( 'background_b' ), # 创建参数background_b }] ), ]) Attention launch文件中出现的argument和parameter，虽都译为“参数”，但含义不同： - argument：仅限launch文件内部使用，方便在launch中调用某些数值； - parameter：ROS系统的参数，方便在节点见使用某些数值。","text_tokens":["。","=","launch","内","[","sim","节点","，","textsubstitution","声明","g","import","#",".","node","0","(","declarelaunchargument","参数","描述","text","default","如何","虽","为","功能","使用","/","信息","函数","但","'","和",",","]","parameter","来",")"," ","{","r","122","所在","“","出现","background","设置","ros","内部","attention","b","某些","learning","description","”","_","一个","生成",":","；","argument","的","parameters","译","from","：","重新","类","方便","return","value","系统","以上","重新命名","package","-","看下","generate","def","创建","在","数值","不同","返回","中","启动","文件","arg","我们","对","仅限","actions","自动","命名","py","turtlesim","name","}","调用","launchconfiguration","executable","（","配置","见","）","列表","substitutions","launchdescription","84","包","含义","都"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_12","text":"以上例程我们在launch文件中一个一个的设置参数，略显麻烦，当参数比较多的时候，建议使用参数文件进行加载。 learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 config = os . path . join ( # 找到参数文件的完整路径 get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 executable = 'turtlesim_node' , # 节点的可执行文件名 namespace = 'turtlesim2' , # 节点所在的命名空间 name = 'sim' , # 对节点重新命名 parameters = [ config ] # 加载参数文件 ) ])","text_tokens":["。","packages","=","launch","[","config","sim","节点","，","join","python","时候","import","#","空间",".","node","多","方法","(","参数","描述","功能","使用","/","信息","函数","'","完整",",","]","share","加载",")"," ","所在","可执行文件","例程","略显","turtlesim2","设置","ros","learning","description","行文","_","一个","生成",":","的","parameters","from","建议","重新","类","return","以上","重新命名","package","generate","执行","def","名","在","找到","返回","中","启动","文件","我们","对","actions","get","自动","ament","命名","py","麻烦","turtlesim","path","name","当","executable","配置","进行","os","路径","launchdescription","包","directory","index","namespace","yaml","比较","查询"],"title":"加载参数文件","title_tokens":["加载","参数","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_2","text":"在复杂的机器人系统中，launch文件也会有很多，此时我们可以使用类似编程中的include机制，让launch文件互相包含。","text_tokens":["。","也","使用","此时","很多","launch","include","系统","让","机器人","会","机制","，","包含","机器","在","复杂","有","互相","中","文件","编程","我们","可以","类似","的"],"title":"Launch文件包含","title_tokens":["包含","launch","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_13","text":"learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch.actions import IncludeLaunchDescription # 节点启动的描述类 from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction # launch文件中的执行动作 from launch_ros.actions import PushRosNamespace # ROS命名空间配置 def generate_launch_description (): # 自动生成launch文件的函数 parameter_yaml = IncludeLaunchDescription ( # 包含指定路径下的另外一个launch文件 PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( # 对指定launch文件中启动的功能加上命名空间 actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ # 返回launch文件的描述信息 parameter_yaml_with_namespace ])","text_tokens":["packages","=","launch","[","节点","join","包含","groupaction","python","import","#","空间",".","方法","(","描述","功能","/","信息","函数","'",",","]","share","parameter",")"," ","sources","turtlesim2","ros","includelaunchdescription","learning","description","_","一个","生成",":","的","另外","parameters","from","nonamespace","类","return","加上","with","package","generate","执行","def","返回","中","启动","文件","对","actions","pythonlaunchdescriptionsource","get","下","自动","ament","命名","py","动作","指定","path","配置","os","路径","launchdescription","namespaces","pushrosnamespace","包","directory","index","namespace","yaml","查询"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_14","text":"... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ...","text_tokens":["rviz","ament","files","/","packages","py","...","=","launch","'","data","path","name",",","]","[","share","config","*",")"," ","package","xml","join","resource","os",".","glob","(","+","index","_"],"title":"功能包编译配置","title_tokens":["包","配置","功能","编译"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docs.ros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["/","tutorials","launch","en","org","ros2","for","large"," ","-","html",".","docs","ros","humble","using","main","https","projects",":"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/","text":"TF：机器人坐标系管理神器 坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器—— TF 。 机器人中的坐标系 机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做 基坐标系 Base Frame，机器人安装位置在外部环境下的参考系叫做 世界坐标系 World Frame，机器人末端夹爪的位置叫做 工具坐标系 ，外部被操作物体的位置叫做 工件坐标系 ，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是 基坐标系 Base Link，雷达所在的位置叫做 雷达坐标系 laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做 里程计坐标系 odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做 地图坐标系 map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为 平移和旋转 两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实就是向量的数学描述。 ROS中TF功能的底层原理，就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。 TF命令行操作 ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。 小海龟跟随例程 这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools $ sudo pip3 install transforms3d 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 当我们控制一只海龟运动时，另外一只海龟也会跟随运动。 查看TF树 在当前运行的两只海龟中，有哪些坐标系呢，我们可以通过这个小工具来做查看。 $ ros2 run tf2_tools view_frames 默认在当前终端路径下生成了一个frames.pdf文件，打开之后，就可以看到系统中各个坐标系的关系了。 查询坐标变换信息 只看到坐标系的结构还不行，如果我们想要知道某两个坐标系之间的具体关系，可以通过tf2_echo这个工具查看： $ ros2 run tf2_ros tf2_echo turtle2 turtle1 运行成功后，终端中就会循环打印坐标系的变换数值了，由平移和旋转两个部分组成，还有旋转矩阵。 坐标系可视化 看数值还不直观？可以试试用可视化软件来做显示： $ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 再让小海龟动起来，Rviz中的坐标轴就会开始运动，这样是不是更加直观了呢！ 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。 静态TF广播 我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为 静态TF变换 ，我们来看看在程序中该如何实现？ 运行效果 启动终端，运行如下命令： $ ros2 run learning_tf static_tf_broadcaster $ ros2 run tf2_tools view_frames 可以看到当前系统中存在两个坐标系，一个是world，一个是house，两者之间的相对位置不会发生改变，通过一个静态的TF对象进行维护。 代码解析 来看下在代码中是如何创建坐标系并且发布静态变换的。 learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？ TF监听 我们再来学习下如何查询两个坐标系之间的位置关系。 运行效果 启动一个终端，运行如下节点，就可以在终端中看到周期显示的坐标关系了。 $ ros2 run learning_tf tf_listener 代码解析 这个节点中是如何查询坐标关系的，我们来看下代码。 learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。 海龟跟随功能解析 还是之前小海龟跟随的示例，我们自己通过代码来实现一下。 运行效果 先看下实现的效果，启动终端后，通过如下命令启动例程： $ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 看到的效果和ROS自带的例程相同。 原理解析 在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心就是通过坐标系实现向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。 Launch文件解析 先来看下刚才运行的launch文件，里边启动了四个节点，分别是： 小海龟仿真器 海龟1的坐标系广播 海龟2的坐标系广播 海龟跟随控制 其中，两个坐标系的广播复用了turtle_tf_broadcaster节点，通过传入的参数名修改维护的坐标系名称。 learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ]) 坐标系动态广播 海龟1和海龟2在world坐标系下的坐标变换，在turtle_tf_broadcaster节点中实现，除了海龟坐标系的名字不同之外，针对两个海龟的功能是一样的。 learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 海龟跟随 坐标系都正常广播了，接下来我们就可以订阅两只海龟的位置关系，并且变换成速度指令进行控制啦。 learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":["y","declare","x","服务","coding","是不是","除了","很多","结构","高中","上","段","按照","trans","env","接口","statictransformbroadcaster","，","底盘","等待","变化","来看","得到","最为","之后","就","已经","publisher","空间","frames","8","漂移","关系","居","名字","一起","这个","—","效果","没","view","自带","house","可视化","试试","参数","全局","将","每","2","四个","false","提供","功能","rclpy","点","一下","pip3","/","和","方向","试一试","产生","了解","ex","ros2","key","console","on","表示","学习","被","算法","broadcaster","中是","基于","目标","transforms3d","还有","www","roll","核心","angular","例程","依然","id","cmd","移动机器人","args","由","先","线速度","ros","默认值","四乘","安装","两者之间","math","就绪","sqrt","一个","情况","时","看到",":","加入","broadcaster1","could","rate","org","到","消息","运行","称之为","transformstamped","连线","package","获取","相对","参考系","里程","比如","某","subscription","call","request","创建","名","1.0","显得","target","if","累积","看","继续","简单","下来","srv","我们","做","timer","呗","msg","client","turtlefollowing","好","名称","说明","动态","一样","缓冲区","turtlesim","变成","the","监听器","里程计","对象","作者","示例","树","哪些","房子","}","有所","先看","--","executable","10.0","父类","不会","至关","便于","讲解","处理","theta","并","位","成功","默认","as","服务器","也","再","想起","4","库","爪","中该",">","缓冲","外部","欧拉角","动机","会","ready","包括","super","sim","解决","两个","准备","跟随","!","之间","python","给","变得复杂","程序","msgs","source","完成","有","tf","地图",".","node","shutdown","啦","重要","0","docs","范围","方法","pdf","(",".__","循环","prefix","不变","海龟","编写","destroy","维护","格外","pos","链接","着急","世界","里边","左边","解析","这样","信息","所以","transformbroadcaster","q","存在","xy","完整","进入","时间","1","来",")","选项","tflistener","应该","logger","三个","加","spawn","管理系","代码","关闭","教材","rotation","坐标","是否","service","quat","learning","生变","改变","可以","机械","戳","两者","transformlistener","tutorials","神器","根据","callback","return","退出","主要","*","？","不是","理论","两只","静态","-","更加","yaw","转变成","html","generate","向量","分解","spin","laser","周期","tf2","抓取","其实","$","数值","打开","自己","__","turtle2","humble","怎么样","基本","部分","对","world","transformations","出","%","py","工具","当","successfully","长度","动","基","理解","odom","外部环境","随便","作用","map","transformexception","turtlename","进行","substitutions","s","知道","路径","案例","后","相同","与","launchdescription","良好","又","to","存储","广播","guyuehome","真器","echo","古月","。","夹","之前","很","sendtransform","传入","launch","还","[","概念","显示","python3","5.0","具体","物体","初始化","节点","定时器","工件","人学","string","发生变化","内容","stamp","定时","这种","异常","lookup","#","transformation","3","相应","listener","角速度","通过","接下","四元","欧拉","保持","针对","销毁","封装","源","declarelaunchargument","同理","except","角度","atan2","该","info","如何","叫做","linear","仿真器","移动","forward","async","com","如下","'","]","\"","管理","share","速度"," ","{","还会","d","数学","现在","所在","各个","清楚","statictfbroadcaster","软件","得","数据","result","激光雷达","计算","姿态","buffer","不断","末端","机器人学","矩阵","之外","刚才","_","not","拆","生成","实现","这些","环境","位置","的","另外","一种","挑战","parameters","初始","有点","指令","然后","tools","send","apt","失败","距离","误差","转换","系统","中间","直观","过程","如果","底层","不","scale","大家","跟随运动","z","def","详细","在","命令行","平移","说","激光","finished","组成","usr","这","又会有","一层","中","你家","文件","基础","actions","、","编译","下","保存","固定","客户","入口","none","一只","一些","now","launchconfiguration","entry","坐标系","配置","了","慢慢","publish","child","可视","时刻","向","复杂","数","pkg","class","w","小海龟","运动","transform","知识","理论知识","https","管理系统","当前","者","都","只要","中心","查询","spawned","箭头","之为","clock","=","is","绝对","quaternion","en","内","init","0.0","demo","pitch","报告","准备就绪","turtletfbroadcaster","背后","更新","控制","务器","看似","否则","utf","原理","没有","中画","至关重要","时候","接下来","import","参数值","teleop","还是","done","turtle","非常","呢","描述","sudo","geometry","default","为","提示","使用","小海","函数","变得","header","让",",","time","转变","臂","机器人","points","修改","rviz2","parameter","f","run","想要","经过","rel","优先","常见","旋转","发送","设置","scripts","要","speed","请求","frame","不要","+","命令","description","订阅","不行","熟悉","标志","开始","分别","雷达","setup","rviz","用","from","float","那","：","客户端","类","create","value","回调","base","只","坐标轴","需要","else","发布","定义","参考","复用","仿真","following","话题","其中","euler","install","不同","true","pose","启动","spawning","成","怎么","及时","bin","main","中心点","link","get","translation","try","自动","查看","器类","哪个","一本","name","终端","发生","turtle1","么","器","spawner","@","关于","broadcaster2","是","就是","self","操作","（","static","5","）","怎样","！","并且","机器","小","打印","twist","正常","变换","起来","监听","意思","包","形态","四","vel","看看"],"title":"TF","title_tokens":["tf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf","text":"坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器—— TF 。","text_tokens":["。","提供","也","很多","神器","存在","系统","完整","机器人","管理","概念","会","？","是"," ","，","坐标系","人学","了","之间","给","机器","在","tf","坐标","重要","关系","ros","如何","中","—","机器人学","非常","我们","基础","一个","熟悉","该","这些","位置","的"],"title":"TF：机器人坐标系管理神器","title_tokens":["机器人","管理","机器","：","tf","坐标系","坐标","神器"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_1","text":"机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做 基坐标系 Base Frame，机器人安装位置在外部环境下的参考系叫做 世界坐标系 World Frame，机器人末端夹爪的位置叫做 工具坐标系 ，外部被操作物体的位置叫做 工件坐标系 ，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是 基坐标系 Base Link，雷达所在的位置叫做 雷达坐标系 laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做 里程计坐标系 odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做 地图坐标系 map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为 平移和旋转 两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实就是向量的数学描述。 ROS中TF功能的底层原理，就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。","text_tokens":["。","夹","也","爪","绝对","内","外部","动机","会","物体","，","工件","人学","两个","跟随","看似","变化","原理","之间","中画","至关重要","变得复杂","就","有","地图","空间","tf","重要","关系","漂移","范围","方法","通过","这个","封装","呢","描述","每","格外","叫做","为","功能","使用","世界","移动","变得","和","臂","机器人","管理","被"," ","数学","所在","管理系","旋转","教材","移动机器人","坐标","要","ros","frame","四乘","安装","不断","两者之间","末端","机器人学","矩阵","可以","机械","一个","两者","这些","环境","位置","的","雷达","那","误差","系统","base","主要","过程","？","理论","相对","参考系","里程","比如","底层","参考","大家","向量","分解","laser","详细","显得","在","抓取","其实","平移","累积","又会有","一层","中","简单","基本","我们","部分","对","world","中心点","link","下","固定","出","一样","一本","工具","里程计","哪些","基","关于","是","一些","就是","坐标系","odom","操作","了","外部环境","map","至关","进行","机器","复杂","讲解","变换","良好","形态","知识","四","管理系统","理论知识","都","中心"],"title":"机器人中的坐标系","title_tokens":["机器人","中","机器","坐标系","坐标","的"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_1","text":"ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。","text_tokens":["下","一种","。","使用","小海","了解","机器人","示例","的","？","算法","，","两只","基于","坐标系","跟随","机器","tf","坐标","先","ros","通过","中","小海龟","我们","呢","该","海龟","如何"],"title":"TF命令行操作","title_tokens":["tf","命令行","操作","命令"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_2","text":"这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools $ sudo pip3 install transforms3d 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 当我们控制一只海龟运动时，另外一只海龟也会跟随运动。","text_tokens":["另外","。","自动","功能","也","小海","pip3","然后","py","tools","launch","apt","turtlesim","试一试","当","一只","示例","ros2","demo","会","运行","具体","key","来","？"," ","run","，","-","transforms3d","需要","控制","跟随","跟随运动","之后","就","tf2","其中","$",".","先","teleop","ros","turtle","install","相应","如何","通过","安装","这个","包","小海龟","启动","运动","humble","文件","效果","我们","可以","_","一个","sudo","时","海龟","的"],"title":"小海龟跟随例程","title_tokens":["小海龟","例程","小海","跟随","海龟"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_2","text":"在当前运行的两只海龟中，有哪些坐标系呢，我们可以通过这个小工具来做查看。 $ ros2 run tf2_tools view_frames 默认在当前终端路径下生成了一个frames.pdf文件，打开之后，就可以看到系统中各个坐标系的关系了。","text_tokens":["。","下","查看","tools","系统","工具","终端","ros2","哪些","运行","来","看到"," ","run","，","两只","坐标系","了","各个","之后","就","小","tf2","在","有","$","坐标","路径","frames",".","关系","打开","pdf","通过","中","这个","文件","view","当前","我们","可以","呢","_","一个","默认","生成","海龟","做","的"],"title":"查看TF树","title_tokens":["tf","查看","树"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_3","text":"只看到坐标系的结构还不行，如果我们想要知道某两个坐标系之间的具体关系，可以通过tf2_echo这个工具查看： $ ros2 run tf2_ros tf2_echo turtle2 turtle1 运行成功后，终端中就会循环打印坐标系的变换数值了，由平移和旋转两个部分组成，还有旋转矩阵。","text_tokens":["。","查看","：","结构","和","工具","终端","turtle1","还","ros2","会","运行","具体","想要","只"," ","，","坐标系","如果","run","两个","还有","了","某","旋转","之间","就","tf2","打印","知道","$","坐标","后","数值","由","变换","关系","ros","平移","组成","通过","turtle2","这个","中","循环","矩阵","成功","我们","部分","可以","_","echo","不行","看到","的"],"title":"查询坐标变换信息","title_tokens":["坐标","信息","查询","变换"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_4","text":"看数值还不直观？可以试试用可视化软件来做显示： $ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 再让小海龟动起来，Rviz中的坐标轴就会开始运动，这样是不是更加直观了呢！ 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。","text_tokens":["。","再","是不是","还","显示","会","，","背后","跟随","原理","就","tf",".","turtle","方法","(","prefix","可视化","试试","呢","海龟","使用","小海","着急","/","这样","让","了解","ros2","rviz2","share","来",")"," ","run","d","软件","坐标","先","不要","可以","_","开始","的","rviz","用","有点","：","直观","？","不是","坐标轴","-","更加","不","大家","tf2","$","数值","看","这","中","我们","做","下","py","动","是","--","理解","了","怎样","慢慢","可视","！","便于","案例","pkg","起来","意思","小海龟","运动"],"title":"坐标系可视化","title_tokens":["坐标系","坐标","可视","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_3","text":"我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为 静态TF变换 ，我们来看看在程序中该如何实现？","text_tokens":["。","雷达","好","也","很","之为","那","哪个","和","中该","系统","发生","管理","机器人","的","主要","房子","称之为","来","？","是"," ","，","坐标系","应该","底盘","静态","相对","发生变化","变化","比如","常见","不","作用","不会","之间","这种","最为","进行","之后","就","程序","机器","在","tf","坐标","激光雷达","说","变换","激光","关系","你家","安装","中","这个","如何","简单","基本","生变","我们","看看","试试","对","一个","情况","拆","只要","实现","位置","呗"],"title":"静态TF广播","title_tokens":["tf","静态","广播"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_5","text":"启动终端，运行如下命令： $ ros2 run learning_tf static_tf_broadcaster $ ros2 run tf2_tools view_frames 可以看到当前系统中存在两个坐标系，一个是world，一个是house，两者之间的相对位置不会发生改变，通过一个静态的TF对象进行维护。","text_tokens":["。","tools","：","维护","如下","存在","系统","终端","发生","对象","ros2","运行"," ","run","是","，","broadcaster","坐标系","静态","两个","相对","static","之间","不会","进行","tf2","tf","$","坐标","frames","通过","中","启动","两者之间","命令","learning","view","house","当前","改变","可以","_","world","一个","两者","看到","位置","的"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_6","text":"来看下在代码中是如何创建坐标系并且发布静态变换的。 learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？","text_tokens":["y","。","x","coding","clock","库","sendtransform","=","quaternion","init","0.0","欧拉角","[","段","pitch","python3","5.0","env","super","接口","statictransformbroadcaster","初始化","节点","，","两个","等待","变化","来看","utf","stamp","!","python","时候","程序","import","msgs","#","完成","tf","shutdown",".","node","8","0","居","关系","3","(","四元","欧拉","保持","循环","销毁","不变","源","house","描述","呢","geometry","将","该","编写","destroy","如何","2","为","功能","rclpy","点","使用","/","com","header","'","如下","让",",","]","\"","points","ros2","时间","1","console",")","选项"," ","{","经过","中是","broadcaster","目标","www","roll","清楚","代码","旋转","statictfbroadcaster","id","rotation","坐标","设置","args","scripts","ros","frame","quat","learning","_","一个","戳",":","位置","的","加入","setup","初始","from","：","类","转换","系统","退出","到","消息","transformstamped","*","？","静态","-","需要","yaw","发布","z","def","创建","spin","tf2","在","平移","euler","打开","usr","这","__","中","文件","bin","main","我们","world","get","msg","、","下","translation","编译","transformations","说明","器类","py","入口","name","作者","对象","none","示例","器","}","@","是","now","self","entry","坐标系","（","static","10.0","配置","了","）","父类","child","并且","向","进行","知道","数","后","变换","class","并","w","包","又","to","transform","广播","guyuehome","古月","查询"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_4","text":"我们再来学习下如何查询两个坐标系之间的位置关系。","text_tokens":["下","。","的","再","学习","来","之间","我们","坐标系","坐标","两个","关系","查询","位置","如何"],"title":"TF监听","title_tokens":["tf","监听"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_7","text":"启动一个终端，运行如下节点，就可以在终端中看到周期显示的坐标关系了。 $ ros2 run learning_tf tf_listener","text_tokens":["。","如下","终端","ros2","显示","运行"," ","run","节点","，","了","就","周期","在","tf","$","坐标","关系","listener","中","启动","learning","可以","_","一个","看到","的"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_8","text":"这个节点中是如何查询坐标关系的，我们来看下代码。 learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。","text_tokens":["y","。","declare","x","coding","库","=","quaternion",">","缓冲","init","外部","[","python3","报告","trans","env","super","接口","初始化","节点","，","定时器","两个","string","等待","跟随","来看","utf","否则","!","定时","之间","python","异常","程序","import","source","lookup","#","完成","tf","shutdown",".","node","8","参数值","啦","关系","居","0","listener","(","这个","四元","循环","销毁","源","house","参数","except","海龟","编写","destroy","info","如何","2","pos","功能","rclpy","使用","点","左边","/","信息","com","'","如下","让",",","time","]","\"","ex","进入","ros2","points","时间","on","parameter","1",")","f","选项"," ","{","console","中是","tflistener","目标","优先","www","broadcaster","logger","现在","代码","关闭","rotation","坐标","设置","args","scripts","了解","ros","姿态","默认值","buffer","frame","quat","learning","_","not","一个",":","挑战","位置","transformlistener","的","加入","setup","初始","用","from","could","：","类","create","失败","return","value","系统","退出","到","*","as","如果","两只","-","获取","需要","某","大家","z","def","创建","名","spin","1.0","tf2","target","周期","数值","euler","打开","usr","__","继续","文件","基本","bin","main","我们","对","world","get","timer","编译","下","translation","try","transformations","好","保存","固定","%","说明","py","缓冲区","入口","监听器","作者","name","none","对象","示例","}","@","有所","now","self","--","坐标系","entry","（","配置","static","了","）","父类","transformexception","时刻","进行","s","知道","案例","处理","数","后","变换","class","并","监听","w","包","to","transform","当前","存储","guyuehome","默认","古月","查询"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_9","text":"还是之前小海龟跟随的示例，我们自己通过代码来实现一下。","text_tokens":["。","小海龟","示例","一下","之前","小海","代码","来","，","我们","还是","跟随","海龟","实现","自己","通过","的"],"title":"海龟跟随功能解析","title_tokens":["海龟","解析","功能","跟随"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_10","text":"先看下实现的效果，启动终端后，通过如下命令启动例程： $ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 看到的效果和ROS自带的例程相同。","text_tokens":["下","。","：","py","launch","turtlesim","如下","和","终端","ros2","demo","key","先看"," ","run","，","例程","following","tf","$",".","后","相同","teleop","ros","turtle","通过","启动","效果","命令","learning","自带","_","看到","实现","的"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_11","text":"在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心就是通过坐标系实现向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。","text_tokens":["。","箭头","也","再","想起","是不是","很","高中","上","按照","，","解决","跟随","得到","就","与","有","tf","方法","通过","一起","这个","封装","同理","全局","描述","角度","该","海龟","如何","2","叫做","所以","仿真器","这样","和","方向","速度","表示","1","时间","学习"," ","还会","核心","三个","加","代码","例程","得","坐标","设置","要","计算","不断","可以","一个","两者","时","实现","位置","的","用","然后","距离","中间","连线","？","不是","两只","相对","参考系","发布","比如","某","定义","参考","不","向量","仿真","话题","周期","在","说","看","这","turtle2","中","怎么样","怎么","我们","world","中心点","做","下","好","动态","么","turtle1","长度","动","就是","坐标系","了","随便","向","变换","起来","监听","运动","广播","真器","中心"],"title":"原理解析","title_tokens":["解析","原理"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#launch","text":"先来看下刚才运行的launch文件，里边启动了四个节点，分别是： 小海龟仿真器 海龟1的坐标系广播 海龟2的坐标系广播 海龟跟随控制 其中，两个坐标系的广播复用了turtle_tf_broadcaster节点，通过传入的参数名修改维护的坐标系名称。 learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ])","text_tokens":["。","传入","=","launch","[","demo","sim","节点","，","两个","控制","跟随","来看","import","tf",".","node","turtle","listener","通过","(","declarelaunchargument","参数","海龟","default","维护","2","四个","小海","里边","仿真器","/","'",",","]","修改","1",")"," ","{","broadcaster","坐标","先","ros","frame","learning","description","刚才","_",":","分别","的","parameters","from","broadcaster1","：","return","value","运行","package","generate","复用","def","仿真","名","following","target","其中","turtle2","启动","文件","actions","下","名称","py","turtlesim","name","turtle1","}","broadcaster2","是","launchconfiguration","坐标系","executable","了","turtlename","substitutions","launchdescription","小海龟","广播","真器"],"title":"Launch文件解析","title_tokens":["launch","解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_12","text":"海龟1和海龟2在world坐标系下的坐标变换，在turtle_tf_broadcaster节点中实现，除了海龟坐标系的名字不同之外，针对两个海龟的功能是一样的。 learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], },","text_tokens":["y","。","declare","x","coding","除了","库","clock","sendtransform","=","quaternion","init","外部","0.0","欧拉角","[","pitch","python3","env","super","接口","初始化","节点","，","turtletfbroadcaster","两个","string","更新","等待","变化","否则","utf","stamp","!","python","程序","import","msgs","#","transformation","完成","tf","shutdown",".","node","8","参数值","名字","turtle","居","0","3","listener","(","四元","针对","欧拉","循环","销毁","源","参数","geometry","将","海龟","编写","destroy","2","为","功能","rclpy","小海","使用","transformbroadcaster","点","/","信息","函数","q","和","com","'","header","如下","让",",","]","转变","\"","points","ros2","1","时间","parameter","console",")","f","选项"," ","{","broadcaster","目标","优先","www","roll","代码","旋转","关闭","id","rotation","坐标","设置","args","scripts","ros","默认值","frame","learning","之外","订阅","_","一个","戳",":","实现","位置","的","加入","setup","初始","用","from","：","类","send","create","callback","转换","value","系统","回调","退出","到","消息","transformstamped","*","-","获取","需要","yaw","转变成","subscription","z","def","创建","spin","tf2","在","数值","平移","euler","不同","usr","打开","__","中","pose","文件","及时","bin","main","world","get","msg","、","下","translation","编译","transformations","名称","说明","动态","一样","py","入口","turtlesim","变成","the","name","作者","对象","none","示例","器","}","@","是","now","self","entry","坐标系","（","配置","static","）","父类","child","turtlename","向","进行","知道","处理","theta","数","后","变换","class","并","w","包","小海龟","to","transform","广播","guyuehome","者","默认","古月"],"title":"坐标系动态广播","title_tokens":["坐标系","坐标","广播","动态"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_13","text":"坐标系都正常广播了，接下来我们就可以订阅两只海龟的位置关系，并且变换成速度指令进行控制啦。 learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], },","text_tokens":["y","。","服务","declare","coding","x","4","库","=","is","缓冲","init","外部","还","[","python3","报告","trans","env","ready","准备就绪","super","接口","初始化","包括","节点","，","定时器","string","控制","跟随","务器","变化","否则","utf","准备","!","定时","异常","python","没有","接下来","程序","就","import","msgs","#","source","已经","tf","啦",".","node","8","参数值","publisher","关系","turtle","居","0","done","listener","角速度","(","接下","通过",".__","没","循环","shutdown","销毁","源","参数","except","角度","atan2","]","geometry","海龟","编写","destroy","info","console","2","false","linear","功能","rclpy","使用","提示","点","左边","/","信息","forward","async","com","'","如下","xy","产生",",","time","让","\"","ex","进入","ros2","速度","1","on","parameter","时间",")","f","表示"," ","{","编译","选项","目标","rel","优先","www","angular","broadcaster","logger","spawn","代码","关闭","发送","依然","cmd","rotation","数据","result","坐标","设置","计算","speed","是否","ros","请求","默认值","buffer","frame","线速度","姿态","service","+","learning","math","就绪","订阅","可以","_","not","一个","sqrt",":","生成","实现","标志","位置","的","transformlistener","加入","setup","初始","用","from","指令","float","客户端","could","：","类","create","根据","失败","距离","return","value","系统","rate","points","退出","到","消息","args","*","内容","as","两只","如果","-","获取","需要","else","发布","scale","call","request","跟随运动","z","def","创建","名","spin","following","tf2","话题","周期","if","数值","等待","scripts","finished","完成","true","打开","usr","__","lookup","turtle2","spawning","成","下来","文件","bin","main","srv","我们","服务器","get","msg","client","timer","turtlefollowing","try","transformations","translation","保存","、","固定","说明","查看","py","缓冲区","客户","入口","turtlesim","监听器","作者","name","turtle1","none","对象","示例","spawner","}","successfully","@","now","self","entry","坐标系","配置","了","static","5","父类","transformexception","publish","时刻","并且","进行","知道","twist","theta","后","正常","变换","class","并","位","监听","包","to","运动","transform","成功","vel","当前","存储","广播","guyuehome","都","默认","古月","spawned"],"title":"海龟跟随","title_tokens":["海龟","跟随"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_14","text":"https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":["humble","main","/","https","tf2","html","tutorials",".","docs","-","ros","en",":","org"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/","text":"URDF：机器人建模方法 ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法—— URDF ，用来描述机器人外观、性能等各方面属性。 机器人的组成 建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由 硬件结构、驱动系统、传感器系统、控制系统 四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备； 驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等； 传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境； 控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。 URDF ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是 XML格式 ，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为 连杆Link ，手肘就类似于机器人电机驱动部分，称为 关节joint 。 所以在URDF建模过程中，关键任务就是通过这里的<link>和<joint>，理清楚每一个连杆和关节的描述信息。 连杆Link的描述 <link>标签用来描述机器人某个刚体部分的 外观和物理属性 ，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。 link里边的<visual>部分用来描述机器人的外观，比如： <geometry>表示 几何形状 ，里边使用<mesh>调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的 <origin>表示 坐标系相对初始位置的偏移 ，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分<collision>，描述 碰撞参数 ，里边的内容似乎和<visual>一样，也有<geometry>和<origin>，看似相同，其实区别还是比较大的。 <visual>部分重在描述机器人看上去的状态，也就是视觉效果； <collision>部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过<visual>来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是<collision>里边<geometry>描述的形状。<origin>坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。 关节Joint描述 机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 parent标签：描述父连杆； child标签：描述子连杆，子连杆会相对父连杆发生运动； origin：表示两个连杆坐标系之间的关系，也就是图中红色的向量，可以理解为这两个连杆该如何安装到一起； axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的； limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等。 Info ROS中关于平移的默认单位是m，旋转是弧度（不是度），所以这里的3.14就表示可以在-180度到180度之间运动，线速度是m/s，角速度是rad/s。 完整机器人模型 最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。 创建机器人模型 好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。 功能包结构 机器人的模型放置在learning_urdf功能包中，功能包中包含的文件夹如下： urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件 模型可视化效果 我们先来看下这个模型的效果，尝试逆向分下一下机器人的结构。 $ ros2 launch learning_urdf display.launch.py 很快就可以看到Rviz中显示的机器人模型啦，大家可以使用鼠标拖拽观察。 从可视化的效果来看，这个机器人由五个link和4个joint组成。 查看URDF模型结构 我们分析的对不对呢，可以在模型文件的路径下，使用urdf_to_graphviz这个小工具来分析下。 $ urdf_to_graphviz mbot_base.urdf # 在模型文件夹下运行 运行成功后会产生一个pdf文件，打开之后就可以看到URDF模型分析的结果啦，是不是和我们的猜测完全相同呢！ 模型文件解析 具体URDF模型什么样的，还是要打开模型来研究。 learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot> 参考链接 https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":["y","x","上去","是不是","结构","父","框","上","介绍","按照","parent","，","底盘","包含","material","0.015","应用软件","变化","来看","红色","摄像头","之后","就","axis","找","讲","名字","关系","算作","一起","这个","—","自定","效果","自身","专门","可视化","参数","尝试","将","平面","0.4","每","提供","功能","一下","/","驱动","和","方向","radius","产生","了解","组合","ros2","表示","joint","引用","理","模型简化","roll","接触","物理","全称","移动机器人","cylinder","由","先","标签","ros","线速度","应用","安装","格式","属性","相机","把","一个","类型","时","看到",":","mbot","方式","肘关节","org","到","运行","市面","拖拽","相对","看下","最大","比如","某","创建","较","1.0","看","大臂","三维","我们","等等","先来","包中","好","名称","车体","<","语言","一样","black","示例","度","哪些","手","质心","一块","编码器","不会","这里","便于","组合而成","visual","一段","自定义","区别","全都","成功","渲染","fixed","默认","思路","视觉效果","提前","再","也","二个","沿某","3.14","轮子","4","包围","分下",">","图中","外部","动机","会","包括","有点像","结果","两个","之间","研究","给","状态","与","完成","有","啦","raw",".","docs","放在","多","0","方法","转关","pdf","floating","等","180","各","无限","子","等于","链接","着急","里边","控制系统","所以","这样","信息","此时","叫","解析","大","完整","码器","revolute","1","来","系列","不仅","感知","管理系","代码","全为","相关","color","分析","坐标","小车","源代码","而是","硬件","learning","实际","可以","机械","电机","类似","四大","0.025","未来","当然","像头","为例","tutorials","imu","任务","围绕","放置","操作系统","最小","细节","主要","prismatic","？","urdf","似乎","不是","rad","-","认识","一系列","树莓","html","存放","右侧","向量","xyz","分解","其实","$","打开","自己","humble","旋转关节","0.06","唯一","部分","对","括号","电脑","传感","不能","外界","py","工具","肌肉","调用","理解","外部环境","度到","面上","无法","形状","简化","偏移","绿色","为此","进行","s","不过","相同","颜色","路径","平台","后","xacro","圆柱体","装置","continuous","to","电源","算力","看上","局","看上去","编码","yellow","少","连杆","。","之前","乍","launch","关键","type","属于","还","六种","显示","高","具体","清晰","观察","0.95","一致","内容","尺寸","这种","建模","某个","频繁","单位","#","robot","传感器","角速度","通过","两种","摄像","派","浮动","这么","必须","角度","该","设计","统一","info","如何","叫做","移动","caster","刚体","如下","用来","形成","管理","完全相同","\"","速度","这款","limit","重在"," ","真实","length","驱动器","清楚","第六种","连接","软件","得","计算","视觉","网页","矩阵","stl","_","这些","环境","的","位置","要求","一种","逆向","蓝色","有点","初始","系统","碰撞检测","过程","如果","桌子","模型","外壳","不","0.18","0.9","大家","z","在于","在","一般","称为","平移","几何","最终","组成","这","中","配置文件","文件","meshes","件夹","哪","第二","、","下","轴","才能","collision","固定","保存","display","五个","第二个","front","rgba","性能","一些","允许","它","version","坐标系","很快","个","配置","了","他们","child","可视","一系","猜测","复杂","rpy","运动","https","管理系统","1.5707","都","比较","无论","=","以","en","则","柱体","pitch","质量","控制","看似","第六","什么","时候","鼠标","限制","外观","还是","于","设备","无论是","碰撞","wheel","呢","描述","为了","完全","geometry","建模语言","的话","为","使用","独立","圆柱","让","臂","机器人","感器","滑动","检测","常见","left","0.19","旋转","实打实","开发","back","要","?","什么样","origin","所有","0.095","熟悉","带有","；","分别","雷达","rviz","用","：","base","关节","载体","方面","xml","需要","定义","m","参考","手肘","其中","驱使","以及","mesh","正","尖括号","启动","0.05","main","手臂","单位向量","从","link","graphviz","查看","sphere","板载","name","发生","文件夹","0.20","关于","每个","0.16","是","就是","操作","（","市面上","）","组成部分","！","机器","小","right","直线","相对运动","正常","起来","惯性","极限","弧度","或","包","小臂","white","planar","独自"],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf","text":"ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法—— URDF ，用来描述机器人外观、性能等各方面属性。","text_tokens":["下","一种","。","提供","使用","之前","系统","让","用来","操作系统","机器人","还","介绍","性能","、","？","urdf","是"," ","方面","，","操作","认识","了","建模","为此","给","机器","不过","在","得","啦","外观","要","ros","方法","如何","等","各","—","属性","专门","我们","呢","描述","把","一个","当然","的"],"title":"URDF：机器人建模方法","title_tokens":["机器人","建模","urdf","机器","：","方法"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_1","text":"建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由 硬件结构、驱动系统、传感器系统、控制系统 四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备； 驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等； 传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境； 控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。","text_tokens":["思路","。","再","无论","结构","上","外部","按照","动机","包括","，","底盘","控制","应用软件","建模","摄像头","状态","还是","设备","传感器","通过","等","摄像","无论是","派","参数","描述","建模语言","每","使用","里边","控制系统","移动","驱动","和","臂","机器人","管理","码器","组合"," ","感器","驱动器","感知","常见","清楚","管理系","软件","移动机器人","实打实","开发","由","先","计算","硬件","应用","安装","可以","机械","电机","类似","四大","熟悉","把","；","看到","一个","这些","像头","的","环境","雷达","imu","系统","操作系统","主要","载体","过程","市面","需要","树莓","比如","外壳","分解","一般","其实","驱使","以及","组成","自己","这","中","我们","部分","等等","、","语言","电脑","传感","板载","是","一些","就是","操作","了","市面上","编码器","面上","组成部分","进行","便于","机器","平台","正常","起来","装置","电源","管理系统","编码","都"],"title":"机器人的组成","title_tokens":["机器人","组成","机器","的"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_1","text":"ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是 XML格式 ，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为 连杆Link ，手肘就类似于机器人电机驱动部分，称为 关节joint 。 所以在URDF建模过程中，关键任务就是通过这里的<link>和<joint>，理清楚每一个连杆和关节的描述信息。","text_tokens":["。","上去","也","乍","包围","关键",">","外部","还","有点像","清晰","，","建模","之后","就","于","方法","算作","通过","这个","自身","必须","描述","呢","统一","如何","每","叫做","使用","所以","独立","这样","信息","驱动","刚体","和","产生","臂","机器人","组合","joint"," ","理","系列","不仅","清楚","代码","连接","全称","开发","由","标签","ros","源代码","网页","格式","属性","可以","机械","类似","电机","一个","这些","环境","的","有点","肘关节","任务","关节","过程","？","urdf","xml","一系列","相对","桌子","模型","比如","右侧","大家","在","其中","称为","手肘","看","大臂","组成","自己","中","尖括号","文件","手臂","我们","部分","link","下","括号","才能","<","肌肉","是","就是","手","外部环境","他们","无法","这里","一系","机器","组合而成","相对运动","小臂","运动","看上","独自","看上去","都","连杆"],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#link","text":"<link>标签用来描述机器人某个刚体部分的 外观和物理属性 ，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。 link里边的<visual>部分用来描述机器人的外观，比如： <geometry>表示 几何形状 ，里边使用<mesh>调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的 <origin>表示 坐标系相对初始位置的偏移 ，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分<collision>，描述 碰撞参数 ，里边的内容似乎和<visual>一样，也有<geometry>和<origin>，看似相同，其实区别还是比较大的。 <visual>部分重在描述机器人看上去的状态，也就是视觉效果； <collision>部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过<visual>来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是<collision>里边<geometry>描述的形状。<origin>坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。","text_tokens":["y","。","提前","x","上去","视觉效果","也","二个","轮子","以",">","则","框","上","柱体","pitch","动机","会","高","包括","，","质量","一致","内容","尺寸","看似","控制","某个","时候","就","状态","与","外观","有","raw","还是","0","算作","通过","等","这个","自定","效果","碰撞","参数","描述","为了","geometry","该","设计","将","如何","的话","使用","里边","圆柱","这样","移动","刚体","和","如下","方向","大","用来","臂","机器人","表示","joint","来","重在"," ","真实","模型简化","roll","检测","接触","旋转","连接","物理","软件","全为","移动机器人","坐标","标签","视觉","计算","小车","origin","属性","矩阵","实际","可以","机械","stl","类似","一个","未来","；","时","位置","的","分别","要求","为例","蓝色","初始","用","：","碰撞检测","到","过程","似乎","如果","需要","相对","模型","比如","定义","不","z","较","在","其实","mesh","平移","几何","中","文件","三维","我们","部分","第二","link","、","好","名称","车体","collision","<","一样","外界","第二个","name","调用","是","就是","它","坐标系","质心","了","形状","简化","偏移","绿色","机器","visual","复杂","相同","颜色","惯性","圆柱体","自定义","运动","区别","算力","看上","看上去","比较","连杆"],"title":"连杆Link的描述","title_tokens":["描述","link","连杆","的"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#joint","text":"机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 parent标签：描述父连杆； child标签：描述子连杆，子连杆会相对父连杆发生运动； origin：表示两个连杆坐标系之间的关系，也就是图中红色的向量，可以理解为这两个连杆该如何安装到一起； axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的； limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等。 Info ROS中关于平移的默认单位是m，旋转是弧度（不是度），所以这里的3.14就表示可以在-180度到180度之间运动，线速度是m/s，角速度是rad/s。","text_tokens":["。","也","沿某","3.14","轮子","图中","父","上","属于","六种","parent","会","，","两个","内容","第六","变化","什么","这种","之间","红色","频繁","之后","就","单位","限制","axis","有","还是","名字","关系","转关","角速度","通过","floating","这个","一起","等","两种","180","浮动","描述","角度","该","无限","平面","info","如何","每","子","为","等于","使用","所以","/","此时","这样","叫","刚体","和","方向","产生","臂","机器人","revolute","表示","1","joint","速度","limit"," ","滑动","旋转","第六种","连接","坐标","要","小车","标签","ros","线速度","而是","安装","origin","相机","可以","机械","电机","一个","带有","类型","；","位置","的","一种","：","方式","围绕","最小","关节","到","prismatic","urdf","不是","xml","rad","-","相对","模型","某","比如","最大","不","m","向量","在于","z","较","在","一般","平移","正","最终","这","中","旋转关节","唯一","哪","单位向量","link","轴","才能","固定","不能","发生","度","关于","是","就是","允许","一些","坐标系","理解","（","了","）","度到","不会","child","这里","进行","s","机器","一段","不过","直线","相对运动","极限","弧度","continuous","运动","区别","planar","fixed","都","比较","默认","少","连杆"],"title":"关节Joint描述","title_tokens":["关节","描述","joint"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_2","text":"最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。","text_tokens":["每","。","先来","下","再","着急","所以","和","完整","了解","形成","机器人","组合","细节","哪些","joint","每个","urdf"," ","是","，","一块","了","模型","某","不","代码","大家","之后","就","机器","找","完成","robot","在","标签","放在","先","由","最终","看","组成","中","这个","全都","所有","局","部分","描述","对","完全","一个","时","link","的"],"title":"完整机器人模型","title_tokens":["模型","机器人","机器","完整"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_3","text":"好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。","text_tokens":["。","好","为例","移动","以","完整","机器人","示例","动机","这款","过程","urdf"," ","它","，","了","模型","看下","建模","机器","移动机器人","讲","啦","要","多","还是","看","一起","这么","我们","一个","的"],"title":"创建机器人模型","title_tokens":["模型","机器人","机器","创建"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_4","text":"机器人的模型放置在learning_urdf功能包中，功能包中包含的文件夹如下： urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件","text_tokens":["包中","rviz","功能","保存","：","launch","如下","文件夹","放置","机器人","urdf"," ","引用","，","包含","配置","模型","存放","相关","机器","在","xacro","或","中","配置文件","启动","learning","文件","meshes","件夹","渲染","_","的"],"title":"功能包结构","title_tokens":["包","结构","功能"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_5","text":"我们先来看下这个模型的效果，尝试逆向分下一下机器人的结构。 $ ros2 launch learning_urdf display.launch.py 很快就可以看到Rviz中显示的机器人模型啦，大家可以使用鼠标拖拽观察。 从可视化的效果来看，这个机器人由五个link和4个joint组成。","text_tokens":["下","。","rviz","一下","使用","4","display","py","五个","结构","分下","launch","和","机器人","ros2","显示","joint","urdf"," ","观察","，","个","很快","拖拽","模型","来看","大家","可视","就","鼠标","机器","$",".","啦","由","先","组成","这个","中","效果","learning","我们","可视化","尝试","可以","_","从","看到","link","逆向","的"],"title":"模型可视化效果","title_tokens":["模型","可视","效果","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_2","text":"我们分析的对不对呢，可以在模型文件的路径下，使用urdf_to_graphviz这个小工具来分析下。 $ urdf_to_graphviz mbot_base.urdf # 在模型文件夹下运行 运行成功后会产生一个pdf文件，打开之后就可以看到URDF模型分析的结果啦，是不是和我们的猜测完全相同呢！","text_tokens":["下","。","使用","graphviz","是不是","mbot","和","工具","文件夹","产生","完全相同","base","会","运行","来","urdf"," ","结果","不是","，","模型","不","！","之后","就","小","#","分析","在","猜测","路径","$",".","后","啦","相同","打开","pdf","这个","to","文件","件夹","成功","我们","可以","呢","对","_","一个","完全","看到","的"],"title":"查看URDF模型结构","title_tokens":["模型","查看","urdf","结构"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_6","text":"具体URDF模型什么样的，还是要打开模型来研究。 learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot>","text_tokens":["。","back","<","/","mbot","caster","=","type","front","sphere","radius",">","black","name","rgba","\"","parent","base","0.20","1","具体","joint","来","0.16","urdf"," ","xml","version","，","length","0.95","material","-","0.015","模型","什么","left","yellow","0.19","0.9","0.18","xyz","研究","child","1.0","cylinder","robot","visual","color","axis",".","right","要","0.4","还是","0","?","rpy","打开","什么样","continuous","origin","white","learning","0.05","0.06","wheel","0.095","1.5707","_","0.025","geometry","link","的"],"title":"模型文件解析","title_tokens":["模型","解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_7","text":"https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":["humble","urdf","/","https","main","html","tutorials",".","docs","-","ros","en",":","org"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/","text":"Gazebo：三维物理仿真平台 ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台 Gazebo ，了解一下。 Gazebo仿真平台 介绍 Gazebo是ROS系统中最为常用的 三维物理仿真平台 ，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。 安装 Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-* 运行 通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py Attention 为保证模型顺利加载，请将离线模型下载并放置到~/.gazebo/models路径下 ，下载链接如下： https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。 XACRO机器人模型优化 我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本—— XACRO文件 。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义 ，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含 ，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口 ，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro 以下是一些常用的XACRO文件语法，大家了解下。 常量定义 <xacro:property>标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。 数学计算 如果需要做数学计算，同样是在“${}”中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 Info 所有数学运算都会转换成浮点数进行，以保证运算精度 宏定义 机器人的轮子我们也做成宏定义，定义方式是通过这个<xacro:macro>标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。 文件包含 宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。 机器人仿真模型配置 完善物理参数 第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。 添加Gazebo标签 第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。 配置传动装置 第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。 添加控制器插件 第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。 构建仿真环境 接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ]) 机器人运动仿真 万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard Attention 虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 通过键盘上的“i、j、，、l”几个按键，就可以控制机器人前后左右运动啦。 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。 Ignition：下一代Gazebo 随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为 Ignition ，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 运行成功后，会打开Ignition的仿真界面和Rviz上位机，我们可以看到RGBD相机仿真后发布的图像数据。 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/ 附录：机器人完整模型 learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["y","x","是不是","可编","packages","很多","还要","再用","上","可编程","介绍","parent","for","trans","测试","虚拟","接口","放到","，","包含","底盘","0.015","material","mass","万事","diameter","变化","得到","公式","换成","最为","摄像头","就","找","已经","publisher","axis","iyy","simpletransmission","关系","名字","0.2","完善","第三步","一起","这个","find","inertial","models","没","—","效果","iyz","试试","尝试","参数","将","奇迹","每","0.4","transmission","want","2","false","一下","提供","功能","随着","hardware","/","一行","和","radius","了解","ros2","joint","算法","sources","by","www","差速","模拟","传递","filename","物理","引擎","t","export","第一","出现","移动机器人","cylinder","cmd","重复使用","标签","先","j","ros","版本","attention","按键","应用","安装","格式","includelaunchdescription","ixy","刚好","镜像","属性","装上","参数设置","一句","only","原本","c语言","官方","12","相机","把","一个","---",":","时","看到","加入","交给","考虑","确保","mbot","方式","方便","限飞","plugin","弹性","rate","org","到","运行","二步","package","turngravityoff","load","相对","顺利","比如","某","改成","创建","1.0","if","h","值为","记得","osrf","简单","下来","三维","libgazebo","我们","保证","macro","a","做","不妨","好","优化","名称","set","<","语言","matter","ignition","一样","名为","joints","black","the","}","度","controller","--","精度","executable","30","l","不会","这里","第三","较大","os","三步","visual","screen","并","互相","官方网站","第一步","尽量","we","成功","渲染","升级","fixed","mechanicalreduction","火星车","插件","再","也","4","轮子","周边","bridge",">","输入","动机","会","有点像","have","odometry","结果","sim","and","两个","!","跑","python","entity","几个","给","source","主角","完成","有","重复","啦",".","甚至","node","多","常量","语句","0","separation","方法","(","等","传动装置","prefix","浮点数","海龟","想不起","丰富","一步","链接","file","里边","所以","硬件加速","此时","这样","可","叫","信息","动力学","izz","include","完整","1","实物","来","控制器","切分",")","http","actuator","比","不仅","spawn","matrix","代码","关闭","“","怎么办","you","相关","arguments","color","acceleration","enabled","上来","小车","b","弹性系数","硬件","俱备","必要","很长","嵌套","c","learning","0.001","worlds","可以","数学计算","电机","类似","于是","0.025","迭代","未来","当然","make","像头","topic","除法","变量","新一代","摩擦力","doesn","return","第一句","list","放置","以上","主要","rgbd","写","*","必备","？","不是","urdf","-","认识","同样","yaw","点数","items","used","generate","inertia","结束","总体","xyz","~","$","直接","数值","state","vgpu10","打开","box","humble","0.06","基本","加大","对","world","及","reflect","你","括号","ament","不能","传感","py","3.14159","因为","当","文件格式","diff","调用","理解","odom","max","3.1415926","前后左右","二句","size","进行","不过","into","路径","颜色","launchdescription","平台","后","xacro","important","续航","装置","不多","continuous","周边环境","directory","to","keyboard","网站","办法","our","真器","无人","同时","echo","yellow","支持","。","pi","之前","帮助","很","一代","launch","type","像","还","[","一定","模块","可能","节点","0.95","尺寸","in","力学","传递数据","这种","建模","频繁","新","#","robot","试一下","似曾","3","传感器","传动","通过","接下","针对","摄像","provided","i","角度","表面","实验","该","设计","output","以下","info","如何","仿真器","语法","移动","caster","com","如下","sure","'","]","用来","\"","速度","share","加载"," ","{","length","hardwareinterface","数学","两句","reference","化","数据","得","计算","部署","运算","motor","camera","不断","tf","”","_","实现","这些","环境","的","位置","另外","single","有点","下载","然后","条件","友好","apt","见证","这句","转换","系统","really","过程","all","demos","interface","如果","模型","不","0.18","大家","z","def","构建","技术","浮点","用到","在","ixz","这","中","第四","文件","ign","第四步","第二","第二步","附录","update","actions","、","pythonlaunchdescriptionsource","下","differential","更","collision","0.75","front","火星","rgba","加法","界面","一些","它","version","个","own","配置","了","publish","时刻","child","离线","手边","复杂","pkg","20","高质量","rpy","gazebo","分配","小海龟","index","运动","neighborhood","图像","https","转换成","so","高质","都","=","is","以","做成","添加","0.0","join","键盘","质量","流畅","控制","无人机","下一代","没有","velocityjointinterface","接下来","时候","ignitionrobotics","import","请","teleop","colors","me","似曾相识","人机","验证","认识一下","碰撞","wheel","呢","为了","描述","更为","sudo","geometry","spwan","为","差不多","使用","小海","函数","第二句","让",",","time","command","机器人","修改","场景","为止","run","correctly","感器","r","流程","0.19","left","gray","drive","动力","开发","back","blue","设置","property","要","进步","导致","虚拟机","?","frame","某些","上位","where","origin","+","val","命令","所有","description","左右","系数","想不起来","rviz","用","from","相识","那","：","wiki","宏","value","去","base","关节","冗余","xml","摩擦","them","需要","发布","定义","m","参考","图形","仿真","install","不同","true","bashrc","pose","svga","启动","ixx","0.05","加速","怎么","从","link","官方网","get","课程","xmlns","命名","be","机","sphere","path","name","万事俱备","么","0.20","spawner","每个","0.16","是","就是","整个","前后","5","区分","params","change","机器","四步","right","use","twist","起来","问题","惯性","force","常用","包","github","this","编程","footprint","vel","defining","根本","torque"],"title":"Gazebo","title_tokens":["gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo","text":"ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台 Gazebo ，了解一下。","text_tokens":["。","一下","了解","机器人","实物","？","是"," ","，","如果","没有","物理","怎么办","仿真","机器","主角","手边","开发","平台","问题","ros","gazebo","没","怎么","三维","我们","呢","当然"],"title":"Gazebo：三维物理仿真平台","title_tokens":["物理","仿真","三维","：","平台","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_1","text":"","text_tokens":[],"title":"Gazebo仿真平台","title_tokens":["gazebo","平台","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_1","text":"Gazebo是ROS系统中最为常用的 三维物理仿真平台 ，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。","text_tokens":["支持","。","再","帮助","周边","还","测试","可能","，","质量","无人机","力学","没有","最为","频繁","就","多","等","人机","验证","表面","实验","设计","为","差不多","使用","提供","所以","此时","这样","动力学","和","机器人","场景","实物"," ","算法","不仅","模拟","物理","引擎","动力","开发","上来","要","先","部署","ros","导致","弹性系数","应用","属性","可以","类似","一个","系数","实现","加入","环境","的","用","那","摩擦力","限飞","弹性","系统","到","运行","摩擦","比如","图形","仿真","在","中","三维","我们","及","做","、","不妨","更","优化","火星","是","了","机器","平台","高质量","gazebo","续航","常用","不多","周边环境","办法","高质","渲染","无人","都","火星车"],"title":"介绍","title_tokens":["介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_2","text":"Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-*","text_tokens":["。","不妨","一下","使用","功能","sudo","这样","确保","：","apt","和","系统","完整","的","*","？"," ","它","，","-","认识","了","跑","大家","给","相关","已经","$","直接","先","起来","ros","互相","install","gazebo","通过","安装","中","包","humble","装上","命令","简单","认识一下","我们","可以","呢","为了","把","一个","都","如何"],"title":"安装","title_tokens":["安装"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_3","text":"通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py Attention 为保证模型顺利加载，请将离线模型下载并放置到~/.gazebo/models路径下 ，下载链接如下： https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。","text_tokens":["。","之前","是不是","launch","还要","还","动机","放到","，","控制","接下来","就","请","啦",".","通过","接下","一起","models","试试","尝试","该","设计","将","为","链接","/","移动","com","如下","机器人","ros2","加载"," ","移动机器人","ros","attention","命令","可以","_","把",":","环境","的","下载","：","这句","放置","到","？","不是","认识","顺利","模型","大家","~","仿真","在","$","记得","中","启动","osrf","下来","我们","保证","课程","下","py","么","它","了","离线","机器","路径","并","gazebo","github","运动","https"],"title":"运行","title_tokens":["运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#xacro","text":"我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本—— XACRO文件 。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义 ，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含 ，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口 ，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro 以下是一些常用的XACRO文件语法，大家了解下。","text_tokens":["。","之前","也","4","可编","轮子","像","再用","还","介绍","可编程","动机","会","模块","可能","接口","放到","，","包含","底盘","尺寸","传递数据","没有","建模","时候","摄像头","给","就","接下来","有","重复","甚至","多","常量","语句","方法","传感器","通过","接下","—","没","摄像","描述","为了","更为","sudo","设计","以下","丰富","功能","使用","一下","此时","叫","函数","可","移动","语法","让","了解","机器人","切分"," ","感器","传递","代码","化","移动机器人","数据","重复使用","计算","小车","先","要","版本","ros","b","安装","格式","必要","很长","命令","可以","把","一个","实现","加入","的","像头","变量","然后","：","条件","友好","apt","宏","这句","放置","写","过程","urdf","如果","-","需要","同样","模型","比如","定义","大家","总体","创建","在","$","直接","install","不同","中","humble","文件","下来","我们","对","a","link","做","、","下","你","好","更","优化","不能","传感","一样","文件格式","调用","每个","一些","是","个","了","这里","机器","复杂","xacro","gazebo","常用","包","编程","升级","都"],"title":"XACRO机器人模型优化","title_tokens":["机器人","模型","优化","机器","xacro"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_4","text":"<xacro:property>标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。","text_tokens":["。","pi","好","括号","使用","也","<","里边","很","轮子","这样","名为","3.14159","移动","方便","一行",">","用来","机器人","修改","动机","、","调用","urdf","一些"," ","，","底盘","质量","需要","了","尺寸","比如","变化","模型","定义","m","不","不会","“","时候","就","机器","移动机器人","在","数据","找","$","property","标签","常量","值为","xacro","通过","安装","中","针对","文件","”","加大","原本","我们","可以","_","把","一个","都","未来",":","这些","位置","的"],"title":"常量定义","title_tokens":["定义","常量"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_5","text":"如果需要做数学计算，同样是在“${}”中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 Info 所有数学运算都会转换成浮点数进行，以保证运算精度","text_tokens":["。","很多","以","动机","会","可能","结果","，","两个","得到","公式","换成","时候","就","有","常量","关系","通过","这个","浮点数","info","想不起","移动","和","机器人","修改","来","{"," ","数学","“","移动机器人","数据","计算","运算","所有","”","数学计算","可以","一个","未来","加入","位置","的","想不起来","除法","转换","写","如果","需要","相对","同样","模型","某","比如","点数","改成","浮点","在","$","直接","数值","这","中","怎么","我们","保证","做","加法","}","是","精度","了","进行","机器","起来","尽量","转换成","都","根本"],"title":"数学计算","title_tokens":["数学计算","数学","计算"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_6","text":"机器人的轮子我们也做成宏定义，定义方式是通过这个<xacro:macro>标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。","text_tokens":["。","也","轮子","像",">","做成","输入","还","会","，","包含","两个","时候","几个","就","名字","关系","通过","这个","参数","描述","使用","里边","这样","函数","和","机器人","1","joint","来"," ","两句","出现","设置","标签","要","b","刚好","镜像","参数设置","c","可以","把","一个",":","位置","的","方式","宏","关节","-","需要","模型","比如","定义","用到","在","记得","这","中","我们","macro","a","link","、","好","名称","<","一样","当","调用","是","一些","了","区分","这里","机器","xacro","同时"],"title":"宏定义","title_tokens":["定义","宏"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_7","text":"宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。","text_tokens":["另外","。","优化","也","使用","再","是不是","相识","很","然后","语言","里边","函数","像","宏","include","做成","和","去","还","机器人","到","为止","必备","调用","模块","不是","是"," ","一些","，","底盘","包含","了","模型","定义","流程","这种","没有","结束","这里","仿真","接下来","机器","得","似曾","一个","某些","似曾相识","接下","中","嵌套","文件","下来","c语言","我们","参数","可以","对","于是","把","做","加入","的"],"title":"文件包含","title_tokens":["包含","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_8","text":"","text_tokens":[],"title":"机器人仿真模型配置","title_tokens":["机器人","仿真","机器","配置","模型"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_9","text":"第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。","text_tokens":["每","。","一步","确保","因为","和","一定","是","，","需要","物理","仿真","第一","有","平台","惯性","gazebo","第一步","属性","必要","碰撞","参数","都","一个","link","的"],"title":"完善物理参数","title_tokens":["参数","完善","物理"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_2","text":"第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。","text_tokens":["每","。","为","一步","所以","这样","因为","和","添加","系统","主要","冗余","二步","urdf","是","，","配置","在","得","颜色","标签","gazebo","不同","中","第二","可以","渲染","第二步","为了","一个","link","做","的"],"title":"添加Gazebo标签","title_tokens":["添加","gazebo","标签"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_10","text":"第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。","text_tokens":["。","为","joint","是","，","理解","配置","了","第三","仿真","给","三步","要","装置","传动","第三步","运动","传动装置","可以","电机","一个","的"],"title":"配置传动装置","title_tokens":["传动装置","装置","传动","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_11","text":"第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。","text_tokens":["下","。","插件","交给","那","这样","添加","速度","控制器","来","是","，","差速","两个","控制","了","就","四步","在","完成","要","小车","gazebo","不同","分配","第四","第四步","可以","电机","角度","一个","的"],"title":"添加控制器插件","title_tokens":["控制器","添加","插件","控制"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_12","text":"接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ])","text_tokens":["y","。","x","packages","=","launch","0.0","[","have","sim","节点","，","join","!","python","entity","接下来","就","import","#","robot","publisher",".","node","me","(","接下","provided","output","如何","spwan","want","提供","功能","file","/","sure","include","'",",","time","]","share","加载",")"," ","sources","by","correctly","{","run","spawn","t","you","arguments","enabled","ros","where","includelaunchdescription","val","learning","description","only","worlds","_","把","一个","---",":","make","的","topic","single","from","考虑","mbot","doesn","return","really","到","all","urdf","package","load","-","them","需要","yaw","items","模型","generate","z","def","用到","if","state","true","中","pose","下来","world","a","actions","pythonlaunchdescriptionsource","get","ament","set","matter","<","py","be","the","path","name","spawner","}","executable","own","了","change","os","into","launchdescription","use","screen","pkg","gazebo","force","directory","index","to","neighborhood","we","our"],"title":"构建仿真环境","title_tokens":["环境","构建","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_13","text":"万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard Attention 虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 通过键盘上的“i、j、，、l”几个按键，就可以控制机器人前后左右运动啦。 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。","text_tokens":["。","很多","=","launch",">","上","虚拟","有点像","节点","，","键盘","控制","万事","接下来","几个","就","已经","啦",".","teleop","0","通过","接下","i","海龟","奇迹","小海","硬件加速","/","此时","和","第二句","\"","机器人","ros2"," ","run","比","两句","流程","关闭","“","export","第一","j","虚拟机","attention","按键","硬件","俱备","命令","一句","learning","”","左右","可以","_","时","环境","的","有点","：","见证","第一句","以上","运行","过程","urdf","load","需要","~","仿真","$","vgpu10","bashrc","中","svga","启动","下来","加速","基本","我们","第二","、","py","万事俱备","就是","整个","前后","了","l","二句","前后左右","时刻","机器","不过","复杂","into","twist","gazebo","小海龟","keyboard","运动","echo"],"title":"机器人运动仿真","title_tokens":["机器人","机器","运动","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#ignitiongazebo","text":"随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为 Ignition ，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 运行成功后，会打开Ignition的仿真界面和Rviz上位机，我们可以看到RGBD相机仿真后发布的图像数据。 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/","text_tokens":["。","也","一代","launch","bridge","上","会","，","流畅","变化","ignitionrobotics","新","有",".","试一下","多","效果","sudo","为","一下","随着","仿真器","/","信息","和","ros2","来"," ","www","数据","进步","ros","版本","上位","camera","不断","官方","相机","可以","_","迭代","看到",":","的","rviz","新一代","apt","org","rgbd","运行","demos","-","发布","参考","大家","技术","仿真","在","$","install","打开","humble","ign","我们","从","官方网","更","不妨","命名","ignition","py","机","界面","度","较大","后","平台","官方网站","gazebo","网站","图像","成功","渲染","真器","都"],"title":"Ignition：下一代Gazebo","title_tokens":["ignition","一代","：","gazebo","下一代"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_14","text":"learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["y","x","pi","=","is","type",">","parent","for","trans","odometry","0.95","0.015","material","and","mass","diameter","in","!","velocityjointinterface","source","axis","robot","list","tf","iyy",".","simpletransmission","0.2","0","colors","3","separation","(","find","inertial","iyz","prefix","wheel","geometry","0.4","transmission","2","false","hardware","/","caster","izz","include","radius","command","\"","1","joint",")"," ","http","length","{","hardwareinterface","r","www","actuator","matrix","left","0.19","reference","filename","gray","drive","acceleration","cmd","color","cylinder","back","blue","property","ros","?","frame","ixy","motor","origin","+","learning","12","0.001","_","0.025",":","topic","mbot","wiki","plugin","value","rate","org","base","*","urdf","xml","interface","turngravityoff","-","used","inertia","m","0.18","xyz","z","1.0","h","$","ixz","true","box","ixx","0.05","0.06","libgazebo","macro","update","link","differential","reflect","xmlns","collision","<","0.75","sphere","front","joints","black","the","name","rgba","0.20","}","diff","controller","0.16","--","version","odom","30","max","5","3.1415926","params","publish","child","size","right","visual","20","xacro","rpy","important","gazebo","continuous","to","this","footprint","so","vel","fixed","defining","yellow","mechanicalreduction","torque"],"title":"附录：机器人完整模型","title_tokens":["机器人","模型","机器","：","附录","完整"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/","text":"Rviz：三维可视化显示平台 大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾—— Rviz ，一款 三维可视化显示 的神器。 Rviz三维可视化平台 机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。 Rviz介绍 一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。 运行方法 启动一个终端，使用如下命令即可启动： $ ros2 run rviz2 rviz2 彩色相机仿真与可视化 摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。 仿真插件配置 关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 learning_gazebo/urdf/sensers/camera_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"camera\" name= \"camera_node\" > <update_rate> 30.0 </update_rate> <camera name= \"head\" > <horizontal_fov> 1.3962634 </horizontal_fov> <image> <width> 1280 </width> <height> 720 </height> <format> R8G8B8 </format> </image> <clip> <near> 0.02 </near> <far> 300 </far> </clip> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.007 </stddev> </noise> </camera> <plugin name= \"gazebo_camera\" filename= \"libgazebo_ros_camera.so\" > <ros> <!-- <namespace>stereo</namespace> --> <remapping> ~/image_raw:=image_raw </remapping> <remapping> ~/camera_info:=camera_info </remapping> </ros> <camera_name> ${prefix} </camera_name> <frame_name> ${prefix}_link </frame_name> <hack_baseline> 0.2 </hack_baseline> </plugin> </sensor> </gazebo> 主要配置项如下： <sensor>标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 <camera>标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 <plugin>标签：加载摄像头仿真插件 运行仿真环境 模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py 可以使用命令行看下仿真出来的图像话题： 图像数据可视化 我们使用Rviz可视化显示图像信息，先来启动Rviz： $ ros2 run rviz2 rviz2 启动成功后，在左侧Displays窗口中点击“Add”，找到Image显示项，OK确认后就可以加入显示列表啦，然后配置好该显示项订阅的图像话题，就可以顺利看到机器人的摄像头图像啦。 三维相机仿真与可视化 二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。 仿真插件配置 三维相机使用的Gazebo插件也是libgazebo_ros_camera.so，配置方法如下： learning_gazebo/urdf/sensers/kinect_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"depth\" name= \"${prefix}\" > <always_on> true </always_on> <update_rate> 15.0 </update_rate> <pose> 0 0 0 0 0 0 </pose> <camera name= \"kinect\" > <horizontal_fov> ${60.0*M_PI/180.0} </horizontal_fov> <image> <format> R8G8B8 </format> <width> 640 </width> <height> 480 </height> </image> <clip> <near> 0.05 </near> <far> 8.0 </far> </clip> </camera> <plugin name= \"${prefix}_controller\" filename= \"libgazebo_ros_camera.so\" > <ros> <!-- <namespace>${prefix}</namespace> --> <remapping> ${prefix}/image_raw:=rgb/image_raw </remapping> <remapping> ${prefix}/image_depth:=depth/image_raw </remapping> <remapping> ${prefix}/camera_info:=rgb/camera_info </remapping> <remapping> ${prefix}/camera_info_depth:=depth/camera_info </remapping> <remapping> ${prefix}/points:=depth/points </remapping> </ros> <camera_name> ${prefix} </camera_name> <frame_name> ${prefix}_frame_optical </frame_name> <hack_baseline> 0.07 </hack_baseline> <min_depth> 0.001 </min_depth> <max_depth> 300.0 </max_depth> </plugin> </sensor> </gazebo> 运行仿真环境 使用如下命令启动仿真环境： $ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py 启动成功后，可以看下当前的话题列表，已经产生了三维相机的相关话题。 点云数据可视化 运行Rviz： $ ros2 run rviz2 rviz2 同样的流程，点击Add，添加PointCloud2，设置订阅的点云话题，还要配置Rviz的参考系是odom，就可以看到点云数据啦，每一个点都是由xyz位置和rgb颜色组成。 激光雷达仿真与可视化 除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。 仿真插件配置 雷达使用的Gazebo插件是libgazebo_ros_ray_sensor.so，配置方法如下： learning_gazebo/urdf/sensers/lidar_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"ray\" name= \"rplidar\" > <update_rate> 20 </update_rate> <ray> <scan> <horizontal> <samples> 360 </samples> <resolution> 1 </resolution> <min_angle> -3 </min_angle> <max_angle> 3 </max_angle> </horizontal> </scan> <range> <min> 0.10 </min> <max> 30.0 </max> <resolution> 0.01 </resolution> </range> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.01 </stddev> </noise> </ray> <plugin name= \"gazebo_rplidar\" filename= \"libgazebo_ros_ray_sensor.so\" > <ros> <namespace> / </namespace> <remapping> ~/out:=scan </remapping> </ros> <output_type> sensor_msgs/LaserScan </output_type> </plugin> </sensor> </gazebo> 运行仿真环境 使用如下命令启动仿真环境： $ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py 在话题列表中也可以看到激光雷达啦。 点云数据可视化 启动Rviz： $ ros2 run rviz2 rviz2 点击Add，选择Laserscan，然后配置订阅的话题名，rviz的固定坐标系依然是odom，此时就可以看到激光点啦。 Rviz vs Gazebo 好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下： Gazebo是 仿真平台 ，核心功能是 创造数据 ，我们没有机器人或者传感器，它可以帮我们做一个虚拟的； Rviz是 可视化平台 ，核心功能是 显示数据 ，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。 参考链接 https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":["本","是不是","除了","很多","还要","255","自由","点击","上","一款","巧妇难为无米之炊","介绍","按照","far","虚拟","0.01","，","左侧","不用","畅想","最为","有没有","摄像头","就","已经","讲","0.2","这个","—","效果","自带","stddev","可视化","拍摄","参数","试试","min","驾驶","手上","肯定","sensers","帮","每","功能","提供","点","/","但","和","试一试","产生","了解","ros2","on","打造","kinect","核心","基于","www","还有","项","量级","相信","filename","依然","彩色","移动机器人","标签","先","由","ros","格式","一句","官方","只是","相机","把","一个","类型","看到",":","加入","汽车","mbot","方便","plugin","rate","图形化","到","消息","运行","rgb","load","获取","参考系","顺利","比如","名","分辨率","看","0.10","三维","libgazebo","我们","啥","等等","做","先来","好","<","说明","ok","好该","width","只有","哪些","}","controller","--","常备","这里","一脸","samples","全都","成功","效率","渲染","插件","再","也","周边","gaussian","会用",">","搞定","外部","动机","会","包括","两个","!","很难","几个","给","msgs","与","有","raw",".","层面","node","多","啦","0","docs","范围","方法","等","二维","prefix","一分","玩起来","链接","世界","所以","这样","信息","此时","创造","重量","lidar","image","1","0.07","来","代码","“","相关","价格比","分析","60.0","坐标","内部","强调","拭目","clip","learning","话","0.001","各种各样","可以","机械","类似","当然","辨率","像头","stereo","窗口","选择","神器","过","不想","rgbd","主要","usb","*","？","urdf","不是","问","-","同样","出厂","xyz","realsense","~","laser","人","不到","0.007","$","laserscan","自己","巧妇","remapping","displays","能够","对","angle","你","near","传感","不能","py","fov","工具","理解","odom","max","外部环境","涉及","列表","30.0","不过","知道","路径","颜色","into","平台","后","案例","xacro","namespace","编码","一目","r8g8b8","。","pi","样","希望","launch","type","提高","显示","ray","确认","具体","360","内容","这种","混淆","height","新","噪音","了然","3","传感器","通过","head","摄像","output","设计","info","如何","out","叫做","vs","移动","480","岂","qt","format","com","如下","用来","\"","1280","一堆","noise","加载"," ","{","真实","导航","reference","软件","数据","激光雷达","计算","720","长","camera","”","mean","intel","_","这些","位置","的","环境","或者","一种","然后","一个点","1.3962634","过程","如果","stereolabs","模型","不","大家","这幅","depth","在","眼中","大大","命令行","找到","激光","组成","这","一目了然","中","开放","update","、","可贵","下","对应","更","固定","add","框架","一些","想","它","坐标系","配置","了","可视","范畴","20","重量级","gazebo","想不到","运动","过瘾","图像","so","https","当前","都","只要","规划","=","添加","0.0","拭目以待","baseline","出来","什么","没有","always","各样","时候","分辨","还是","300","非常","呢","描述","的话","使用","15.0","臂","机器人","points","场景","rviz2","horizontal","run","感器","流程","体感","点云","难为","分钱","快速","8.0","开发","设置","玩起","frame","某些","才","上位","range","什么样","命令","订阅","300.0","众多","熟悉","；","rplidar","雷达","rviz","用","：","一分钱","即可","去","懵","一位","以待","需要","发布","m","参考","resolution","图形","仿真","话题","pointcloud2","sensor","true","开放式","各种","pose","启动","0.05","自主","hack","180.0","从","link","自动","命名","机","640","name","终端","么","能","关于","是","数字","就是","对照","大大提高","optical","不少","满意","并且","机器","嘉宾","起来","问题","常用","0.02","github","装","价格","scan"],"title":"Rviz","title_tokens":["rviz"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz","text":"大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾—— Rviz ，一款 三维可视化显示 的神器。","text_tokens":["。","本","rviz","世界","神器","过","重量","一款","机器人","介绍","到","显示","？","是"," ","一位","，","了","什么","量级","没有","大家","畅想","涉及","可视","有没有","摄像头","就","范畴","机器","眼中","讲","嘉宾","问题","ros","重量级","这","什么样","如何","中","—","能够","摄像","图像","三维","拍摄","可视化","我们","呢","一个","看到","像头","的"],"title":"Rviz：三维可视化显示平台","title_tokens":["可视","显示","rviz","三维","：","可视化","平台"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_1","text":"机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。","text_tokens":["。","再","规划","周边","样","很多","希望","255","提高","搞定","一款","动机","，","内容","出来","什么","很难","各样","摄像头","给","就","了然","层面","0","传感器","通过","效果","摄像","可视化","描述","设计","肯定","功能","所以","这样","信息","移动","岂","但","和","用来","臂","机器人","一堆","场景"," ","感器","还有","导航","软件","快速","移动机器人","分析","开发","数据","坐标","激光雷达","计算","内部","长","才","只是","各种各样","可以","机械","类似","把","众多","相机","看到","当然","这些","位置","的","环境","像头","雷达","rviz","去","懵","到","过程","？","问","如果","需要","模型","比如","不","这幅","人","在","大大","激光","看","一目了然","自己","中","各种","自主","三维","我们","啥","等等","从","做","、","你","传感","么","哪些","是","数字","就是","理解","坐标系","大大提高","这里","可视","一脸","机器","知道","路径","颜色","运动","全都","图像","效率","渲染","都","一目"],"title":"Rviz三维可视化平台","title_tokens":["可视","rviz","三维","可视化","平台"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_2","text":"一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。","text_tokens":["。","对应","插件","rviz","功能","也","更","说明","机","很多","qt","方便","添加","工具","框架","只有","图形化","机器人","按照","显示","消息","打造","看到"," ","是","它","，","如果","核心","基于","想","了","发布","项","出厂","不","没有","图形","可视","满意","就","新","机器","话题","在","有","数据","不到","开发","平台","多","ros","开放式","某些","常用","自己","上位","中","这个","想不到","效果","一句","官方","自带","话","可视化","我们","开放","可以","对","一个","只要","做","或者","的"],"title":"Rviz介绍","title_tokens":["介绍","rviz"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_1","text":"启动一个终端，使用如下命令即可启动： $ ros2 run rviz2 rviz2","text_tokens":["ros2","启动","rviz2","使用","命令"," ","run","：","，","$","一个","如下","即可","终端"],"title":"运行方法","title_tokens":["方法","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_2","text":"摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。","text_tokens":["先来","。","一种","传感","上","机器人","是","，","感器","了","最为","摄像头","给","机器","传感器","常用","摄像","装","我们","肯定","像头","的"],"title":"彩色相机仿真与可视化","title_tokens":["可视","彩色","仿真","与","可视化","相机"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_3","text":"关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 learning_gazebo/urdf/sensers/camera_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"camera\" name= \"camera_node\" > <update_rate> 30.0 </update_rate> <camera name= \"head\" > <horizontal_fov> 1.3962634 </horizontal_fov> <image> <width> 1280 </width> <height> 720 </height> <format> R8G8B8 </format> </image> <clip> <near> 0.02 </near> <far> 300 </far> </clip> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.007 </stddev> </noise> </camera> <plugin name= \"gazebo_camera\" filename= \"libgazebo_ros_camera.so\" > <ros> <!-- <namespace>stereo</namespace> --> <remapping> ~/image_raw:=image_raw </remapping> <remapping> ~/camera_info:=camera_info </remapping> </ros> <camera_name> ${prefix} </camera_name> <frame_name> ${prefix}_link </frame_name> <hack_baseline> 0.2 </hack_baseline> </plugin> </sensor> </gazebo> 主要配置项如下： <sensor>标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 <camera>标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 <plugin>标签：加载摄像头仿真插件","text_tokens":["。","插件","=","gaussian","type","自由",">","0.0","介绍","far","，","baseline","!","height","摄像头","给","噪音","raw",".","node","分辨","0.2","300","范围","方法","传感器","head","这个","等","摄像","prefix","stddev","参数","描述","sensers","info","叫做","提供","使用","/","format","如下","\"","image","1280","horizontal","noise","加载"," ","{","感器","项","代码","reference","filename","设置","标签","ros","720","frame","clip","camera","格式","learning","mean","_","类型",":","辨率","像头","的","stereo","：","plugin","rate","1.3962634","主要","urdf","需要","模型","大家","~","仿真","分辨率","0.007","$","sensor","remapping","libgazebo","hack","我们","update","link","对应","命名","near","<","传感","fov","name","width","}","关于","--","对照","配置","30.0","xacro","gazebo","0.02","namespace","图像","so","编码","都","r8g8b8"],"title":"仿真插件配置","title_tokens":["插件","配置","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_4","text":"模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py 可以使用命令行看下仿真出来的图像话题：","text_tokens":["。","下","好","rviz","使用","不能","信息","mbot","py","：","launch","能","ros2","拭目以待"," ","，","load","以待","配置","出来","模型","并且","仿真","摄像头","话题","已经","在","into","啦","$",".","命令行","看","gazebo","拭目","中","camera","learning","命令","摄像","图像","成功","我们","可以","_","把","看到","像头","的"],"title":"运行仿真环境","title_tokens":["环境","运行","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_5","text":"我们使用Rviz可视化显示图像信息，先来启动Rviz： $ ros2 run rviz2 rviz2 启动成功后，在左侧Displays窗口中点击“Add”，找到Image显示项，OK确认后就可以加入显示列表啦，然后配置好该显示项订阅的图像话题，就可以顺利看到机器人的摄像头图像啦。","text_tokens":["。","rviz","使用","窗口","add","然后","信息","：","ok","好该","点击","image","机器人","ros2","显示","rviz2","确认","来"," ","run","，","左侧","配置","顺利","项","“","可视","列表","摄像头","就","话题","机器","在","像头","$","找到","后","啦","先","中","启动","displays","”","图像","摄像","成功","订阅","可视化","我们","可以","看到","加入","的"],"title":"图像数据可视化","title_tokens":["图像","可视","可视化","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_6","text":"二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。","text_tokens":["。","也","传感","一分钱","不想","外部","环境","可贵","usb","kinect","想","，","感器","获取","比如","不用","外部环境","不","体感","点云","这种","分钱","realsense","不少","仿真","摄像头","就","价格比","不过","数据","起来","玩起","常用","传感器","通过","二维","过瘾","摄像","三维","我们","试试","相机","可以","intel","价格","一分","玩起来","或者","像头","的"],"title":"三维相机仿真与可视化","title_tokens":["可视","仿真","三维","与","可视化","相机"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_7","text":"三维相机使用的Gazebo插件也是libgazebo_ros_camera.so，配置方法如下： learning_gazebo/urdf/sensers/kinect_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"depth\" name= \"${prefix}\" > <always_on> true </always_on> <update_rate> 15.0 </update_rate> <pose> 0 0 0 0 0 0 </pose> <camera name= \"kinect\" > <horizontal_fov> ${60.0*M_PI/180.0} </horizontal_fov> <image> <format> R8G8B8 </format> <width> 640 </width> <height> 480 </height> </image> <clip> <near> 0.05 </near> <far> 8.0 </far> </clip> </camera> <plugin name= \"${prefix}_controller\" filename= \"libgazebo_ros_camera.so\" > <ros> <!-- <namespace>${prefix}</namespace> --> <remapping> ${prefix}/image_raw:=rgb/image_raw </remapping> <remapping> ${prefix}/image_depth:=depth/image_raw </remapping> <remapping> ${prefix}/camera_info:=rgb/camera_info </remapping> <remapping> ${prefix}/camera_info_depth:=depth/camera_info </remapping> <remapping> ${prefix}/points:=depth/points </remapping> </ros> <camera_name> ${prefix} </camera_name> <frame_name> ${prefix}_frame_optical </frame_name> <hack_baseline> 0.07 </hack_baseline> <min_depth> 0.001 </min_depth> <max_depth> 300.0 </max_depth> </plugin> </sensor> </gazebo>","text_tokens":["pi","插件","也","=","type",">","far","，","baseline","!","always","height","raw",".","0","方法","prefix","min","sensers","info","使用","/","480","format","如下","15.0","\"","image","points","horizontal","on","0.07","kinect"," ","{","reference","filename","8.0","60.0","ros","frame","clip","camera","learning","0.001","相机","300.0","_",":","的","：","plugin","rate","*","urdf","rgb","m","depth","$","sensor","true","pose","remapping","0.05","三维","libgazebo","hack","180.0","update","link","near","<","fov","640","name","width","}","controller","是","--","max","配置","optical","xacro","gazebo","namespace","so","r8g8b8"],"title":"仿真插件配置","title_tokens":["插件","配置","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_8","text":"使用如下命令启动仿真环境： $ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py 启动成功后，可以看下当前的话题列表，已经产生了三维相机的相关话题。","text_tokens":["下","。","使用","：","mbot","py","launch","如下","产生","ros2","rgbd"," ","，","load","了","列表","仿真","相关","话题","已经","into","$",".","后","看","gazebo","启动","命令","learning","三维","成功","当前","相机","可以","_","环境","的"],"title":"运行仿真环境","title_tokens":["环境","运行","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_9","text":"运行Rviz： $ ros2 run rviz2 rviz2 同样的流程，点击Add，添加PointCloud2，设置订阅的点云话题，还要配置Rviz的参考系是odom，就可以看到点云数据啦，每一个点都是由xyz位置和rgb颜色组成。","text_tokens":["每","。","rviz","add","：","一个点","还要","点击","和","添加","ros2","rviz2","运行"," ","run","是","，","rgb","odom","同样","配置","参考系","流程","参考","点云","xyz","就","话题","数据","pointcloud2","$","设置","啦","由","颜色","组成","订阅","可以","都","一个","看到","位置","的"],"title":"点云数据可视化","title_tokens":["数据","可视","可视化","点云"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_10","text":"除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。","text_tokens":["。","雷达","汽车","自动","也","除了","传感","移动","很多","和","试一试","机器人","动机","包括","来","是","常备","，","感器","摄像头","机器","移动机器人","激光雷达","激光","传感器","摄像","三维","我们","相机","驾驶","像头","的"],"title":"激光雷达仿真与可视化","title_tokens":["雷达","可视","仿真","与","可视化","激光雷达","激光"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_11","text":"雷达使用的Gazebo插件是libgazebo_ros_ray_sensor.so，配置方法如下： learning_gazebo/urdf/sensers/lidar_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"ray\" name= \"rplidar\" > <update_rate> 20 </update_rate> <ray> <scan> <horizontal> <samples> 360 </samples> <resolution> 1 </resolution> <min_angle> -3 </min_angle> <max_angle> 3 </max_angle> </horizontal> </scan> <range> <min> 0.10 </min> <max> 30.0 </max> <resolution> 0.01 </resolution> </range> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.01 </stddev> </noise> </ray> <plugin name= \"gazebo_rplidar\" filename= \"libgazebo_ros_ray_sensor.so\" > <ros> <namespace> / </namespace> <remapping> ~/out:=scan </remapping> </ros> <output_type> sensor_msgs/LaserScan </output_type> </plugin> </sensor> </gazebo>","text_tokens":["out","rplidar","雷达","插件","使用","<","/","：","=","gaussian","type","plugin","如下",">","name","rate","0.0","lidar","\"","}","ray","horizontal","1","noise","urdf","是"," ","{","，","360","0.01","-","max","配置","output","reference","resolution","filename","~","angle","30.0","msgs","$",".","sensor","20","ros","xacro","3","方法","gazebo","0.10","range","laserscan","remapping","samples","namespace","learning","prefix","stddev","libgazebo","so","min","mean","_","scan","update",":","link","sensers","的"],"title":"仿真插件配置","title_tokens":["插件","配置","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_12","text":"使用如下命令启动仿真环境： $ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py 在话题列表中也可以看到激光雷达啦。","text_tokens":["。","雷达","使用","也","：","mbot","py","launch","如下","ros2"," ","load","列表","仿真","laser","话题","在","into","$",".","啦","激光雷达","激光","gazebo","中","启动","命令","learning","可以","_","看到","环境"],"title":"运行仿真环境","title_tokens":["环境","运行","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_13","text":"启动Rviz： $ ros2 run rviz2 rviz2 点击Add，选择Laserscan，然后配置订阅的话题名，rviz的固定坐标系依然是odom，此时就可以看到激光点啦。","text_tokens":["。","rviz","点","固定","选择","add","然后","：","此时","点击","ros2","rviz2"," ","run","是","，","坐标系","odom","配置","依然","名","就","话题","$","坐标","啦","激光","laserscan","启动","订阅","可以","看到","的"],"title":"点云数据可视化","title_tokens":["数据","可视","可视化","点云"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz-vs-gazebo","text":"好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下： Gazebo是 仿真平台 ，核心功能是 创造数据 ，我们没有机器人或者传感器，它可以帮我们做一个虚拟的； Rviz是 可视化平台 ，核心功能是 显示数据 ，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。","text_tokens":["。","也","再","是不是","很多","会用","巧妇难为无米之炊","显示","会","具体","虚拟","，","两个","没有","混淆","时候","几个","就","已经","有","啦","讲","还是","方法","传感器","通过","非常","可视化","手上","帮","的话","功能","使用","所以","创造","信息","和","了解","机器人","来"," ","真实","感器","核心","流程","相信","难为","软件","数据","强调","可以","一个","熟悉","；","或者","环境","的","rviz","用","：","到","不是","如果","大家","仿真","在","不到","这","自己","巧妇","启动","我们","对","做","下","好","传感","一些","是","它","了","这里","可视","机器","不过","案例","平台","gazebo","常用"],"title":"Rviz vs Gazebo","title_tokens":["gazebo"," ","rviz","vs"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_14","text":"https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":["ros2","rviz2","github","rviz","/","https"," ","stereolabs",".","www","docs","com",":"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/","text":"RQT：模块化可视化工具 ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具—— rqt 。 rqt介绍 正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，一些常用的功能如下： 日志显示 图像显示 发布话题数据/调用服务请求 绘制数据曲线 数据包管理 节点可视化 参考资料 https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":["。","服务","也","很","很多","en","介绍","觉得","显示","会","具体","模块","可能","节点","，","模块化","摄像头","就","已经","而",".","docs","通过","这个","concepts","绘制","—","about","摄像","可视化","sudo","的话","功能","使用","提供","正如","里边","有些","难免","此时","这样","/","qt","和","如下","管理","场景","console","加载","来"," ","基于","开发","数据","ros","请求","安装","一句","命令","可以","日志","类似","一个",":","实现","像头","的","另外","一种","rviz","有点","指令","然后","：","tutorials","apt","org","前","资料","只","-","需要","发布","html","比如","参考","参考资料","用到","话题","在","曲线","$","install","中","humble","启动","简单","我们","下","更","命名","一样","强大","麻烦","rqt","工具","界面","调用","每个","一些","是","它","操作","了","可视","进行","小","不过","难免会","常用","图像","using","https","数据包","都"],"title":"Rqt","title_tokens":["rqt"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt","text":"ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具—— rqt 。","text_tokens":["下","的话","。","更","rviz","功能","使用","很","有点","提供","有些","难免","此时","强大","麻烦","rqt","工具","觉得","场景","显示","会","模块","可能","一些","只"," ","，","操作","需要","一种","了","比如","模块化","可视","摄像头","用到","就","已经","不过","难免会","ros","中","—","简单","摄像","图像","另外","我们","可视化","一个","像头","的"],"title":"RQT：模块化可视化工具","title_tokens":["模块化","可视","模块","：","可视化","rqt","工具"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt_1","text":"正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，一些常用的功能如下：","text_tokens":["。","rviz","命名","正如","也","使用","指令","里边","功能","这样","一样","然后","很多","qt","：","apt","和","如下","rqt","工具","界面","前","加载","来","模块","每个","是"," ","它","，","具体","基于","-","一些","需要","了","可视","进行","就","小","在","开发","而","$","ros","install","常用","通过","安装","这个","humble","启动","一句","命令","可视化","我们","可以","类似","都","一个","sudo","实现","的"],"title":"rqt介绍","title_tokens":["介绍","rqt"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_1","text":"","text_tokens":[],"title":"日志显示","title_tokens":["日志","显示"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_2","text":"","text_tokens":[],"title":"图像显示","title_tokens":["图像","显示"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_3","text":"","text_tokens":[],"title":"发布话题数据/调用服务请求","title_tokens":["服务","调用","/","话题","数据","发布","请求"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_4","text":"","text_tokens":[],"title":"绘制数据曲线","title_tokens":["曲线","绘制","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_5","text":"","text_tokens":[],"title":"数据包管理","title_tokens":["管理","数据包","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_6","text":"","text_tokens":[],"title":"节点可视化","title_tokens":["可视","节点","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_7","text":"https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":["humble","concepts","about","console","using","/","https","html"," ","tutorials",".","docs","-","ros","en",":","rqt","org"],"title":"参考资料","title_tokens":["参考","参考资料","资料"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/","text":"资源汇总 常用框架 自主导航 比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/ 自动驾驶 自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/ 路径规划 此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/ 机器人学 ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。 视频课程 斯坦福大学公开课 —— 机器人学 台大机器人学之运动学 Self-Driving Cars with ROS2 & Autoware 古月学院 常用链接 ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":["工程","。","福大","也","导航系统","规划","很多","资源","en","经典","上","内功","动机","会","cn","热门","模块","，","包含","台大","人学","内容","控制","除此","最为","几个","修炼","就","经典著作","有","此外",".","docs","多","居","这个","即便","等","—","moveit","自身","非常","碰撞","感兴趣","驾驶","仔细","navigation","工程师","著名","丰富","《","2","功能","提供","使用","链接","分拣","/","移动","汇总","autoware","行业","auto","和","com","完整","公开课","臂","机器人","ros2","大学","商业化","学习","被","重在"," ","算法","http","www","还有","导航","感知","检测","中文","driving","代码","导论","快速","相关","移动机器人","开发","得","推荐","要","视觉","实操","ros","版本","视频","感兴","应用","机器人学","之外","之","可以","机械","一个","情况",":","实现","这些","的","一种","选择","ubuntu","当今","roscon","：","wiki","斯坦福大学","系统","org","兴趣","碰撞检测","io","cars","with","基本功","必备","理论","如果","之一","典型","-","html","比如","》","不","参考","&","大家","classic","结合","技能","在","称为","找到","阅读","自己","这","中","各种","humble","除此之外","自主","基本","我们","对","至于","运动学","gitlab","人手","商业","、","课程","著作","对应","好","自动","更","社区","每一","公开","autowarefoundation","具备","一本","工具","框架","斯坦福","基本功能","robots","是","autowareauto","self","学院","了","这套","仔细阅读","进行","开课","机器","documentation","路径","gazebo","常用","index","运动","github","知识","理论知识","https","guyuehome","都","本书","任何","古月","书籍","gazebosim"],"title":"资源汇总","title_tokens":["资源","汇总"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_1","text":"","text_tokens":[],"title":"资源汇总","title_tokens":["资源","汇总"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_2","text":"","text_tokens":[],"title":"常用框架","title_tokens":["常用","框架"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_3","text":"比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/","text_tokens":["。","好","功能","提供","导航系统","也","使用","链接","/","：","移动","和","具备","系统","完整","框架","上","org","机器人","基本功能","ros2","动机","会","基本功","算法"," ","，","如果","内容","导航","了","比如","不","代码","参考","大家","这套","快速","进行","相关","机器","移动机器人","在","开发",".","要","ros","自己","应用","这个","各种","即便","中","自主","基本","https","我们","可以","navigation","都","任何",":","实现","的"],"title":"自主导航","title_tokens":["自主","导航"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_4","text":"自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/","text_tokens":["。","一种","著名","自动","丰富","功能","也","社区","链接","规划","当今","/","：","很多","auto","autoware","行业","和","autowarefoundation","系统","org","框架","兴趣","机器人","io","、","热门","模块","商业化","是"," ","autowareauto","，","包含","如果","之一","典型","www","控制","了","感知","参考","大家","最为","几个","机器","在","有",".","ros","这","感兴","应用","中","等","这个","—","非常","https","感兴趣","驾驶","可以","对","一个",":","gitlab","实现","商业","的"],"title":"自动驾驶","title_tokens":["驾驶","自动"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_5","text":"此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/","text_tokens":["。","更","功能","也","使用","链接","分拣","规划","/","经典","框架","org","臂","碰撞检测","的"," ","是","，","还有","内容","检测","大家","相关","在","此外","找到",".","视觉","多","ros","这","等","中","这个","运动","moveit","碰撞","非常","https","可以","机械","都",":","、"],"title":"路径规划","title_tokens":["路径","规划"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_6","text":"ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。","text_tokens":["工程","。","著作","对应","《","选择","每一","一本","工具","经典","内功","机器人","情况","必备","学习","被","重在","是"," ","，","理论","人学","中文","比如","》","大家","除此","结合","导论","仔细阅读","修炼","就","相关","机器","技能","经典著作","开发","得","称为","推荐","有","实操","ros","版本","这些","阅读","除此之外","机器人学","之外","知识","理论知识","自身","工程师","仔细","可以","至于","都","本书","书籍","人手","的"],"title":"机器人学","title_tokens":["机器人","机器","机器人学","人学"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_7","text":"斯坦福大学公开课 —— 机器人学 台大机器人学之运动学 Self-Driving Cars with ROS2 & Autoware 古月学院","text_tokens":["福大","autoware","斯坦福大学","公开","公开课","斯坦福","机器人","cars","ros2","大学","with"," ","self","学院","-","台大","人学","driving","&","开课","机器","—","运动","机器人学","之","运动学","古月"],"title":"视频课程","title_tokens":["视频","课程"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_8","text":"ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":["2","ubuntu","/","roscon","：","wiki","com","en","org","ros2","cn","robots"," ","http","www","html","classic","documentation",".","docs","ros","居","gazebo","humble","index","github",":","https","guyuehome","古月","gazebosim"],"title":"常用链接","title_tokens":["常用","链接"]}]}