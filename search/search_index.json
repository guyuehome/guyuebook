{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"引言 机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的 电气时代 。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的 数字时代 ，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发， 智能机器人时代 正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。 教程链接汇总 课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/90 博客泡圈： https://www.guyuehome.com/","text_tokens":["—","爆发","而言","太","必将","伺服","热点","电气","人类","成为","不过","正式","tutorials","七八十年","智能","七八十","传感器","重要","时期","伺服电机","动力","主角","家庭","21","大","帮助","算机","gitee","发展","机器人","guyuehome","ai","年","/","之一","circledetail","丰富","图文","操作系统","此时","局部","操作","数字","七八","完全","横跨","system","拉开","视频","电机","随着","对","时代","90","但是","劳动力","逐渐","和","前夜","狗","仿生","，","俗称","状","源码","github","引言","也","控制","2015","拉开序幕","三个","不断","robot",".","八十","缺少","经历",":","人工智能","命令","动作","https","工业","过程","人工","类型","我们","减速","送餐","序幕","没有","技术","不断丰富","呈","有限","减速机","年前","ros2","感器","之后","业生","生产","id","agv","博客","book","计算机","汽车","计算","链接","是","2000","教程","class","设备","问答","驾驶","载体","驱动","控制器","自动","执行"," ","八十年","按照","多","智能化","operating","服务","自主","汇总","释放","出现","由示","于","工业生产","bubble","应用","泡圈","传感","工厂","的","层面","高","要求","课程","这是","：","关注","等","主要","只能","提出","软件","www","环境","系统","更加","四足","了","思考","最为","教器","劳动","视觉","依然","、","后","最佳","_","井喷","检测","更","十年","。","快速","机器","就是","驱动器","并","感知","开发","com","这","操控"],"title":"引言","title_tokens":["引言"]},{"location":"#_1","text":"机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的 电气时代 。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的 数字时代 ，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发， 智能机器人时代 正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。","text_tokens":["—","爆发","而言","太","必将","伺服","热点","电气","人类","成为","不过","正式","七八十年","智能","七八十","传感器","重要","时期","伺服电机","动力","主角","家庭","大","帮助","算机","发展","机器人","ai","年","之一","丰富","操作系统","此时","局部","操作","数字","七八","完全","横跨","system","拉开","电机","随着","对","时代","但是","劳动力","逐渐","和","前夜","狗","仿生","，","俗称","状","也","控制","2015","拉开序幕","三个","不断","robot","八十","缺少","经历","人工智能","命令","动作","工业","过程","人工","类型","我们","减速","送餐","序幕","没有","技术","不断丰富","呈","有限","减速机","年前","感器","之后","业生","生产","agv","计算机","汽车","计算","是","2000","设备","驾驶","载体","驱动","控制器","自动","执行"," ","八十年","按照","多","智能化","operating","服务","自主","释放","出现","由示","于","工业生产","应用","传感","工厂","的","层面","高","要求","课程","这是","关注","等","主要","只能","提出","软件","环境","系统","更加","四足","了","思考","最为","教器","劳动","视觉","依然","、","后","最佳","井喷","检测","更","。","十年","快速","机器","就是","驱动器","并","感知","开发","这","操控"],"title":"引言","title_tokens":["引言"]},{"location":"#_2","text":"课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/90 博客泡圈： https://www.guyuehome.com/","text_tokens":["90","id","博客","课程","book","：","源码","tutorials","github","www","教程","class",".","21",":","gitee","问答","https","guyuehome","_","/"," ","circledetail","图文","ros2","com","bubble","泡圈","视频"],"title":"教程链接汇总","title_tokens":["汇总","教程","链接"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["企业","为","被","其它","社区","知名","但","网站","创新","质量","明者","依法","模式","镜像","机器人","学","高质量","修改","guyuehome","声明","ai","年","法律责任","有权","捆绑","众多","人才","万人","高校","赋能","销售","传播","个人","出版","视频","万字","超过","究其","公司","和","精锋","，","源码","法律","责任","致力","平台","对本","累积","学习",".","书面","面向","集","课件","联系","ros","请","brand","有限公司","拥有","至今","上","有限","学习者","建立","使用","或","与","交流学习","追究","1000","地区","一体","是","华语","构建","《","合作","用户","复制","作品","均","通过","居","面向未来","高质","@","提供","生态","校企","进行","120"," ","合法","包括","版权","单位","仅限","及","声明者","致力于","培养","的","2011","课程","等","许可","科技","武汉","www","+","不","线上","限于","所有","小时","任何","创建","未来","违反","微控","、","图书","（","实践","本","追究其","优质","）","如需","努力","。","将","产品","抄录","人才培养","交流","机器","畅销","古月","上述","内容","开发","com","》","授权","不得","未经"],"title":"关于我们","title_tokens":["关于","我们"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["企业","为","社区","知名","创新","质量","模式","机器人","高质量","guyuehome","ai","年","众多","人才","万人","高校","赋能","出版","视频","万字","超过","，","致力","平台","累积","学习",".","面向","集","ros","至今","学习者","建立","与","交流学习","1000","地区","一体","是","华语","构建","《","合作","用户","通过","居","面向未来","高质","提供","生态","校企","120"," ","及","致力于","培养","的","2011","课程","等","www","+","线上","小时","创建","未来","、","图书","（","实践","优质","）","努力","。","人才培养","交流","机器","畅销","古月","内容","开发","com","》"],"title":"学机器人，上古月居","title_tokens":["居","机器人","学","机器","古月","，","上"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["为","被","其它","但","网站","明者","依法","镜像","修改","guyuehome","声明","法律责任","有权","捆绑","销售","传播","个人","视频","究其","公司","和","精锋","，","源码","法律","责任","对本","学习",".","书面","课件","联系","请","brand","有限公司","拥有","有限","使用","或","与","追究","用户","复制","作品","均","居","@","合法"," ","包括","版权","单位","仅限","声明者","的","课程","等","许可","科技","武汉","不","限于","所有","任何","违反","微控","、","本","追究其","如需","。","将","产品","抄录","古月","上述","授权","不得","com","进行","未经"],"title":"版权声明","title_tokens":["版权","声明"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/","text":"ROS/ROS2是什么 智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。 ROS的诞生 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人—— PR2 ，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS的发展 ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称 ROSCon ，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。 ROS的特点 ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。 参考资料 关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["—","为","被","加快","250","分享","绝大","代码","推出","具备","重新","已有","下","人类","turtlebot","智能","真的","快","关键","那","模块化","便宜","首先","大","帮助","本身","好","或者","创意","集合","不要","体感","终于","之","年","提问","不断更新","排名","操作系统","别人","稳定","笔记","完全","浪潮","这款","做","成功","横跨","system","ubuntu","研发","斯坦福","时代","度","进化","独立","公司","生态系统","相关","正在","托管","离不开","资料","和","详细","革命","新鲜","源码","以上","无论是","也","一切","5","控制","有","后期","做法","单独","不断","棒","其实","齐聚一堂","访问量","接下来","实验","研究","我们","商业化","wiki","扫地","上","一大","资本","一系列","以叠","没想","微软","多万","什么","基于","2007","许可证","绝大部分","目标","其次","之旅","大部分","不是","变为","打","趋势","万左右","基本","张图","通常","两年","推动","近两年","大家","百科全书","用户","聊天","风险投资","分钟","绝对","创始","举办","来","居","移动机器人","windows","一次","下载","生态","他们","一堂","特点"," ","生态系","同一","总称","风险","多","一下","operating","轮子","越来越","使命","着","整理","有人","等等","前","应用","2014","总体","；","神秘","做饭","层面","一家","2011","全球","不仅","这是","统统","速度","这些","主要","提出","这里","清晰","数据","80","线上","迎来","“","了","年底","介于","一届","一大步","用","org","论坛","最佳","努力","新鲜事","将","产品","移动","深知","如果","事情","一大笔钱","曲线","掌握","款","方式","板块","掀起","并","知识","肯定","index","全球化","人数","学术","对于","开发工具","游戏","还有","查看","浏览量","packages","无疑","”","通信","当时","说干就干","更好","向","重量级","高度","却步","机器人","暴露","既然","历经","给出","率","/","几百","大大","这样","向前走","操作","手机","木头","做成","多项","第一次","统计","视频","几乎","标准","但是","会","体系","电脑","五年","大笔","15","受限于","次数","提取","实现","40","福大","工程","两个","方向","2015","来看","类似","物体","发表","上市","面纱","跟随","标志","嘉宾","为什么","之上","各种","garage","资金","团队","没有","据库","月底","这一波","第一个","上边","ros2","感器","活跃度","国家","自身","真正","无论","个","pr2","野蛮","缩短","干","给","而","头发","增长速度","甚至","活动","是","圈","普遍","已经","因为","不下","时间轴","早期","还是","很多","工具","通过","看中","采购","远","此","长期","一群","以","投了","一步","增长","可为","这个","改为","服务","电路","有志","自己","于","2017","更新","造","world","成熟","加上","整合","找到","外观","让","访问","kinect","模块","软件","几个","限于","起","核心","美妙","迅猛","初期","、","投资","地域","方法","强悍","台球","宽松","更","来讲","毛巾","不到","。","跨平台","频繁","可以","多年","全人类","陪","2","就是","衣服","部件","内容","很","项目","这","臂","收拾","做到","数据库","比如","根据","啦","社区","更为","欢迎","长远","尝试","特性","正式","网站","起点","步伐","重要","呢","动力","万万","同学","今日","同样","回到","推进","四大","实验室","只","最高","索引","百科","这位","挑战","虽好","intel","了解","时候","此时","25","万人","开发者","个人","所有人","出来","一系","开源","开始","这群","日常","非常","多媒体系统","因","广泛","然后","willow","效率","该","一段","差不多","搜索","泡泡","成果","大部","机械","解决","学习","robot","大学","玩耍","算是","经历","专业","原因","局限性","低","问题","高效","智慧","工业","ros","conference","至今","针对","humble","全人","得以","技术","新","上去","系列","使用","roscon","时间","友好","作为","普及","汽车","叫做","成本","爆款","接下","新增","踏上","带领","起来","第一","充足","上图","把","很快","软件系统","到","linux","问答","只要","阵地","一样","支持","肩负","迭代","嵌入","每","笔记本","肩膀","120","直接","维基百科","20","google","价格便宜","明智","情况","光靠","几年","配合","确定","促使","入门教程","全","站","100","领域","图","完成","包","左右","当初","许可","多媒体","围绕","每年","全书","望而却步","ros1","各样","而生","精致","一款","所有","认识一下","最为","底盘","结晶","讲解","沉淀","叠","处理","得到","本","量级","每个","繁荣","元素","亚马逊","尽量","维基","家","程度","快速","近几年","采用","机制","机器","主阵地","四项","零部件","古月","而且","居高不下","发布","效果","由","原型","各项","涉及","媒体","嵌入式","基本上","世界","后续","而言","局限","同理","一套","页面","成为","重量","场景","从中","认识","回答","传感器","就","同年","最后","进入","一起","2012","全新","巨大","斯坦福大学","大步","直到","发展","现在","青年","简称","复用","水下","身影","复合","c","加","讨论","动机","资源","？","从","版本","150","人才","柔性","同时","大有可为","利器","xbox","其他","活跃","你","容易","对","随着","用于","洗衣","一些","discourse","参考资料","中","逐渐","才","轰动","乐意","，","神兵","github","年轻人","部分","平台","价格","入门","年轻","越来","适用","2022","虽然","功能",".","人","工程师","推荐","为例","几百万","苹果","浏览","过程","扩展","名称","无聊","记录","大量","要","简单","时至今日","万","版","不多","一大笔","亚马","巨人","来到","零","代","跑","联合","限性","关于","助推","能够","熟悉","a","说明","不开","personal","图中","注意","总而言之","之内","不想","2010","熨烫","向前","此后","进步","教程","不乏","官方","代表","参考","看到","想到","为了","答案","提供","笔记本电脑","应用软件","受限","案例","智能化","原本","剪头发","选择","都","传感","其中","的","条","提高","课程","有没有","：","诞生","性能","百万","复杂","商业","想法","又","等","在","设计","answers","存储","系统","不","人形","制造","引擎","如何","游戏机","疫情","b","任何","可能","月","所以","没想到","正如","一定","只想","组成","框架","正式版","之王","却","各种各样","怀揣","做出","一个","还","不同","希望","维基百","肩负着","来自","所学","开发","下来","进行","大会"],"title":"ROS和ROS2是什么","title_tokens":["是","ros","ros2","和","什么"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#rosros2","text":"智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。","text_tokens":["的","时代","进化","正在","中","接下","又","，","带领","提出","重量","场景","系统","智能","而生","认识","是","方向","就","认识一下","呢","那","大家","了","一起","巨大","向","重量级","面纱","嘉宾","高度","机器人","全","ros","接下来","这位","量级","我们","挑战"," ","？","。","什么","智能化","操作系统","一下","操作","机器","ros2","掀起","开发","下来","应用","这","对","神秘"],"title":"ROS/ROS2是什么","title_tokens":["是","/","ros","ros2","什么"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人—— PR2 ，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。","text_tokens":["—","学术","对于","分享","一套","尝试","成为","智能","从中","真的","当时","就","重要","呢","那","最后","说干就干","一起","斯坦福大学","帮助","或者","同样","大步","机器人","青年","实验室","只","既然","给出","年","？","这样","向前走","时候","操作系统","操作","此时","别人","柔性","个人","所有人","出来","手机","木头","一系","这款","做","横跨","你","第一次","容易","用于","斯坦福","洗衣","标准","一些","但是","独立","非常","因","中","才","和","轰动","，","效率","实现","福大","平台","也","一切","5","机械","有","越来","后期","虽然","robot","功能","大学","人","玩耍","类似","物体","为例","专业","为什么","苹果","低","问题","高效","ros","实验","研究","我们","资金","团队","无聊","没有","针对","上","要","一大","得以","技术","一系列","以叠","系列","什么","基于","2007","代","不是","个","联合","pr2","打","干","推动","personal","图中","头发","充足","甚至","第一","之内","是","不想","熨烫","圈","已经","因为","向前","大家","很快","软件系统","聊天","很多","分钟","看到","只要","答案","一次","一群","他们","应用软件"," ","同一","多","这个","服务","剪头发","越来越","电路","有志","光靠","自己","整理","有人","应用","都","100","做饭","其中","的","层面","条","有没有","：","完成","诞生","找到","复杂","外观","想法","性能","图","等","在","设计","软件","系统","而生","不","精致","一款","所有","如何","了","可能","初期","、","所以","叠","一大步","处理","用","组成","框架","强悍","台球","更","家","毛巾","不到","却","。","做出","深知","一个","如果","还","可以","事情","机器","款","陪","2","就是","衣服","并","零部件","而且","开发","很","部件","肯定","这","原型","涉及","收拾"],"title":"ROS的诞生","title_tokens":["的","ros","诞生"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_1","text":"ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称 ROSCon ，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。","text_tokens":["—","为","被","加快","分享","绝大","游戏","局限","推出","下","成为","正式","turtlebot","起点","传感器","就","关键","同年","步伐","重要","进入","万万","便宜","2012","全新","斯坦福大学","大","直到","回到","现在","机器人","简称","却步","发展","身影","暴露","历经","体感","终于","年","虽好","intel","几百","大大","了解","从","版本","操作系统","稳定","操作","笔记","开发者","个人","开源","开始","出来","成功","xbox","做","system","ubuntu","这群","随着","斯坦福","时代","但是","会","公司","中","电脑","逐渐","五年","和","大笔","，","willow","受限于","提取","年轻人","部分","该","福大","也","价格","大部","年轻","控制","5","越来","适用","后期","2022","2015","单独","robot","功能","大学","人","类似","经历","跟随","标志","此后","齐聚一堂","之上","几百万","原因","局限性","各种","问题","过程","ros","garage","我们","conference","团队","名称","扫地","一大","humble","资本","月底","第一个","没想","微软","版","ros2","感器","使用","一大笔","roscon","亚马","真正","2007","时间","绝大部分","大部分","普及","变为","叫做","成本","pr2","爆款","野蛮","限性","给","助推","能够","熟悉","两年","推动","注意","而","第一","2010","是","圈","近两年","已经","因为","把","不下","不乏","很快","到","早期","官方","时间轴","教程","风险投资","创始","看中","举办","想到","为了","一样","支持","肩负","迭代","长期","每","笔记本","他们","笔记本电脑","一堂","受限","进行"," ","投了","直接","增长","风险","多","这个","operating","改为","原本","价格便宜","越来越","使命","服务","几年","着","自己","于","确定","2017","前","应用","2014","传感","其中","的","world","一家","2011","全球","加上","成熟","不仅","百万","这是","诞生","商业","让","当初","kinect","在","等","设计","每年","望而却步","软件","这里","提出","系统","各样","线上","迎来","限于","一款","所有","起","游戏机","疫情","了","底盘","年底","介于","讲解","所以","一届","、","没想到","投资","只想","本","每个","亚马逊","更","正式版","。","各种各样","快速","一个","一大笔钱","采用","机器","可以","款","多年","肩负着","来自","开发","居高不下","项目","发布","这","原型","大会"],"title":"ROS的发展","title_tokens":["的","发展","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_2","text":"ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["媒体","比如","嵌入式","被","社区","开发工具","分享","同理","具备","重新","已有","长远","成为","人类","特性","智能","”","通信","就","最后","那","模块化","一起","本身","今日","复用","发展","水下","机器人","c","创意","四大","身影","复合","推进","集合","动机","不要","率","之","从","这样","向前走","别人","人才","同时","完全","开源","做","做成","多项","对","用于","标准","生态系统","会","公司","体系","多媒体系统","非常","广泛","中","和","，","部分","实现","无论是","也","成果","平台","机械","有","越来","做法","功能","上市","各种","智慧","工业","ros","我们","商业化","至今","上","全人","新","技术","简单","上去","时至今日","ros2","使用","自身","巨人","这","许可证","时间","零","目标","无论","友好","不是","跑","汽车","缩短","新增","给","通常","a","是","普遍","向前","已经","把","进步","大家","到","还是","代表","linux","很多","看到","工具","采购","来","远","移动机器人","windows","支持","此","嵌入","生态","他们","特点","肩膀","以"," ","一步","生态系","直接","总称","案例","多","智能化","这个","轮子","明智","越来越","着","自己","促使","应用","造","都","；","站","领域","的","提高","一家","全球","整合","：","统统","商业","这些","多媒体","在","围绕","设计","模块","软件","这里","ros1","许可","系统","各样","人形","制造","“","引擎","b","核心","了","结晶","、","沉淀","正如","组成","繁荣","宽松","尽量","来讲","更","家","。","怀揣","将","各种各样","产品","快速","移动","一个","跨平台","还","可以","机制","机器","全人类","就是","并","开发","下来","由","全球化","臂","做到"],"title":"ROS的特点","title_tokens":["的","ros","特点"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_3","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。","text_tokens":["比如","人数","基本上","社区","250","绝大","而言","页面","更为","成为","查看","浏览量","网站","packages","无疑","回答","快","就","重要","呢","动力","大","发展","现在","机器人","加","最高","索引","讨论","百科","资源","？","从","150","排名","25","万人","开发者","大有可为","浪潮","利器","其他","活跃","统计","你","日常","研发","discourse","度","会","相关","非常","正在","中","乐意","和","15","革命","，","源码","新鲜","以上","次数","部分","神兵","40","差不多","也","大部","两个","有","越来","来看","学习",".","功能","棒","人","算是","发表","其实","各种","浏览","问题","访问量","ros","我们","wiki","记录","根据","上","新","据库","这一波","上边","万","不多","使用","活跃度","国家","多万","什么","绝大部分","作为","大部分","趋势","万左右","关于","各项","给","助推","基本","张图","说明","起来","增长速度","总而言之","活动","是","上图","已经","教程","大家","到","用户","代表","参考","很多","绝对","看到","通过","问答","下载","每"," ","维基百科","增长","20","可为","多","越来越","情况","选择","几年","等等","应用","总体","都","；","其中","的","全球","整合","：","这是","包","速度","左右","访问","等","answers","在","存储","这些","提出","这里","几个","清晰","数据","80","不","核心","任何","了","最为","迅猛","月","、","地域","得到","本","元素","org","论坛","每个","程度","维基","最佳","新鲜事","。","快速","频繁","一个","近几年","曲线","可以","不同","机器","维基百","如果","希望","方式","就是","四项","开发","很","发布","这","index","数据库"],"title":"ROS的社区","title_tokens":["的","社区","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#_1","text":"关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["—","啦","世界","社区","后续","分享","绝大","代码","欢迎","还有","成为","网站","重要","更好","最后","一起","首先","同学","好","机器人","百科","提问","不断更新","从","万人","开源","开始","你","视频","几乎","会","参考资料","离不开","托管","中","资料","然后","和","详细","，","github","部分","一段","泡泡","搜索","工程","也","入门","大部","有","解决","学习","不断","工程师","推荐","问题","ros","我们","扩展","大量","要","技术","ros2","使用","来到","其次","绝大部分","作为","大部分","之旅","关于","踏上","不开","是","教程","大家","百科全书","参考","工具","居","阵地","提供","120"," ","google","这个","配合","入门教程","更新","都","的","课程","找到","在","全书","主要","这里","几个","所有","美妙","最为","方法","一定","本","之王","努力","。","将","一个","还","可以","掌握","机器","主阵地","板块","古月","所学","开发","内容","知识","项目","效果","这"],"title":"参考资料","title_tokens":["资料","参考","参考资料"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/","text":"ROS2对比ROS1 在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。 ROS1的局限性 首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。 全新的ROS2 ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。 ROS2 vs ROS1 系统架构 在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。 DDS通信 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。 核心概念 ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。 编码方式 再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。 命令行 最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随教程，你就会慢慢理解这些特性。","text_tokens":["周期","—","为","完","产品化","绝大","代码","方便","过来","具体","具备","重新","小伙伴","下","编译","智能","似乎","那","得","首先","更换","算力","mcu","大","好","或者","自家","走向市场","重来","学","100ms","不要","历史","安全","稳定","操作系统","实时性","广泛应用","暂且","陆续","诸多","做","成功","明显","共享内存","总体而言","研发","至关重要","搬","时代","独立","公司","相关","无法","下边","和","图像","以上","discovery","可选","天翻地覆","amr","编程语言","之前","也","切换","控制","有","么","写","不断","当然","较","其实","概念","部头","请","类型","研究","我们","opensplice","管理","需要","第二代","上","保证","运动","完整性","不难理解","配置","多个","优化","稍安","之后","什么","基于","绝大部分","目标","他","一团乱麻","不爽","大部分","不是","完整","宕机","另外","rmw","交给","分布","基本","张图","库会","链接","python3","大家","用户","有线","之外","移植性","来","换成","windows","不会","航天","标准化","他们"," ","工作","风险","突然","多","一下","最终","行人","越来越","使命","最新","到底","底层","不用","大幅度","应用","第二","相对","；","tcp","总体","上手","层面","不仅","一家","全球","符合","过去","命令行","这些","不难","主要","二种","这里","环境","怎样","编码方式","面临","数据","调试","客户","切记","项目管理","了","课时","除此","看看","rosbuild","后","左侧","why","用","不够","1ms","最佳","完善","小","厂家","不太","将","接入","产品","性","如果","应该","款","方式","运动学","通用性","并","肯定","信息","还会","学术","第二个","诟病","以下","colcon","对于","但","翻地","变得","它","还有","不过","通信","足够","毛坯房","地方","真实","所示","更好","开发方式","勿躁","经验","编程","面向对象","之初","机器人","流程","复杂度","售价","一一","发","二个","率","/","几百","而已","这样","操作","一致","手机","变化","做成","角度","语言","强壮","几乎","标准","但是","会","ceo","个体","千差万别","电脑","涌现","大幅","系统工程","布式","整体","颠覆性","需求","只不过","实现","工程","对比","进程","两个","开发成本","来看","搭载","不断涌现","只是","类似","跟随","为什么","之上","各种","意义","没有","客户端","表示","也许","第一个","差异","ros2","一页","真正","依赖","无论","最大","丢","pr2","计算","给","而","听","甚至","是","编码","已经","因为","稳定性","python","设备","是因为","很多","至关","常用","工具","通过","翻新","macos","只有","运算","管理器","移植","通信协议","成功经验","乱麻","编写","一步","盖","这个","有且","服务","出现","自己","于","条件","多功能","动力学","良好","消失","深入","电脑系统","高","改","没","找到","时","初次","让","只能","基本保障","软件","消费","颠覆","核心","指挥","安装","分散","级别","常","批量","、","加密","封装","可靠","方法","通信接口","延迟","保留","话题","更","来讲","。","跨平台","适合","频繁","小伙","可以","单兵","就是","dds","项目","这","考虑","做到","比如","啦","rtos","体验","理器","启动","vs","社区","行为","长远","中间层","受制于","特性","更接","总结","协议","干扰","用到","升级","重要","呢","实力","主角","动力","中间","交道","产品开发","家庭","入侵","同样","修改","细节","当","rosrun","工作站","应用层","共享","两者","挑战","放在","去","推倒","了解","成","时候","可选项","开发者","一旦","开始","开源","市场","批量生产","想要","非常","广泛","然后","举","新一代","先","远比","即可","该","阶段","连接","国际标准","大部","例子","解决","主","学习","三个","确实","内存","一本","run","局限性","交付","命令","问题","软件开发","ros","很大","道坎","基础","相比","api","全部","针对","除了","高昂","导致","百万","有限","ament","fastrtps","建立","使用","定义","如","受制","时间","生产","topic","或","普及","汽车","成本","面对","叫做","打成","与","消费市场","带领","黑客","第一","充足","一行","把","到","对系统","软件系统","linux","内","接口","致使","揭秘","驾驶","彼此","只要","支持","纠结","嵌入","一样","先进","每","自动","分布式","直接","接近","结合","实时","迈过","厂商","更具","全","迁移","毛坯","出错","策略","分解","可读性","完成","网络连接","装修","适配","历史使命","ros1","保障","各样","看","一款","由于","所有","更加","是从","继续","最为","接触","发送","讲解","力学","（","借助","理解","处理","过","担忧","以及","本","每个","）","尽量","一种","灵活","机制","机器","原有","可读","变革","某","发布","能力","企业","嵌入式","发现","角色","接收","收","c++","后续","房子","局限","单兵作战","第二种","一套","部署","而言","场景","以下几点","各位","便于","满足","一团乱","就","最后","编译系统","全新","巨大","上升","选项","复用","发展","解密","简称","走","干掉","几点","资源","格局","？","从","丰富","版本","轻松","测试","同时","再","其他","你","编译器","对","随着","用于","一些","android","最早","大部头","难度","中","这台","省略","不能","，","经常","总之","部分","最","平台","除此之外","印象","方案","越来","听说","适用","虽然","定性","udp","尤其","功能","哪些","可靠性","加入","担心","面向","国际","几百万","程序","过程","安全性","雷达","存在","名称","大量","要","层","微控制器","简单","物","体现","右侧","一团","发成","陌生","推倒重来","middleware","通用","catkin","限性","大致","集成","建筑","能够","熟悉","新版","说明","下要","注意","走向","会成","图片","能","5g","间层","教程","不好","简单明了","对象","伙伴","为了","架构","答案","运行","驱动","提供","控制器","不再","按照","原本","从而","选择","里","减少","节点","名字","现有","都","协作","一边","其中","的","提高","要求","可移植性","精力","提","课程","联网","一代","信号","解算","：","内部","复杂","网络","学术研究","诞生","性能","比","在","设计","等","商业","生活","master","发布者","系统","带来","另","不","指定","自","如何","尽力","任何","wifi","未来","可能","依然","之间","强","所以","唯一","是否","专注","rostopic","一定","慢慢","框架","属性","可移植","前方","作战","各种各样","怀揣","借鉴","调用","一个","幅度","还","不同","打交道","二代","含义","开发","进行"],"title":"ROS2对比ROS1","title_tokens":["ros1","对比","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2ros1","text":"在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。","text_tokens":["的","或","和","在","，","ros1","之前","不","对比","能","有","就","听说","学习","来看","么","看看","大","过","ros","我们"," ","名称","？","。","第二代","上","从","多","一个","也许","二代","就是","到底","ros2","变化","使用","做","你","这","第二","其中"],"title":"ROS2对比ROS1","title_tokens":["ros1","对比","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros1","text":"首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。","text_tokens":["比如","学术","嵌入式","—","绝大","具体","具备","翻地","它","干扰","似乎","通信","足够","地方","就","呢","那","实力","主角","首先","家庭","算力","入侵","或者","发展","机器人","走向市场","工作站","售价","历史","资源","？","从","这样","市场","批量生产","做成","随着","用于","一些","但是","会","最早","独立","中","涌现","和","这台","新一代","，","天翻地覆","部分","平台","连接","大部","也","有","来看","搭载","虽然","不断","当然","不断涌现","可靠性","类似","为什么","各种","问题","ros","类型","研究","我们","没有","针对","上","要","高昂","保证","第一个","有限","ros2","什么","时间","绝大部分","目标","他","生产","大部分","普及","汽车","成本","丢","pr2","计算","黑客","第一","充足","走向","甚至","是","已经","因为","设备","是因为","有线","致使","为了","驾驶","支持","答案","运算","嵌入","运行","航天","先进","自动"," ","工作","风险","原本","最终","服务","实时","出现","自己","条件","不用","应用","都","；","良好","的","课程","一代","：","完成","内部","找到","复杂","网络","让","网络连接","学术研究","诞生","设计","在","只能","ros1","软件","系统","数据","不","一款","由于","更加","了","级别","批量","why","可靠","处理","担忧","用","不够","框架","小","作战","。","产品","适合","一个","可以","单兵","机器","款","就是","并","开发","单兵作战","这","能力"],"title":"ROS1的局限性","title_tokens":["的","局限性","限性","局限","ros1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2","text":"ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。","text_tokens":["周期","为","产品化","代码","方便","具备","具体","重新","下","编译","智能","那","得","算力","mcu","大","好","或者","重来","100ms","历史","安全","稳定","操作系统","实时性","诸多","成功","研发","时代","独立","无法","和","amr","也","控制","有","较","我们","管理","需要","上","运动","完整性","优化","不是","完整","宕机","分布","基本","链接","python3","大家","windows","不会","标准化","他们"," ","工作","风险","多","一下","最终","行人","越来越","使命","最新","不用","应用","相对","第二","层面","不仅","过去","这些","二种","环境","怎样","面临","数据","调试","项目管理","了","课时","rosbuild","后","用","1ms","最佳","产品","性","运动学","通用性","并","肯定","还会","以下","colcon","但","它","通信","毛坯房","经验","之初","机器人","流程","这样","操作","手机","变化","语言","强壮","标准","但是","会","个体","千差万别","电脑","系统工程","布式","颠覆性","需求","实现","工程","两个","来看","搭载","只是","类似","之上","各种","没有","第一个","差异","ros2","真正","无论","给","甚至","是","已经","稳定性","python","很多","工具","翻新","macos","管理器","移植","成功经验","编写","盖","这个","出现","自己","于","动力学","电脑系统","让","基本保障","软件","消费","颠覆","、","加密","方法","可靠","保留","更","。","跨平台","适合","可以","就是","dds","项目","这","考虑","做到","比如","rtos","体验","理器","行为","长远","受制于","特性","升级","呢","动力","入侵","修改","细节","挑战","去","推倒","时候","开发者","一旦","市场","远比","阶段","连接","问题","ros","很大","基础","相比","api","全部","针对","除了","导致","ament","使用","受制","汽车","面对","叫做","打成","与","消费市场","黑客","第一","把","到","对系统","linux","内","驾驶","纠结","自动","分布式","直接","结合","实时","更具","全","毛坯","出错","策略","分解","装修","完成","网络连接","历史使命","ros1","保障","各样","一款","所有","更加","继续","发送","力学","（","借助","以及","）","尽量","一种","机制","机器","原有","变革","发现","角色","c++","后续","房子","第二种","部署","场景","以下几点","满足","就","编译系统","全新","巨大","解密","几点","格局","？","测试","同时","编译器","对","用于","android","中","不能","，","经常","平台","方案","越来","虽然","定性","尤其","安全性","大量","要","微控制器","简单","体现","推倒重来","通用","catkin","建筑","能够","新版","说明","下要","走向","能","不好","为了","架构","运行","提供","控制器","不再","原本","选择","节点","都","协作","的","要求","提","课程","：","性能","解算","网络","信号","复杂","接口","明显","比","在","设计","等","master","生活","系统","不","如何","尽力","任何","wifi","未来","可能","之间","强","所以","一定","框架","前方","各种各样","怀揣","借鉴","一个","还","不同","开发","进行"],"title":"全新的ROS2","title_tokens":["的","ros2","全新"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2-vs-ros1","text":"","text_tokens":[],"title":"ROS2 vs ROS1","title_tokens":[" ","ros1","vs","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_1","text":"在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。","text_tokens":["—","比如","rtos","发现","角色","理器","接收","后续","但","一套","变得","它","中间层","不过","协议","通信","一团乱","就","重要","那","得","交道","中间","更换","好","选项","应用层","共享","两者","走","而已","了解","成","这样","稳定","时候","操作","操作系统","可选项","再","开始","变化","共享内存","至关重要","标准","会","公司","ceo","中","下边","和","图像","先","，","discovery","可选","只不过","整体","最","连接","也","进程","对比","印象","有","学习","udp","写","内存","哪些","类似","程序","请","ros","雷达","我们","管理","需要","大量","上","层","客户端","简单","不难理解","ros2","建立","一团","右侧","依赖","基于","一团乱麻","大致","另外","张图","库会","注意","而","听","会成","是","把","间层","大家","简单明了","linux","内","很多","至关","通过","只有","macos","架构","彼此","windows","一样","管理器","驱动","提供","进行","通信协议","乱麻"," ","突然","这个","有且","从而","里","节点","底层","名字","应用","都","tcp","消失","的","深入","明显","接口","找到","复杂","让","在","这些","主要","不难","master","ros1","系统","数据","客户","看","不","自","所有","是从","更加","指挥","了","安装","接触","封装","、","左侧","方法","理解","通信接口","过","框架","完善","。","不太","将","调用","频繁","一个","如果","可以","机制","打交道","应该","方式","就是","dds","并","开发","发布","肯定","这","信息"],"title":"系统架构","title_tokens":["架构","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#dds","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。","text_tokens":["比如","为","诟病","完","收","社区","对于","代码","过来","部署","重新","还有","场景","不过","协议","通信","满足","就","得","产品开发","更换","好","复用","自家","机器人","简称","复杂度","发","率","放在","/","？","这样","丰富","版本","轻松","稳定","广泛应用","开源","再","变化","做","其他","想要","标准","一些","会","无法","广泛","中","然后","举","省略","先","，","总之","该","需求","实现","部分","最","也","国际标准","切换","例子","开发成本","解决","听说","适用","三个","udp","写","么","功能","当然","类似","加入","其实","国际","交付","各种","问题","程序","ros","我们","相比","opensplice","要","除了","简单","配置","物","多个","ros2","fastrtps","定义","优化","发成","基于","middleware","目标","不爽","最大","不是","成本","丢","rmw","给","交给","能够","熟悉","基本","一行","是","5g","把","软件系统","用户","之外","为了","只要","一样","移植","纠结","提供","每","通信协议"," ","按照","多","这个","选择","厂商","于","减少","底层","不用","应用","都","tcp","的","层面","一家","提高","高","精力","联网","符合","改","性能","接口","适配","时","商业","让","复杂","等","在","设计","这些","master","这里","ros1","软件","系统","带来","数据","另","不","指定","如何","更加","安装","了","常","唯一","、","加密","所以","是否","专注","延迟","用","每个","属性","更","来讲","一种","厂家","。","接入","产品","频繁","一个","如果","灵活","可以","应该","不同","机器","就是","dds","并","某","开发","肯定","这"],"title":"DDS通信","title_tokens":["通信","dds"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_2","text":"ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。","text_tokens":["的","全球","第二个","会","非常","课程","广泛","百万","中","迁移","和","这些","在","熟悉","，","小伙伴","这里","ros1","部分","各位","便于","不","也","有","已经","就","学习","开发方式","大家","了","到","很多","依然","讲解","担心","伙伴","概念","几百万","方法","过","以及","意义","ros","本","一一","保留","存在","二个","我们","尽量","几百"," ","。","没有","从","如果","小伙","应该","含义","一致","开发者","方式","ros2","并","开发","使用","不用","应用","第二","几乎","陌生","其中"],"title":"核心概念","title_tokens":["核心","概念"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_3","text":"再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。","text_tokens":["企业","发现","后续","而言","具备","具体","特性","不过","更接","用到","就","所示","真实","更好","勿躁","编程","同样","面向对象","机器人","学","当","不要","从","版本","操作","暂且","再","总体而言","角度","语言","搬","一些","会","大部头","难度","中","和","，","实现","编程语言","也","大部","两个","学习","写","确实","面向","一本","程序","部头","过程","软件开发","道坎","我们","ros2","稍安","一页","如","之后","带领","图片","是","编码","教程","大家","对象","移植性","来","移植"," ","一步","多","接近","迈过","总体","一边","的","提高","可移植性","可读性","课程","在","ros1","软件","发布者","切记","如何","看看","方法","用","可移植","更","来讲","。","一个","机器","方式","可读","开发","发布","项目","这"],"title":"编码方式","title_tokens":["方式","编码方式","编码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_4","text":"最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随教程，你就会慢慢理解这些特性。","text_tokens":["—","比如","啦","启动","后续","而言","下","总结","特性","通信","就","最后","上升","好","编程","rosrun","干掉","再","陆续","变化","做","你","对","独立","相关","会","难度","中","和","大幅","，","以上","即可","也","对比","除此之外","控制","印象","有","主","功能","run","跟随","概念","命令","ros","我们","表示","ros2","topic","大致","集成","是","把","教程","大家","之外","常用","工具","揭秘","换成","每"," ","选择","节点","多功能","现有","大幅度","相对","都","上手","的","：","没","初次","命令行","在","这些","master","ros1","所有","核心","最为","了","除此","分散","理解","rostopic","慢慢","话题","更","一种","。","一个","幅度","如果","就是","dds","某","开发"],"title":"命令行","title_tokens":["命令行","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/","text":"ROS2安装方法 本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。 Linux系统简介 时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。 Ubuntu系统简介 我们后续课程使用到的Linux发行版就是 ubuntu系统 。 Ubuntu诞生于2004年10月份， 每六个月发布一个新版本 ，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。 Ubuntu虚拟机安装 虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下： 1. 下载系统镜像 下载链接： https://ubuntu.com/download/desktop 2. 在虚拟机中创建系统 3. 设置虚拟机硬盘大小 4. 设置Ubuntu镜像路径 5. 启动虚拟机 6. 设置用户名和密码 7. 等待系统安装 8. 完成安装 Ubuntu系统安装好后，大家可以先随意使用熟悉一下。 ROS2系统安装 接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下： 1. 设置编码 $ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8 2. 添加源 $ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844 3. 安装ROS2 $ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop 4. 设置环境变量 $ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。 ROS2示例测试 为了验证ROS2安装成功，我们可以通过以下示例进行测试。 示例一：命令行示例 先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。 示例二：小海龟仿真示例 再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["—","原理","分享","代码","重新","已有","下","出","智能","吧","快","第一句","精神","lsb","大","vmware","乐于","或者","模式","镜像","好","年","listener","上下左右","share","操作系统","稳定","普通","验证","做","成功","ubuntu","地址","公司","资料","其他软件","和","一石激起千层浪","多用户","centos","一句","无论是","也","之前","蓝色","5","控制","变量","有","点击","热情","workstation",":","概念","arch","1991","请","接下来","setup","我们","demo","小海龟","管理","需要","上","$","保证","运动","多个","收费","之后","什么","他","并用","键盘","另外","浏览器","变动","基本","量","两年","步骤","叫","链接","位置","大家","用户","海龟","好者","bash","之外","绝对","turtle","来","windows","一次","下载","(","好后","curl"," ","工作","多","一下","越来越","8","试试","底层","等等","应用","第二","不仅","发行版","订阅","10","关注","其后","命令行","发挥","主要","gnupg","这里","环境","虚拟","数据","release","“","etc","源代码","了","设置","当中","除此","前先要","准备","后","可视","org","_","pro","出于","不太","将","如果","应该","opt","兼容","并","apt","en","第二个","bug","以下","talker","反馈","报错","但","行列","月份","packages","html","唯一标准","至此","”","通信","说干就干","download","修复","算机","一应","介绍","机器人","main","背景","二个","本相","/","个人爱好","这样","提交","us","操作","路径","]","每隔","界面","第一次","标准","但是","会","爱好者","电脑","第二句","后缀","实现","操作界面","两个","等待","人工智能","to","简介","之上","各种","检验","人工","发行","紧随","没有","teleop","表示","第一个","通讯","echo","ros2","六个","优先","依赖","建议","tee","无论","字符","互联网","最大","比较","个","计算","最好","给","源","ubuntu20.04","githubusercontent","基本相同","甚至","是","编码","已经","因为","看出","18","命名","还是","很多","经典","keyrings","常用","通过","小海","macos","o","移植","长期","开放","以","内核","这个","激起","服务","出现","自己","于","任何人","更新","准确","成熟","world","加上","时","发扬","让","sudo","合适","爱好","编辑器","软件","update","一般","null","raw","顺序","核心","安装","创建","迅猛","务器","codename","、","方法","实践","desktop","六个月","会加","lang","技术实力","更","来讲","。","户名","适合","可以","4","2","就是","并且","dds","1","很","com","这","考虑","sources","37844","比如","啦","d","fedora","启动","rosdistro","os","3","多任务","--","dev","升级","重要","呢","实力","key","回到","只","维护","all","guyuehome","lts","密码","节","了解","成","http","时候","影响","此时","开发者","数字","传播","个人","开源","衡量","开始","|","仿真","真器","随意","想要","互联","二","list","先","光大","该","-","试一试","字符串","操作方法","服务器","22","学生","占据","大学","示例","run","命令","问题","ssl","软件开发","ros","者","按键","locales","奥义","绑定","nodes","archive","humble","二句","新","技术","除了","可视化","大学生","有限","强大","使用","持续","时间","放到","或","计算机","叫做","硬盘","与","接下","起来","unix","外衣","第一","指标","把","构建","用户名","添加","source","到","仿真器","一","linux","install","支持","一样","04","每","一直","deb","=","直接","千层","情况","打包","signed","领域","完成","左右","发扬光大","每年","可","多用","各样","何人","大小","吸引","最为","接触","讲解","\"","编辑","本","一种","这套","自行","bashrc","快速","7","采用","原有","机器",")","擦掌","发布","效果","企业","locale","[","后续","华丽","探索","一套","任务","成为","硬件","场景","~","就","终端","热爱","一起","发展","现在","之一","？","products","激发","从","版本","gpg","上下","测试","同时","再","dpkg","其他","你","对","redhat","一些","摩拳擦掌","中","上层","千层浪","cpp","，","6","最","林纳斯","除此之外","py","ubuntu22.04","越来","适用","2022","虽然","分别","功能",".","加入","gen","为例","evaluation","浏览","程序","https","过程","大量","hello","编号","紧随其后","版","一应俱全","通用","node","各个","伴随","关于","免费","熟悉","utf","尚","说明","turtlesim","之内","传输","芬兰","教程","代表","参考","看到","为了","相同","运行","其","应用软件","动手","动手做","俱全","环境变","export","原本","真理","选择","指令","failed","名字","节点","都","keyring","其中","的","如遇","如下","应用程序","联网","课程","by","性能","诞生","虚拟机","网络","：","商业","connect","等","在","设计","中将","master","www","一位","architecture","发布者","系统","不","print","环境变量","先要","upgrade","如何","任何","usr","未来","可能","lc","多人","2004","依然","月","蕴藏","唯一","所以","是否","提到","文件","一定",">","决定","&&","各种各样","正常","目前","一个","还","不同","开发","下来","进行"],"title":"ROS2安装方法","title_tokens":["安装","方法","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2","text":"本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。","text_tokens":["的","—","，","系统","最","先要","重要","安装","一起","前先要","linux","本","我们","一种","节","。","了解","一下","操作系统","操作","ros2","底层"],"title":"ROS2安装方法","title_tokens":["安装","方法","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#linux","text":"时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。","text_tokens":["企业","—","比如","原理","bug","fedora","反馈","分享","华丽","但","代码","一套","行列","任务","重新","已有","成为","硬件","下","场景","唯一标准","多任务","就","重要","说干就干","呢","实力","修复","热爱","一起","精神","大","算机","乐于","或者","模式","回到","现在","发展","镜像","维护","年","本相","之一","？","激发","个人爱好","成","提交","版本","操作系统","稳定","操作","此时","开发者","传播","个人","开源","衡量","做","其他","界面","ubuntu","互联","对","redhat","标准","一些","会","公司","爱好者","中","和","千层浪","先","，","光大","一石激起千层浪","多用户","实现","centos","最","操作界面","林纳斯","也","之前","操作方法","有","服务器","越来","适用","学生","虽然","功能","热情","大学","加入","概念","之上","各种","检验","程序","问题","1991","过程","我们","管理","需要","发行","绑定","大量","没有","上","技术","可视化","大学生","有限","ros2","强大","收费","之后","使用","什么","依赖","时间","他","通用","互联网","或","放到","计算机","并用","叫做","计算","伴随","与","另外","免费","最好","给","熟悉","量","基本","尚","起来","unix","叫","外衣","基本相同","甚至","是","芬兰","指标","把","已经","教程","到","用户","命名","参考","好者","linux","很多","看到","通过","常用","macos","相同","windows","支持","一样","其","每","应用软件","动手","动手做","开放"," ","内核","多","千层","原本","激起","这个","真理","服务","越来越","情况","出现","自己","打包","名字","底层","等等","任何人","应用","准确","都","其中","的","成熟","不仅","发行版","应用程序","联网","加上","性能","发扬","商业","等","在","设计","发扬光大","爱好","每年","主要","一位","软件","多用","系统","一般","各样","不","何人","源代码","任何","了","吸引","当中","迅猛","安装","核心","多人","讲解","务器","唯一","、","所以","提到","后","实践","方法","本","可视","技术实力","更","来讲","决定","出于","这套","。","各种各样","不太","适合","快速","目前","一个","还","可以","原有","不同","应该","就是","并且","兼容","并","开发","这"],"title":"Linux系统简介","title_tokens":["linux","系统","简介"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu","text":"我们后续课程使用到的Linux发行版就是 ubuntu系统 。 Ubuntu诞生于2004年10月份， 每六个月发布一个新版本 ，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。","text_tokens":["比如","后续","已有","月份","出","硬件","智能","快","升级","重要","就","一应","好","介绍","机器人","只","维护","lts","年","从","这样","版本","时候","影响","稳定","普通","数字","开发者","再","每隔","其他","想要","ubuntu","你","第一次","互联","但是","会","摩拳擦掌","中","上层","电脑","资料","，","后缀","试一试","无论是","也","之前","除此之外","5","ubuntu22.04","有","22","2022","占据","人工智能","为例","各种","浏览","软件开发","人工","我们","发行","紧随","上","新","除了","表示","保证","编号","紧随其后","通讯","版","一应俱全","使用","之后","六个","优先","持续","建议","无论","互联网","最大","比较","或","个","各个","硬盘","浏览器","免费","变动","熟悉","两年","ubuntu20.04","第一","之内","是","位置","因为","看出","18","教程","大家","到","已经","用户","还是","代表","参考","linux","很多","之外","绝对","常用","通过","为了","windows","支持","移植","一次","04","长期","每","一直","进行","俱全","以"," ","直接","多","一下","选择","出现","自己","于","更新","应用","都","领域","的","其中","发行版","联网","课程","10","性能","诞生","虚拟机","时","网络","关注","其后","让","等","在","发挥","合适","主要","编辑器","软件","这里","环境","系统","虚拟","如何","顺序","安装","了","接触","除此","未来","可能","2004","依然","月","讲解","、","所以","文件","方法","六个月","会加","编辑","一定","本","更","自行","。","一个","如果","还","可以","不同","机器","4","就是","开发","很","擦掌","发布","效果","考虑"],"title":"Ubuntu系统简介","title_tokens":["ubuntu","系统","简介"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu_1","text":"虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下：","text_tokens":["的","啦","如下","虚拟机","叫做","：","其他软件","完成","让","另外","和","在","，","已有","这里","软件","www","环境","步骤","系统","虚拟","-","html","是","就","构建","安装","大家",".","workstation",":","vmware","准备","evaluation","之上","后","相同","https","运行","下载","请","我们","pro","/"," ","自行","。","products","工作","一个","可以","操作","采用","同时","多个","开始","并","com","其他","地址"],"title":"Ubuntu虚拟机安装","title_tokens":["ubuntu","虚拟机","虚拟","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1","text":"下载链接： https://ubuntu.com/download/desktop","text_tokens":["desktop","https","下载","：","download",".","com","/"," ",":","ubuntu","链接"],"title":"1. 下载系统镜像","title_tokens":["镜像","下载","1","."," ","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2","text":"","text_tokens":[],"title":"2. 在虚拟机中创建系统","title_tokens":["2","虚拟机","中","创建",".","系统","在"," ","虚拟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3","text":"","text_tokens":[],"title":"3. 设置虚拟机硬盘大小","title_tokens":["3","大小","虚拟机","硬盘","设置","."," ","虚拟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4-ubuntu","text":"","text_tokens":[],"title":"4. 设置Ubuntu镜像路径","title_tokens":["镜像","4","路径","设置","."," ","ubuntu"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#5","text":"","text_tokens":[],"title":"5. 启动虚拟机","title_tokens":["5","启动","虚拟机","."," ","虚拟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#6","text":"","text_tokens":[],"title":"6. 设置用户名和密码","title_tokens":["用户名","设置","和",".","用户","密码"," ","6","户名"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#7","text":"","text_tokens":[],"title":"7. 等待系统安装","title_tokens":["7","安装","等待","."," ","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#8","text":"Ubuntu系统安装好后，大家可以先随意使用熟悉一下。","text_tokens":["一下","可以","安装","大家","使用","先","随意","好后","，","ubuntu","熟悉","。","系统"],"title":"8. 完成安装","title_tokens":["8","完成","安装","."," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_1","text":"接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下：","text_tokens":["如下","：","中","接下","，","步骤","系统","就","把","安装","到","了","接下来","我们","。","可以","ros2","下来","ubuntu"],"title":"ROS2系统安装","title_tokens":["安装","系统","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1_1","text":"$ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8","text_tokens":["locale","sudo","utf","update","-",".","lc","gen","install","all","lang","locales","_","=","&&"," ","export","$","us","8","apt","en"],"title":"1. 设置编码","title_tokens":["编码","1","设置","."," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2_1","text":"$ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844","text_tokens":["37844","d","[","rosdistro","报错","os","packages","--","”","dev","key","lsb","main","guyuehome","/","share","gpg","http","]","|","dpkg","ubuntu","list","，","-",".",":","to","arch","ssl","https","ros","archive","$","echo","ros2","tee","githubusercontent","source","参考","install","keyrings","o","deb","(","=","curl"," ","failed","signed","keyring","如遇","by","connect","sudo","gnupg","master","architecture","www","update","可","null","print","release","raw","“","etc","usr","codename","\"",">","org","_","&&",")","com","apt","sources"],"title":"2. 添加源","title_tokens":["添加","2","."," ","源"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3-ros2","text":"$ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop","text_tokens":["$","desktop","upgrade","ros","sudo","apt"," ","install","update","humble","-"],"title":"3. 安装ROS2","title_tokens":["3","ros2","安装","."," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4","text":"$ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。","text_tokens":["中","在","，","系统","至此","~","就","source","已经","安装","了",".","bash","好","\"","ros",">","setup","/"," ","。","bashrc","humble","$","opt","echo","ros2"],"title":"4. 设置环境变量","title_tokens":["4","环境变量","变量","设置","."," ","环境","环境变"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_2","text":"为了验证ROS2安装成功，我们可以通过以下示例进行测试。","text_tokens":["为了","可以","测试","以下","验证","安装","ros2","我们","成功","示例","进行","，","。","通过"],"title":"ROS2示例测试","title_tokens":["测试","示例","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_1","text":"先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。","text_tokens":["的","world","第二个","字符","订阅","启动","以下","：","talker","中","cpp","先","在","，","说明","发布者","系统","第一","数据","字符串","吧","py","传输","通信","”","两个","“","重要","最为","终端","是否","run","通过","来","命令","问题","者","二个","demo","_","listener"," ","nodes","。","没有","正常","一个","如果","$","hello","第一个","试试","dds","ros2","底层","节点","发布","第二"],"title":"示例一：命令行示例","title_tokens":["命令","：","命令行","示例","一"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_2","text":"再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["的","—","啦","如下","持续","启动","：","中","node","键盘","后续","第二句","左右","关于","在","中将","探索","，","该","一句","turtlesim","试一试","第一","蓝色","至此","两个","控制","”","“","就","点击","key","分别","教程","仿真器","海龟","终端","示例","第一句","安装","蕴藏","经典","run","小海","turtle","来","背景","运行","ros","按键","我们","_","小海龟","上下左右","奥义"," ","。","将","上","二句","teleop","一个","$","可以","上下","运动","仿真","再","真器","指令","ros2","节点","成功","第二"],"title":"示例二：小海龟仿真示例","title_tokens":["：","仿真","海龟","示例","小海龟","二","小海"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/","text":"ROS2命令行操作 在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。 Linux中的命令行 类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。 启动方式 回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。 常用命令操作 我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。 ROS2中的命令行 ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。 运行节点程序 想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看节点信息 当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim 查看话题信息 当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose 发布话题消息 想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 发送服务请求 一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\" 发送动作目标 想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\" 录制控制命令 系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["—","为","被","推出","具体","下","出","rm","改变","vel","绝对路径","转","好","或者","linear","不一","枯燥","gedit","布料","做好","笔记","完全","<","文件夹","度高","权限","进一步","和","spawn","详细","感兴","以上","跟","turtle1","之前","也","源文件","控制","有","鼠标","便捷",":","魅力","概念","拷贝到","什么样","接下来","实验","至于","我们","小海龟","管理","需要","上","{","$","一系列","多个","0.0","什么","record","目标","随身带","'","不是","rate","键盘","pwd","…","约束","链接","规则","死机","死记硬背","大家","海龟","用户","感觉","逛来逛去","绝对","turtle","来","专门","文件名","一次","ctrl","逛去"," ","工作","bag","难以","多","一下","及","自主","目","不用","应用","angular","播放","服装","新建","命令行","这些","主要","体操","这里","标目","调试","数据","“","了","写字","看看","action","后","文件名称","用","可视","想象","_","小","不太","将","如果","35","方式","并","体会","某段","信息","删除","材料","}","复现","对于","rosbag","但","快捷键","它","统管","不过","查看","还有","科幻","复制到","”","一二","背景","拷贝","而是","/","感兴趣","这样","操作","路径","买","]","角度","第一次","孤单","但是","会","随身","找","电脑","cd","需求","实现","40","本节",",","只是","类似","为什么","各种","动作","则","没有","twist","片段","alt","teleop","表示","打开","1.8","第一个","echo","ros2","商家","改了","无论","字符","info","y","有点","x","后边","0.2","子目","是","已经","因为","还是","很多","常用","小海","工具","看中","通过","消息","一只","此","以","一步","既","这个","若","服务","自己","于","很少","深入","absolute","加上","name","管理员","初次","让","sudo","编辑器","软件","请求","兴趣","核心","创建","帮上","、","当前","并不一定","保留","多种","快捷","更","来讲","话题","不到","。","可以","2","衣服","就是","多到","件夹","1","内容","很","这","根据","比如","啦","体验","启动","太","尝试","3","--","硬","用到","受","重要","呢","key","炫酷","十个","回到","一点","实验室","11","呀","去","呈现出","了解","成","时候","此时","仿真","真器","一系","terminal","想要","深色","显示","不变","list","先","动","即可","该","-","试一试","搜索","系统管理员","send","解决","学习","列出","确实","改名","死记","run","保持","命令","原因","问题","pose","ros","移入","至今","可视化","系列","msgs","使用","mv","topic","这种","或","所在","精心设计","一件","叫做","令人","数量","与","接下","查","play","款式","带领","起来","黑客","第一","背","把","到","仿真器","一","均","linux","call","呈现","srv","科幻电影","里边","一样","04","一直","笔记本","每","适应","cmd","定制","直接","发指","录制","结合","其上","右键","目录","麻烦","完成","异常","子目录","目标目录","+","目的","所有","继续","接触","及其","发送","\"","段","哪","编辑","本","必不可少","一种","t","灵活","原有","机制","一二十","某","发布","由","不可","例如","pub","[","干什么","详细信息","ls","goal","场景","感受","总有","满足","就","电影","终端","产生","一起","语法","看不到","选项","二十个","rotateabsolute","看似","？","怎么","geometry","轻松","cp","这项","再","某个","其他","你","容易","对","随着","一些","中","觉得","，","2022","虽然","功能",".","哪些","地","既定","为例","每次","db3","rotate","程序","theta","二十","总","想","名称","要","rosbag2","记忆","2.0","service","node","大致","集成","精心","能够","熟悉","逛来","窗口","17","turtlesim","知道","输入","0","参数","复制","主目录","看到","相同","运行","提供","笔记本电脑","令人发指","执行","案例","从来","子","选择","指令","节点","当前工作","现有","msg","都","一二十个","一边","的","商场","如下","手","：","又","等","在","设计","系统","另","不","指定","如何","未来","可能","忙","所以","文件","z","现出","一定",">","慢慢","mkdir","正常","调用","一个","还","常用命令","不同","下来","进行","具体操作","列表"],"title":"ROS2命令行操作","title_tokens":["命令行","命令","操作","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2","text":"在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。","text_tokens":["的","—","深入","会","有点","进一步","中","命令行","在","，","带领","第一","调试","之前","感受","重要","本节","学习","大家","到","接触","海龟","了","可能","小海","工具","魅力","命令","一定","运行","一次","我们","更","小海龟","一种","适应"," ","一步","不太","将","。","案例","多","如果","时候","可以","ros2","使用","第一次","随着"],"title":"ROS2命令行操作","title_tokens":["命令行","命令","操作","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#linux","text":"类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。","text_tokens":["不可","比如","为","被","材料","对于","但","推出","场景","科幻","总有","满足","受","就","呢","电影","炫酷","一点","不一","呀","看似","去","？","呈现出","这样","成","布料","做好","时候","操作","此时","买","完全","其他","你","想要","度高","容易","一些","但是","会","中","和","先","，","需求","解决","便捷","虽然","功能","类似","既定","为什么","每次","命令","各种","什么样","问题","ros","我们","至今","没有","片段","可视化","使用","什么","商家","无论","这种","不是","精心设计","一件","约束","精心","款式","能够","逛来","起来","是","规则","已经","大家","还是","linux","很多","逛来逛去","看到","工具","呈现","看中","来","科幻电影","里边","一样","一直","逛去"," ","定制","多","结合","服务","自主","其上","自己","于","现有","都","的","麻烦","商场","手","服装","异常","命令行","等","设计","在","这些","这里","软件","不","所有","了","、","现出","一定","并不一定","哪","必不可少","保留","可视","想象","来讲","一种","小","。","一个","灵活","可以","方式","衣服","就是","并","某","根据"],"title":"Linux中的命令行","title_tokens":["的","命令","中","命令行","linux"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_1","text":"回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。","text_tokens":["启动","快捷键","不过","科幻","硬","用到","就","呢","电影","终端","一二","看不到","十个","回到","二十个","背景","而是","枯燥","怎么","时候","操作","这项","笔记","一系","terminal","其他","深色","对","随着","但是","会","随身","中","电脑","觉得","，","即可","搜索","也","有","鼠标","确实","功能","魅力","为什么","命令","原因","二十","至于","我们","需要","上","alt","打开","一系列","记忆","系列","使用","什么","随身带","字符","不是","所在","叫做","令人","数量","熟悉","窗口","黑客","输入","是","背","死机","因为","参数","大家","到","看到","通过","工具","常用","来","专门","科幻电影","ctrl","笔记本","笔记本电脑","令人发指"," ","发指","既","从来","难以","这个","及","一下","选择","指令","右键","不用","很少","应用","都","一二十个","的","手","：","初次","命令行","又","在","+","软件","写字","所以","后","一定","慢慢","本","用","多种","快捷","不到","。","正常","t","可以","一二十","方式","就是","多到","并","体会","很","这","列表"],"title":"启动方式","title_tokens":["启动","方式"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_2","text":"我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。","text_tokens":["删除","为","体验","对于","[","下","出","ls","它","统管","复制到","”","rm","改变","就","语法","绝对路径","选项","或者","回到","拷贝","/","gedit","cp","路径","]","<","某个","文件夹","显示","会","权限","不变","找","中","先","cd","，","该","系统管理员","也","源文件","列出","功能","改名","只是","地","死记","保持","命令","拷贝到","移入","我们","则","管理","需要","名称","没有","打开","多个","mv","目标","或","pwd","…","查","熟悉","链接","子目","把","死记硬背","大家","用户","复制","一","感觉","linux","主目录","均","绝对","常用","来","文件名","此","执行","以"," ","工作","多","一下","及","若","目","指令","当前工作","目录","一边","的","管理员","：","新建","子目录","sudo","这些","目标目录","编辑器","标目","系统","另","目的","不","指定","所有","“","了","创建","未来","及其","当前","文件","文件名称",">","编辑","用","。","mkdir","将","一个","可以","常用命令","原有","件夹","由","列表"],"title":"常用命令操作","title_tokens":["操作","常用命令","命令","常用"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2_1","text":"ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。","text_tokens":["的","比如","topic","node","中","大致","后边","与","命令行","集成","干什么","在","具体","接下","，","体操","跟","下","主要","不过","第一","也","目的","感受","有","所有","就","参数","核心","继续","海龟","功能","一起","linux","为例","小海","概念","命令","相同","接下来","总","我们","话题","以","小海龟"," ","。","了解","一个","表示","还","操作","机制","不同","可以","一系列","第一个","仿真","系列","ros2","节点","一系","内容","下来","什么","具体操作","都","对"],"title":"ROS2中的命令行","title_tokens":["的","命令","中","ros2","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_3","text":"想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["例如","：","中","键盘","node","和","，","turtlesim","控制","key","海龟","想要","run","turtle","命令","运行","我们","_"," ","要","teleop","$","可以","操作","仿真","ros2","某个","节点","使用","进行"],"title":"运行节点程序","title_tokens":["节点","运行","程序"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_4","text":"当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim","text_tokens":["的","啦","info","加上","list","：","中","node","详细","详细信息","感兴","，","查看","它","turtlesim","系统","知道","有","就","呢","兴趣","哪些","当前","来","命令","运行","ros","/"," ","？","感兴趣","这样","一个","如果","$","可以","子","ros2","节点","某","信息","都","对"],"title":"查看节点信息","title_tokens":["节点","信息","查看"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_5","text":"当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose","text_tokens":["的","topic","如下","加上","list","：","中","，","即可","查看","系统","试一试","turtle1","数据","有","呢","看到","消息","当前","命令","pose","话题","想","/"," ","一个","$","还","子","echo","ros2","某","使用","都"],"title":"查看话题信息","title_tokens":["话题","查看","信息"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_6","text":"想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":["topic","y","rate","}","：","pub","x","命令行","，","动","起来","turtle1","--","控制","vel",",","海龟",":","通过","命令","\"","z","linear","我们","话题","_","cmd","/"," ","直接","twist","{","geometry","还","可以","$","1.8","指令","0.0","ros2","1","msgs","2.0","msg","发布","想要","angular"],"title":"发布话题消息","title_tokens":["话题","发布","消息"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_7","text":"一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\"","text_tokens":["—","'","y","name","}","：","x","太","spawn","，","0.2","turtlesim","试一试","仿真器","海龟","产生",",",":","call","来","一只","\"","srv","theta","提供","我们","/"," ","调用","{","一个","还","$","服务","2","仿真","再","真器","ros2","service","孤单","改了"],"title":"发送服务请求","title_tokens":["发送","请求","服务"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_8","text":"想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\"","text_tokens":["的","比如","目标","absolute","：","完成","中","让","命令行","具体","，","goal","turtlesim","turtle1","3","send","指定","到","仿真器","海龟","发送","帮上","转","action","忙","通过",":","命令","动作","rotate","\"","theta","提供","rotateabsolute","_","/"," ","这样","一个","这个","可以","$","仿真","真器","ros2","角度","想要"],"title":"发送动作目标","title_tokens":["发送","动作","目标"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_9","text":"系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["的","啦","复现","：","中","rosbag","与","play","，","以上","还有","17","尝试","实现","系统","-","turtle1","数据","40","0","有","把","如何","2022","vel","大家","功能",".","还是","看看","很多","常用","好","回到","db3","命令","实验室","段","11","运行","实验","用","04","每","我们","_","cmd","/"," ","？","。","录制","bag","轻松","如果","$","35","rosbag2","一个","子","可以","就是","再","自己","ros2","某段","下来","很","想要","这","record","播放"],"title":"录制控制命令","title_tokens":["命令","录制","控制"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","text":"ROS2开发环境配置 ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。 Git git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git 下载教程源码 《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。 VSCode Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download VSCode插件配置 为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。 中文语言包 Python插件 C++插件 CMake插件 vscode-icons ROS插件 Msg Language Support Visual Studio IntelliCode URDF Markdown All in One VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["—","比如","被","bug","轻量","开发工具","两款","后续","但","代码","增加","推出","具体","c++","git","已有","tutorials","成为","查看","硬件","编译","特性","网站","出","有些","成千","visualstudio","便于","就","重要","呢","哪里","download","终端","修复","略显","无限","21","gitee","好","发展","几千","机器人","简称","只","all","guyuehome","听到","icons","年","urdf","/","？","language","这样","提交","版本","丰富","操作系统","网上","众多","操作","开发者","广泛应用","个人","开源","利器","一系","这款","做","文件夹","语言","一些","会","非常","离不开","因","广泛","中","和","理工","先","搭建","，","源码","github","神兵","以上","-","最","搜索","也","入门","切换","有","2015","功能",".","示例","人","插件","推荐",":","审核","每次","迅速","命令","markdown","浏览","组件","高效","https","ros","人工","合并","我们","管理","需要","扩展","大量","新","intellicode","贡献","$","简单","上万","一系列","配置","系列","多个","微软","ros2","强大","之后","使用","千上万","作为","非常简单","in","与","浏览器","给","另外","集成","不开","功能强大","链接","一行","是","常听到","教程","大家","《","python","官方","cmake","linux","很多","install","看到","工具","行","macos","为了","码云","国内","支持","驱动","下载","不会","里边","提供","studio","windows","自动","进行","判断"," ","编写","直接","自带","多","clone","vscode","自己","官方网","讲","中会","等等","语言包","msg","应用","都","记事本","管理工具","的","中文","one","课程","support","：","完成","复杂","让","sudo","这些","在","设计","这里","软件","编辑器","环境","下载方式","系统","visual","调试","而生","不","记事","一款","所有","变更","如何","管理软件","安装","了","code","源代码","可能","官方网站","几千万","之间","、","准备","所以","之父","文件","方法","千万","以及","编辑","用","冲突","_","更","。","快速","一个","linus","还","可以","不同","机器","如果","成千上万","方式","件夹","并","开发","内容","com","apt","项目","肯定","这","》","喜欢"],"title":"ROS2开发环境配置","title_tokens":["配置","开发","环境","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros2","text":"ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。","text_tokens":["一些","的","—","课程","离不开","完成","开发工具","两款","和","代码","给","这些","先","，","源码","git","不开","查看","环境","编译","如何","呢","重要","大家","示例","推荐","、","准备","工具","机器人","ros","提供","我们","需要","编写","大量","？","。","机器","配置","vscode","开发","中会","做","肯定"],"title":"ROS2开发环境配置","title_tokens":["配置","开发","环境","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#git","text":"git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git","text_tokens":["—","比如","被","bug","代码","增加","具体","git","已有","硬件","特性","网站","有些","成千","就","哪里","终端","修复","gitee","发展","几千","听到","提交","版本","众多","开发者","广泛应用","开源","这款","会","非常","因","广泛","中","和","理工","，","github","也","切换","有","功能","人","审核","每次","迅速","命令","高效","人工","合并","我们","管理","需要","新","贡献","$","简单","上万","多个","之后","使用","千上万","非常简单","一行","是","常听到","大家","linux","install","看到","行","工具","码云","国内","驱动","不会","自动","进行","判断"," ","直接","等等","应用","都","管理工具","的","完成","让","sudo","这些","在","设计","软件","系统","而生","不","一款","所有","变更","管理软件","安装","了","可能","几千万","之间","所以","之父","方法","千万","以及","冲突","。","一个","linus","可以","不同","成千上万","并","开发","内容","apt","项目","肯定","这"],"title":"Git","title_tokens":["git"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_1","text":"《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。","text_tokens":["的","—","会","课程","：","中","复杂","和","代码","浏览器","另外","集成","git","源码","tutorials","，","查看","这里","下载方式","系统","环境","记事","入门","是","有","就","《","略显",".","21","推荐","很多",":","gitee","好","文件","浏览","https","下载","里边","用","guyuehome","_","更","/"," ","。","自带","这样","多","如果","$","还","一个","clone","方式","vscode","件夹","ros2","讲","文件夹","com","》","开发","记事本"],"title":"下载教程源码","title_tokens":["源码","下载","教程"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode","text":"Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download","text_tokens":["的","非常","：","轻量","但","代码","和","推出","在","搭建","，","神兵","编辑器","成为","功能强大","网站","系统","链接","visual","visualstudio","是","2015","源代码","code","download","功能","官方","官方网站",".","linux",":","、","macos","简称","组件","windows","支持","https","编辑","下载","studio","年","扩展"," ","/","。","丰富","快速","一个","操作系统","可以","操作","vscode","微软","利器","官方网","强大","开发","com","项目"],"title":"VSCode","title_tokens":["vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode_1","text":"为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。","text_tokens":["的","后续","与","，","调试","便于","安装","功能","插件","无限","为了","我们","扩展","。","还","可以","一系列","vscode","系列","ros2","一系","开发"],"title":"VSCode插件配置","title_tokens":["配置","vscode","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_2","text":"","text_tokens":[],"title":"中文语言包","title_tokens":["中文","语言包","语言"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#python","text":"","text_tokens":[],"title":"Python插件","title_tokens":["python","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#c","text":"","text_tokens":[],"title":"C++插件","title_tokens":["插件","c++"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#cmake","text":"","text_tokens":[],"title":"CMake插件","title_tokens":["插件","cmake"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode-icons","text":"","text_tokens":[],"title":"vscode-icons","title_tokens":["icons","vscode","-"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros","text":"","text_tokens":[],"title":"ROS插件","title_tokens":["ros","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#msg-language-support","text":"","text_tokens":[],"title":"Msg Language Support","title_tokens":[" ","language","msg","support"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#visual-studio-intellicode","text":"","text_tokens":[],"title":"Visual Studio IntelliCode","title_tokens":["visual"," ","studio","intellicode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#urdf","text":"","text_tokens":[],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#markdown-all-in-one","text":"VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["的","作为","在","，","以上","出","环境","最","搜索","也","大家","插件","推荐","只","支持","。","网上","可以","众多","配置","vscode","个人","自己","开发","喜欢"],"title":"Markdown All in One","title_tokens":["markdown","one","all","in"," "]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/","text":"DDS Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。 通信模型 DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。 DDS DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。 什么是DDS 好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是 Data Distribution Service ，也就是 数据分发服务 ，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。 DDS在ROS2中的应用 DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。 质量服务策略QoS DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是 Domain ，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为 数据提供者和接收者之间的合约 。 具体会有哪些策略？比如： DEADLINE 策略，表示通信数据必须要在每次截止时间内完成一次通信； HISTORY 策略，表示针对历史数据的一个缓存大小； RELIABILITY 策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式； DURABILITY 策略，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。 案例一：在命令行中配置DDS 我们先来试一试在命令行中配置DDS的参数。 启动第一个终端，我们使用best_effort创建一个发布者节点，循环发布任意数据，在另外一个终端中，如果我们使用reliable模型订阅同一话题，无法实现数据通信，如果修改为同样的best_effort，才能实现数据传输。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort 如何去查看ROS2系统中每一个发布者或者订阅者的QoS策略呢，在topic命令后边跟一个\"--verbose\"参数就行了。 $ ros2 topic info /chatter --verbose 案例二：DDS编程示例 接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。 运行效果 启动两个终端，分别运行发布者和订阅者节点： $ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub 可以看到两个终端中的通信效果如下，和之前貌似并没有太大区别。 看效果确实差不多，不过底层通信机理上可是有所不同的。 发布者代码解析 我们看下在代码中，如果加入QoS的配置。 learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , }, 订阅者代码解析 订阅者中的QoS配置和发布者类似。 learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], }, DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们主要带领大家认识DDS，更多使用方法和相关内容，大家也可以参考下边的链接进行学习。 参考链接 https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["周期","—","为","learning","how","合约","代码","统一","具体","成立","下","可信","编译","规模","医疗","那","得","遥控","服务质量","大","本身","好","或者","模式","concepts","交换","像是","终于","历史","之","年","listener","vendors","样","门","众多","广泛应用","秒","数据通","做","忽略","初始化","具体地址","地址","至关重要","受到","domain","缓存","相关","无法","进一步","下边","和","图像","帧","感兴","from","流畅","跟","架构图","也","之前","蓝色","海军","控制","有","可是","单独","当然",":","其实","!","omg","qosreliabilitypolicy","subscription","接下来","类型","全称","setup","我们","docs","管理","需要","连接数","上","{","占用","$","保证","配置","完整性","运动","多个","强制","优化","强调","中间件","派","什么","'","那该","不是","完整","另外","rmw","好吃","分布","基本","通常","链接","位置","大家","发送给","增多","用户","python3","有所","来","居","shutdown","专门","logger","流畅性","一次","@","生态","他们","effort","(","冰山一角","处理速度"," ","同一","运转","多","一下","该用","输出","使命","8","到底","底层","有人","不用","在于","应用","第二","；","publish","订阅","符合","默认","丢失","过去","速度","无用","命令行","这些","送给","主要","二种","这里","data","环境","关心","publisher","数据","客户","航拍","“","名","了","设置","才能","模型","建模","后","__","i","int32","用","org","_","任","reliable","生变","将","如果","性","应该","掉","小组","方式","兼容","并","感知","啥意思","肯定","信息","尽可能","集中","我","implementations","en","}","带","解析","但","还有","它","查看","不过","html","通信","”","真实","并行","质量","不管","更好","发生","spin","向","介绍","uml","编程","机器人","main","第四","既然","/","大大","感兴趣","这样","优势","专利","get","日志","建模语言","通信模型","双方","]","变化","语言","about","视频","标准","4g","但是","会","电脑","第三","distribution","神经网络","布式","none","需求","办法","实现","父类","两个","bin","来看","销毁",",","等待","entry","只是","类似","相当","to","截止","之上","边","std","动作","各种","第三种","貌似","没有","客户端","表示","打开","上边","第一个","echo","ros2","处","半天","华为","真正","helloworld","延时","无论","字符","info","callback","有点","后边","给","guides","s","video","那个","函数","是","已经","env","python","还是","互相","很多","至关","常用","通过","消息","只有","垂直","所","#","以","一步","编写","增长","据传","主讲","这个","服务","出现","自己","于","coding","任意","design","服务端","different","world","name","没","时","发生变化","找到","包含","让","组成部分","无人机","destroy","合适","heard","模块","软件","当于","请求","sysml","黑入","qos","兴趣","核心","创建","无人","务器","、","加密","决策","方法","通路","三种","话题","更","。","corba","频繁","可以","就是","并且","dds","1","说了半天","很","授权","com","提示","内容","这","回忆","根据","比如","啦","启动","选用","晚","太","publishing","欢迎","行为","无论如何","尝试","特性","0.5","--","升级","重要","呢","def","中间","某一","同样","国防","四大","数以千计","当","只","维护","修改","bilibili","guyuehome","一角","它们","放在","保证数据","去","成","时候","影响","此时","太多","一旦","42","bv12z4y167w2","个人","所有人","开源","二","非常","不变","广泛","避免","举","先","效率","转移","-","试一试","差不多","连接","每条","空间","broker","价值","例子","机理","字符串","服务器","解决","主","学习","列出","确实","示例","分组","init","接口标准","run","信赖","sub","相当于","差别","非常复杂","命令","scripts","问题","高效","工业","profile","ros","者","on","能响","能源","全局","预测","绑定","针对","humble","新","技术","容性","导致","msgs","建立","使用","定义","神经","时间","topic","作为","这种","或","的话","类","与","体","接下","许多","durability","定时器","行业","带领","顺利","timer","黑客","第一","第一种","把","verbose","到","string","一","内","last","console","行","qoshistorypolicy","大大提高","驾驶","分发","库","一样","纠结","subscribernode","先进","每","\\","自动","=","适应","分布式","直接","火锅","单位","实时","args","就行","厂商","情况","讲","qosprofile","不感兴趣","传送","就行了","退出","chatter","像","策略","领域","麻烦","讲到","图","完成","数据传输","包","异常","高速","ros1","可","保障","看","大小","回调","由于","所有","四种","更加","最为","发送","1989","（","借助","理解","\"","处理","过","哪","可信赖","每个","程度","）","尽量","重大","一种","接收者","看下","publishernode","deadline","快速","灵活","拿","宗旨","机器","航空",")","有所不同","关系","古月","而且","》","发布","效果","由","能力","企业","兼容性问题","角色","接收","pub","[","super","articles","而言","第二种","一套","可见","depth","成为","场景","红色","有些","便于","best","认识","满足","处于","综合","就","焕然","*","交通","进入","终端","一起","21","rclpy","%","复用","选项","现在","history","一条","集中处理","资源","？","美国","丰富","版本","课","中心","必须","其他","入口","你","意思","对","整个","一些","import","最早","中","上层","区别","，","部分","入门","瓶颈","通道","一新","py","组织","听说","分别","self","功能",".","哪些","地","加入","填充","冰山","为例","每次","程序","https","过程","存在","想","高通","构图","大量","要","keep","hello","点对点","主讲人","不多","service","来到","middleware","id","node","各个","working","能够","utf","技术标准","说明","靠","知道","传输","5g","尽可","参数","《","不好","class","初始","points","同一个","参考","建设","广播","定位","对象","遥控器","吃","看到","入个","定时","循环","为了","第四种","架构","驱动","运行","提供","执行","这么","作者","历史数据","create","案例","按照","前边","舰船","神经网","树莓","选择","指令","节点","刚才","databus","msg","几种","都","点","的","提高","要求","如下","应用程序","提","课程","multiple","性能","网络","明显","收到","复杂","商业","接口","：","数据通信","等","在","设计","焕然一新","www","供者","发布者","系统","不","指定","如何","尽力","旋转","usr","结构","可能","2004","之间","所以","提到","文件","人机","提供者","一定","组成","框架","with","正常","原则","一个","不同","reliability","兼容性","开发","下来","对应","进行","关闭"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds","text":"Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。","text_tokens":["的","—","讲到","课程","神经","中","完成","网络","神经网络","在","具体","欢迎","，","它","靠","实现","系统","当于","入门","是","通信","学习","大家","《","最为","21","、","好","相当","来","相当于","机器人","动作","过程","ros","终于","我们","话题","他们","重大"," ","。","前边","主讲","hello","服务","机器","神经网","主讲人","dds","ros2","古月","底层","讲","变化","》","都","我","来到"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_1","text":"DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。","text_tokens":["为","角色","但","第二种","具体","可见","成为","它","不过","规模","有些","通信","就","并行","发生","当","只","第四","像是","一条","之","集中处理","感兴趣","这样","优势","影响","太多","通信模型","一旦","双方","中心","所有人","必须","变化","忽略","其他","具体地址","地址","整个","但是","会","非常","受到","无法","进一步","中","第三","和","，","效率","感兴","实现","连接","也","瓶颈","broker","之前","通道","每条","服务器","解决","列出","单独","类似","其实","每次","各种","问题","第三种","我们","能响","想","需要","没有","针对","连接数","上","客户端","导致","点对点","处","优化","建立","使用","真正","这","作为","这种","有点","与","许多","好吃","能够","知道","第一","第一种","是","到","增多","很多","广播","常用","吃","消息","行","第四种","架构","所","提供","先进","以","处理速度"," ","一步","增长","运转","火锅","多","这个","服务","自己","节点","有人","不用","databus","不感兴趣","在于","传送","第二","都","几种","服务端","的","麻烦","订阅","性能","明显","时","发生变化","找到","速度","异常","收到","包含","在","二种","这里","软件","ros1","关心","系统","数据","客户","请求","所有","四种","兴趣","旋转","核心","更加","了","模型","可能","务器","处理","通路","一定","三种","框架","每个","程度","更","一种","。","生变","正常","一个","如果","可以","应该","拿","就是","并且","dds","并","关系","而且","很","发布","进行","由","集中"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_1","text":"DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。","text_tokens":["的","比如","会","非常","不是","广泛","和","等","在","这些","，","通常","模块","高速","需求","数据","之前","医疗","通信","满足","已经","交通","地","很多","定位","好","国防","决策","借助","驾驶","交换","存在","能源","自动","它们","预测","需要"," ","。","频繁","新","一个","可以","航空","广泛应用","方式","dds","并","ros2","感知","很","应用","都","领域"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_2","text":"好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是 Data Distribution Service ，也就是 数据分发服务 ，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。","text_tokens":["啦","为","兼容性问题","比如","统一","一套","成立","成为","它","还有","满足","通信","升级","真实","呢","质量","中间","服务质量","介绍","好","uml","现在","数以千计","维护","年","/","？","美国","丰富","课","建模语言","中心","做","语言","意思","标准","最早","中","distribution","和","布式","，","需求","也","价值","海军","组织","解决","听说","当然","地","omg","各种","问题","高效","全称","我们","管理","大量","技术","容性","强制","半天","强调","中间件","service","完整","分布","行业","技术标准","是","已经","大家","对象","来","垂直","专门","分发","提供","以","分布式"," ","一下","舰船","服务","实时","使命","到底","于","应用","策略","的","订阅","提","网络","复杂","等","设计","这里","data","软件","环境","可","系统","保障","数据","sysml","建模","可能","2004","1989","、","过","。","corba","一个","灵活","可以","就是","dds","兼容","兼容性","说了半天","啥意思","开发","发布","进行","由"],"title":"什么是DDS","title_tokens":["dds","是","什么"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#ddsros2","text":"DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。","text_tokens":["企业","比如","选用","但","而言","统一","代码","具体","无论如何","场景","红色","通信","综合","就","重要","呢","那","不管","得","进入","中间","某一","编程","复用","四大","机器人","既然","放在","？","大大","这样","专利","版本","影响","此时","个人","开源","其他","你","对","至关重要","标准","4g","会","不变","中","上层","下边","和","布式","，","部分","架构图","实现","转移","也","蓝色","有","组织","功能","加入","接口标准","之上","差别","边","问题","工业","过程","ros","我们","想","高通","构图","需要","上","要","技术","容性","保证","上边","多个","ros2","中间件","建立","华为","使用","时间","middleware","无论","或","给","分布","能够","基本","那个","函数","是","5g","位置","把","大家","用户","还是","建设","很多","至关","来","大大提高","为了","架构","一样","驱动","纠结","每","生态","他们","这么","分布式"," ","按照","多","这个","该用","就行","选择","厂商","自己","刚才","应用","都","像","的","提高","符合","性能","没","接口","组成部分","商业","让","在","设计","这里","模块","软件","可","系统","不","由于","所有","如何","了","可能","、","所以","提到","哪","用","组成","尽量","更","一种","任","。","原则","一个","如果","宗旨","可以","性","机器","就是","dds","兼容","兼容性","开发","授权","对应","肯定","能力","根据"],"title":"DDS在ROS2中的应用","title_tokens":["的","中","dds","ros2","在","应用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#qos","text":"DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是 Domain ，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为 数据提供者和接收者之间的合约 。 具体会有哪些策略？比如： DEADLINE 策略，表示通信数据必须要在每次截止时间内完成一次通信； HISTORY 策略，表示针对历史数据的一个缓存大小； RELIABILITY 策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式； DURABILITY 策略，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。","text_tokens":["比如","为","啦","接收","合约","带","晚","具体","行为","下","特性","可信","场景","便于","best","通信","满足","处于","重要","呢","质量","焕然","更好","遥控","一起","向","好","模式","机器人","history","历史","资源","保证数据","？","这样","成","样","门","时候","此时","众多","通信模型","必须","数据通","视频","对","一些","但是","domain","会","缓存","避免","中","电脑","举","和","图像","帧","先","，","流畅","需求","办法","实现","之前","空间","也","一新","控制","例子","有","来看","功能","哪些","地","加入","分组","类似","信赖","截止","每次","命令","程序","过程","ros","我们","全局","需要","绑定","没有","针对","要","新","占用","表示","导致","保证","配置","完整性","运动","ros2","定义","派","使用","时间","延时","id","这种","那该","的话","各个","完整","体","另外","给","durability","基本","顺利","黑客","那个","传输","是","尽可","参数","不好","大家","发送给","同一个","互相","内","遥控器","通过","焕然一新","只有","入个","流畅性","一次","所","提供","每","effort","适应","这么"," ","历史数据","直接","同一","多","这个","树莓","服务","情况","选择","出现","指令","节点","应用","都","；","策略","的","要求","应用程序","图","：","网络","完成","默认","丢失","过去","无用","数据通信","让","无人机","在","这些","合适","送给","供者","系统","数据","客户","不","指定","大小","所有","航拍","qos","尽力","黑入","如何","了","结构","才能","模型","可能","无人","发送","之间","加密","理解","人机","提供者","一定","用","可信赖","_","尽量","一种","接收者","reliable","。","将","deadline","快速","一个","如果","可以","掉","机器","小组","不同","就是","dds","reliability","关系","进行","尽可能","回忆","根据"],"title":"质量服务策略QoS","title_tokens":["策略","qos","质量","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_3","text":"我们先来试一试在命令行中配置DDS的参数。 启动第一个终端，我们使用best_effort创建一个发布者节点，循环发布任意数据，在另外一个终端中，如果我们使用reliable模型订阅同一话题，无法实现数据通信，如果修改为同样的best_effort，才能实现数据传输。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort 如何去查看ROS2系统中每一个发布者或者订阅者的QoS策略呢，在topic命令后边跟一个\"--verbose\"参数就行了。 $ ros2 topic info /chatter --verbose","text_tokens":["为","启动","pub","查看","--","best","通信","呢","终端","同样","或者","修改","/","去","42","数据通","无法","中","先","，","跟","实现","-","试一试",":","命令","std","者","我们","$","配置","第一个","echo","ros2","msgs","使用","topic","info","后边","另外","第一","传输","参数","verbose","来","循环","每","effort"," ","同一","据传","节点","任意","msg","就行了","chatter","策略","的","订阅","数据传输","命令行","数据通信","在","data","发布者","系统","数据","qos","如何","创建","才能","模型","\"","int32","话题","_","reliable","。","一个","如果","dds","reliability","发布"],"title":"案例一：在命令行中配置DDS","title_tokens":["命令","配置","：","中","dds","命令行","在","一","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_4","text":"接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。","text_tokens":["world","中","接下","代码","在","，","尝试","之前","通信","为例","接下来","我们","话题","以"," ","。","hello","配置","dds","下来"],"title":"案例二：DDS编程示例","title_tokens":["：","dds","案例","示例","二","编程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_2","text":"启动两个终端，分别运行发布者和订阅者节点： $ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub 可以看到两个终端中的通信效果如下，和之前貌似并没有太大区别。 看效果确实差不多，不过底层通信机理上可是有所不同的。","text_tokens":["的","learning","如下","订阅","启动","：","pub","中","区别","和","太","，","发布者","不过","差不多","之前","看","两个","通信","机理","qos","可是","分别","终端","确实","大","run","看到","sub","有所","运行","者","貌似","_"," ","。","没有","上","$","可以","不同","有所不同","ros2","节点","并","不多","底层","发布","效果","helloworld"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_3","text":"我们看下在代码中，如果加入QoS的配置。 learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , },","text_tokens":["周期","learning","为","}","pub","[","super","代码","publishing","depth","编译","0.5","best","”","*","def","spin","rclpy","%","选项","main","history","guyuehome","/","get","日志","秒","入口","初始化","import","中","，","from","none","父类","-","字符串","py","bin","主","销毁",",",".","self","示例","等待","功能","加入","entry","init","填充",":","!","std","qosreliabilitypolicy","程序","profile","scripts","类型","setup","我们","需要","{","keep","hello","打开","配置","ros2","msgs","helloworld","字符","'","info","类","callback","node","定时器","s","utf","timer","说明","函数","知道","关闭","env","已经","class","python3","string","python","初始","points","console","last","对象","消息","居","qoshistorypolicy","定时","循环","shutdown","logger","库","@","#","(","effort","=","执行","进行","create","作者"," ","编写","单位","输出","args","8","coding","节点","qosprofile","msg","退出","chatter","点","的","world","publish","如下","name","：","完成","接口","包","destroy","让","在","www","data","发布者","publisher","系统","数据","回调","“","qos","名","usr","设置","创建","、","（","后","文件","\"","__","话题","_","）","publishernode","reliable","看下","。","原则","一个","如果",")","古月","reliability","1","并","com","发布","提示","信息"],"title":"发布者代码解析","title_tokens":["代码","发布者","解析","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_4","text":"订阅者中的QoS配置和发布者类似。 learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], }, DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们主要带领大家认识DDS，更多使用方法和相关内容，大家也可以参考下边的链接进行学习。","text_tokens":["learning","}","pub","[","super","代码","depth","编译","认识","best","”","*","def","spin","rclpy","本身","%","选项","main","history","guyuehome","一角","listener","/","get","日志","]","入口","初始化","对","标准","import","非常","相关","中","下边","和","，","from","none","父类","-","也","py","bin","主","学习","销毁",",",".","self","示例","等待","功能","类似","加入","init","entry",":","只是","冰山","sub","!","非常复杂","std","qosreliabilitypolicy","程序","profile","scripts","subscription","者","类型","setup","我们","需要","{","keep","hello","打开","配置","ros2","msgs","定义","使用","helloworld","info","'","类","callback","node","s","带领","utf","说明","链接","函数","知道","关闭","是","env","class","python3","string","python","初始","points","大家","参考","console","last","对象","消息","居","qoshistorypolicy","循环","shutdown","logger","库","subscribernode","@","#","(","effort","=","\\","执行","create","作者"," ","进行","编写","冰山一角","多","输出","args","8","coding","节点","qosprofile","msg","退出","chatter","点","的","world","如下","订阅","name","：","完成","接口","收到","包","destroy","让","复杂","主要","heard","www","data","发布者","系统","数据","回调","“","qos","名","usr","设置","创建","、","（","后","文件","方法","\"","__","处理","i","话题","_","）","更","reliable","。","原则","一个","可以",")","dds","古月","reliability","1","并","内容","com","发布","提示","信息"],"title":"订阅者代码解析","title_tokens":["代码","解析","者","订阅"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_5","text":"https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["middleware","how","multiple","articles","working","rmw","guides","different","www","video","html","-",".",":","to","on","https","concepts","bilibili","ros","org","_","docs","with","/"," ","vendors","humble","bv12z4y167w2","dds","ros2","design","com","about","implementations","en"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/","text":"工作空间：开发过程的大本营 大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是 工程 。 工作空间是什么 类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做 工作空间 。 所以工作空间是一个存放项目开发相关文件的文件夹，也是 开发过程中存放所有资料的大本营 。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。 创建工作空间 了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 自动安装依赖 我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init $ rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y 编译工作空间 依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。 设置环境变量 编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["比如","典型","log","啦","colcon","社区","后续","rosdistro","绝大","手动","代码","报错","git","tutorials","编译","找到","html","3","--","至此","”","dev","~","结果","就","所示","包","产生","中间","终端","p","21","gitee","workspace","选项","脚本","或者","pip","机器人","一点","当","警告","guyuehome","像是","/","了解","从","src","日志","此时","操作","完全","开始","文件夹","成功","想要","pip3","用于","一些","会","相关","行文","eclipse","中","资料","空间结构","和","，","一部","以上","cd","from","部分","四个","-","工程","空间","之前","也","大部","两个","rosdepc","有","变量","仅","学习","点击","功能",".","多少","自动生产","类似","缺少","init",":","概念","可执行文件","local","creating","大本","各种","允许","程序","命令","过程","https","ros","接下来","存放","存在","setup","我们","docs","管理","大本营","需要","名称","针对","humble","要","新","rosdep","$","ws","配置","多个","echo","ros2","放置","强调","定义","使用","什么","依赖","绝大部分","生产","大部分","y","不是","叫做","数量","集成","另外","工具栏","接下","能够","根目录","a","链接","子目","是","..","source","参数","教程","大家","到","python3","b2","参考","均","install","某些","工具","看到","为了","一样","里边","运行","下载","studio","不会","#","保存","自动","执行"," ","编写","工作","环境变","这个","子","里","情况","clone","出现","自己","并列","中会","很少","qt","目录","都","；","总体","的","如下","如图所示","：","w","完成","creator","时","一部分","否则","子目录","让","等","在","这些","sudo","这里","环境","update","系统","visual","path","生效","环境变量","所有","“","b","任何","安装","结构","接触","创建","未来","了","设置","sh","编写程序","build","唯一","、","所以","后","当前","文件","\"","i","过","得到","以及",">","用","org","_","来讲","错误","。","mkdir","bashrc","一个","如果","人为","可以","应该","机器","还","2","就是","件夹","并且","关系","并","某","1","开发","内容","下来","com","项目","进行","这","apt","信息","en"],"title":"工作空间","title_tokens":["空间","工作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_1","text":"大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是 工程 。","text_tokens":["的","比如","会","eclipse","中","叫做","creator","后续","和","集成","等","在","这些","工具栏","，","环境","visual","工程","之前","”","是","有","所有","“","就","学习","点击","大家","接触","创建","产生","编写程序","某些","、","工具","选项","文件","当","程序","过","以及","里边","studio","我们"," ","编写","。","工作","新","一个","这个","应该","此时","件夹","放置","开发","文件夹","内容","想要","qt","都"],"title":"工作空间：开发过程的大本营","title_tokens":["的","空间","大本","过程","：","开发","大本营","工作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_2","text":"类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做 工作空间 。 所以工作空间是一个存放项目开发相关文件的文件夹，也是 开发过程中存放所有资料的大本营 。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。","text_tokens":["典型","比如","log","绝大","代码","编译","3","dev","结果","就","所示","产生","中间","或者","脚本","机器人","一点","警告","像是","src","日志","操作","完全","开始","文件夹","成功","用于","一些","会","相关","行文","中","资料","空间结构","和","，","一部","以上","部分","四个","工程","也","空间","大部","两个","有","功能","类似","可执行文件","大本","各种","允许","过程","ros","存放","存在","我们","管理","需要","大本营","名称","针对","要","新","ws","多个","放置","强调","定义","绝大部分","大部分","不是","叫做","数量","另外","集成","根目录","a","子目","是","参数","到","b2","install","某些","一样","里边","运行","保存","执行"," ","编写","工作","这个","子","里","情况","自己","并列","很少","目录","总体","都","；","的","如图所示","：","w","时","一部分","子目录","等","在","这里","环境","系统","所有","b","安装","结构","创建","未来","了","build","唯一","、","所以","后","文件","得到","用","_","来讲","错误","。","一个","人为","可以","机器","2","就是","件夹","关系","并","某","1","开发","项目","进行","这","信息"],"title":"工作空间是什么","title_tokens":["空间","工作","是","什么"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_3","text":"了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git","text_tokens":["的","如下","：","和","接下","代码","，","cd","git","tutorials","-","空间","~","dev","结果","教程","了","创建",".","p","21",":","gitee","概念","命令","https","下载","接下来","guyuehome","我们","_","/"," ","mkdir","了解","工作","一个","$","可以","src","ws","clone","并且","ros2","下来","使用","com"],"title":"创建工作空间","title_tokens":["创建","空间","工作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_4","text":"我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init $ rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y","text_tokens":["的","一些","会","y","：","社区","中","rosdistro","手动","代码","sudo","，","cd","from","update","-","path","rosdepc","也","--","有","..","安装","python3","多少","init","install","工具","pip","各种","i","下载","我们","自动"," ","humble","从","一个","rosdep","$","可以","src","使用","apt","pip3","都","依赖"],"title":"自动安装依赖","title_tokens":["自动","依赖","安装"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_5","text":"依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。","text_tokens":["的","啦","生产","log","如下","colcon","：","完成","中","报错","否则","代码","sudo","在","，","cd","编译","-","空间","~","有","dev","就","任何","安装","python3","了","自动生产","缺少","install","build","看到","、","或者","后","文件","命令","过程","ros","不会","_","自动","错误","/"," ","。","工作","如果","$","可以","应该","ws","出现","件夹","使用","中会","apt","成功","文件夹","依赖"],"title":"编译工作空间","title_tokens":["空间","工作","编译"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_6","text":"编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。","text_tokens":["的","行文","：","完成","找到","包","让","和","在","能够","，","环境","编译","系统","空间","环境变量","至此","变量","仅","~","dev","source","所有","就","设置","终端","功能",".","sh","了","均","创建","install","、","后","可执行文件","文件","为了","local","当前","\"",">","setup","#","我们","_","执行","需要"," ","/","。","bashrc","工作","环境变","还","$","ws","配置","echo","成功","生效"],"title":"设置环境变量","title_tokens":["环境变量","变量","设置","环境","环境变"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_7","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["creating","html","https","ros","org",".","docs","-","/"," ","tutorials","a",":","humble","workspace","en"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/","text":"功能包：开发过程的大本营 在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做 功能包 。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。 创建功能包 如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python 编译功能包 在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash 功能包的结构 功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。 C++功能包 首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。 Python功能包 C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["比如","learning","原理","拿出","发现","译成","colcon","社区","c++","解析","分享","后续","但","代码","绿豆","tutorials","下","分析","还有","编译","html","--","是否是","”","~","dev","就","重要","呢","那","得","终端","一起","首先","语法","好","复用","或者","五颜六色","划分","机器人","c","当","只","编程","介绍","拆分","声明","率","放在","而是","导航","之一","？","/","first","版本","别人","袋子","普通","时候","手上","src","出来","<","必须","文件夹","包中","入口","你","语言","越","是不是","一些","但是","会","黄豆","相关","行文","找","中","包是","your","和","型","头疼","，","源码","跟","cd","该","-","新创建","也","空间","py","除此之外","控制","例子","有","变量","两个","三个","么","分别","功能","当然","新创",".","entry",":","豆子","可执行文件","local","creating","编译成","大本","命令","各种","程序","https","过程","ros","耦合","pkg","setup","类型","存在","我们","包该","想","docs","大本营","需要","名称","humble","要","$","表示","ws","配置","ament","ros2","使用","之后","xml","依赖","package","放到","不是","workspace","叫做","红豆","数量","给","a","说明","起来","链接","是","规则","把","source","教程","包并","大家","到","很快","type","python","还是","cmake","points","参考","很多","bash","install","之外","看到","某些","立刻","来","一样","下载","运行","里边","#","颜色","他们","执行","判断","create"," ","编写","版权","工作","环境变","某种","多","这个","自主","里","指令","名字","刚才","都","；","降低","其中","的","提高","txt","如下","name","：","完成","包","时","新建","包含","等","在","这些","必然","主要","假设","这里","软件","环境","描述","不","看","环境变量","所有","“","如何","一颗","很难","了","创建","继续","才能","可能","结构","视觉","设置","除此","讲解","build","之间","、","所以","是否","文件","方法","cmakelists","cmakerlists","只想",">","用","混合","每个","org","尽量","_","。","将","正常","移动","一个","如果","可以","不同","机器","拿","机制","就是","件夹","举个","关系","并","开发","感知","内容","这","信息","en"],"title":"功能包","title_tokens":["功能","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_1","text":"在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做 功能包 。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。","text_tokens":["比如","原理","拿出","发现","社区","分享","代码","绿豆","就","重要","得","一起","复用","五颜六色","划分","机器人","当","只","拆分","率","放在","而是","导航","之一","别人","袋子","普通","时候","手上","出来","文件夹","包中","你","越","是不是","但是","会","黄豆","找","中","头疼","，","源码","也","控制","例子","有","三个","么","功能","当然","豆子","ros","耦合","我们","包该","想","需要","名称","ros2","使用","放到","不是","叫做","红豆","数量","给","说明","起来","是","把","教程","大家","到","很快","很多","看到","某些","立刻","下载","颜色","他们"," ","某种","多","这个","自主","里","都","；","降低","其中","的","提高","包","时","等","在","这些","假设","软件","不","如何","一颗","很难","了","可能","视觉","之间","、","所以","文件","方法","只想","用","混合","每个","尽量","。","移动","一个","如果","可以","不同","机器","拿","机制","就是","件夹","举个","关系","并","感知"],"title":"功能包：开发过程的大本营","title_tokens":["的","大本","过程","：","包","功能","开发","大本营"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_2","text":"如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python","text_tokens":["的","比如","learning","package","相关","name","：","中","包是","包","c++","新建","和","在","，","cd","这里","跟","-","新创建","--","~","dev","就","如何","呢","那","分别","创建","功能","type","新创","还是","python","cmake","终端","build","或者","命令","c",">","pkg","#","我们","_","create","/"," ","？","。","版本","一个","如果","这个","可以","$","表示","src","ws","指令","<","ros2","ament","名字","使用","；"],"title":"创建功能包","title_tokens":["创建","功能","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_3","text":"在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash","text_tokens":["的","colcon","：","完成","包","和","代码","在","，","cd","环境","编译","空间","环境变量","变量","~","dev","所有","source","继续","创建","功能","才能",".","bash","build","install","好","local","运行","#","setup","我们","_","需要"," ","编写","/","工作","环境变","正常","$","可以","src","配置","ws","之后","包中"],"title":"编译功能包","title_tokens":["功能","编译","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_4","text":"功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。","text_tokens":["的","不是","包","，","下","分析","新创建","是否是","两个","如何","呢","包并","那","结构","创建","功能","新创","是否","来","文件","我们","判断","？","。","一个","普通","件夹","文件夹","刚才"],"title":"功能包的结构","title_tokens":["的","功能","包","结构"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#c","text":"首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。","text_tokens":["的","txt","package","如下","：","中","c++","包","包含","和","代码","必然","在","主要","，","下","该","编译","描述","看","两个","是","规则","如何","设置","功能",".","才能","cmake","首先","语法","所以","文件","cmakelists","cmakerlists","各种","运行","类型","存在","声明","需要"," ","。","版权","要","必须","内容","使用","xml","依赖","其中"],"title":"C++功能包","title_tokens":["功能","c++","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#python","text":"C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。","text_tokens":["的","一些","但是","会","package","译成","行文","：","中","c++","包","解析","包含","但","型","和","后续","在","给","主要","，","源码","还有","编译","也","不","py","描述","是","两个","有","除此之外","“","”","如何","points","大家","python","功能",".","除此","entry","讲解","之外","所以","编程","介绍","可执行文件","文件","编译成","各种","程序","一样","里边","setup","声明","我们","_","执行","需要"," ","。","将","版权","版本","不同","配置","内容","使用","xml","入口","语言","这","信息","依赖"],"title":"Python功能包","title_tokens":["python","功能","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_5","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["package","your","tutorials","a","html","-",".",":","workspace","creating","https","ros","org","docs","/"," ","humble","first","ros2","en"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/","text":"节点 机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。 通信模型 完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。 案例一：Hello World节点（面向过程） ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。 运行效果 大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ], 创建节点流程 代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。 案例二：Hello World节点（面向对象） 所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。 运行效果 接下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ], 创建节点流程 所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。 案例三：物体识别节点 没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。 运行效果 在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 Attention 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。 代码解析 在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ], 案例四：机器视觉识别节点 用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。 运行效果 启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 Attention 如果是在虚拟机中操作，需要进行以下设置： 1. 把虚拟机设置为兼容USB3.1； 2. 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。 代码解析 相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ], 节点命令行操作 节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息 思考题 现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["周期","—","learning","为","被","50","代码","方便","太小","具体","具备","过来","重新","approx","下","出","噪声","编译","lower","吧","前后","改变","那","得","点画","模块化","心里","128","好","或者","位于","if","videocapture","不要","去除","pyhton","阈值","操作系统","众多","部门","所以然","外界","<","这款","做","成功","总体而言","先拉","初始化","独立","和","图像","from","四","编程语言","也","之前","5","控制","detect","有","负责","np","home","当然",":","apple","!","概念","接下来","图像处理","请","setup","勾勒","我们","docs","color","需要","上","{","保持联系","马","$","运动","配置","ws","retr","前后左右","轮廓","'","不是","理过","hierarchy","完整","in","另外","分布","推动","步骤","链接","大家","python3","image","之外","移植性","这座","居","来","shutdown","身体","logger","@","他们","(","知其所以然"," ","框会","工作","object","多","一下","输出","轮子","及","8","一台","到底","不用","前","总体","；","工厂","webcam","findcontours","关注","速度","命令行","h","这些","这里","环境","编码方式","虚拟","调试","更多要","“","摇杆","了","设置","除此","模型","看看","视觉","后","__","用","可视","org","合理","_","左上角","将","移动","如果","应该","方式","兼容","并","apt","信息","jpg","imshow","en","还会","imread","以下","对于","解析","但","打印","还有","它","查看","不过","html","”","通信","地方","更好","发生","spin","算机","time","编程","面向对象","介绍","机器人","main","流程","既然","/","而已","这样","get","日志","操作","路径","通信模型","src","处理过程","]","变化","角度","语言","是不是","但是","会","bgr","电脑","布式","none","整体","只不过","眼睛","实现","父类","云端","helloworldnode","进程","两个","bin","来看","搭载","销毁",",","等待","entry","只是","类似","物体","各种","read","岂","联系","continue","understanding","表示","打开","ros2","远程","usb3.1","helloworld","字符","info","y","最大","x","计算","给","此处","函数","是","编码","env","python","命名","这份","还是","设备","互相","读取","java","某些","通过","常用","难","范围","像头","移植","cap","#","看上去","一节","以","编写","这个","出现","coding","hsv","world","高","name","没","数值","找到","时","destroy","让","每一项","sudo","模块","职责","contours","安装","创建","面积","编写程序","、","方法","摄像头","多种","更","。","一项","cv2","可以","2","就是","并且","1","后勤部","很","自然","com","attention","这","没错","ret","做到","根据","比如","啦","启动","太","更为","tutorials","分析","总结","0.5","考题","用到","dev","绿点","结果","重要","呢","def","中间","回到","一点","修改","当","red","guyuehome","呀","放在","去","时候","一帧","true","框架图","开始","出来","255","想要","二","上限","显示","list","然后","先","即可","该","四个","-","连接","字符串","waitkey","主","学习","综合体","示例","算是","init","run","后勤部门","保持","可执行文件","生成","ok","命令","scripts","问题","ros","相比","更多","nodes","后勤","humble","上去","可视化","乃至","使用","各不相同","坐标","destroyallwindows","时间","这种","的话","类","所在","计算机","叫做","接下","起来","比喻","as","把","来源","到","一线","一","console","install","numpy","库","一样","纠结","每","=","inrange","分布式","某种","args","实时","img","为止","退出","circle","像","摄像","可读性","w","完成","包","左右","+","可","保障","腿","看","监控","更加","最为","发送","知其然","（","理解","物理","\"","处理","过","得到","转换","每个","）","检测","一种","孤立","人为","机制","机器",")","稍微","可读","古月","某","效果","发布","左上","发现","180","c++","[","super","boundingrect","而言","同理","任务","成为","硬件","溜溜","识别","红色","下限","认识","会弹","厂房","综合","就","*","取","终端","一起","cvtcolor","21","实际","rclpy","选项","现在","动态","状态","？","细胞","从","bgr2hsv","150","网上","中心","再","for","疑惑","array","入口","你","至","一些","import","90","行文","改成","中","例程","休眠","好像","不能","，","经常","图像识别","除此之外","py","模拟","虽然","分别","self","功能",".","查询","面向","加入","共同","推荐","为例","ruby","看上","苹果","程序","https","过程","drawcontours","xy","名称","while","要","桌子","简单","hello","就让","一张","mask","node","关于","熟悉","utf","窗口","a","说明","注意","知道","0","图片","调整","sleep","参数","初始","points","class","参考","对象","看到","上角","获取","想到","循环","相同","载体","运行","驱动","提供","颜色","执行","思考题","二值化","作者","三","着急","案例","hcx","工人","里","指令","节点","名字","刚才","都","点","相机","其中","的","可移植性","如下","课程","chain","：","虚拟机","接口","cnt","复杂","收到","等","在","设计","中将","www","系统","宽","不","如何","绿色","b","usr","结构","思考","未来","合体","可能","依然","唯一","所以","是否","之间","文件","重点","像素",">","组成","框架","可移植","骡子","却","正常","opencv","一个","还","不同","int","shape","下来","开发","中心点","进行","关闭","upper","列表"],"title":"节点","title_tokens":["节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_1","text":"机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。","text_tokens":["的","一些","中","每一项","给","在","这些","，","整体","成为","连接","是","”","综合","就","“","取","那","综合体","到","了","功能","合体","一起","通过","机器人","各种","ros","我们"," ","。","一项","细胞","工作","一个","众多","机器","机制","就是","名字","节点","像"],"title":"节点","title_tokens":["节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_2","text":"完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。","text_tokens":["还会","比如","—","c++","但","具体","更为","任务","还有","它","硬件","编译","认识","前后","”","厂房","地方","结果","就","那","一起","算机","编程","或者","位于","机器人","当","既然","放在","去","状态","细胞","这样","从","操作系统","时候","操作","部门","外界","这款","做","角度","你","想要","语言","独立","行文","中","和","布式","，","整体","眼睛","该","实现","编程语言","云端","也","连接","除此之外","进程","控制","有","来看","搭载","虽然","分别","功能","查询","算是","共同","后勤部门","可执行文件","生成","ruby","程序","接下来","我们","需要","名称","后勤","上","桌子","运动","配置","前后左右","远程","乃至","各不相同","不是","计算机","叫做","完整","计算","接下","另外","分布","a","推动","是","比喻","参数","到","python","命名","一线","互相","之外","java","看到","通过","获取","某些","想到","像头","来","这座","身体","相同","载体","运行","提供","每","他们","执行","分布式"," ","工作","多","这个","轮子","工人","里","一台","到底","节点","都","；","工厂","摄像","的","：","完成","找到","时","复杂","让","速度","左右","等","在","这些","设计","环境","系统","保障","腿","不","监控","职责","“","如何","b","摇杆","了","除此","可能","看看","唯一","、","文件","物理","得到","组成","每个","摄像头","更","却","。","移动","一个","还","可以","人为","机器","不同","就是","并","某","后勤部","下来","自然","这","信息","根据"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world","text":"ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。","text_tokens":["的","world","字符","中","复杂","例程","打印","先","，","实现","字符串","不","是","”","“","了","最为","当然","功能","到","终端","编写程序","来","循环","程序","我们","需要"," ","编写","。","从","一个","简单","hello","就是","开始","ros2","节点","并"],"title":"案例一：Hello World节点（面向过程）","title_tokens":["world","hello","过程","：","节点","）","一","面向"," ","案例","（"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_3","text":"大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["的","world","learning","字符","课程","node","中","然后","打印","代码","先","在","，","下","分析","溜溜","编译","实现","也","看","字符串","是","”","“","如何","大家","终端","run","知其然","通过","好","所以","来","后","看到","命令","循环","过程","运行","不要","我们","_","执行","骡子","知其所以然"," ","着急","。","马","这个","$","可以","hello","所以然","helloworld","再","出来","ros2","节点","成功","效果","先拉","做到"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_4","text":"这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ],","text_tokens":["learning","[","代码","下","编译","0.5","”","*","呢","def","rclpy","time","选项","main","guyuehome","/","？","get","日志","]","入口","初始化","import","休眠","none","from","，","实现","-","py","控制","bin","来看","主","销毁",",",".","功能","示例","entry","面向","加入","init",":","!","ok","scripts","程序","过程","setup","我们","需要","while","{","hello","打开","配置","ros2","使用","helloworld","时间","info","'","类","node","utf","说明","函数","知道","关闭","是","sleep","env","初始","python3","points","python","console","对象","居","循环","shutdown","logger","库","运行","@","#","(","=","作者"," ","编写","这个","输出","args","8","coding","节点","点","的","world","如下","：","完成","接口","包","destroy","让","www","系统","“","如何","usr","设置","创建","是否","后","文件","\"","_","。","正常",")","方式","古月","并","com","发布","进行","信息"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_5","text":"代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。","text_tokens":["的","但是","会","发现","这种","的话","：","中","接口","c++","对于","复杂","代码","先","具体","，","经常","这里","模块","总结","实现","系统","函数","用到","是","编码","有","就","重要","学习","初始","大家","销毁","创建","未来","功能","虽然","模块化","面向","编程","或者","难","方法","理解","一点","机器人","流程","过","纠结","过程","我们","pyhton","更"," ","。","这样","一个","一下","如果","可以","应该","简单","机器","稍微","方式","出现","并","节点","不用","使用","做","很","想要","关闭","初始化","做到"],"title":"创建节点流程","title_tokens":["节点","创建","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world_1","text":"所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。","text_tokens":["的","比如","一些","但是","会","可读性","可移植性","改成","中","复杂","和","代码","方便","在","具备","，","起来","调试","也","就","更加","更好","大家","虽然","了","推荐","面向","对象","所以","编程","面向对象","移植性","看上","移植","看上去","我们","可移植","更"," ","。","这样","可以","上去","方式","可读","ros2","开发","使用","刚才"],"title":"案例二：Hello World节点（面向对象）","title_tokens":["world","hello","：","面向对象","节点","）","面向"," ","对象","二","案例","（"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_6","text":"接下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["的","world","learning","字符","：","node","中","接下","打印","在","，","字符串","调整","”","“","class","终端","还是","run","看到","后","循环","运行","接下来","_"," ","。","一下","$","可以","hello","ros2","节点","下来","成功","效果","helloworld"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_7","text":"功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ],","text_tokens":["learning","[","super","代码","具体","编译","0.5","”","*","def","发生","spin","rclpy","time","面向对象","选项","main","guyuehome","/","get","日志","]","变化","入口","初始化","import","但是","休眠","，","from","none","实现","-","父类","helloworldnode","py","控制","bin","主","虽然","销毁",",","功能",".","示例","self","等待","面向","加入","init","entry",":","!","ok","scripts","程序","setup","我们","需要","while","{","hello","打开","配置","ros2","使用","helloworld","时间","info","'","类","node","utf","说明","函数","知道","关闭","sleep","env","class","python3","初始","python","points","这份","console","对象","居","循环","shutdown","logger","库","一样","运行","@","#","(","=","作者"," ","编写","一下","输出","args","8","coding","节点","退出","点","的","world","如下","name","：","完成","接口","时","包","destroy","让","www","系统","看","“","usr","结构","了","创建","设置","是否","后","文件","\"","__","_","。","正常","一个",")","方式","古月","并","com","发布","进行","信息"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_8","text":"所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。","text_tokens":["的","一些","是不是","world","不是","中","接口","完成","打印","而言","具体","不能","任务","，","这里","只不过","还有","步骤","不过","实现","四个","编码方式","吧","是","编码","改变","初始","大家","了","创建","功能","销毁","到","心里","只是","得","依然","所以","编程","机器人"," ","而已","。","一个","hello","机器","方式","并","节点","疑惑","做","总体而言","为止","这","总体","关闭","初始化"],"title":"创建节点流程","title_tokens":["节点","创建","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_9","text":"没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。","text_tokens":["的","中","找到","接下","先","任务","，","实现","识别","图片","模拟","就","视觉","实际","为例","通过","来","机器人","苹果","过程","接下来","我们","以"," ","编写","。","从","一个","网上","机器","节点","下来","没错","一张"],"title":"案例三：物体识别节点","title_tokens":["识别","：","节点","物体","三","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_10","text":"在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 Attention 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。","text_tokens":["—","啦","learning","为","imread","被","代码","重新","tutorials","出","编译","识别","会弹","用到","dev","绿点","就","中间","21","实际","修改","/","src","路径","中心","出来","成功","中","然后","例程","图像","，","即可","-","py","home",".","run","apple","苹果","图像处理","请","勾勒","我们","需要","$","表示","可视化","ws","轮廓","ros2","使用","'","node","窗口","注意","图片","把","python3","image","install","看到","库","运行","#","(","="," ","框会","object","hcx","这个","指令","前","的","如下","：","sudo","在","绿色","安装","后","处理","可视","_","。","将","cv2","opencv","一个","可以",")","apt","中心点","attention","jpg"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_11","text":"在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ],","text_tokens":["learning","为","imread","180","[","boundingrect","代码","太小","具体","approx","tutorials","噪声","编译","识别","lower","红色","下限","dev","*","def","点画","128","cvtcolor","21","spin","rclpy","选项","机器人","main","if","red","guyuehome","去除","/","从","阈值","bgr2hsv","150","get","src","处理过程","]","中心","for","<","array","出来","255","入口","初始化","上限","一些","import","90","显示","bgr","list","中","例程","和","图像","，","from","none","实现","-","图像识别","py","5","detect","模拟","bin","np","waitkey","主","home","销毁",",","功能",".","示例","等待","entry","加入","init",":","apple","!","概念","苹果","scripts","程序","过程","图像处理","setup","勾勒","我们","color","continue","drawcontours","更多","xy","需要","{","打开","ws","配置","retr","轮廓","ros2","使用","坐标","helloworld","destroyallwindows","info","'","mask","不是","类","y","node","理过","x","hierarchy","计算","in","所在","关于","utf","此处","说明","函数","知道","0","关闭","图片","是","as","env","初始","大家","python3","python","points","class","image","读取","console","对象","numpy","通过","上角","居","来","范围","循环","shutdown","logger","库","@","#","颜色","(","=","inrange","二值化","作者"," ","编写","object","hcx","这个","及","args","8","出现","coding","节点","img","退出","hsv","circle","点","的","高","findcontours","如下","chain","w","：","接口","数值","cnt","关注","destroy","完成","h","包","在","让","www","+","系统","宽","更多要","如何","contours","usr","了","创建","面积","模型","设置","后","文件","重点","\"","像素","处理","得到","转换","_","检测","。","左上角","cv2","将","opencv","一个",")","机器","int","shape","2","并","古月","1","com","效果","进行","jpg","upper","imshow","左上"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_12","text":"用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。","text_tokens":["的","没","接下","太","图像","好像","，","眼睛","识别","不","图片","有","读取","其中","类似","物体","或者","像头","机器人","苹果","问题","接下来","用","动态","颜色","我们","合理","呀","摄像头","。","还","就让","应该","机器","节点","下来","进行","摄像"],"title":"案例四：机器视觉识别节点","title_tokens":["机器","识别","：","节点","视觉","四","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_13","text":"启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 Attention 如果是在虚拟机中操作，需要进行以下设置： 1. 把虚拟机设置为兼容USB3.1； 2. 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。","text_tokens":["的","啦","learning","为","如下","启动","以下","：","node","虚拟机","中","在","中将","，","该","可","注意","虚拟","识别","红色","连接","是","摄像","把","就","设置","终端",".","设备","物体","run","后","像头","运行","驱动","#","摄像头","_","进行","需要"," ","。","至","object","移动","一个","如果","$","可以","操作","实时","2","并且","兼容","ros2","节点","1","usb3.1","成功","attention","；","webcam"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_14","text":"相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ],","text_tokens":["周期","learning","为","180","50","[","boundingrect","代码","太小","approx","噪声","编译","识别","lower","红色","下限","*","def","点画","128","cvtcolor","rclpy","选项","修改","main","if","red","videocapture","guyuehome","去除","/","从","阈值","bgr2hsv","150","get","一帧","true","中心","]","for","<","array","出来","变化","255","入口","初始化","上限","一些","import","90","显示","bgr","list","中","和","图像","，","from","none","-","之前","py","5","detect","waitkey","bin","np","主","销毁",",",".","功能","示例","entry","加入","init",":","!","ok","read","苹果","程序","scripts","图像处理","setup","勾勒","相比","color","continue","drawcontours","需要","xy","while","{","打开","配置","retr","轮廓","ros2","使用","坐标","helloworld","info","'","最大","mask","类","y","node","x","所在","hierarchy","计算","in","utf","说明","函数","知道","0","关闭","图片","是","来源","env","as","初始","python3","points","python","class","image","读取","console","对象","numpy","通过","上角","居","来","像头","范围","shutdown","logger","库","驱动","cap","@","#","颜色","(","=","inrange","二值化","作者"," ","编写","object","及","args","8","出现","coding","节点","img","hsv","circle","点","相机","webcam","的","摄像","高","findcontours","如下","chain","w","：","接口","数值","cnt","destroy","完成","包","h","让","这里","www","+","系统","宽","contours","usr","了","创建","面积","模型","设置","后","文件","像素","\"","处理","得到","转换","摄像头","_","检测","。","左上角","cv2","将","opencv",")","int","shape","2","并且","并","古月","1","com","效果","进行","信息","upper","imshow","ret","左上"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_15","text":"节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息","text_tokens":["的","如下","info","name","list","：","node","查看","常用","命令",">","#","_"," ","$","操作","<","ros2","节点","信息","列表"],"title":"节点命令行操作","title_tokens":["节点","命令行","命令","操作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_16","text":"现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。","text_tokens":["还会","比如","发现","同理","过来","下","改变","就","得","介绍","回到","现在","机器人","细胞","框架图","开始","想要","显示","会","中","电脑","和","图像","，","实现","连接","控制","两个","有","负责","保持","概念","问题","岂","联系","ros","我们","要","保持联系","运动","配置","不是","另外","给","熟悉","a","把","参数","大家","看到","常用","像头","他们","一节"," ","工作","某种","这个","指令","节点","摄像","的","收到","速度","在","这些","系统","b","摇杆","了","最为","发送","之间","后","方法","框架","摄像头","多种","一种","。","将","一个","如果","孤立","应该","机器","机制","并","很","这","没错"],"title":"思考题","title_tokens":["思考","考题","思考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_17","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["nodes","html","https","ros","ros2","org",".","docs","-","/","tutorials",":","humble","understanding","en"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/","text":"话题 节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。 通信模型 以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。 发布/订阅模型 从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。 多对多通信 大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。 异步通信 话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。 消息接口 最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。 案例一：Hello World话题通信 了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 运行效果 启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。 发布者代码解析 我们来看下发布者的实现方法。 程序实现 learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口 订阅者代码解析 我们再来看下订阅者的实现方法。 程序实现 learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。 案例二：机器视觉识别 在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。 运行效果 这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。 发布者代码解析 learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], }, 订阅者代码解析 learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], }, 案例三：机器视觉识别优化 通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub 话题命令行操作 话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息 思考题 关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？ 参考链接 https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["周期","learning","原理","被","为","带宽","代码","统一","太小","词","approx","下","噪声","编译","lower","似乎","那","得","点画","模块化","128","更换","本身","一篇","好","拍摄","if","videocapture","去除","listener","阈值","bgr8","秒","完全","<","做","成功","初始化","区分","独立","无法","进一步","和","图像","感兴","from","以上","一句","编程语言","也","之前","5","控制","detect","有","np","传递","么","写","当然",":","!","概念","积木","什么样","subscription","接下来","类型","图像处理","setup","勾勒","我们","docs","color","需要","不知","上","{","$","换","运动","配置","保证","放入","retr","轮廓","多个","优化","转化","之后","思想","cvbridge","什么","优先级","基于","目标","'","不是","打","不然","hierarchy","in","另外","数据类型","基本","叫","链接","杂志","大家","python3","用户","image","感觉","随处","移植性","中是","居","来","shutdown","换成","logger","一次","@","("," ","object","多","一下","输出","及","谁","8","usb","逻辑","等等","第二","webcam","中文","publish","findcontours","订阅","魔性","符合","10","逻辑性","h","命令行","这些","这里","data","publisher","数据","描述","“","名","摇杆","了","设置","才能","模型","视觉","转化成","后","__","i","用","可视","长度","org","想象","_","左上角","将","不太","如果","应该","方式","并","知识","apt","肯定","信息","imshow","en","第二个","}","以下","异步","对于","已","解析","但","还有","它","查看","不过","html","发出","通信","”","更好","说干就干","spin","编程","机器人","main","流程","既然","二个","率","/","感兴趣","这样","get","日志","操作","通信模型","]","变化","稍后","做成","角度","第一次","语言","视频","几乎","是不是","标准","但是","会","bgr","公众","none","receiving","后缀","需求","实现","父类","两个","方向","bin","来看","销毁",",","等待","entry","微信","类似","物体","to","拼接","std","各种","read","联系","continue","没有","understanding","打开","报纸","第一个","echo","ros2","感器","优先","frame","helloworld","建议","过瘾","渲染","无论","字符","info","y","callback","x","个","计算","给","s","万缕","video","函数","听","是","env","因为","已经","python","设备","type","还是","读取","互相","很多","某些","通过","消息","不行","范围","常用","联系方式","移植","cap","#","仔细","以","编写","一步","据传","这个","coding","自己","hsv","world","高","控制指令","name","没","数值","包含","让","destroy","所谓","sudo","合适","heard","模块","软件","几个","一般","周期性","排版","raw","contours","兴趣","安装","创建","面积","间","英文","、","方法","较强","0.1","单向","话题","更","来讲","。","cv2","适合","在生活中","号","可以","2","就是","并且","dds","1","自然","com","提示","这","没错","ret","做到","比如","啦","启动","之为","hz","太","cv","publishing","tutorials","分析","特性","总结","每换","3","0.5","协议","考题","重要","呢","哪里","def","同学","同样","修改","只","red","guyuehome","呀","了解","成","时候","此时","一帧","true","开始","出来","解","255","想要","二","上限","显示","不变","list","化成","举","先","一份","即可","该","桥梁","队列","块","-","字符串","例子","出去","waitkey","主","数据结构","示例","init","run","sub","保持","发送数据","命令","scripts","问题","ros","者","频率","humble","rgb","可视化","msgs","比方","使用","定义","固定","坐标","称之为","传递数据","topic","作为","这种","的话","类","所在","叫做","数量","平时","挺","与","接下","定时器","timer","格式","第一","一行","as","把","到","string","一","console","内","install","numpy","exe","只要","库","一样","subscribernode","每","\\","=","inrange","直接","某种","无关","单位","实时","args","img","讲","退出","精简","chatter","circle","阅读","像","w","完成","数据传输","包","必然","+","各样","长宽","看","回调","监控","是从","所有","继续","发送","讲解","（","理解","采集","\"","处理","得到","转换","说","每个","）","接收数据","随处可见","就要","一种","publishernode","检测","自行",")","机器","bridge","关系","古月","某","发布","效果","左上","并不知道","180","接收","程序实现","画面","pub","[","boundingrect","super","可见","成为","硬件","识别","红色","下限","满足","传感器","就","*","焕然","最后","文章","进入","终端","cvtcolor","rclpy","%","选项","复用","现在","千丝","？","对劲","从","bgr2hsv","150","imagesubscriber","中心","再","for","array","cam","入口","你","对","用于","一些","import","90","值","中","例程","！","好像","不能","，","最","想下","py","一新","组织","听说","虽然","分别","self","功能",".","imagepublisher","人","加入","填充","imgmsg","为例","苹果","topics","程序","https","过程","存在","想","drawcontours","xy","名称","要","hello","千丝万缕","通用","mask","node","集成","关于","能够","utf","a","说明","注意","知道","本原","0","传输","他会","参数","class","初始","points","参考","对象","看到","上角","获取","定时","东西","循环","驱动","运行","颜色","指","留","执行","思考题","create","作者","二值化","三","案例","从而","原本","里","指令","节点","名字","转换成","刚才","msg","都","传感","根本","点","相机","其中","的","可移植性","要求","如下","提高","接口定义","chain","：","接口","收到","复杂","cnt","焕然一新","又","在","基本原理","设计","bw","生活","www","发布者","系统","宽","另","不","报社","如何","b","usr","任何","结构","思考","未来","可能","之间","唯一","是否","文件","像素","一定",">","组成","小编","可移植","各种各样","opencv","一个","还","耦","sensor","int","shape","下来","开发","对应","进行","接口协议","关闭","upper","列表"],"title":"话题","title_tokens":["话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_1","text":"节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。","text_tokens":["的","独立","会","不是","但","这些","，","它","万缕","实现","桥梁","最","各样","数据","是","有","重要","传递","了","功能","间","之间","机器人","各种","联系方式","联系","千丝","话题","一种"," ","各种各样","。","机器","方式","千丝万缕","就是","并","节点","传递数据","其中"],"title":"话题","title_tokens":["话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_2","text":"以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。","text_tokens":["之为","硬件","查看","它","就","拍摄","机器人","？","从","这样","此时","做","视频","是不是","显示","中","图像","，","桥梁","实现","两个","有","方向","传递","功能","为例","ros","存在","我们","想","上","要","可视化","称之为","渲染","作为","不是","给","a","传输","是","大家","到","设备","用户","获取","驱动","以"," ","据传","某种","一下","这个","实时","节点","相机","的","数据传输","必然","在","数据","监控","b","了","才能","之间","得到","可视","话题","。","将","一个","可以","机器","方式","关系","某","信息","这","没错"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_3","text":"从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。","text_tokens":["比如","接收","之为","可见","成为","它","特性","”","就","呢","文章","本身","好","机器人","/","？","感兴趣","从","成","这样","角度","对","会","无法","和","公众","，","感兴","实现","也","有","出去","组织","来看","微信","类似","发送数据","者","类型","需要","名称","没有","报纸","比方","使用","之后","什么","固定","称之为","基于","的话","叫做","打","另外","平时","数据类型","叫","格式","杂志","传输","是","把","他会","大家","到","对象","随处","居","每"," ","据传","这个","节点","名字","等等","都","的","要求","订阅","数据传输","收到","生活","发布者","数据","看","排版","是从","“","兴趣","了","模型","发送","、","小编","话题","接收数据","随处可见","。","在生活中","一个","号","如果","可以","应该","机器","就是","dds","古月","知识","自然","发布"],"title":"发布/订阅模型","title_tokens":["模型","订阅","发布","/"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_4","text":"大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。","text_tokens":["被","画面","之为","3","通信","似乎","机器人","通信模型","再","对","是不是","区分","公众","和","，","该","想下","也","控制","有","人","ros","者","存在","我们","要","报纸","多个","优先","优先级","建议","称之为","不是","个","不然","数量","挺","注意","杂志","知道","听","是","因为","大家","还是","很多","东西","一样","仔细"," ","多","一下","这个","里","谁","指令","节点","的","订阅","控制指令","魔性","这些","发布者","不","摇杆","了","模型","可能","发送","唯一","、","每个","话题","想象","。","一个","如果","号","可以","机器","2","并","1","发布","没错"],"title":"多对多通信","title_tokens":["多","对","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_5","text":"话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。","text_tokens":["周期","比如","并不知道","异步","太","词","还有","特性","发出","通信","传感器","就","那","文章","同学","一篇","修改","？","时候","你","第一次","用于","一些","公众","一份","，","也","控制","有","听说","类似","者","不知","运动","报纸","感器","什么","叫做","知道","第一","传输","是","参数","某些","居","只要","一次","指"," ","这个","指令","逻辑","等等","传感","根本","阅读","的","订阅","收到","让","逻辑性","所谓","合适","发布者","数据","不","报社","了","可能","后","较强","用","话题","更","。","适合","一个","号","如果","可以","就是","古月","某","发布","这"],"title":"异步通信","title_tokens":["异步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_6","text":"最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。","text_tokens":["比如","之为","统一","通信","就","最后","得","编程","机器人","既然","成","这样","语言","标准","会","值","中","和","图像","不能","，","后缀","块","编程语言","也","有","数据结构",".","概念","拼接","积木","各种","者","ros","我们","rgb","定义","称之为","与","格式","传输","是","通过","消息","一样","进行"," ","据传","无关","节点","等等","msg","都","像","的","中文","订阅","接口定义","接口","数据传输","复杂","包含","在","这里","发布者","系统","数据","描述","长宽","各样","了","结构","英文","、","文件","理解","像素","组成","说","每个","话题","一种","自行","。","各种各样","一个","可以","机器","方式","发布","对应"],"title":"消息接口","title_tokens":["接口","消息"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#hello-world","text":"了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。","text_tokens":["的","啦","world","原理","周期","字符","标准","订阅","接收","中","例程","接下","代码","基本原理","基本","，","发布者","本原","字符串","”","是","“","了","创建","string","到","还是","发送","消息","来","接下来","类型","ros","者","我们","话题","就要"," ","编写","。","了解","从","一个","这个","从而","hello","开始","再","下来","定义","发布","chatter"],"title":"案例一：Hello World话题通信","title_tokens":["world","hello","通信","：","话题","一"," ","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_7","text":"启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。","text_tokens":["的","topic","learning","第二个","world","订阅","字符","启动","：","pub","收到","，","该","发布者","第一","数据","字符串","也","”","“","终端","run","看到","sub","消息","同样","循环","运行","者","二个","频率","话题","_","以"," ","。","一个","$","可以","hello","第一个","ros2","节点","发布","第二","helloworld","几乎"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_8","text":"我们来看下发布者的实现方法。","text_tokens":["的","。","方法","来看","我们","发布","下","发布者","实现"],"title":"发布者代码解析","title_tokens":["代码","发布者","解析","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_9","text":"learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], },","text_tokens":["周期","learning","为","}","pub","[","super","代码","publishing","编译","0.5","”","*","def","spin","rclpy","%","选项","main","guyuehome","/","get","日志","秒","]","入口","初始化","import","中","，","from","none","父类","-","队列","字符串","py","bin","主","销毁","self",".",",","示例","等待","功能","加入","entry","init","填充",":","!","std","scripts","程序","类型","setup","需要","{","hello","打开","配置","ros2","msgs","helloworld","topic","字符","'","info","类","callback","node","定时器","s","utf","timer","说明","函数","知道","关闭","env","已经","初始","python3","string","python","class","points","console","对象","消息","居","定时","循环","shutdown","logger","库","@","#","(","=","执行","进行","create","作者"," ","编写","单位","输出","args","8","coding","节点","msg","退出","chatter","点","world","的","publish","如下","name","10","：","完成","接口","包","destroy","让","www","data","发布者","publisher","系统","数据","回调","“","名","usr","设置","创建","、","（","后","文件","\"","__","长度","话题","_","）","publishernode","一个",")","古月","并","com","发布","提示","信息"],"title":"程序实现","title_tokens":["程序实现","实现","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_10","text":"对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口","text_tokens":["如下","：","接口","，","以上","分析","发布者","实现","初始","销毁","创建","想要","对象","填充","编程","消息","程序","流程","我们","话题"," ","一个","如果","并","初始化","节点","发布","进行","关闭","对"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_11","text":"我们再来看下订阅者的实现方法。","text_tokens":["的","。","方法","订阅","者","来看","再","我们","下","实现"],"title":"订阅者代码解析","title_tokens":["代码","解析","者","订阅"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_12","text":"learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], },","text_tokens":["learning","}","pub","[","super","代码","编译","”","*","def","spin","rclpy","%","选项","main","guyuehome","listener","/","get","日志","]","入口","初始化","对","标准","import","，","from","none","父类","-","队列","py","bin","主","销毁","self",".",",","示例","等待","功能","加入","entry","init",":","!","sub","std","scripts","程序","subscription","者","类型","setup","需要","{","hello","打开","配置","ros2","msgs","定义","helloworld","topic","info","'","类","callback","node","s","utf","说明","函数","知道","关闭","env","初始","python3","string","python","class","points","console","对象","消息","居","循环","shutdown","logger","库","subscribernode","@","#","(","\\","=","执行","create","作者"," ","编写","输出","args","8","coding","节点","msg","退出","chatter","点","world","的","如下","订阅","name","10","：","完成","接口","收到","包","destroy","让","heard","www","data","系统","数据","回调","“","名","usr","设置","创建","、","（","后","文件","\"","__","处理","i","长度","话题","_","）","一个",")","古月","并","com","提示","进行","信息"],"title":"程序实现","title_tokens":["程序实现","实现","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_13","text":"对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。","text_tokens":["world","啦","的","如下","订阅","：","接口","例程","接下","，","以上","下","分析","实现","函数","数据","之前","不","回调","通信","初始","大家","销毁","创建","继续","视觉","想要","对象","编程","好","程序","流程","处理","一定","者","接下来","我们","话题"," ","。","一个","如果","还","hello","机器","并","初始化","节点","下来","优化","进行","基于","关闭","对","过瘾"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_14","text":"在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。","text_tokens":["的","周期","但是","没","中","对于","和","图像","在","做到","，","模块","即可","实现","识别","红色","数据","传输","是","两个","更好","虽然","了","功能","模块化","间","视觉","物体","讲解","通过","概念","机器人","问题","程序","过程","驱动","联系","我们","话题","来讲","。","没有","将","一个","这个","机器","方式","就是","并且","并","节点","开发","做成","对","相机"],"title":"案例二：机器视觉识别","title_tokens":["机器","识别","：","视觉","二","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_15","text":"这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。","text_tokens":["啦","learning","第二个","启动","以下","pub","下","识别","红色","就","更好","说干就干","终端","模块化","更换","好","修改","只","二个","？","完全","标准","不变","图像","先","，","即可","实现","两个","来看","分别","功能","物体","run","保持","sub","ros","我们","需要","要","$","保证","放入","第一个","ros2","定义","思想","topic","这种","第一","是","内","移植性","中是","消息","看到","范围","驱动","移植","运行"," ","这个","节点","第二","相机","webcam","的","可移植性","订阅","在","设计","模块","软件","另","如何","了","未来","视觉","话题","可移植","_","。","将","一个","如果","可以","并","效果","发布"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_16","text":"learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], },","text_tokens":["周期","learning","为","}","pub","[","super","代码","cv","publishing","编译","*","def","spin","rclpy","选项","main","if","videocapture","guyuehome","/","bgr8","get","日志","一帧","true","秒","]","成功","稍后","入口","视频","初始化","用于","import","图像","，","from","none","父类","-","队列","py","bin","主","imagepublisher","self",".",",","示例","等待","销毁","功能","加入","init","entry",":","imgmsg","!","to","sub","read","scripts","程序","ros","类型","图像处理","setup","需要","{","打开","配置","ros2","msgs","cvbridge","frame","helloworld","topic","'","info","类","callback","node","与","定时器","utf","timer","说明","video","函数","知道","0","关闭","env","已经","初始","python3","class","python","设备","points","image","读取","console","对象","消息","居","定时","循环","shutdown","换成","logger","库","驱动","cap","@","#","(","=","执行","进行","create","作者"," ","编写","单位","输出","args","8","coding","节点","转换成","msg","退出","点","相机","webcam","的","publish","如下","name","10","：","完成","接口","包","destroy","让","www","发布者","publisher","系统","回调","raw","名","usr","设置","创建","、","（","后","文件","采集","\"","__","处理","0.1","转换","长度","话题","_","）","将","cv2","opencv","一个","号","如果",")","sensor","bridge","古月","并","com","发布","提示","信息","ret"],"title":"发布者代码解析","title_tokens":["代码","发布者","解析","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_17","text":"learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], },","text_tokens":["learning","为","180","}","pub","[","boundingrect","super","已","代码","太小","cv","approx","噪声","编译","lower","红色","下限","*","def","点画","进入","128","cvtcolor","spin","rclpy","选项","main","if","red","guyuehome","去除","listener","/","从","阈值","bgr2hsv","150","bgr8","get","日志","imagesubscriber","中心","]","for","<","array","出来","255","入口","初始化","上限","用于","一些","import","90","显示","bgr","list","化成","中","和","图像","，","from","none","receiving","父类","-","队列","py","5","detect","waitkey","bin","np","主","销毁",",",".","self","示例","等待","功能","加入","entry","init",":","imgmsg","!","sub","to","苹果","scripts","程序","subscription","ros","类型","图像处理","者","勾勒","setup","color","continue","drawcontours","需要","xy","{","打开","配置","retr","轮廓","ros2","msgs","转化","使用","cvbridge","frame","坐标","helloworld","topic","'","info","mask","y","类","callback","node","x","所在","hierarchy","计算","in","与","utf","说明","video","函数","知道","0","关闭","as","env","class","python3","初始","python","points","image","互相","console","对象","numpy","上角","消息","居","范围","循环","shutdown","logger","库","@","#","颜色","(","=","inrange","进行","create","作者"," ","二值化","编写","object","及","输出","args","8","coding","：","节点","img","msg","退出","hsv","circle","点","webcam","的","高","findcontours","如下","订阅","name","10","chain","w","接口","数值","cnt","destroy","完成","包","h","让","www","+","data","系统","宽","回调","raw","contours","名","usr","设置","创建","面积","模型","、","转化成","（","后","文件","像素","\"","__","处理","得到","转换","长度","话题","_","）","检测","左上角","将","cv2","opencv","一个",")","sensor","bridge","shape","2","int","古月","1","并","com","效果","提示","信息","upper","imshow","左上"],"title":"订阅者代码解析","title_tokens":["代码","解析","者","订阅"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_18","text":"通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub","text_tokens":["learning","代码","还有","不过","识别","每换","协议","似乎","就","焕然","哪里","得","好","复用","现在","只","呀","率","对劲","？","这样","解","变化","做","cam","你","对","是不是","标准","进一步","中","例程","！","图像","好像","，","一句","-","也","一新","有","么","写","功能","当然","run","sub","什么样","ros","我们","需要","humble","$","换","ros2","使用","什么","目标","无论","topic","通用","不是","node","集成","一行","是","大家","到","感觉","install","常用","通过","不行","exe","只要","换成","驱动"," ","一步","直接","原本","usb","指令","自己","节点","刚才","精简","都","相机","webcam","的","提高","符合","接口","焕然一新","让","又","sudo","软件","一般","不","任何","安装","了","可能","视觉","得到","用","话题","_","不太","。","一个","耦","可以","apt","发布","这","接口协议"],"title":"案例三：机器视觉识别优化","title_tokens":["机器","识别","：","优化","视觉","三","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_19","text":"话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息","text_tokens":["的","topic","如下","info","带宽","name","list","：","pub","hz","bw","data","查看","数据","传输","type","常用","消息","命令",">","#","频率","话题","_"," ","$","操作","echo","<","ros2","msg","发布","信息","列表"],"title":"话题命令行操作","title_tokens":["命令行","话题","命令","操作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_20","text":"关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？","text_tokens":["的","周期","原理","这种","无法","：","对于","完成","数据传输","复杂","举","和","关于","给","能够","，","这里","需求","特性","实现","系统","几个","周期性","数据","考题","传输","通信","是","满足","所有","就","例子","呢","传递","大家","思考","到","是否","方法","机器人","单向","我们","话题","留","来讲","思考题","？","适合","据传","一个","机器","讲","肯定"],"title":"思考题","title_tokens":["思考","考题","思考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_21","text":"https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["topics","html","https","ros","ros2","org",".","docs","-","/","tutorials",":","humble","understanding","en"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/","text":"服务 话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。 通信模型 在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。 客户端/服务器模型 从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。 同步通信 这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。 一对多通信 比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。 服务接口 和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。 案例一：加法求解器 大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 运行效果 我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3 客户端代码解析 我们来看下客户端的实现方法。 程序实现 learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口 服务端代码解析 至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。 程序实现 learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口 案例二：机器视觉识别 好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。 运行效果 此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client 客户端代码解析 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], }, 服务端代码解析 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], }, 服务命令行操作 服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求 思考题 话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。 参考链接 https://docs.ros.org/en/humble/Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["周期","—","为","原理","learning","50","绝大","代码","太小","具体","approx","下","噪声","编译","法器","lower","软硬件","点画","128","好","或者","拿到","if","去除","except","listener","阈值","bgr8","完全","<","position","数据通","成功","初始化","sys","无法","和","图像","越快","以上","from","加法器","之前","也","done","5","detect","有","控制","e","np","传递",":","!","问","subscription","接下来","类型","图像处理","setup","至于","勾勒","我们","docs","color","同步性","需要","不知","上","sec","{","$","运动","配置","尽快","retr","轮廓","多个","转化","之后","cvbridge","interface","什么","绝大部分","目标","'","大部分","不是","hierarchy","形式","in","宕机","另外","浏览器","数据类型","基本","接口类型","objectclient","链接","位置","大家","python3","比比","image","有所","居","shutdown","logger","一次","@","(","判断"," ","object","多","输出","及","r","最新","8","usb","of","等等","应用","第二","相对","；","findcontours","订阅","反应","10","一问一答","命令行","h","这些","data","数据","客户","“","名","了","设置","模型","视觉","准备","转化成","后","越好","__","长度","org","合理","_","左上角","将","如果","应该","方式","并","上述","后者","信息","我","imshow","en","第二个","}","异步","反馈","解析","转圈","已","但","打印","认为","还有","查看","不过","html","通信","”","future","spin","向","介绍","编程","机器人","main","流程","发","二个","而是","/","这样","get","async","操作","日志","通信模型","]","打印输出","界面","标准","但是","会","once","传入","bgr","电脑","none","receiving","需求","实现","父类","两个","bin","return","来看","销毁","等待",",","entry","类似","物体","跟随","to","各种","岂","continue","随时","没有","understanding","break","客户端","打开","第一个","ros2","处","半天","感器","frame","else","wait","adderserver","info","y","越快越好","有点","callback","x","计算","给","video","函数","是","adderclient","env","已经","python","type","还是","互相","很多","常用","通过","消息","某些","范围","#","编写","这个","服务","出现","coding","not","回想","准确","hsv","里程","服务端","高","控制指令","name","数值","时","exception","destroy","访问","让","incoming","假设","一般","周期性","请求","raw","contours","核心","创建","面积","务器","封装","、","当前","方法","通信接口","单向","services","话题","更","。","cv2","适合","在生活中","可以","两种","2","就是","并且","1","很","com","提示","invalid","根据","比如","啦","服务器发送","d","自定义","启动","之为","cv","command","tutorials","分析","总结","网站","add","3","考题","用到","结果","def","result","同样","当","red","guyuehome","了解","成","时候","此时","true","开始","出来","255","想要","二","上限","显示","...","list","化成","然后","返回","应答","域名","队列","-","send","大部","出去","waitkey","服务器","request","主","学习","三个","示例","waiting","init","run","sub","ok","命令","scripts","ros","者","available","频率","相比","针对","humble","msgs","定义","使用","坐标","称之为","传递数据","时间","这种","放到","类","所在","叫做","圈圈","接下","与","第一","as","到","一","1.0","console","numpy","call","exe","srv","库","一样","转圈圈","一直","每","\\","=","inrange","args","client","并不需要","img","讲","退出","circle","比比皆是","w","完成","包","+","接口类","看","回调","更加","继续","最为","发送","加法","（","\"","处理","变成","得到","转换","本","）","就要","一种","检测","加数","机制","机器",")","bridge","有所不同","古月","发布","效果","前者","左上","并不知道","180","接收","程序实现","[","后续","super","boundingrect","页面","成为","硬件","adder","识别","场景","红色","下限","满足","传感器","就","*","进入","终端","一起","cvtcolor","rclpy","%","选项","现在","简称","状态","从","bgr2hsv","150","imagesubscriber","中心","for","某个","array","cam","入口","你","对","用于","网页","import","90","一些","target","中","上层","例程","好像","，","经常","部分","常见","一对","图像识别","py","跟踪","分别","self",".","功能","查询","人","加入","imgmsg","timeout","苹果","浏览","程序","https","服务器端","过程","存在","雷达","drawcontours","xy","getobjectposition","while","要","简单","求和","response","service","通用","mask","node","n","集成","软硬","utf","sum","a","说明","argv","知道","0","传输","class","不好","初始","points","官方","try","繁杂","参考","对象","看到","上角","获取","里程计","循环","驱动","运行","附近","提供","颜色","执行","思考题","这么","作者","create","二值化","案例","按照","指令","failed","节点","刚才","cs","msg","展现","那有","都","two","自定","器","相机","其中","的","点","传感","要求","如下","课程","chain","：","网络","接口","收到","cnt","求解","数据通信","等","在","设计","生活","www","objectx","发布者","系统","宽","不","b","usr","objecty","again","思考","可能","之间","是否","所以","唯一","提到","发给","文件","addtwoints","像素",">","同步","server","正常","opencv","一个","希望","答","不同","int","sensor","shape","下来","ints","开发","进行","关闭","upper","列表"],"title":"服务","title_tokens":["服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_1","text":"话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。","text_tokens":["的","—","这种","订阅","你","异步","无法","收到","另外","，","发布者","实现","知道","数据","传输","通信","学习","一起","类似","之间","是否","常用","消息","方法","问","ros","单向","者","本","同步","我们","话题","一种"," ","。","将","可以","机制","服务","答","多个","节点","讲","使用","发布","准确","效果","我"],"title":"服务","title_tokens":["服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_2","text":"在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。","text_tokens":["周期","比如","反馈","成为","识别","红色","通信","或者","机器人","发","而是","这样","时候","此时","通信模型","你","对","中","上层","然后","和","图像","应答","好像","，","实现","之前","图像识别","查询","物体","跟随","问","ros","我们","频率","需要","运动","尽快","使用","service","目标","这种","形式","另外","传输","是","位置","到","通过","有所","一样","驱动","附近","一直","这么"," ","按照","这个","服务","最新","并不需要","节点","应用","相机","其中","的","高","订阅","课程","在","数据","请求","继续","了","模型","发送","发给","变成","得到","单向","话题","更","。","一个","可以","希望","机器","不同","答","机制","有所不同","并","发布","信息","我"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_3","text":"从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。","text_tokens":["的","比如","为","网页","这种","会","服务器发送","叫做","反馈","收到","形式","电脑","浏览器","返回","在","具体","应答","，","生活","经常","域名","页面","实现","常见","网站","数据","客户","也","请求","通信","服务器","就","来看","模型","务器","发送","向","某些","通过","或者","问","简称","浏览","处理","各种","服务器端","我们","进行","/"," ","需要","。","针对","上","从","在生活中","客户端","时候","机制","服务","答","此时","操作","就是","某个","并","之后","cs","很","你","展现","信息","我"],"title":"客户端/服务器模型","title_tokens":["客户","客户端","服务","服务器","模型","/","务器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_4","text":"这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。","text_tokens":["的","要求","接收","越快越好","反应","之为","网络","圈圈","中","转圈","宕机","浏览器","越快","在","应答","，","假设","一般","客户","也","是","通信","服务器","不好","了","到","可能","务器","所以","通过","或者","越好","浏览","过程","服务器端","同步","转圈圈","一直","我们","相比","话题","判断","状态","。","没有","客户端","这个","可以","服务","半天","你","那有","信息","称之为"],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_5","text":"比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。","text_tokens":["的","比如","但是","中","访问","但","，","网站","客户","不","是","通信","服务器","大家","模型","人","务器","唯一","看到","所以","同样","居","一样","服务器端","存在","每","。","没有","一个","客户端","这个","可以","服务","通信模型","完全","多个","古月","并","界面","都"],"title":"一对多通信","title_tokens":["多","通信","一对"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_6","text":"和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。","text_tokens":["的","比如","标准","会","中","反馈","后续","和","给","这些","在","，","还有","部分","数据","也","请求","通信","两个","是","位置","核心","传递","了","大家",".","还是","类似","介绍","消息","文件","方法","命令","苹果","srv","变成","一样","ros","我们","话题"," ","。","要","一个","服务","定义","使用","msg","坐标","传递数据"],"title":"服务接口","title_tokens":["接口","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_7","text":"大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。","text_tokens":["啦","反馈","代码","add","通信","”","结果","就","现在","当","了解","从","成","开始","想要","对","例程","应答","，","实现","也","两个","有","出去","服务器","功能","服务器端","ros","接下来","我们","需要","针对","客户端","简单","求和","之后","计算","接下","给","基本","是","大家","官方","还是","通过","提供"," ","编写","这个","服务","节点","two","相对","器","的","时","收到","求解","数据","客户","请求","“","了","发送","务器","封装","加法","后","得到","_","就要","。","将","加数","一个","可以","应该","并","下来","ints","进行"],"title":"案例一：加法求解器","title_tokens":["：","器","求解","一","加法","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_8","text":"我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3","text_tokens":["的","learning","原理","如下","第二个","传入","启动","例程","代码","service","，","下","实现","adder","第一","数据","客户","看","请求","3","两个","是","结果","终端","等待","功能","一起","发送","run","运行","提供","二个","我们","_"," ","server","。","加数","一个","客户端","这个","求和","操作","服务","$","第一个","client","并且","2","并","节点","ros2","第二","服务端"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_9","text":"我们来看下客户端的实现方法。","text_tokens":["的","。","客户","客户端","方法","来看","我们","下","实现"],"title":"客户端代码解析","title_tokens":["代码","客户","解析","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_10","text":"learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], },","text_tokens":["learning","d","自定义","启动","异步","接收","}","[","反馈","super","打印","代码","adder","法器","add","编译","*","def","future","result","spin","rclpy","%","选项","main","if","guyuehome","except","/","get","async","]","for","成功","打印输出","入口","初始化","sys","import","once","...","，","from","none","加法器","-","父类","send","py","done","两个","bin","服务器","request","e","销毁","self",".",",","示例","等待","功能","waiting","加入","init","entry",":","!","timeout","ok","scripts","程序","服务器端","类型","available","setup","需要","while","sec","{","break","客户端","response","打开","配置","ros2","定义","interface","service","else","wait","'","info","类","node","计算","接口类型","utf","sum","a","说明","argv","函数","知道","关闭","adderclient","as","env","class","python3","初始","python","try","points","1.0","console","对象","call","居","循环","shutdown","srv","logger","库","运行","一次","@","#","(","=","执行","create","作者"," ","编写","输出","服务","args","r","client","8","coding","not","failed","节点","of","自定","two","点","的","如下","name","：","完成","接口","收到","exception","destroy","包","让","www","+","接口类","系统","数据","客户","请求","名","usr","b","again","创建","设置","发送","务器","是否","加法","（","后","文件","addtwoints","\"","__","处理","）","_","将","正常","加数","一个",")","int","2","方式","古月","1","并","ints","com","进行","信息"],"title":"程序实现","title_tokens":["程序实现","实现","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_11","text":"对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口","text_tokens":["如下","：","接口","应答","，","以上","分析","实现","数据","客户","请求","服务器","初始","销毁","创建","等待","想要","发送","对象","务器","编程","程序","流程","服务器端","我们"," ","一个","如果","客户端","服务","并","初始化","节点","进行","关闭","对"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_12","text":"至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。","text_tokens":["的","并不知道","订阅","有点","中","，","实现","知道","函数","数据","也","请求","回调","通信","用到","服务器","了","类似","务器","服务器端","者","至于","话题","不知","。","机制","服务","出现","什么","时间"],"title":"服务端代码解析","title_tokens":["代码","服务端","解析","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_13","text":"learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], },","text_tokens":["learning","d","自定义","}","反馈","[","super","代码","adder","法器","add","编译","结果","*","def","spin","rclpy","%","选项","main","guyuehome","/","get","日志","]","入口","初始化","对","import","中","应答","，","from","none","加法器","-","父类","py","bin","服务器","request","return","主","销毁","self",".","功能","示例",",","等待","加入","entry","init",":","!","scripts","程序","类型","setup","需要","{","response","求和","打开","配置","ros2","定义","interface","service","adderserver","'","放到","info","类","callback","node","计算","n","接口类型","utf","sum","a","说明","函数","知道","关闭","env","已经","初始","python3","class","python","points","console","对象","居","循环","shutdown","srv","logger","库","@","#","提供","(","\\","=","执行","create","作者"," ","编写","输出","服务","args","8","client","coding","节点","退出","自定","two","点","的","如下","name","：","完成","接口","收到","包","destroy","让","incoming","www","+","接口类","系统","数据","请求","回调","名","usr","b","设置","创建","务器","加法","、","（","后","文件","addtwoints","\"","__","处理","）","_","server","将",")","古月","并","ints","com","提示","进行","信息"],"title":"程序实现","title_tokens":["程序实现","实现","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_14","text":"对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口","text_tokens":["如下","：","接口","反馈","应答","，","以上","分析","实现","函数","客户","回调","结果","服务器","初始","销毁","创建","想要","务器","对象","向","编程","通过","程序","流程","服务器端","我们"," ","一个","如果","客户端","服务","并","初始化","节点","处","进行","关闭","对","服务端"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_15","text":"好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。","text_tokens":["的","啦","目标","不是","求解","，","下","实现","识别","知道","通信","已经","位置","更加","了","视觉","物体","加法","好","提到","通过","当","岂","流程","我们","合理","需要","。","时候","机制","服务","回想","刚才","器"],"title":"案例二：机器视觉识别","title_tokens":["机器","识别","：","视觉","二","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_16","text":"此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client","text_tokens":["的","目标","learning","会","订阅","启动","：","node","然后","时","集成","图像","认为","，","识别","数据","客户","请求","是","跟踪","有","服务器","位置","就","三个","分别","了","终端","视觉","务器","对象","发送","run","准备","当前","拿到","机器人","当","exe","服务器端","驱动","一次","运行","提供","我们","_","随时"," ","需要","。","server","object","一个","客户端","$","可以","此时","服务","机器","运动","出现","并且","usb","client","上述","节点","ros2","cam","发布","service","；","相机","根据"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_17","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], },","text_tokens":["learning","d","自定义","}","[","super","代码","编译","识别","adder","*","def","future","result","spin","rclpy","%","选项","main","if","guyuehome","except","/","get","async","true","]","for","position","入口","初始化","import","once","...","target","应答","，","from","none","父类","-","send","py","done","bin","request","e","销毁","等待",".","self","示例",",","功能","waiting","加入","init","entry",":","!","timeout","ok","scripts","程序","available","setup","需要","getobjectposition","while","sec","{","break","response","打开","配置","ros2","定义","interface","service","else","wait","目标","'","info","y","类","node","x","n","utf","说明","objectclient","知道","as","env","位置","初始","python3","class","python","try","points","1.0","console","对象","call","居","shutdown","srv","logger","库","@","#","(","\\","=","create","作者"," ","编写","object","服务","args","r","client","8","coding","not","failed","节点","of","自定","点","的","如下","name","：","完成","接口","包","exception","destroy","让","www","系统","请求","usr","again","创建","设置","后","文件","\"","__","_","server",")","古月","并","com","进行","关闭"],"title":"客户端代码解析","title_tokens":["代码","客户","解析","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_18","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], },","text_tokens":["learning","为","d","180","自定义","50","}","[","boundingrect","super","已","反馈","代码","太小","cv","approx","command","噪声","编译","识别","lower","红色","下限","adder","*","def","点画","进入","invalid","128","cvtcolor","spin","rclpy","%","选项","main","if","red","guyuehome","去除","listener","/","从","阈值","bgr2hsv","150","bgr8","get","日志","imagesubscriber","true","中心","]","for","position","array","<","出来","255","入口","初始化","上限","用于","对","一些","import","90","显示","bgr","list","target","中","化成","和","图像","，","from","none","receiving","父类","-","队列","py","5","detect","waitkey","bin","np","服务器","request","return","主","销毁",",",".","self","示例","等待","功能","加入","物体","init","entry",":","imgmsg","!","sub","to","苹果","scripts","程序","subscription","ros","类型","图像处理","者","勾勒","setup","color","continue","drawcontours","需要","xy","getobjectposition","{","response","打开","配置","retr","轮廓","ros2","msgs","转化","定义","使用","cvbridge","interface","frame","service","坐标","else","目标","'","info","mask","y","类","callback","node","x","所在","hierarchy","计算","in","与","n","接口类型","utf","说明","video","函数","知道","0","关闭","as","env","已经","class","python3","初始","python","points","image","互相","console","对象","numpy","上角","消息","居","范围","循环","shutdown","srv","logger","库","@","#","提供","颜色","(","\\","=","inrange","执行","create","作者"," ","二值化","进行","编写","object","及","输出","服务","args","8","client","coding","：","节点","img","msg","退出","自定","hsv","circle","点","的","高","findcontours","如下","订阅","name","10","chain","w","接口","数值","cnt","收到","destroy","完成","h","包","让","www","objectx","+","data","接口类","系统","宽","数据","请求","回调","raw","contours","名","usr","objecty","设置","创建","面积","模型","务器","、","转化成","（","后","文件","像素","\"","__","处理","得到","转换","长度","话题","_","）","检测","server","左上角","将","cv2","opencv","一个",")","sensor","bridge","shape","2","int","古月","1","并","com","效果","提示","信息","upper","imshow","左上"],"title":"服务端代码解析","title_tokens":["代码","服务端","解析","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_19","text":"服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求","text_tokens":["的","如下","name","list","：","数据类型","data","查看","数据","请求","type","发送","常用","call","命令",">","类型","#","_"," ","$","操作","服务","<","ros2","service","列表"],"title":"服务命令行操作","title_tokens":["命令行","命令","操作","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_20","text":"话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。","text_tokens":["周期","比如","自定义","绝大","硬件","场景","识别","不过","通信","满足","传感器","软硬件","机器人","时候","数据通","标准","无法","中","和","图像","，","需求","部分","也","大部","控制","类似","过程","ros","类型","雷达","我们","同步性","针对","感器","定义","绝大部分","目标","大部分","通用","数据类型","软硬","传输","是","位置","到","比比","繁杂","很多","常用","里程计","获取"," ","这个","服务","指令","等等","应用","自定","都","里程","传感","的","高","要求","比比皆是","控制指令","一问一答","接口","数据通信","等","在","设计","这些","周期性","数据","最为","了","视觉","、","方法","通信接口","单向","同步","话题","更","就要","。","适合","两种","机器","开发","后者","前者"],"title":"思考题","title_tokens":["思考","考题","思考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_21","text":"https://docs.ros.org/en/humble/Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["html","https","ros","ros2","org","services",".","docs","-","/","tutorials",":","humble","understanding","en"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/","text":"通信接口 在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。 接口的定义 接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。 ROS通信接口 接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。 语言无关 为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。 标准接口 大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。 案例一：服务接口的定义与使用 了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。 接口定义 在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ... 程序调用 我们在代码中再来重点看下接口的使用方法。 客户端接口调用 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 服务端接口调用 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 案例二：话题接口的定义与使用 话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。 运行效果 现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub 接口定义 在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ... 程序调用 我们在代码中再来重点看下接口的使用方法。 发布者接口调用 learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 订阅者接口调用 learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 接口命令行操作 接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义 参考链接 https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["周期","—","learning","布尔","为","50","代码","方便","太小","具体","approx","下","程序模块","噪声","编译","lower","那","得","点画","128","转","好","或者","if","concepts","像是","去除","except","listener","插头","share","阈值","像素点","bgr8","别人","众多","完全","<","position","文件夹","初始化","区分","度","主程序","转到","和","depend","图像","rosidl","详细","以上","from","一句","无论是","也","之前","done","控制","话","有","detect","e","np","5","传递","涵盖","bool",":","!","概念","什么样","形象","接下来","类型","图像处理","研究","subscription","勾勒","我们","docs","color","小海龟","需要","上","sec","{","$","运动","typec","配置","保证","retr","轮廓","转化","cvbridge","什么","interface","目标","原色","'","不是","键盘","hierarchy","in","另外","约束","接口类型","objectclient","链接","位置","大家","python3","海龟","位","image","随处","居","来","线速度","shutdown","换成","logger","一次","@","他们","("," ","工作","object","多","一下","输出","轮子","最终","及","坐标值","输入输出","r","代码生成","usb","of","到底","8","谁","不用","等等","三原色","应用","第二","；","webcam","publish","findcontours","订阅","符合","10","关注","速度","命令行","h","这些","主要","这里","data","关心","publisher","数据","描述","二维","客户","“","名","了","才能","模型","看看","视觉","action","转化成","后","传输数据","__","int32","长度","org","_","左上角","将","中有","---","and","标值","举个","并","肯定","你来我往","信息","imshow","en","第二个","}","反馈","解析","已","但","打印","匹配","member","还有","它","32","packages","查看","html","通信","”","不管","future","spin","编程","机器人","main","二个","精髓","而是","/","两","这样","get","async","日志","路径","操作","图形","手机","]","每隔","好奇","做成","角度","语言","about","标准","会","once","bgr","电脑","第三","图形化","自言自语","none","receiving","实现","父类","两个","bin","return","销毁","等待",",","类似","物体","to","project","std","动作","各种","种","联系","continue","runtime","没有","break","客户端","表示","打开","第一个","上边","ros2","分成","xml","frame","else","依赖","wait","无论","字符","package","info","y","callback","x","计算","整型","给","video","1s","函数","甚至","是","env","已经","角速度","python","还是","互相","常用","通过","小海","只有","消息","像头","范围","generators","#","看上去","编写","这个","服务","自己","coding","not","准确","造","hsv","服务端","将要","高","txt","name","数值","时","找到","包含","让","exception","destroy","模块","软件","几个","请求","raw","contours","核心","安装","创建","面积","编写程序","务器","build","封装","、","当前","方法","通信接口","单向","三种","话题","摄像头","更","。","cv2","交流","可以","2","就是","并且","件夹","1","内容","很","插座","exec","三原","com","这","提示","invalid","根据","比如","d","自定义","启动","find","之为","cv","更为","command","tutorials","30","用到","结果","重要","呢","def","中间","result","数组","回到","只","red","两者","guyuehome","数","了解","成","interfaces","时候","一帧","此时","true","个人","开始","出来","255","包中","却是","上限","二","显示","...","广泛","list","化成","应答","队列","-","连接","send","字符串","相互","例子","waitkey","default","request","服务器","主","学习","三个","出去","数据结构","示例","包装","waiting","init","run","sub","生成","ok","命令","高效","软件开发","ros","者","available","generate","humble","上去","msgs","定义","使用","建立","固定","坐标","称之为","required","反正","topic","的话","类","所在","标准接口","体","与","接下","第一","use","添加","把","as","到","string","一","1.0","形状","numpy","call","exe","只要","彼此","srv","库","subscribernode","每","\\","自动","=","inrange","直接","20","调用函数","无关","args","就行","client","img","讲","退出","自语","降低","circle","领域","摄像","w","完成","包","show","64","+","接口类","目的","看","回调","由于","继续","最为","讲解","发送","加法","（","理解","cmakelists","\"","single","处理","得到","以及","转换","每个","）","随处可见","检测","一种","objectposition","机制","机器",")","bridge","关系","古月","发布","第三个","由","效果","左上","180","pub","c++","后续","super","进度","有机","[","boundingrect","可见","转到第","硬件","识别","红色","下限","便于","就","*","进入","终端","一起","cvtcolor","rclpy","%","选项","现在","加","各个领域","状态","？","从","bgr2hsv","150","imagesubscriber","中心","再","必须","for","array","某个","cam","入口","编译器","对","define","用于","一些","90","import","值","target","中","例程","，","部分","常见","py","衍生","分别","self",".","功能","人","哪些","查询","imgmsg","timeout","看上","苹果","程序","https","过程","想","drawcontours","xy","重复","getobjectposition","while","用来","要","求和","response","形象化","service","mask","node","各个","n","关于","utf","sum","a","说明","知道","输入","0","传输","参数","class","初始","try","参考","回顾","对象","看到","上角","获取","循环","为了","驱动","运行","提供","颜色","执行","create","作者","二值化","g","案例","里","指令","减少","节点","failed","msg","自定","都","相机","一边","的","如下","接口定义","课程","chain","：","诞生","接口","收到","cnt","有没有","等","在","设计","生活","www","objectx","发布者","系统","宽","布尔值","如何","b","旋转","usr","结构","again","objecty","可能","之间","所以","是否","文件","像素","重点","int64","组成",">","中来","server","micro","调用","正常","opencv","一个","还","不同","希望","sensor","int","shape","group","开发","下来","对应","进行","关闭","upper","列表"],"title":"通信接口","title_tokens":["通信接口","接口","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_1","text":"在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。","text_tokens":["将要","无论","的","—","会","标准","不是","中","接口","后续","自语","让","给","在","自言自语","，","系统","数据","甚至","用到","通信","两个","是","重要","呢","学习","传递","大家","结构","你来我往","还是","人","好","或者","概念","为了","理解","动作","通信接口","ros","我们","话题","更","而是"," ","？","。","一个","多","交流","可以","服务","就是","个人","并","内容","定义","什么","这","都"],"title":"通信接口","title_tokens":["通信接口","接口","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_2","text":"接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。","text_tokens":["比如","之为","反馈","解析","但","代码","匹配","具体","更为","可见","硬件","程序模块","它","通信","结果","就","呢","那","得","一起","编程","好","回到","机器人","加","由","两者","像是","精髓","插头","各个领域","？","像素点","时候","肯定","图形","手机","完全","必须","出来","开始","却是","标准","一些","主程序","值","广泛","中","电脑","图形化","和","图像","，","一句","常见","-","实现","无论是","也","连接","两个","相互","有","控制","例子","话","包装","类似","概念","看上","程序","高效","什么样","软件开发","形象","ros","我们","上","要","上去","形象化","typec","运动","配置","定义","使用","建立","什么","固定","称之为","无论","原色","反正","所在","键盘","各个","关于","给","约束","函数","知道","输入","传输","是","把","角速度","参数","大家","到","还是","形状","随处","常用","通过","只有","像头","线速度","只要","彼此","一次","驱动","运行","提供","每","看上去","他们","进行"," ","编写","直接","工作","g","调用函数","多","这个","输出","服务","输入输出","r","usb","指令","自己","节点","讲","等等","三原色","不用","应用","准确","都","；","相机","领域","的","摄像","符合","诞生","接口","时","包","关注","让","速度","等","在","这些","主要","生活","模块","软件","系统","关心","数据","目的","如何","b","安装","结构","最为","才能","了","编写程序","、","所以","传输数据","像素","通信接口","组成","每个","话题","随处可见","更","摄像头","一种","。","micro","调用","正常","一个","可以","机制","机器","就是","并且","举个","关系","开发","很","插座","内容","发布","三原","这"],"title":"接口的定义","title_tokens":["的","定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#ros","text":"接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。","text_tokens":["的","目标","接口","让","代码","方便","有机","，","便于","也","通信","是","有","核心","分别","到","才能","造","一起","之间","常用","、","通过","动作","各种","程序","种","联系","ros","三种","每","我们","话题","一种"," ","重复","。","别人","可以","轮子","机制","服务","就是","减少","节点","定义","使用","这","降低","依赖"],"title":"ROS通信接口","title_tokens":["通信接口","ros","接口","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_3","text":"为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。","text_tokens":["周期","比如","布尔","c++","反馈","进度","转到第","还有","32","编译","30","通信","”","结果","中间","数组","转","编程","机器人","只","数","两","状态","一帧","此时","开始","每隔","做成","语言","区分","90","度","会","中","转到","和","应答","，","部分","之前","两个","学习","三个","分别","数据结构",".","功能","bool","生成","动作","过程","ros","我们","小海龟","需要","用来","表示","求和","保证","运动","定义","使用","分成","什么","坐标","目标","y","x","整型","体","另外","sum","a","1s","知道","传输","是","到","python","海龟","还是","位","看到","通过","小海","为了","srv","每","自动"," ","20","无关","一下","这个","最终","服务","就行","里","节点","msg","一边","的","10","完成","接口","数值","包含","让","等","这些","设计","在","64","这里","数据","描述","二维","请求","布尔值","由于","“","b","旋转","了","结构","action","、","加法","是否","当前","文件","通信接口","int32","int64","单向","话题","一种","。","将","---","一个","还","可以","不同","机制","机器","对应"],"title":"语言无关","title_tokens":["无关","语言"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_4","text":"大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。","text_tokens":["的","标准","中","接口","找到","给","在","，","几个","系统","呢","大家","了","安装","可能","哪些","看看","涵盖","文件","ros","我们","？","。","share","可以","众多","路径","打开","件夹","到底","好奇","定义","文件夹"],"title":"标准接口","title_tokens":["标准","接口","标准接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_5","text":"了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。","text_tokens":["的","目标","第二个","课程","中","接口","第三","收到","例程","接下","代码","图像","在","，","下","实现","识别","第一","之前","请求","通信","是","有","位置","如何","就","三个","了","查询","视觉","回顾","讲解","对象","发送","封装","概念","来","第三个","通信接口","以及","接下来","驱动","研究","提供","二个","我们","话题","服务端","进行","需要"," ","编写","。","了解","从","这样","一个","时候","可以","服务","机器","第一个","再","节点","下来","定义","使用","角度","发布","第二","相机"],"title":"案例一：服务接口的定义与使用","title_tokens":["的","服务","：","接口","与","定义","使用","一","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_6","text":"在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ...","text_tokens":["learning","为","}","find","反馈","代码","member","编译","packages","通信","就","选项","/","interfaces","get","true","<","编译器","语言","会","...","中","例程","depend","rosidl","，","部分","也","两个","default",".","功能","bool","project","生成","过程","generate","我们","需要","runtime","getobjectposition","{","表示","$","配置","上边","定义","使用","xml","interface","坐标","依赖","required","目标","package","y","的话","x","是","添加","位置","获取","srv","generators","一次","#","(","自动"," ","这个","服务","代码生成","指令","of","服务端","的","txt","接口定义","name","：","完成","接口","包","让","在","了","build","、","后","文件","cmakelists","\"","int32",">","_","。","中有","---","还","不同",")","group","exec","根据"],"title":"接口定义","title_tokens":["定义","接口","接口定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_7","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["的","来","。","看","重点","方法","中","接口","再","我们","代码","使用","在","下"],"title":"程序调用","title_tokens":["调用","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_8","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["learning","d","自定义","super","识别","*","def","future","result","spin","rclpy","%","main","if","guyuehome","except","/","get","async","true","for","position","初始化","import","once","...","target","应答","，","from","none","父类","-","send","py","done","bin","request","e","销毁","等待",".","self","示例",",","waiting","init",":","!","timeout","ok","available","getobjectposition","while","sec","break","response","ros2","定义","interface","service","else","wait","目标","'","info","y","类","node","x","n","utf","说明","objectclient","as","env","位置","初始","python3","class","python","try","1.0","对象","call","居","shutdown","srv","logger","库","@","#","(","\\","=","create","作者"," ","object","服务","args","r","client","8","coding","not","failed","节点","of","自定","的","name","接口","exception","destroy","www","请求","usr","again","创建","\"","__","_",")","古月","并","com","进行","关闭"],"title":"客户端接口调用","title_tokens":["客户","接口","客户端","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_9","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["learning","为","d","180","自定义","50","[","boundingrect","super","已","反馈","太小","cv","approx","command","噪声","识别","lower","红色","下限","*","def","点画","进入","invalid","128","cvtcolor","spin","rclpy","%","main","if","red","guyuehome","去除","listener","/","从","阈值","bgr2hsv","150","bgr8","get","日志","imagesubscriber","true","中心","]","for","position","array","<","出来","255","入口","初始化","上限","用于","对","一些","import","90","显示","bgr","list","target","中","化成","和","图像","，","from","none","receiving","父类","-","队列","py","5","detect","waitkey","bin","np","服务器","request","return","主","销毁",",",".","self","示例","等待","物体","init",":","imgmsg","!","sub","to","苹果","subscription","ros","类型","图像处理","者","勾勒","color","continue","drawcontours","xy","getobjectposition","response","retr","轮廓","ros2","msgs","转化","定义","使用","cvbridge","interface","frame","service","坐标","else","目标","'","info","mask","y","类","callback","node","x","所在","hierarchy","计算","in","与","n","接口类型","utf","说明","video","函数","0","关闭","as","env","已经","class","python3","初始","python","image","互相","对象","numpy","上角","消息","居","范围","循环","shutdown","srv","logger","库","@","#","提供","颜色","(","\\","=","inrange","执行","create","作者"," ","二值化","进行","object","及","输出","服务","args","8","coding","节点","img","msg","退出","自定","hsv","circle","的","高","findcontours","订阅","name","10","chain","w","接口","数值","cnt","收到","destroy","h","www","objectx","+","data","接口类","宽","数据","请求","回调","raw","contours","名","usr","objecty","创建","面积","模型","务器","、","转化成","（","后","像素","\"","__","处理","得到","转换","长度","话题","_","）","检测","server","左上角","将","cv2","opencv","一个",")","sensor","bridge","shape","2","int","古月","1","并","com","效果","提示","信息","upper","imshow","左上"],"title":"服务端接口调用","title_tokens":["服务端","接口","调用","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_10","text":"话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。","text_tokens":["的","周期","目标","有没有","接口","，","识别","也","之前","通信","是","把","位置","不管","衍生","继续","人","视觉","类似","换成","通信接口","中来","我们","话题","想","需要","。","没有","案例","从","机器","服务","定义","发布"],"title":"案例二：话题接口的定义与使用","title_tokens":["的","：","接口","与","话题","定义","使用","二","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_11","text":"现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub","text_tokens":["的","标准","目标","第二个","会","订阅","learning","topic","启动","：","中","node","第三","pub","打印","图像","，","以上","interface","识别","第一","数据","是","出去","位置","就","三个","分别","到","终端","功能","image","视觉","封装","run","sub","消息","来","现在","exe","运行","驱动","ros","二个","我们","话题","_","需要"," ","。","将","成","object","一个","这个","$","此时","希望","谁","第一个","usb","并","节点","ros2","定义","使用","cam","发布","第三个","第二","；","相机"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_12","text":"在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ...","text_tokens":["learning","}","find","代码","编译","通信","选项","/","interfaces","编译器","语言","...","中","例程","rosidl","，","default",".","功能","project","生成","过程","generate","我们","需要","{","$","表示","配置","定义","使用","interface","坐标","required","目标","package","y","x","是","位置","消息","generators","#","(","自动"," ","这个","服务","坐标值","msg","的","txt","接口定义","name","：","完成","接口","包","让","在","描述","了","、","后","cmakelists","\"","int32","话题","_","。","objectposition","一个","还","不同",")","标值","内容","进行","根据"],"title":"接口定义","title_tokens":["定义","接口","接口定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_13","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["的","来","。","看","重点","方法","中","接口","再","我们","代码","使用","在","下"],"title":"程序调用","title_tokens":["调用","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_14","text":"learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["learning","为","180","自定义","50","pub","[","boundingrect","super","已","太小","cv","approx","噪声","lower","红色","下限","*","def","点画","进入","128","cvtcolor","spin","rclpy","main","if","red","guyuehome","去除","listener","/","从","阈值","bgr2hsv","150","bgr8","get","日志","imagesubscriber","中心","]","for","position","array","<","出来","255","入口","初始化","上限","用于","一些","import","90","显示","bgr","list","化成","中","和","图像","，","from","none","receiving","父类","-","队列","py","5","detect","waitkey","bin","np","主","销毁",",",".","self","示例","等待","init",":","imgmsg","!","sub","to","苹果","subscription","ros","类型","图像处理","者","勾勒","color","continue","drawcontours","xy","retr","轮廓","ros2","msgs","转化","定义","使用","cvbridge","interface","frame","坐标","topic","目标","'","info","mask","y","类","callback","node","x","所在","hierarchy","计算","in","与","utf","说明","video","函数","0","关闭","as","env","位置","class","python3","初始","python","image","互相","对象","numpy","上角","消息","居","范围","循环","shutdown","logger","库","@","#","颜色","(","=","inrange","进行","create","作者"," ","二值化","object","及","输出","args","8","coding","节点","img","msg","退出","自定","hsv","circle","webcam","的","publish","高","findcontours","订阅","name","10","chain","w","接口","数值","cnt","destroy","h","www","objectx","+","发布者","data","publisher","宽","回调","raw","contours","名","usr","objecty","创建","面积","模型","、","转化成","（","后","像素","\"","__","处理","得到","转换","长度","话题","_","）","检测","左上角","将","cv2","opencv","objectposition","一个",")","sensor","bridge","shape","2","int","古月","1","并","com","发布","效果","提示","信息","upper","imshow","左上"],"title":"发布者接口调用","title_tokens":["接口","发布者","调用","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_15","text":"learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["learning","d","自定义","super","*","def","spin","rclpy","%","main","guyuehome","listener","/","get","日志","position","入口","初始化","对","import","target","，","from","none","父类","-","队列","字符串","py","bin","主","销毁","self",".",",","示例","等待","init",":","!","sub","std","subscription","者","类型","ros2","msgs","定义","interface","topic","目标","字符","info","'","y","类","callback","node","x","utf","说明","函数","关闭","env","位置","初始","python3","string","python","class","对象","消息","居","循环","shutdown","logger","库","subscribernode","@","#","(","\\","=","执行","create","作者"," ","object","输出","args","8","coding","节点","msg","退出","自定","的","订阅","name","10","接口","收到","destroy","www","数据","回调","名","usr","创建","、","（","后","\"","__","处理","长度","话题","_","objectposition","一个",")","古月","并","com","提示","进行","信息"],"title":"订阅者接口调用","title_tokens":["者","接口","订阅","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_16","text":"接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义","text_tokens":["的","如下","package","接口定义","name","list","：","接口","show","详细","查看","系统","功能","常用","命令",">","#","_"," ","$","操作","<","ros2","某个","定义","包中","interface","列表"],"title":"接口命令行操作","title_tokens":["命令行","命令","接口","操作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_17","text":"https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["package","tutorials","html","-","use",".",":","single","concepts","https","ros","org","docs","/"," ","humble","interfaces","and","interface","about","define","en"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/","text":"动作 机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。 通信模型 举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。 客户端/服务器模型 动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。 一对多通信 和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。 同步通信 既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。 由服务和话题合成 大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。 案例一：小海龟的动作 我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback 案例二：机器人画圆 如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。 运行效果 启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。 接口定义 例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是 动作的目标 ，enable为true时，表示开始运动； 第二块是 动作的执行结果 ，finish为true，表示动作执行完成； 第三块是 动作的周期反馈 ，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ... 通信模型 通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。 服务端代码解析 learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], }, 客户端代码解析 learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], }, 动作命令行操作 动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["周期","—","learning","原理","被","为","代码","具体","下","编译","智能","那","得","遥控","第一块","转","好","if","<","控","成功","初始化","度","装","和","rosidl","from","turtle1","也","之前","done","控制","负责","有","写","加深",":","其实","bool","!","概念","第二块","接下来","请","类型","仅仅","setup","我们","docs","小海龟","管理","需要","rejected","上","{","$","运动","配置","多个","之后","什么","interface","基于","目标","送货","'","不是","键盘","in","完整","三块","360","另外","数据类型","接口类型","链接","多少度","位置","大家","发送给","python3","海龟","turtle","居","来","shutdown","logger","一次","不会","@","("," ","多","一下","最终","输出","8","到底","清楚","底层","received","圆周运动","应用","第二","相对","；","publish","不仅","应带","订阅","10","眼前","拒绝执行","命令行","这些","送给","data","数据","客户","1.57","名","了","设置","才能","模型","当中","action","actionclient","后","__","i","int32","org","_","handle","---","如果","达到","方式","举个","并","肯定","信息","en","还会","}","以下","异步","反馈","解析","转圈","但","查看","movecircleactionserver","html","发出","通信","future","画圆","spin","time","介绍","编程","机器人","main","流程","既然","而是","/","enable","state","movecircle","这样","get","async","日志","操作","通信模型","]","每隔","角度","语言","moving","是不是","标准","但是","会","第三","背后","none","需求","实现","父类","两个","bin","return","销毁",",","等待","entry","类似","project","动作","所处","思路","随时","没有","understanding","teleop","客户端","表示","打开","上边","ros2","wait","info","package","callback","1s","理","函数","是","圈","env","feedback","较长","python","type","读取","常用","小海","通过","只有","消息","generators","#","仔细","编写","这个","服务","coding","not","服务端","absolute","txt","name","时","包含","让","destroy","合适","只能","假设","模块","请求","actions","创建","务器","封装","、","当前","方法","通信接口","拒绝","话题","就此结束","。","可以","就是","很","com","这","没错","臂","根据","比如","d","自定义","启动","find","更为","行为","publishing","tutorials","分析","特性","add","0.5","--","30","用到","竟然","结果","哪里","呢","key","def","result","某一","一点","当","应用层","guyuehome","interfaces","姿态","true","accepted","仿真","开始","真器","二","毕竟","...","list","先","动","一段","-","试一试","send","例子","机械","default","服务器","主","三个","示例","第三块","init","秘密","run","生成","ok","命令","不仅仅","scripts","ros","者","move","generate","相比","送餐","处理函数","针对","humble","定义","使用","坐标","段时间","时间","required","这种","类","接下","顺利","起来","第一","把","到","仿真器","一","console","succeed","库","一样","每","自动","=","直接","20","实时","args","client","退出","circle","像","就此","完成","包","接口类","目的","看","回调","发送","（","actionserver","理解","cmakelists","\"","处理","过","）","一种","机制","机器",")","古月","某","发布","一点一点","由","效果","抓取","发现","接收","[","super","进度","干什么","一套","goal","场景","识别","便于","满足","就","*","终端","一起","二块","转个","实际","rclpy","%","选项","直到","常常","现在","rotateabsolute","隐藏","圆周","导航","状态","？","从","finish","movecircleactionclient","同时","再","for","某个","入口","编译器","动图","对","整个","import","中","例程","，","部分","一对","py","模拟","虽然","分别","self","功能","多少",".","加入","告诉","rotate","程序","theta","过程","服务器端","https","range","想","一块","使","合成","取消","简单","response","一段时间","execute","分拣","node","utf","说明","turtlesim","知道","0","能","sleep","class","初始","points","参考","对象","看到","获取","再用","循环","运行","其","执行","这么","作者","案例","按照","指令","名字","节点","msg","自定","结束","都","点","根本","一边","的","如下","接口定义","有没有","：","接口","收到","复杂","又","等","在","www","发布者","系统","不","指定","如何","旋转","usr","可能","是否","文件",">","同步","server","调用","一个","还","含义","希望","不同","进度条","下来","进行","关闭","列表"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_1","text":"机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。","text_tokens":["的","目标","不仅","送货","分拣","会","被","—","这种","键盘","中","复杂","完整","另外","等","具体","在","这些","，","行为","需求","实现","识别","系统","场景","智能","也","目的","便于","是","满足","通信","用到","就","那","遥控","功能","某一","、","好","概念","常常","机器人","理解","动作","不仅仅","流程","ros","仅仅","我们","进行","这么","需要","送餐"," ","。","一种","管理","上","从","一个","这个","简单","机制","机器","运动","可以","含义","就是","并","某个","名字","很","应用","对"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_2","text":"举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。","text_tokens":["比如","反馈","转圈","进度","更为","行为","发出","30","通信","就","哪里","得","转个","转","直到","现在","机器人","一点","？","这样","肯定","开始","再","控","每隔","度","装","，","一段","例子","多少","ok","告诉","命令","动作","过程","我们","想","需要","随时","没有","表示","取消","运动","一段时间","之后","使用","段时间","时间","不是","360","1s","知道","多少度","是","圈","把","到","执行"," ","20","一下","指令","到底","结束","根本","像","的","有没有","眼前","完成","10","让","在","合适","假设","不","旋转","了","才能","当中","发送","、","后","当前","。","一个","如果","还","可以","机制","机器","举个","进度条","并","一点一点","这","信息"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_3","text":"动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。","text_tokens":["的","目标","周期","抓取","中","反馈","收到","和","让","干什么","又","，","动","起来","也","客户","是","控制","机械","通信","服务器","就","模型","可能","类似","发送","务器","后","当前","机器人","动作","当","服务器端","过程","姿态","所处","想","执行","导航"," ","状态","。","结束","就此结束","一个","客户端","达到","如果","这个","服务","机器","运动","同时","实时","就此","开始","再","使用","之后","什么","坐标","信息","臂","一边","整个"],"title":"客户端/服务器模型","title_tokens":["客户","客户端","服务","服务器","模型","/","务器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_4","text":"和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。","text_tokens":["的","毕竟","但是","中","完成","和","先","只能","，","下","客户","通信","有","服务器","大家","才能","发送","务器","只有","机器人","命令","动作","一样","服务器端","执行","。","一个","客户端","可以","服务","运动","机器","多个","都"],"title":"一对多通信","title_tokens":["多","通信","一对"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_5","text":"既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。","text_tokens":["的","中","反馈","接口","，","数据","也","之前","是","通信","有","那",".","action","介绍","文件","动作","过","过程","通信接口","既然","同步","我们","一种","。","机制","定义","使用","进行"],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_6","text":"大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。","text_tokens":["的","是不是","还会","目标","会","发现","应带","不是","周期","订阅","反馈","时","收到","和","，","模块","下","发布者","实现","客户","看","请求","也","通信","两个","有","竟然","是","服务器","三个","大家","发送","务器","秘密","其实","来","命令","动作","当","应用层","服务器端","过程","者","其","仔细","隐藏","话题","一种"," ","。","调用","一个","客户端","表示","机制","服务","运动","上边","就是","再","底层","使用","发布","应用","动图","没错","基于"],"title":"由服务和话题合成","title_tokens":["服务","和","话题","由","合成"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_7","text":"我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback","text_tokens":["的","absolute","info","}","以下","启动","：","node","接下","让","，","goal","turtlesim","-","turtle1","send","--","指定","控制","1.57","feedback","key","到","仿真器","海龟","一","加深",":","action","run","小海","概念","turtle","再用","理解","命令","动作","rotate","\"","theta","接下来","rotateabsolute","我们","_","小海龟","/"," ","。","案例","按照","{","姿态","teleop","$","可以","运动","仿真","真器","ros2","某","下来","使用","对"],"title":"案例一：小海龟的动作","title_tokens":["的","动作","：","小海","海龟","小海龟","一","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_8","text":"如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。","text_tokens":["的","中","接口","和","代码","但","接下","在","一套","让","，","假设","特性","实现","试一试","客户","是","通信","有","圈","就","如何","呢","服务器","虽然","一起","转个","实际","务器","封装","编程","通过","好","来","方法","机器人","动作","服务器端","过程","接下来","不会","请","我们","话题","而是"," ","？","直接","。","针对","一个","客户端","希望","服务","机器","并","下来","使用","基于"],"title":"案例二：机器人画圆","title_tokens":["机器人","机器","：","画圆","二","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_9","text":"启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。","text_tokens":["的","目标","learning","度","原理","启动","：","中","反馈","完成","例程","和","接下","背后","，","下","分析","实现","客户","30","两个","模拟","服务器","就","分别","终端","示例","发送","务器","run","action","看到","机器人","命令","动作","服务器端","运行","一次","接下来","move","每","我们","_"," ","server","。","一下","客户端","$","可以","服务","机器","运动","最终","这个","client","开始","ros2","并","下来","之后","结束","信息","服务端"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_10","text":"例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是 动作的目标 ，enable为true时，表示开始运动； 第二块是 动作的执行结果 ，finish为true，表示动作执行完成； 第三块是 动作的周期反馈 ，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ...","text_tokens":["周期","learning","为","自定义","}","find","反馈","代码","编译","结果","二块","第一块","选项","机器人","/","enable","state","movecircle","finish","interfaces","true","开始","成功","角度","编译器","语言","标准","...","中","第三","例程","rosidl","，","部分","default","三个",".","功能","第三块","bool","project","第二块","生成","动作","过程","ros","generate","我们","一块","需要","{","表示","$","运动","配置","定义","使用","interface","required","目标","package","不是","三块","第一","是","位置","到","通过","generators","#","(","自动","执行"," ","指令","自定","第二","；","的","txt","接口定义","name","：","完成","接口","时","包","包含","让","在","旋转","action","是否","后","当前","cmakelists","\"","int32","_","。","---","还","不同","机器",")","并","进行","根据"],"title":"接口定义","title_tokens":["定义","接口","接口定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_11","text":"通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。","text_tokens":["周期","目标","的","反馈","例程","接下","代码","和","送给","，","起来","分析","理","客户","之前","通信","控制","服务器","较长","发送给","写","模型","一","发送","务器","后","机器人","动作","程序","运行","接下来","思路","我们","相比","话题"," ","。","这样","一个","客户端","一下","服务","通信模型","机器","运动","相对","就是","开始","清楚","并","下来","结束","信息"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_12","text":"learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["周期","learning","d","自定义","}","反馈","[","super","代码","publishing","goal","movecircleactionserver","编译","0.5","30","结果","*","def","result","spin","rclpy","time","%","选项","main","guyuehome","圆周","/","state","movecircle","从","finish","get","true","]","for","成功","角度","入口","初始化","moving","import","度","...","，","from","none","父类","-","py","负责","bin","服务器","return","主","销毁","self",".",",","示例","等待","功能","加入","entry","init",":","!","动作","scripts","程序","类型","range","setup","move","需要","处理函数","{","表示","打开","运动","配置","ros2","定义","之后","execute","interface","目标","'","info","类","callback","node","in","360","接口类型","utf","说明","函数","知道","0","关闭","sleep","env","feedback","class","python3","初始","python","到","points","console","对象","消息","居","succeed","循环","shutdown","logger","库","@","#","(","=","执行","作者"," ","编写","最终","服务","args","8","coding","节点","msg","圆周运动","退出","自定","点","circle","服务端","的","publish","如下","name","：","完成","接口","收到","包","destroy","让","www","接口类","系统","回调","名","usr","设置","创建","务器","action","、","（","后","actionserver","当前","文件","\"","__","处理","i","）","_","server","handle","一个",")","古月","并","com","发布","进行","信息"],"title":"服务端代码解析","title_tokens":["代码","服务端","解析","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_13","text":"learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["周期","learning","为","被","d","自定义","启动","异步","接收","}","反馈","[","super","代码","goal","编译","add","结果","*","def","future","result","spin","rclpy","%","选项","机器人","main","if","guyuehome","圆周","/","enable","state","movecircle","finish","get","async","日志","movecircleactionclient","accepted","true","]","开始","for","入口","初始化","import","，","from","none","父类","-","send","py","done","bin","服务器","return","主","销毁","self",".",",","示例","等待","功能","加入","entry","init",":","!","动作","scripts","程序","服务器端","类型","setup","move","需要","rejected","使","{","客户端","response","打开","运动","配置","ros2","定义","之后","interface","wait","目标","'","info","类","callback","node","接口类型","utf","顺利","说明","函数","知道","能","env","feedback","class","python3","初始","python","points","读取","console","对象","消息","居","获取","循环","shutdown","logger","库","@","#","(","=","执行","作者"," ","编写","最终","输出","服务","args","client","8","coding","not","节点","received","msg","圆周运动","退出","自定","点","circle","的","如下","name","：","完成","接口","收到","时","拒绝执行","destroy","包","让","www","接口类","系统","数据","客户","请求","回调","名","usr","设置","创建","发送","务器","action","、","actionclient","（","后","文件","\"","__","处理","拒绝","）","_","server","handle","一个","如果",")","希望","机器","方式","古月","并","com","进行","关闭"],"title":"客户端代码解析","title_tokens":["代码","客户","解析","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_14","text":"动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求","text_tokens":["的","如下","info","name","list","：","数据类型","data","查看","goal","数据","send","请求","type","发送","action","常用","命令","动作",">","类型","#","_"," ","$","操作","服务","<","ros2","列表"],"title":"动作命令行操作","title_tokens":["操作","命令行","命令","动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["actions","html","https","ros","ros2","org",".","docs","-","/","tutorials",":","humble","understanding","en"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/","text":"参数 话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。 通信模型 比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。 全局字典 在ROS系统中，参数是以 全局字典 的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。 可动态监控 在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。 案例一：小海龟例程中的参数 在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 启动两个终端，分别运行小海龟仿真器和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看参数列表 当前系统中有哪些参数呢？我们可以启动一个终端，并使用如下命令查询： $ ros2 param list 参数查询与修改 如果想要查询或者修改某个参数的值，可以在param命令后边跟get或者set子命令： $ ros2 param describe turtlesim background_b # 查看某个参数的描述信息 $ ros2 param get turtlesim background_b # 查询某个参数的值 $ ros2 param set turtlesim background_b 10 # 修改某个参数的值 参数文件保存与加载 一个一个查询/修改参数太麻烦了，不如试一试参数文件，ROS中的参数文件使用yaml格式，可以在param命令后边跟dump子命令，将某个节点的参数都保存到文件中，或者通过load命令一次性加载某个参数文件中的所有内容： $ ros2 param dump turtlesim >> turtlesim.yaml # 将某个节点的参数保存到参数文件中 $ ros2 param load turtlesim turtlesim.yaml # 一次性加载某一个文件中的所有参数 案例二：参数编程 接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。 运行效果 启动一个终端，先运行第一句指令，启动param_declare节点，终端中可以看到循环打印的日志信息，其中的“mbot”就是我们设置的一个参数值，参数名称是“robot_name”，通过命令行修改这个参数，看下终端中会发生什么？ $ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle 代码解析 我们来看下在代码中，如何声明、创建、修改一个参数的值。 learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], }, 案例三：机器视觉应用 参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。 运行效果 启动三个终端，分别运行： 相机驱动节点 视觉识别节点 修改红色阈值 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180 在启动的视觉识别节点中，我们故意将视觉识别中红色阈值的上限设置为0，如果不修改参数，将无法实现目标识别。 为了便于调整阈值，我们在节点中将红色阈值的限位修改为了ROS参数，通过命令行修改该参数的值，就可以实现视觉识别啦。 代码解析 我们来看下在视觉识别的代码中，是如何通过参数来设置阈值的。 learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["周期","—","为","learning","50","代码","太小","重新","approx","下","噪声","编译","lower","改变","点画","128","第一句","或者","if","去除","listener","限位","阈值","bgr8","mbot","秒","<","初始化","度","无法","和","图像","参数设置","from","跟","一句","也","yaml","5","控制","变量","有","detect","np","么","写",":","!","param","subscription","接下来","类型","图像处理","setup","勾勒","我们","docs","color","小海龟","需要","{","$","配置","retr","轮廓","parameters","多个","优化","转化","cvbridge","什么","目标","'","不是","键盘","hierarchy","in","端口","叫","链接","两句","大家","python3","load","海龟","发送给","image","set","turtle","居","来","shutdown","logger","一次","@","("," ","object","一下","输出","及","最新","8","usb","清楚","敏感","等等","应用","findcontours","订阅","10","默认","关注","命令行","h","这些","送给","nodeb","data","环境","数据","描述","“","名","设置","了","模型","视觉","转化成","后","__","长度","org","_","左上角","将","中有","如果","方式","并","光线","new","信息","imshow","en","故意","}","不如","解析","已","打印","辨率","查看","html","通信","”","真实","说干就干","发生","spin","介绍","编程","机器人","main","声明","/","大大","输入框","get","日志","通信模型","describe","]","变化","会","bgr","none","receiving","办法","实现","父类","nodea","两个","background","bin","来看","美颜","销毁",",","等待","entry","类似","物体","to","动作","键值","区域","continue","understanding","teleop","表示","打开","ros2","frame","不少","info","y","比较","callback","哪个","x","计算","后边","s","video","那个","函数","是","编码","已经","env","python","type","读取","互相","很多","常用","某些","通过","作用","小海","消息","范围","#","保存","以","编写","这个","服务","coding","字典","hsv","高","name","数值","destroy","访问","让","几个","raw","contours","核心","创建","面积","曝光","integer","、","分辨率","当前","方法","三种","话题","。","cv2","号","可以","2","就是","1","内容","com","提示","这","考虑","比如","啦","d","体验","启动","太","cv","一两句","tutorials","特性","用到","一次性","呢","key","def","易用性","修改","all","共享","red","guyuehome","节","了解","成","时候","影响","仿真","开始","真器","出来","255","想要","滑动","二","上限","显示","非常","list","化成","然后","先","即可","该","队列","-","试一试","连接","提炼","waitkey","主","三个","robot","示例","init","run","sub","命令","scripts","问题","ros","者","很大","全局","humble","msgs","使用","坐标","类","所在","叫做","与","接下","定时器","挺","timer","起来","格式","第一","as","把","到","仿真器","string","一","parameter","console","numpy","大大提高","exe","库","一样","高级","=","inrange","单位","args","img","退出","circle","像","麻烦","配置文件","w","完成","实现目标","包","+","可","看","回调","监控","所有","继续","发送","（","理解","\"","处理","得到","转换","本","）","就要","一种","检测","机制","机器",")","bridge","古月","某","效果","由","左上","180","c++","[","super","boundingrect","dump","识别","红色","下限","便于","分辨","就","*","进入","终端","cvtcolor","rclpy","%","选项","动态","？","从","丰富","bgr2hsv","150","imagesubscriber","中心","再","for","某个","array","其他","入口","cam","对","全局变量","用于","整个","一些","import","90","值","中","例程","，","部分","图像识别","py","键和值","分别","self","多少","功能",".","哪些","查询","加入","参数值","imgmsg","每次","苹果","程序","https","过程","存在","形态","drawcontours","xy","名称","合成","简单","hello","value","mask","node","熟悉","utf","说明","turtlesim","知道","输入","0","传输","调整","参数","class","初始","points","参考","传输方式","对象","看到","立刻","获取","定时","上角","循环","为了","运行","驱动","提供","颜色","执行","create","作者","二值化","三","案例","从而","子","指令","节点","msg","都","点","相机","其中","的","条","提高","如下","一两","chain","：","接口","cnt","等","在","中将","www","系统","宽","不","指定","如何","b","usr","declare","可能","易用","是否","文件","像素",">","组成","加载","opencv","一个","还","不同","含义","sensor","int","默认值","shape","比较简单","下来","进行","parameternode","关闭","upper","列表"],"title":"参数","title_tokens":["参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_1","text":"话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。","text_tokens":["的","—","中","c++","在","，","系统","知道","数据","便于","不","传输","通信","变量","是","已经","参数","大家","类似","传输方式","是否","、","介绍","常用","编程","来","某些","机器人","动作","程序","共享","运行","ros","三种","本","我们","话题","全局","一种","节"," ","。","了解","可以","机制","服务","机器","方式","再","清楚","多个","节点","这","字典","全局变量"],"title":"参数","title_tokens":["参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_2","text":"比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。","text_tokens":["比如","辨率","识别","分辨","就","改变","或者","阈值","时候","影响","输入框","滑动","整个","一些","度","会","中","和","图像","，","参数设置","部分","连接","也","nodea","图像识别","有","美颜","分别","多少","功能","问题","程序","过程","很大","区域","我们","需要","配置","使用","什么","哪个","端口","格式","那个","输入","是","编码","参数","到","很多","作用","通过","一样","驱动","执行"," ","usb","节点","等等","都","像","相机","的","条","配置文件","关注","在","这些","nodeb","核心","设置","面积","视觉","曝光","是否","分辨率","后","文件","。","可以","不同","机器","就是","效果","进行","这","考虑"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_3","text":"在ROS系统中，参数是以 全局字典 的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。","text_tokens":["的","为","中","数值","叫做","然后","后边","和","访问","等","在","，","跟","即可","叫","系统","也","键和值","是","有","就","真实","参数","名","了","参数值","编程","或者","理解","一样","ros","组成","键值","存在","我们","全局","以","形态"," ","？","名称","。","合成","一个","号","时候","可以","这个","就是","使用","什么","由","字典","像"],"title":"全局字典","title_tokens":["字典","全局"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_4","text":"在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。","text_tokens":["的","比如","会","非常","中","数值","访问","在","，","特性","办法","知道","也","用到","有","参数","大家","了","可能","立刻","获取","编程","修改","共享","高级"," ","。","丰富","一个","如果","从而","可以","最新","ros2","某","节点","其他","进行","这","都","对"],"title":"可动态监控","title_tokens":["监控","可","动态"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_5","text":"在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 启动两个终端，分别运行小海龟仿真器和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["的","启动","：","中","键盘","node","例程","和","命令行","在","熟悉","，","下","起来","turtlesim","也","两个","控制","参数","key","分别","了","仿真器","海龟","终端","一","run","小海","通过","turtle","方法","命令","运行","提供","我们","_","小海龟"," ","。","teleop","这个","$","含义","仿真","真器","ros2","节点","使用","不少"],"title":"案例一：小海龟例程中的参数","title_tokens":["的","：","中","参数","例程","小海","海龟","小海龟","一","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_6","text":"当前系统中有哪些参数呢？我们可以启动一个终端，并使用如下命令查询： $ ros2 param list","text_tokens":["如下","启动","list","：","，","系统","呢","参数","终端","哪些","查询","当前","命令","param","我们"," ","？","中有","一个","$","可以","并","ros2","使用"],"title":"查看参数列表","title_tokens":["查看","列表","参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_7","text":"如果想要查询或者修改某个参数的值，可以在param命令后边跟get或者set子命令： $ ros2 param describe turtlesim background_b # 查看某个参数的描述信息 $ ros2 param get turtlesim background_b # 查询某个参数的值 $ ros2 param set turtlesim background_b 10 # 修改某个参数的值","text_tokens":["的","值","10","：","后边","在","，","跟","查看","turtlesim","描述","background","参数","b","查询","set","或者","修改","命令","param","#","_"," ","如果","get","可以","子","$","describe","某个","ros2","想要","信息"],"title":"参数查询与修改","title_tokens":["与","修改","参数","查询"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_8","text":"一个一个查询/修改参数太麻烦了，不如试一试参数文件，ROS中的参数文件使用yaml格式，可以在param命令后边跟dump子命令，将某个节点的参数都保存到文件中，或者通过load命令一次性加载某个参数文件中的所有内容： $ ros2 param dump turtlesim >> turtlesim.yaml # 将某个节点的参数保存到参数文件中 $ ros2 param load turtlesim turtlesim.yaml # 一次性加载某一个文件中的所有参数","text_tokens":["的","麻烦","：","中","不如","后边","太","dump","在","，","跟","格式","turtlesim","试一试","yaml","一次性","所有","参数","了","到","load",".","查询","通过","或者","文件","修改","命令","param","一次","ros",">","#","保存","/"," ","将","加载","一个","$","可以","子","某个","节点","ros2","内容","使用","某","都"],"title":"参数文件保存与加载","title_tokens":["文件","参数","与","保存","加载"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_9","text":"接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。","text_tokens":["的","体验","比较","一两","中","接下","和","在","先","，","一两句","几个","实现","函数","两句","就","参数","写","了","设置","读取","来","方法","程序","接下来","我们","就要","。","一下","简单","可以","开始","比较简单","下来","使用","这","都"],"title":"案例二：参数编程","title_tokens":["：","参数","案例","二","编程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_10","text":"启动一个终端，先运行第一句指令，启动param_declare节点，终端中可以看到循环打印的日志信息，其中的“mbot”就是我们设置的一个参数值，参数名称是“robot_name”，通过命令行修改这个参数，看下终端中会发生什么？ $ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle","text_tokens":["的","learning","会","name","启动","中","数值","打印","命令行","先","，","下","一句","第一","看","”","是","“","参数","设置","终端","robot","declare","发生","第一句","参数值","parameter","set","run","看到","通过","turtle","循环","修改","命令","param","运行","我们","_"," ","名称","？","一个","这个","可以","日志","$","mbot","就是","指令","ros2","节点","什么","信息","其中"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_11","text":"我们来看下在代码中，如何声明、创建、修改一个参数的值。 learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], },","text_tokens":["周期","learning","为","}","[","super","打印","代码","重新","下","编译","*","def","spin","rclpy","%","选项","修改","main","all","guyuehome","声明","/","从","get","日志","mbot","秒","]","入口","初始化","import","值","中","，","from","none","父类","-","py","bin","来看","new","主","销毁",",",".","self","示例","robot","等待","功能","加入","init","参数值",":","entry","!","scripts","param","程序","setup","我们","需要","{","hello","打开","配置","parameters","ros2","value","'","info","类","callback","node","定时器","s","utf","timer","说明","函数","知道","关闭","env","参数","初始","python3","class","python","string","到","type","发送给","读取","points","parameter","set","对象","console","居","定时","循环","shutdown","logger","库","@","#","(","=","执行","create","作者"," ","编写","单位","输出","args","8","coding","节点","退出","点","的","如下","name","：","默认","接口","数值","完成","destroy","包","让","在","送给","www","系统","回调","指定","如何","usr","设置","创建","declare","发送","、","（","后","文件","\"","__","）","_","。","将","一个",")","默认值","2","古月","并","com","进行","parameternode","信息","列表"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_12","text":"参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。","text_tokens":["的","麻烦","提高","会","不是","比较","中","不如","挺","代码","在","先","，","下","环境","识别","也","提炼","看","是","已经","如何","呢","参数","就","大家","了","继续","把","设置","示例","么","视觉","说干就干","物体","易用","易用性","大大提高","每次","机器人","修改","程序","过程","运行","动态","我们"," ","？","大大","。","成","阈值","还","可以","不同","机器","再","优化","敏感","使用","来看","变化","光线","应用","效果","对"],"title":"案例三：机器视觉应用","title_tokens":["机器","：","视觉","应用","三","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_13","text":"启动三个终端，分别运行： 相机驱动节点 视觉识别节点 修改红色阈值 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180 在启动的视觉识别节点中，我们故意将视觉识别中红色阈值的上限设置为0，如果不修改参数，将无法实现目标识别。 为了便于调整阈值，我们在节点中将红色阈值的限位修改为了ROS参数，通过命令行修改该参数的值，就可以实现视觉识别啦。","text_tokens":["的","目标","learning","故意","为","180","啦","启动","无法","：","node","中","实现目标","值","命令行","h","在","中将","，","该","实现","识别","红色","0","不","便于","调整","detect","就","参数","三个","分别","设置","终端","视觉","parameter","set","run","通过","修改","为了","exe","命令","param","red","运行","驱动","ros","我们","_"," ","。","将","限位","阈值","object","如果","$","可以","usb","ros2","节点","cam","upper","上限","相机"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_14","text":"我们来看下在视觉识别的代码中，是如何通过参数来设置阈值的。 learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], },","text_tokens":["learning","d","为","180","50","}","[","boundingrect","super","已","打印","代码","太小","cv","approx","下","噪声","编译","识别","lower","红色","下限","*","def","点画","进入","128","cvtcolor","spin","rclpy","%","选项","main","if","red","guyuehome","去除","listener","/","从","阈值","bgr2hsv","150","bgr8","get","日志","imagesubscriber","中心","]","for","<","array","出来","255","入口","初始化","上限","用于","一些","import","90","显示","bgr","list","化成","中","和","图像","，","from","none","receiving","父类","-","队列","py","5","detect","waitkey","bin","np","来看","主","销毁",",",".","self","示例","等待","功能","加入","entry","init","参数值",":","imgmsg","!","sub","to","苹果","scripts","param","程序","subscription","ros","类型","图像处理","者","勾勒","setup","我们","color","continue","drawcontours","需要","xy","{","表示","打开","配置","retr","轮廓","ros2","msgs","转化","使用","cvbridge","value","frame","坐标","目标","'","info","mask","y","类","callback","node","x","所在","hierarchy","计算","in","与","utf","说明","video","函数","知道","0","关闭","是","as","env","参数","class","python3","初始","python","到","points","image","互相","读取","parameter","对象","console","numpy","通过","消息","居","来","上角","范围","循环","shutdown","logger","库","@","#","颜色","(","=","inrange","进行","create","作者"," ","二值化","编写","object","及","输出","args","8","coding","：","节点","img","msg","退出","hsv","circle","点","的","高","findcontours","如下","订阅","name","10","chain","w","接口","数值","cnt","destroy","完成","包","h","让","在","www","+","data","系统","宽","回调","raw","如何","contours","名","usr","设置","创建","面积","declare","模型","视觉","integer","、","转化成","（","后","文件","像素","\"","__","处理","得到","转换","长度","话题","_","）","检测","。","左上角","cv2","将","opencv","一个",")","sensor","bridge","shape","2","int","古月","1","并","com","效果","提示","信息","upper","imshow","左上"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["html","https","ros","parameters","ros2","org",".","docs","-","/","tutorials",":","humble","understanding","en"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/","text":"分布式通信 智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。 分布式通信 什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。 分布式网络搭建 除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。 树莓派配置 在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。 装系统 我们先要给树莓派装系统，这里我们选择的是 Ubuntu Mate 针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/ 安装ROS2 在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。 编译代码 将我们课程的代码也下载到树莓派中，进行编译。 远程桌面 如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728 分布式数据传输 树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。 分布式网络分组 没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。 案例一：小海龟分布式控制 分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动： $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端 案例二：话题分布式通信 我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串： $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端 案例三：服务分布式通信 话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能： $ ros2 run learning_service service_adder_server # PC端 $ ros2 run learning_service service_adder_client 2 3 # 树莓派端 案例四：机器视觉分布式应用 以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体： $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 没有任何问题，视觉识别的效果如下。 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。 参考链接 https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["—","为","learning","互通","代码","方便","过来","具体","下","编译","分布式系统","智能","似乎","好","或者","位于","镜像","模式","concepts","拆解","listener","笔记","完全","<","做","成功","ubuntu","domain","无法","资料","装","和","图像","以上","流畅","四","一句","之前","也","一切","控制","有","鼠标","net","神奇","较","csdn",":","魅力","接下来","请","我们","demo","docs","小海龟","需要","上","$","运动","配置","一系列","多个","派","之后","什么","繁多","体积","不是","键盘","派里","另外","分布","基本","步骤","叫","链接","大家","海龟","感觉","之外","turtle","客户端程序","来","卡顿","下载","他们"," ","同一","多","一下","usb","试试","应用","webcam","订阅","命令行","这些","主要","这里","环境","虚拟","数据","客户","了","才能","视觉","后","消耗","用","不够","org","_","小","将","中有","如果","事情","小组","款","放","并","信息","我","en","卡中","talker","变得","不过","html","通信","download","远程桌面","发生","算机","机器人","流程","details","而是","/","这样","操作","一致","变化","计算能力","about","几乎","会","电脑","qq","端的","52785580","布式","整体","实现","两个","服务器程序","类似","物体","各种","动作","岂","则","没有","teleop","客户端","上边","ros2","远程","感器","放置","helloworld","字符","反过来","比较","于是","有点","个","计算","给","article","是","已经","还是","很多","经典","通过","小海","像头","真有","所","#","看上去","编写","据传","服务","出现","如此","world","没","访问","反过","安装","务器","、","方法","话题","摄像头","。","适合","sd","频繁","可以","pc","2","就是","并且","attention","这","典型","比如","啦","启动","3","用到","呢","key","修改","只","两者","放在","仿真","真器","一系","电机","互联","二","毕竟","显示","非常","然后","先","即可","-","连接","字符串","相互","服务器","学习","不在","分组","run","sub","命令","问题","122599728","ros","者","nodes","针对","humble","除了","上去","系列","建立","使用","如","topic","友好","这种","作为","的话","计算机","挺","接下","带领","顺利","起来","到","仿真器","一","exe","只要","一样","支持","每","笔记本","全都","=","分布式","直接","实时","情况","client","讲","烧写","减轻","像","摄像","局域","完成","数据传输","mate","监控","继续","简而言之","加法","采集","处理","过","bashrc","采用","机制","机器","小型","效果","发布","由","能力","pub","而言","任务","adder","识别","红色","感受","处于","传感器","就","实际","资源","之一","？","轻松","网上","测试","再","cam","你","安排","一些","中","your","例程","cpp","搭建","，","经常","更强","平台","py","讲过","模拟","blog","功能",".","加入","看上","程序","https","确保","想","求和","hello","桥接","分布式应用","service","id","压力","派装","node","分配","不在话下","turtlesim","任务分配","传输","局域网","同一个","参考","运行","驱动","控制器","提供","遇到","笔记本电脑","这么","三","案例","export","原本","树莓","里","选择","桌面","节点","都","传感","的","如下","基本一致","局域网络","课程","此外","顺利实现","虚拟机","性能","网络","：","复杂","等","在","设计","派端","发布者","系统","带来","显示器","不","先要","打通","任何","结构","可能","依然","之间","是否","发给",">","组成","框架","server","一个","还","不同","希望","开发","下来","进行","端"],"title":"分布式通信","title_tokens":["通信","分布","布式","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_1","text":"智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。","text_tokens":["的","会","压力","不是","计算机","中","分配","计算","等","这些","分布","任务","，","经常","布式","实现","系统","分布式系统","任务分配","智能","平台","到","功能","算机","、","机器人","处理","岂","卡顿","运行","不够","拆解","遇到","全都","放在","分布式"," ","？","。","将","减轻","上","一个","如果","多","可以","机器","里","情况","出现","就是","多个","计算能力","这","繁多","能力"],"title":"分布式通信","title_tokens":["通信","分布","布式","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_2","text":"什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。","text_tokens":["典型","比如","为","方便","任务","下","不过","分布式系统","感受","通信","传感器","就","算机","好","位于","机器人","只","由","资源","放在","之一","？","笔记","完全","变化","做","电机","毕竟","非常","中","电脑","和","布式","，","更强","实现","之前","也","平台","两个","控制","有","相互","功能","较","魅力","各种","看上","ros","接下来","我们","需要","上","上去","运动","配置","上边","远程","感器","派","什么","这种","压力","体积","作为","比较","于是","计算机","有点","分配","派里","计算","挺","另外","接下","分布","带领","起来","叫","传输","是","已经","大家","到","一","驱动","运行","控制器","每","笔记本","笔记本电脑","看上去","分布式"," ","多","原本","树莓","节点","讲","应用","都","传感","减轻","的","此外","性能","复杂","等","在","这些","主要","设计","环境","系统","数据","不","监控","任何","结构","了","可能","视觉","之间","处理","过","消耗","组成","框架","小","。","将","适合","一个","还","可以","不同","机器","采用","款","放","就是","并且","开发","下来","这","信息"],"title":"分布式通信","title_tokens":["通信","分布","布式","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_3","text":"除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。","text_tokens":["的","电脑","计算","另外","在","，","平台","控制","模拟","了","之外","机器人","控制器","笔记本","笔记本电脑","我们","。","上","除了","一个","树莓","笔记","机器","选择","放置","使用","派","我"],"title":"分布式网络搭建","title_tokens":["网络","分布","搭建","布式","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_4","text":"在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。","text_tokens":["的","资料","在","先","，","环境","之前","也","有","大家","参考","很多","好","我们","需要","。","网上","可以","树莓","配置","开发","派","都"],"title":"树莓派配置","title_tokens":["配置","派","树莓"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_5","text":"我们先要给树莓派装系统，这里我们选择的是 Ubuntu Mate 针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/","text_tokens":["的","派装","启动","卡中","：","mate","给","，","这里","系统","链接","-","是","先要","就","到","了",".","download",":","镜像","https","下载","org","我们","/"," ","。","针对","sd","可以","树莓","选择","派","之后","烧写","ubuntu"],"title":"装系统","title_tokens":["装","系统"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#ros2","text":"在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。","text_tokens":["的"," ","流程","一样","中","电脑","安装","mate","ros2","和","系统","在","端","，","ubuntu","。","好"],"title":"安装ROS2","title_tokens":["ros2","安装"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_6","text":"将我们课程的代码也下载到树莓派中，进行编译。","text_tokens":["的","也","树莓","课程","下载","中","到","我们","代码","派","进行","，","。","将","编译"],"title":"编译代码","title_tokens":["代码","编译"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_7","text":"如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728","text_tokens":["的","显示","如下","基本一致","的话","：","键盘","网络","电脑","qq","访问","和","方便","article","在","52785580","基本","，","以上","整体","步骤","系统","链接","显示器","连接","不","也","有","鼠标","就","net","blog","大家","了","远程桌面",".","参考","csdn",":","好","通过","流程","https","122599728","details","_","/"," ","直接","。","上","如果","可以","操作","树莓","一致","配置","桌面","远程","派","使用","端"],"title":"远程桌面","title_tokens":["远程","远程桌面","桌面"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_8","text":"树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。","text_tokens":["为","启动","互通","talker","而言","具体","不过","通信","处于","就","呢","发生","算机","好","模式","修改","listener","而是","？","这样","测试","做","你","互联","会","无法","中","电脑","和","cpp","，","实现","连接","平台","py","之前","两个","讲过","神奇","也","分组","run","命令","动作","问题","接下来","请","者","确保","我们","demo","需要","nodes","$","配置","ros2","派","使用","如","桥接","什么","这","计算机","个","计算","接下","是","已经","局域网","到","同一个","端","感觉","很多","只要","一样","所","#","他们"," ","直接","同一","一下","树莓","服务","里","节点","都","像","的","局域","局域网络","如下","订阅","虚拟机","完成","网络","：","命令行","等","在","派端","发布者","虚拟","带来","不","打通","安装","了","简而言之","之间","、","后","用","话题","_","。","将","中有","一个","如果","事情","可以","希望","小组","pc","并且","并","下来","效果","attention","发布","能力"],"title":"分布式数据传输","title_tokens":["数据","传输","数据传输","分布","布式","分布式","据传"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_9","text":"没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。","text_tokens":["的","id","domain","无法","没","中","计算机","电脑","计算","分配","和","：","your","在","端的","，","即可","一句","实现","通信","处于","就","了","到","才能",".","同一个","类似","分组","加入","算机","问题","一样","两者","ros",">","提供","我们","_","=","则"," ","。","同一","bashrc","将","这样","一个","export","$","可以","机制","树莓","小组","配置","如果","不同","<","ros2","派"],"title":"分布式网络分组","title_tokens":["网络","分布","布式","分布式","分组"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_10","text":"分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动： $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端","text_tokens":["的","一些","—","反过来","启动","：","网络","中","电脑","键盘","例程","node","过来","分布","先","布式","，","在","反过","流畅","派端","turtlesim","之前","也","通信","似乎","神奇","控制","已经","学习","key","继续","了","仿真器","海龟","依然","经典","是否","run","小海","或者","turtle","来","过","真有","ros","#","我们","想","_","小海龟","这么","分布式"," ","。","上","案例","teleop","$","可以","树莓","测试","运动","pc","仿真","试试","真器","ros2","节点","建立","成功","派","端"],"title":"案例一：小海龟分布式控制","title_tokens":["分布式","控制","：","小海","海龟","分布","小海龟","一","布式","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_11","text":"我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串： $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端","text_tokens":["的","world","learning","字符","作为","订阅","topic","：","pub","电脑","例程","代码","在","先","，","下","发布者","派端","之前","不","字符串","通信","呢","任何","是否","run","sub","修改","者","#","我们","话题","_"," ","？","直接","编写","$","可以","hello","树莓","pc","情况","试试","ros2","使用","派","发布","helloworld","端"],"title":"案例二：话题分布式通信","title_tokens":["通信","：","话题","分布","布式","分布式","二","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_12","text":"话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能： $ ros2 run learning_service service_adder_server # PC端 $ ros2 run learning_service service_adder_client 2 3 # 树莓派端","text_tokens":["learning","顺利实现","：","电脑","，","顺利","不在话下","派端","实现","adder","3","也","客户","服务器","不在","功能","服务器程序","还是","务器","run","加法","客户端程序","问题","程序","运行","#","我们","话题","_"," ","server","。","没有","客户端","$","可以","求和","服务","树莓","pc","2","client","ros2","service","端"],"title":"案例三：服务分布式通信","title_tokens":["服务","通信","：","分布","布式","分布式","三","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_13","text":"以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体： $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 没有任何问题，视觉识别的效果如下。 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。","text_tokens":["啦","learning","为","代码","变得","识别","红色","用到","实际","好","机器人","修改","？","轻松","测试","再","一系","做","cam","几乎","安排","会","非常","中","然后","电脑","例程","图像","端的","搭建","布式","，","以上","连接","也","一切","模拟","功能","类似","物体","run","sub","问题","接下来","ros","我们","需要","没有","上","$","一系列","配置","系列","ros2","使用","派","topic","友好","node","接下","分布","通过","像头","exe","只要","支持","#","提供","分布式"," ","树莓","实时","usb","节点","如此","都","webcam","的","摄像","如下","没","网络","：","复杂","这些","在","派端","系统","不","任何","了","视觉","发给","采集","方法","处理","不够","摄像头","_","。","将","频繁","一个","还","可以","机器","pc","小型","下来","开发","效果","端"],"title":"案例四：机器视觉分布式应用","title_tokens":["分布式","机器","：","分布","视觉","布式","分布式应用","四","案例","应用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_14","text":"https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["id","domain","concepts","https","html","ros","org",".","docs","/","about",":","humble","-","en"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2_%E6%A6%82%E5%BF%B5%E6%80%BB%E8%A7%88/","text":"从本节开始，我们将进入第二个篇章，以ROS2的核心概念为线索，详细讲解ROS2的应用开发方法。","text_tokens":["的","为","第二个","详细","，","篇章","本节","核心","进入","开发方法","讲解","概念","方法","从本节","二个","我们","以","。","将","开始","ros2","开发","线索","应用","第二"],"title":"概念总览","title_tokens":["总览","概念"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/","text":"Launch：多节点启动与配置脚本 到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是 Launch启动文件 ，它是ROS系统中多节点启动与配置的一种脚本。 Launch文件 这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。 多节点启动 先来看看如何启动多个节点。 运行效果 启动终端，使用ros2中的launch命令来启动第一个launch文件示例： $ ros2 launch learning_launch simple.launch.py 运行成功后，就可以在终端中看到发布者和订阅者两个节点的日志信息啦。 文件解析 这两个节点是如何启动的呢？我们来分析下这个launch文件。 learning_launch/simple.launch.py from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'learning_topic' , # 节点所在的功能包 executable = 'topic_helloworld_pub' , # 节点的可执行文件 ), Node ( # 配置一个节点的启动 package = 'learning_topic' , # 节点所在的功能包 executable = 'topic_helloworld_sub' , # 节点的可执行文件名 ), ]) 命令行参数配置 我们使用ros2命令在终端中启动节点时，还可以在命令后配置一些传入程序的参数，使用launch文件一样可以做到。 运行效果 比如我们想要运行一个Rviz可视化上位机，并且加载某一个配置文件，使用命令行的话，是这样的： $ ros2 run rviz2 rviz2 -d <PACKAGE-PATH>/rviz/turtle_rviz.rviz 命令后边还得跟一长串配置文件的路径，如果放在launch文件里，启动就优雅很多了： $ ros2 launch learning_launch rviz.launch.py 文件解析 命令行后边的参数是如何通过launch传入节点的呢？来看下这个launch文件。 learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 rviz_config = os . path . join ( # 找到配置文件的完整路径 get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'rviz2' , # 节点所在的功能包 executable = 'rviz2' , # 节点的可执行文件名 name = 'rviz2' , # 对节点重新命名 arguments = [ '-d' , rviz_config ] # 加载命令行参数 ) ]) 资源重映射 ROS社区中的资源非常多，当我们使用别人代码的时候，经常会发现通信的话题名称不太符合我们的要求，能否对类似的资源重新命名呢？ 为了提高软件的复用性，ROS提供了资源重映射的机制，可以帮助我们解决类似的问题。 运行效果 启动一个终端，运行如下例程，很快会看到出现了两个小海龟仿真器界面；再打开一个终端，发布如下话题，让海龟1动起来，海龟2也会一起运动： $ ros2 launch learning_launch rviz.launch.py $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 文件解析 为什么两个海龟都会动呢？这里要用到turtlesim功能包里另外一个节点，叫做mimic，它的功能是订阅某一个海龟的Pose位置，通过计算，变换成一个同样运动的速度指令，发布出去。 至于mimic节点订阅或者发布的话题名叫什么呢？我们就可以通过重映射修改成对应任意海龟的名字。 learning_launch/remapping.launch.py from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 namespace = 'turtlesim1' , # 节点所在的命名空间 executable = 'turtlesim_node' , # 节点的可执行文件名 name = 'sim' # 对节点重新命名 ), Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 namespace = 'turtlesim2' , # 节点所在的命名空间 executable = 'turtlesim_node' , # 节点的可执行文件名 name = 'sim' # 对节点重新命名 ), Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 executable = 'mimic' , # 节点的可执行文件名 name = 'mimic' , # 对节点重新命名 remappings = [ # 资源重映射列表 ( '/input/pose' , '/turtlesim1/turtle1/pose' ), # 将/input/pose话题名修改为/turtlesim1/turtle1/pose ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), # 将/output/cmd_vel话题名修改为/turtlesim2/turtle1/cmd_vel ] ) ]) ROS参数设置 ROS系统中的参数，也可以在Launch文件中设置。 运行效果 启动一个终端，运行如下命令： $ ros2 launch learning_launch parameters.launch.py 在启动的海龟仿真器中，我们看到背景颜色被改变了，这个颜色参数的设置就是在launch文件中完成的。 文件解析 我们看下在launch文件中如何来设置参数的。 learning_launch/parameters.launch.py from launch import LaunchDescription # launch文件的描述类 from launch.actions import DeclareLaunchArgument # 声明launch文件内使用的Argument类 from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) # 创建一个Launch文件内参数（arg）background_r ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) # 创建一个Launch文件内参数（arg）background_g ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) # 创建一个Launch文件内参数（arg）background_b ) return LaunchDescription ([ # 返回launch文件的描述信息 background_r_launch_arg , # 调用以上创建的参数（arg） background_g_launch_arg , background_b_launch_arg , Node ( # 配置一个节点的启动 package = 'turtlesim' , executable = 'turtlesim_node' , # 节点所在的功能包 name = 'sim' , # 对节点重新命名 parameters = [{ # ROS参数列表 'background_r' : LaunchConfiguration ( 'background_r' ), # 创建参数background_r 'background_g' : LaunchConfiguration ( 'background_g' ), # 创建参数background_g 'background_b' : LaunchConfiguration ( 'background_b' ), # 创建参数background_b }] ), ]) Attention launch文件中出现的argument和parameter，虽都译为“参数”，但含义不同： - argument：仅限launch文件内部使用，方便在launch中调用某些数值； - parameter：ROS系统的参数，方便在节点见使用某些数值。 加载参数文件 以上例程我们在launch文件中一个一个的设置参数，略显麻烦，当参数比较多的时候，建议使用参数文件进行加载。 learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 config = os . path . join ( # 找到参数文件的完整路径 get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 executable = 'turtlesim_node' , # 节点的可执行文件名 namespace = 'turtlesim2' , # 节点所在的命名空间 name = 'sim' , # 对节点重新命名 parameters = [ config ] # 加载参数文件 ) ]) Launch文件包含 在复杂的机器人系统中，launch文件也会有很多，此时我们可以使用类似编程中的include机制，让launch文件互相包含。 文件解析 learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch.actions import IncludeLaunchDescription # 节点启动的描述类 from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction # launch文件中的执行动作 from launch_ros.actions import PushRosNamespace # ROS命名空间配置 def generate_launch_description (): # 自动生成launch文件的函数 parameter_yaml = IncludeLaunchDescription ( # 包含指定路径下的另外一个launch文件 PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( # 对指定launch文件中启动的功能加上命名空间 actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ # 返回launch文件的描述信息 parameter_yaml_with_namespace ]) 功能包编译配置 ... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ... 参考链接 https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docs.ros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["learning","为","被","代码","方便","重新","下","编译","改变","那","vel","得","帮助","好","或者","脚本","linear","includelaunchdescription","share","arguments","launch","别人","<","成功","launchdescription","和","参数设置","from","跟","以上","turtle1","也","yaml","有","当然",":","turtlesim2","粘合剂","至于","我们","docs","84","小海龟","变换","需要","{","$","运动","一系列","配置","join","parameters","多个","0.0","什么","基于","映射","'","能否","rate","完整","另外","优雅","链接","位置","大家","海龟","turtle","来","一次","include","(","declarelaunchargument"," ","多","r","乍","angular","；","订阅","符合","这是","速度","命令行","这里","data","描述","“","名","了","设置","arg","看看","glob","后","可视","org","text","_","不太","将","description","如果","性","方式","肯定","index","信息","en","}","directory","解析","但","它","packages","html","通信","”","编程","机器人","main","背景","声明","/","大大","长串","这样","get","日志","路径","]","界面","会","传入","两个","background","return","来看",",","类似","相当","为什么","各种","动作","projects","没有","twist","粘合","1.8","打开","第一个","ros2","remappings","xml","helloworld","mimic","建议","频次","package","y","比较","x","计算","后边","resource","函数","甚至","是","python","命名","互相","很多","某些","通过","小海","中多","#","看上去","编写","remapping","这个","仅限","出现","任意","pushrosnamespace","加上","name","数值","时","找到","包含","让","argument","重","软件","actions","launchconfiguration","核心","模版","nonamespace","创建","合剂","方法","话题","。","可以","上位","2","就是","并且","1","attention","这","sources","没错","做到","啦","比如","d","启动","社区","os","tutorials","分析","config","--","组装","用到","一次性","呢","def","略显","同样","files","修改","当","呀","放在","了解","成","时候","此时","仿真","真器","一系","想要","非常","...","返回","先","动","-","空间","出去","default","解决","名叫","示例","run","sub","生成","可执行文件","命令","问题","pose","ros","者","虽","generate","humble","新","上去","可视化","系列","ament","msgs","使用","textsubstitution","topic","的话","类","所在","叫做","与","带领","起来","第一","很快","到","仿真器","内","parameter","一样","自动","=","cmd","为止","像","阅读","麻烦","pythonlaunchdescriptionsource","配置文件","input","turtlesim1","完成","包","+","output","path","目的","所有","（","自由","\"","rviz2","目前为止","多样","）","一种","看下","原有","机器",")","机制","large","某","效果","发布","发现","pub","[","就","*","终端","一起","复用","资源","？","丰富","simple","geometry","groupaction","再","for","对","一些","import","行文","中","executable","例程","每当","好像","一长串","，","经常","py","功能",".","查询","每次","看上","之高","程序","https","过程","会动","见","名称","要","重新命名","2.0","机","value","译","node","各个","turtlesim","输入","0","substitutions","参数","参考","看到","为了","using","运行","答案","rviz","提供","颜色","多样化","执行","g","里","指令","节点","名字","msg","都","的","提高","要求","前为","如下","有没有","：","内部","复杂","在","发布者","系统","指定","如何","b","文件","z",">","namespace","with","sim","加载","目前","调用","一个","还","含义","不同","namespaces","对应","进行","列表","122"],"title":"Launch","title_tokens":["launch"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch","text":"到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是 Launch启动文件 ，它是ROS系统中多节点启动与配置的一种脚本。","text_tokens":["的","麻烦","前为","启动","有没有","中","与","每当","，","它","系统","是","一次性","所有","呢","那","到","终端","当然","很多","好","脚本","每次","机器人","命令","文件","目前为止","运行","ros","一次","答案","中多","我们","呀","一种","需要"," ","？","。","没有","这样","目前","新","一个","launch","可以","打开","机器","配置","方式","就是","节点","为止","肯定","都"],"title":"Launch：多节点启动与配置脚本","title_tokens":["脚本","多","launch","启动","配置","：","节点","与"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_1","text":"这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。","text_tokens":["启动","代码","它","组装","就","呢","那","编程","或者","呀","大大","了解","这样","丰富","launch","一系","中","例程","和","好像","，","也","功能","类似","相当","命令","看上","各种","之高","过程","ros","粘合剂","我们","粘合","上去","一系列","配置","系列","ros2","使用","基于","频次","各个","完整","带领","输入","甚至","是","参数","大家","python","很多","通过","来","一样","看上去","多样化"," ","编写","乍","出现","节点","像","阅读","的","这是","命令行","在","系统","描述","目的","如何","核心","模版","了","合剂","文件","自由","多样","。","一个","还","可以","原有","就是","进行","没错"],"title":"Launch文件","title_tokens":["文件","launch"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_1","text":"先来看看如何启动多个节点。","text_tokens":["来","启动","如何","多个","节点","先","看看","。"],"title":"多节点启动","title_tokens":["节点","多","启动"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_2","text":"启动终端，使用ros2中的launch命令来启动第一个launch文件示例： $ ros2 launch learning_launch simple.launch.py 运行成功后，就可以在终端中看到发布者和订阅者两个节点的日志信息啦。","text_tokens":["的","啦","learning","订阅","启动","：","中","和","在","，","发布者","第一","py","两个","就","终端",".","示例","看到","后","来","文件","命令","运行","者","_"," ","。","一个","launch","$","simple","可以","日志","第一个","ros2","节点","使用","成功","发布","信息"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_3","text":"这两个节点是如何启动的呢？我们来分析下这个launch文件。 learning_launch/simple.launch.py from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'learning_topic' , # 节点所在的功能包 executable = 'topic_helloworld_pub' , # 节点的可执行文件 ), Node ( # 配置一个节点的启动 package = 'learning_topic' , # 节点所在的功能包 executable = 'topic_helloworld_sub' , # 节点的可执行文件名 ), ])","text_tokens":["的","import","learning","topic","package","'","行文","启动","类","node","所在","[","launchdescription","包","executable","pub","返回","from","下","分析","函数","描述","py","actions","是","两个","如何","呢","return","名","def",",",".","功能",":","sub","生成","来","文件","可执行文件","ros","#","generate","我们","(","_","自动","=","执行","/"," ","？","。","description","simple","launch","这个","一个",")","配置","helloworld","]","节点","这","信息"],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_4","text":"我们使用ros2命令在终端中启动节点时，还可以在命令后配置一些传入程序的参数，使用launch文件一样可以做到。","text_tokens":["一些","的","传入","启动","中","时","在","，","参数","终端","后","文件","命令","程序","一样","我们","。","launch","还","可以","配置","ros2","节点","使用","做到"],"title":"命令行参数配置","title_tokens":["配置","命令行","命令","参数"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_5","text":"比如我们想要运行一个Rviz可视化上位机，并且加载某一个配置文件，使用命令行的话，是这样的： $ ros2 run rviz2 rviz2 -d <PACKAGE-PATH>/rviz/turtle_rviz.rviz 命令后边还得跟一长串配置文件的路径，如果放在launch文件里，启动就优雅很多了： $ ros2 launch learning_launch rviz.launch.py","text_tokens":["的","比如","d","learning","配置文件","package","的话","启动","：","后边","命令行","一长串","，","跟","优雅","-","path","py","是","就","得","了",".","很多","run","turtle","文件","命令","rviz2","运行","rviz",">","可视","我们","_","放在","/"," ","长串","加载","这样","一个","如果","$","还","launch","可视化","上位","配置","路径","里","并且","<","ros2","某","机","使用","想要"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_6","text":"命令行后边的参数是如何通过launch传入节点的呢？来看下这个launch文件。 learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 rviz_config = os . path . join ( # 找到配置文件的完整路径 get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'rviz2' , # 节点所在的功能包 executable = 'rviz2' , # 节点的可执行文件名 name = 'rviz2' , # 对节点重新命名 arguments = [ '-d' , rviz_config ] # 加载命令行参数 ) ])","text_tokens":["learning","d","启动","directory","[","os","重新","下","config","packages","呢","def","/","？","share","arguments","launch","get","路径","]","对","import","传入","行文","launchdescription","executable","返回","from","-","py","return","来看",",",".","功能","查询",":","生成","可执行文件","命令","ros","generate","配置","重新命名","join","ament","package","'","类","所在","node","完整","后边","函数","是","参数","python","命名","通过","turtle","rviz","#","(","自动","=","执行"," ","这个","节点","的","配置文件","name","包","找到","命令行","path","描述","actions","如何","名","index","文件","方法","rviz2","_","。","description","加载","一个",")","信息"],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_7","text":"ROS社区中的资源非常多，当我们使用别人代码的时候，经常会发现通信的话题名称不太符合我们的要求，能否对类似的资源重新命名呢？ 为了提高软件的复用性，ROS提供了资源重映射的机制，可以帮助我们解决类似的问题。","text_tokens":["的","映射","提高","要求","会","非常","发现","符合","能否","社区","中","代码","，","经常","重新","软件","重","通信","解决","呢","了","命名","类似","帮助","复用","为了","当","问题","ros","提供","我们","话题","资源"," ","名称","不太","？","。","多","性","别人","时候","机制","可以","重新命名","使用","对"],"title":"资源重映射","title_tokens":["映射","重","资源"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_8","text":"启动一个终端，运行如下例程，很快会看到出现了两个小海龟仿真器界面；再打开一个终端，发布如下话题，让海龟1动起来，海龟2也会一起运动： $ ros2 launch learning_launch rviz.launch.py $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":["topic","learning","如下","会","y","rate","启动","}","：","pub","x","例程","让","，","动","起来","turtle1","也","--","py","两个","vel","很快","了","终端","海龟","仿真器","一起",".",",",":","看到","小海","z","\"","linear","运行","rviz","话题","_","小海龟","cmd","/"," ","twist","{","一个","launch","$","geometry","打开","运动","1.8","2","出现","仿真","再","真器","1","ros2","msgs","2.0","0.0","msg","发布","界面","angular","；"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_9","text":"为什么两个海龟都会动呢？这里要用到turtlesim功能包里另外一个节点，叫做mimic，它的功能是订阅某一个海龟的Pose位置，通过计算，变换成一个同样运动的速度指令，发布出去。 至于mimic节点订阅或者发布的话题名叫什么呢？我们就可以通过重映射修改成对应任意海龟的名字。 learning_launch/remapping.launch.py from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 namespace = 'turtlesim1' , # 节点所在的命名空间 executable = 'turtlesim_node' , # 节点的可执行文件名 name = 'sim' # 对节点重新命名 ), Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 namespace = 'turtlesim2' , # 节点所在的命名空间 executable = 'turtlesim_node' , # 节点的可执行文件名 name = 'sim' # 对节点重新命名 ), Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 executable = 'mimic' , # 节点的可执行文件名 name = 'mimic' , # 对节点重新命名 remappings = [ # 资源重映射列表 ( '/input/pose' , '/turtlesim1/turtle1/pose' ), # 将/input/pose话题名修改为/turtlesim1/turtle1/pose ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), # 将/output/cmd_vel话题名修改为/turtlesim2/turtle1/cmd_vel ] ) ])","text_tokens":["learning","为","启动","[","重新","它","用到","就","呢","vel","def","同样","或者","修改","资源","/","？","成","launch","]","对","import","行文","launchdescription","executable","返回","，","from","turtle1","空间","py","两个","出去","return","名叫",",","功能",".",":","turtlesim2","为什么","生成","可执行文件","pose","ros","至于","generate","会动","我们","变换","要","运动","配置","重新命名","remappings","什么","mimic","映射","package","'","类","所在","node","叫做","计算","另外","turtlesim","函数","是","位置","海龟","命名","通过","#","(","自动","=","执行","cmd"," ","remapping","里","指令","节点","任意","名字","都","的","订阅","name","input","turtlesim1","包","速度","这里","重","output","描述","actions","名","文件","namespace","话题","_","sim","。","将","description","一个","可以",")","某","发布","对应","信息","列表"],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#ros","text":"ROS系统中的参数，也可以在Launch文件中设置。","text_tokens":["的","也","launch","可以","文件","ros","中","参数","设置","在","，","。","系统"],"title":"ROS参数设置","title_tokens":["设置","ros","参数","参数设置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_10","text":"启动一个终端，运行如下命令： $ ros2 launch learning_launch parameters.launch.py 在启动的海龟仿真器中，我们看到背景颜色被改变了，这个颜色参数的设置就是在launch文件中完成的。","text_tokens":["的","learning","如下","被","启动","：","中","完成","在","，","py","改变","参数","了","终端",".","海龟","仿真器","设置","看到","文件","命令","背景","运行","颜色","我们","_"," ","。","一个","launch","$","这个","仿真","parameters","就是","真器","ros2"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_11","text":"我们看下在launch文件中如何来设置参数的。 learning_launch/parameters.launch.py from launch import LaunchDescription # launch文件的描述类 from launch.actions import DeclareLaunchArgument # 声明launch文件内使用的Argument类 from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) # 创建一个Launch文件内参数（arg）background_r ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) # 创建一个Launch文件内参数（arg）background_g ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) # 创建一个Launch文件内参数（arg）background_b ) return LaunchDescription ([ # 返回launch文件的描述信息 background_r_launch_arg , # 调用以上创建的参数（arg） background_g_launch_arg , background_b_launch_arg , Node ( # 配置一个节点的启动 package = 'turtlesim' , executable = 'turtlesim_node' , # 节点所在的功能包 name = 'sim' , # 对节点重新命名 parameters = [{ # ROS参数列表 'background_r' : LaunchConfiguration ( 'background_r' ), # 创建参数background_r 'background_g' : LaunchConfiguration ( 'background_g' ), # 创建参数background_g 'background_b' : LaunchConfiguration ( 'background_b' ), # 创建参数background_b }] ), ]) Attention launch文件中出现的argument和parameter，虽都译为“参数”，但含义不同： - argument：仅限launch文件内部使用，方便在launch中调用某些数值； - parameter：ROS系统的参数，方便在节点见使用某些数值。","text_tokens":["learning","为","}","启动","[","但","方便","重新","”","def","声明","/","launch","]","对","import","中","launchdescription","executable","和","返回","以上","from","，","-","py","background","default","return",",",".","功能",":","生成","ros","虽","generate","我们","见","84","{","配置","重新命名","parameters","使用","value","textsubstitution","译","'","package","类","所在","node","turtlesim","函数","0","substitutions","参数","命名","内","parameter","某些","来","#","(","自动","=","declarelaunchargument"," ","g","仅限","r","出现","节点","都","；","的","name","：","内部","包","数值","在","argument","系统","描述","actions","launchconfiguration","“","如何","b","设置","arg","创建","（","文件","）","_","text","看下","sim","。","description","调用","一个",")","含义","不同","attention","信息","列表","122"],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_12","text":"以上例程我们在launch文件中一个一个的设置参数，略显麻烦，当参数比较多的时候，建议使用参数文件进行加载。 learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 config = os . path . join ( # 找到参数文件的完整路径 get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 executable = 'turtlesim_node' , # 节点的可执行文件名 namespace = 'turtlesim2' , # 节点所在的命名空间 name = 'sim' , # 对节点重新命名 parameters = [ config ] # 加载参数文件 ) ])","text_tokens":["learning","启动","directory","[","os","重新","config","packages","def","略显","当","/","share","launch","时候","get","路径","]","对","import","行文","中","launchdescription","executable","例程","返回","，","以上","from","yaml","空间","py","return",",",".","功能","查询",":","turtlesim2","生成","可执行文件","ros","generate","我们","配置","重新命名","join","parameters","ament","使用","建议","package","'","比较","类","node","所在","完整","turtlesim","函数","参数","python","命名","#","(","自动","=","执行"," ","多","节点","的","麻烦","name","包","找到","在","path","描述","actions","名","设置","文件","方法","namespace","_","sim","。","description","加载","一个",")","信息","进行","index"],"title":"加载参数文件","title_tokens":["文件","参数","加载"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_2","text":"在复杂的机器人系统中，launch文件也会有很多，此时我们可以使用类似编程中的include机制，让launch文件互相包含。","text_tokens":["的","会","中","复杂","包含","让","在","，","系统","也","有","互相","类似","很多","编程","文件","机器人","include","我们","。","launch","可以","此时","机器","机制","使用"],"title":"Launch文件包含","title_tokens":["文件","launch","包含"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_13","text":"learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch.actions import IncludeLaunchDescription # 节点启动的描述类 from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction # launch文件中的执行动作 from launch_ros.actions import PushRosNamespace # ROS命名空间配置 def generate_launch_description (): # 自动生成launch文件的函数 parameter_yaml = IncludeLaunchDescription ( # 包含指定路径下的另外一个launch文件 PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( # 对指定launch文件中启动的功能加上命名空间 actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ # 返回launch文件的描述信息 parameter_yaml_with_namespace ])","text_tokens":["learning","启动","directory","[","os","下","packages","def","includelaunchdescription","/","share","launch","get","路径","groupaction","]","对","import","中","launchdescription","返回","from","空间","yaml","py","return",",",".","功能","查询",":","turtlesim2","生成","动作","ros","generate","配置","join","parameters","ament","package","'","类","另外","函数","python","命名","parameter","#","(","自动","执行","="," ","节点","pushrosnamespace","的","pythonlaunchdescriptionsource","加上","包","包含","path","描述","actions","指定","nonamespace","文件","方法","namespace","_","with","description","一个",")","namespaces","信息","sources","index"],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_14","text":"... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ...","text_tokens":["'","package","...","name","[","resource","os","+","data","config","packages","path","py","*",",",".","glob","files","rviz","(","_","=","/"," ","share","launch",")","join","]","ament","xml","index"],"title":"功能包编译配置","title_tokens":["配置","功能","包","编译"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docs.ros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["tutorials","html","-",".",":","using","main","https","ros","org","docs","projects","/"," ","humble","launch","for","ros2","large","en"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/","text":"TF：机器人坐标系管理神器 坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器—— TF 。 机器人中的坐标系 机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做 基坐标系 Base Frame，机器人安装位置在外部环境下的参考系叫做 世界坐标系 World Frame，机器人末端夹爪的位置叫做 工具坐标系 ，外部被操作物体的位置叫做 工件坐标系 ，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是 基坐标系 Base Link，雷达所在的位置叫做 雷达坐标系 laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做 里程计坐标系 odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做 地图坐标系 map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为 平移和旋转 两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实就是向量的数学描述。 ROS中TF功能的底层原理，就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。 TF命令行操作 ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。 小海龟跟随例程 这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools $ sudo pip3 install transforms3d 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 当我们控制一只海龟运动时，另外一只海龟也会跟随运动。 查看TF树 在当前运行的两只海龟中，有哪些坐标系呢，我们可以通过这个小工具来做查看。 $ ros2 run tf2_tools view_frames 默认在当前终端路径下生成了一个frames.pdf文件，打开之后，就可以看到系统中各个坐标系的关系了。 查询坐标变换信息 只看到坐标系的结构还不行，如果我们想要知道某两个坐标系之间的具体关系，可以通过tf2_echo这个工具查看： $ ros2 run tf2_ros tf2_echo turtle2 turtle1 运行成功后，终端中就会循环打印坐标系的变换数值了，由平移和旋转两个部分组成，还有旋转矩阵。 坐标系可视化 看数值还不直观？可以试试用可视化软件来做显示： $ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 再让小海龟动起来，Rviz中的坐标轴就会开始运动，这样是不是更加直观了呢！ 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。 静态TF广播 我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为 静态TF变换 ，我们来看看在程序中该如何实现？ 运行效果 启动终端，运行如下命令： $ ros2 run learning_tf static_tf_broadcaster $ ros2 run tf2_tools view_frames 可以看到当前系统中存在两个坐标系，一个是world，一个是house，两者之间的相对位置不会发生改变，通过一个静态的TF对象进行维护。 代码解析 来看下在代码中是如何创建坐标系并且发布静态变换的。 learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？ TF监听 我们再来学习下如何查询两个坐标系之间的位置关系。 运行效果 启动一个终端，运行如下节点，就可以在终端中看到周期显示的坐标关系了。 $ ros2 run learning_tf tf_listener 代码解析 这个节点中是如何查询坐标关系的，我们来看下代码。 learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。 海龟跟随功能解析 还是之前小海龟跟随的示例，我们自己通过代码来实现一下。 运行效果 先看下实现的效果，启动终端后，通过如下命令启动例程： $ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 看到的效果和ROS自带的例程相同。 原理解析 在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心就是通过坐标系实现向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。 Launch文件解析 先来看下刚才运行的launch文件，里边启动了四个节点，分别是： 小海龟仿真器 海龟1的坐标系广播 海龟2的坐标系广播 海龟跟随控制 其中，两个坐标系的广播复用了turtle_tf_broadcaster节点，通过传入的参数名修改维护的坐标系名称。 learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ]) 坐标系动态广播 海龟1和海龟2在world坐标系下的坐标变换，在turtle_tf_broadcaster节点中实现，除了海龟坐标系的名字不同之外，针对两个海龟的功能是一样的。 learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 海龟跟随 坐标系都正常广播了，接下来我们就可以订阅两只海龟的位置关系，并且变换成速度指令进行控制啦。 learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":["周期","—","为","原理","被","learning","5.0","代码","具体","下","出","距离","编译","跟随运动","一层","缓冲区","坐标系","改变","那","vel","得","好","if","linear","转变成","不要","except","listener","share","launch","两只","工件","机器人学","怎么样","做","成功","初始化","至关重要","launchdescription","和","spawn","详细","及时","lookup","from","四","turtle1","也","之前","5","控制","done","有","么","不断","格外",":","其实","!","概念","subscription","接下来","外部","setup","我们","demo","docs","变换","管理","小海龟","需要","连线","上","{","forward","$","运动","配置","parameters","0.0","准备就绪","之后","math","the","基于","目标","'","不是","rate","完整","另外","基本","链接","map","先看","位置","向量","大家","python3","transformexception","神器","海龟","clock","位","之外","绝对","中是","turtle","居","来","tflistener","shutdown","roll","移动机器人","有所","logger","线速度","不会","@","欧拉","(","declarelaunchargument"," ","successfully","包括","一下","broadcaster2","8","试试","清楚","底层","broadcaster1","false","相对","夹","angular","ready","publish","拆","订阅","默认","否则","命令行","树","速度","这些","报告","主要","呗","环境","怎样","publisher","数据","描述","客户","名","了","设置","看看","house","准备","后","__","用","可视","长度","org","_","小","生变","将","pos","description","移动","如果","应该","并","知识","apt","信息","en","还会","欧拉角","}","f","解析","打印","末端","变得","查看","还有","戳","10.0","html","发生","想起","spin","向","euler","time","机器人","main","/","管理系","这样","get","async","操作","路径","transformbroadcaster","]","变化","角度","是不是","四乘","会","传入","人学","背后","none","实现","父类","float","两个","bin","方向","return","累积","来看","销毁",",","等待","entry","物体","跟随","静态","to","pdf","标志","translation","twist","没有","teleop","左边","表示","客户端","打开","echo","ros2","优先","frame","else","info","package","statictransformbroadcaster","y","callback","有点","哪个","x","计算","给","s","turtlename","源","函数","laser","是","env","已经","角速度","python","还是","很多","trans","至关","作用","工具","通过","小海","范围","一只","不行","消息","#","保存","编写","爪","这个","is","服务","coding","not","自己","更新","里程","良好","world","name","没","数值","发生变化","时","destroy","让","sudo","yaw",".__","软件","now","quaternion","actions","请求","launchconfiguration","核心","安装","创建","算法","scale","务器","封装","、","当前","失败","方法","时刻","话题","prefix","quat","。","可以","frames","4","又会有","就是","并且","2","1","内容","很","com","提示","这","外部环境","臂","根据","比如","d","啦","启动","数学","之为","经过","view","tutorials","3","监听器","--","重要","呢","key","def","中间","result","修改","当","只","维护","rel","child","两者","sendtransform","guyuehome","数","挑战","tf","了解","成","姿态","平移","header","时候","理论知识","speed","true","仿真","开始","真器","想要","激光","tf2","教材","显示","非常","管理系统","不变","然后","先","动","该","四元","-","试一试","四个","空间","send","机械","矩阵","高中","解决","default","学习","三个","服务器","request","误差","示例","一本","init","参考系","run","保持","生成","命令","scripts","on","pose","ros","transforms3d","者","generate","基础","全局","针对","humble","理论","除了","可视化","msgs","定义","使用","坐标","固定","称之为","时间","transformstamped","中画","这种","类","所在","叫做","你家","随便","定时器","与","基","接下","timer","起来","as","source","到","string","仿真器","监听","1.0","内","install","statictfbroadcaster","console","parameter","call","只要","srv","库","一样","里边","中该","每","自动","=","cmd","两者之间","args","情况","client","退出","分解","w","完成","ex","包","异常","+","看","回调","直观","更加","继续","最为","底盘","讲解","发送","相应","（","器类","turtle2","理解","\"","段","rviz2","处理","得到","变成","转换","说","following","）","buffer","一种","tools","odom","机器",")","rotation","激光雷达","关系","link","某","古月","效果","发布","由","抓取","世界","地图","[","super","漂移","房子","同理","缓冲","箭头","便于","就","*","could","进入","终端","产生","一起","rclpy","%","选项","stamp","复用","现在","变得复杂","加","动机","动态","看似","？","坐标轴","怎么","geometry","中心","再","入口","pip3","意思","对","转变","一些","import","target","中","就绪","executable","broadcaster","例程","！","，","base","部分","常见","py","transformlistener","transformations","分别","self","功能",".","哪些","查询","加入","参数值","pitch","程序","theta","过程","https","pkg","存在","雷达","显得","形态","xy","名称","要","简单","value","service","id","node","各个","transform","关于","熟悉","utf","说明","turtlesim","知道","0","sqrt","substitutions","参数","class","static","初始","points","try","参考","广播","对象","看到","里程计","获取","定时","循环","相同","运行","rviz","提供","q","create","作者","着急","自带","turtlefollowing","案例","按照","spawner","指令","节点","名字","刚才","finished","msg","都","点","spawned","器","其中","的","transformation","如下","：","接口","复杂","又","在","存储","www","系统","不","如何","旋转","usr","结构","declare","atan2","依然","turtletfbroadcaster","之间","所以","spawning","是否","文件","z",">","组成","慢慢","sim","正常","一个","还","不同","默认值","下来","中心点","进行","关闭"],"title":"TF","title_tokens":["tf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf","text":"坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器—— TF 。","text_tokens":["的","—","会","非常","中","人学","完整","给","在","这些","熟悉","，","该","系统","也","是","坐标系","位置","重要","如何","了","神器","很多","之间","概念","机器人","ros","提供","存在","我们","基础","管理"," ","？","tf","。","一个","机器","机器人学","关系","坐标"],"title":"TF：机器人坐标系管理神器","title_tokens":["机器人","坐标","机器","坐标系","：","神器","管理","tf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_1","text":"机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做 基坐标系 Base Frame，机器人安装位置在外部环境下的参考系叫做 世界坐标系 World Frame，机器人末端夹爪的位置叫做 工具坐标系 ，外部被操作物体的位置叫做 工件坐标系 ，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是 基坐标系 Base Link，雷达所在的位置叫做 雷达坐标系 laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做 里程计坐标系 odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做 地图坐标系 map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为 平移和旋转 两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实就是向量的数学描述。 ROS中TF功能的底层原理，就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。","text_tokens":["抓取","比如","世界","地图","被","为","原理","数学","漂移","末端","下","变得","出","一层","坐标系","就","重要","呢","那","机器人","变得复杂","两者","动机","看似","？","管理系","tf","平移","操作","理论知识","工件","中心","机器人学","变化","对","至关重要","一些","教材","四乘","会","管理系统","中","人学","和","详细","，","四","base","部分","也","空间","两个","有","机械","矩阵","累积","误差","不断","功能","哪些","物体","一本","参考系","格外","跟随","其实","过程","ros","外部","雷达","显得","我们","形态","变换","管理","要","理论","简单","使用","frame","坐标","固定","中画","所在","叫做","关于","基","基本","laser","map","是","位置","向量","大家","参考","内","至关","绝对","工具","里程计","通过","范围","移动机器人","一样","每"," ","两者之间","爪","这个","底层","相对","夹","都","里程","分解","良好","的","world","复杂","在","这些","主要","环境","系统","描述","旋转","安装","了","讲解","之间","封装","方法","。","移动","一个","可以","odom","机器","又会有","就是","关系","link","知识","中心点","进行","外部环境","臂"],"title":"机器人中的坐标系","title_tokens":["的","机器人","机器","坐标系","中","坐标"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_1","text":"ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。","text_tokens":["的","中","先","，","下","该","坐标系","如何","呢","海龟","算法","示例","跟随","小海","通过","机器人","ros","我们","小海龟","一种","？","tf","。","了解","两只","机器","使用","坐标","基于"],"title":"TF命令行操作","title_tokens":["tf","命令行","命令","操作"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_2","text":"这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools $ sudo pip3 install transforms3d 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 当我们控制一只海龟运动时，另外一只海龟也会跟随运动。","text_tokens":["的","会","启动","然后","包","时","另外","sudo","先","具体","，","turtlesim","-","跟随运动","试一试","也","py","控制","就","如何","key","安装","功能","海龟","示例",".","install","相应","跟随","run","通过","小海","turtle","来","文件","一只","当","运行","ros","transforms3d","我们","demo","自动","_","小海龟","需要"," ","？","。","tools","humble","一个","launch","这个","可以","$","teleop","运动","ros2","之后","apt","效果","pip3","tf2","其中"],"title":"小海龟跟随例程","title_tokens":["例程","海龟","小海龟","跟随","小海"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_2","text":"在当前运行的两只海龟中，有哪些坐标系呢，我们可以通过这个小工具来做查看。 $ ros2 run tf2_tools view_frames 默认在当前终端路径下生成了一个frames.pdf文件，打开之后，就可以看到系统中各个坐标系的关系了。","text_tokens":["的","中","默认","各个","在","view","，","下","查看","系统","有","坐标系","就","呢","了","终端","海龟",".","哪些","run","看到","工具","通过","生成","当前","来","pdf","文件","运行","我们","_","小"," ","。","tools","一个","这个","可以","$","两只","frames","路径","打开","关系","ros2","做","之后","坐标","tf2"],"title":"查看TF树","title_tokens":["tf","树","查看"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_3","text":"只看到坐标系的结构还不行，如果我们想要知道某两个坐标系之间的具体关系，可以通过tf2_echo这个工具查看： $ ros2 run tf2_ros tf2_echo turtle2 turtle1 运行成功后，终端中就会循环打印坐标系的变换数值了，由平移和旋转两个部分组成，还有旋转矩阵。","text_tokens":["的","会","：","中","数值","打印","和","具体","，","还有","查看","部分","知道","turtle1","两个","坐标系","就","矩阵","旋转","结构","终端","了","之间","看到","通过","工具","不行","run","后","turtle2","循环","只","运行","ros","组成","我们","_","变换"," ","。","如果","还","可以","这个","$","平移","echo","关系","ros2","某","成功","想要","由","坐标","tf2"],"title":"查询坐标变换信息","title_tokens":["变换","坐标","信息","查询"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_4","text":"看数值还不直观？可以试试用可视化软件来做显示： $ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 再让小海龟动起来，Rviz中的坐标轴就会开始运动，这样是不是更加直观了呢！ 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。","text_tokens":["d","原理","下","便于","--","就","呢","不要","/","？","tf","了解","share","坐标轴","这样","再","开始","做","意思","tf2","是不是","显示","会","中","！","背后","先","，","动","-","py",".","run","跟随","pkg","我们","小海龟","$","可视化","运动","ros2","使用","坐标","不是","有点","起来","是","大家","海龟","小海","turtle","来","rviz","("," ","着急","案例","试试","的","：","数值","让","软件","怎样","看","不","直观","更加","了","方法","理解","rviz2","用","慢慢","可视","_","prefix","。","还","可以",")","这"],"title":"坐标系可视化","title_tokens":["坐标","可视化","可视","坐标系"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_3","text":"我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为 静态TF变换 ，我们来看看在程序中该如何实现？","text_tokens":["的","比如","拆","这种","之为","中","哪个","发生变化","你家","和","房子","在","主要","呗","，","基本","常见","系统","实现","也","不","是","坐标系","就","位置","如何","那","安装","最为","发生","底盘","看看","之间","作用","好","静态","来","机器人","只要","程序","不会","说","中该","雷达","我们","变换","管理"," ","？","tf","生变","。","一个","这个","简单","应该","机器","相对","情况","激光雷达","试试","关系","变化","很","之后","进行","坐标","激光","对","称之为"],"title":"静态TF广播","title_tokens":["tf","静态","广播"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_5","text":"启动终端，运行如下命令： $ ros2 run learning_tf static_tf_broadcaster $ ros2 run tf2_tools view_frames 可以看到当前系统中存在两个坐标系，一个是world，一个是house，两者之间的相对位置不会发生改变，通过一个静态的TF对象进行维护。","text_tokens":["world","的","learning","如下","启动","：","中","broadcaster","view","，","系统","两个","是","坐标系","位置","改变","static","终端","发生","house","对象","run","看到","之间","通过","静态","当前","命令","维护","运行","两者","不会","存在","_"," ","tf","两者之间","tools","。","一个","$","可以","frames","相对","ros2","进行","坐标","tf2"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_6","text":"来看下在代码中是如何创建坐标系并且发布静态变换的。 learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？","text_tokens":["5.0","learning","为","欧拉角","}","[","super","代码","经过","下","戳","编译","10.0","3","坐标系","*","呢","def","spin","向","rclpy","euler","选项","stamp","main","child","sendtransform","guyuehome","数","/","tf","？","geometry","平移","header","get","时候","]","变化","入口","tf2","初始化","import","不变","中","broadcaster","，","from","none","该","父类","-","四元","py","两个","transformations","bin","来看","销毁",",",".","self","示例","等待","功能","加入","entry","init","查询",":","静态","!","to","保持","pitch","scripts","程序","ros","setup","我们","变换","需要","translation","{","打开","配置","0.0","ros2","msgs","使用","frame","坐标","时间","目标","transformstamped","id","'","statictransformbroadcaster","y","类","node","x","transform","utf","说明","源","知道","0","是","env","位置","class","static","python3","python","初始","clock","points","到","广播","statictfbroadcaster","对象","console","中是","消息","居","循环","shutdown","roll","库","欧拉","@","#","(","=","作者"," ","编写","args","8","coding","清楚","节点","msg","退出","点","器","的","world","如下","name","w","完成","接口","包","：","destroy","让","又","在","yaw","www","now","quaternion","系统","描述","如何","旋转","usr","设置","创建","了","house","、","（","后","器类","文件","z","\"","__","段","转换","）","_","quat","。","将","一个",")","rotation","2","并且","关系","古月","1","并","com","发布","进行","这"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_4","text":"我们再来学习下如何查询两个坐标系之间的位置关系。","text_tokens":["的","来","。","两个","坐标系","位置","如何","再","学习","关系","我们","查询","坐标","下","之间"],"title":"TF监听","title_tokens":["tf","监听"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_7","text":"启动一个终端，运行如下节点，就可以在终端中看到周期显示的坐标关系了。 $ ros2 run learning_tf tf_listener","text_tokens":["周期","的","显示","learning","如下","启动","中","在","，","就","了","终端","run","看到","运行","_","listener"," ","tf","。","一个","$","可以","关系","ros2","节点","坐标"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_8","text":"这个节点中是如何查询坐标关系的，我们来看下代码。 learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。","text_tokens":["周期","啦","learning","f","}","[","super","代码","缓冲","下","编译","监听器","--","缓冲区","坐标系","*","could","def","进入","spin","rclpy","time","euler","%","选项","好","现在","main","guyuehome","数","except","listener","挑战","/","tf","了解","姿态","get","两只","]","入口","tf2","初始化","对","import","target","broadcaster","lookup","，","from","none","父类","-","四元","py","两个","transformlistener","transformations","bin","return","来看","销毁","self",".",",","示例","查询","等待","功能","加入","init","参数值",":","entry","跟随","!","to","scripts","on","程序","ros","外部","setup","我们","变换","需要","translation","{","左边","static","打开","配置","ros2","使用","value","优先","frame","坐标","固定","时间","目标","'","info","y","海龟","类","node","x","transform","定时器","s","基本","utf","timer","说明","源","知道","0","关闭","as","env","source","位置","参数","class","python3","初始","python","transformexception","监听","string","try","到","points","1.0","parameter","对象","trans","console","中是","tflistener","居","定时","获取","循环","shutdown","有所","logger","库","@","#","(","保存","=","create","作者"," ","编写","案例","这个","args","8","coding","not","：","节点","退出","点","的","world","如下","name","w","默认","接口","数值","ex","destroy","异常","否则","完成","包","让","报告","存储","www","now","quaternion","系统","如何","名","usr","继续","设置","创建","了","declare","大家","house","之间","（","后","当前","失败","文件","z","\"","__","处理",">","用","时刻","）","_","buffer","quat","。","pos","一个","如果",")","rotation","默认值","2","关系","古月","某","1","并","com","进行","信息"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_9","text":"还是之前小海龟跟随的示例，我们自己通过代码来实现一下。","text_tokens":["的","来","之前","一下","自己","通过","我们","海龟","代码","还是","小海龟","示例","，","。","跟随","实现","小海"],"title":"海龟跟随功能解析","title_tokens":["功能","海龟","跟随","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_10","text":"先看下实现的效果，启动终端后，通过如下命令启动例程： $ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 看到的效果和ROS自带的例程相同。","text_tokens":["的","learning","如下","启动","：","例程","和","，","下","实现","turtlesim","py","先看","key","终端",".","run","看到","通过","turtle","后","命令","相同","ros","following","demo","_"," ","tf","。","自带","teleop","launch","$","ros2","效果"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_11","text":"在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心就是通过坐标系实现向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。","text_tokens":["还会","比如","周期","代码","同理","距离","下","箭头","坐标系","就","得","中间","想起","一起","向","好","加","两者","动态","？","tf","这样","怎么","两只","仿真","中心","再","真器","怎么样","做","角度","是不是","中","然后","例程","和","，","动","该","实现","turtle1","也","有","高中","方向","解决","学习","三个","么","不断","参考系","跟随","我们","全局","变换","连线","上","要","表示","运动","定义","坐标","时间","不是","叫做","随便","计算","与","起来","位置","向量","仿真器","海龟","监听","参考","广播","通过"," ","按照","这个","相对","的","world","时","速度","在","描述","不","看","如何","核心","了","设置","封装","所以","turtle2","方法","得到","用","说","长度","话题","。","一个","可以","2","就是","1","某","很","中心点","发布","这"],"title":"原理解析","title_tokens":["原理","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#launch","text":"先来看下刚才运行的launch文件，里边启动了四个节点，分别是： 小海龟仿真器 海龟1的坐标系广播 海龟2的坐标系广播 海龟跟随控制 其中，两个坐标系的广播复用了turtle_tf_broadcaster节点，通过传入的参数名修改维护的坐标系名称。 learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ])","text_tokens":["learning","}","启动","[","下","坐标系","def","复用","修改","维护","listener","/","tf","launch","仿真","]","真器","import","传入","target","launchdescription","broadcaster","executable","先","，","from","四个","turtle1","py","控制","两个","default","return","来看","分别",",",".",":","跟随","ros","generate","demo","小海龟","名称","{","parameters","value","frame","坐标","package","'","node","turtlename","turtlesim","是","substitutions","参数","仿真器","海龟","广播","小海","turtle","通过","运行","里边","(","=","declarelaunchargument"," ","broadcaster2","节点","broadcaster1","刚才","其中","的","name","：","actions","launchconfiguration","名","了","文件","turtle2","following","_","sim","。","description",")","2","1"],"title":"Launch文件解析","title_tokens":["文件","launch","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_12","text":"海龟1和海龟2在world坐标系下的坐标变换，在turtle_tf_broadcaster节点中实现，除了海龟坐标系的名字不同之外，针对两个海龟的功能是一样的。 learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], },","text_tokens":["learning","为","f","}","欧拉角","[","super","代码","下","戳","编译","3","坐标系","*","def","spin","向","rclpy","euler","选项","stamp","main","转变成","child","sendtransform","guyuehome","动态","数","listener","/","tf","geometry","平移","get","header","transformbroadcaster","]","变化","入口","tf2","初始化","转变","import","中","broadcaster","和","及时","，","from","none","实现","-","父类","四元","send","py","两个","transformations","bin","销毁","self","功能",".","示例",",","等待","加入","entry","init","参数值",":","!","to","pitch","scripts","程序","pose","theta","subscription","ros","者","外部","setup","变换","小海龟","需要","名称","translation","针对","{","除了","打开","配置","0.0","ros2","msgs","使用","value","优先","frame","坐标","the","时间","目标","transformstamped","id","'","y","类","callback","node","x","transform","turtlename","utf","说明","源","turtlesim","函数","知道","0","关闭","是","env","位置","参数","class","python3","初始","python","海龟","string","到","clock","points","static","广播","parameter","之外","对象","console","小海","turtle","居","消息","获取","循环","roll","shutdown","库","一样","欧拉","@","#","(","=","进行","create","作者"," ","编写","args","8","coding","节点","名字","msg","更新","退出","点","器","world","的","transformation","如下","订阅","name","w","默认","接口","数值","完成","destroy","否则","包","让","：","在","yaw","www","now","quaternion","系统","回调","旋转","usr","设置","创建","declare","turtletfbroadcaster","、","（","后","文件","z","\"","__","处理","变成","用","转换","）","_","。","将","一个","不同",")","rotation","默认值","2","1","古月","并","com","q","信息"],"title":"坐标系动态广播","title_tokens":["坐标","广播","动态","坐标系"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_13","text":"坐标系都正常广播了，接下来我们就可以订阅两只海龟的位置关系，并且变换成速度指令进行控制啦。 learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], },","text_tokens":["周期","啦","learning","f","}","[","super","代码","缓冲","距离","查看","编译","跟随运动","监听器","缓冲区","坐标系","就","*","could","vel","def","进入","产生","result","spin","rclpy","time","选项","main","if","rel","linear","guyuehome","except","listener","/","tf","成","geometry","姿态","get","async","points","两只","true","speed","]","变化","成功","角度","入口","tf2","初始化","import","console","就绪","broadcaster","spawn","lookup","，","from","none","实现","-","父类","turtle1","float","py","5","控制","transformlistener","transformations","bin","done","return","已经","服务器","request","销毁","self",".","功能","示例",",","等待","加入","entry","init","参数值",":","跟随","标志","!","to","生成","scripts","on","theta","程序","接下来","ros","外部","setup","我们","变换","需要","xy","translation","twist","没有","{","forward","左边","客户端","表示","static","打开","运动","配置","ros2","msgs","准备就绪","math","使用","value","优先","frame","坐标","service","固定","else","时间","目标","'","info","y","rate","类","node","x","计算","transform","接下","定时器","utf","timer","说明","源","turtlesim","知道","0","关闭","sqrt","as","位置","env","source","参数","class","python3","初始","python","海龟","transformexception","监听","string","位","try","到","广播","parameter","trans","角速度","对象","通过","turtle","居","消息","定时","获取","线速度","call","srv","logger","库","循环","shutdown","@","#","(","保存","=","create","作者"," ","cmd","turtlefollowing","successfully","包括","编写","is","服务","args","8","spawner","指令","coding","client","节点","not","：","finished","msg","false","退出","angular","都","spawned","点","ready","的","publish","如下","订阅","name","没","默认","接口","数值","ex","destroy","速度","异常","否则","完成","包","报告","存储",".__","让","www","+","now","publisher","系统","数据","客户","请求","名","usr","了","创建","设置","declare","atan2","scale","依然","务器","发送","是否","spawning","准备","、","后","当前","失败","turtle2","z","\"","__","文件","用","时刻","following","话题","_","buffer","。","正常","一个","如果","还","可以",")","rotation","4","默认值","2","并且","关系","古月","1","并","下来","内容","com","发布","进行","提示","信息","根据"],"title":"海龟跟随","title_tokens":["海龟","跟随"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_14","text":"https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":["main","html","https","ros","org",".","docs","/","tutorials",":","tf2","humble","-","en"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/","text":"URDF：机器人建模方法 ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法—— URDF ，用来描述机器人外观、性能等各方面属性。 机器人的组成 建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由 硬件结构、驱动系统、传感器系统、控制系统 四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备； 驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等； 传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境； 控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。 URDF ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是 XML格式 ，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为 连杆Link ，手肘就类似于机器人电机驱动部分，称为 关节joint 。 所以在URDF建模过程中，关键任务就是通过这里的<link>和<joint>，理清楚每一个连杆和关节的描述信息。 连杆Link的描述 <link>标签用来描述机器人某个刚体部分的 外观和物理属性 ，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。 link里边的<visual>部分用来描述机器人的外观，比如： <geometry>表示 几何形状 ，里边使用<mesh>调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的 <origin>表示 坐标系相对初始位置的偏移 ，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分<collision>，描述 碰撞参数 ，里边的内容似乎和<visual>一样，也有<geometry>和<origin>，看似相同，其实区别还是比较大的。 <visual>部分重在描述机器人看上去的状态，也就是视觉效果； <collision>部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过<visual>来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是<collision>里边<geometry>描述的形状。<origin>坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。 关节Joint描述 机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 parent标签：描述父连杆； child标签：描述子连杆，子连杆会相对父连杆发生运动； origin：表示两个连杆坐标系之间的关系，也就是图中红色的向量，可以理解为这两个连杆该如何安装到一起； axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的； limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等。 Info ROS中关于平移的默认单位是m，旋转是弧度（不是度），所以这里的3.14就表示可以在-180度到180度之间运动，线速度是m/s，角速度是rad/s。 完整机器人模型 最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。 创建机器人模型 好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。 功能包结构 机器人的模型放置在learning_urdf功能包中，功能包中包含的文件夹如下： urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件 模型可视化效果 我们先来看下这个模型的效果，尝试逆向分下一下机器人的结构。 $ ros2 launch learning_urdf display.launch.py 很快就可以看到Rviz中显示的机器人模型啦，大家可以使用鼠标拖拽观察。 从可视化的效果来看，这个机器人由五个link和4个joint组成。 查看URDF模型结构 我们分析的对不对呢，可以在模型文件的路径下，使用urdf_to_graphviz这个小工具来分析下。 $ urdf_to_graphviz mbot_base.urdf # 在模型文件夹下运行 运行成功后会产生一个pdf文件，打开之后就可以看到URDF模型分析的结果啦，是不是和我们的猜测完全相同呢！ 模型文件解析 具体URDF模型什么样的，还是要打开模型来研究。 learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot> 参考链接 https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":["—","为","learning","back","代码","统一","分下","具体","下","似乎","坐标系","关键","得","?","编码器","算力","大","continuous","好","cylinder","yellow","urdf","括号","launch","操作系统","mbot","外界","完全","<","这款","文件夹","成功","度","独立","相关","无法","和","left","无论是","之前","蓝色","也","碰撞","控制","有","鼠标","市面上","当然","较",":","其实","什么样","三维","类型","外部","全称","研究","我们","0.19","1.5707","color","docs","管理","需要","独自","上","$","肌肉","一系列","运动","配置","重在","派","之后","什么","xyz","不是","完整","origin","叫","小臂","链接","第六种","位置","向量","大家","来","线速度","专门","移动机器人","roll","不会","他们","radius"," ","包括","0.18","多","一下","最终","轮子","质心","乍","清楚","等等","应用","在于","相对","第二","；","不仅","parent","display","算作","默认","速度","这些","主要","这里","环境","清晰","父","描述","源代码","了","才能","建模","模型","视觉","rad","0.9","方面","后","revolute","limit","用","转关","可视","org","_","小","将","移动","旋转关节","如果","方式","感知","信息","en","电源","meshes","第二个","0.06","小车","属于","解析","平面","码器","它","查看","不过","length","html","rpy","真实","质量","发生","无限","介绍","限制","机器人","main","碰撞检测","二个","而是","/","管理系","0.16","这样","操作","建模语言","一致","路径","五个","完全相同","圆柱","变化","角度","语言","标签","是不是","会","拖拽","找","电脑","两个","方向","惯性","来看","0.015","类似","to","pdf","允许","思路","几何","则","表示","偏移","打开","ros2","感器","放置","浮动","xml","自身","渲染","无论","引用","info","逆向","y","最大","比较","有点","x","个","计算","正","给","s","理","0.095","尺寸","是","编码","角速度","设备","type","还是","全为","通过","工具","像头","#","看上去","保存","以","这个","自己","于","高","name","各","为此","时","组成部分","外观","让","包含","软件","stl","一般","raw","柱体","安装","创建","、","方法","摄像头","。","white","频繁","包围","可以","两种","4","就是","件夹","驱动器","1","内容","这","外部环境","臂","collision","啦","比如","自定义","启动","0.05","0.025","大臂","tutorials","尝试","分析","xacro","刚体","结果","呢","imu","视觉效果","四大","细节","child","放在","了解","平移","时候","此时","框","一系","包中","滑动","电机","观察","显示","管理系统","先","该","一段","-","连杆","连接","形成","机械","矩阵","robot","控制系统","示例","板载","ros","存放","humble","上去","可视化","系列","0.20","定义","使用","坐标","固定","这种","或","称为","的话","叫做","与","right","caster","起来","格式","m","把","很快","到","1.0","形状","一样","里边","3.14","每","rgba","全都","=","车体","单位","fixed","装置","度到","实打实","讲","先来","分解","摄像","弧度","配置文件","关节","驱使","完成","包","围绕","joint","visual","看","所有","轴","接触","底盘","市面","（","理解","物理","\"","单位向量","以及","肘关节","哪","每个","）","检测","一种","看下","axis","机器","关系","link","某","sphere","效果","直线","由","180","带有","任务","硬件","红色","便于","认识","六种","material","传感器","就","面上","产生","组合","一起","实际","相对运动","最小","动机","圆柱体","看似","状态","？","从","geometry","提前","再","必须","某个","prismatic","对","wheel","一些","网页","第六","中","区别","有点像","！","不能","，","部分","常见","floating","base","平台","py","外壳","手臂","分别","功能",".","哪些","为例","pitch","看上","https","过程","尖括号","雷达","简化","一块","名称","用来","要","桌子","手肘","graphviz","右侧","0.95","关于","熟悉","图中","front","0","极限","version","参数","初始","沿某","参考","看到","为了","相同","载体","驱动","rviz","运行","提供","颜色","应用软件","这么","着急","局","0.4","按照","子","树莓","模型简化","名字","少","自定","都","传感","相机","其中","的","planar","要求","如下","手","：","性能","复杂","等","在","设计","组合而成","系统","不","如何","绿色","旋转","结构","未来","唯一","所以","之间","black","文件","z",">","组成","猜测","属性","正常","调用","一个","还","等于","mesh","开发","进行"],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf","text":"ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法—— URDF ，用来描述机器人外观、性能等各方面属性。","text_tokens":["的","啦","—","性能","为此","各","外观","让","给","等","在","，","下","不过","系统","之前","认识","描述","是","把","如何","呢","得","了","当然","建模","、","介绍","方面","机器人","专门","方法","ros","提供","我们","属性","一种","urdf"," ","？","。","用来","要","一个","操作系统","还","操作","机器","使用"],"title":"URDF：机器人建模方法","title_tokens":["机器人","方法","机器","：","建模","urdf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_1","text":"建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由 硬件结构、驱动系统、传感器系统、控制系统 四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备； 驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等； 传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境； 控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。","text_tokens":["比如","电源","码器","硬件","便于","传感器","面上","imu","编码器","组合","机器人","四大","由","动机","状态","管理系","操作系统","操作","建模语言","再","语言","电机","一些","管理系统","中","电脑","和","先","，","部分","常见","无论是","平台","外壳","控制","机械","市面上","控制系统","类似","其实","板载","过程","外部","雷达","思路","我们","管理","需要","上","感器","使用","派","无论","计算","熟悉","起来","是","编码","把","参数","设备","还是","看到","通过","像头","移动机器人","载体","驱动","里边","每","应用软件"," ","包括","按照","装置","树莓","自己","实打实","清楚","等等","应用","都","；","传感","分解","摄像","的","驱使","组成部分","等","这些","主要","软件","环境","系统","一般","描述","安装","结构","了","底盘","建模","、","市面","以及","组成","摄像头","。","正常","移动","一个","可以","机器","就是","驱动器","感知","开发","进行","这","臂"],"title":"机器人的组成","title_tokens":["的","机器人","组成","机器"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_1","text":"ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是 XML格式 ，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为 连杆Link ，手肘就类似于机器人电机驱动部分，称为 关节joint 。 所以在URDF建模过程中，关键任务就是通过这里的<link>和<joint>，理清楚每一个连杆和关节的描述信息。","text_tokens":["比如","代码","统一","大臂","任务","下","刚体","就","关键","呢","产生","组合","相对运动","机器人","urdf","？","括号","这样","必须","一系","<","标签","电机","网页","独立","无法","中","有点像","和","，","部分","连杆","也","连接","机械","手臂","类似","看上","过程","ros","尖括号","全称","外部","我们","独自","桌子","手肘","上去","肌肉","一系列","运动","系列","使用","xml","之后","自身","右侧","称为","有点","叫做","格式","小臂","理","是","大家","通过","驱动","每","看上去","他们"," ","这个","乍","自己","于","清楚","相对","都","其中","的","不仅","关节","手","算作","在","这些","组合而成","joint","这里","环境","清晰","描述","看","如何","源代码","才能","建模","模型","所以","文件","方法","肘关节",">","组成","属性","。","一个","包围","还","可以","机器","就是","link","开发","由","外部环境","信息","臂"],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#link","text":"<link>标签用来描述机器人某个刚体部分的 外观和物理属性 ，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。 link里边的<visual>部分用来描述机器人的外观，比如： <geometry>表示 几何形状 ，里边使用<mesh>调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的 <origin>表示 坐标系相对初始位置的偏移 ，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分<collision>，描述 碰撞参数 ，里边的内容似乎和<visual>一样，也有<geometry>和<origin>，看似相同，其实区别还是比较大的。 <visual>部分重在描述机器人看上去的状态，也就是视觉效果； <collision>部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过<visual>来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是<collision>里边<geometry>描述的形状。<origin>坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。","text_tokens":["比如","第二个","自定义","小车","它","刚体","似乎","坐标系","真实","就","质量","实际","算力","大","好","视觉效果","机器人","碰撞检测","动机","圆柱体","二个","看似","状态","这样","geometry","平移","时候","一致","提前","框","外界","圆柱","<","某个","标签","会","中","区别","和","，","该","部分","连杆","连接","蓝色","也","碰撞","控制","机械","矩阵","方向","惯性","有","分别","较","类似","其实","为例","pitch","看上","过程","三维","简化","几何","我们","则","需要","名称","用来","上","表示","偏移","上去","运动","重在","定义","使用","坐标","y","的话","比较","x","计算","与","origin","0","尺寸","是","位置","参数","初始","到","还是","形状","全为","通过","来","为了","roll","移动机器人","相同","一样","里边","颜色","看上去","以"," ","包括","车体","这个","轮子","模型简化","质心","自定","相对","第二","；","的","高","要求","如下","name","：","算作","时","复杂","外观","等","在","设计","joint","软件","stl","visual","描述","不","raw","如何","绿色","旋转","柱体","了","接触","未来","模型","视觉","、","文件","物理","z",">","用","属性","检测","。","将","调用","移动","一个","如果","可以","机器","就是","link","mesh","内容","效果","臂","collision"],"title":"连杆Link的描述","title_tokens":["的","连杆","描述","link"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#joint","text":"机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 parent标签：描述父连杆； child标签：描述子连杆，子连杆会相对父连杆发生运动； origin：表示两个连杆坐标系之间的关系，也就是图中红色的向量，可以理解为这两个连杆该如何安装到一起； axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的； limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等。 Info ROS中关于平移的默认单位是m，旋转是弧度（不是度），所以这里的3.14就表示可以在-180度到180度之间运动，线速度是m/s，角速度是rad/s。","text_tokens":["比如","为","180","带有","小车","属于","平面","不过","红色","刚体","六种","坐标系","就","产生","发生","无限","一起","continuous","相对运动","限制","机器人","child","最小","urdf","而是","/","这样","平移","此时","变化","角度","滑动","标签","电机","prismatic","一些","第六","度","会","中","区别","和","不能","，","该","floating","一段","-","连杆","连接","也","两个","有","机械","方向","较","允许","ros","类型","上","要","表示","运动","之后","使用","浮动","xml","什么","固定","坐标","这种","info","最大","不是","比较","正","关于","origin","s","叫","图中","第六种","极限","是","m","位置","向量","角速度","到","沿某","还是","通过","线速度","不会","3.14","每"," ","单位","fixed","最终","轮子","这个","子","度到","名字","在于","少","相对","都","；","相机","的","弧度","planar","关节","parent","：","默认","速度","等","在","围绕","joint","这里","一般","父","描述","不","轴","如何","旋转","安装","了","才能","模型","唯一","之间","所以","（","rad","理解","z","单位向量","revolute","limit","哪","转关","）","一种","。","axis","旋转关节","频繁","一个","可以","两种","机器","方式","就是","等于","关系","link","某","1","内容","直线","进行","这","臂"],"title":"关节Joint描述","title_tokens":["描述","关节","joint"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_2","text":"最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。","text_tokens":["的","找","完成","中","时","完整","和","代码","在","先","，","joint","先来","下","部分","形成","描述","看","不","是","所有","就","大家","了","robot","组合","模型","哪些","所以","机器人","细节","组成","每","每个","全都","一块","放在","urdf"," ","。","着急","了解","局","一个","这个","最终","机器","完全","再","link","某","之后","由","标签","对"],"title":"完整机器人模型","title_tokens":["机器","机器人","模型","完整"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_3","text":"好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。","text_tokens":["的","啦","完整","，","它","看","了","模型","还是","示例","一起","建模","为例","好","机器人","移动机器人","过程","动机","我们","以","这么","urdf"," ","看下","。","要","移动","多","一个","机器","讲","这款"],"title":"创建机器人模型","title_tokens":["创建","机器人","模型","机器"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_4","text":"机器人的模型放置在learning_urdf功能包中，功能包中包含的文件夹如下： urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件","text_tokens":["的","引用","learning","meshes","如下","渲染","或","相关","启动","配置文件","：","中","包含","在","，","xacro","功能","模型","文件","机器人","rviz","存放","保存","_","urdf"," ","launch","机器","配置","件夹","放置","文件夹","包中"],"title":"功能包结构","title_tokens":["结构","功能","包"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_5","text":"我们先来看下这个模型的效果，尝试逆向分下一下机器人的结构。 $ ros2 launch learning_urdf display.launch.py 很快就可以看到Rviz中显示的机器人模型啦，大家可以使用鼠标拖拽观察。 从可视化的效果来看，这个机器人由五个link和4个joint组成。","text_tokens":["的","啦","learning","显示","逆向","display","拖拽","中","个","和","先","分下","，","joint","尝试","下","py","鼠标","就","来看","很快","结构","大家",".","模型","看到","机器人","rviz","组成","可视","我们","_","urdf"," ","。","从","一下","这个","$","launch","机器","可以","可视化","4","五个","ros2","link","使用","效果","由","观察"],"title":"模型可视化效果","title_tokens":["效果","模型","可视化","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_2","text":"我们分析的对不对呢，可以在模型文件的路径下，使用urdf_to_graphviz这个小工具来分析下。 $ urdf_to_graphviz mbot_base.urdf # 在模型文件夹下运行 运行成功后会产生一个pdf文件，打开之后就可以看到URDF模型分析的结果啦，是不是和我们的猜测完全相同呢！","text_tokens":["的","啦","是不是","会","不是","和","！","在","，","下","分析","base","不","结果","就","呢","产生",".","模型","看到","to","工具","后","来","文件","pdf","相同","运行","#","猜测","我们","_","urdf","小"," ","。","一个","这个","可以","$","路径","mbot","打开","graphviz","件夹","完全","完全相同","使用","文件夹","成功","之后","对"],"title":"查看URDF模型结构","title_tokens":["结构","查看","模型","urdf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_6","text":"具体URDF模型什么样的，还是要打开模型来研究。 learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot>","text_tokens":["的","back","learning","parent","0.06","name","0.95","0.05","0.025","right","具体","origin","caster","，","joint","left","base","length","-","visual","front","0","0.095","material","version","rpy","?",".","模型","还是","robot","type","0.015","1.0","continuous","0.9","black","来","\"","什么样","cylinder",">","child","研究","rgba","0.19","1.5707","yellow","_","=","color","urdf","/"," ","radius","。","white","0.4","0.16","要","axis","0.18","geometry","打开","mbot","<","link","0.20","1","xml","sphere","什么","xyz","wheel"],"title":"模型文件解析","title_tokens":["文件","模型","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_7","text":"https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":["main","html","https","ros","org",".","docs","urdf","/","tutorials",":","humble","-","en"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/","text":"Gazebo：三维物理仿真平台 ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台 Gazebo ，了解一下。 Gazebo仿真平台 介绍 Gazebo是ROS系统中最为常用的 三维物理仿真平台 ，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。 安装 Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-* 运行 通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py Attention 为保证模型顺利加载，请将离线模型下载并放置到~/.gazebo/models路径下 ，下载链接如下： https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。 XACRO机器人模型优化 我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本—— XACRO文件 。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义 ，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含 ，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口 ，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro 以下是一些常用的XACRO文件语法，大家了解下。 常量定义 <xacro:property>标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。 数学计算 如果需要做数学计算，同样是在“${}”中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 Info 所有数学运算都会转换成浮点数进行，以保证运算精度 宏定义 机器人的轮子我们也做成宏定义，定义方式是通过这个<xacro:macro>标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。 文件包含 宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。 机器人仿真模型配置 完善物理参数 第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。 添加Gazebo标签 第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。 配置传动装置 第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。 添加控制器插件 第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。 构建仿真环境 接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ]) 机器人运动仿真 万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard Attention 虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 通过键盘上的“i、j、，、l”几个按键，就可以控制机器人前后左右运动啦。 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。 Ignition：下一代Gazebo 随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为 Ignition ，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 运行成功后，会打开Ignition的仿真界面和Rviz上位机，我们可以看到RGBD相机仿真后发布的图像数据。 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/ 附录：机器人完整模型 learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["—","为","learning","back","火星","代码","加大","方便","第三步","下","you","前后","那","vel","得","?","第一句","continuous","帮助","切分","好","必要","pi","镜像","if","cylinder","includelaunchdescription","yellow","urdf","括号","share","arguments","launch","mbot","验证","<","做","成功","区分","度","相关","launchdescription","和","spawn","图像","参数设置","from","以上","流畅","left","一句","之前","也","entity","碰撞","控制","变量","有","5","0.001","传递","么","写","不断","当然","离线","doesn",":","c语言","!","osrf","请","三维","实验","接下来","0.19","我们","wiki","color","小海龟","需要","neighborhood","上","{","$","保证","运动","弹性系数","配置","join","前后左右","0.0","defining","上来","优化","matrix","libgazebo","interface","the","xyz","'","used","不是","硬件加速","rate","键盘","in","完整","另外","交给","origin","基本","叫","链接","除法","两句","位置","大家","load","海龟","change","set","l","来","移动机器人","换成","下载","不会","include","浮点数","(","radius"," ","simpletransmission","0.18","0.75","多","一下","及","轮子","r","试试","值为","官方网","俱备","周边环境","false","应用","总体","相对","第二","publish","不仅","parent","速度","h","这些","主要","这里","环境","publisher","虚拟","数据","描述","“","了","设置","模型","建模","have","官方网站","后","i","reflect","用","org","_","完善","将","description","移动","---","如果","可编","and","方式","并","apt","index","信息","0.06","小车","以下","}","directory","奇迹","diameter","它","be","packages","不过","length","”","rpy","装上","质量","params","time","介绍","编程","demos","机器人","this","流程","第四","第四步","/","state","ign","这样","0.16","get","路径","where","图形","]","点数","变化","做成","想不起来","语言","角度","标签","界面","下一代","是不是","会","izz","找","第三","第二句","办法","实现","两个","惯性","return",",","inertia","0.015","类似","to","we","没有","twist","teleop","rgbd","plugin","打开","echo","ros2","放置","感器","odometry","xml","系数","frame","correctly","me","渲染","info","package","y","于是","有点","x","个","计算","给","0.2","函数","甚至","尺寸","是","已经","因为","python","命名","type","vgpu10","互相","很多","trans","mechanicalreduction","常用","通过","某些","小海","像头","important","运算","#","以","一步","ignitionrobotics","二步","这个","is","出现","box","blue","条件","enabled","这句","动力学","world","name","没","数值","时","无人机","限飞","让","包含","sudo","yaw","drive","colors","模块","gazebo","几个","update","actions","hardware","安装","创建","无人","算法","、","方法","文件格式","时刻","max","摄像头","differential","更","prefix","。","弹性","keyboard","频繁","可以","4","上位","really","2","就是","3.1415926","1","很","com","attention","这","考虑","sources","collision","比如","啦","spwan","启动","find","数学","gray","0.05","os","0.025","更为","command","尝试","网站","xacro","3","--","30","用到","结果","升级","呢","def","主角","动力","file","似曾","同样","化","修改","当","acceleration","all","child","去","tf","了解","http","时候","val","此时","true","仿真","真器","provided","电机","加速","list","然后","记得","重复使用","新一代","先","screen","该","很长","-","差不多","数学计算","相识","into","robot","run","命令","items","问题","pose","还要","ros","按键","generate","svga","针对","humble","冗余","二句","新","技术","导致","公式","ixx","ament","0.20","四步","定义","使用","传递数据","第一步","topic","友好","这种","放到","接下","想不起","caster","right","j","turngravityoff","顺利","差速","起来","格式","第一","见证","一行","use","m","把","添加","构建","source","到","仿真器","1.0","install","周边","支持","一样","里边","property","own","必备","每","迭代","rgba","=","cmd","直接","刚好","20","fixed","装置","为止","worlds","像","joints","摄像","pythonlaunchdescriptionsource","关节","want","实物","matter","完成","包","左右","mass","ixz","joint","+","output","可","path","visual","火星车","所有","认识一下","make","ignition","最为","传动装置","底盘","表面","sure","加法","力学","理解","物理","single","\"","得到","转换","摩擦力","每个","尽量","bashrc","axis","t","motor",")","机器","似曾相识","bridge","odom","关系","link","某","macro","续航","sphere","万事","效果","发布","hardwareinterface","[","ixy","手边","部署","硬件","场景","传动","认识","material","~","传感器","就","*","reference","3.14159","一起","较大","语法","camera","精度","高质量","c","动机","only","？","怎么","丰富","版本","万事俱备","从","geometry","测试","同时","xmlns","再","for","你","footprint","对","名为","随着","models","一些","import","整个","wheel","改成","中","浮点","executable","宏","有点像","不能","，","github","base","平台","py","模拟","功能",".","插件","加入","https","过程","pkg","确保","separation","重复","名称","torque","用来","要","filename","简单","嵌套","不多","机","value","controller","跑","node","分配","0.95","iyz","our","可编程","a","front","输入","0","version","进步","参数","官方","参考","force","看到","再用","为了","试一下","size","高质","运行","rviz","提供","控制器","颜色","transmission","0.4","三步","export","原本","spawner","名字","节点","转换成","结束","都","传感","根本","相机","them","的","iyy","actuator","如下","课程","by","一代","：","虚拟机","接口","复杂","velocityjointinterface","diff","等","在","设计","比","www","系统","不","引擎","如何","so","b","语句","未来","可能","所以","black","文件","人机","z","12","第二步","一定",">","inertial","怎么办","属性","sim","附录","调用","加载","一个","还","不同","常量","开发","下来","进行","关闭","摩擦","不妨"],"title":"Gazebo","title_tokens":["gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo","text":"ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台 Gazebo ，了解一下。","text_tokens":["实物","没","手边","，","gazebo","平台","是","呢","主角","当然","机器人","物理","问题","ros","三维","我们","怎么办"," ","？","。","没有","了解","怎么","如果","一下","机器","仿真","开发"],"title":"Gazebo：三维物理仿真平台","title_tokens":["平台","物理","：","仿真","三维","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_1","text":"","text_tokens":[],"title":"Gazebo仿真平台","title_tokens":["平台","gazebo","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_1","text":"Gazebo是ROS系统中最为常用的 三维物理仿真平台 ，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。","text_tokens":["比如","为","火星","部署","场景","就","质量","那","动力","帮助","机器人","高质量","这样","此时","测试","图形","验证","仿真","再","做","中","和","先","，","办法","实现","差不多","平台","模拟","加入","类似","ros","三维","实验","我们","没有","要","导致","弹性系数","上来","优化","不多","使用","系数","渲染","是","到","周边","常用","高质","支持","运行","提供"," ","多","及","周边环境","应用","都","动力学","的","不仅","实物","无人机","限飞","等","在","设计","gazebo","环境","系统","火星车","引擎","最为","了","无人","算法","可能","表面","、","力学","所以","人机","物理","用","摩擦力","属性","更","。","弹性","频繁","一个","还","可以","机器","开发","续航","摩擦","不妨"],"title":"介绍","title_tokens":["介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_2","text":"Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-*","text_tokens":["的","相关","跑","：","中","包","完整","和","给","sudo","先","，","gazebo","起来","它","系统","-","认识","装上","把","如何","呢","认识一下","已经","安装","了","大家","功能","*","互相","install","通过","为了","命令","ros","确保","我们"," ","？","。","直接","humble","这样","一个","一下","$","可以","简单","使用","apt","都","不妨"],"title":"安装","title_tokens":["安装"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_3","text":"通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py Attention 为保证模型顺利加载，请将离线模型下载并放置到~/.gazebo/models路径下 ，下载链接如下： https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。","text_tokens":["啦","为","启动","下","尝试","它","认识","~","就","一起","机器人","动机","/","？","launch","路径","仿真","models","是不是","中","记得","，","github","该","之前","py","控制","么",".","离线",":","命令","osrf","https","还要","ros","请","接下来","我们","$","保证","运动","ros2","放置","放到","不是","接下","顺利","链接","把","大家","到","通过","移动机器人","下载"," ","试试","这句","的","如下","课程","：","设计","在","gazebo","环境","了","模型","_","。","将","加载","移动","还","可以","机器","并","下来","com","attention"],"title":"运行","title_tokens":["运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#xacro","text":"我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本—— XACRO文件 。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义 ，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含 ，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口 ，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro 以下是一些常用的XACRO文件语法，大家了解下。","text_tokens":["—","比如","小车","以下","代码","更为","下","xacro","传感器","升级","就","语法","切分","好","介绍","同样","编程","必要","机器人","化","动机","urdf","了解","丰富","版本","时候","此时","做","你","对","一些","会","中","然后","宏","重复使用","先","不能","，","实现","很长","-","之前","也","变量","有","传递","写","功能","加入","命令","过程","接下来","ros","我们","需要","重复","没有","humble","要","$","优化","定义","使用","感器","放置","传递数据","友好","放到","个","计算","接下","给","可编程","a","格式","叫","函数","甚至","尺寸","是","把","大家","install","常用","通过","再用","为了","像头","移动机器人","一样"," ","直接","多","一下","轮子","条件","总体","都","传感","这句","像","摄像","的","：","没","接口","包","复杂","包含","让","sudo","设计","在","这里","gazebo","模块","可","数据","描述","b","语句","安装","了","创建","底盘","模型","可能","建模","、","文件","方法","文件格式","每个","摄像头","更","。","调用","移动","一个","如果","还","可以","4","机器","不同","可编","常量","link","下来","apt"],"title":"XACRO机器人模型优化","title_tokens":["机器人","机器","优化","模型","xacro"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_4","text":"<xacro:property>标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。","text_tokens":["一些","比如","的","找","中","加大","方便","在","这些","，","xacro","数据","也","不","尺寸","一行","”","m","“","就","把","质量","位置","安装","3.14159","了","底盘","未来","模型",":","、","通过","好","pi","文件","机器人","修改","移动机器人","里边",">","property","动机","不会","我们","_","urdf","需要"," ","。","用来","括号","这样","调用","针对","一个","移动","时候","$","可以","原本","机器","轮子","常量","<","值为","定义","使用","变化","很","标签","都","名为"],"title":"常量定义","title_tokens":["定义","常量"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_5","text":"如果需要做数学计算，同样是在“${}”中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 Info 所有数学运算都会转换成浮点数进行，以保证运算精度","text_tokens":["比如","}","数学","”","结果","就","精度","同样","机器人","修改","动机","怎么","时候","点数","做","想不起来","会","改成","中","浮点","和","，","数学计算","两个","有","写","加入","我们","需要","{","$","公式","保证","info","计算","想不起","起来","除法","是","位置","很多","通过","来","移动机器人","换成","运算","浮点数","以"," ","直接","这个","转换成","相对","都","根本","的","数值","在","数据","所有","“","了","未来","模型","可能","加法","得到","转换","尽量","。","移动","一个","如果","可以","机器","常量","关系","某","进行","这"],"title":"数学计算","title_tokens":["数学","计算","数学计算"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_6","text":"机器人的轮子我们也做成宏定义，定义方式是通过这个<xacro:macro>标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。","text_tokens":["比如","xacro","用到","就","好","镜像","机器人","c","当","这样","时候","同时","<","做成","标签","一些","区分","会","中","记得","宏","和","，","参数设置","-","也","两个",":","我们","需要","名称","要","定义","使用","a","函数","输入","两句","是","把","位置","参数","通过","来","一样","里边"," ","刚好","这个","轮子","出现","名字","像","的","关节","包含","在","joint","这里","几个","描述","b","设置","了","模型","、",">","。","调用","一个","还","可以","机器","方式","macro","link","1","关系","这"],"title":"宏定义","title_tokens":["宏","定义"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_7","text":"宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。","text_tokens":["的","是不是","一些","这种","不是","于是","中","然后","包含","宏","另外","接下","和","，","这里","模块","相识","函数","也","是","把","参数","得","了","到","底盘","模型","加入","似曾","c语言","某些","文件","机器人","流程","里边","接下来","include","必备","我们"," ","去","。","没有","调用","一个","还","可以","机器","似曾相识","仿真","再","嵌套","优化","定义","使用","做","做成","很","语言","为止","结束","下来","对","像"],"title":"文件包含","title_tokens":["文件","包含"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_8","text":"","text_tokens":[],"title":"机器人仿真模型配置","title_tokens":["机器人","机器","配置","仿真","模型"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_9","text":"第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。","text_tokens":["的","和","，","gazebo","第一","平台","碰撞","是","有","惯性","因为","参数","必要","物理","一定","每","确保","属性","需要","一步","。","一个","仿真","link","都","第一步"],"title":"完善物理参数","title_tokens":["物理","完善","参数"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_2","text":"第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。","text_tokens":["渲染","的","为","中","和","在","主要","，","gazebo","系统","是","添加","第二","因为","得","所以","为了","第二步","每","颜色","urdf","一步","。","二步","这样","冗余","一个","可以","不同","配置","link","做","标签"],"title":"添加Gazebo标签","title_tokens":["标签","添加","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_10","text":"第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。","text_tokens":["的","为","第三","给","，","joint","第三步","传动","是","了","传动装置","理解","。","要","三步","一个","可以","装置","运动","配置","仿真","电机"],"title":"配置传动装置","title_tokens":["配置","传动装置","装置","传动"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_11","text":"第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。","text_tokens":["的","小车","完成","分配","速度","交给","在","，","差速","gazebo","下","控制","是","两个","添加","就","那","了","插件","来","第四","第四步","控制器","。","这样","要","一个","可以","不同","四步","角度","电机"],"title":"添加控制器插件","title_tokens":["添加","插件","控制","控制器"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_12","text":"接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ])","text_tokens":["learning","spwan","}","directory","[","os","be","you","packages","用到","就","def","file","time","if","all","includelaunchdescription","urdf","/","only","state","share","arguments","launch","get","val","mbot","where","true","]","<","provided","import","中","launchdescription","executable","spawn","，","from","screen","-","entity","py","return","into",",","功能",".","robot","doesn",":","run","to","!","items","we","pose","接下来","ros","pkg","generate","需要","neighborhood","{","join","0.0","ament","correctly","the","me","topic","package","'","y","node","x","接下","our","a","use","把","到","load","python","change","force","set","own","include","提供","#","(","="," ","spawner","节点","enabled","worlds","them","的","world","pythonlaunchdescriptionsource","name","by","want","matter","yaw","gazebo","output","publisher","path","actions","如何","make","了","模型","have","sure","z","single","_","sim","。","description","加载","---","t","一个",")","really","下来","sources","考虑","index"],"title":"构建仿真环境","title_tokens":["环境","构建","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_13","text":"万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard Attention 虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 通过键盘上的“i、j、，、l”几个按键，就可以控制机器人前后左右运动啦。 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。","text_tokens":["啦","learning","启动","奇迹","硬件","不过","前后","”","~","就","第一句","机器人","流程","urdf","/","万事俱备","launch","此时","仿真","整个","加速","中","有点像","第二句","和","，","以上","一句","py","控制","into",".","run","命令","过程","接下来","按键","svga","我们","小海龟","需要","twist","上","二句","teleop","$","运动","前后左右","echo","ros2","硬件加速","有点","键盘","接下","基本","j","第一","见证","0","两句","已经","load","海龟","vgpu10","很多","l","通过","小海","运行","="," ","export","节点","俱备","第二","的","虚拟机","：","时","复杂","左右","比","gazebo","环境","几个","虚拟","“","了","、","\"","i",">","时刻","_","。","bashrc","keyboard","可以","机器","就是","下来","万事","attention","关闭"],"title":"机器人运动仿真","title_tokens":["机器人","仿真","机器","运动"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#ignitiongazebo","text":"随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为 Ignition ，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 运行成功后，会打开Ignition的仿真界面和Rviz上位机，我们可以看到RGBD相机仿真后发布的图像数据。 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/","text_tokens":["为","网站","较大","camera","demos","/","ign","从","版本","launch","仿真","真器","变化","成功","界面","随着","度","会","和","新一代","图像","，","流畅","-","平台","也","py","有","不断",".",":","ros","我们","上","humble","新","技术","$","rgbd","打开","ros2","机","渲染","进步","大家","仿真器","命名","官方","参考","install","看到","来","试一下","运行","rviz","迭代"," ","ignitionrobotics","多","一下","官方网","都","相机","的","一代","sudo","在","www","gazebo","数据","ignition","官方网站","后","org","_","更","。","可以","上位","bridge","apt","效果","发布","信息","不妨"],"title":"Ignition：下一代Gazebo","title_tokens":["ignition","：","一代","gazebo","下一代"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_14","text":"learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["back","learning","0.06","}","find","gray","ixy","0.05","0.025","command","length","xacro","3","--","material","30","rpy","*","reference","vel","params","?","continuous","pi","this","acceleration","cylinder","child","yellow","urdf","/","tf","0.16","geometry","http","mbot","true","xmlns","<","for","footprint","wheel","izz","list","left","base","-","5","0.001",".","robot","inertia","0.015",":","!","to","ros","0.19","wiki","color","separation","torque","filename","{","$","plugin","ixx","0.20","defining","matrix","libgazebo","odometry","xml","value","controller","interface","frame","the","xyz","topic","used","y","rate","x","0.95","in","iyz","right","caster","origin","turngravityoff","0.2","front","0","version","m","source","type","1.0","trans","mechanicalreduction","important","size","property","include","rgba","(","=","transmission","radius"," ","simpletransmission","cmd","0.4","0.18","20","0.75","fixed","is","r","box","blue","false","joints","iyy","actuator","publish","parent","name","velocityjointinterface","mass","h","ixz","drive","colors","joint","diff","www","gazebo","+","update","visual","hardware","so","black","z","\"","12","reflect",">","inertial","org","max","differential","_","prefix","axis","motor",")","odom","and","2","3.1415926","macro","1","link","sphere","diameter","hardwareinterface","collision"],"title":"附录：机器人完整模型","title_tokens":["机器人","机器","：","完整","模型","附录"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/","text":"Rviz：三维可视化显示平台 大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾—— Rviz ，一款 三维可视化显示 的神器。 Rviz三维可视化平台 机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。 Rviz介绍 一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。 运行方法 启动一个终端，使用如下命令即可启动： $ ros2 run rviz2 rviz2 彩色相机仿真与可视化 摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。 仿真插件配置 关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 learning_gazebo/urdf/sensers/camera_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"camera\" name= \"camera_node\" > <update_rate> 30.0 </update_rate> <camera name= \"head\" > <horizontal_fov> 1.3962634 </horizontal_fov> <image> <width> 1280 </width> <height> 720 </height> <format> R8G8B8 </format> </image> <clip> <near> 0.02 </near> <far> 300 </far> </clip> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.007 </stddev> </noise> </camera> <plugin name= \"gazebo_camera\" filename= \"libgazebo_ros_camera.so\" > <ros> <!-- <namespace>stereo</namespace> --> <remapping> ~/image_raw:=image_raw </remapping> <remapping> ~/camera_info:=camera_info </remapping> </ros> <camera_name> ${prefix} </camera_name> <frame_name> ${prefix}_link </frame_name> <hack_baseline> 0.2 </hack_baseline> </plugin> </sensor> </gazebo> 主要配置项如下： <sensor>标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 <camera>标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 <plugin>标签：加载摄像头仿真插件 运行仿真环境 模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py 可以使用命令行看下仿真出来的图像话题： 图像数据可视化 我们使用Rviz可视化显示图像信息，先来启动Rviz： $ ros2 run rviz2 rviz2 启动成功后，在左侧Displays窗口中点击“Add”，找到Image显示项，OK确认后就可以加入显示列表啦，然后配置好该显示项订阅的图像话题，就可以顺利看到机器人的摄像头图像啦。 三维相机仿真与可视化 二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。 仿真插件配置 三维相机使用的Gazebo插件也是libgazebo_ros_camera.so，配置方法如下： learning_gazebo/urdf/sensers/kinect_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"depth\" name= \"${prefix}\" > <always_on> true </always_on> <update_rate> 15.0 </update_rate> <pose> 0 0 0 0 0 0 </pose> <camera name= \"kinect\" > <horizontal_fov> ${60.0*M_PI/180.0} </horizontal_fov> <image> <format> R8G8B8 </format> <width> 640 </width> <height> 480 </height> </image> <clip> <near> 0.05 </near> <far> 8.0 </far> </clip> </camera> <plugin name= \"${prefix}_controller\" filename= \"libgazebo_ros_camera.so\" > <ros> <!-- <namespace>${prefix}</namespace> --> <remapping> ${prefix}/image_raw:=rgb/image_raw </remapping> <remapping> ${prefix}/image_depth:=depth/image_raw </remapping> <remapping> ${prefix}/camera_info:=rgb/camera_info </remapping> <remapping> ${prefix}/camera_info_depth:=depth/camera_info </remapping> <remapping> ${prefix}/points:=depth/points </remapping> </ros> <camera_name> ${prefix} </camera_name> <frame_name> ${prefix}_frame_optical </frame_name> <hack_baseline> 0.07 </hack_baseline> <min_depth> 0.001 </min_depth> <max_depth> 300.0 </max_depth> </plugin> </sensor> </gazebo> 运行仿真环境 使用如下命令启动仿真环境： $ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py 启动成功后，可以看下当前的话题列表，已经产生了三维相机的相关话题。 点云数据可视化 运行Rviz： $ ros2 run rviz2 rviz2 同样的流程，点击Add，添加PointCloud2，设置订阅的点云话题，还要配置Rviz的参考系是odom，就可以看到点云数据啦，每一个点都是由xyz位置和rgb颜色组成。 激光雷达仿真与可视化 除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。 仿真插件配置 雷达使用的Gazebo插件是libgazebo_ros_ray_sensor.so，配置方法如下： learning_gazebo/urdf/sensers/lidar_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"ray\" name= \"rplidar\" > <update_rate> 20 </update_rate> <ray> <scan> <horizontal> <samples> 360 </samples> <resolution> 1 </resolution> <min_angle> -3 </min_angle> <max_angle> 3 </max_angle> </horizontal> </scan> <range> <min> 0.10 </min> <max> 30.0 </max> <resolution> 0.01 </resolution> </range> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.01 </stddev> </noise> </ray> <plugin name= \"gazebo_rplidar\" filename= \"libgazebo_ros_ray_sensor.so\" > <ros> <namespace> / </namespace> <remapping> ~/out:=scan </remapping> </ros> <output_type> sensor_msgs/LaserScan </output_type> </plugin> </sensor> </gazebo> 运行仿真环境 使用如下命令启动仿真环境： $ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py 在话题列表中也可以看到激光雷达啦。 点云数据可视化 启动Rviz： $ ros2 run rviz2 rviz2 点击Add，选择Laserscan，然后配置订阅的话题名，rviz的固定坐标系依然是odom，此时就可以看到激光点啦。 Rviz vs Gazebo 好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下： Gazebo是 仿真平台 ，核心功能是 创造数据 ，我们没有机器人或者传感器，它可以帮我们做一个虚拟的； Rviz是 可视化平台 ，核心功能是 显示数据 ，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。 参考链接 https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":["—","learning","代码","方便","具体","下","坐标系","angle","好","或者","拍摄","pi","体感","hack","urdf","样","launch","众多","mbot","一分","<","做","成功","480","0.10","相关","装","和","图像","一句","也","话","有","0.001","点击","么","当然",":","!","问","什么样","三维","类型","外部","我们","docs","stddev","需要","上","{","$","运动","配置","0.0","libgazebo","强调","什么","xyz","基于","rate","不是","360","链接","满意","位置","大家","load","神器","image","resolution","来","移动机器人","出厂"," ","包括","多","自主","usb","试试","不用","等等","玩起来","；","层面","baseline","订阅","命令行","一堆","这些","主要","分钱","这里","环境","虚拟","数据","描述","二维","“","名","了","设置","模型","15.0","搞定","后","左侧","用","可视","_","移动","如果","肯定","帮","信息","一脸","}","但","stereo","60.0","还有","它","辨率","不过","”","真实","重量级","巧妇","介绍","机器人","流程","scan","/","大大","这样","路径","图形","标签","是不是","会","图形化","format","两个","了然","对照","只是","畅想","类似","samples","规划","0.07","嘉宾","各种","岂","没有","plugin","rgbd","ros2","这幅","感器","sensers","frame","过瘾","不少","渲染","0.02","ray","info","计算","给","0.2","laser","是","编码","已经","type","命名","还是","很多","价格比","某些","通过","工具","只有","常用","像头","消息","范围","1.3962634","开放","remapping","打造","这个","自己","optical","name","找到","kinect","软件","gazebo","update","几个","相信","raw","核心","很难","、","分辨率","当前","方法","max","摄像头","开放式","话题","更","prefix","不到","。","一目了然","可以","rplidar","上位","lidar","就是","并且","1","内容","com","这","外部环境","臂","比如","啦","启动","vs","0.05","混淆","分析","xacro","add","3","--","呢","同样","懵","想不到","intel","去","了解","时候","此时","手上","数字","true","仿真","出来","255","拭目以待","激光","显示","非常","然后","巧妇难为无米之炊","先","效率","难为","即可","300","-","试一试","机械","会用","可贵","into","参考系","run","ok","命令","常备","问题","on","pose","还要","ros","新","除了","rgb","可视化","msgs","使用","坐标","固定","这种","的话","拭目","汽车","叫做","与","好该","顺利","起来","格式","以待","添加","把","m","到","always","周边","大大提高","只要","驾驶","stereolabs","每","全都","=","30.0","自动","点云","20","讲","qt","先来","摄像","output","各样","看","300.0","一款","noise","far","最为","理解","自由","\"","rviz2","过","创造","clip","本","量级","一种","快速","odom","机器","激光雷达","link","0.01","效果","发布","由","涉及","确认","世界","fov","depth","重量","场景","~","传感器","就","分辨","*","reference","终端","产生","laserscan","camera","一分钱","动机","mean","导航","？","从","1280","再","你","对","项","一个点","一些","180.0","中","才","不能","，","github","啥","平台","价格","py","8.0","彩色","r8g8b8","功能","插件","哪些","人",".","加入","height","https","过程","range","雷达","想","用来","out","filename","realsense","机","controller","噪音","node","眼中","关于","width","能够","范畴","熟悉","窗口","说明","知道","min","0","不想","能","参数","points","官方","参考","看到","获取","rviz","运行","horizontal","提供","颜色","720","自带","案例","按照","选择","head","640","都","传感","点","长","相机","的","提高","如下","near","有没有","：","内部","一目","等","设计","在","www","一位","pointcloud2","不","如何","so","0.007","依然","所以",">","组成","namespace","框架","displays","各种各样","加载","一个","希望","gaussian","sensor","玩起","开发","对应","列表"],"title":"Rviz","title_tokens":["rviz"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz","text":"大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾—— Rviz ，一款 三维可视化显示 的神器。","text_tokens":["的","世界","显示","—","有没有","中","眼中","图像","能够","范畴","，","一位","重量","是","一款","就","如何","呢","大家","到","了","神器","畅想","重量级","看到","介绍","拍摄","嘉宾","像头","机器人","问题","过","什么样","rviz","ros","三维","本","可视","量级","我们","摄像头"," ","？","。","没有","一个","机器","可视化","讲","什么","这","涉及","摄像"],"title":"Rviz：三维可视化显示平台","title_tokens":["显示","平台","可视化","rviz","：","三维","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_1","text":"机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。","text_tokens":["比如","一脸","但","还有","分析","场景","坐标系","就","传感器","机器人","懵","动机","导航","去","？","大大","从","样","这样","众多","路径","数字","再","出来","做","255","你","激光","中","才","和","图像","，","效率","啥","机械","了然","么","功能","只是","当然","哪些","人","类似","规划","问","各种","岂","过程","三维","雷达","我们","需要","用来","可视化","运动","这幅","感器","什么","坐标","渲染","计算","给","知道","0","是","把","位置","到","很多","周边","看到","通过","大大提高","像头","移动机器人","rviz","颜色","全都"," ","自主","自己","等等","都","传感","长","摄像","的","层面","相机","提高","内部","一目","一堆","这些","设计","在","这里","软件","环境","各样","数据","描述","不","看","一款","很难","模型","、","所以","搞定","理解","可视","摄像头","各种各样","。","一目了然","快速","移动","如果","可以","希望","机器","激光雷达","就是","开发","内容","效果","肯定","信息","臂"],"title":"Rviz三维可视化平台","title_tokens":["平台","可视化","rviz","三维","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_2","text":"一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。","text_tokens":["的","显示","中","图形化","方便","在","，","它","说明","一句","数据","平台","不","也","项","是","话","有","满意","就","添加","核心","了","功能","官方","插件","很多","常用","工具","消息","只有","看到","或者","机器人","某些","只要","rviz","ros","想不到","可视","框架","我们","开放式","出厂","话题","开放","想","更","不到"," ","。","没有","自带","按照","新","打造","一个","如果","可以","这个","可视化","机器","多","图形","上位","自己","开发","做","机","发布","对应","qt","效果","对","基于"],"title":"Rviz介绍","title_tokens":["rviz","介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_1","text":"启动一个终端，使用如下命令即可启动： $ ros2 run rviz2 rviz2","text_tokens":["一个","$","如下","命令","rviz2","启动","：","ros2","终端","使用","，"," ","即可","run"],"title":"运行方法","title_tokens":["运行","方法"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_2","text":"摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。","text_tokens":["的","装","给","，","是","传感器","最为","了","常用","像头","机器人","我们","摄像头","一种","。","上","机器","感器","肯定","传感","先来","摄像"],"title":"彩色相机仿真与可视化","title_tokens":["可视化","彩色","仿真","可视","与","相机"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_3","text":"关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 learning_gazebo/urdf/sensers/camera_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"camera\" name= \"camera_node\" > <update_rate> 30.0 </update_rate> <camera name= \"head\" > <horizontal_fov> 1.3962634 </horizontal_fov> <image> <width> 1280 </width> <height> 720 </height> <format> R8G8B8 </format> </image> <clip> <near> 0.02 </near> <far> 300 </far> </clip> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.007 </stddev> </noise> </camera> <plugin name= \"gazebo_camera\" filename= \"libgazebo_ros_camera.so\" > <ros> <!-- <namespace>stereo</namespace> --> <remapping> ~/image_raw:=image_raw </remapping> <remapping> ~/camera_info:=camera_info </remapping> </ros> <camera_name> ${prefix} </camera_name> <frame_name> ${prefix}_link </frame_name> <hack_baseline> 0.2 </hack_baseline> </plugin> </sensor> </gazebo> 主要配置项如下： <sensor>标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 <camera>标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 <plugin>标签：加载摄像头仿真插件","text_tokens":["learning","}","stereo","代码","fov","辨率","xacro","--","~","传感器","分辨","reference","camera","介绍","mean","hack","urdf","/","1280","仿真","<","标签","项","图像","，","300","format","对照",".","r8g8b8","插件","height",":","!","ros","类型","我们","stddev","需要","{","filename","$","plugin","配置","0.0","感器","libgazebo","使用","sensers","frame","噪音","0.02","info","rate","node","叫做","关于","给","width","0.2","格式","编码","参数","大家","type","命名","image","范围","像头","horizontal","提供","1.3962634","=","30.0"," ","720","remapping","这个","head","都","传感","摄像","的","baseline","如下","name","near","：","等","主要","gazebo","update","描述","raw","noise","so","far","0.007","设置","模型","分辨率","方法","自由","\"",">","clip","namespace","摄像头","_","prefix","。","加载","gaussian","sensor","link","对应"],"title":"仿真插件配置","title_tokens":["配置","仿真","插件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_4","text":"模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py 可以使用命令行看下仿真出来的图像话题：","text_tokens":["的","啦","learning","拭目","：","中","命令行","图像","在","不能","，","gazebo","下","以待","看","py","能","已经","把","into","load",".","模型","camera","看到","好","像头","命令","rviz","我们","摄像头","_","话题"," ","。","launch","$","可以","mbot","配置","仿真","并且","出来","ros2","成功","使用","拭目以待","信息","摄像"],"title":"运行仿真环境","title_tokens":["运行","仿真","环境"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_5","text":"我们使用Rviz可视化显示图像信息，先来启动Rviz： $ ros2 run rviz2 rviz2 启动成功后，在左侧Displays窗口中点击“Add”，找到Image显示项，OK确认后就可以加入显示列表啦，然后配置好该显示项订阅的图像话题，就可以顺利看到机器人的摄像头图像啦。","text_tokens":["的","啦","显示","订阅","启动","：","中","然后","找到","图像","先","在","，","好该","窗口","顺利","add","”","“","就","点击","image","加入","run","看到","后","来","左侧","ok","机器人","像头","rviz2","rviz","可视","我们","话题","摄像头","displays"," ","。","$","可以","可视化","机器","配置","ros2","使用","成功","信息","列表","项","确认","摄像"],"title":"图像数据可视化","title_tokens":["数据","图像","可视化","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_6","text":"二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。","text_tokens":["的","比如","这种","kinect","不少","，","分钱","起来","环境","不过","数据","二维","不","价格","也","不想","传感器","就","可贵","价格比","一分钱","常用","通过","或者","获取","像头","三维","外部","体感","我们","摄像头","想","intel","点云","。","realsense","可以","玩起","仿真","usb","试试","一分","感器","不用","玩起来","外部环境","传感","过瘾","相机","摄像"],"title":"三维相机仿真与可视化","title_tokens":["可视化","仿真","三维","可视","与","相机"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_7","text":"三维相机使用的Gazebo插件也是libgazebo_ros_camera.so，配置方法如下： learning_gazebo/urdf/sensers/kinect_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"depth\" name= \"${prefix}\" > <always_on> true </always_on> <update_rate> 15.0 </update_rate> <pose> 0 0 0 0 0 0 </pose> <camera name= \"kinect\" > <horizontal_fov> ${60.0*M_PI/180.0} </horizontal_fov> <image> <format> R8G8B8 </format> <width> 640 </width> <height> 480 </height> </image> <clip> <near> 0.05 </near> <far> 8.0 </far> </clip> </camera> <plugin name= \"${prefix}_controller\" filename= \"libgazebo_ros_camera.so\" > <ros> <!-- <namespace>${prefix}</namespace> --> <remapping> ${prefix}/image_raw:=rgb/image_raw </remapping> <remapping> ${prefix}/image_depth:=depth/image_raw </remapping> <remapping> ${prefix}/camera_info:=rgb/camera_info </remapping> <remapping> ${prefix}/camera_info_depth:=depth/camera_info </remapping> <remapping> ${prefix}/points:=depth/points </remapping> </ros> <camera_name> ${prefix} </camera_name> <frame_name> ${prefix}_frame_optical </frame_name> <hack_baseline> 0.07 </hack_baseline> <min_depth> 0.001 </min_depth> <max_depth> 300.0 </max_depth> </plugin> </sensor> </gazebo>","text_tokens":["learning","}","0.05","fov","depth","60.0","xacro","--","*","reference","camera","pi","hack","urdf","/","true","<","480","180.0","，","format","也","8.0","0.001",".","r8g8b8","插件","height",":","!","0.07","on","pose","ros","三维","{","filename","$","plugin","rgb","配置","sensers","libgazebo","使用","controller","frame","info","rate","width","min","0","是","m","points","type","always","image","horizontal","="," ","remapping","640","optical","相机","的","baseline","如下","name","near","：","kinect","gazebo","update","300.0","raw","so","far","15.0","方法","\"",">","clip","namespace","max","_","prefix","sensor","link"],"title":"仿真插件配置","title_tokens":["配置","仿真","插件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_8","text":"使用如下命令启动仿真环境： $ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py 启动成功后，可以看下当前的话题列表，已经产生了三维相机的相关话题。","text_tokens":["的","learning","如下","相关","启动","：","，","gazebo","下","环境","看","py","已经","into","了","load",".","产生","后","当前","命令","三维","话题","_"," ","。","launch","$","rgbd","可以","mbot","仿真","ros2","使用","成功","列表","相机"],"title":"运行仿真环境","title_tokens":["运行","仿真","环境"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_9","text":"运行Rviz： $ ros2 run rviz2 rviz2 同样的流程，点击Add，添加PointCloud2，设置订阅的点云话题，还要配置Rviz的参考系是odom，就可以看到点云数据啦，每一个点都是由xyz位置和rgb颜色组成。","text_tokens":["的","啦","订阅","：","和","，","add","pointcloud2","数据","是","添加","就","位置","点击","设置","参考","参考系","run","看到","同样","rviz2","流程","还要","运行","rviz","组成","每","颜色","话题","点云"," ","。","一个","$","可以","odom","rgb","配置","ros2","由","都","xyz","一个点"],"title":"点云数据可视化","title_tokens":["数据","可视化","可视","点云"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_10","text":"除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。","text_tokens":["的","汽车","和","，","试一试","也","是","传感器","很多","来","像头","机器人","移动机器人","常备","驾驶","三维","动机","雷达","我们","摄像头","自动","包括","。","移动","除了","机器","激光雷达","感器","激光","传感","相机","摄像"],"title":"激光雷达仿真与可视化","title_tokens":["可视化","激光雷达","仿真","可视","雷达","与","激光"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_11","text":"雷达使用的Gazebo插件是libgazebo_ros_ray_sensor.so，配置方法如下： learning_gazebo/urdf/sensers/lidar_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"ray\" name= \"rplidar\" > <update_rate> 20 </update_rate> <ray> <scan> <horizontal> <samples> 360 </samples> <resolution> 1 </resolution> <min_angle> -3 </min_angle> <max_angle> 3 </max_angle> </horizontal> </scan> <range> <min> 0.10 </min> <max> 30.0 </max> <resolution> 0.01 </resolution> </range> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.01 </stddev> </noise> </ray> <plugin name= \"gazebo_rplidar\" filename= \"libgazebo_ros_ray_sensor.so\" > <ros> <namespace> / </namespace> <remapping> ~/out:=scan </remapping> </ros> <output_type> sensor_msgs/LaserScan </output_type> </plugin> </sensor> </gazebo>","text_tokens":["的","learning","ray","如下","}","name","rate","：","360","，","gazebo","output","update","-","xacro","min","3","是","~","angle","so","noise","reference",".","type","插件","samples","laserscan","resolution",":","方法","\"","ros",">","horizontal","range","雷达","namespace","max","mean","_","=","scan","urdf","/"," ","prefix","30.0","stddev","out","20","{","filename","remapping","$","plugin","rplidar","gaussian","sensor","配置","lidar","0.0","<","link","1","sensers","libgazebo","使用","0.01","msgs","0.10"],"title":"仿真插件配置","title_tokens":["配置","仿真","插件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_12","text":"使用如下命令启动仿真环境： $ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py 在话题列表中也可以看到激光雷达啦。","text_tokens":["啦","learning","如下","启动","：","中","在","gazebo","环境","laser","也","py","into","load",".","看到","命令","雷达","话题","_"," ","。","launch","$","可以","mbot","激光雷达","仿真","ros2","使用","激光","列表"],"title":"运行仿真环境","title_tokens":["运行","仿真","环境"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_13","text":"启动Rviz： $ ros2 run rviz2 rviz2 点击Add，选择Laserscan，然后配置订阅的话题名，rviz的固定坐标系依然是odom，此时就可以看到激光点啦。","text_tokens":["的","啦","订阅","坐标","启动","：","然后","，","add","是","坐标系","就","点击","名","laserscan","依然","run","看到","rviz2","rviz","话题"," ","。","点","$","可以","odom","此时","配置","选择","ros2","固定","激光"],"title":"点云数据可视化","title_tokens":["数据","可视化","可视","点云"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz-vs-gazebo","text":"好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下： Gazebo是 仿真平台 ，核心功能是 创造数据 ，我们没有机器人或者传感器，它可以帮我们做一个虚拟的； Rviz是 可视化平台 ，核心功能是 显示数据 ，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。","text_tokens":["啦","启动","具体","混淆","下","它","不过","传感器","真实","就","巧妇","好","或者","机器人","流程","了解","时候","手上","仿真","再","做","对","是不是","一些","显示","会","非常","和","巧妇难为无米之炊","，","难为","平台","也","两个","有","会用","功能","我们","没有","可视化","感器","强调","使用","这","不是","的话","熟悉","是","已经","大家","到","还是","很多","常用","通过","来","rviz"," ","案例","自己","讲","；","传感","的","：","在","这里","gazebo","软件","几个","环境","虚拟","数据","相信","核心","了","所以","方法","创造","用","可视","不到","。","一个","如果","可以","机器","帮","信息"],"title":"Rviz vs Gazebo","title_tokens":[" ","rviz","vs","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_14","text":"https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":[" ","rviz2","https","rviz","stereolabs","ros2",".","docs","com","/","github","www",":"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/","text":"RQT：模块化可视化工具 ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具—— rqt 。 rqt介绍 正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，一些常用的功能如下： 日志显示 图像显示 发布话题数据/调用服务请求 绘制数据曲线 数据包管理 节点可视化 参考资料 https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":["比如","—","启动","具体","tutorials","下","它","不过","场景","html","有些","用到","就","模块化","介绍","只","concepts","/","这样","日志","操作","此时","界面","about","一些","显示","会","参考资料","中","觉得","然后","资料","和","图像","，","一句","实现","-","也","难免会","功能","rqt",".","类似",":","命令","https","ros","我们","docs","管理","需要","humble","$","简单","可视化","强大","使用","基于","的话","有点","另外","而","是","已经","命名","参考","很多","console","install","常用","工具","通过","来","像头","using","一样","rviz","里边","提供"," ","这个","服务","指令","节点","前","qt","数据包","都","绘制","摄像","的","麻烦","如下","：","sudo","在","模块","数据","请求","安装","了","可能","难免","正如","可视","每个","org","摄像头","话题","更","一种","小","。","加载","调用","一个","曲线","可以","开发","很","apt","发布","进行","en"],"title":"Rqt","title_tokens":["rqt"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt","text":"ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具—— rqt 。","text_tokens":["的","一些","比如","显示","麻烦","会","—","的话","有点","中","觉得","另外","图像","，","模块","下","场景","不过","有些","用到","已经","就","了","难免会","功能","模块化","可能","rqt","难免","工具","像头","只","rviz","ros","可视","提供","我们","摄像头","更","一种","需要"," ","。","一个","简单","操作","可视化","此时","强大","很","使用","摄像"],"title":"RQT：模块化可视化工具","title_tokens":["可视化","：","可视","模块化","rqt","模块","工具"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt_1","text":"正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，一些常用的功能如下：","text_tokens":["的","一些","如下","启动","：","然后","和","sudo","在","具体","，","模块","它","一句","实现","而","-","也","是","界面","就","安装","了","命名","rqt","功能","类似","很多","install","常用","工具","通过","来","正如","命令","一样","rviz","ros","里边","可视","每个","我们","小","需要"," ","。","humble","这样","加载","一个","这个","可以","$","可视化","指令","开发","使用","apt","前","进行","qt","都","基于"],"title":"rqt介绍","title_tokens":["rqt","介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_1","text":"","text_tokens":[],"title":"日志显示","title_tokens":["显示","日志"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_2","text":"","text_tokens":[],"title":"图像显示","title_tokens":["图像","显示"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_3","text":"","text_tokens":[],"title":"发布话题数据/调用服务请求","title_tokens":["数据","请求","服务","话题","发布","/","调用"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_4","text":"","text_tokens":[],"title":"绘制数据曲线","title_tokens":["数据","曲线","绘制"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_5","text":"","text_tokens":[],"title":"数据包管理","title_tokens":["数据包","数据","管理"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_6","text":"","text_tokens":[],"title":"节点可视化","title_tokens":["节点","可视化","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_7","text":"https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":["using","tutorials","concepts","https","html","console","ros","org",".","docs","rqt","/"," ","about",":","humble","-","en"],"title":"参考资料","title_tokens":["资料","参考","参考资料"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/","text":"资源汇总 常用框架 自主导航 比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/ 自动驾驶 自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/ 路径规划 此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/ 机器人学 ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。 视频课程 斯坦福大学公开课 —— 机器人学 (https://www.bilibili.com/video/av4506104/){:target=\"_blank\"} 台大机器人学之运动学 (https://www.bilibili.com/video/BV1v4411H7ez){:target=\"_blank\"} Self-Driving Cars with ROS2 & Autoware (https://www.youtube.com/watch?v=XTmlhvlmcf8&list=PLL57Sz4fhxLpCXgN0lvCF7aHAlRA5FoFr){:target=\"_blank\"} 古月学院 (https://class.guyuehome.com/){:target=\"_blank\"} 常用链接 ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":["比如","典型","—","被","}","auto","社区","基本功","代码","具备","公开","cn","autowarefoundation","还有","html","就","开课","著名","得","?","robots","gazebosim","斯坦福大学","好","机器人","碰撞检测","bilibili","blank","动机","guyuehome","之","资源","classic","导航","/","之一","人手","感兴趣","技能","丰富","本书","版本","http","路径","navigation","理论知识","io","机器人学","autoware","ubuntu","视频","av4506104","对","斯坦福","会","相关","非常","autowareauto","list","target","中","人学","和","youtube","pll57sz4fhxlpcxgn0lvcf7ahalra5fofr","，","感兴","github","实现","-","福大","工程","也","除此之外","碰撞","热门","控制","有","机械","学习","self","功能",".","大学","v","工程师","推荐","一本",":","bv1v4411h7ez","&","规划","当今","各种","https","ros","moveit","至于","gitlab","我们","商业化","docs","导论","wiki","上","要","理论","{","humble","运动","重在","ros2","使用","自身","roscon","实操","driving","分拣","修炼","称为","完整","著作","台大","基本","行业","学院","video","链接","内功","是","导航系统","class","大家","《","参考","很多","经典","之外","常用","工具","居","移动机器人","驾驶","documentation","提供","必备","仔细","(","自动","="," ","多","结合","这个","自主","即便","汇总","情况","选择","自己","每一","应用","watch","都","阅读","的","中文","公开课","课程","此外","：","找到","包含","商业","等","在","这些","模块","www","gazebo","几个","系统","不","兴趣","任何","了","最为","算法","除此","index","视觉","仔细阅读","、","基本功能","经典著作","\"","框架","org","_","更","检测","一种","cars","这套","with","。","书籍","移动","快速","一个","如果","可以",")","机器","2","运动学","xtmlhvlmcf8","古月","开发","内容","感知","知识","》","进行","这","对应","com","臂","en"],"title":"资源汇总","title_tokens":["汇总","资源"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_1","text":"","text_tokens":[],"title":"资源汇总","title_tokens":["汇总","资源"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_2","text":"","text_tokens":[],"title":"常用框架","title_tokens":["常用","框架"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_3","text":"比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/","text_tokens":["的","比如","会","相关","：","中","完整","基本功","和","代码","具备","在","基本","，","实现","系统","应用","链接","也","不","导航系统","任何","大家","了","功能","算法",".","参考",":","好","基本功能","机器人","移动机器人","各种","https","ros","动机","提供","框架","org","我们","导航","这套"," ","。","/","上","要","移动","快速","如果","这个","可以","机器","navigation","自主","即便","自己","ros2","开发","使用","内容","进行","都"],"title":"自主导航","title_tokens":["自主","导航"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_4","text":"自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/","text_tokens":["的","典型","—","非常","autowareauto","auto","：","社区","中","包含","和","商业","等","在","行业","，","感兴","模块","www","autowarefoundation","几个","实现","系统","链接","也","是","热门","有","控制","兴趣","著名","大家","最为","了","功能",".","参考","很多",":","、","规划","当今","机器人","驾驶","https","ros","框架","org","gitlab","商业化","自动","一种","/"," ","之一","。","感兴趣","丰富","一个","如果","这个","可以","机器","io","感知","autoware","应用","这","对"],"title":"自动驾驶","title_tokens":["自动","驾驶"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_5","text":"此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/","text_tokens":["的","分拣","相关","非常","此外","中","找到","等","在","，","还有","链接","也","碰撞","是","机械","大家","功能",".","视觉","经典",":","、","规划","碰撞检测","https","ros","moveit","框架","org","更","检测","/"," ","。","多","这个","可以","运动","内容","使用","这","都","臂"],"title":"路径规划","title_tokens":["规划","路径"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_6","text":"ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。","text_tokens":["的","比如","中文","修炼","相关","被","称为","人学","著作","这些","，","工程","内功","除此之外","是","有","就","学习","得","《","大家","除此","工程师","推荐","一本","仔细阅读","经典","之外","工具","机器人","经典著作","ros","必备","至于","仔细","导论"," ","。","人手","技能","理论","书籍","本书","版本","结合","可以","机器","理论知识","情况","选择","重在","机器人学","开发","知识","每一","》","对应","自身","都","实操","阅读"],"title":"机器人学","title_tokens":["机器人学","机器人","人学","机器"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_7","text":"斯坦福大学公开课 —— 机器人学 (https://www.bilibili.com/video/av4506104/){:target=\"_blank\"} 台大机器人学之运动学 (https://www.bilibili.com/video/BV1v4411H7ez){:target=\"_blank\"} Self-Driving Cars with ROS2 & Autoware (https://www.youtube.com/watch?v=XTmlhvlmcf8&list=PLL57Sz4fhxLpCXgN0lvCF7aHAlRA5FoFr){:target=\"_blank\"} 古月学院 (https://class.guyuehome.com/){:target=\"_blank\"}","text_tokens":["—","公开课","}","list","target","人学","台大","公开","youtube","pll57sz4fhxlpcxgn0lvcf7ahalra5fofr","www","学院","video","-","福大","开课","class","?","self",".","大学","v","斯坦福大学",":","bv1v4411h7ez","&","机器人","\"","https","bilibili","blank","guyuehome","(","=","_","之","with","/"," ","cars","{",")","机器","运动","运动学","机器人学","ros2","xtmlhvlmcf8","古月","com","autoware","watch","av4506104","driving","斯坦福"],"title":"视频课程","title_tokens":["视频","课程"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_8","text":"ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":["：","cn","github","www","gazebo","html","gazebosim","robots",".",":","居","documentation","https","ros","guyuehome","org","wiki","docs","classic","/"," ","humble","http","2","古月","ros2","com","roscon","ubuntu","index","en"],"title":"常用链接","title_tokens":["常用","链接"]}]}