{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"引言 机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的 电气时代 。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的 数字时代 ，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发， 智能机器人时代 正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。 教程链接汇总 课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/90 博客泡圈： https://www.guyuehome.com/","text_tokens":["后","软件","成为","劳动","工业生产","自动","www","关注","设备","七八","减速","最佳","拉开","送餐","21","开发","—","，","应用","没有","多","太","横跨","状","热点","的","载体","高","操控","而言","逐渐","层面","爆发","操作系统","主要","教器","电机","过程","四足","控制","问答","丰富","前夜","com","链接","是","视频","时代","动力","只能","circledetail","汽车","仿生","完全","驱动","于","教程","七八十","人工","2015","提出","system","github","、","之后","class","不过","伺服","必将","驱动器","技术","序幕","要求","并","/","我们","源码","服务","operating","gitee","博客","id","八十","伺服电机","传感器","但是","依然","bubble","就是","减速机","思考","经历","井喷","2000","年前","不断丰富","计算机","等","更","也","业生","狗","由示","重要","人工智能","发展","https","agv","呈","命令","机器","数字","更加","传感","课程","智能","90","执行","robot","这","最为","了","生产","人类","泡圈","之一","帮助","劳动力","感知","：","八十年","局部","年","不断","工业","环境","正式","book","guyuehome","大","随着","快速","主角","驾驶","_","这是","ros2","对","按照","十年","计算","时期","出现","操作","工厂","释放","此时","图文","机器人","tutorials","类型","有限","动作","拉开序幕","电气","控制器","三个","和","俗称","系统","家庭","缺少"," ","七八十年","感器","。","算机","汇总","ai",":",".","检测","引言","视觉","自主","智能化"],"title":"引言","title_tokens":["引言"]},{"location":"#_1","text":"机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的 电气时代 。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的 数字时代 ，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发， 智能机器人时代 正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。","text_tokens":["后","软件","成为","劳动","工业生产","自动","关注","设备","七八","减速","最佳","拉开","送餐","开发","—","，","应用","没有","多","太","横跨","状","热点","的","载体","高","操控","而言","逐渐","层面","爆发","操作系统","主要","教器","电机","过程","四足","控制","丰富","前夜","是","时代","动力","只能","汽车","仿生","完全","驱动","于","七八十","人工","2015","提出","system","、","之后","不过","伺服","必将","驱动器","技术","序幕","要求","并","我们","服务","operating","八十","伺服电机","传感器","但是","依然","就是","减速机","思考","经历","井喷","2000","年前","不断丰富","计算机","等","更","也","业生","狗","由示","重要","人工智能","发展","agv","呈","命令","机器","数字","更加","传感","课程","智能","执行","robot","这","最为","了","生产","人类","之一","帮助","劳动力","感知","八十年","局部","年","不断","工业","环境","正式","大","随着","快速","主角","驾驶","这是","对","按照","十年","计算","时期","出现","操作","工厂","释放","此时","机器人","类型","有限","动作","拉开序幕","电气","控制器","三个","和","俗称","系统","家庭","缺少"," ","七八十年","感器","。","算机","ai","检测","视觉","自主","智能化"],"title":"引言","title_tokens":["引言"]},{"location":"#_2","text":"课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/90 博客泡圈： https://www.guyuehome.com/","text_tokens":["_","教程","ros2","www","https","21","课程","github","class","图文","90","tutorials","/","源码","泡圈","gitee","博客","问答","id"," ","bubble","：","com","视频",":",".","book","circledetail","guyuehome"],"title":"教程链接汇总","title_tokens":["汇总","链接","教程"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["或","明者","精锋","捆绑","内容","www","出版","实践","生态","不","学","开发","，","120","责任","超过","创新","万字","复制","微控","的","学习者","联系","课件","修改","众多","古月","图书","@","万人","单位","com","不得","是","创建","书面","声明者","视频","》","人才","追究","作品","公司","地区","拥有","销售","致力于","优质","未来","模式","brand","企业","、","一体","产品","任何","源码","被","镜像","畅销","面向","个人","将","其它","+","高校","违反","传播","对本","华语","平台","交流学习","提供","抄录","网站","《","版权","等","高质量","面向未来","知名","包括","所有","致力","请","2011","依法","机器","ros","课程","构建","武汉","累积","交流","培养","社区","（","学习","均","）","赋能","使用","与","年","追究其","高质","法律责任","有权","质量","1000","许可","人才培养","科技","用户","guyuehome","仅限","居","通过","线上","小时","限于","但","本","为","声明","合作","机器人","努力","上","集","建立","校企","上述","有限","究其","有限公司","和","及","如需","至今"," ","。","未经","ai",".","进行","合法","法律","授权"],"title":"关于我们","title_tokens":["关于","我们"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["内容","www","出版","实践","生态","开发","，","120","超过","创新","万字","的","学习者","众多","古月","图书","万人","com","是","创建","视频","》","人才","地区","致力于","优质","未来","模式","企业","、","一体","畅销","面向","+","高校","华语","平台","交流学习","提供","《","等","高质量","面向未来","知名","致力","2011","机器","ros","课程","构建","累积","交流","培养","社区","（","学习","）","赋能","与","年","高质","质量","1000","人才培养","用户","guyuehome","居","通过","线上","小时","为","合作","机器人","努力","集","建立","校企","及","至今"," ","。","ai","."],"title":"学机器人，上古月居","title_tokens":["上","居","，","古月","学","机器","机器人"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["或","明者","精锋","捆绑","不","，","责任","复制","微控","的","联系","课件","修改","古月","@","单位","不得","com","声明者","书面","视频","追究","作品","公司","拥有","销售","brand","、","产品","任何","源码","被","镜像","个人","将","其它","违反","传播","对本","抄录","网站","版权","等","包括","所有","请","依法","课程","武汉","均","学习","使用","与","追究其","法律责任","有权","许可","科技","用户","guyuehome","仅限","居","限于","但","本","为","声明","上述","有限","究其","有限公司","和","如需"," ","。","未经","进行",".","合法","法律","授权"],"title":"版权声明","title_tokens":["声明","版权"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/","text":"ROS/ROS2是什么 智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。 ROS的诞生 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人—— PR2 ，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS的发展 ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称 ROSCon ，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。 ROS的特点 ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。 参考资料 关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["四大","日常","直接","成为","来","250","资金","款","软件系统","一堂","野蛮","领域","速度","最佳","方法","资本","虽然","苹果","斯坦福大学","120","入门教程","年底","投了","认识一下","发布","不下","或者","没想到","横跨","第一","在","轮子","记录","；","下来","古月","大笔","巨大","humble","事情","甚至","手机","是","核心","张图","c","这群","亚马","只想","生态系","移动机器人","此后","全新","比如","同样","教程","代表","代","跨平台","趋势","提出","willow","discourse","总而言之","迭代","github","以叠","2","踏上","系列","干","同一","向前","一套","统统","什么","早期","着","用","却","体感","各种","传感器","25","复杂","价格便宜","人","网站","百科","革命","大部分","沉淀","项目","更","也","目标","重要","2017","同理","传感","工具","几百","全人类","增长","光靠","有志","robot","臂","访问量","搜索","”","学术","开发工具","起","其次","水下","零","稳定","个","roscon","跟随","制造","基本","工业","之旅","本身","熨烫","限性","进步","参考","google","时至今日","高效","看中","年轻人","他们","商业","无论是","自身","暴露","由","不要","有","无聊","齐聚一堂","整理","复用","回答","今日","因为","进化","一大步","福大","向前走","此时","说干就干","算是","官方","媒体","大有可为","努力","呢","充足","图","已有","乐意","基于","用于","b","名称","。","一大笔","初期","叫做","维基百","宽松","然后","啦","案例","推进","实验室","代码","找到","开发","？","从","全书","不到","毛巾","没有","讨论","收拾","多媒体系统","这里","越来","每","重新","一次","相关","而言","模块化","wiki","开发者","层面","尝试","那","神兵","研究","问答","部件","万人","肯定","熟悉","促使","得到","加快","一群","起来","真正","不多","人才","迎来","windows","说明","神秘","增长速度","为了","2015","外观","绝对","加","解决","更好","全球","国家","新","繁荣","配合","如果","给","技术","变为","并","其他","ubuntu","服务","以","频繁","举办","为什么","如何","大学","做出","一家","但是","创始","就是","做到","提供","这个","经历","缩短","根据","turtlebot","把","每年","一大笔钱","台球","望而却步","更为","别人","页面","机器","资料","ros","很快","物体","价格","长远","智能","终于","介于","确定","笔记","了解","扫地","只要","a","越来越","关键","这","了","2014","讲解","成果","浏览量","诞生","学习","好","不是","笔记本","大会","回到","使用","上边","包","当时","跑","answers","20","你","统计","想到","许可","支持","给出","工程师","这是","适用","ros2","实现","一起","成本","百万","来讲","推动","关于","标准","处理","40","做法","时间","多年","世界","操作","索引","机器人","pr2","新增","低","工程","数据库","活跃度","注意","近两年","远","所以","接下","上图"," ","2012","底盘","模块","后续","衣服","该","各种各样","此","嵌入式","“","快","软件","场景","专业","掌握","效果","绝大","world","容易","packages","不想","—","年轻","，","步伐","org","应用","情况","通常","2010","kinect","原本","受限","万","打","xbox","不仅","得以","已经","时候","造","操作系统","肩负","过程","有人","希望","100","控制","其实","所有人","所学","研发","时代","万万","机制","同时","特性","爆款","动机","动力","新鲜","2022","汽车","同学","公司","风险投资","两个","率","下载","5","等等","肩负着","第一个","改为","独立","分享","这一波","一步","成功","问题","简称","叠","几乎","、","而且","发表","原型","局限性","洗衣","浪潮","做成","棒","万左右","查看","完成","各样","迅猛","作为","主阵地","/","我们","效率","源码","个人","很多","出来","operating","局限","将","入门","电路","不开","到","零部件","平台","上市","做","这位","新鲜事","来自","体系","泡泡","历经","所有","扩展","引擎","智慧","发展","联合","2011","设计","答案","提取","真的","移动","可能","课程","游戏机","高度","采购","一届","图中","游戏","没想","简单","知识","之上","剪头发","以上","上去","人类","部分","而生","帮助","活动","使命","一样","linux","：","长期","创意","疫情","前","正式","一大","首先","微软","大","重量","美妙","居","通过","下","存储","友好","轰动","一些","方向","总称","资源","推荐","150","版本","推出","通信","都","才","次数","一切","商业化","选择","不乏","还有","上","自己","百科全书","而","团队","多项","和","全球化","维基","现在","普遍","几百万","感器","程度","重量级","2007","每个","清晰","人数","全人","提高","15","框架","性能","实验","具备","内容","不","生态","组成","家","成熟","挑战","板块","广泛","想法","涉及","多","面纱","利器","托管","投资","的","复合","维基百科","能够","可以","便宜","活跃","据库","大步","直到","认识","其中","逐渐","来看","曲线","提问","机械","正如","主要","集合","方式","一定","personal","视频","只","会","标志","结晶","多媒体","80","完全","斯坦福","掀起","整合","不同","为例","最高","又","无疑","于","因","有没有","离不开","起点","system","开始","生态系统","排名","大部","之","围绕","尽量","两年","各项","还","接下来","版","一个","从中","亚马逊","圈","肩膀","产品","开源","既然","身影","任何","度","助推","风险","被","时间轴","向","参考资料","针对","访问","加上","一段","进入","嵌入","就","笔记本电脑","分钟","一系","却步","当初","深知","月底","柔性","采用","来到","等","这款","聊天","全","非常","受限于","之内","可为","类似","居高不下","之王","明智","一下","精致","差不多","数据","月","要","无论","陪","最为","强悍","社区","浏览","让","正式版","带领","多万","功能","五年","应用软件","看到","几个","电脑","年","这些","不断","论坛","基本上","虽好","巨人","最后","很","一款","用户","普及","中","详细","随着","一系列","快速","头发","人形","单独","条","近几年","总体","index","地域","欢迎","玩耍","线上","对","元素","限于","特点","怀揣","本","不断更新","几年","ros1","为","garage","这样","大大","原因","第一次","更新","站","四项","大量","大家","intel","conference","系统","青年","做饭","绝大部分","至今","同年","左右","进行",".","木头","后期","许可证","还是","阵地","正在","量级","对于","嘉宾","智能化"],"title":"ROS和ROS2是什么","title_tokens":["ros","是","什么","ros2","和"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#rosros2","text":"智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。","text_tokens":["重量","中","掀起","全","神秘","场景","又","ros2","一起","对","方向","机器","一下","提出","挑战","开发","ros","？","，","应用","高度","智能","进化","操作","认识一下","面纱","接下来","的","机器人","这","呢","了","什么","我们","大家","认识","下来","带领","向","那","巨大","系统","操作系统","而生","接下"," ","就","。","是","时代","重量级","这位","正在","量级","嘉宾","智能化"],"title":"ROS/ROS2是什么","title_tokens":["ros","是","什么","/","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人—— PR2 ，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。","text_tokens":["框架","性能","软件","成为","实验室","实验","资金","专业","款","找到","软件系统","不","容易","组成","家","开发","？","不想","—","虽然","苹果","，","斯坦福大学","应用","不到","想法","毛巾","没有","涉及","多","或者","收拾","横跨","第一","在","的","越来","可以","打","一次","大步","其中","得以","层面","已经","尝试","那","时候","机械","操作系统","研究","有人","部件","100","事情","肯定","甚至","手机","是","所有人","一群","personal","只","斯坦福","5","为例","独立","同样","分享","代","因","有没有","问题","叠","外观","、","而且","原型","2","以叠","系列","干","洗衣","还","一个","从中","同一","向前","如果","圈","技术","完成","并","一套","既然","什么","我们","用","效率","却","服务","个人","很多","针对","出来","电路","为什么","就","如何","大学","做出","零部件","一系","平台","就是","复杂","分钟","深知","人","这个","柔性","做","但是","等","更","也","这款","聊天","所有","非常","重要","台球","别人","之内","联合","设计","答案","类似","机器","精致","ros","真的","很快","可能","物体","智能","图中","要","光靠","只要","有志","越来越","陪","这","robot","强悍","了","学术","剪头发","诞生","而生","帮助","功能","不是","个","应用软件","看到","：","年","当时","熨烫","你","最后","一大","很","一款","给出","高效","中","一系列","他们","头发","条","实现","玩耍","一起","轰动","有","一些","推动","无聊","标准","整理","处理","因为","操作","这样","一大步","福大","向前走","此时","都","说干就干","才","一切","机器人","pr2","第一次","低","上","呢","自己","充足","图","基于","大家","用于","团队","和","系统","青年","做饭","所以"," ","。","衣服","2007","木头","后期","初期","对于"],"title":"ROS的诞生","title_tokens":["ros","诞生","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_1","text":"ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称 ROSCon ，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。","text_tokens":["软件","成为","直接","款","绝大","一堂","world","野蛮","成熟","资本","开发","—","年轻","斯坦福大学","，","从","应用","步伐","年底","投了","多","发布","不下","没想到","2010","kinect","投资","原本","在","的","受限","第一","这里","越来","可以","每","便宜","能够","xbox","直到","其中","不仅","逐渐","开发者","大笔","已经","操作系统","肩负","过程","humble","控制","熟悉","是","加快","真正","万万","时代","爆款","会","标志","迎来","2022","这群","公司","亚马","只想","风险投资","斯坦福","5","肩负着","第一个","改为","此后","全新","于","分享","为了","教程","成功","简称","system","问题","willow","起点","提出","2015","开始","迭代","、","原型","大部","全球","两年","局限性","版","亚马逊","一个","给","圈","变为","各样","开源","ubuntu","身影","早期","着","我们","风险","被","助推","体感","时间轴","服务","个人","各种","operating","局限","加上","出来","进入","举办","就","到","但是","大学","传感器","一家","笔记本电脑","创始","却步","当初","价格便宜","人","这个","经历","月底","采用","大部分","做","等","项目","来自","更","也","turtlebot","历经","每年","一大笔钱","所有","把","受限于","重要","望而却步","2017","发展","2011","类似","居高不下","设计","提取","机器","ros","传感","很快","几百","价格","游戏机","增长","终于","介于","一届","确定","笔记","了解","扫地","游戏","没想","robot","关键","这","越来越","了","2014","之上","讲解","让","正式版","起","诞生","部分","功能","五年","使命","笔记本","一样","大会","roscon","稳定","跟随","长期","使用","电脑","年","疫情","回到","前","虽好","正式","限性","一大","想到","支持","一款","微软","普及","大","看中","年轻人","中","随着","商业","他们","快速","单独","下","这是","暴露","适用","ros2","成本","线上","百万","推动","限于","齐聚一堂","本","时间","几年","多年","因为","为","版本","操作","garage","福大","推出","官方","机器人","pr2","大大","原因","不乏","自己","而","intel","团队","注意","conference","近两年","系统","所以","和","绝大部分","现在"," ","同年","2012","名称","几百万","。","底盘","感器","一大笔","2007","该","每个","后期","进行","叫做","各种各样"],"title":"ROS的发展","title_tokens":["ros","发展","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_2","text":"ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["四大","软件","成为","来","推进","直接","具备","领域","生态","组成","家","开发","，","广泛","从","应用","通常","多","多媒体系统","这里","在","的","复合","越来","可以","重新","轮子","模块化","；","下来","已经","那","造","机械","正如","集合","促使","嵌入式","是","机制","核心","同时","特性","人才","动机","会","c","windows","汽车","公司","结晶","生态系","多媒体","案例","移动机器人","率","完全","整合","比如","分享","代表","跨平台","一步","生态系统","、","之","围绕","全球","尽量","新","繁荣","还","一个","做成","向前","给","技术","肩膀","并","各样","产品","统统","开源","身影","着","我们","各种","被","将","以","很多","嵌入","到","就","一家","平台","就是","做到","这个","上市","做","缩短","沉淀","更","也","目标","体系","把","非常","引擎","智慧","发展","同理","别人","设计","机器","明智","ros","移动","工具","全人类","长远","智能","采购","无论","a","臂","越来越","简单","这","了","”","成果","社区","开发工具","上去","人类","部分","水下","零","功能","不是","linux","看到","创意","：","制造","使用","这些","工业","跑","本身","巨人","最后","进步","许可","支持","时至今日","中","人形","快速","无论是","他们","自身","商业","ros2","友好","实现","一起","来讲","不要","由","对","有","标准","特点","怀揣","总称","复用","做法","时间","ros1","今日","这样","向前走","通信","都","商业化","机器人","新增","媒体","已有","站","自己","上","大家","用于","b","多项","和","系统","远","全球化","至今"," ","普遍","模块","。","许可证","还是","宽松","各种各样","此","全人","提高","“","智能化"],"title":"ROS的特点","title_tokens":["ros","的","特点"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_3","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。","text_tokens":["快","日常","250","成为","绝大","速度","不","最佳","开发","？","packages","org","，","从","应用","情况","多","发布","讨论","利器","这里","在","的","维基百科","越来","可以","万","活跃","每","据库","相关","记录","而言","wiki","其中","；","开发者","来看","已经","曲线","神兵","问答","希望","其实","万人","得到","是","方式","起来","研发","不多","核心","新鲜","动力","张图","会","80","说明","两个","下载","整合","不同","等等","增长速度","最高","比如","无疑","教程","代表","这一波","问题","趋势","提出","discourse","总而言之","绝对","、","加","发表","排名","大部","全球","新","各项","浪潮","一个","棒","万左右","查看","给","如果","迅猛","作为","其他","度","什么","任何","我们","各种","源码","助推","很多","访问","频繁","就","到","25","就是","人","网站","百科","革命","大部分","等","新鲜事","根据","也","非常","重要","更为","发展","页面","可为","机器","ros","差不多","数据","月","增长","访问量","越来越","这","最为","了","社区","浏览","浏览量","以上","学习","多万","部分","活动","功能","看到","几个","：","使用","上边","基本","这些","包","论坛","基本上","answers","20","你","统计","参考","很","用户","大","中","快速","近几年","通过","这是","index","存储","总体","地域","有","元素","关于","资源","本","40","几年","回答","150","索引","都","算是","次数","机器人","选择","大有可为","呢","上","四项","乐意","数据库","大家","活跃度","和","维基","上图","绝大部分","现在"," ","。","左右","程度",".","每个","清晰","维基百","人数","正在","15","国家"],"title":"ROS的社区","title_tokens":["ros","社区","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#_1","text":"关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["成为","代码","掌握","内容","效果","绝大","找到","方法","开发","—","，","板块","120","入门教程","全书","从","托管","这里","在","的","可以","古月","提问","主要","万人","啦","是","一定","视频","会","同学","教程","分享","离不开","问题","开始","几乎","github","解决","踏上","大部","更好","还","一个","配合","技术","作为","开源","主阵地","我们","参考资料","将","入门","一段","不开","提供","网站","这个","百科","大部分","来到","项目","也","泡泡","所有","扩展","重要","之王","机器","资料","ros","工具","课程","要","这","最为","知识","搜索","社区","其次","学习","部分","好","几个","使用","不断","之旅","你","最后","首先","google","参考","中","详细","工程师","居","美妙","ros2","欢迎","一起","有","关于","推荐","本","世界","不断更新","都","机器人","还有","更新","努力","工程","百科全书","大量","大家","和","绝大部分"," ","后续","。","然后","阵地","所学"],"title":"参考资料","title_tokens":["参考资料","资料","参考"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/","text":"ROS2对比ROS1 在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。 ROS1的局限性 首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。 全新的ROS2 ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。 ROS2 vs ROS1 系统架构 在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。 DDS通信 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。 核心概念 ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。 编码方式 再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。 命令行 最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随教程，你就会慢慢理解这些特性。","text_tokens":["或","后","直接","来","自动","款","软件系统","走向","减少","最佳","设备","方法","提","以下","陌生","学","似乎","master","交付","么","虽然","一页","发布","或者","至关","可移植性","颠覆","第一","在","开发方式","体现","；","100ms","难度","巨大","房子","ament","接入","甚至","手机","链接","是","启动","专注","张图","核心","部头","只能","不断涌现","完整","电脑系统","编程语言","保障","全部","安全","tcp","全新","比如","同样","教程","跨平台","如","企业","一行","网络","系统工程","第二代","常","不过","最大","稳定性","要求","宕机","一套","也许","1ms","整体","什么","各种","用","软件开发","有且","最新","借助","复杂","乱麻","面临","重来","大部分","用到","先进","项目","更","也","灵活","目标","发","协作","重要","行为","部署","稍安","千差万别","条件","变化","工具","几百","无法","从而","不好","amr","经常","干扰","真实","学术","生产","topic","当然","可选","只有","稳定","力学","跟随","基本","可读性","纠结","环境","到底","前方","完整性","限性","相比","编码方式","主角","他们","依赖","商业","完","不要","工作","有","colcon","单兵作战","格局","复用","变革","之间","动力学","性","因为","通信协议","切记","比","适合","呢","充足","最终","它","基于","用于","几点","控制器","以及","名称","。","加密","举","初次","叫做","然后","翻新","安全性","啦","是因为","保留","大部头","代码","变得","听","python","找到","强","雷达","discovery","catkin","不太","开发","？","从","深入","没有","不能","这里","接触","保证","道坎","越来","每","重新","完善","厂家","而言","相关","android","揭秘","基本保障","开发者","层面","那","研究","工作站","配置","肯定","丰富","省略","接收","熟悉","真正","课时","右侧","windows","行人","国际标准","说明","所示","导致","国际","选项","换成","为了","成功经验","毛坯房","建筑","收","库会","语言","算力","解决","可读","更好","理器","c++","需要","厂商","全球","不爽","致使","发送","给","如果","wifi","并","客户端","其他","rostopic","编译","信息","打交道","产品开发","服务","调用","fastrtps","频繁","总结","为什么","大幅","但是","如何","推倒","一家","就是","没","提供","做到","这个","rosrun","是否","带来","内","测试","借鉴","把","除了","轻松","除此","细节","命令","中间层","机器","阶段","更加","结合","分解","ros","历史使命","5g","长远","有线","智能","mcu","更具","通信接口","了解","只要","消失","越来越","涌现","这","担忧","了","讲解","看","诞生","学习","运算","改","好","不是","诸多","面向对象","rtos","middleware","使用","这台","架构","新版","你","二代","支持","封装","能","编程","定义","适用","ros2","网络连接","成本","实现","来讲","百万","定性","时","图片","发现","标准","但","处理","时间","计算","个体","出现","操作","干掉","属性","机器人","pr2","怎样","布式","较","符合","先","工程","建立","装修","话题","有限","注意","更换","一本","所以","自","明显"," ","后续","受制于","实力","该","各种各样","策略","嵌入式","编译器","管理","过来","可移植","软件","过去","场景","适配","绝大","存在","切换","即可","某","—","，","应用","dds","写","客户","原本","原有","左侧","迁移","修改","一旦","不仅","各位","担心","已经","时候","操作系统","过程","是从","控制","其实","迈过","研发","角色","时代","机制","同时","动力","特性","汽车","公司","可靠","两个","里","之初","底层","进程","广泛应用","率","第一个","能力","多功能","独立","而已","未来","只不过","运动学","成功","问题","简称","一步","vs","几乎","、","慢慢","表示","新一代","之后","局限性","搬","物","做成","完成","各样","黑客","一边","/","我们","解密","很多","将","局限","学术研究","只是","含义","具体","到","依然","udp","微控制器","足够","平台","信号","放在","做","体验","不难理解","所有","编码","发展","中间","下边","航天","设计","答案","会成","大致","考虑","以下几点","可能","课程","不用","运动","理解","多个","简单","之上","便于","以上","项目管理","部分","使命","一样","linux","：","小","二种","与","间层","继续","首先","标准化","远比","大","程序","发成","通过","例子","需求","下","api","一致","加入","一些","延迟","突然","再","资源","很大","升级","按照","确实","之外","对系统","分散","why","版本","运行","通信","都","毛坯","简单明了","选择","周期","还有","上","打成","自己","方案","总体而言","而","一代","和","三个","方便","家庭","几百万","一团","解算","每个","受制","小伙","提高","彼此","框架","性能","地方","通用","盖","命令行","编译系统","具备","共享","得","不","第二","伙伴","挑战","指定","交给","主","推倒重来","意义","ceo","广泛","良好","最","多","经验","至关重要","作战","批量生产","的","尽力","另外","另","能够","可以","应该","二个","接近","高","去","更接","其中","售价","暂且","一一","来看","交道","联网","图像","主要","层","不会","一团乱麻","一定","方式","会","协议","唯一","角度","流程","翻地","不同","开发成本","驱动","于","对比","集成","节点","走","开始","概念","天翻地覆","颠覆性","大部","他","基础","尽量","还","可靠性","面对","一个","分布","想要","产品","开源","任何","级别","差异","风险","指挥","面向","之前","针对","优化","嵌入","就","内存","移植","搭载","macos","消费市场","rmw","第二个","印象","丢","等","总之","一团乱","成","历史","高昂","全","管理器","非常","出错","请","opensplice","类似","实时性","一下","看看","共享内存","数据","还会","移植性","大幅度","一种","要","无论","精力","下要","产品化","最为","上升","幅度","相对","生活","社区","（","让","带领","除此之外","）","功能","不再","电脑","分布式","走向市场","不断","最早","这些","发布者","强壮","实时","安装","哪些","最后","小伙伴","不难","一款","run","用户","普及","中","入侵","随着","内部","常用","驾驶","市场","总体","对象","对","尤其","怀揣","python3","本","陆续","rosbuild","应用层","ros1","调试","为","可选项","这样","连接","第二种","批量","两者","自家","勿躁","现有","满足","单兵","不够","接口","大量","类型","编写","大家","听说","复杂度","系统","名字","绝大部分","上手","由于","诟病","当","消费","进行","过","对于","通用性"],"title":"ROS2对比ROS1","title_tokens":["ros2","对比","ros1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2ros1","text":"在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。","text_tokens":["大","或","能","ros2","对比","不","有","第二","看看","ros","变化","？","么","，","ros1","从","多","第二代","一个","在","的","这","上","也许","我们","其中","来看","学习","听说","之前","和"," ","就","名称","使用","。","就是","到底","过","你","二代","做"],"title":"ROS2对比ROS1","title_tokens":["ros2","对比","ros1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros1","text":"首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。","text_tokens":["框架","软件","地方","自动","具备","款","找到","绝大","走向","不","设备","似乎","开发","？","—","虽然","，","从","应用","良好","没有","或者","第一","作战","保证","的","批量生产","原本","在","可以","售价","；","来看","已经","那","研究","工作站","甚至","是","会","只能","不断涌现","汽车","可靠","翻地","第一个","能力","独立","比如","为了","问题","算力","天翻地覆","网络","大部","他","新一代","可靠性","一个","做成","致使","完成","黑客","并","产品","什么","级别","我们","各种","用","风险","服务","针对","学术研究","具体","为什么","就","嵌入","但是","足够","平台","就是","复杂","搭载","大部分","丢","先进","也","目标","历史","高昂","发展","航天","设计","答案","类似","机器","更加","ros","条件","数据","课程","不用","有线","要","涌现","这","干扰","担忧","了","学术","生产","让","诞生","运算","部分","当然","：","小","走向市场","最早","这台","不断","实时","首先","支持","一款","普及","中","入侵","随着","内部","主角","驾驶","市场","ros2","网络连接","成本","工作","有","一些","单兵作战","资源","处理","时间","ros1","why","计算","因为","出现","运行","这样","连接","通信","都","批量","适合","机器人","pr2","呢","充足","自己","最终","上","单兵","不够","它","类型","用于","有限","一代","和","系统","家庭","绝大部分","由于"," ","。","实力","嵌入式","是因为"],"title":"ROS1的局限性","title_tokens":["ros1","限性","局限性","局限","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2","text":"ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。","text_tokens":["后","直接","自动","走向","最佳","以下","方法","提","master","虽然","或者","颠覆","第一","在","体现","100ms","巨大","房子","ament","甚至","手机","链接","是","完整","电脑系统","保障","全部","安全","全新","比如","跨平台","网络","系统工程","稳定性","要求","宕机","1ms","各种","用","最新","借助","复杂","面临","重来","项目","更","也","协作","行为","部署","千差万别","变化","工具","无法","不好","amr","经常","稳定","力学","基本","纠结","环境","前方","完整性","相比","他们","工作","有","colcon","格局","变革","之间","动力学","性","比","适合","呢","最终","它","用于","几点","控制器","以及","。","加密","叫做","翻新","安全性","保留","代码","python","强","catkin","开发","？","没有","不能","越来","重新","android","基本保障","开发者","层面","那","肯定","真正","课时","windows","行人","说明","导致","为了","成功经验","毛坯房","建筑","语言","算力","理器","c++","需要","发送","给","wifi","并","编译","但是","如何","推倒","就是","提供","做到","这个","内","测试","借鉴","把","除了","细节","机器","阶段","更加","结合","分解","ros","历史使命","长远","智能","mcu","更具","越来越","这","了","好","不是","诸多","rtos","使用","架构","新版","能","ros2","网络连接","实现","定性","发现","标准","但","个体","出现","操作","机器人","怎样","布式","较","工程","装修","所以","明显"," ","后续","受制于","各种各样","策略","编译器","管理","软件","过去","场景","，","应用","dds","原本","原有","修改","一旦","不仅","时候","已经","操作系统","控制","研发","角色","时代","机制","同时","动力","特性","汽车","可靠","两个","之初","第一个","独立","未来","运动学","成功","问题","、","完成","各样","黑客","我们","解密","很多","只是","具体","到","微控制器","平台","信号","体验","所有","设计","考虑","以下几点","可能","课程","不用","运动","简单","之上","项目管理","使命","linux","：","二种","与","继续","标准化","远比","大","需求","下","api","很大","升级","对系统","运行","通信","都","毛坯","选择","周期","上","打成","自己","方案","和","方便","解算","受制","框架","性能","通用","盖","编译系统","具备","得","不","第二","挑战","推倒重来","多","经验","尽力","的","能够","可以","去","来看","不会","一定","会","流程","不同","于","节点","颠覆性","基础","尽量","还","面对","一个","分布","产品","任何","差异","风险","优化","针对","就","移植","搭载","macos","消费市场","等","历史","全","管理器","出错","类似","一下","实时性","数据","还会","一种","要","无论","下要","产品化","相对","生活","（","让","）","不再","电脑","分布式","这些","强壮","实时","一款","中","入侵","驾驶","市场","对","尤其","怀揣","python3","rosbuild","ros1","调试","为","这样","连接","第二种","满足","编写","接口","大量","大家","系统","消费","进行","通用性"],"title":"全新的ROS2","title_tokens":["ros2","全新","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2-vs-ros1","text":"","text_tokens":[],"title":"ROS2 vs ROS1","title_tokens":["ros2","vs","ros1"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_1","text":"在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。","text_tokens":["框架","变得","听","共享","得","找到","不","雷达","discovery","方法","master","开发","不太","—","，","ceo","深入","应用","最","发布","dds","至关","写","客户","至关重要","接触","在","的","另外","可以","应该","完善","左侧","交道","时候","那","操作系统","图像","主要","层","是从","肯定","一团乱麻","接收","是","方式","角色","机制","张图","右侧","会","协议","windows","公司","进程","里","底层","tcp","而已","选项","比如","驱动","对比","只不过","节点","走","库会","开始","、","理器","需要","不过","一个","如果","一套","并","客户端","整体","我们","指挥","信息","打交道","调用","将","很多","频繁","有且","内存","就","udp","就是","复杂","乱麻","提供","这个","macos","印象","内","一团乱","成","也","不难理解","把","管理器","所有","重要","请","中间","下边","大致","类似","会成","中间层","更加","ros","变化","数据","共享内存","从而","理解","通信接口","了解","消失","这","简单","了","看","让","学习","可选","好","只有","稳定","一样","rtos","linux","间层","这些","架构","安装","哪些","不难","封装","中","程序","通过","依赖","ros2","有","发现","突然","标准","再","但","应用层","ros1","通信协议","操作","可选项","连接","这样","通信","都","两者","简单明了","上","先","建立","而","接口","它","大家","大量","基于","注意","更换","和","系统","名字","自","明显"," ","后续","。","一团","进行","过","管理","彼此"],"title":"系统架构","title_tokens":["架构","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#dds","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。","text_tokens":["性能","软件","代码","场景","软件系统","得","适配","切换","不","减少","某","master","指定","？","交给","开发","交付","么","，","广泛","应用","最","多","dds","写","这里","在","的","另","能够","应该","可以","每","重新","高","厂家","层面","联网","配置","其实","接入","丰富","肯定","省略","熟悉","是","专注","协议","唯一","会","国际标准","广泛应用","率","底层","不同","国际","tcp","开发成本","比如","于","为了","简称","问题","收","、","解决","一行","厂商","常","不过","最大","物","一个","不爽","如果","给","想要","并","产品","其他","开源","/","我们","各种","用","产品开发","优化","fastrtps","频繁","就","如何","udp","一家","移植","就是","复杂","提供","这个","rmw","放在","做","是否","总之","丢","等","带来","更","也","灵活","目标","把","发","除了","轻松","部署","opensplice","类似","设计","机器","更加","ros","变化","数据","5g","无法","不用","一种","要","精力","多个","只要","这","简单","了","社区","让","改","部分","当然","功能","好","不是","稳定","一样","middleware","这些","基本","纠结","安装","相比","用户","中","程序","发成","商业","例子","定义","需求","适用","ros2","过来","实现","完","来讲","成本","加入","一些","时","延迟","标准","按照","再","复用","之外","ros1","版本","通信协议","为","这样","通信","都","自家","属性","符合","机器人","选择","还有","先","满足","接口","基于","听说","更换","复杂度","系统","所以","三个","诟病"," ","。","加密","该","举","每个","对于","然后","提高"],"title":"DDS通信","title_tokens":["dds","通信"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_2","text":"ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。","text_tokens":["也","中","保留","非常","一致","ros2","存在","百万","不","有","第二","方法","伙伴","陌生","开发","ros","本","几乎","概念","几百","，","ros1","广泛","应用","从","意义","课程","不用","没有","全球","尽量","这里","开发方式","的","在","如果","应该","了","并","二个","讲解","便于","迁移","其中","大家","我们","一一","开发者","各位","已经","很多","学习","部分","以及","和","担心","含义","到"," ","熟悉","依然","几百万","。","就","方式","这些","使用","过","会","第二个","小伙伴","小伙"],"title":"核心概念","title_tokens":["核心","概念"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_3","text":"再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。","text_tokens":["可移植","来","软件","大部头","具备","方法","学","开发","，","从","一页","多","发布","写","可移植性","道坎","接近","的","在","更接","而言","暂且","难度","过程","迈过","是","方式","部头","特性","会","角度","编程语言","两个","所示","同样","教程","一步","如","语言","企业","可读","大部","更好","之后","不过","搬","一个","一边","我们","用","面向","软件开发","具体","就","如何","移植","用到","项目","更","也","编码","稍安","机器","看看","移植性","课程","这","真实","带领","学习","面向对象","发布者","可读性","中","程序","编程","总体","ros2","对象","实现","来讲","不要","一些","图片","确实","发现","再","ros1","版本","操作","切记","勿躁","机器人","总体而言","大家","和","一本"," ","后续","。","当","提高"],"title":"编码方式","title_tokens":["编码","编码方式","方式"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_4","text":"最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随教程，你就会慢慢理解这些特性。","text_tokens":["命令行","即可","某","master","开发","主","—","，","dds","在","的","每","相关","而言","揭秘","难度","控制","是","启动","核心","特性","会","多功能","独立","比如","换成","教程","对比","集成","节点","概念","慢慢","表示","一个","如果","rostopic","我们","总结","就","大幅","就是","没","rosrun","做","印象","更","也","把","所有","大致","除此","命令","ros","变化","工具","大幅度","一种","理解","最为","上升","幅度","相对","了","以上","topic","除此之外","功能","好","跟随","：","这些","你","最后","run","中","编程","常用","下","ros2","对","有","再","陆续","之外","分散","ros1","干掉","通信","都","选择","现有","话题","大家","和","上手"," ","后续","。","初次","啦"],"title":"命令行","title_tokens":["命令行","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/","text":"ROS2安装方法 本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。 Linux系统简介 时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。 Ubuntu系统简介 我们后续课程使用到的Linux发行版就是 ubuntu系统 。 Ubuntu诞生于2004年10月份， 每六个月发布一个新版本 ，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。 Ubuntu虚拟机安装 虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下： 1. 下载系统镜像 下载链接： https://ubuntu.com/download/desktop 2. 在虚拟机中创建系统 3. 设置虚拟机硬盘大小 4. 设置Ubuntu镜像路径 5. 启动虚拟机 6. 设置用户名和密码 7. 等待系统安装 8. 完成安装 Ubuntu系统安装好后，大家可以先随意使用熟悉一下。 ROS2系统安装 接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下： 1. 设置编码 $ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8 2. 添加源 $ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844 3. 安装ROS2 $ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop 4. 设置环境变量 $ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。 ROS2示例测试 为了验证ROS2安装成功，我们可以通过以下示例进行测试。 示例一：命令行示例 先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。 示例二：小海龟仿真示例 再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["或","后","直接","成为","来","任何人","领域","10","本相","archive","upgrade","方法","以下","master","虽然","动手做","&&","硬件","检验","互联网","发布","或者","户名","lsb","第一","listener","在","变动","指令","发挥","1991","优先","看出","大学生","好后","下来","source","前先要","humble","设置","sudo","甚至","介绍","com","是","链接","创建","启动","核心","按键","等待","比如","教程","模式","代表","evaluation","出于","学生","键盘","企业","一般","网络","2","一","千层浪","最好","最大","turtle","o","海龟","一套","pro","talker","什么","各种","软件开发","通讯","en","路径","顺序","尚","也","更","自行","install","重要","人工智能","https","desktop","node","密码","叫","to","failed","一应俱全","发扬光大","22","乐于","(","”","小海","echo","稳定","分别","个","如遇","基本","null","强大","环境","蕴藏","参考","architecture","--","opt","商业","无论是","依赖","_","vmware","上下左右","工作","有","精神","真理","因为","界面","此时","试试","说干就干","适合","环境变量","已有","呢","建议","编辑器","发扬","多人","背景","字符串","源","。","出","激起","叫做","啦","一应","代码","www","实践","相同","华丽","紧随","不太","开发","？","demo","export","从","没有","收费","这里","接触","决定","保证",")","越来","每","teleop","重新","一次","开发者","上层","熟悉","准备","keyring","起来","windows","可视","说明","准确","如下","keyrings","codename","何人","反馈","为了","简介","比较","3","点击","绝对","上下","需要","新",">","给","如果","技术","其","并","37844","其他","ubuntu","服务","以","如何","大学","但是","每隔","update","就是","这个","是否","第一句","测试","gpg","把","每年","林纳斯","除了","bashrc","爱好","除此","命令","机器","资料","ros","应用程序","构建","智能","turtlesim","了解","越来越","]","这","了","讲解","诞生","擦掌","好","中将","可","回到","apt","使用","小海龟","编辑","d","你","千层","源代码","支持","持续","sources","bash","奥义","适用","ros2","修复","实现","一起","来讲","探索","时","关于","raw","务器","标准","但","时间","计算","出现","操作","1","第二句","tee","locale","locales","机器人","gnupg","正常","先","提交","操作界面","share","etc","有限","\"","所以","影响","接下"," ","setup","后续","算机",":","实力","该","互联","衡量","各种各样","管理","“","热爱","快","软件","仿真器","热情","场景","效果","world","关注","真器","packages","—","指标","org","，","服务器","一石激起千层浪","应用","情况","dds","fedora","摩拳擦掌","原有","原本","放到","激发","不仅","已经","时候","ssl","操作系统","过程","控制","main","18","signed","同时","2022","公司","仿真","发行","下载","两个","底层","5","等等","第一个","任务","分享","未来","py","紧随其后","并且","成功","问题","人工","验证","、","ubuntu20.04","表示","之后","完成","迅猛","各样","/","我们","镜像","个人","很多","技术实力","将","[","后缀","到","依然","多用","提到","unix","做","计算机","products","试一试","用户名","编码","发展","设计","兼容","考虑","os","ubuntu22.04","可能","课程","centos","运动","7","并用","个人爱好","六个","多个","爱好者","环境变","之上","=","之一","蓝色","一样","linux","长期","：","与","光大","大小","二句","bug","deb","html","经典","guyuehome","大","程序","通过","下","加入","这套","|","一些","会加","至此","nodes","再","升级","芬兰","rosdistro","之外","外衣","版本","吧","运行","通信","都","选择","上","基本相同","自己","合适","俱全","六个月","命名","和","伴随","其他软件","添加","lc","现在","绑定","lang","报错","性能","原理","通用","字符","命令行","唯一标准","一句","list","不","量","utf","第二","成熟","内核","最","多任务","多","workstation","的","2004","另外","可以","应该","二个","dpkg","其中","其后","联网","订阅","打包","主要","多用户","可视化","download","一定","终端","会","唯一","目前","只","by","虚拟机","print","不同","为例","位置","于","占据","免费","节点","redhat","开始","文件","概念","key","他","两年","hello","还","版","接下来","一个","dev","想要","~","开源","任何","维护","之前","加上","就","传播","移植","macos","采用","第二个","一位","好者","等","-","gen","成","请","之内","传输","操作方法","示例","二","us","数字","一下","$","usr","数据","各个","一种","月","6","节","all","无论","最为","步骤","4","动手","浏览","让","地址","除此之外","功能","先要","看到","应用软件","电脑","curl","年","发布者","行列","安装","arch","月份","很","run","用户","随意","中","吸引","http","硬盘","快速","常用","cpp","8","对","githubusercontent","release","本","当中","变量","这样","一直","编号","lts","04","第一次","更新","大量","大家","虚拟","开放","系统","名字","发行版","左右","浏览器","者","进行","普通",".","还是","connect"],"title":"ROS2安装方法","title_tokens":["ros2","安装","方法"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2","text":"本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。","text_tokens":["底层","重要","ros2","一起","一下","本","—","，","一种","最","操作","节","了解","的","我们","系统","操作系统","前先要","先要","linux","。","安装"],"title":"ROS2安装方法","title_tokens":["ros2","安装","方法"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#linux","text":"时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。","text_tokens":["或","热爱","后","性能","原理","通用","代码","成为","软件","热情","场景","任何人","唯一标准","实践","不","量","本相","方法","成熟","相同","华丽","不太","开发","内核","？","指标","虽然","—","，","动手做","一石激起千层浪","应用","情况","服务器","最","检验","多任务","互联网","多","硬件","收费","或者","没有","fedora","原有","在","的","决定","原本","另外","越来","可以","应该","每","放到","重新","激发","1991","其中","不仅","大学生","开发者","已经","联网","打包","操作系统","主要","过程","多用户","可视化","熟悉","甚至","是","起来","核心","会","唯一","目前","windows","公司","可视","发行","准确","底层","不同","等等","比如","任务","分享","反馈","模式","何人","教程","出于","学生","免费","并且","问题","企业","redhat","一般","概念","、","其","他","之后","需要","千层浪","最好","还","一个","给","技术","迅猛","一套","并","各样","开源","其他","ubuntu","任何","什么","我们","各种","镜像","服务","个人","维护","很多","技术实力","之前","加上","到","就","大学","多用","传播","就是","提到","unix","macos","这个","做","一位","好者","计算机","等","尚","也","更","成","把","每年","林纳斯","重要","爱好","发展","设计","操作方法","兼容","应用程序","centos","叫","并用","个人爱好","发扬光大","爱好者","越来越","乐于","这","了","动手","讲解","之上","之一","功能","稳定","一样","linux","回到","看到","应用软件","使用","年","光大","与","基本","行列","强大","bug","安装","千层","源代码","参考","支持","用户","大","中","程序","吸引","通过","快速","依赖","常用","下","商业","适用","加入","修复","实现","这套","ros2","对","来讲","一起","一些","有","务器","标准","精神","但","芬兰","本","当中","真理","时间","计算","外衣","版本","出现","操作","界面","此时","都","说干就干","适合","已有","上","自己","提交","基本相同","先","呢","操作界面","大量","有限","发扬","命名","开放","多人","和","系统","名字","伴随","所以","发行版","现在"," ","。","绑定","算机","实力","互联","激起","衡量","叫做","各种各样","管理"],"title":"Linux系统简介","title_tokens":["简介","系统","linux"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu","text":"我们后续课程使用到的Linux发行版就是 ubuntu系统 。 Ubuntu诞生于2004年10月份， 每六个月发布一个新版本 ，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。","text_tokens":["或","一应","软件","快","直接","性能","效果","领域","10","关注","方法","紧随","开发","，","从","应用","硬件","互联网","发布","多","摩拳擦掌","第一","在","的","2004","变动","保证","接触","每","可以","发挥","一次","优先","其中","其后","看出","开发者","时候","联网","已经","上层","主要","熟悉","介绍","是","一定","18","会","只","2022","windows","虚拟机","发行","5","不同","为例","位置","比如","未来","于","占据","代表","为了","教程","免费","紧随其后","人工","比较","文件","绝对","、","网络","ubuntu20.04","表示","之后","两年","新","还","版","最大","一个","如果","想要","其他","ubuntu","我们","各种","很多","维护","以","软件开发","之前","后缀","到","就","如何","但是","移植","依然","每隔","就是","通讯","等","顺序","更","也","自行","除了","试一试","重要","人工智能","之内","除此","机器","一下","数字","考虑","资料","ubuntu22.04","可能","课程","各个","月","智能","六个","一应俱全","22","无论","了","4","讲解","浏览","让","诞生","除此之外","擦掌","好","稳定","个","linux","长期","使用","电脑","年","编辑","环境","你","安装","参考","支持","很","月份","持续","用户","中","硬盘","通过","常用","无论是","有","会加","时","再","升级","本","之外","因为","版本","出现","这样","一直","都","编号","lts","机器人","04","选择","第一次","更新","上","已有","自己","合适","俱全","建议","编辑器","六个月","大家","虚拟","系统","影响","发行版","所以"," ","后续","。","浏览器","互联","普通","进行","出","这里","还是"],"title":"Ubuntu系统简介","title_tokens":["ubuntu","简介","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu_1","text":"虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下：","text_tokens":["自行","如下","后","软件","products","vmware","www","请","evaluation","https","工作","相同","开始","，","构建","操作","运行","workstation","多个","一个","在","的","这里","另外","可以","已有","步骤","并","完成","之上","其他","pro","地址","让","虚拟","我们","大家","/","和","系统","其他软件"," ","就","：","com","。","是","准备","啦",":","环境","同时",".","采用","安装","html","叫做","虚拟机","-","下载"],"title":"Ubuntu虚拟机安装","title_tokens":["ubuntu","安装","虚拟","虚拟机"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1","text":"下载链接： https://ubuntu.com/download/desktop","text_tokens":["：","com","链接","download",":","ubuntu","/",".","https","desktop","下载"," "],"title":"1. 下载系统镜像","title_tokens":[".","1","镜像"," ","系统","下载"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2","text":"","text_tokens":[],"title":"2. 在虚拟机中创建系统","title_tokens":["中","创建","虚拟",".","2","系统","虚拟机","在"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3","text":"","text_tokens":[],"title":"3. 设置虚拟机硬盘大小","title_tokens":["3","硬盘","虚拟",".","大小"," ","虚拟机","设置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4-ubuntu","text":"","text_tokens":[],"title":"4. 设置Ubuntu镜像路径","title_tokens":["4","ubuntu",".","镜像"," ","路径","设置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#5","text":"","text_tokens":[],"title":"5. 启动虚拟机","title_tokens":["5","启动","虚拟",".","虚拟机"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#6","text":"","text_tokens":[],"title":"6. 设置用户名和密码","title_tokens":["用户名",".","6"," ","和","户名","密码","设置","用户"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#7","text":"","text_tokens":[],"title":"7. 等待系统安装","title_tokens":["7",".","安装","系统","等待"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#8","text":"Ubuntu系统安装好后，大家可以先随意使用熟悉一下。","text_tokens":["熟悉","随意","可以","先","使用","。","ubuntu","，","大家","好后","安装","系统","一下"],"title":"8. 完成安装","title_tokens":["完成","8",".","安装"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_1","text":"接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下：","text_tokens":["如下","中","把","ros2","，","接下来","可以","了","步骤","ubuntu","我们","下来","系统","接下","到","就","：","。","安装"],"title":"ROS2系统安装","title_tokens":["ros2","安装","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1_1","text":"$ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8","text_tokens":["install","_","8","utf","us","$","export","&&","all","locale","locales","=","lc"," ","sudo","update","apt",".","lang","en","-","gen"],"title":"1. 设置编码","title_tokens":[".","1","编码"," ","设置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2_1","text":"$ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844","text_tokens":["www","list","archive","master","packages","org","，","&&","lsb",")","dpkg","source","ssl","sudo","main","com","keyring","signed","by","print","keyrings","codename","key","dev",">","o","37844","ubuntu","/","[","update","-","install","gpg","https","$","usr","os","ros","to","failed","]","(","”","=","echo","可","如遇","apt","curl","null","d","deb","参考","arch","architecture","guyuehome","--","http","sources","_","ros2","|","githubusercontent","raw","release","rosdistro","tee","gnupg","share","etc","\""," ",":",".","connect","报错","“"],"title":"2. 添加源","title_tokens":["源",".","2","添加"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3-ros2","text":"$ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop","text_tokens":["update","apt","install","ros","humble","desktop"," ","upgrade","-","$","sudo"],"title":"3. 安装ROS2","title_tokens":["3",".","ros2","安装"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4","text":"$ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。","text_tokens":["opt","中","bash","bashrc","ros2","至此","$","ros","，",">","在","~","了","/","echo","source","\"","已经","系统","好","humble","就"," ","setup","。",".","安装"],"title":"4. 设置环境变量","title_tokens":["环境变量","4","环境",".","变量"," ","环境变","设置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_2","text":"为了验证ROS2安装成功，我们可以通过以下示例进行测试。","text_tokens":["可以","。","，","通过","我们","进行","ros2","为了","安装","示例","以下","成功","验证","测试"],"title":"ROS2示例测试","title_tokens":["ros2","测试","示例"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_1","text":"先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。","text_tokens":["底层","中","来","第一个","通过","cpp","字符","_","重要","说明","ros2","py","world","传输","命令","以下","节点","nodes","第二","$","两个","问题","demo","数据","，","吧","没有","发布","dds","hello","试试","通信","一个","第一","listener","的","在","最为","正常","如果","先","二个","”","talker","订阅","系统","“","字符串"," ","：","。","发布者","启动","者","终端","第二个","是否","run"],"title":"示例一：命令行示例","title_tokens":["：","命令行","示例","一","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_2","text":"再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["如下","中","仿真器","来","奥义","试一试","_","教程","ros2","一句","上下左右","node","探索","示例","第二","节点","关于","$","至此","再","键盘","ros","真器","点击","成功","—","key","，","运动","上下","运行","第二句","turtlesim","第一","一个","在","的","turtle","海龟","指令","可以","teleop","上","”","小海","我们","将","“","中将","分别","蓝色"," ","背景","控制","：","就","。","左右","后续","小海龟","启动","该","终端","按键","二句","蕴藏","run","安装","第一句","经典","啦","持续","仿真","两个"],"title":"示例二：小海龟仿真示例","title_tokens":["海龟","：","小海龟","小海","示例","二","仿真"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/","text":"ROS2命令行操作 在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。 Linux中的命令行 类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。 启动方式 回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。 常用命令操作 我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。 ROS2中的命令行 ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。 运行节点程序 想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看节点信息 当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim 查看话题信息 当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose 发布话题消息 想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 发送服务请求 一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\" 发送动作目标 想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\" 录制控制命令 系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["或","后","来","直接","若","每次","虽然","复现","感兴","产生","至于","发布","或者","复制","第一","在","看似","指令","absolute","文件夹","下来","段","17","sudo","兴趣","链接","是","创建","启动","精心","核心","所在","比如","一二十","键盘","play","当前工作","适应","2","一","系列","不过","文件名","turtle","海龟","深色","什么","各种","用","z","录制","twist","总","用到","打开","send","路径","record","更","灵活","ctrl","也","目标","mv","重要","十个","片段","node","子","源文件","工具","'","地","里边","t","搜索","”","theta","目的","小海","topic","echo","linear","均","约束","既定","专门","某段","规则","快捷","--","看中","转","_","由","工作","有","右键","因为",",","此时","感觉","查","列表","呢","目","一件","编辑器","它","死记","背","新建","背景","异常","名称","。","多种","鼠标","初次","出","叫做","主目录","啦","案例","保留","实验室","呈现出","35","这项","相同","逛来逛去","不太","？","找","深入","不到","0.2","没有","这里","接触","每","teleop","一次","尝试","删除","x","一二","服装","熟悉","必不可少","起来","材料","一只","可视","如下","消息","选项","2.0","3","商家","action","绝对","解决","买","怎么","需要","请求",">","发送","info","如果","并","cmd","其他","信息","服务","调用","以","+","为什么","但是","如何","就是","想象","当前","提供","拷贝到","这个","硬","1.8","根据","mkdir","把","alt","窗口","…","轻松","命令","结合","ros","不可","不一","本节","turtlesim","笔记","了解","麻烦","]","这","进一步","令人","了","学习","好","不是","笔记本","回到","忙","使用","死机","小海龟","死记硬背","编辑","你","二十个","改名","angular","后边","系统管理员","ros2","并不一定","一起","来讲","列出","实现","不变","y","移入","但","40","操作","1","动","cd","参数","二十","正常","先","话题","pose","动作","\"","所以","接下"," ","总有","衣服",":","该","目录","bag","发指","此","管理","“","rosbag2","仿真器","软件","随身带","场景","数量","pub","播放","常用命令","容易","即可","某","真器","—","，","跟","turtle1","应用","rm","{","具体操作","原有","呀","call","显示","时候","已经","一点","<","快捷键","控制","随身","机制","2022","仿真","第一个","未来","一步","问题","spawn","、","慢慢","geometry","表示","便捷","查看","完成","一边","黑客","/","我们","权限","将","很多","[","只是","具体","到","知道","体验","所有","试一试","拷贝","孤单","大致","想","设计","布料","可能","不用","多个","执行","改了","现出","感受","呈现","以上","看不到","绝对路径","感兴趣","一样","子目","linux","：","ls","小","写字","与","继续","逛来","0.0","srv","程序","记忆","vel","难以","通过","需求","下","一些","管理员","确实","度高","再","运行","多到","推出","都","体会","terminal","款式","某个","选择","例如","还有","上","自己","rotateabsolute","和","什么样","字符","命令行","实验","内容","list","这种","不","科幻电影","子目录","指定","service","多","太","另","的","能够","可以","其上","去","主要","商场","逛去","db3","可视化","文件名称","而是","一定","方式","既","件夹","终端","做好","会","角度","cp","完全","不同","为例","又","于","集成","保持","节点","定制","觉得","文件","复制到","概念","key","msgs","msg","rotate","goal","pwd","还","接下来","一个","想要","及其","则","电影","被","输入","帮上","之前","科幻","从来","加上","就","笔记本电脑","一系","详细信息","体操","手","等","-","炫酷","成","统管","受","类似","哪","一下","一二十个","$","看看","数据","有点","一种","要","无论","让","}","带领","精心设计","语法","功能","很少","看到","name","电脑","这些","0","哪些","很","干什么","run","用户","中","详细","随着","一系列","常用","gedit","rosbag","对","本","枯燥","令人发指","调试","为","rate","这样","魅力","一直","改变","原因","现有","第一次","04","11","满足","目标目录","大家","及","系统","至今","进行",".","还是","自主","标目","对于"],"title":"ROS2命令行操作","title_tokens":["ros2","操作","命令行","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2","text":"在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。","text_tokens":["更","中","随着","命令行","重要","ros2","命令","一步","不太","工具","—","可能","，","有点","深入","一种","调试","适应","运行","多","本节","魅力","第一","接触","在","的","如果","海龟","第一次","进一步","可以","了","一次","感受","小海","我们","大家","带领","时候","将","学习","之前","到"," ","使用","。","一定","小海龟","会","案例"],"title":"ROS2命令行操作","title_tokens":["ros2","操作","命令行","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#linux","text":"类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。","text_tokens":["来","保留","软件","呈现出","命令行","场景","每次","这种","不","科幻电影","容易","逛来逛去","某","？","虽然","，","多","没有","这里","呀","的","在","看似","能够","可以","其上","去","时候","已经","一点","商场","逛去","服装","可视化","必不可少","是","方式","起来","一定","材料","精心","做好","会","可视","完全","比如","于","定制","问题","商家","、","解决","买","便捷","一个","想要","并","其他","什么","电影","我们","被","各种","服务","很多","科幻","为什么","就","但是","就是","想象","手","等","炫酷","根据","灵活","成","所有","片段","受","类似","命令","哪","设计","结合","ros","布料","工具","不可","一种","不一","里边","无论","麻烦","现出","了","呈现","约束","精心设计","功能","不是","一样","linux","看到","使用","这些","小","既定","逛来","你","规则","中","看中","需求","并不一定","来讲","一些","度高","但","为","操作","这样","推出","一直","都","此时","款式","现有","呢","先","满足","自己","一件","大家","和","至今"," ","异常","。","总有","衣服","什么样","还是","自主","对于"],"title":"Linux中的命令行","title_tokens":["中","命令行","命令","的","linux"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_1","text":"回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。","text_tokens":["后","来","软件","随身带","字符","命令行","这项","数量","科幻电影","即可","，","应用","不到","至于","在","的","指令","可以","时候","快捷键","一二","熟悉","随身","是","方式","而是","一定","既","启动","终端","会","所在","又","一二十","觉得","慢慢","怎么","需要","系列","不过","并","黑客","其他","深色","什么","我们","电影","用","输入","+","科幻","从来","为什么","到","笔记本电脑","但是","就","一系","就是","这个","硬","用到","打开","手","也","ctrl","alt","窗口","十个","命令","一下","一二十个","工具","不用","笔记","t","这","令人","搜索","看不到","功能","笔记本","不是","很少","看到","回到","：","电脑","使用","写字","死机","专门","二十个","很","快捷","中","记忆","难以","一系列","通过","随着","常用","对","有","确实","右键","本","枯燥","令人发指","因为","操作","多到","魅力","都","体会","terminal","列表","原因","选择","正常","参数","二十","呢","上","大家","及","所以","背","背景"," ","。","多种","鼠标","初次","叫做","发指"],"title":"启动方式","title_tokens":["启动","方式"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_2","text":"我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。","text_tokens":["或","来","若","常用命令","不","子目录","指定","找","，","没有","多","rm","或者","复制","原有","另","的","指令","可以","文件夹","显示","删除","<","sudo","熟悉","文件名称","链接","创建","件夹","会","cp","选项","未来","管理","保持","文件","绝对","复制到","当前工作","pwd","一","需要","文件名",">","一个","一边","及其","则","我们","/","用","权限","将","以","[","只是","就","当前","拷贝到","打开","体验","路径","也","目标","mkdir","mv","把","所有","拷贝","…","统管","命令","一下","源文件","地","多个","执行","]","了","”","目的","均","绝对路径","功能","语法","子目","linux","回到","：","ls","这些","死记硬背","编辑","改名","系统管理员","用户","中","常用","gedit","下","由","列出","工作","不变","管理员","移入","为","感觉","改变","cd","某个","列表","查","先","目标目录","目","编辑器","它","大家","及","系统","死记","新建"," ","名称","。","该","出","目录","主目录","此","标目","对于","“"],"title":"常用命令操作","title_tokens":["操作","常用","常用命令","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2_1","text":"ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。","text_tokens":["也","中","不同","一系列","所有","第一个","命令行","为例","下","比如","内容","ros2","体操","大致","一起","node","对","命令","集成","节点","有","相同","概念","，","跟","表示","操作","系列","不过","都","还","接下来","具体操作","一个","第一","在","的","参数","了解","海龟","可以","目的","感受","什么","小海","我们","topic","话题","下来","以","接下","主要","功能","具体"," ","linux","就","一系","。","与","小海龟","机制","继续","总","核心","后边","仿真","干什么"],"title":"ROS2中的命令行","title_tokens":["中","命令行","ros2","命令","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_3","text":"想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["中","_","ros2","node","命令","节点","$","键盘","key","，","运行","操作","turtlesim","要","某个","例如","turtle","海龟","可以","想要","teleop","我们","和","控制"," ","：","使用","进行","仿真","run"],"title":"运行节点程序","title_tokens":["节点","程序","运行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_4","text":"当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim","text_tokens":["中","详细","来","ros2","list","node","对","命令","有","节点","$","某","子","ros","？","感兴","，","运行","这样","turtlesim","都","一个","的","info","如果","查看","可以","呢","/","它","信息","感兴趣","系统","加上"," ","兴趣","就","：","知道","当前","哪些","详细信息","啦"],"title":"查看节点信息","title_tokens":["查看","节点","信息"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_5","text":"当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose","text_tokens":["如下","中","消息","试一试","ros2","想","list","命令","有","即可","$","某","子","数据","，","turtle1","都","还","一个","的","查看","呢","/","话题","topic","echo","pose","系统","加上"," ","看到","：","使用","当前"],"title":"查看话题信息","title_tokens":["查看","话题","信息"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_6","text":"想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":["--","直接","vel","通过","命令行","pub","_","2.0","ros2","命令","y","$","geometry","，","turtle1","msgs","msg","rate","1","发布",",","{","还","动","海龟","指令","可以","想要","cmd","/","我们","话题","topic","linear","z","}","\"","x","控制"," ","：","起来",":","twist","0.0","angular","1.8"],"title":"发布话题消息","title_tokens":["发布","话题","消息"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_7","text":"一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\"","text_tokens":["srv","仿真器","来","试一试","孤单","ros2","y","$","再","真器","spawn","—","service","产生","，","'","2","0.2",",","太","turtlesim","{","还","一个","改了","call","海龟","theta","/","我们","}","服务","调用","\"","x"," ","：","name",":","提供","一只","仿真"],"title":"发送服务请求","title_tokens":["请求","服务","发送"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_8","text":"想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\"","text_tokens":["中","仿真器","目标","转","通过","命令行","_","比如","ros2","命令","$","指定","真器","3","action","，","turtle1","rotate","goal","这样","turtlesim","一个","发送","的","海龟","完成","想要","可以","absolute","theta","让","/","rotateabsolute","动作","帮上","\"","具体","到"," ","忙","：",":","提供","这个","角度","send","仿真"],"title":"发送动作目标","title_tokens":["动作","发送","目标"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_9","text":"系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["中","rosbag2","把","vel","实验室","常用","实验","35","播放","_","ros2","轻松","实现","rosbag","命令","有","$","再","子","看看","？","数据","play","复现","40","，","turtle1","运行","一个","的","04","如果","这","每","想要","11","cmd","还有","可以","自己","/","以上","用","我们","大家","下来","尝试","很多","段","系统","17","功能","好","db3"," ","回到","如何","录制","：","啦","与","就是","。",".","0","bag","2022","还是","某段","很","-","record"],"title":"录制控制命令","title_tokens":["录制","控制","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","text":"ROS2开发环境配置 ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。 Git git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git 下载教程源码 《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。 VSCode Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download VSCode插件配置 为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。 中文语言包 Python插件 C++插件 CMake插件 vscode-icons ROS插件 Msg Language Support Visual Studio IntelliCode URDF Markdown All in One VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["软件","直接","成为","代码","几千万","自动","python","内容","每次","切换","不","方法","21","开发","？","增加","—","，","广泛","应用","language","硬件","多","最","markdown","利器","intellicode","管理工具","这里","在","的","另外","可以","文件夹","讲","行","迅速","support","官方网","众多","开发者","神兵","操作系统","配置","不会","sudo","linus","肯定","准备","国内","com","是","方式","code","丰富","链接","download","件夹","几千","终端","特性","》","会","官方网站","只","windows","git","广泛应用","下载","中会","网上","不同","等等","下载方式","cmake","驱动","比如","教程","为了","常听到","因","集成","离不开","简称","人工","2015","语言","文件","github","、","一行","语言包","msg","之后","c++","需要","新","系列","还","一个","搭建","给","查看","如果","完成","并","visual","组件","开源","作为","/","我们","编译","源码","被","用","one","很多","审核","个人","gitee","入门","轻量","具体","不开","成千上万","就","如何","码云","合并","一系","vscode","复杂","提供","人","网站","macos","《","in","visualstudio","做","-","项目","非常简单","更","也","这款","两款","install","略显","studio","所有","非常","扩展","重要","之父","发展","https","设计","示例","命令","管理软件","机器","$","ros","工具","可能","冲突","课程","贡献","里边","听到","all","多个","无限","这","简单","了","搜索","开发工具","浏览","让","便于","以上","记事本","而生","记事","功能","好","理工","linux","看到","apt","：","使用","这些","年","与","编辑","环境","强大","bug","安装","源代码","成千","支持","一款","微软","高效","guyuehome","中","一系列","快速","自己","功能强大","_","ros2","修复","千万","一些","有","千上万","但","推荐","上万","之间","调试","版本","操作","urdf","这样","推出","都","icons","有些","机器人","判断","自带","官方","呢","先","提交","已有","tutorials","变更","clone","编写","哪里","大量","大家","编辑器","和","系统","以及","所以"," ","后续","。","喜欢",":","浏览器","进行",".","中文","插件","出","管理"],"title":"ROS2开发环境配置","title_tokens":["ros2","配置","开发","环境"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros2","text":"ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。","text_tokens":["两款","代码","重要","示例","一些","离不开","机器","ros","开发","？","推荐","工具","—","课程","、","，","需要","机器人","的","给","查看","完成","呢","先","开发工具","编写","我们","大家","大量","源码","编译","和","配置","不开","肯定","如何","准备","。","这些","vscode","提供","环境","做","git","中会"],"title":"ROS2开发环境配置","title_tokens":["ros2","配置","开发","环境"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#git","text":"git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git","text_tokens":["软件","直接","代码","几千万","自动","内容","每次","切换","不","方法","开发","增加","—","，","广泛","应用","硬件","管理工具","在","的","可以","行","迅速","众多","开发者","不会","sudo","linus","肯定","国内","是","几千","终端","特性","会","git","广泛应用","不同","等等","驱动","比如","常听到","因","人工","github","一行","之后","需要","新","一个","完成","并","开源","我们","被","审核","gitee","具体","成千上万","就","码云","合并","人","网站","项目","非常简单","也","这款","install","所有","非常","之父","发展","设计","命令","管理软件","$","冲突","可能","工具","贡献","听到","多个","这","简单","了","让","而生","功能","理工","linux","看到","apt","使用","这些","bug","安装","成千","一款","高效","中","修复","千万","有","千上万","上万","之间","版本","都","有些","判断","已有","提交","变更","哪里","大家","和","系统","以及","所以"," ","。","进行","管理"],"title":"Git","title_tokens":["git"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_1","text":"《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。","text_tokens":["更","中","略显","下载方式","代码","_","ros2","https","有","集成","$","21","推荐","开发","—","文件","课程","，","里边","多","这样","还","这里","一个","的","自带","如果","查看","另外","tutorials","文件夹","讲","clone","浏览","/","用","源码","记事本","很多","和","gitee","入门","系统","记事","好"," ","就","：","com","。","是","方式","vscode","复杂",":","浏览器","件夹","环境","》","《",".","会","git","下载","guyuehome"],"title":"下载教程源码","title_tokens":["源码","下载","教程"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode","text":"Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download","text_tokens":["studio","成为","代码","快速","功能强大","扩展","非常","https","简称","2015","但","开发","、","，","操作","推出","利器","一个","在","的","搭建","官方","可以","visual","组件","/","编辑器","官方网","和","系统","操作系统","轻量","功能","神兵"," ","linux","丰富","：","com","。","是","vscode","code","年",":","链接","download","编辑","强大","macos","网站","官方网站",".","visualstudio","源代码","windows","支持","微软","项目","下载"],"title":"VSCode","title_tokens":["vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode_1","text":"为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。","text_tokens":["一系列","扩展","ros2","为了","开发","，","调试","系列","还","无限","的","可以","便于","我们","功能","后续","一系","。","与","vscode","插件","安装"],"title":"VSCode插件配置","title_tokens":["插件","配置","vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_2","text":"","text_tokens":[],"title":"中文语言包","title_tokens":["语言","语言包","中文"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#python","text":"","text_tokens":[],"title":"Python插件","title_tokens":["插件","python"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#c","text":"","text_tokens":[],"title":"C++插件","title_tokens":["插件","c++"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#cmake","text":"","text_tokens":[],"title":"CMake插件","title_tokens":["插件","cmake"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode-icons","text":"","text_tokens":[],"title":"vscode-icons","title_tokens":["-","vscode","icons"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros","text":"","text_tokens":[],"title":"ROS插件","title_tokens":["ros","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#msg-language-support","text":"","text_tokens":[],"title":"Msg Language Support","title_tokens":["msg","support","language"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#visual-studio-intellicode","text":"","text_tokens":[],"title":"Visual Studio IntelliCode","title_tokens":["visual","studio"," ","intellicode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#urdf","text":"","text_tokens":[],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#markdown-all-in-one","text":"VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["也","网上","推荐","开发","，","最","在","的","可以","搜索","自己","作为","以上","大家","众多","个人","配置","喜欢","。","vscode","环境","出","插件","只","支持"],"title":"Markdown All in One","title_tokens":["in","one","markdown","all"," "]}]}