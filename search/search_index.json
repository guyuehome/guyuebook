{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的电气时代。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的数字时代，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发，智能机器人时代正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。 教程链接 课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 博客泡泡： https://www.guyuehome.com/ 教程问答： https://www.guyuehome.com/bubble/index 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 参考资料： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["汽车","缺少","序幕","图文","俗称","层面","更","gitee","过程","减速","智能化","重要","劳动力","book","电机","的","类型","s","伺服电机","依然","ai","必将","动作","年","经历","发展","后","最为","前夜","pan","传感器","拉开","技术","正式","由示","guyuehome","成为","控制","机器人","驱动器","帮助","设备","多","人类","算机","2000","参考","没有","_","应用","tutorials","参考资料","对","博客","而言","横跨","有限","驱动","感知","控制器","伺服","就是","按照","课程","源码","井喷","21","电气","计算机","system","是","主要","操作","时代","问答","操作系统","提出","驾驶","—","更加","https","bubble","感器","随着","，","软件","业生","呈","资料","智能","八十","ros2","这是","完全","十年","环境","视觉","链接","开发","了","太","不过","服务","时期","关注","、","人工智能","状","不断丰富","数字","：","exc6","baidu","释放","提取","人工","class","agv","狗","www","三个","教器","只能","机器","operating","但是","系统",".","并","教程","视频","操控","我们","/","七八十","。","于","github","之一","1dvxugmhxlxnsnfdezuxw0g","工业生产","最佳","家庭","等","robot","自主","工厂","七八","快速","码","八十年","命令","动力","高","和","送餐","也","传感","执行","思考","年前","之后","热点","减速机","丰富","泡泡","工业","此时","逐渐","计算","仿生","七八十年","爆发","index","拉开序幕","生产","不断","出现","自动","2015","四足","这","com"," ","大","主角","载体","检测",":","要求","劳动","局部"],"title":"引言","title_tokens":["引言"]},{"location":"#_1","text":"课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 博客泡泡： https://www.guyuehome.com/ 教程问答： https://www.guyuehome.com/bubble/index 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 参考资料： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["1dvxugmhxlxnsnfdezuxw0g","参考","图文","_","链接","gitee","码","tutorials","参考资料","book","博客","exc6","：","s","baidu","提取","泡泡","class","源码","课程","21","www","index","pan","问答",".","com","教程","bubble","https","视频"," ","guyuehome","/","资料",":","ros2","github"],"title":"教程链接","title_tokens":["链接","教程"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["图书","拥有","声明者","畅销","上","未来","究其","请","的","精锋","万人","明者","ai","使用","年","高质","合法","ros","致力于","学习者","上述","声明","武汉","本","学","追究","法律责任","质量","不得","均","guyuehome","课件","依法","（","努力","机器人","如需","面向未来","未经","平台","》","交流学习","超过","通过","构建","交流","有限","brand","万字","企业","至今","人才","书面","许可","公司","将","学习","源码","课程","抄录","修改","生态","是","提供","2011","高质量","进行","小时","合作","传播","集","@","作品","创建","限于","优质","联系","社区","致力","，","出版","或","与","+","其它","用户","面向","单位","微控","产品","责任","追究其","模式","开发","有限公司","人才培养","、","建立","所有","版权","违反","一体","高校","居","对本","实践","www","任何","机器","培养","120",".","镜像","地区","视频","内容","不","。","授权","累积","赋能","被","知名","等","）","线上","销售","和","有权","华语","为","但","科技","包括","捆绑","复制","网站","及","个人","仅限","com","创新","1000"," ","校企","众多","法律","古月","《"],"title":"关于教程","title_tokens":["关于","教程"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["图书","畅销","未来","的","万人","ai","年","高质","ros","致力于","学习者","质量","guyuehome","（","努力","机器人","面向未来","平台","》","交流学习","超过","通过","构建","交流","万字","企业","至今","人才","学习","课程","生态","是","提供","2011","高质量","小时","合作","集","创建","优质","社区","致力","，","出版","与","+","用户","面向","模式","开发","人才培养","、","建立","一体","高校","居","实践","www","机器","培养","120",".","地区","视频","内容","。","累积","赋能","知名","等","）","线上","华语","为","及","com","创新","1000"," ","校企","众多","古月","《"],"title":"学机器人，上古月居","title_tokens":["居","，","机器","机器人","上","古月","学"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["拥有","声明者","究其","请","的","精锋","明者","使用","合法","上述","武汉","声明","本","追究","法律责任","不得","均","guyuehome","课件","依法","如需","未经","有限","brand","书面","许可","公司","将","学习","源码","课程","抄录","修改","进行","传播","@","作品","限于","联系","，","或","与","其它","用户","单位","产品","微控","责任","追究其","有限公司","、","所有","版权","违反","居","对本","任何",".","镜像","视频","不","。","授权","被","等","销售","和","有权","为","但","科技","包括","捆绑","复制","网站","个人","仅限","com"," ","法律","古月"],"title":"版权声明","title_tokens":["声明","版权"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/","text":"ROS/ROS2是什么 智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。 ROS的诞生 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS的发展 ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称ROSCon，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。 ROS的特点 ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的应用案例在社区中沉淀下来； ROS本身也是完全开源的，商业许可证非常宽松； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品，缩短了产品的上市时间； ROS也可以跨平台使用，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多支持工业应用的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。 参考资料 关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["部分","起","总称","层面","越来","上","新鲜事","棒","重要","诞生","领域","全","注意","同年","之内","万人","80","受限于","一切","维基","真正","发展","一届","最为","离不开","青年","阵地","百科全书","原本","本身","改为","许可证","站","努力","以叠","google","度","踏上","尝试","用于","进步","希望","这款","野蛮","不是","通常","聊天","新","迅猛","之王","至今","学习","价格便宜","那","成本","system","来","进行","提供","迭代","各种各样","四项","代码","你","怀揣","笔记本","今日","成果","完成","提出","此后","随着","100","20","排名","资源","维基百科","从中","回到","普遍","第一","创意","当时","特性","稳定","时间轴","商业","百科","几乎","开源","不同","：","提取","加上","第一个","问题","多媒体系统","intel","左右","资金","巨人","大部","已经","personal","友好","出来","标志","限性","并","次数","高效","了解","为了","github","不开","被","别人","只想","齐聚一堂","体感","而","提高","初期","地域","绝大部分","条","确定","一步","充足","也","比如","采用","两年","算是","官方","入门教程","游戏","一大步","没想到","率","时至今日","一大笔","扫地","一款","网站","疫情","25","答案","繁荣","个","手机","整合","功能","关键","来到","只要"," ","玩耍","增长","最高","做","效率","有志","开发者","40","柔性","访问","结晶","更","turtlebot","曲线","模块化","更为","正式版","迎来","利器","介于","好","知识","百万","而生","使用","进化","最后","发布","论坛","大步","团队","研发","媒体","所以","经历","此","趋势","核心","工程师","时候","却步","传感器","工程","本","所学","强悍","willow","动机","全球","明智","圈","成为","一套","神秘","托管","conference","人类","打","智慧","参考","平台","一大笔钱","详细","处理","斯坦福","应用","家","一次","参考资料","数据库","解决","干","主阵地","world","时间","跨平台","全新","这个","人才","促使","精致","复合","更好","大量","是","接下来","多项","又","跑","选择","主要","操作","资本","苹果","速度","全书","—","底盘","其他","学术","总体","各样","packages","版本","绝对","智能","ros2","有没有","还","肩负","相关","欢迎","方法","关于","不到","月","万万","几百","2010","肩负着","以","方式","或者","了","光靠","叠","日常","多万","中","实验室","很快","部件","变为","因为","近几年","物体","一堂","深知","统统","说明","居","其次","5","风险","做出","每","终于","造","得以","做法","但是","基本上","这一波","五年","可为","视频","头发","应用软件","作为","特点","加","不仅","广泛","革命","研究","增长速度","移动机器人","最佳","其实","张图","美妙","快速","不下","humble","动力","事情","传感","暴露","单独","浪潮","助推","统计","工业","逐渐","下载","真的","2017","discourse","设计","跟随","向前","c","正在","一起","月底","电路","还有","板块","这","商业化","集合","代","新鲜","org","每年","低","开始","才","一大","汽车","成功","无论是","智能化","几年","各种","不想","适用","生态系","的","创始","受限","同样","性能","一段","都","一些","图","年","分享","巨大","复用","活跃","针对","技术","总而言之","正式","轮子","ubuntu","新增","机器人","步伐","数据","人数","帮助","实现","虽好","名称","版","；","多","已有","木头","不要","基本","清晰","重量","来自","让","通过","这里","150","进入","什么","系列","用","配合","kinect","找到","公司","体系","将","就是","代表","推出","使命","全人","课程","嵌入式","斯坦福大学","生态","台球","为什么","年轻人","时代","给","问答","操作系统","具备","肯定","2022","叫做","感器","存储","人形","起来","wiki","陪","不断更新","2012","甚至","这是","上市","产品","便宜","浏览量","毛巾","非常","多媒体","软件系统","元素","然后","开发","开发工具","同学","讲解","2014","可能","据库","服务","包","款","电脑","所有","制造","支持","风险投资","一个","价格","搜索","机制","肩膀","2007","场景","garage","机器","程度","投资","大大","缩短","operating","工具","笔记本电脑","给出","120","近两年","几个","起点","教程","项目","查看","我们","组成","/","一群","方向","不","为例","简称","。","无论","还是","提问","无聊","等","世界","robot","更新","复杂","着","臂","推动","沉淀","原因","有人","宽松","虽然","？","简单","当初","神兵","只","大笔","带领","居高不下","此时","到","每个","250","一定","接下","高度","其中","尽量","等等","看到","生态系统","个人","无疑","历经","2015","要","浏览","大","联合","直到","局限","重新","维基百","频繁","不乏","类似","得到","一系列","目标","不多","量级","移动","来讲","收拾","模块","把","页面","过程","索引","这些","之旅","所有人","啦","想到","远","长期","通信","成熟","容易","”","亚马","涉及","后期","15","扩展","上图","国家","ros","效果","标准","投了","引擎","根据","b","会","“","说干就干","控制","框架","因","xbox","游戏机","该","采购","做成","可以","却","挑战","外观","没有","没想","linux","对","认识一下","自己","很","pr2","熨烫","全球化","对于","之上","横跨","案例","两个","而言","呢","推荐","面纱","一系","许可","2","源码","爆款","活动","快","下来","零","自身","讨论","2011","万","熟悉","望而却步","很多","在","围绕","大会","限于","a","社区","越来越","，","软件","专业","基于","访问量","资料","记录","机械","整理","能够","大部分","入门","回答","完全","早期","用户","长远","这位","上边","重量级","原型","嘉宾","推进","情况","如何","、","以上","而且","看中","roscon","做到","乐意","绝大","之","轰动","洗衣","首先","向","嵌入","任何","福大","如果","多年","四大","发表","后续","windows","这样","普及","系统","来看","大家",".","想法","零部件","一样","年轻","大有可为","活跃度","下","独立","现在","举办","内容","几百万","身影","于","这群","做饭","局限性","人","实验","线上","各项","同时","笔记","全人类","图中","他们","既然","有","掀起","大学","亚马逊","和","由","第一次","一下","一家","前","加快","ros1","差不多","微软","向前走","为","万左右","泡泡","同一","从","衣服","同理","剪头发","index","不断","直接","就","answers","正如","掌握","认识","年底","水下","上去","古月","分钟"],"title":"ROS和ROS2是什么","title_tokens":["和","是","ros","什么","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#rosros2","text":"智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。","text_tokens":["量级","挑战","重量","这位","智能化","开发","了","应用","重量级","对","掀起","认识一下","中","嘉宾","全","？","的","一下","呢","面纱","什么","带领","而生","进化","那","下来","向","场景","是","高度","又","ros","接下","巨大","接下来","机器","操作","正在","一起","时代","系统","大家","操作系统","提出","这","就"," ","认识","我们","，","方向","神秘","机器人","。","智能","ros2"],"title":"ROS/ROS2是什么","title_tokens":["是","/","ros","什么","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。","text_tokens":["有志","才","一大","柔性","收拾","层面","越来","更","上","重要","诞生","所有人","不想","的","之内","同样","一切","性能","容易","而生","都","涉及","一些","后期","最后","图","年","大步","团队","分享","效率","所以","ros","标准","青年","时候","低","针对","强悍","技术","圈","成为","一套","说干就干","框架","机器人","因","以叠","帮助","实现","可以","多","却","打","木头","平台","外观","尝试","没有","处理","斯坦福","用于","这款","应用","家","一次","自己","pr2","干","不是","很","熨烫","对于","横跨","聊天","呢","什么","系列","这个","用","一系","找到","就是","2","精致","那","斯坦福大学","是","台球","你","操作","为什么","苹果","很多","完成","操作系统","在","肯定","—","越来越","，","软件","专业","100","基于","学术","陪","机械","整理","有没有","还","智能","甚至","从中","不到","第一","当时","非常","毛巾","软件系统","或者","开发","了","光靠","叠","原型","中","可能","实验室","服务","如何","、","部件","：","因为","款","而且","所有","物体","很快","一个","深知","问题","轰动","洗衣","2007","资金","5","福大","如果","已经","做出","机器","personal","得以","这样","但是","系统","给出","出来","大家","想法","零部件","并","分钟","高效","头发","我们","独立","应用软件","一群","组成","不","为例","。","无聊","研究","别人","做饭","等","人","实验","robot","复杂","初期","图中","推动","他们","既然","有人","有","大学","条","和","虽然","事情","？","也","充足","第一次","只","向前走","同一","衣服","此时","一大步","真的","剪头发","设计","其中","一款","向前","看到","一起","个人","电路","答案","就","要","个","这","手机","功能","只要"," ","玩耍","联合","代","类似","做","一系列"],"title":"ROS的诞生","title_tokens":["的","诞生","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_1","text":"ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称ROSCon，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。","text_tokens":["开始","开发者","部分","起","一大","成功","把","越来","更","turtlebot","过程","重要","诞生","几年","想到","各种","适用","注意","正式版","的","同年","创始","长期","迎来","介于","受限于","百万","成熟","受限","亚马","使用","后期","发布","年","分享","团队","真正","所以","经历","ros","一届","发展","投了","却步","传感器","本","原本","willow","改为","全球","正式","圈","会","成为","控制","ubuntu","游戏机","机器人","xbox","步伐","该","conference","虽好","可以","名称","版","多","一大笔钱","来自","没想","斯坦福","让","应用","野蛮","pr2","自己","这里","之上","world","时间","进入","全新","这个","kinect","公司","价格便宜","爆款","使命","推出","成本","斯坦福大学","system","是","进行","2011","迭代","各种各样","操作","年轻人","资本","时代","熟悉","望而却步","给","笔记本","操作系统","在","提出","大会","限于","此后","—","底盘","2022","叫做","感器","随着","越来越","，","软件","各样","版本","2012","ros2","肩负","能够","这是","大部分","回到","早期","第一","便宜","几百","万万","2010","肩负着","稳定","开发","了","时间轴","讲解","原型","2014","中","商业","服务","很快","开源","款","、","因为","电脑","看中","所有","变为","roscon","支持","风险投资","加上","一堂","第一个","绝大","提取","价格","一个","问题","intel","2007","5","garage","风险","大部","福大","多年","已经","每","机器","终于","投资","大大","operating","普及","但是","系统","笔记本电脑","出来","近两年","一样","标志","五年","年轻","起点","限性","教程","项目","下","我们","了解","现在","简称","举办","。","几百万","为了","不仅","身影","于","这群","被","只想","局限性","等","人","线上","robot","齐聚一堂","体感","而","笔记","着","推动","快速","不下","绝大部分","他们","原因","humble","大学","确定","亚马逊","和","也","传感","当初","暴露","一家","大笔","前","加快","单独","微软","为","采用","居高不下","助推","两年","官方","从","游戏","到","逐渐","每个","没想到","2017","一大笔","扫地","其中","一款","跟随","设计","疫情","月底","个人","直接","历经","2015","就","这","功能","关键"," ","年底","大","直到","局限","增长","不乏","类似","每年","做"],"title":"ROS的发展","title_tokens":["的","发展","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_2","text":"ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的应用案例在社区中沉淀下来； ROS本身也是完全开源的，商业许可证非常宽松； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品，缩短了产品的上市时间； ROS也可以跨平台使用，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多支持工业应用的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["目标","部分","总称","汽车","移动","来讲","模块","结晶","把","越来","更","无论是","上","智能化","模块化","这些","领域","各种","生态系","远","的","通信","”","使用","都","最后","分享","媒体","此","核心","ros","发展","复用","标准","引擎","本身","技术","动机","明智","b","全球","会","轮子","成为","站","“","许可证","新增","机器人","采购","做成","可以","实现","；","多","人类","已有","智慧","不要","平台","用于","进步","应用","linux","家","对","自己","这里","不是","全球化","案例","通常","新","时间","跨平台","至今","这个","人才","促使","许可","公司","体系","将","代表","就是","复合","全人","那","下来","零","自身","生态","来","嵌入式","是","多项","跑","各种各样","怀揣","今日","成果","给","很多","在","围绕","具备","a","社区","人形","越来越","软件","，","各样","机械","智能","还","ros2","完全","上市","普遍","产品","长远","创意","特性","非常","多媒体","以","开发","了","开发工具","中","商业","推进","、","开源","：","制造","支持","做到","之","一个","多媒体系统","机制","统统","肩膀","巨人","嵌入","已经","四大","机器","友好","造","缩短","做法","这样","系统","工具","大家","windows","并","我们","组成","还是","无论","。","特点","广泛","身影","被","移动机器人","别人","同时","着","提高","臂","沉淀","全人类","快速","他们","宽松","有","和","一步","由","也","比如","简单","一家","ros1","向前走","工业","从","同理","到","率","时至今日","设计","尽量","向前","c","看到","一起","生态系统","直接","繁荣","就","这","正如","整合","功能","商业化"," ","集合","重新","水下","上去","做"],"title":"ROS的特点","title_tokens":["的","特点","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_3","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。","text_tokens":["开发者","40","不多","部分","访问","页面","越来","索引","曲线","上","新鲜事","棒","重要","几年","这些","更为","各种","的","万人","利器","80","使用","都","论坛","维基","发布","上图","15","研发","国家","趋势","核心","发展","ros","最为","活跃","本","根据","总而言之","全球","会","成为","人数","数据","机器人","可以","；","多","参考","基本","度","清晰","希望","应用","数据库","通过","很","这里","两个","而言","150","新","迅猛","呢","什么","代表","学习","就是","源码","活动","快","是","讨论","选择","四项","万","你","速度","很多","问答","给","在","提出","存储","社区","其他","越来越","，","起来","wiki","总体","packages","访问量","记录","绝对","20","排名","资源","相关","这是","维基百科","大部分","回答","关于","用户","月","浏览量","非常","元素","方式","上边","开发","了","日常","多万","中","百科","据库","情况","包","、","不同","：","近几年","以上","乐意","绝大","一个","问题","说明","左右","任何","发表","大部","已经","每","机器","程度","如果","基本上","来看","这一波","大家",".","几个","教程","次数","可为","大有可为","查看","活跃度","我们","作为","现在","不","。","加","革命","增长速度","最佳","等","其实","人","各项","张图","地域","快速","绝大部分","动力","有","和","？","也","比如","神兵","差不多","万左右","浪潮","助推","算是","统计","从","到","每个","下载","250","discourse","index","其中","网站","等等","看到","正在","无疑","25","就","这","answers","整合","功能"," ","浏览","维基百","新鲜","大","频繁","增长","org","最高","得到"],"title":"ROS的社区","title_tokens":["社区","的","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#_1","text":"关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["开始","部分","重要","之旅","啦","的","万人","好","知识","一段","使用","都","最后","扩展","分享","ros","最为","离不开","工程师","效果","工程","阵地","本","百科全书","所学","技术","会","成为","努力","机器人","托管","可以","google","参考","详细","踏上","参考资料","解决","这里","主阵地","推荐","之王","配合","这个","找到","将","学习","课程","更好","大量","是","提供","主要","代码","你","在","全书","—","社区","，","资料","不断更新","还","ros2","欢迎","大部分","入门","方法","关于","然后","开发","同学","中","百科","几乎","开源","所有","绝大","一个","问题","搜索","首先","居","其次","大部","机器","后续","工具","大家","120","几个","教程","项目","视频","我们","作为","内容","提问","。","github","不开","世界","更新","美妙","绝大部分","有","和","也","泡泡","入门教程","从","一定","网站","不断","板块","一起","还有","这","要","掌握","来到"," ","古月"],"title":"参考资料","title_tokens":["参考","参考资料","资料"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/","text":"ROS2对比ROS1 在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。 ROS1的局限性 首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。 全新的ROS2 ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。 ROS2 vs ROS1 系统架构 在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。 DDS通信 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。 核心概念 ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。 编码方式 再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。 命令行 最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随课程，你就会慢慢理解这些特性。","text_tokens":["交付","部分","小","100ms","会成","么","生活","中间","听","层面","越来","级别","架构","上","重要","诞生","左侧","全","注意","类型","依然","配置","迈过","切记","例子","产品化","课时","真正","历史","发展","最为","通用性","学","加密","原本","下边","接入","安全","一团乱","时","间层","前方","简单明了","结合","幅度","连接","需要","中间层","几点","个体","便于","用于","需求","伙伴","依赖","不是","受制于","指定","不难理解","第二","即可","不断涌现","周期","搭载","catkin","学习","按照","那","成本","来","小伙","提供","进行","运动学","消费市场","各种各样","编码方式","代码","条件","你","走向市场","怀揣","调试","部头","变化","运行","完成","更加","行为","随着","run","自家","资源","过","雷达","第一","厂商","特性","稳定","它","暂且","启动","编译器","分解","商业","几乎","具体","工作站","满足","不同","：","接触","得","新版","开源","另外","精力","第一个","编写","问题","安装","成功经验","打成","大部","只能","已经","很大","标准化","之前","限性","并","只有","了解","也许","为了","经常","应该","完整","原有","不太","而","提高","二个","二代","绝大部分","听说","一步","充足","也","表示","比如","可靠性","布式","天翻地覆","指挥","网络连接","语言","一行","没","dds","丰富","why","国际","率","共享","能","一款","无法","厂家","答案","干扰","专注","手机","接口","功能","改","调用"," ","只要","稍安","编译系统","主角","揭秘","底层","运算","要求","做","开发者","除此之外","更","macos","除此","协作","担心","好","建筑","移植性","百万","上升","基础","使用","印象","开发成本","middleware","尽力","发布","最后","研发","先","所以","之间","编程","核心","交给","时候","工程","本","毛坯","可选","客户端","多功能","全球","一套","（","discovery","阶段","消失","走","设备","角色","另","发送","平台","大幅","处理","部署","rosrun","应用","移植","解决","强壮","图像","陌生","有限","时间","跨平台","全新","多个","这个","干掉","还会","更好","实时","大量","是","选择","话题","主要","管理","操作","工作","以下","大部头","—","其他","可靠","或","学术","总体","各样","python3","版本","命令行","网络","ros2","智能","微控制器","还","master","图片","相关","wifi","与","勿躁","方法","流程","信号","写","广泛应用","几百","灵活","方式","或者","了","想要","各位","中","fastrtps","突然","而已","android","因为","一一","导致","有且","纠结","测试","说明","一代","三个","风险","含义","通用","每","面向对象","总体而言","但是","强","丢","角度","力学","良好","不仅","推倒重来","广泛","体现","研究","可读性","最佳","家庭","rosbuild","继续","其实","rmw","）","张图","比","节点","名字","程序","过去","足够","明显","动力","盖","行人","他","更接","符合","难度","进程","减少","但","计算","设计","跟随","一旦","怎样","先进","还有","意义","这","电脑系统","复杂度","除了","不爽","最新","自","最终","amr","开始","分布","尤其","汽车","下要","成功","看","实力","定性","可选项","对象","打交道","未来","如","保障","总之","借鉴","各种","新一代","之初","colcon","的","历史使命","请","适用","发成","二种","保留","性能","同样","都","小伙伴","一些","以下几点","基本保障","慢慢","运动","巨大","后","复用","5g","内部","针对","诟病","宕机","适合","管理器","这台","是从","可移植性","机器人","数据","安全性","实现","完整性","发","名称","；","多","客户","对系统","不要","基本","发现","确实","让","udp","通过","这里","毛坯房","驱动","总结","企业","什么","用","变得","似乎","找到","公司","应用层","将","就是","课程","使命","远比","里","嵌入式","消费","搬","为什么","ament","时代","给","编译","操作系统","具备","肯定","实时性","叫做","动力学","更换","迁移","甚至","重来","面向","产品","发布者","环境","升级","链接","学术研究","软件系统","完","然后","开发","非常","集成","批量生产","讲解","可能","千差万别","内","服务","加入","款","出错","不能","电脑","变革","所有","细节","支持","主","相比","一个","机制","之外","是否","真实","单兵作战","场景","大致","机器","彼此","一致","工具","不够","到底","教程","项目","最","我们","/","单兵","不","简称","。","无论","至关重要","共享内存","相对","常","第二种","等","有线","大幅度","轻松","体验","复杂","属性","命令","高","能力","虽然","考虑","？","一页","简单","交道","黑客","放在","国际标准","之后","推倒","带领","api","到","省略","每个","一定","其中","高昂","尽量","可读","生产","理器","出现","编码","看看","延迟","要","房子","上手","批量","层","颠覆性","大","重新","协议","局限","不用","频繁","最大","类似","深入","通信接口","目标","当","一种","来讲","只不过","把","成","内存","过程","topic","这些","库会","啦","一本","哪些","通信","售价","右侧","用到","更具","以及","对比","借助","rostopic","ros","标准","方便","方案","一边","一团","两者","封装","python","较","接收","信息","会","定义","控制","框架","该","面临","经验","入侵","做成","可以","mcu","第二个","可移植","ceo","挑战","没有","收","优化","陆续","是因为","由于","linux","对","pr2","自己","某","差异","两个","而言","对于","之上","概念","翻地","呢","翻新","不难","控制器","系统工程","修改","算力","rtos","常用","一团乱麻","联网","致使","熟悉","走向","很多","在","诸多","驾驶","切换","社区","越来越","项目管理","，","软件","适配","基于","性","只是","颠覆","策略","能够","大部分","面对","涌现","用户","长远","过来","作战","选项","道坎","物","不过","分布式","、","如何","建立","再","稳定性","带来","以上","做到","解密","格局","绝大","首先","开发方式","嵌入","任何","如果","第二代","后续","来看","这样","普及","系统","windows","受制","大家","现有","一样","全部","市场","下","独立","地方","理解","解算","通信协议","几百万","装修","于","当然","从而","局限性","编程语言","软件开发","不再","唯一","同时","他们","有","举","和","不好","一下","ros1","c++","vs","完善","一家","接近","为","所示","1ms","从","航天","存在","保证","乱麻","去","不断","初次","分散","直接","自动","至关","就","提","opensplice","换成","tcp","整体","最早","不会","担忧","产品开发"],"title":"ROS2对比ROS1","title_tokens":["对比","ros2","ros1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2ros1","text":"在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。","text_tokens":["过","名称","多","么","上","二代","听说","有","和","？","的","第二","ros1","使用","学习","一个","就是","从","对比","能","其中","ros","第二代","你","之前","来看","变化","看看","在","就","这","到底"," ","我们","大","，","也许","或","不","。","做","ros2"],"title":"ROS2对比ROS1","title_tokens":["对比","ros2","ros1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros1","text":"首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。","text_tokens":["目标","部分","小","汽车","实力","级别","上","诞生","各种","新一代","的","类型","通信","售价","都","一些","历史","ros","发展","内部","针对","原本","会","适合","这台","框架","机器人","数据","入侵","做成","设备","可以","；","连接","平台","类似","处理","没有","用于","是因为","由于","让","应用","pr2","自己","有限","翻地","呢","时间","不断涌现","什么","用","似乎","搭载","找到","就是","课程","那","成本","嵌入式","实时","算力","是","条件","走向市场","为什么","工作","致使","走向","运行","完成","在","具备","驾驶","—","更加","随着","可靠","，","学术","软件","网络","ros2","甚至","资源","大部分","涌现","产品","第一","作战","学术研究","它","开发","了","或者","批量生产","中","具体","服务","工作站","款","：","因为","支持","第一个","绝大","一个","问题","首先","一代","单兵作战","风险","大部","只能","嵌入","已经","机器","来看","这样","但是","不够","丢","普及","系统","并","市场","良好","我们","独立","地方","单兵","不","。","为了","当然","研究","家庭","有线","复杂","足够","绝大部分","有","能力","他","和","虽然","充足","？","也","比如","黑客","可靠性","ros1","天翻地覆","网络连接","why","从","计算","航天","设计","一款","高昂","保证","生产","不断","先进","出现","答案","干扰","自动","就","这","要","批量"," ","主角","最早","不用","担忧","最终","运算"],"title":"ROS1的局限性","title_tokens":["限性","局限性","的","ros1","局限"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2","text":"ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。","text_tokens":["100ms","生活","层面","越来","架构","上","全","产品化","课时","真正","历史","通用性","加密","原本","安全","前方","结合","连接","需要","几点","个体","用于","需求","不是","受制于","第二","周期","搭载","catkin","那","提供","进行","运动学","消费市场","各种各样","代码","怀揣","调试","变化","运行","完成","更加","行为","第一","特性","稳定","它","编译器","分解","具体","满足","不同","：","得","新版","第一个","编写","问题","成功经验","打成","已经","很大","标准化","并","为了","经常","完整","原有","也","比如","布式","网络连接","语言","dds","能","一款","无法","手机","接口"," ","编译系统","要求","开发者","更","macos","协作","好","建筑","基础","使用","尽力","研发","所以","之间","时候","工程","毛坯","（","阶段","角色","发送","平台","部署","应用","移植","强壮","跨平台","全新","这个","还会","实时","大量","是","选择","管理","操作","工作","以下","可靠","各样","python3","智能","ros2","微控制器","网络","还","master","wifi","与","方法","流程","信号","或者","了","中","android","导致","纠结","测试","说明","风险","通用","强","但是","力学","不仅","推倒重来","体现","最佳","rosbuild","继续","）","比","节点","过去","明显","动力","盖","行人","但","设计","一旦","怎样","这","电脑系统","除了","最新","最终","amr","分布","尤其","汽车","下要","成功","定性","未来","保障","借鉴","各种","colcon","之初","的","历史使命","二种","保留","性能","都","以下几点","基本保障","运动","巨大","后","针对","宕机","适合","管理器","机器人","数据","安全性","实现","完整性","多","对系统","基本","发现","让","毛坯房","用","就是","课程","使命","远比","消费","ament","时代","给","编译","操作系统","具备","肯定","实时性","叫做","动力学","甚至","重来","产品","环境","升级","链接","开发","可能","千差万别","内","出错","不能","电脑","变革","所有","细节","相比","一个","机制","场景","机器","工具","项目","我们","不","。","无论","相对","第二种","等","体验","复杂","虽然","考虑","？","简单","黑客","推倒","api","到","一定","尽量","理器","出现","要","房子","颠覆性","大","重新","不用","类似","一种","把","这些","通信","更具","以及","借助","ros","标准","方便","方案","python","较","会","控制","框架","面临","经验","入侵","可以","mcu","挑战","没有","优化","linux","对","自己","差异","两个","之上","呢","翻新","控制器","系统工程","修改","算力","rtos","很多","走向","在","诸多","驾驶","越来越","项目管理","，","软件","性","只是","颠覆","策略","能够","面对","长远","分布式","如何","、","稳定性","做到","解密","格局","任何","后续","windows","这样","来看","系统","受制","大家","全部","市场","下","独立","解算","装修","于","不再","同时","他们","有","和","不好","一下","ros1","c++","为","1ms","去","直接","自动","就","提","不会"],"title":"全新的ROS2","title_tokens":["全新","ros2","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2-vs-ros1","text":"","text_tokens":[],"title":"ROS2 vs ROS1","title_tokens":["vs"," ","ros2","ros1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_1","text":"在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。","text_tokens":["通信接口","开始","会成","只不过","中间","看","听","可选项","把","成","macos","内存","打交道","上","架构","重要","这些","库会","左侧","请","注意","的","好","通信","哪些","右侧","都","印象","对比","发布","先","深入","ros","标准","时候","一团","两者","封装","下边","可选","客户端","接收","信息","管理器","会","一团乱","一套","间层","discovery","是从","框架","简单明了","数据","消失","走","可以","角色","连接","需要","ceo","中间层","客户","发现","让","应用","依赖","udp","linux","通过","图像","不难理解","驱动","这个","变得","不难","公司","找到","应用层","将","就是","学习","里","那","大量","是","进行","提供","主要","rtos","一团乱麻","管理","操作","变化","很多","操作系统","在","肯定","—","更加","，","基于","更换","ros2","master","过","方法","雷达","写","稳定","它","方式","开发","了","选项","中","不过","内","突然","、","建立","再","而已","接触","得","所有","另外","有且","一个","机制","安装","大致","如果","彼此","后续","windows","这样","系统","大家","一样","并","只有","最","我们","了解","不","理解","通信协议","。","至关重要","共享内存","应该","从而","不太","张图","节点","而","名字","复杂","程序","明显","有","和","也","比如","简单","交道","ros1","完善","指挥","进程","但","dds","共享","乱麻","理器","至关","就","这","接口","调用"," ","tcp","层","整体","协议","频繁","自","底层","类似"],"title":"系统架构","title_tokens":["系统","架构"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#dds","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。","text_tokens":["目标","交付","部分","一种","么","来讲","层面","把","更","这些","总之","各种","适用","的","发成","好","通信","配置","性能","都","例子","一些","开发成本","middleware","先","所以","ros","复用","标准","交给","5g","加密","诟病","接入","产品开发","会","时","定义","该","机器人","数据","实现","发","可以","多","另","基本","部署","收","优化","需求","让","udp","应用","某","解决","移植","这里","不是","指定","对于","多个","这个","用","就是","按照","成本","是","选择","提供","联网","代码","熟悉","变化","给","在","肯定","切换","更加","其他","社区","，","软件","适配","基于","更换","版本","自家","ros2","能够","master","用户","产品","写","广泛应用","过来","厂商","然后","完","软件系统","稳定","灵活","开发","了","想要","中","物","fastrtps","商业","不过","加入","、","不同","如何","开源","满足","得","带来","再","精力","相比","一个","问题","之外","纠结","安装","是否","场景","三个","如果","每","机器","这样","系统","丢","一样","并","最","我们","/","不","简称","通信协议","。","为了","广泛","应该","于","当然","常","rmw","等","其实","轻松","唯一","属性","程序","提高","复杂","听说","高","举","也","？","比如","简单","放在","ros1","国际标准","一家","符合","一行","为","减少","dds","丰富","国际","专注","省略","每个","率","设计","无法","厂家","还有","延迟","就","opensplice","这","要","复杂度","功能","接口","除了","只要","tcp"," ","不爽","改","协议","重新","频繁","不用","最大","底层","类似","做"],"title":"DDS通信","title_tokens":["dds","通信"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_2","text":"ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。","text_tokens":["第二个","过","开发者","部分","方法","便于","几百","没有","非常","二个","方式","开发","了","应用","伙伴","这些","有","各位","讲解","担心","这里","中","和","陌生","的","也","概念","几乎","第二","ros1","一一","依然","百万","保留","使用","小伙伴","学习","以及","从","课程","到","存在","开发方式","迁移","小伙","其中","尽量","如果","已经","含义","一致","ros","熟悉","意义","本","大家","很多","在","并","就","全球"," ","我们","会","，","不","不用","。","几百万","广泛","应该","ros2"],"title":"核心概念","title_tokens":["概念","核心"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_3","text":"再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。","text_tokens":["当","来讲","对象","更","过程","如","的","一本","移植性","同样","迈过","用到","切记","一些","发布","编程","一边","学","会","可移植性","机器人","实现","可移植","多","不要","发现","确实","移植","而言","两个","企业","用","学习","课程","更好","来","搬","是","部头","操作","在","具备","大部头","，","软件","总体","版本","ros2","图片","勿躁","方法","面向","发布者","写","特性","方式","开发","暂且","道坎","中","不过","具体","如何","再","一个","真实","大部","面向对象","机器","后续","总体而言","大家","角度","教程","项目","我们","。","可读性","编程语言","软件开发","程序","提高","和","一步","也","更接","一页","ros1","之后","接近","语言","难度","所示","带领","从","可读","编码","看看","就","这"," ","稍安"],"title":"编码方式","title_tokens":["方式","编码","编码方式"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_4","text":"最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随课程，你就会慢慢理解这些特性。","text_tokens":["除此之外","一种","把","更","除此","topic","这些","啦","的","好","通信","上升","都","印象","对比","最后","rostopic","慢慢","编程","核心","ros","最为","多功能","会","控制","幅度","大幅","rosrun","陆续","某","对","而言","概念","总结","即可","干掉","就是","课程","是","话题","选择","常用","你","变化","在","—","，","run","命令行","ros2","master","相关","集成","特性","开发","了","启动","中","再","：","以上","所有","主","一个","之外","大致","如果","每","后续","工具","现有","大家","教程","下","我们","独立","理解","。","相对","大幅度","节点","命令","有","和","表示","也","比如","ros1","难度","没","dds","跟随","初次","分散","就","上手","功能","换成"," ","揭秘","做"],"title":"命令行","title_tokens":["命令行","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/","text":"ROS2安装方法 本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。 Linux系统简介 时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。 Ubuntu系统简介 我们后续课程使用到的Linux发行版就是ubuntu系统。 Ubuntu诞生于2004年10月份，每六个月发布一个新版本，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。 Ubuntu虚拟机安装 虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下： 1. 下载系统镜像 下载链接： https://ubuntu.com/download/desktop 2. 在虚拟机中创建系统 3. 设置虚拟机硬盘大小 4. 设置Ubuntu镜像路径 5. 启动虚拟机 6. 设置用户名和密码 7. 等待系统安装 8. 完成安装 Ubuntu系统安装好后，大家可以先随意使用熟悉一下。 ROS2系统安装 接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下： 1. 设置编码 $ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8 2. 添加源 $ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844 3. 安装ROS2 $ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop 4. 设置环境变量 $ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。 ROS2示例测试 为了验证ROS2安装成功，我们可以通过以下示例进行测试。 示例一：命令行示例 先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。 示例二：小海龟仿真示例 再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。 附：虚拟机镜像 为了方便大家入门学习，我们也提供了预装好ROS2软件和教程代码的虚拟机镜像，有需要的小伙伴可以通过以下链接下载： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["cpp","越来","lsb","修复","上","目前","外衣","重要","诞生","领域","raw","redhat","千层","之内","依然","22","list","试试","各个","发展","指令","最为","pan","原本","archive","准确","时","\"","小海","一般","算机","虚拟","需要","伙伴","依赖","中将","当中","构建","尚","编号","新","迅猛","第二","出","正常","学习","ssl","如遇","至此","nodes","来","小伙","多人","进行","提供","各种各样","代码","你","相同","connect","运行","完成","https","先要","量","第二句","一应","学生","月份","run","apt",")","html","发挥","回到","第一","二","稳定","teleop","蓝色","启动","商业","exc6","开源","不同","：","接触","另外","baidu","提取","加上","第一个","问题","奥义","安装","左右","操作方法","www","dpkg","1991","已经","之前","普通","优先","2004","并","codename","顺序","何人","了解","动手","为了","应该","githubusercontent","文件","原有","变动","不太","真理","o","二个","报错","4","任何人","key","表示","也","比如","前先要","curl","采用","dds","两年","爱好者","一位","终端","上层","8","个","功能","("," ","硬盘","真器","其他软件","底层","pro","做","开发者","除此之外","爱好","ubuntu22.04","激发","上下","更","04","macos","除此","dev","locales","比较","好","s","使用","决定","发布","好后","先","编辑","所以","核心","main","时候","本","upgrade","architecture","千层浪","成为","一套","介绍","download","编辑器","其后","兼容","http","参考","echo","务器","可视化","_","--","操作界面","应用","一次","移植","衡量","有限","world","时间","多个","这个","talker","内核","环境变","en","一应俱全","update","大量","是","选择","接下来","主要","任务","后缀","turtlesim","管理","操作","工作","以下","7","—","utf","互联","其他","或","唯一标准","各样","packages","提到","版本","大学生","绝对","智能","ros2","还","网络","master","命令行","与","方法","关于","持续","月","添加","以","或者","了","想要","中","关注","因为","硬件","发行版","测试","说明","命名","5","通用","每","但是","release","步骤","吧","镜像","应用软件","字符串","俱全","locale","不仅","看出","node","最好","lts","export","ubuntu20.04","名字","节点","程序","动手做","快速","humble","仿真器","强大","source","unix","码","他","-","但","sources","指标","计算","下载","探索","设计","一起","这","如下","除了","to","org","紧随","18",":","每年","个人爱好","开始","成功","激起","实力","界面","按键","无论是","未来","各种","适用","伴随","这套","的","请","验证","failed","示例","性能","一","都","小伙伴","一些","年","每隔","分享","print","rosdistro","多任务","后","运动","占据","&&","设置","影响","技术","其","适合","用户名","传输","ubuntu","者","机器人","数据","实现","版","多","服务器","已有","tee","会加","基本","准备","usr","让","经典","通过","这里","发扬光大","signed","企业","什么","预装","公司","代表","将","就是","课程","六个月","出于","第一句","计算机","通讯","华丽","传播","给","操作系统","创建","并用","fedora","2022","叫做","起来","互联网","随意","甚至","arch","源","workstation","gen","发布者","desktop","环境","升级","链接","开发","键盘","一石激起千层浪","讲解","可能","加入","服务","人工智能","路径","电脑","分别","支持","一个","精神","之外","是否","实践","场景","发行","热爱","机器","教程","install","lang","最","我们","/","乐于","吸引","不","还是","为例","。","无论","蕴藏","环境变量","之一","1dvxugmhxlxnsnfdezuxw0g","等","|","更新","收费","提交","命令","虽然","考虑","？","多用户",">","热情","行列","只","之后","变量","6","上下左右","turtle","到","维护","此时","附","一定","接下","其中","海龟","等等","看到","by","出现","py","个人","编码","应用程序","gnupg","一句","浏览","大","重新","仿真","浏览器","技术实力","os","最大","试一试","=","一种","来讲","把","成","过程","订阅","sudo","share","啦","长期","通信","listener","建议","成熟","点击","”","六个","背景","密码","products","ros","demo","效果","标准","方便","户名","虚拟机","自行","opt","会","guyuehome","“","说干就干","控制","摩拳擦掌","该","可以","第二个","节","没有","3","小海龟","linux","对","自己","~","很","两个","之上","概念","setup","呢","d","本相","原理","快","2","下来","常用","光大","联网","一直","熟悉","bashrc","很多","在","开放","简介","越来越","，","软件","资料","林纳斯","字符","all","入门","用户","keyrings","37844","模式","]","好者","情况","、","如何","再","数字","vmware","lc","人工","centos","任何","如果","位置","绑定","大小","后续","擦掌","windows","这样","系统","大家",".","deb","一样","反馈","合适","下","地址","可","现在","免费","等待","于","叫","null","bash","软件开发","us","唯一","同时","二句","有","大学","和","第一次","一下","打包","可视","bug","gpg","芬兰","多用","etc","从","hello","检验","紧随其后","1","10","保证","keyring","evaluation","放到","直接","并且","就","com","$","基本相同","发扬","[","源代码"],"title":"ROS2安装方法","title_tokens":["安装","ros2","方法"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2","text":"本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。","text_tokens":["一种","节","linux","重要","的","一下","前先要","安装","操作","一起","系统","本","操作系统","—","先要","最","我们","了解","，","。","底层","ros2"],"title":"ROS2安装方法","title_tokens":["安装","ros2","方法"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#linux","text":"时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。","text_tokens":["开发者","爱好","来讲","激发","激起","实力","把","界面","越来","更","成","修复","上","过程","macos","目前","外衣","重要","各种","redhat","适用","伴随","这套","的","千层","成熟","性能","使用","都","一些","决定","年","分享","先","所以","核心","发展","多任务","后","标准","本","原本","技术","准确","其","千层浪","会","适合","成为","一套","说干就干","ubuntu","实现","可以","多","兼容","一般","算机","已有","需要","服务器","参考","基本","务器","可视化","没有","操作界面","应用","linux","依赖","对","自己","通过","衡量","当中","发扬光大","尚","之上","有限","概念","迅猛","时间","企业","呢","什么","这个","本相","内核","公司","原理","就是","出于","计算机","大量","是","多人","主要","常用","光大","任务","联网","代码","各种各样","华丽","管理","操作","相同","熟悉","传播","很多","给","操作系统","在","开放","并用","—","fedora","量","互联","叫做","其他","越来越","，","学生","唯一标准","起来","或","软件","各样","互联网","做","提到","版本","大学生","还","甚至","ros2","林纳斯","与","方法","回到","用户","稳定","模式","或者","了","开发","一石激起千层浪","讲解","好者","中","商业","情况","加入","、","开源","不同","服务","硬件","另外","支持","加上","一个","问题","精神","centos","发行版","安装","命名","实践","操作方法","场景","发行","任何","1991","热爱","通用","绑定","已经","之前","每","windows","系统","一样","反馈","并","教程","镜像","何人","最","我们","应用软件","下","乐于","吸引","不","现在","动手","。","不仅","免费","应该","叫","之一","最好","原有","等","不太","真理","名字","唯一","程序","动手做","收费","快速","提交","强大","unix","有","大学","他","任何人","和","虽然","也","？","比如","多用户","打包","热情","行列","之后","bug","可视","但","芬兰","多用","爱好者","到","维护","计算","指标","此时","检验","设计","一位","其中","等等","看到","一起","出现","放到","个人","应用程序","就","并且","这","功能"," ","大","重新","技术实力","基本相同","发扬","底层","每年","个人爱好","源代码"],"title":"Linux系统简介","title_tokens":["简介","系统","linux"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu","text":"我们后续课程使用到的Linux发行版就是ubuntu系统。 Ubuntu诞生于2004年10月份，每六个月发布一个新版本，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。","text_tokens":["开发者","除此之外","ubuntu22.04","更","无论是","04","上","除此","未来","重要","诞生","领域","各种","的","比较","长期","之内","好","依然","建议","22","性能","使用","六个","都","发布","年","每隔","编辑","所以","各个","效果","占据","时候","虚拟机","自行","本","影响","会","时","介绍","ubuntu","摩拳擦掌","机器人","编辑器","其后","可以","版","多","已有","虚拟","会加","参考","让","应用","linux","一次","移植","自己","通过","很","这里","编号","新","出","代表","就是","快","课程","六个月","一应俱全","选择","是","通讯","进行","常用","一直","联网","后缀","主要","你","熟悉","很多","在","2022","互联","其他","一应","，","软件","月份","或","互联网","资料","绝对","版本","智能","还","网络","发挥","方法","用户","持续","月","第一","环境","升级","稳定","以","开发","了","想要","讲解","中","可能","、","人工智能","关注","如何","因为","不同","数字","电脑","硬件","接触","再","支持","人工","一个","发行版","之外","试一试","安装","5","发行","如果","位置","每","机器","已经","后续","擦掌","之前","普通","这样","但是","系统","优先","大家","2004","windows","教程","合适","顺序","我们","还是","为例","。","俱全","无论","看出","为了","免费","于","文件","lts","软件开发","变动","等","ubuntu20.04","更新","4","有","考虑","表示","也","第一次","比如","一下","只","之后","两年","从","到","维护","一定","紧随其后","其中","10","保证","上层","出现","直接","就","个","除了"," ","浏览","硬盘","浏览器","最大","紧随","18"],"title":"Ubuntu系统简介","title_tokens":["简介","系统","ubuntu"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu_1","text":"虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下：","text_tokens":["html","开始","虚拟","已有","workstation","环境","同时","准备","让","啦","这里","和","请","构建","之上","的","-","：","vmware","另外","多个","采用","一个","下载","安装","www","products","是","后","evaluation","操作","虚拟机","相同","自行","系统","工作","步骤","运行","大家",".","在","并","完成","com","就","如下","https"," ","叫做","我们","地址","其他","软件","，","其他软件","/","。",":","pro","可以"],"title":"Ubuntu虚拟机安装","title_tokens":["虚拟机","ubuntu","虚拟","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1","text":"下载链接： https://ubuntu.com/download/desktop","text_tokens":["下载","com","https"," ","：","/","download","desktop","链接","ubuntu",":","."],"title":"1. 下载系统镜像","title_tokens":["下载","镜像"," ","1","系统","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2","text":"","text_tokens":[],"title":"2. 在虚拟机中创建系统","title_tokens":["在","中","创建","虚拟"," ","2","虚拟机","系统","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3","text":"","text_tokens":[],"title":"3. 设置虚拟机硬盘大小","title_tokens":["虚拟"," ","硬盘","大小","3","虚拟机","设置","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4-ubuntu","text":"","text_tokens":[],"title":"4. 设置Ubuntu镜像路径","title_tokens":["镜像"," ","路径","ubuntu","4","设置","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#5","text":"","text_tokens":[],"title":"5. 启动虚拟机","title_tokens":["启动","虚拟","5"," ","虚拟机","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#6","text":"","text_tokens":[],"title":"6. 设置用户名和密码","title_tokens":["和","密码"," ","用户","用户名","6","户名","设置","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#7","text":"","text_tokens":[],"title":"7. 等待系统安装","title_tokens":["系统","安装"," ","7","等待","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#8","text":"Ubuntu系统安装好后，大家可以先随意使用熟悉一下。","text_tokens":["安装","好后","先","一下","，","ubuntu","随意","。","熟悉","使用","系统","大家","可以"],"title":"8. 完成安装","title_tokens":["8","安装"," ",".","完成"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_1","text":"接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下：","text_tokens":["把","了","中","：","到","下来","安装","接下来","接下","系统","步骤","就","如下","我们","，","ubuntu","。","ros2","可以"],"title":"ROS2系统安装","title_tokens":["系统","安装","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1_1","text":"$ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8","text_tokens":["export","all","gen","us","_","locales","sudo","-","lc","en","update","&&",".","8","install","utf","lang"," ","$","locale","apt","="],"title":"1. 设置编码","title_tokens":[" ","1","设置","编码","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2_1","text":"$ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844","text_tokens":["lsb","dev","sudo","share","raw","failed","list","”","print","rosdistro","ros","main","&&","archive","architecture","guyuehome","“","ubuntu","\"","http","tee","参考","echo","_","--","usr","signed","d","ssl","如遇","update","connect","https","，","packages","apt","ros2",")","master","arch","keyrings","37844","]","www","dpkg","release",".","deb","codename","install","/","可","githubusercontent","null","|","o","报错","source","key","-",">","gpg","curl","etc","sources","keyring","by","gnupg","com","("," ","to","$","os","org",":","[","="],"title":"2. 添加源","title_tokens":[" ","源","2","添加","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3-ros2","text":"$ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop","text_tokens":["upgrade","update","install","-"," ","ros","desktop","$","apt","humble","sudo"],"title":"3. 安装ROS2","title_tokens":["安装"," ","3","ros2","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4","text":"$ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。","text_tokens":["bash","\"","echo","humble","了","source","~","中","好","setup",">","至此","安装","ros","已经","bashrc","系统",".","就","在","opt"," ","/","，","$","。","ros2"],"title":"4. 设置环境变量","title_tokens":["环境变","环境变量"," ","变量","环境","4","设置","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_2","text":"为了验证ROS2安装成功，我们可以通过以下示例进行测试。","text_tokens":["通过","验证","安装","测试","我们","进行","成功","，","示例","为了","以下","。","ros2","可以"],"title":"ROS2示例测试","title_tokens":["示例","测试","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_1","text":"先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。","text_tokens":["第二个","字符","第一","发布者","cpp","节点","_","没有","二个","订阅","命令","重要","启动","通过","中","两个","的","通信","：","第二","world","listener","talker","”","第一个","dds","正常","一个","问题","发布","nodes","hello","是否","来","先","试试","说明","如果","demo","最为","终端","以下","py","系统","吧","在"," ","，","“","$","传输","字符串","者","。","数据","底层","run","ros2"],"title":"示例一：命令行示例","title_tokens":["：","示例","一","命令行","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_2","text":"再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["小海","关于","持续","第一","成功","节点","_","二句","上下","按键","teleop","上","小海龟","仿真器","键盘","经典","蓝色","启动","啦","中","key","两个","中将","的","再","：","第二","示例","分别","点击","”","上下左右","将","一个","turtle","背景","奥义","探索","至此","安装","来","第一句","左右","海龟","指令","ros","运动","turtlesim","后续","终端","运行","在","就","教程","—","如下","一句"," ","第二句","我们","真器","，","“","仿真","$","控制","该","。","试一试","run","蕴藏","node","ros2","可以"],"title":"示例二：小海龟仿真示例","title_tokens":["小海","海龟","：","仿真","示例","二","小海龟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_3","text":"为了方便大家入门学习，我们也提供了预装好ROS2软件和教程代码的虚拟机镜像，有需要的小伙伴可以通过以下链接下载： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["1dvxugmhxlxnsnfdezuxw0g","入门","虚拟","需要","链接","伙伴","了","码","有","通过","和","也","的","exc6","好","：","s","baidu","提取","预装","小伙伴","学习","下载","小伙","提供","方便","代码","pan","以下","虚拟机","大家",".","教程","com","镜像","https"," ","我们","/","，","软件","为了",":","ros2","可以"],"title":"附：虚拟机镜像","title_tokens":["镜像","虚拟","附","：","虚拟机"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/","text":"ROS2命令行操作 在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。 Linux中的命令行 类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。 启动方式 回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。 常用命令操作 我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。 ROS2中的命令行 ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。 运行节点程序 想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看节点信息 当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim 查看话题信息 当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose 发布话题消息 想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 发送服务请求 一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\" 发送动作目标 想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\" 录制控制命令 系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["小","标目","难以","上","手","重要","定制","便捷","常用命令","后边","list","动作","mkdir","指令","详细信息","geometry","约束","科幻电影","结合","从来","小海","\"","需要","rosbag","}","11","尝试","需求","cp","send","具体操作","不是","当前工作","指定","某段","逛去","即可","出","至今","正常","学习","必不可少","并不一定","来","mv","进行","提供","进一步","系统管理员","你","调试","17","相同","干什么","笔记本","运行","完成","十个","找","随着","什么样","run","+","回到","第一","它","teleop","窗口","启动","鼠标","具体","满足","不同","：","接触","拷贝","加上","第一个","觉得","问题","cmd","name","call","一点","快捷","做好","已经","之前","子","rate","并","总有","了解","一件","硬","数量","既","cd","被","文件","原有","所在","不太","一步","key","表示","也","比如","随身","知道","片段","record","0.0","总","play","终端","动","呈现出","功能","调用"," ","真器","srv","当前","子目","多到","40","感兴趣","z","一二十","更","04","既定","麻烦","好","不一","发指","使用","感觉","发布","先","编辑","此","所以","核心","vel","时候","不变","本","现出","编辑器","则","查","呀","linear","另","service","发送","详细","echo","可视化","地","_","--","二十","应用","孤单","一次","解决","写字","记忆","目标目录","多个","这个","删除","是","选择","话题","又","接下来","主要","theta","例如","管理","操作","工作","turtlesim","x","受","—","体操","其他","或","深色","消息","绝对","命令行","ros2","还","目录","与","至于","…","不到","魅力","以","灵活","方式","有点","了","或者","想要","中","主目录","实验室","太","y","商场","因为","段","参数","兴趣","显示","炫酷","复制到","spawn","每","精心设计","但是","角度","异常","node","继续","服装","节点","程序","{","仿真器","若","rotateabsolute","请求","-","复现","但","移入","新建","一二十个","这项","info","设计","一起","还有","体会","这","如下","打开","改名",":","绝对路径","其上","保持","0.2","action","未来","各种","逛来","的","turtle1","保留","一","都","一些","令人发指","慢慢","后","二十个","看似","均","播放","数据","实现","名称","多","统管","gedit","里边","确实","让","通过","这里","什么","系列","用","将","呈现","就是","推出","为什么","列出","商家","alt","创建","电影","2022","叫做","pose","起来","死记硬背","跟","规则","链接","集成","rosbag2","键盘","msgs","1.8","录制","可能","服务","路径","电脑","所有","某个","一个","每次","搜索","机制","场景","大致","工具","笔记本电脑","pwd","及其","产生","查看","我们","terminal","/","不","还是","文件名称","为例","。","无论","看不到","逛来逛去","文件夹","目","本节","等","哪","轻松","自主","体验","原因","命令","虽然","？","多种","执行","黑客",">","子目录","快捷键","2.0","带领","0","turtle","到","此时","死机","一定","复制","接下","海龟","看到","pub","适应","看看","要",",","背","仿真","不用","twist","试一试","深入","类似","一系列","列表","目标","一种","来讲","想象","改了","成","把","topic","文件名","sudo","这些","啦","哪些","买","语法","用到","容易","”","背景","t","很少","ros","死记","一边","goal","根据","rm","信息","会","“","控制","科幻","该","可以","精心","专门","转","没有","3","小海龟","linux","而是","对","某","自己","案例","材料","很","对于","ls","概念","呢","一只","ctrl","一系","不可","2","下来","'","忙","常用","一直","权限","度高","熟悉","很多","目的","在","拷贝到","，","软件","只是","能够","帮上","改变","字符","完全","用户","源文件","35","<","选项","]","不过","、","再","如何","以上","看中","感受","db3","如果","这样","系统","现有","大家",".","一样","右键","怎么","感兴","令人","absolute","下","内容","件夹","于","rotate","实验","bag","枯燥","笔记","款式","有","angular","和","由","第一次","管理员","一下","可视","为","一二","衣服","布料","输入","1","去","及","初次","直接","就","这种","msg","想","$","随身带","["],"title":"ROS2命令行操作","title_tokens":["命令行","命令","ros2","操作"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2","text":"在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。","text_tokens":["小海","多","本节","一种","第一","不太","魅力","更","小海龟","了","有点","命令","重要","一次","中","案例","一步","可能","第一次","的","接触","带领","使用","将","学习","到","感受","一定","海龟","如果","进一步","时候","之前","调试","工具","大家","运行","适应","在","—"," ","我们","会","随着","，","。","深入","命令行","ros2","可以"],"title":"ROS2命令行操作","title_tokens":["命令行","命令","ros2","操作"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#linux","text":"类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。","text_tokens":["小","一种","来讲","想象","其上","成","既定","手","这些","各种","逛来","的","麻烦","买","定制","便捷","不一","保留","容易","使用","都","一些","先","ros","时候","约束","看似","根据","会","科幻","现出","科幻电影","结合","呀","可以","多","精心","里边","可视化","没有","需求","linux","某","自己","解决","这里","不是","材料","对于","逛去","呢","什么","至今","不可","必不可少","就是","推出","呈现","并不一定","来","是","一直","你","操作","为什么","度高","很多","商家","在","受","电影","其他","什么样","，","起来","软件","命令行","能够","完全","规则","灵活","方式","了","想要","中","服务","、","商场","满足","看中","所有","一个","每次","问题","炫酷","场景","一点","做好","已经","精心设计","这样","但是","工具","现有","大家","一样","并","总有","我们","异常","一件","不","还是","。","无论","逛来逛去","于","被","等","哪","服装","自主","款式","命令","虽然","和","？","比如","可视","为","但","片段","衣服","此时","布料","一定","设计","去","看到","就","呈现出","这种","功能"," ","类似"],"title":"Linux中的命令行","title_tokens":["linux","中","的","命令行","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_1","text":"回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。","text_tokens":["列表","多到","一二十","难以","上","手","的","发指","用到","使用","都","背景","令人发指","t","所以","慢慢","很少","指令","后","时候","二十个","本","会","科幻","科幻电影","可以","从来","需要","专门","确实","二十","应用","而是","通过","对","写字","不是","很","记忆","呢","即可","什么","ctrl","系列","这个","一系","用","正常","就是","来","是","选择","又","常用","为什么","操作","熟悉","笔记本","alt","在","十个","电影","叫做","随着","其他","，","软件","深色","命令行","字符","+","至于","回到","不到","魅力","方式","窗口","启动","中","鼠标","不过","：","因为","电脑","参数","觉得","搜索","快捷","工具","笔记本电脑","但是","大家","并","右键","怎么","令人","terminal","我们","。","硬","数量","看不到","既","所在","枯燥","笔记","原因","命令","有","也","多种","随身","一下","黑客","快捷键","一二","一二十个","到","死机","这项","一定","输入","及","看到","终端","初次","体会","这","就","功能"," ","打开","背","不用","随身带","一系列"],"title":"启动方式","title_tokens":["启动","方式"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_2","text":"我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。","text_tokens":["列表","目标","绝对路径","子目","标目","把","保持","文件名","sudo","这些","未来","的","语法","常用命令","”","一","感觉","mkdir","先","编辑","此","指令","死记","一边","不变","rm","均","会","“","该","编辑器","则","查","可以","名称","多","统管","另","gedit","需要","地","没有","cp","linux","当前工作","指定","对于","ls","目标目录","出","多个","用","将","删除","来","mv","常用","权限","系统管理员","管理","列出","工作","熟悉","目的","拷贝到","创建","找","，","或","死记硬背","绝对","只是","改变","目录","回到","用户","…","源文件","<","链接","以","它","或者","了","选项","]","中","主目录","路径","：","拷贝","所有","某个","显示","一个","复制到","系统","大家","pwd","及其","下","我们","/","文件名称","不","。","件夹","文件夹","cd","目","当前","文件","原有","体验","若","命令","由","也","管理员","执行","一下",">","子目录","为","移入","新建","复制","及","就","功能"," ","打开","改名","["],"title":"常用命令操作","title_tokens":["操作","常用命令","命令","常用"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2_1","text":"ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。","text_tokens":["小海","与","继续","还","跟","第一","节点","集成","以","小海龟","topic","linux","命令","具体操作","对","有","中","表示","不过","的","比如","具体","一系列","不同","也","概念","所有","参数","什么","系列","后边","一系","第一个","都","一个","机制","感受","下来","总","大致","话题","接下","接下来","海龟","主要","核心","操作","一起","相同","干什么","目的","在","就","体操","功能"," ","下","我们","了解","，","内容","仿真","为例","。","命令行","ros2","node","可以"],"title":"ROS2中的命令行","title_tokens":["中","的","命令行","命令","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_3","text":"想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["节点","_","teleop","键盘","命令","想要","中","和","key","：","某个","使用","turtle","进行","海龟","例如","turtlesim","操作","运行","要"," ","我们","，","仿真","控制","$","run","node","ros2","可以"],"title":"运行节点程序","title_tokens":["节点","程序","运行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_4","text":"当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim","text_tokens":["ros2","感兴趣","详细","节点","它","命令","有","对","某","啦","中","？","的","哪些","：","呢","知道","加上","list","兴趣","都","一个","来","info","ros","如果","详细信息","turtlesim","子","这样","系统","运行","就","感兴","查看"," ","信息","/","，","$","node","当前","可以"],"title":"查看节点信息","title_tokens":["查看","节点","信息"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_5","text":"当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose","text_tokens":["当前","还","echo","topic","命令","有","某","中","的","turtle1","：","呢","即可","加上","list","使用","都","一个","试一试","话题","看到","子","系统","如下","查看"," ","pose","想","/","，","$","消息","数据","ros2"],"title":"查看话题信息","title_tokens":["查看","话题","信息"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_6","text":"想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":["linear","\"","ros2","z","}","_","--","{","topic","命令","想要","msgs","1.8","通过","angular","y","turtle1","：","2.0","发布","0.0","cmd","话题","海龟","指令","1","vel","geometry","x","动","直接","pub","rate"," ","msg","我们",",","/","起来","，","控制","$","twist",":","命令行","还","可以"],"title":"发布话题消息","title_tokens":["发布","话题","消息"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_7","text":"一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\"","text_tokens":["\"","service","ros2","}","改了","0.2","{","仿真器","孤单","太","y","服务","再","：","一只","一个","2","来","name","call","提供","海龟","'","spawn","theta","turtlesim","x","产生","—","调用"," ",",","我们","真器","，","/","仿真","$","srv","试一试",":","还"],"title":"发送服务请求","title_tokens":["发送","请求","服务"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_8","text":"想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\"","text_tokens":["目标","\"","发送","rotate","转","_","3","action","仿真器","让","send","命令","想要","rotateabsolute","通过","中","指定","的","比如","具体","turtle1","：","帮上","这个","动作","一个","到","提供","海龟","忙","theta","turtlesim","goal","这样","完成","角度","absolute"," ","真器","，","/","仿真","$",":","命令行","ros2","可以"],"title":"发送动作目标","title_tokens":["发送","目标","动作"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_9","text":"系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["40","与","rosbag","回到","实验","35","bag","轻松","11","把","_","rosbag2","实现","04","尝试","命令","想要","有","自己","啦","中","很","录制","实验室","？","的","-","turtle1","如何","再","某段","复现","好","段","：","以上","用","0","一个","就是","record","下来","cmd","db3","如果","vel","play","常用","每","17","子","系统","还有","很多","运行",".","大家","看看","这","功能","2022"," ","我们","/","，","$","还是","播放","。","数据","ros2","可以"],"title":"录制控制命令","title_tokens":["控制","命令","录制"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","text":"ROS2开发环境配置 ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。 Git git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git 下载教程源码 《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。 VSCode Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download VSCode插件配置 为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。 中文语言包 Python插件 C++插件 CMake插件 vscode-icons ROS插件 Msg Language Support Visual Studio IntelliCode URDF Markdown All in One VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["urdf","开发者","成千","讲","千万","管理工具","更","gitee","修复","macos","visualstudio","码云","几千万","这些","重要","sudo","markdown","studio","非常简单","的","一系列","利器","好","功能强大","配置","示例","判断","而生","使用","都","一些","以及","上万","扩展","年","组件","先","编辑","操作系统","所以","贡献","之间","无限","ros","发展","离不开","几千","one","vscode","python","会","guyuehome","成为","download","哪里","两款","中文","之父","机器人","因","编辑器","可以","千上万","多","已有","需要","喜欢","里边","便于","略显","_","审核","准备","这款","让","应用","linux","增加","》","tutorials","language","support","这里","自己","迅速","驱动","国内","新","呢","推荐","出","多个","用","一系","系列","源码","课程","推出","21","变更","大量","是","提供","进行","代码","管理","操作","调试","给","编译","完成","冲突","在","很多","记事本","visual","肯定","—","有些","切换","https","管理软件","，","软件","版本","apt","ros2","还","行","入门","方法","与","all","广泛应用","环境","特性","非常","集成","链接","方式","开发","了","开发工具","clone","中会","git","中","intellicode","可能","搭建","具体","如何","、","不同","开源","硬件","：","以上","所有","另外","支持","人工","语言包","一个","编写","每次","官方网","搜索","安装","官方网站","in","如果","成千上万","机器","记事","后续","windows","工具","这样","系统","大家",".","并","教程","install","高效","查看","项目","最","我们","作为","/","内容","不","理工","简称","cmake","。","为了","广泛","件夹","文件夹","github","插件","不开","被","文件","人","常听到","复杂","听到","快速","提交","命令","自带","有","linus","强大","和","？","也","比如","-","简单","神兵","icons","只","轻量","之后","bug","一行","微软","语言","c++","但","丰富","官方","下载","合并","设计","一款","网站","下载方式","等等","code","看到","终端","个人","直接","自动","2015","就","这","com","功能"," ","msg","浏览","网上","$","不会","众多","浏览器",":","做","《","源代码"],"title":"ROS2开发环境配置","title_tokens":["开发","环境","配置","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros2","text":"ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。","text_tokens":["不开","需要","环境","准备","开发","开发工具","中会","这些","重要","git","和","？","的","如何","、","呢","推荐","配置","示例","编写","一些","源码","课程","先","大量","提供","ros","离不开","机器","代码","工具","大家","给","编译","完成","vscode","肯定","—","查看","我们","，","两款","机器人","。","做"],"title":"ROS2开发环境配置","title_tokens":["开发","环境","配置","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#git","text":"git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git","text_tokens":["开发者","成千","千万","管理工具","gitee","修复","码云","几千万","这些","sudo","非常简单","的","判断","而生","使用","都","以及","上万","所以","贡献","之间","发展","几千","会","哪里","之父","因","可以","千上万","已有","需要","审核","这款","让","应用","linux","增加","迅速","驱动","国内","新","多个","变更","是","进行","代码","管理","完成","冲突","在","有些","肯定","切换","—","管理软件","软件","，","版本","apt","行","方法","广泛应用","特性","非常","开发","了","git","中","可能","具体","不同","开源","硬件","所有","人工","一个","每次","安装","成千上万","工具","系统","大家","并","install","高效","项目","我们","内容","不","理工","。","广泛","github","被","人","常听到","听到","提交","命令","有","linus","和","也","比如","简单","之后","bug","一行","合并","设计","一款","网站","等等","看到","终端","直接","自动","就","这","功能"," ","$","不会","众多"],"title":"Git","title_tokens":["git"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_1","text":"《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。","text_tokens":["文件","多","入门","讲","ros2","里边","还","略显","_","集成","复杂","更","gitee","环境","方式","开发","clone","》","tutorials","有","自带","git","中","和","这里","的","好","：","推荐","另外","用","一个","源码","课程","下载","21","是","如果","下载方式","记事","代码","这样","系统","很多",".","记事本","就","vscode","com","—","https","查看"," ","guyuehome","会","/","，","浏览","$","浏览器","。",":","件夹","文件夹","《"],"title":"下载教程源码","title_tokens":["下载","教程","源码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode","text":"Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download","text_tokens":["非常","链接","macos","快速","开发","visualstudio","强大","linux","和","studio","的","搭建","、","利器","功能强大","神兵","：","轻量","微软","支持","但","丰富","一个","官方网","官方","推出","下载","扩展","年","组件","官方网站","编辑","是","网站","代码","code","操作","windows","系统","visual",".","2015","vscode","在","操作系统","com","功能","项目","https"," ","成为","，","/","download","简称","。","编辑器",":","源代码","可以"],"title":"VSCode","title_tokens":["vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode_1","text":"为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。","text_tokens":["与","ros2","便于","开发","的","可以","系列","一系","扩展","安装","无限","后续","调试","vscode","功能","我们","，","为了","。","还","一系列","插件"],"title":"VSCode插件配置","title_tokens":["vscode","配置","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_2","text":"","text_tokens":[],"title":"中文语言包","title_tokens":["语言","语言包","中文"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#python","text":"","text_tokens":[],"title":"Python插件","title_tokens":["python","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#c","text":"","text_tokens":[],"title":"C++插件","title_tokens":["c++","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#cmake","text":"","text_tokens":[],"title":"CMake插件","title_tokens":["cmake","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode-icons","text":"","text_tokens":[],"title":"vscode-icons","title_tokens":["-","vscode","icons"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros","text":"","text_tokens":[],"title":"ROS插件","title_tokens":["插件","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#msg-language-support","text":"","text_tokens":[],"title":"Msg Language Support","title_tokens":[" ","msg","language","support"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#visual-studio-intellicode","text":"","text_tokens":[],"title":"Visual Studio IntelliCode","title_tokens":[" ","studio","intellicode","visual"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#urdf","text":"","text_tokens":[],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#markdown-all-in-one","text":"VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["喜欢","环境","开发","自己","也","的","以上","只","推荐","配置","出","支持","搜索","插件","个人","大家","vscode","在","最","作为","，","网上","众多","。","可以"],"title":"Markdown All in One","title_tokens":["all"," ","in","one","markdown"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/","text":"DDS Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。 通信模型 DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。 DDS DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。 什么是DDS 好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是Data Distribution Service，也就是数据分发服务，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。 DDS在ROS2中的应用 DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。 质量服务策略QoS DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是Domain，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为数据提供者和接收者之间的合约。 具体会有哪些策略？比如这个列表中描述的DEADLINE策略，表示通信数据必须要在每次截止时间内完成一次通信，HISTORY策略，表示针对历史数据的一个缓存大小，RELIABILITY策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式。 还有这个DURABILITY，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。 案例一：在命令行中配置DDS 我们先来试一试在命令行中配置DDS的参数。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort $ ros2 topic info /chatter --verbose 案例二：DDS编程示例 接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。 运行效果 $ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub 发布者代码解析 learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , }, 订阅者代码解析 learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], }, 参考链接 DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们课上主要带领大家认识DDS，更多使用方法和相关内容，课程配套的教程中会有介绍，大家也可以参考这里的链接进行学习。 https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["部分","讲","空间","中间","入个","一新","架构","上","高速","那该","兼容性","重要","领域","类型","啥意思","配置","动作","例子","shutdown","转移","真正","带","各个","历史","指令","最为","延时","组成部分","best","加密","下边","本身","docs","相当于","时","vendors","42","concepts","解析","\"","连接","描述","subscribernode","需要","退出","美国","rclpy","便于","args","尝试","spin","吃","}","需求","生变","古月","课","不是","指定","前边","通常","提示","create","新","第二","尽可","兼容性问题","交换","%","周期","感知","正常","学习","keep","按照","那","来","提供","进行","人机","焕然","进一步","代码","你","大大提高","变化","通路","完成","运行","帧","有些","更加","history","行为","https","丢失","接口标准","受到","处","run","资源","过","收到","sub",")","html","第一","强制","厂商","就行","特性","二","能源","它","那个","publisher","蓝色","商业","具体","满足","distribution","1989","开源","得","不同","：","另外","体","编写","问题","int32","非常复杂","name","点","www","已经","console","之前","整个","2004","并","父类","omg","只有","高效","scripts","缓存","为了","应该","神经网","corba","完整","文件","中心","拿","提高","听说","一步","表示","也","比如","说了半天","该用","reliable","布式","数据通","点对点","知道","语言","发生","连接数","dds","丰富","没","qos","结构","遥控器","无法","durability","规模","上层","8","articles","subscription","功能","接口","来到","("," ","航空","env","def","timer","增长","底层","定时器","string","做","要求","效率","模型","感兴趣","秒","占用","更","像是","四种","std","麻烦","掉","好","s","全称","bin","填充","像","使用","middleware","尽力","发布","先","所以","之间","编程","核心","具体地址","last","main","垂直","时候","不变","晚","verbose","客户端","样","顺利","课上","成为","介绍","一套","（","分组","角色","小组","兼容","service","发送","黑入","参考","echo","务器","地","处理","_","guides","--","航拍","差别","》","应用","一次","主讲","解决","图像","implementations","destroy","world","广播","时间","多个","这个","en","21","同一个","互相","更好","实时","大量","是","话题","它们","选择","接下来","主要","管理","重大","服务端","速度","集中处理","预测","@","—","冰山","utf","其他","或","消息","提到","医疗","版本","命令行","网络","ros2","python3","different","相关","欢迎","与","方法","广泛应用","一角","以","灵活","方式","有点","了","华为","中会","一条","中","导致","参数","兴趣","纠结","说明","居","选用","建模","遥控","终于","每","交通","但是","视频","__","作为","异常","字符串","广泛","合约","回忆","node","working","定时","边","尽可能","rmw","其实","）","节点","程序","过去","{","快速","humble","明显","对应","broker","请求","三种","专利","entry","-","单独","符合","舰船","但","入口","工业","通信模型","!","info","送给","设计","一旦","publishernode","国防","先进","一起","还有","优势","这","如下","effort","heard","打开","高通","to","忽略","org",":","日志","分布","数据通信","对象","保障","各种","的","二种","示例","性能","callback","一","都","一些","瓶颈","图","必须","年","所","publishing","运动","第四","复用","后","qosprofile","火锅","5g","宗旨","无人机","设置","针对","影响","技术","处于","关闭","初始","传输","循环","者","机器人","数据","实现","完整性","多","服务器","4g","客户","基本","初始化","好吃","综合","usr","让","可信赖","通过","这里","depth","信赖","处理速度","驱动","企业","进入","什么","[","用","how","找到","将","就是","课程","使命","焕然一新","生态","可信","无论如何","列出","流畅性","给","编译","创建","肯定","函数","id","传送","回调","组织","无用","单位","发布者","环境","非常","升级","统一","链接","开发","msgs","可能","派","内","在于","服务","加入","包","电脑","所有","旋转","主","作者","一个","class","每次","并行","reliability","分发","真实","流畅","场景","with","0.5","机器","程度","大大","集中","接收者","靠","发生变化","i","到底","教程","讲到","我们","组成","/","还是","不","为例","。","至关重要","相当","双方","无论","domain","的话","第二种","等","构图","哪","第四种","库","design","复杂","默认","有人","命令","能力","能响","历史数据","*","？","技术标准","执行","第三种","放在","黑客","只","带领","当于","不感兴趣","到","每个","维护","此时","一定","许多","接下","qoshistorypolicy","尽量","成立","每条","data","中间件","出现","py","个人","pub","输出","适应","应用程序","建设","要","门","points","行业","神经",",","价值","get","不用","频繁","试一试","决策","类似","=","列表","当","一种","不管","模块","把","成","通道","过程","订阅","topic","这些","所有人","啦","profile","哪些","通信","任","数以千计","名","from","刚才","listener","deadline","”","借助","multiple","ros","效果","标准","运转","红色","根据","python","质量","某一","learning","接收","信息","会","guyuehome","定义","“","控制","强调","框架","init","可以","专门","没有","这么","优化","太多","由于","对","自己","很","而言","供者","案例","半天","之上","qosreliabilitypolicy","setup","呢","logger","增多","coding","下来","关系","self","类","'","常用","原则","配套","publish","很多","在","none","驾驶","主讲人","，","软件","才能","性","只是","策略","能够","树莓","video","字符","行","入门","架构图","用户","发送给","super","模式","上边","选项","]","bv12z4y167w2","销毁","不过","分布式","情况","#","、","建立","如何","\\","而且","神经网络","之","on","databus","向","如果","保证数据","位置","四大","绑定","大小","about","来看","我","这样","系统","大家",".","一样","避免","感兴","合适","办法","下","地址","可","现在","理解","内容","授权","等待","于","当然","chatter","容性","sysml","定位","他们","既然","有","举","和","意思","由","关心","一下","不好","ros1","为","同一","冰山一角","第三","hello","helloworld","存在","提供者","海军","1","无人","保证","包含","第一种","几种","服务质量","直接","自动","至关","并且","就","提","建模语言","uml","com","这种","认识","msg","想","import","最早","$","众多","bilibili","截止","可见","全局","《"],"title":"**DDS**","title_tokens":["*","dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds","text":"Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。","text_tokens":["欢迎","相当","入门","讲","实现","它","过程","》","他们","主讲","中","的","前边","服务","、","好","通信","具体","神经网络","动作","dds","都","学习","当于","课程","hello","21","来","是","话题","ros","最为","终于","机器","我","重大","靠","系统","大家","变化","完成","在","相当于","主讲人","—","来到"," ","讲到","我们","神经","，","《","。","机器人","底层","古月","网络","ros2","神经网"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_1","text":"DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。","text_tokens":["当","一种","模型","感兴趣","更","通道","架构","上","订阅","像是","四种","所有人","各种","的","麻烦","通信","二种","性能","使用","都","瓶颈","发布","必须","所","真正","核心","具体地址","第四","运转","火锅","针对","影响","客户端","会","时","成为","框架","数据","实现","可以","角色","多","服务器","连接","需要","客户","务器","处理","没有","好吃","优化","吃","太多","生变","可见","解决","自己","这里","很","处理速度","第二","广播","增多","这个","找到","正常","就是","关系","是","提供","进行","常用","进一步","列出","服务端","速度","变化","集中处理","很多","通路","在","有些","更加","其他","，","软件","消息","受到","处","传送","能够","收到","与","行","第一","非常","以","它","有点","了","一条","中","可能","不过","在于","服务","具体","建立","导致","而且","所有","旋转","兴趣","之","一个","databus","每次","问题","并行","如果","程度","之前","集中","整个","这样","但是","发生变化","系统","并","感兴","我们","地址","作为","异常","。","双方","应该","第二种","中心","其实","节点","第四种","拿","明显","有人","broker","请求","能响","三种","和","一步","由","也","关心","第三种","ros1","只","点对点","知道","单独","发生","连接数","dds","为","但","不感兴趣","通信模型","到","每个","第三","一定","许多","无法","每条","一旦","包含","规模","第一种","先进","几种","优势","并且","就","这","这种"," ","想","忽略","不用","增长","类似","效率"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_1","text":"DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。","text_tokens":["需要","等","模块","广泛应用","地","非常","能源","定位","方式","高速","需求","应用","这些","领域","很","不是","和","的","比如","通常","好","通信","新","满足","交换","感知","dds","都","一个","借助","存在","它们","已经","交通","之前","国防","预测","很多","自动","在","并","驾驶"," ","航空","会","，","频繁","。","数据","决策","医疗","广泛","ros2","可以"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_2","text":"好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是Data Distribution Service，也就是数据分发服务，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。","text_tokens":["分布","对象","中间","订阅","兼容性","保障","啦","各种","的","好","通信","数以千计","全称","啥意思","发布","年","标准","垂直","质量","技术","成为","介绍","一套","强调","数据","可以","兼容","service","美国","专门","地","需求","应用","解决","这里","课","半天","呢","兼容性问题","就是","使命","来","实时","大量","是","提供","进行","管理","，","软件","策略","网络","过","组织","强制","环境","升级","以","灵活","它","统一","开发","中","可能","分布式","服务","、","满足","distribution","1989","一个","问题","分发","真实","建模","已经","系统","大家","2004","到底","omg","高效","我们","/","可","现在","。","于","corba","当然","完整","中心","等","容性","sysml","复杂","听说","意思","和","由","？","也","说了半天","技术标准","比如","一下","布式","舰船","语言","为","dds","丰富","维护","海军","设计","成立","data","中间件","服务质量","还有","建模语言","提","uml","行业"," ","价值","最早","做"],"title":"什么是DDS","title_tokens":["dds","什么","是"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#ddsros2","text":"DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。","text_tokens":["分布","部分","一种","不管","模块","中间","把","更","架构","上","过程","兼容性","重要","的","通信","任","刚才","像","性能","使用","都","middleware","转移","所以","编程","ros","复用","标准","组成部分","5g","不变","宗旨","红色","下边","根据","影响","技术","某一","会","机器人","实现","可以","多","4g","兼容","需要","基本","这么","综合","差别","由于","让","应用","对","自己","这里","而言","之上","驱动","企业","呢","进入","时间","多个","这个","用","就是","按照","那","来","生态","是","选择","原则","代码","无论如何","你","大大提高","很多","给","在","肯定","函数","其他","，","或","接口标准","软件","性","提到","版本","ros2","能够","组织","架构图","用户","厂商","就行","统一","那个","华为","开发","了","上边","蓝色","中","商业","可能","分布式","具体","、","建立","开源","如何","加入","得","所有","一个","问题","纠结","选用","场景","如果","位置","每","四大","机器","大大","这样","系统","大家","一样","我们","组成","可","还是","不","。","至关重要","为了","无论","授权","边","构图","容性","哪","提高","对应","他们","既然","有","能力","专利","和","也","？","比如","该用","放在","布式","符合","没","但","dds","工业","此时","设计","尽量","保证","中间件","上层","个人","至关","就","建设","要","功能","接口"," ","想","高通"],"title":"DDS在ROS2中的应用","title_tokens":["在","中","的","dds","应用","ros2"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#qos","text":"DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是Domain，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为数据提供者和接收者之间的合约。 具体会有哪些策略？比如这个列表中描述的DEADLINE策略，表示通信数据必须要在每次截止时间内完成一次通信，HISTORY策略，表示针对历史数据的一个缓存大小，RELIABILITY策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式。 还有这个DURABILITY，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。","text_tokens":["列表","一种","模型","空间","数据通信","占用","入个","成","一新","过程","那该","重要","这些","啦","的","掉","哪些","通信","好","配置","deadline","使用","都","例子","一些","尽力","图","必须","先","所","之间","带","各个","ros","历史","运动","指令","best","延时","时候","晚","无人机","针对","加密","根据","质量","处于","样","接收","顺利","会","定义","传输","控制","机器人","数据","分组","实现","完整性","可以","小组","多","描述","需要","客户","发送","黑入","基本","便于","地","_","没有","这么","需求","航拍","可信赖","应用","让","一次","对","通过","图像","供者","指定","信赖","尽可","新","呢","时间","这个","用","将","就是","焕然一新","同一个","互相","关系","更好","是","提供","进行","可信","选择","人机","焕然","流畅性","给","完成","在","帧","history","行为","id","丢失","，","才能","策略","网络","ros2","资源","树莓","无用","发送给","特性","那个","模式","了","中","可能","派","内","情况","服务","具体","满足","加入","不同","如何","电脑","导致","所有","另外","参数","体","一个","每次","reliability","流畅","场景","向","如果","保证数据","大小","绑定","机器","遥控","每","之前","接收者","来看","这样","但是","系统","大家","避免","合适","只有","视频","办法","下","我们","理解","缓存","不","。","domain","的话","合约","回忆","完整","尽可能","节点","程序","默认","过去","快速","命令","有","历史数据","举","和","表示","？","也","比如","reliable","不好","黑客","数据通","为","qos","dds","同一","通信模型","结构","此时","提供者","一定","遥控器","送给","尽量","durability","保证","无人","一起","出现","还有","直接","适应","应用程序","要","门","这种","功能","effort"," ","众多","截止","类似","要求","全局"],"title":"质量服务策略QoS","title_tokens":["服务","策略","质量","qos"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_3","text":"我们先来试一试在命令行中配置DDS的参数。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort $ ros2 topic info /chatter --verbose","text_tokens":["\"","chatter","echo","_","--","topic","命令","msgs","std","中","的","-","reliable","配置","参数","qos","dds","int32","reliability","来","先","info","data","best","pub","在","verbose","effort"," ","msg","我们","/","$","42","。","试一试",":","命令行","ros2"],"title":"案例一：在命令行中配置DDS","title_tokens":["在","中","案例","：","配置","一","dds","命令行","命令"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_4","text":"接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。","text_tokens":["尝试","以","中","通信","world","配置","dds","下来","hello","接下来","接下","话题","代码","之前","在"," ","我们","，","为例","。"],"title":"案例二：DDS编程示例","title_tokens":["案例","编程","：","示例","二","dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_2","text":"$ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub","text_tokens":["sub","helloworld","learning"," ","$","_","run","qos","pub","ros2"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_3","text":"learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , },","text_tokens":["日志","秒","对象","std","的","类型","profile","名","定时器","s","填充","bin","from","配置","示例","callback","”","shutdown","发布","publishing","last","后","best","main","qosprofile","设置","python","learning","信息","guyuehome","关闭","初始","“","（","循环","数据","init","\"","需要","退出","rclpy","初始化","spin","args","}","_","usr","让","destroy","depth","提示","qosreliabilitypolicy","create","world","setup","logger","%","周期","keep","coding","self","话题","类","'","进行","原则","代码","publish","编译","完成","@","创建","none","history","utf","函数","，","消息","python3","ros2",")","回调","字符","单位","发布者","super","msgs","publisher","选项","如下","中","销毁","#","、","包","加入","：","points","主","作者","一个","class","编写","reliability","说明","居","name","点","www","0.5","已经","console","系统",".","并","父类","__","scripts","/","字符串","node","等待","定时","文件","chatter","）","节点","库","程序","{","*","entry","-","执行","reliable","知道","qos","为","入口","!","helloworld","hello","info","qoshistorypolicy","1","data","publishernode","py","输出","pub","8","com","接口","功能","(","effort"," ","env","msg",",","import","def","get","打开","timer",":","古月","string","[","="],"title":"发布者代码解析","title_tokens":["解析","发布","代码","发布者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_4","text":"learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], },","text_tokens":["日志","对象","订阅","std","的","类型","profile","名","s","bin","from","listener","示例","配置","callback","”","shutdown","last","后","标准","best","main","qosprofile","设置","python","learning","信息","guyuehome","关闭","定义","“","初始","（","循环","者","数据","init","\"","subscribernode","需要","退出","rclpy","初始化","spin","args","处理","_","}","usr","让","对","destroy","depth","提示","qosreliabilitypolicy","create","world","setup","logger","%","keep","coding","self","话题","类","'","进行","原则","代码","编译","完成","@","创建","none","history","utf","函数","，","消息","python3","ros2",")","回调","收到","sub","super","msgs","选项","如下","]","销毁","\\","#","、","包","加入","：","points","主","作者","一个","class","编写","reliability","说明","居","name","点","www","console","系统",".","i","并","父类","__","scripts","/","node","等待","文件","chatter","）","节点","库","程序","{","*","entry","-","执行","reliable","知道","qos","入口","!","helloworld","hello","info","qoshistorypolicy","1","data","py","输出","pub","8","com","subscription","接口","功能","(","effort"," ","env","msg",",","import","def","get","heard","打开",":","古月","string","[","="],"title":"订阅者代码解析","title_tokens":["解析","订阅","代码","者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_5","text":"DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们课上主要带领大家认识DDS，更多使用方法和相关内容，课程配套的教程中会有介绍，大家也可以参考这里的链接进行学习。 https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["相关","html","working","多","方法","rmw","参考","guides","一角","_","非常","复杂","更","链接","design","humble","中会","有","implementations","这里","和","bv12z4y167w2","也","的","-","how","带领","dds","使用","on","一个","学习","冰山一角","课程","非常复杂","en","middleware","multiple",":","www","是","进行","with","主要","ros","about","配套","系统","大家",".","本身","docs","教程","articles","com","冰山","https","认识"," ","我们","课上","/","，","介绍","内容","vendors","to","concepts","bilibili","。","org","只是","video","different","ros2","可以"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/","text":"工作空间：开发过程的大本营 大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是工程。 工作空间是什么 类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做工作空间。 所以工作空间是一个存放项目开发相关文件的文件夹，也是开发过程中存放所有资料的大本营。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。 创建工作空间 了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 自动安装依赖 我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init & rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y 编译工作空间 依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。 设置环境变量 编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["日志","开始","子目","log","部分","当","行文","空间","来讲","缺少","中间","成功","gitee","dev","过程","像是","未来","sudo","这些","一部","rosdepc","四个","pip3","各种","path","啦","studio","colcon","的","生效","creating","w","from","配置","点击","”","使用","都","编写程序","local","以及","一些","mkdir","所以","rosdistro","存放","很少","ros","后","sh","工程","设置","针对","工具栏","docs","均","b","信息","会","guyuehome","时","脚本","“","定义","强调","机器人","结果","init","可以","名称","；","\"","需要","里边","参考","echo","_","用于","--","3","让","tutorials","依赖","放置","某","自己","~","这里","不是","两个","概念","setup","新","什么","多个","这个","用","src","找到","学习","就是","2","里","环境变","至此","下来","21","关系","update","en","是","进行","接下来","代码","管理","操作","工作","b2","bashrc","visual","编译","运行","并列","在","rosdep","完成","创建","https","a","叫做","社区","，","workspace","总体","根目录","资料","python3","apt","ros2","还","能够","过","相关","html","目录","大部分","完全","警告","集成","环境","链接","自动生产","开发","或者","了","选项","想要","clone","中会","git","中","情况","y","、","包","#","：","接触","以上","如图所示","所有","参数","另外","人为","手动","大本","绝大","一个","编写","大本营","安装","多少","一点","大部","如果","任何","保存","机器","后续","之前","子","工具","系统","大家","eclipse",".","一样","p","空间结构","并","教程","产生","install","i","项目","某些","我们","了解","/","pip","内容","典型","。","为了","数量","件夹","文件夹","qt","应该","cd","环境变量","文件","等","仅","ws","creator","唯一","程序","报错","humble","绝大部分","命令","source","有","和","也","比如","执行","错误","-","子目录",">","变量","允许","所示","从","此时","结构","到","下载","存在","接下","1","&","生产","看到","终端","出现","build","..","可执行文件","自动","并且","就","这","要","com","否则","功能","一部分","如下"," ","$","不会","org",":","类似","得到","当前"],"title":"**工作空间：开发过程的大本营**","title_tokens":["*","大本","的","过程","空间","：","工作","开发","大本营"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_1","text":"大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是工程。","text_tokens":["过","文件","当","等","里边","creator","集成","环境","文件夹","程序","开发","选项","想要","有","这些","放置","中","和","studio","的","比如","、","新","接触","所有","这个","点击","”","都","学习","编写","编写程序","一个","以及","此时","是","后续","之前","工程","工具","工作","visual","大家","eclipse","工具栏","在","就","创建","产生"," ","叫做","某些","我们","会","，","“","内容","qt","。","件夹","应该"],"title":"工作空间：开发过程的大本营","title_tokens":["大本","的","过程","空间","：","工作","开发","大本营"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_2","text":"类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做工作空间。 所以工作空间是一个存放项目开发相关文件的文件夹，也是开发过程中存放所有资料的大本营。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。","text_tokens":["日志","开始","子目","log","部分","行文","空间","来讲","中间","成功","dev","过程","像是","未来","一部","四个","各种","的","w","都","一些","所以","存放","很少","ros","后","工程","针对","b","信息","会","时","脚本","定义","强调","机器人","结果","可以","名称","；","需要","里边","_","用于","3","放置","某","自己","这里","不是","两个","新","多个","这个","用","src","就是","2","里","关系","是","进行","代码","管理","操作","工作","b2","编译","运行","并列","在","创建","a","叫做","，","总体","根目录","资料","相关","目录","大部分","完全","警告","集成","环境","开发","或者","了","中","情况","、","：","以上","如图所示","所有","参数","另外","人为","大本","绝大","一个","编写","大本营","安装","一点","大部","保存","机器","子","系统","一样","空间结构","并","产生","install","项目","我们","某些","典型","。","数量","件夹","文件夹","文件","等","ws","唯一","绝大部分","有","和","也","执行","错误","比如","子目录","允许","所示","结构","到","存在","1","build","可执行文件","就","这","要","功能","一部分"," ","类似","得到"],"title":"工作空间是什么","title_tokens":["工作","什么","空间","是"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_3","text":"了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git","text_tokens":["空间","ws","_","gitee","dev","了","clone","命令","tutorials","~","git","和","的","-","概念","：","src","使用","一个","下载","mkdir","下来","21","接下来","接下","代码","工作",".","并且","p","创建","教程","如下","com","https"," ","了解","我们","/","，","guyuehome","$",":","结果","ros2","cd","可以"],"title":"创建工作空间","title_tokens":["工作","空间","创建"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_4","text":"我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init & rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y","text_tokens":["--","humble","依赖","sudo","rosdepc","有","path","pip3","中","各种","也","的","-","y","：","from","手动","src","使用","都","一个","一些","从","下载","多少","安装","update","rosdistro","&","代码","工具","..","自动","rosdep","i","install"," ","社区","我们","会","，","pip","$","python3","apt","init","cd","可以"],"title":"自动安装依赖","title_tokens":["依赖","安装","自动"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_5","text":"依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。","text_tokens":["文件","log","空间","缺少","ws","成功","_","文件夹","自动生产","dev","过程","或者","报错","依赖","命令","中会","有","sudo","~","啦","中","了","colcon","的","错误","-","、","：","使用","安装","任何","如果","ros","后","代码","生产","看到","工作","出现","build","编译","完成","否则","就","在","自动","如下","install"," ","/","，","$","不会","。","python3","apt","件夹","应该","cd","可以"],"title":"编译工作空间","title_tokens":["工作","空间","编译"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_6","text":"编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。","text_tokens":["当前","文件","\"","行文","需要","仅","ws","空间","成功","echo","环境","_","dev","让","了","source","~","和","的","执行","包","#","生效","setup","：",">","、","变量","所有","配置","找到","local","环境变","至此","后","sh","终端","工作","系统","设置","bashrc","可执行文件","编译",".","在","就","完成","创建","功能","install","均"," ","我们","/","，","$","为了","。","还","环境变量","能够"],"title":"设置环境变量","title_tokens":["环境变","变量","环境","设置","环境变量"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_7","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["docs","html","en","https","creating"," ","-","a","/","ros","workspace","org",":","humble","tutorials","."],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/","text":"功能包：开发过程的大本营 在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做功能包。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。 创建功能包 如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python 编译功能包 在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash 功能包的结构 功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。 C++功能包 首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。 Python功能包 C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["除此之外","当","行文","么","型","移动","空间","看","cmakerlists","把","dev","过程","除此","这些","重要","各种","colcon","的","类型","creating","type","好","语法","刚才","颜色","配置","判断","”","使用","都","例子","local","一些","必须","分享","所以","之间","编程","指令","ros","复用","时候","声明","包中","设置","pkg","python","docs","learning","拆分","信息","会","时","介绍","“","控制","该","机器人","豆子","解析","可以","名称","；","多","描述","五颜六色","需要","里边","参考","_","发现","--","xml","依赖","tutorials","而是","~","这里","不是","两个","包该","create","setup","呢","手上","cmakelists","这个","感知","用","src","将","正常","就是","源码","原理","里","耦合","那","环境变","en","关系","来","是","主要","代码","你","ament","工作","很多","给","编译","完成","在","运行","创建","找","https","是不是","叫做","a","社区","，","起来","软件","才能","workspace","first","版本","your","ros2","降低","相关","html","方法","跟","<","环境","视觉","package","规则","链接","开发","了","或者","讲解","越","中","可能","某种","包","、","不同","如何","：","红豆","得","很快","#","所有","分别","版权","大本","一个","拿出","编写","大本营","机制","之外","说明","是否","首先","name","三个","新创建","如果","机器","后续","普通","但是","出来","大家",".","黄豆","一样","并","教程","install","包是","下","我们","某些","/","包并","内容","不","还是","cmake","分析","。","新创","数量","件夹","文件夹","cd","一颗","之一","当然","文件","环境变量","别人","只想","继续","bash","等","ws","假设","名字","自主","拿","提高","程序","humble","他们","命令","有","source","立刻","译成","和","entry","表示","也","？","比如","-","执行","放在",">","必然","混合","划分","只","c++","之后","变量","语言","但","入口","新建","到","下载","每个","头疼","率","结构","存在","是否是","其中","尽量","包含","c","看到","终端","一起","txt","放到","绿豆","build","py","可执行文件","袋子","还有","就","要","这","功能","如下","points"," ","想","编译成","$","举个","org",":","导航","很难"],"title":"**功能包：开发过程的大本营**","title_tokens":["*","大本","功能","的","包","：","过程","开发","大本营"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_1","text":"在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做功能包。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。","text_tokens":["当","么","移动","把","这些","重要","的","颜色","使用","都","例子","分享","所以","之间","ros","复用","时候","包中","拆分","会","时","控制","机器人","豆子","可以","名称","；","多","五颜六色","需要","发现","而是","不是","包该","手上","这个","感知","用","就是","源码","原理","里","耦合","关系","是","代码","你","很多","给","在","找","是不是","叫做","社区","，","起来","软件","ros2","降低","方法","视觉","了","越","中","可能","某种","包","、","不同","如何","红豆","很快","得","一个","拿出","机制","说明","三个","如果","机器","普通","但是","出来","大家","黄豆","并","教程","我们","某些","不","。","数量","件夹","文件夹","一颗","之一","当然","文件","别人","只想","等","假设","自主","拿","提高","他们","有","立刻","也","比如","放在","混合","划分","只","到","下载","每个","头疼","率","其中","尽量","看到","一起","放到","绿豆","袋子","就","功能"," ","想","举个","导航","很难"],"title":"功能包：开发过程的大本营","title_tokens":["大本","功能","的","包","：","过程","开发","大本营"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_2","text":"如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python","text_tokens":["相关","；","跟","ws","名字","<","_","--","package","dev","或者","命令","~","中","这里","和","表示","？","的","-","包","如何","type","create","：",">","呢","c++","比如","#","分别","这个","src","使用","新建","一个","那","name","新创建","指令","如果","c","终端","ament","build","在","pkg","python","创建","就","功能","learning","包是"," ","我们","/","，","$","还是","cmake","。","新创","版本","ros2","cd","可以"],"title":"创建功能包","title_tokens":["包","创建","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_3","text":"在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash","text_tokens":["cd","bash","继续","需要","ws","空间","环境","_","dev","source","~","和","colcon","的","#","包","好","setup","：","之后","配置","变量","所有","src","正常","local","编写","环境变","代码","工作","包中","build","编译","完成","运行","在",".","创建","功能","install"," ","我们","/","，","才能","$","环境变量","可以"],"title":"编译功能包","title_tokens":["功能","编译","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_4","text":"功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。","text_tokens":["文件","不是","两个","？","的","包","如何","呢","刚才","判断","一个","结构","那","是否","来","是否是","新创建","普通","创建","功能","下","我们","包并","，","分析","。","新创","件夹","文件夹"],"title":"功能包的结构","title_tokens":["包","结构","功能","的"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#c","text":"首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。","text_tokens":["文件","描述","需要","看","cmakerlists","规则","package","xml","依赖","各种","和","两个","中","的","类型","包","如何","必然","：","语法","c++","cmakelists","版权","使用","必须","首先","存在","所以","是","其中","主要","包含","代码","声明","txt","设置",".","编译","运行","在","要","功能","如下"," ","下","，","内容","才能","cmake","该","。"],"title":"C++功能包","title_tokens":["c++","包","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#python","text":"C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。","text_tokens":["文件","除此之外","行文","型","需要","描述","里边","_","package","xml","除此","程序","依赖","有","讲解","译成","和","两个","各种","也","的","执行","包","entry","不同","setup","：","如何","c++","配置","语言","版权","”","但","入口","将","使用","一些","源码","之外","中","所以","是","编程","主要","包含","声明","后续","py","但是","还有","给","可执行文件","编译",".","一样","python","这","在","大家","功能","points"," ","信息","会","编译成","我们","，","“","内容","不","介绍","。","版本","解析"],"title":"Python功能包","title_tokens":["包","python","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_5","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["html","ros2","package","humble","tutorials","creating","-","en","ros",".","docs","https","a"," ","/","first","workspace","org","your",":"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/","text":"节点 机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。 通信模型 完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。 案例一：Hello World节点（面向过程） ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。 运行效果 大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ], 创建节点流程 代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。 案例二：Hello World节点（面向对象） 所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。 运行效果 下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ], 创建节点流程 所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。 案例三：物体识别节点 没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。 运行效果 在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。 代码解析 在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ], 案例四：机器视觉识别节点 用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。 运行效果 启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 注意：如果是在虚拟机中操作，需要进行以下设置： 把虚拟机设置为兼容USB3.1； 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。 代码解析 相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ], 节点命令行操作 节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息 思考题 现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["范围","职责","行文","心里","例程","中间","true","上","重要","h","四个","三","注意","一线","依然","配置","读取","list","shutdown","java","思考题","time","指令","最为","ret","255","docs","时","解析","for","\"","连接","算机","虚拟","需要","退出","rclpy","spin","args","这款","中将","腿","不是","孤立","即可","出","左上角","轮廓","周期","搭载","去除","一节","比喻","正常","学习","那","nodes","来","马","前后左右","提供","进行","编码方式","代码","你","调试","相同","变化","运行","完成","更加","https","是不是","videocapture","合理","imread","run","apt",")","过","好像","收到","html","+","回到","绿色","知其然","二","视觉","它","窗口","启动","图像识别","某种","具体","不同","contours","：","太小","得","另外","所以然","编写","问题","安装","左右","name","点","www","来源","一点","console","之前","出来","并","父类","scripts","某些","lower","经常","绿点","应该","完整","文件","被","128","所在","中心","考题","approx","骡子","表示","也","摇杆","比如","bgr2hsv","布式","知道","语言","发生","没","宽","算是","webcam","结构","终端","8","功能","接口","("," ","env","def","做","除此之外","摄像头","模型","合体","更","除此","dev","身体","模块化","inrange","更为","识别","好","移植性","continue","bin","像","使用","发布","共同","先","所以","之间","编程","main","时候","生成","成为","介绍","（","下限","结果","看上去","呀","设备","兼容","取","发送","参考","可视化","处理","_","上角","tutorials","移植","red","sleep","图像","destroy","world","时间","这个","一张","还会","21","更好","互相","en","实时","是","接下来","shape","任务","x","左上","操作","工作","以下","速度","苹果","@","一项","—","utf","helloworldnode","总体","50","python3","命令行","还","ros2","图片","方法","流程","关于","180","以","90","外界","或者","了","方式","想要","中","知其所以然","中心点","太","y","而已","关注","硬件","难","物体","参数","cnt","drawcontours","显示","这份","看上","纠结","说明","居","命名","5","in","每","面向对象","understanding","总体而言","重点","但是","步骤","转换","角度","吧","__","字符串","分析","image","此处","node","坐标","可读性","mask","ws","）","名字","节点","程序","{","humble","entry","模拟","-","while","远程","进程","但","入口","通信模型","!","计算","boundingrect","info","动态","设计","一起","后勤部","还有","as","这","如下","打开","网上","综合体","检测","org",":","imshow","日志","开始","分布","findcontours","成功","看","对象","保持","查询","未来","保障","各种","请","更多","的","处理过程","circle","示例","勾勒","一","都","一些","稍微","像素","运动","后","框架图","设置","轮子","关闭","循环","初始","可移植性","机器人","实现","名称","；","多","摄像","理过","不要","初始化","像头","综合","就让","发现","usr","至","让","通过","这里","150","驱动","总结","用","找到","将","这座","就是","课程","里","计算机","detect","给","编译","操作系统","cvtcolor","具备","创建","负责","函数","if","叫做","起来","home","乃至","面向","retr","环境","然后","hsv","链接","ok","开发","cv2","可能","包","加入","路径","二值化","不能","电脑","xy","分别","主","作者","相比","一个","class","物理","机制","之外","是否","0.5","获取","机器","岂","到底","先拉","install","查看","我们","组成","/","不","还是","为例","。","的话","等","打印","疑惑","库","复杂","没错","np","推动","命令","高","*","虽然","？","多种","执行","简单","放在",">","桌子","溜溜","0","阈值","到","每个","接下","其中","更多要","可读","看到","py","输出","出现","编码","每一项","看看","点画","要","points",",","部门","重新","get","不用","最大","类似","得到","=","四","列表","云端","后勤","当","一种","移动","模块","只不过","把","hierarchy","过程","sudo","这些","啦","想到","通信","w","from","刚才","颜色","用到","”","眼睛","图像处理","编写程序","ros","效果","方便","object","改成","虚拟机","红色","根据","python","框会","数值","learning","b","信息","guyuehome","会","“","控制","为止","该","上限","框架","init","可以","opencv","可移植","却","upper","waitkey","休眠","numpy","会弹","bgr","chain","pyhton","一帧","某","很","案例","而言","两个","对于","概念","setup","呢","logger","推荐","src","前后","2","coding","修改","下来","self","类","'","常用","各不相同","状态","hcx","熟悉","在","none","a","联系","，","int","只是","jpg","destroyallwindows","改变","字符","array","img","一台","过来","调整","<","super","选项","]","销毁","不过","分布式","#","、","如何","再","工人","cap","人为","做到","自然","如果","来看","这样","系统","大家",".","一样","着急","下","独立","地方","可","现在","理解","等待","面积","read","当然","编程语言","唯一","实际","工厂","他们","既然","有","保持联系","和","一下","思考","c++","前","可视","usb3.1","ruby","为","从","同理","helloworld","hello","相机","1","细胞","去","及","apple","可执行文件","并且","就","厂房","监控","com","这种","color","整体","认识","噪声","import","位于","$","上去","众多","载体","古月","后勤部门","["],"title":"**节点**","title_tokens":["*","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_1","text":"机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。","text_tokens":["连接","取","合体","名字","节点","综合","了","这些","通过","各种","中","的","像","”","一个","一些","就是","机制","到","那","是","ros","细胞","机器","工作","一起","给","每一项","就","在","一项","功能","整体"," ","我们","成为","，","“","众多","综合体","机器人","。"],"title":"节点","title_tokens":["节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_2","text":"完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。","text_tokens":["除此之外","云端","分布","摄像头","职责","行文","当","移动","后勤","更","除此","上","身体","查询","这些","保障","更为","想到","的","一线","配置","”","眼睛","都","java","共同","编程","运动","时候","根据","python","生成","b","信息","轮子","时","“","控制","该","机器人","结果","实现","可以","名称","；","多","却","连接","算机","需要","摄像","像头","这款","让","腿","通过","某","不是","这个","搭载","前后","找到","比喻","这座","就是","里","还会","那","下来","来","计算机","互相","前后左右","是","提供","接下来","任务","各不相同","你","状态","操作","工作","相同","速度","运行","编译","操作系统","在","完成","—","a","叫做","，","做","还","乃至","一台","环境","它","外界","或者","了","想要","中","可能","分布式","具体","、","不同","如何","：","硬件","工人","另外","参数","分别","人为","一个","物理","之外","左右","命名","自然","获取","每","机器","来看","这样","系统","角度","并","到底","某些","组成","独立","地方","我们","不","。","完整","文件","编程语言","等","节点","唯一","复杂","程序","工厂","推动","他们","既然","有","和","虽然","也","摇杆","比如","执行","放在","布式","c++","桌子","远程","语言","ruby","进程","但","算是","从","到","每个","计算","设计","接下","细胞","去","看到","后勤部","一起","还有","可执行文件","看看","就","这","监控","厂房","功能","整体"," ","认识","部门","位于","载体","得到","后勤部门"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world","text":"ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。","text_tokens":["当然","开始","字符","需要","打印","例程","节点","复杂","程序","实现","了","中","的","简单","world","”","编写程序","编写","一个","从","就是","到","hello","来","先","是","最为","终端","并","功能"," ","我们","，","循环","“","不","字符串","。","ros2"],"title":"案例一：Hello World节点（面向过程）","title_tokens":["案例","hello","过程"," ","面向","：","world","）","（","节点","一"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_3","text":"大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["字符","打印","不要","成功","看","知其然","节点","_","然后","实现","过程","骡子","命令","通过","中","知其所以然","也","的","执行","如何","好","再","world","所以然","这个","做到","”","溜溜","课程","helloworld","hello","来","先","马","所以","是","效果","后","代码","看到","终端","出来","大家","运行","编译","在","着急","先拉","learning"," ","下","我们","，","循环","$","“","分析","字符串","run","。","node","ros2","可以"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_4","text":"这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ],","text_tokens":["日志","对象","过程","的","bin","from","配置","示例","”","使用","shutdown","发布","time","后","main","设置","python","learning","信息","guyuehome","关闭","初始","“","控制","循环","init","实现","\"","需要","rclpy","初始化","args","休眠","_","usr","让","sleep","destroy","setup","world","呢","logger","时间","这个","正常","coding","是","类","进行","'","代码","运行","完成","编译","@","none","创建","函数","utf","，","python3","ros2",")","面向","ok","方式","选项","]","销毁","#","如何","包","加入","：","points","主","作者","编写","说明","居","是否","点","www","0.5","console","来看","系统",".","并","scripts","下","我们","/","。","node","文件","节点","库","程序","{","*","entry","？","-","while","知道","入口","!","helloworld","hello","info","py","输出","8","com","接口","功能","(","如下"," ","env",",","打开","import","def","get",":","古月","[","="],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_5","text":"代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。","text_tokens":["过","方法","流程","面向","模块","初始化","节点","复杂","更","发现","过程","或者","pyhton","未来","方式","重要","想要","有","模块化","中","这里","虽然","销毁","对于","的","很","具体","简单","一下","总结","：","难","c++","用到","做到","使用","一个","学习","稍微","纠结","先","是","编程","一点","如果","代码","机器","出现","这样","但是","系统","大家","编码","就","并","创建","接口","功能","函数","这种"," ","会","我们","关闭","，","初始","理解","不用","应该","。","的话","机器人","经常","做","实现","可以"],"title":"创建节点流程","title_tokens":["流程","节点","创建"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world_1","text":"所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。","text_tokens":["可移植","可读性","面向","对象","复杂","更","方式","开发","了","移植","中","虽然","和","也","的","比如","移植性","推荐","刚才","使用","一些","看上","更好","所以","编程","面向对象","代码","可读","改成","调试","方便","这样","但是","大家","在","就","具备","更加"," ","我们","会","，","起来","上去","可移植性","。","看上去","ros2","可以"],"title":"案例二：Hello World节点（面向对象）","title_tokens":["案例","hello"," ","面向","：","world","对象","（","节点","）","面向对象","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_6","text":"下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["字符","打印","成功","节点","调整","_","中","的","一下","：","world","”","class","helloworld","下来","hello","后","效果","看到","终端","运行","在","learning"," ","，","循环","$","还是","“","字符串","run","。","node","ros2","可以"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_7","text":"功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ],","text_tokens":["日志","对象","看","的","bin","from","配置","示例","”","使用","shutdown","发布","time","后","main","设置","python","learning","信息","guyuehome","时","初始","“","控制","循环","关闭","init","实现","\"","需要","退出","rclpy","初始化","spin","args","休眠","_","usr","让","sleep","destroy","setup","world","logger","时间","正常","coding","self","类","进行","'","代码","变化","运行","完成","编译","@","创建","none","utf","函数","helloworldnode","，","python3","ros2",")","面向","super","ok","方式","了","选项","]","销毁","具体","#","包","加入","：","points","主","作者","一个","class","这份","编写","说明","居","是否","name","点","www","0.5","console","面向对象","但是","系统",".","一样","并","父类","__","scripts","我们","/","。","node","等待","文件","节点","库","程序","{","*","虽然","entry","-","while","一下","知道","发生","入口","!","结构","helloworld","hello","info","py","输出","8","com","接口","功能","(","如下"," ","env",",","打开","import","def","get",":","古月","[","="],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_8","text":"所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。","text_tokens":["改变","心里","打印","只不过","初始化","疑惑","节点","方式","了","四个","而言","这里","不是","销毁","不过","的","中","具体","而已","world","不能","得","依然","一个","一些","到","hello","所以","是","编程","编码方式","任务","机器","总体而言","还有","编码","步骤","大家","吧","完成","这","并","创建","接口","功能","是不是"," ","关闭","，","初始","为止","总体","。","机器人","只是","做","实现"],"title":"创建节点流程","title_tokens":["流程","节点","创建"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_9","text":"没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。","text_tokens":["实际","节点","没错","以","视觉","过程","通过","中","模拟","的","识别","找到","一张","一个","编写","从","下来","来","先","接下来","接下","任务","机器","苹果","就"," ","我们","，","网上","为例","机器人","。","实现","图片"],"title":"案例三：物体识别节点","title_tokens":["案例","三","识别","：","物体","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_10","text":"在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。","text_tokens":["例程","成功","中间","把","dev","sudo","啦","请","注意","的","识别","勾勒","用到","图像处理","使用","指令","后","object","框会","learning","可以","opencv","需要","可视化","处理","_","会弹","tutorials","图像","即可","出","这个","轮廓","src","将","修改","21","'","代码","hcx","苹果","运行","编译","在","—","，","imread","home","run","python3","apt","jpg","ros2",")","图片","绿色","然后","窗口","cv2","中","中心点","#","路径","：","一个","安装","出来",".","install","我们","/","image","。","node","绿点","被","中心","ws","实际","库","表示","-","前","可视","为","看到","py","apple","就","如下","("," ","重新","$","="],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_11","text":"在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ],","text_tokens":["范围","findcontours","模型","例程","对象","hierarchy","过程","dev","inrange","h","更多","的","处理过程","识别","circle","continue","w","bin","from","颜色","示例","勾勒","读取","配置","list","包","图像处理","使用","shutdown","一些","像素","后","效果","main","object","红色","255","设置","python","数值","learning","guyuehome","关闭","初始","循环","下限","上限","机器人","imshow","init","实现","for","opencv","\"","upper","需要","理过","退出","rclpy","waitkey","初始化","args","处理","_","numpy","spin","bgr","usr","chain","上角","让","tutorials","red","通过","图像","不是","destroy","150","概念","setup","logger","左上角","这个","轮廓","src","去除","将","2","coding","21","来","是","类","进行","'","detect","shape","代码","x","左上","hcx","苹果","编译","完成","cvtcolor","在","@","none","创建","utf","if","函数","，","int","imread","home","python3","ros2","图片",")","destroyallwindows","jpg","+","array","关于","img","retr","<","hsv","180","90","了","选项","如下","cv2","图像识别","中","]","销毁","y","加入","具体","关注","如何","#","二值化","contours","太小","：","xy","cnt","points","主","作者","drawcontours","显示","一个","编写","class","说明","居","点","www","5","in","console","机器","重点","系统","出来","大家",".","转换","并","scripts","我们","/","lower","此处","image","。","node","等待","面积","坐标","文件","128","所在","mask","中心","ws","节点","库","程序","np","{","approx","高","*","和","entry","模拟","-","bgr2hsv","知道","为","入口","0","宽","阈值","!","从","计算","helloworld","boundingrect","info","1","更多要","及","py","出现","apple","点画","8","as","com","功能","接口","(","color"," ","env",",","噪声","import","def","get","打开","检测",":","古月","得到","[","="],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_12","text":"用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。","text_tokens":["好像","摄像头","摄像","节点","就让","像头","或者","有","图像","太","的","识别","物体","颜色","用","读取","没","眼睛","问题","下来","动态","接下来","进行","接下","图片","其中","机器","苹果","我们","，","不","合理","机器人","。","类似","应该","还","呀"],"title":"案例四：机器视觉识别节点","title_tokens":["四","案例","识别","：","节点","机器","视觉"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_13","text":"启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 注意：如果是在虚拟机中操作，需要进行以下设置： 把虚拟机设置为兼容USB3.1； 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。","text_tokens":["；","兼容","连接","摄像头","虚拟","需要","摄像","移动","成功","节点","_","像头","把","至","中将","启动","啦","中","注意","的","#","识别","驱动","：","可以","物体","usb3.1","为","一个","webcam","实时","是","进行","如果","后","object","终端","虚拟机","操作","以下","设置","红色","运行","并且","在","就","如下","learning"," ","，","可","$","该","run","。","node","ros2","设备"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_14","text":"相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ],","text_tokens":["范围","摄像头","findcontours","模型","对象","true","hierarchy","inrange","h","的","识别","circle","continue","w","bin","from","颜色","示例","勾勒","读取","配置","list","使用","图像处理","shutdown","一些","像素","后","效果","main","object","ret","红色","255","设置","python","数值","learning","信息","guyuehome","关闭","初始","下限","上限","imshow","init","for","opencv","\"","upper","摄像","需要","rclpy","waitkey","初始化","args","处理","像头","_","numpy","bgr","usr","chain","上角","让","一帧","red","通过","这里","图像","destroy","150","驱动","setup","logger","左上角","周期","轮廓","去除","将","2","coding","修改","来","是","进行","类","'","detect","shape","代码","x","左上","苹果","变化","编译","完成","cvtcolor","@","none","创建","utf","if","函数","，","videocapture","int","50","python3","ros2","图片",")","+","array","img","retr","<","hsv","180","90","ok","了","选项","如下","cv2","]","中","销毁","y","#","包","二值化","contours","太小","：","加入","cap","xy","cnt","points","主","相比","作者","drawcontours","显示","编写","class","说明","居","来源","点","www","5","in","console","之前","系统","出来",".","转换","并","scripts","/","lower","image","。","node","面积","read","坐标","文件","128","所在","mask","中心","节点","库","程序","np","{","approx","高","*","和","entry","-","while","bgr2hsv","知道","为","入口","0","宽","阈值","webcam","!","从","相机","计算","helloworld","boundingrect","info","1","及","py","出现","并且","8","as","点画","com","接口","color","(","功能"," ","env",",","噪声","import","def","get","打开","最大","检测",":","古月","得到","[","="],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_15","text":"节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息","text_tokens":["列表","节点","<","_","命令","的","#","：",">","list","name","info","常用","操作","如下","查看"," ","信息","$","node","ros2"],"title":"节点命令行操作","title_tokens":["节点","命令行","命令","操作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_16","text":"现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。","text_tokens":["开始","摄像头","一种","把","保持","这些","的","配置","之间","指令","ros","运动","后","最为","框架图","b","会","介绍","控制","框架","机器人","实现","连接","发送","摄像","像头","发现","图像","不是","两个","很","概念","孤立","这个","一节","将","还会","常用","工作","熟悉","速度","给","在","负责","a","联系","，","收到","改变","方法","回到","过来","了","想要","中","某种","电脑","得","另外","参数","显示","一个","问题","机制","如果","机器","系统","岂","大家","并","下","我们","现在","。","应该","节点","没错","他们","保持联系","有","和","摇杆","多种","比如","同理","细胞","看到","就","要","这"," "],"title":"思考题","title_tokens":["思考题","考题","思考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_17","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["docs","html","en","nodes","https","-","/","ros","understanding","org",":","humble","tutorials","ros2","."],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/","text":"话题 节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。 通信模型 以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。 发布/订阅模型 从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为发布者，接收数据的对象称之为订阅者，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。 多对多通信 大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。 异步通信 话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。 消息接口 最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过.msg后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。 案例一：Hello World话题通信 了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 运行效果 启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。 发布者代码解析 我们来看下发布者的实现方法。 程序实现 learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口 订阅者代码解析 我们再来看下订阅者的实现方法。 程序实现 learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。 案例二：机器视觉识别 在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。 运行效果 这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。 发布者代码解析 learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], }, 订阅者代码解析 learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], }, 案例三：机器视觉识别优化 通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub 话题命令行操作 话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息 思考题 关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？ 参考链接 https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["范围","么","生活","讲","例程","听","true","一新","上","重要","h","raw","注意","三","类型","配置","读取","list","例子","shutdown","所谓","思考题","报纸","指令","ret","255","原本","本身","接口定义","docs","区分","公众","解析","万缕","for","\"","subscribernode","描述","一般","需要","退出","rclpy","spin","}","不知","args","cvbridge","用于","需求","不是","不行","提示","create","第二","即可","%","左上角","周期","轮廓","去除","转化成","换","传递数据","那","来","进行","留","说","各种各样","焕然","代码","进一步","你","变化","运行","完成","https","是不是","什么样","videocapture","run","解","apt","随处","usb",")","好像","收到","sub","html","+","英文","对劲","千丝","第一","特性","视觉","二","它","publisher","启动","某种","几乎","满足","contours","：","太小","得","另外","小编","第一个","编写","问题","安装","name","点","www","已经","console","号","之前","优先","出来","并","！","父类","scripts","已","某些","了解","lower","数量","应该","被","称之为","文件","128","所在","中心","挺","不太","格式","提高","考题","二个","approx","听说","一步","也","摇杆","比如","必然","bgr2hsv","知道","一行","语言","数据传输","没","dds","宽","webcam","结构","率","无法","终端","8","个","subscription","功能","接口","(","只要"," ","env","def","timer","数据类型","string","做","要求","定时器","仔细","模型","感兴趣","秒","精简","更","模块化","inrange","谁","std","识别","好","移植性","continue","s","知识","bin","接收数据","填充","像","使用","感觉","最后","发布","先","频率","之间","编程","main","sensor","时候","传感器","不变","成为","（","哪里","下限","呀","设备","另","打","发送","参考","bgr8","echo","可视化","处理","_","转换成","微信","上角","带宽","程序实现","tutorials","一次","移植","积木","red","图像","千丝万缕","destroy","魔性","world","块","多个","这个","imagesubscriber","en","更好","互相","实时","话题","是","接下来","又","shape","后缀","x","左上","以下","操作","苹果","@","据传","utf","各样","消息","python3","命令行","ros2","还","与","方法","流程","关于","写","180","以","90","方式","了","想要","中","长宽","太","y","因为","硬件","物体","参数","cnt","兴趣","显示","drawcontours","说明","居","桥梁","5","in","并不知道","报社","每","就要","通用","understanding","但是","转换","角度","视频","__","作为","字符串","分析","指","排版","image","node","定时","坐标","继续","mask","）","名字","节点","程序","{","humble","对应","周期性","entry","传感","词","-","符合","bw","比方","但","入口","想下","转化","通信模型","!","计算","imagepublisher","boundingrect","info","设计","拼接","publishernode","还有","长度","imgmsg","as","这","如下","heard","打开","to","检测","org",":","imshow","日志","开始","findcontours","对象","看","成功","一份","保持","未来","各种","的","随处可见","circle","过瘾","优先级","示例","同样","勾勒","callback","一","都","一些","publishing","像素","本原","后","运动","复用","设置","适合","关闭","循环","传输","是从","初始","可移植性","者","机器人","数据","实现","名称","多","基本","初始化","receiving","usr","让","可见","frame","通过","这里","150","驱动","总结","进入","什么","用","似乎","0.1","将","就是","数据结构","里","焕然一新","单向","采集","detect","给","编译","cvtcolor","创建","肯定","函数","if","叫做","感器","更换","回调","组织","单位","发布者","retr","集成","hsv","链接","统一","开发","同学","msgs","topics","讲解","cv2","可能","内","包","加入","二值化","不能","所有","xy","分别","主","每换","作者","一个","class","是否","0.5","获取","机器","异步","i","几个","耦","install","查看","最","我们","组成","/","方向","为例","还是","不","。","的话","无论","值","库","没错","复杂","np","命令","高","*","虽然","？","执行",">","只","之后","0","阈值","到","此时","杂志","每个","一定","控制指令","接下","其中","bridge","data","等等","看到","py","输出","pub","拍摄","点画","要","出去","points","一句",",","协议","get","画面","类似","得到","=","发出","目标","列表","一种","来讲","想象","模块","把","成","接口协议","hierarchy","过程","订阅","topic","sudo","这些","啦","type","通信","名","w","from","东西","listener","他会","建议","颜色","cam","”","刚才","图像处理","基本原理","阅读","ros","效果","无关","标准","object","自行","红色","python","数值","learning","b","接收","信息","会","中文","guyuehome","定义","“","控制","说干就干","该","发送数据","上限","init","做成","可以","第二个","opencv","可移植","upper","waitkey","没有","numpy","优化","rgb","bgr","3","chain","一帧","某","对","自己","案例","两个","对于","概念","setup","呢","logger","文章","固定","在生活中","中是","2","原理","coding","修改","下来","关系","self","exe","类","'","常用","publish","思想","化成","较强","很多","在","none","联系","a","，","软件","才能","基于","int","video","能够","字符","完全","array","img","用户","联系方式","<","super","选项","之为","]","渲染","销毁","不过","\\","#","、","再","如何","以上","cap","做到","逻辑性","自然","任何","如果","间","来看","这样","系统","大家",".","一样","感兴","合适","放入","平时","下","独立","一篇","稍后","理解","根本","现在","队列","等待","叫","面积","read","当然","chatter","编程语言","从而","人","唯一","既然","有","举","和","第一次","一下","思考","不然","可视","逻辑","为","传递","从","相机","hello","helloworld","存在","hz","1","10","保证","包含","及","cv","直接","并且","就","监控","com","这种","color","换成","msg","想","噪声","import","$","古月","["],"title":"**话题**","title_tokens":["*","话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_1","text":"节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。","text_tokens":["一种","千丝","节点","联系方式","它","方式","了","这些","有","重要","各种","不是","千丝万缕","的","但","传递","传递数据","就是","桥梁","之间","话题","其中","是","各种各样","机器","间","并","功能","联系"," ","最","会","独立","，","各样","机器人","数据","。","万缕","实现"],"title":"话题","title_tokens":["话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_2","text":"以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。","text_tokens":["上","的","之间","ros","b","信息","传输","机器人","数据","实现","可以","设备","可视化","得到","某","图像","不是","两个","驱动","这个","将","关系","实时","是","话题","给","在","据传","a","是不是","，","才能","用户","以","它","方式","了","之为","中","渲染","某种","硬件","显示","一个","桥梁","获取","机器","这样","大家","视频","查看","我们","作为","方向","为例","。","称之为","节点","没错","有","？","一下","必然","可视","数据传输","传递","从","到","此时","相机","存在","拍摄","就","这","监控","要","功能"," ","想","做"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_3","text":"从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为发布者，接收数据的对象称之为订阅者，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。","text_tokens":["生活","模型","感兴趣","对象","看","把","成","订阅","的","类型","随处可见","好","知识","接收数据","他会","”","使用","都","发布","报纸","本身","接收","会","成为","传输","是从","“","者","发送数据","数据","公众","机器人","实现","可以","名称","需要","发送","打","类似","没有","微信","可见","对","呢","什么","文章","这个","固定","在生活中","就是","话题","是","据传","叫做","，","基于","随处","组织","收到","发布者","特性","它","了","之为","、","另外","小编","兴趣","一个","居","自然","如果","每","机器","号","来看","这样","大家","角度","感兴","平时","/","。","排版","的话","应该","叫","称之为","名字","节点","格式","有","和","？","也","比如","之后","数据传输","比方","dds","从","到","杂志","无法","等等","就","出去"," ","数据类型","古月","要求"],"title":"发布/订阅模型","title_tokens":["订阅","发布","模型","/"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_4","text":"大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。","text_tokens":["仔细","模型","想象","听","订阅","这些","谁","注意","的","通信","东西","优先级","建议","发布","报纸","指令","ros","区分","控制","公众","者","机器人","该","可以","多","发送","3","对","不是","魔性","多个","这个","似乎","2","里","话题","是","很多","是不是","，","发布者","了","之为","可能","、","再","因为","一个","如果","机器","号","优先","大家","一样","并","我们","还是","不","。","数量","被","称之为","人","挺","唯一","节点","没错","有","和","也","摇杆","一下","不然","知道","想下","通信模型","杂志","每个","存在","控制指令","1","个","要"," ","画面"],"title":"多对多通信","title_tokens":["多","通信","对"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_5","text":"话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。","text_tokens":["发出","一份","更","订阅","的","通信","一些","所谓","发布","报纸","阅读","指令","后","运动","时候","传感器","适合","传输","控制","者","公众","数据","可以","类似","不知","用于","让","一次","某","什么","文章","这个","周期","用","就是","那","修改","话题","是","你","较强","叫做","感器","，","收到","第一","发布者","特性","了","同学","可能","太","参数","一个","逻辑性","居","并不知道","如果","报社","号","异步","合适","某些","一篇","根本","不","指","。","听说","有","第一次","？","词","也","比如","传感","知道","逻辑","等等","还有","就","这","只要"," ","古月"],"title":"异步通信","title_tokens":["异步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_6","text":"最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过.msg后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。","text_tokens":["一种","成","订阅","各种","的","通信","像","都","最后","发布","编程","像素","ros","无关","标准","自行","接口定义","中文","会","定义","传输","者","机器人","数据","可以","描述","rgb","通过","积木","这里","图像","概念","块","数据结构","是","话题","进行","说","后缀","各种各样","在","据传","，","消息","各样","与","英文","发布者","统一","方式","了","之为","中","长宽","、","得","不能","一个","机器","这样","系统",".","一样","我们","组成","理解","。","值","称之为","文件","编程语言","节点","格式","复杂","对应","既然","有","和","也","比如","语言","数据传输","结构","每个","拼接","包含","等等","就","接口"," ","msg"],"title":"消息接口","title_tokens":["消息","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#hello-world","text":"了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。","text_tokens":["开始","字符","chatter","从而","发送","基本","例程","发布者","订阅","了","啦","中","的","类型","再","world","周期","这个","”","一个","编写","原理","从","到","发布","下来","hello","来","基本原理","话题","接下","接下来","本原","是","ros","就要","代码","标准","创建","接收"," ","了解","我们","，","“","定义","还是","字符串","消息","。","者","string"],"title":"案例一：Hello World话题通信","title_tokens":["案例","hello"," ","话题","通信","：","world","一"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_7","text":"启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。","text_tokens":["第二个","收到","sub","字符","第一","发布者","节点","_","以","二个","订阅","topic","启动","也","的","几乎","：","第二","world","同样","”","第一个","一个","发布","helloworld","hello","频率","话题","数据","看到","终端","pub","运行","learning"," ","，","循环","$","“","字符串","者","run","消息","该","。","ros2","可以"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_8","text":"我们来看下发布者的实现方法。","text_tokens":["发布","的","方法","下","我们","发布者","。","来看","实现"],"title":"发布者代码解析","title_tokens":["解析","发布","代码","发布者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_9","text":"learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], },","text_tokens":["日志","秒","对象","topic","std","的","类型","名","定时器","s","填充","bin","from","配置","示例","callback","”","shutdown","发布","publishing","后","main","设置","python","learning","信息","guyuehome","关闭","初始","“","（","循环","数据","init","\"","需要","退出","rclpy","初始化","spin","args","}","_","usr","让","destroy","提示","create","world","setup","logger","%","周期","coding","self","话题","类","'","进行","代码","publish","编译","完成","@","创建","none","utf","函数","，","消息","python3","ros2",")","回调","字符","单位","发布者","super","msgs","publisher","选项","]","中","销毁","#","、","包","加入","：","points","主","作者","一个","class","编写","说明","居","name","点","www","0.5","已经","console","系统",".","并","父类","__","scripts","/","字符串","队列","node","等待","定时","文件","chatter","）","节点","库","程序","{","*","entry","-","执行","知道","为","入口","!","helloworld","hello","info","10","data","publishernode","py","输出","pub","长度","8","com","接口","功能","(","如下",","," ","env","msg","import","def","get","打开","timer",":","古月","string","[","="],"title":"程序实现","title_tokens":["程序实现","程序","实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_10","text":"对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口","text_tokens":["流程","初始化","发布者","对象","节点","程序","想要","对","销毁","：","以上","填充","一个","发布","话题","进行","编程","如果","并","创建","如下","接口"," ","我们","关闭","，","初始","分析","消息","实现"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_11","text":"我们再来看下订阅者的实现方法。","text_tokens":["的","方法","下","再","我们","者","。","来看","订阅","实现"],"title":"订阅者代码解析","title_tokens":["解析","订阅","代码","者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_12","text":"learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], },","text_tokens":["日志","对象","订阅","topic","std","的","类型","名","s","bin","from","listener","示例","配置","callback","”","shutdown","后","标准","main","设置","python","learning","信息","guyuehome","关闭","定义","“","初始","（","循环","者","数据","init","\"","subscribernode","需要","退出","rclpy","初始化","spin","args","处理","_","}","usr","让","对","destroy","提示","create","world","setup","logger","%","coding","self","话题","类","'","进行","代码","编译","完成","@","创建","none","utf","函数","，","消息","python3","ros2",")","回调","收到","sub","super","msgs","选项","如下","]","销毁","\\","#","、","包","加入","：","points","主","作者","一个","class","编写","说明","居","name","点","www","console","系统",".","i","并","父类","__","scripts","/","队列","node","等待","文件","chatter","）","节点","库","程序","{","*","entry","-","执行","知道","入口","!","helloworld","hello","info","10","data","py","输出","pub","长度","8","com","subscription","接口","功能","(","heard",","," ","env","msg","import","def","get","打开",":","古月","string","[","="],"title":"程序实现","title_tokens":["程序实现","程序","实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_13","text":"对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。","text_tokens":["回调","继续","流程","还","初始化","对象","例程","节点","处理","优化","程序","视觉","订阅","想要","对","啦","销毁","的","好","过瘾","：","world","以上","通信","一个","hello","下来","一定","话题","进行","编程","接下","如果","接下来","机器","之前","大家","并","创建","如下","接口","函数"," ","下","我们","关闭","，","初始","不","分析","基于","者","。","数据","实现"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_14","text":"在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。","text_tokens":["来讲","模块","节点","没有","视觉","程序","过程","开发","了","方式","模块化","对","通过","讲解","中","虽然","和","两个","对于","的","图像","概念","识别","驱动","即可","物体","这个","做到","没","周期","将","一个","问题","就是","相机","更好","是","话题","数据","机器","间","但是","红色","并且","在","并","做成","功能","联系","我们","，","传输","。","机器人","实现"],"title":"案例二：机器视觉识别","title_tokens":["案例","识别","：","机器","视觉","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_15","text":"这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。","text_tokens":["范围","模块","保持","订阅","topic","未来","模块化","啦","的","识别","好","移植性","发布","先","ros","效果","标准","不变","红色","learning","定义","说干就干","可移植性","实现","可以","第二个","可移植","另","需要","_","移植","图像","两个","驱动","第二","即可","这个","将","中是","修改","更好","是","话题","以下","思想","运行","在","，","软件","消息","更换","run","ros2","sub","完全","第一","视觉","了","启动","内","如何","物体","分别","第一个","一个","如果","来看","并","放入","下","我们","。","节点","二个","？","只","webcam","相机","设计","保证","看到","终端","pub","就","要","功能","这种"," ","$"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_16","text":"learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], },","text_tokens":["日志","秒","对象","true","成功","topic","raw","的","类型","名","定时器","bin","from","配置","示例","读取","callback","图像处理","shutdown","发布","publishing","ros","后","ret","main","sensor","设置","python","learning","信息","guyuehome","关闭","初始","（","循环","init","opencv","设备","\"","需要","退出","rclpy","cvbridge","初始化","bgr8","处理","_","args","spin","用于","usr","转换成","让","frame","一帧","图像","destroy","提示","驱动","create","setup","logger","周期","0.1","将","coding","self","采集","话题","类","'","进行","代码","publish","编译","完成","@","创建","none","utf","函数","if","，","videocapture","消息","python3","ros2",")","回调","video","sub","与","单位","发布者","super","msgs","publisher","选项","如下","cv2","]","销毁","#","、","包","加入","：","cap","points","主","作者","一个","class","编写","}","说明","居","name","点","www","如果","已经","console","号","系统",".","转换","并","父类","__","视频","scripts","/","稍后","image","队列","node","等待","read","定时","文件","）","节点","库","程序","{","*","entry","-","执行","知道","为","入口","0","!","webcam","相机","helloworld","imagepublisher","info","bridge","10","py","输出","pub","cv","长度","imgmsg","8","com","接口","功能","(","换成"," ","env","msg",",","import","def","to","get","打开","timer",":","古月","[","="],"title":"发布者代码解析","title_tokens":["解析","发布","代码","发布者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_17","text":"learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], },","text_tokens":["日志","范围","spin","findcontours","模型","对象","hierarchy","订阅","topic","inrange","h","raw","的","类型","circle","continue","名","w","bin","from","listener","示例","颜色","勾勒","callback","list","配置","图像处理","使用","shutdown","一些","像素","ros","后","效果","main","sensor","object","args","红色","255","设置","数值","python","learning","信息","guyuehome","关闭","初始","（","循环","下限","上限","者","imshow","init","for","opencv","\"","upper","需要","退出","rclpy","cvbridge","初始化","waitkey","处理","_","numpy","receiving","用于","usr","bgr","chain","上角","让","bgr8","frame","red","图像","destroy","150","提示","create","setup","logger","进入","左上角","轮廓","去除","将","转化成","imagesubscriber","2","coding","互相","self","话题","类","'","进行","detect","shape","代码","x","左上","化成","苹果","编译","完成","cvtcolor","@","创建","none","utf","函数","if","，","int","消息","python3","ros2",")","回调","video","sub","与","+","array","img","retr","<","hsv","180","90","super","msgs","选项","如下","cv2","]","中","销毁","y","#","、","二值化","contours","太小","包","加入","：","xy","cnt","points","主","作者","drawcontours","显示","一个","class","编写","}","说明","居","name","点","www","5","in","console","系统","出来",".","转换","并","父类","__","scripts","已","/","lower","image","队列","node","等待","面积","坐标","文件","128","所在","mask","中心","）","节点","库","程序","np","{","approx","高","*","和","entry","-","bgr2hsv","知道","为","入口","0","宽","阈值","转化","!","webcam","从","计算","helloworld","boundingrect","info","1","bridge","10","及","data","py","输出","pub","cv","长度","imgmsg","点画","8","as","com","subscription","接口","color","(","功能"," ","env","msg",",","import","def","噪声","get","to","打开","检测",":","古月","得到","[","="],"title":"订阅者代码解析","title_tokens":["解析","订阅","代码","者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_18","text":"通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub","text_tokens":["目标","么","例程","精简","一新","接口协议","topic","sudo","的","识别","好","刚才","cam","感觉","都","使用","发布","指令","ros","复用","标准","原本","learning","哪里","呀","可以","一般","需要","_","让","对","通过","自己","图像","不是","不行","驱动","什么","用","似乎","换","焕然一新","exe","话题","是","又","常用","焕然","代码","进一步","你","变化","是不是","什么样","，","软件","解","做","run","apt","usb","ros2","好像","sub","对劲","写","集成","视觉","了","中","可能","不过","得","每换","一个","安装","任何","通用","这样","大家","耦","！","install","我们","现在","不","无论","。","node","当然","不太","节点","提高","humble","有","一步","？","也","-","只","一行","符合","webcam","到","相机","率","还有","直接","就","这","功能","接口","换成","只要"," ","一句","协议","$","得到"],"title":"案例三：机器视觉识别优化","title_tokens":["案例","三","识别","：","机器","视觉","优化"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_19","text":"话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息","text_tokens":["列表","echo","<","_","带宽","topic","命令","的","#","type","：",">","bw","list","发布","hz","name","频率","info","话题","常用","data","操作","pub","如下","查看"," ","信息","msg","传输","$","消息","数据","ros2"],"title":"话题命令行操作","title_tokens":["命令行","话题","命令","操作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_20","text":"关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？","text_tokens":["方法","关于","讲","来讲","特性","复杂","考题","需求","周期性","举","这里","和","对于","的","？","满足","通信","：","思考","呢","所有","周期","数据传输","传递","一个","例子","原理","到","单向","思考题","是否","话题","留","是","无法","机器","系统","大家","给","完成","就","几个","肯定","这种","据传","我们","适合","，","传输","机器人","数据","实现","能够"],"title":"思考题","title_tokens":["思考题","考题","思考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_21","text":"https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["docs","html","en","https","-","ros2","/","ros","understanding","org",":","humble","tutorials","topics","."],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/","text":"服务 话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。 通信模型 在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。 客户端/服务器模型 从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。 同步通信 这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。 一对多通信 比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。 服务接口 和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。 案例一：加法求解器 大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 运行效果 我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3 客户端代码解析 我们来看下客户端的实现方法。 程序实现 learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口 服务端代码解析 至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。 程序实现 learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_server = learning_service.service_adder_server:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口 案例二：机器视觉识别 好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。 运行效果 此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client 客户端代码解析 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], }, 服务端代码解析 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], }, 服务命令行操作 服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求 思考题 话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["部分","范围","讲","生活","例程","true","上","h","raw","类型","配置","add","域名","判断","list","shutdown","思考题","指令","最为","255","docs","同步","准确","时","解析","for","\"","一般","需要","接口类型","}","rclpy","spin","退出","addtwoints","args","不知","cvbridge","用于","希望","需求","send","转圈圈","不是","提示","create","第二","%","左上角","周期","轮廓","去除","转化成","正常","学习","传递数据","前者","按照","进行","提供","代码","你","运行","完成","一问一答","里程计","更加","https","加法器","服务器端","合理","run","处","usb",")","好像","收到","拿到","sub","html","+","随时","雷达","第一","client","二","视觉","后者","启动","图像识别","interface","具体","问","不同","again","：","async","...","contours","太小","另外","满足","e","future","第一个","objectx","编写","name","点","www","call","大部","已经","console","之前","繁杂","接口类","出来","并","1.0","父类","exception","scripts","已","某些","展现","了解","软硬件","lower","经常","应该","文件","称之为","128","所在","中心","考题","二个","approx","绝大部分","command","也","response","比如","bgr2hsv","数据通","知道","宽","官方","无法","网站","终端","上层","getobjectposition","8","subscription","接口","功能","("," ","env","def","srv","数据类型","要求","r","当前","模型","访问","更","inrange","识别","好","continue","bin","使用","发布","request","频率","所以","之间","编程","核心","上述","main","sensor","时候","传感器","本","客户端","成为","介绍","（","下限","结果","service","发送","参考","圈圈","bgr8","务器","处理","_","上角","程序实现","try","应用","tutorials","一次","red","图像","destroy","时间","多个","这个","imagesubscriber","en","互相","话题","是","接下来","shape","x","done","操作","左上","服务端","苹果","@","—","utf","50","消息","python3","提到","命令行","网络","ros2","与","至于","方法","流程","180","90","方式","或者","了","有所不同","有点","想要","中","y","应答","硬件","物体","cnt","drawcontours","显示","two","说明","居","5","三个","加数","in","并不知道","通用","每","就要","understanding","但是","转换","sys","__","分析","image","node","坐标","继续","mask","）","节点","程序","{","humble","请求","周期性","entry","传感","-","while","但","入口","转化","通信模型","!","计算","boundingrect","info","设计","跟随","认为","一起","求和","还有","长度","imgmsg","as","如下","打开","to","最新","检测","org",":","imshow","有所","adder","开始","日志","findcontours","数据通信","对象","看","成功","界面","越好","查询","各种","网页","的","circle","加法","答","并不需要","failed","示例","同样","勾勒","callback","一","都","尽快","一些","像素","运动","后","常见","argv","设置","针对","ints","宕机","objectclient","适合","关闭","初始","传输","循环","者","机器人","数据","adderserver","实现","发","；","多","服务器","客户","基本","初始化","receiving","准备","usr","让","frame","反应","通过","跟踪","150","驱动","总结","进入","什么","将","就是","wait","课程","单向","sum","detect","给","编译","cvtcolor","创建","函数","if","叫做","感器","服务器发送","回调","发布者","retr","集成","然后","hsv","链接","ok","开发","比比","msgs","cv2","可能","sec","服务","包","器","加入","二值化","电脑","xy","分别","某个","主","相比","作者","一个","class","机制","是否","场景","获取","机器","异步","岂","timeout","查看","我们","/","简称","转圈","不","还是","。","相对","打印","等","假设","库","np","of","命令","高","*","server","执行","简单",">","之后","0","阈值","此时","到","控制指令","接下","其中","bridge","data","等等","看到","py","输出","附近","出现","点画","要","出去","points",",","objecty","浏览","get","浏览器","result","类似","得到","=","n","通信接口","目标","列表","当","一种","once","target","成","页面","hierarchy","过程","订阅","这些","啦","type","通信","名","w","from","刚才","listener","cam","颜色","break","”","用到","图像处理","两种","not","ros","效果","标准","object","红色","封装","services","根据","python","数值","learning","接收","b","信息","会","guyuehome","定义","“","控制","发给","上限","init","可以","一对","第二个","opencv","upper","waitkey","没有","这么","numpy","bgr","3","chain","return","对","而是","很","案例","两个","半天","求解","setup","变成","else","logger","d","在生活中","原理","2","coding","incoming","同步性","下来","self","exe","类","'","常用","一直","回想","状态","化成","很多","在","自定","none","a","，","int","video","大部分","完全","array","img","<","super","except","选项","之为","]","销毁","不过","\\","#","、","法器","以上","自定义","cs","绝大","adderclient","向","如果","位置","后续","来看","我","这样","系统","软硬","大家",".","一样","反馈","里程","下","现在","队列","等待","面积","那有","available","waiting","人","position","越快越好","唯一","有","和","不好","返回","思考","为","传递","从","相机","存在","1","10","及","放到","cv","比比皆是","并且","就","invalid","com","这种","color","msg","噪声","import","形式","$","打印输出","传入","古月","越快","["],"title":"**服务**","title_tokens":["*","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_1","text":"话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。","text_tokens":["收到","一种","方法","讲","发布者","节点","订阅","的","服务","问","通信","答","知道","另外","多个","使用","将","学习","机制","发布","单向","是否","话题","之间","无法","ros","常用","效果","你","一起","我","异步","本","同步","这种","—","准确"," ","我们","，","传输","者","消息","数据","。","类似","实现","可以"],"title":"服务","title_tokens":["服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_2","text":"在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。","text_tokens":["目标","模型","更","订阅","查询","的","识别","通信","并不需要","答","使用","尽快","发布","频率","ros","运动","时候","红色","信息","成为","传输","发给","机器人","数据","实现","发","可以","service","需要","发送","这么","希望","应用","对","通过","而是","图像","驱动","变成","周期","这个","按照","课程","单向","话题","是","一直","你","在","，","好像","然后","或者","了","有所不同","图像识别","中","服务","应答","不同","问","物体","另外","一个","机制","位置","机器","之前","这样","我","一样","并","反馈","我们","。","继续","节点","高","请求","和","比如","通信模型","此时","到","相机","其中","跟随","上层","附近","这种"," ","形式","最新","得到","有所"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_3","text":"从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。","text_tokens":["服务器发送","收到","服务器","需要","客户","模型","发送","生活","务器","处理","页面","上","或者","展现","请求","通过","很","各种","网页","也","的","比如","服务","问","具体","应答","答","通信","电脑","返回","之后","某个","cs","为","域名","在生活中","就是","从","机制","此时","向","进行","网站","你","时候","操作","来看","我","常见","针对","在","就","并","反馈","这种","客户端","叫做"," ","某些","信息","/","，","形式","服务器端","简称","会","我们","浏览","。","数据","浏览器","经常","实现"],"title":"客户端/服务器模型","title_tokens":["服务器","客户端","客户","服务","模型","/","务器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_4","text":"这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。","text_tokens":["那有","称之为","服务器","一般","客户","假设","圈圈","务器","越快越好","没有","越好","过程","或者","了","反应","通过","之为","转圈圈","中","可能","半天","的","也","服务","应答","不好","通信","这个","判断","相比","到","所以","是","话题","一直","你","状态","在","同步","客户端","宕机","接收","信息","浏览","我们","，","服务器端","浏览器","转圈","。","要求","越快","网络","可以"],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_5","text":"比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。","text_tokens":["服务器","完全","客户","人","模型","访问","务器","唯一","没有","界面","中","的","比如","服务","通信","多个","这个","同样","但","都","一个","通信模型","居","存在","所以","是","网站","每","看到","但是","大家","一样","并","客户端","，","服务器端","不","。","古月","可以"],"title":"一对多通信","title_tokens":["多","通信","一对"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_6","text":"和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。","text_tokens":["坐标","文件","部分","方法","了","命令","请求","这些","中","和","两个","也","的","比如","服务","通信","变成","传递","使用","一个","传递数据","话题","是","核心","ros","位置","标准","后续","还有","苹果","给",".","大家","一样","在","要","反馈"," ","msg","我们","会","，","定义","介绍","还是","srv","消息","。","数据","类似"],"title":"服务接口","title_tokens":["服务","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_7","text":"大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。","text_tokens":["开始","当","例程","成","啦","的","通信","加法","add","”","ros","后","针对","封装","ints","客户端","时","“","数据","结果","实现","可以","服务器","需要","客户","发送","基本","务器","_","对","通过","两个","求解","这个","将","下来","接下来","是","提供","进行","代码","给","，","服务器端","收到","了","想要","服务","应答","器","一个","编写","two","加数","就要","大家","并","反馈","了解","我们","现在","还是","。","应该","相对","节点","请求","有","也","简单","之后","官方","从","计算","接下","求和","就","出去","功能"," ","得到"],"title":"案例一：加法求解器","title_tokens":["案例","求解","器","加法","：","一"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_8","text":"我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3","text_tokens":["第二个","adder","service","客户","发送","ros2","例程","看","第一","节点","_","client","二个","3","请求","启动","server","两个","的","服务","第二","这个","第一个","一个","原理","2","是","提供","加数","代码","终端","操作","一起","服务端","求和","运行","并且","并","如下","功能","客户端","learning"," ","下","我们","，","$","。","数据","传入","run","结果","等待","实现"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_9","text":"我们来看下客户端的实现方法。","text_tokens":["客户端","的","客户","方法","下","我们","。","来看","实现"],"title":"客户端代码解析","title_tokens":["解析","客户","代码","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_10","text":"learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], },","text_tokens":["adder","r","result","once","对象","成功","的","类型","加法","名","failed","bin","from","配置","示例","add","break","shutdown","request","not","后","main","argv","设置","python","ints","learning","客户端","b","接收","信息","guyuehome","关闭","定义","初始","（","循环","数据","init","for","\"","服务器","service","需要","发送","客户","接口类型","}","rclpy","初始化","务器","addtwoints","args","_","spin","处理","usr","send","try","让","一次","两个","destroy","create","else","setup","logger","d","%","将","正常","wait","coding","2","self","类","'","进行","sum","代码","done","运行","完成","编译","@","自定","创建","none","utf","函数","a","加法器","if","，","服务器端","int","python3","ros2",")","收到","+","client","super","ok","方式","except","选项","启动","]","interface","sec","销毁","#","服务","again","法器","async","包","...","加入","：","自定义","e","points","future","作者","two","class","一个","编写","说明","居","是否","name","adderclient","www","点","call","加数","console","接口类","异步","系统",".","并","1.0","父类","反馈","exception","__","sys","timeout","scripts","/","node","等待","文件","available","waiting","打印","）","节点","库","程序","{","of","请求","*","entry","response","-","while","执行","知道","入口","!","计算","info","1","py","输出","8","as","com","接口","功能","(","如下",","," ","env","打开","import","def","get","打印输出","srv",":","古月","[","="],"title":"程序实现","title_tokens":["程序实现","程序","实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_11","text":"对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口","text_tokens":["服务器","流程","客户","发送","初始化","对象","务器","节点","程序","想要","请求","对","销毁","服务","应答","：","以上","一个","进行","编程","如果","并","创建","如下","客户端","接口"," ","我们","关闭","，","初始","服务器端","分析","数据","等待","实现"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_12","text":"至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。","text_tokens":["回调","服务器","至于","务器","不知","订阅","有点","了","请求","中","也","的","服务","通信","时间","知道","什么","用到","机制","话题","并不知道","出现","函数","服务器端","，","者","。","数据","类似","实现"],"title":"服务端代码解析","title_tokens":["解析","服务","服务端","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_13","text":"learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_server = learning_service.service_adder_server:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], },","text_tokens":["adder","日志","对象","的","类型","加法","名","bin","from","配置","示例","add","callback","shutdown","request","后","main","设置","python","ints","learning","b","信息","guyuehome","关闭","定义","初始","（","循环","adderserver","数据","init","结果","\"","服务器","service","需要","接口类型","退出","rclpy","初始化","务器","addtwoints","处理","_","args","spin","}","usr","让","return","对","destroy","提示","create","setup","logger","d","%","将","coding","incoming","self","提供","类","'","sum","进行","代码","编译","完成","@","自定","创建","none","utf","函数","a","加法器","，","python3","ros2",")","回调","收到","+","super","选项","]","中","interface","销毁","\\","#","服务","、","法器","应答","包","加入","：","自定义","points","主","作者","two","class","编写","说明","居","name","点","www","已经","console","接口类","系统",".","反馈","并","父类","__","scripts","/","node","等待","文件","）","节点","库","程序","{","请求","*","server","entry","response","-","执行","知道","入口","!","计算","info","py","求和","放到","输出","8","com","接口","功能","(","如下"," ","env",",","打开","import","def","get","srv",":","古月","[","=","n"],"title":"程序实现","title_tokens":["程序实现","程序","实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_14","text":"对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口","text_tokens":["回调","服务器","流程","客户","初始化","务器","对象","节点","程序","想要","对","通过","销毁","服务","应答","：","以上","一个","向","进行","编程","如果","服务端","并","反馈","创建","如下","接口","函数","客户端"," ","我们","关闭","，","初始","服务器端","分析","处","结果","实现"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_15","text":"好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。","text_tokens":["目标","当","流程","需要","视觉","了","通过","啦","不是","求解","的","识别","服务","好","加法","器","通信","物体","刚才","知道","机制","已经","回想","位置","时候","岂","更加","下","我们","，","合理","。","提到","实现"],"title":"案例二：机器视觉识别","title_tokens":["案例","识别","：","机器","视觉","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_16","text":"此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client","text_tokens":["；","目标","拿到","服务器","随时","当","需要","客户","发送","ros2","service","对象","务器","client","节点","集成","然后","视觉","准备","_","订阅","了","一次","有","请求","启动","图像","server","跟踪","的","识别","服务","驱动","：","分别","cam","一个","此时","发布","相机","exe","三个","提供","是","位置","运动","机器","上述","认为","object","终端","出现","运行","usb","并且","根据","就","客户端","learning"," ","会","我们","时","，","服务器端","$","机器人","数据","。","run","node","当前","可以"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_17","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], },","text_tokens":["adder","目标","result","once","target","对象","true","的","识别","failed","bin","from","配置","示例","break","shutdown","request","not","后","main","object","设置","python","learning","objectclient","guyuehome","关闭","定义","初始","init","for","\"","service","需要","}","rclpy","初始化","spin","args","_","usr","send","try","让","destroy","create","else","setup","logger","d","[","%","wait","coding","self","类","'","进行","代码","x","done","编译","完成","@","自定","none","创建","utf","if","，","python3","ros2",")","client","super","ok","except","选项","]","interface","sec","销毁","\\","y","#","服务","应答","again","async","包","...","加入","：","自定义","e","points","future","作者","class","编写","说明","居","name","点","www","call","位置","console","系统",".","并","1.0","父类","exception","__","timeout","scripts","/","node","等待","文件","available","waiting","position","节点","库","程序","{","of","请求","*","server","entry","response","-","while","知道","入口","!","info","getobjectposition","py","8","as","com","接口","功能","(","如下",","," ","env","打开","import","def","get","srv",":","古月","r","=","n"],"title":"客户端代码解析","title_tokens":["解析","客户","代码","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_18","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], },","text_tokens":["日志","目标","adder","范围","spin","findcontours","模型","target","对象","true","hierarchy","订阅","inrange","h","raw","的","类型","识别","circle","continue","名","w","bin","from","listener","示例","颜色","勾勒","callback","list","打开","配置","图像处理","使用","shutdown","一些","request","像素","ros","后","效果","main","object","sensor","args","红色","255","设置","数值","python","learning","信息","guyuehome","关闭","定义","初始","（","下限","循环","上限","者","数据","imshow","init","for","opencv","\"","服务器","service","upper","需要","接口类型","退出","rclpy","cvbridge","初始化","务器","处理","_","numpy","waitkey","用于","usr","bgr","chain","上角","让","bgr8","frame","return","red","对","图像","destroy","150","提示","create","else","setup","logger","进入","d","%","左上角","轮廓","去除","将","转化成","imagesubscriber","2","coding","互相","self","话题","提供","类","'","detect","shape","进行","代码","x","左上","化成","苹果","编译","完成","cvtcolor","@","自定","创建","none","utf","函数","if","，","int","50","消息","python3","ros2",")","回调","video","sub","收到","与","+","array","img","client","retr","<","hsv","180","90","super","msgs","选项","如下","cv2","]","中","interface","销毁","\\","y","#","服务","、","二值化","contours","太小","包","物体","加入","xy","自定义","cnt","：","主","points","作者","drawcontours","objectx","一个","class","显示","编写","}","说明","居","name","点","www","5","in","已经","console","接口类","系统","出来",".","转换","反馈","并","父类","__","scripts","已","/","lower","image","队列","node","等待","面积","坐标","文件","128","所在","mask","中心","）","position","节点","库","程序","np","{","approx","高","请求","command","*","server","和","entry","response","-","执行","bgr2hsv","知道","receiving","为","入口","0","宽","阈值","转化","!","从","计算","boundingrect","info","1","bridge","10","及","data","getobjectposition","py","输出","cv","长度","imgmsg","点画","8","as","invalid","com","subscription","接口","color","(","功能"," ","env","msg",",","import","def","get","objecty","噪声","to","srv","检测",":","古月","得到","[","=","n"],"title":"服务端代码解析","title_tokens":["解析","服务","服务端","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_19","text":"服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求","text_tokens":["列表","service","发送","<","_","命令","请求","的","类型","服务","#","type","：",">","list","name","call","常用","data","操作","如下","查看"," ","$","数据","数据类型","ros2"],"title":"服务命令行操作","title_tokens":["服务","命令行","命令","操作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_20","text":"话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。","text_tokens":["通信接口","目标","部分","数据通信","更","过程","这些","的","类型","识别","通信","都","两种","指令","ros","最为","标准","时候","传感器","针对","同步","适合","定义","传输","控制","机器人","数据","类似","需求","应用","图像","周期","这个","前者","同步性","单向","话题","是","常用","很多","一问一答","在","里程计","自定","感器","，","大部分","方法","雷达","视觉","后者","开发","了","比比","中","不过","服务","、","满足","硬件","自定义","绝大","场景","大部","获取","位置","机器","通用","就要","繁杂","软硬","里程","软硬件","我们","。","等","绝大部分","高","周期性","和","也","传感","比如","数据通","到","控制指令","设计","无法","等等","比比皆是","接口"," ","数据类型","要求"],"title":"思考题","title_tokens":["思考题","考题","思考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_21","text":"https://docs.ros.org/en/ humble /Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["docs","html","en","https","-"," ","/","ros","understanding","org",":","humble","tutorials","ros2",".","services"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/","text":"通信接口 在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。 接口的定义 接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。 ROS通信接口 接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。 语言无关 为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。 标准接口 大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。 案例一：服务接口的定义与使用 了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。 接口定义 在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ... 程序调用 我们在代码中再来重点看下接口的使用方法。 客户端接口调用 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 服务端接口调用 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 案例二：话题接口的定义与使用 话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。 运行效果 现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub 接口定义 在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ... 程序调用 我们在代码中再来重点看下接口的使用方法。 发布者接口调用 learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 订阅者接口调用 learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 接口命令行操作 接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义 参考链接 https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["传输数据","部分","范围","生活","讲","输入输出","中间","例程","true","上","objectposition","重要","诞生","领域","h","raw","64","类型","配置","动作","list","例子","shutdown","各个","指令","最为","约束","自语","调用函数","255","程序模块","接口定义","docs","匹配","准确","区分","时","concepts","解析","for","小海","\"","连接","描述","subscribernode","需要","接口类型","}","度","rclpy","便于","args","spin","cvbridge","退出","用于","希望","send","依赖","古月","不是","提示","create","第二","and","%","左上角","周期","轮廓","去除","转化成","正常","学习","那","来","进行","提供","代码","运行","完成","自言自语","https","什么样","project","run","20","随处","usb",")","收到","sub","html","+","default","回到","第一","client","就行","代码生成","视觉","二","它","publisher","1s","启动","编译器","interface","具体","again","不同","async","：","contours","得","...","太小","另外","e","体","future","第一个","反正","objectx","编写","int32","安装","name","www","call","已经","之前","包装","接口类","出来","并","1.0","父类","exception","只有","高效","已","了解","lower","为了","文件","称之为","别人","所在","128","二维","中心","二个","approx","command","表示","也","response","比如","bgr2hsv","知道","语言","宽","webcam","结构","getobjectposition","却是","终端","回顾","8","手机","subscription","接口","功能","(","你来我往"," ","调用","只要","env","def","srv","string","r","当前","摄像头","模型","更","像是","inrange","谁","更为","std","坐标值","识别","好","continue","bin","使用","标值","发布","request","所以","之间","编程","核心","main","sensor","时候","生成","客户端","（","下限","use","结果","看上去","各个领域","中来","service","发送","参考","bgr8","务器","详细","处理","_","上角","try","应用","tutorials","一次","red","图像","required","destroy","这个","imagesubscriber","中有","en","互相","话题","是","接下来","主要","shape","x","done","左上","工作","图形化","服务端","操作","速度","苹果","@","形象","—","utf","50","packages","消息","python3","命令行","有没有","还","ros2","降低","与","方法","关于","添加","布尔","180","90","或者","了","中","话","y","应答","关注","硬件","物体","参数","cnt","drawcontours","显示","看上","说明","居","5","三个","标准接口","in","每","造","重点","转换","角度","__","三原","字符串","image","加","两","广泛","转到第","node","exec","坐标","研究","继续","mask","）","节点","程序","{","humble","对应","三种","请求","-","while","符合","减少","但","入口","转化","!","相互","计算","boundingrect","info","设计","member","一起","求和","txt","还有","将要","长度","imgmsg","as","这","depend","如下","打开","to","检测","org",":","最终","imshow","日志","开始","像素点","用来","findcontours","对象","看","无论是","action","查询","各种","的","随处可见","circle","加法","failed","示例","勾勒","callback","一","都","主程序","一些","必须","每隔","数","像素","角速度","运动","第三个","后","包中","常见","show","objectclient","轮子","关闭","初始","传输","循环","者","机器人","数据","实现","形象化","；","多","服务器","摄像","客户","rosidl","初始化","receiving","像头","usr","让","frame","通过","这里","交流","150","驱动","进入","什么","将","找到","就是","wait","数据结构","里","课程","g","单向","sum","detect","group","给","编译","cvtcolor","创建","肯定","函数","if","interfaces","甚至","回调","发布者","retr","hsv","链接","package","ok","开发","键盘","msgs","讲解","cv2","可能","sec","包","服务","路径","二值化","电脑","旋转","xy","分别","某个","主","作者","一个","class","机制","是否","涵盖","获取","机器","彼此","位","几个","到底","timeout","bool","查看","我们","组成","/","32","还是","无论","。","的话","文件夹","值","等","打印","库","np","of","原色","命令","高","*","整型","find","server","？","执行",">","只","转到","0","阈值","到","每个","此时","插座","接下","海龟","bridge","data","等等","看到","py","输出","个人","build","pub","看看","点画","要","出去","一句",",","objecty","get","不用","micro","result","类似","得到","精髓","=","n","通信接口","目标","列表","一种","once","模块","target","不管","把","成","hierarchy","过程","订阅","topic","这些","share","进度","哪些","通信","有机","名","w","from","listener","颜色","cam","用到","”","break","图像处理","编写程序","以及","衍生","not","ros","效果","无关","标准","方便","---","object","一边","红色","两者","封装","根据","python","数值","插头","learning","b","信息","会","分成","guyuehome","定义","“","控制","define","上限","数组","init","做成","可以","第二个","opencv","upper","waitkey","转","numpy","没有","xml","bgr","chain","由于","小海龟","typec","一帧","return","而是","自己","对","很","案例","两个","概念","else","呢","logger","d","cmakelists","固定","2","coding","下来","关系","self","int64","exe","类","'","常用","状态","publish","布尔值","化成","目的","好奇","在","自定","none","形状","联系","a","，","软件","才能","30","int","video","字符","完全","array","img","generators","<","super","except","上边","选项","之为","]","图形","销毁","\\","#","、","建立","如何","再","以上","自定义","位置","about","后续","这样","系统","大家",".","反馈","线速度","下","内容","理解","现在","队列","种","件夹","等待","面积","single","available","软件开发","waiting","人","position","他们","有","和","由","关心","一下","c++","为","传递","从","相机","第三","输入","1","10","三原色","保证","包含","及","直接","自动","重复","并且","就","cv","invalid","com","generate","color","换成","msg","噪声","想","import","$","上去","举个","众多","可见","[","runtime"],"title":"**通信接口**","title_tokens":["通信接口","*","通信","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_1","text":"在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。","text_tokens":["通信接口","多","人","更","或者","让","重要","而是","中","不是","两个","交流","的","？","服务","概念","好","通信","呢","什么","用到","动作","传递","都","学习","一个","就是","结构","话题","是","ros","数据","标准","后续","自语","系统","个人","将要","大家","给","自言自语","在","并","这","—","接口","你来我往"," ","我们","会","，","定义","内容","还是","理解","无论","。","为了","甚至","可以"],"title":"通信接口","title_tokens":["通信接口","通信","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_2","text":"接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。","text_tokens":["通信接口","传输数据","开始","像素点","摄像头","一种","生活","讲","输入输出","模块","把","更","无论是","像是","上","这些","诞生","领域","更为","的","随处可见","好","通信","配置","包","使用","都","编写程序","主程序","一些","例子","发布","必须","所以","编程","像素","各个","ros","指令","最为","运动","标准","角速度","时候","约束","常见","调用函数","两者","程序模块","匹配","插头","准确","b","时","定义","传输","控制","机器人","数据","解析","结果","看上去","实现","各个领域","形象化","可以","；","多","连接","摄像","类似","像头","让","应用","typec","一次","通过","自己","很","图像","两个","概念","驱动","呢","什么","这个","固定","正常","就是","那","g","关系","是","话题","进行","主要","常用","提供","代码","工作","图形化","速度","目的","给","运行","在","形象","肯定","形状","函数","什么样","，","软件","才能","随处","usb","完全","关于","回到","它","开发","了","键盘","之为","中","图形","话","具体","、","建立","服务","关注","硬件","电脑","得","如何","参数","反正","一个","编写","看上","机制","安装","每","机器","彼此","包装","系统","出来","大家","反馈","线速度","只有","高效","我们","组成","三原","内容","还是","无论","。","加","广泛","值","称之为","所在","软件开发","等","节点","程序","原色","他们","有","和","由","也","？","比如","-","关心","知道","符合","但","结构","到","相互","每个","相机","插座","输入","三原色","等等","一起","却是","输出","直接","并且","就","这","要","手机","接口","一句","调用"," ","只要","上去","举个","不用","micro","可见","r","精髓"],"title":"接口的定义","title_tokens":["定义","接口","的"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#ros","text":"接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。","text_tokens":["目标","别人","一种","便于","节点","程序","让","依赖","三种","有","通过","各种","也","的","服务","、","通信","有机","可以","分别","减少","动作","使用","就是","机制","到","之间","是","话题","核心","ros","常用","每","代码","方便","造","一起","重复","这","接口","联系"," ","我们","轮子","，","定义","才能","。","种","降低"],"title":"ROS通信接口","title_tokens":["通信接口","通信","接口","ros"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_3","text":"为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。","text_tokens":["通信接口","目标","开始","部分","用来","一种","中间","过程","action","这些","64","的","进度","通信","加法","”","动作","使用","每隔","数","编程","ros","运动","无关","---","一边","python","数值","生成","b","区分","会","分成","定义","传输","“","机器人","数据","数组","结果","做成","可以","小海","描述","需要","度","转","由于","让","小海龟","一帧","通过","这里","两个","什么","这个","周期","将","学习","数据结构","里","单向","int64","话题","是","sum","x","状态","布尔值","编译","完成","在","a","，","30","20","还","就行","布尔","90","了","1s","中","y","服务","、","不同","应答","旋转","另外","分别","体","一个","int32","机制","是否","三个","每","位","机器","之前",".","反馈","bool","我们","32","还是","为了","。","两","转到第","文件","坐标","等","二维","节点","对应","请求","整型","和","表示","比如","一下","只","c++","知道","语言","转到","结构","到","此时","设计","海龟","10","保证","包含","看到","求和","还有","自动","接口","功能"," ","msg","srv","最终","当前"],"title":"语言无关","title_tokens":["无关","语言"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_4","text":"大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。","text_tokens":["文件","了","share","中","可能","？","的","哪些","路径","呢","找到","安装","涵盖","ros","标准","系统","给","大家","看看","好奇","在","几个","到底","接口","打开","我们","定义","，","众多","。","件夹","文件夹","可以"],"title":"标准接口","title_tokens":["标准接口","标准","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_5","text":"了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。","text_tokens":["第二个","通信接口","研究","目标","收到","需要","发送","例程","第一","对象","节点","视觉","二个","了","查询","请求","有","讲解","中","图像","的","概念","如何","再","通信","服务","驱动","第二","识别","第一个","使用","一个","编写","以及","从","课程","发布","相机","下来","第三","来","进行","接下来","接下","三个","话题","是","提供","位置","第三个","代码","机器","时候","之前","这样","服务端","封装","角度","在","回顾","就","接口"," ","下","了解","我们","，","定义","。","实现","可以"],"title":"案例一：服务接口的定义与使用","title_tokens":["案例","与","接口","的","服务","：","定义","一","使用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_6","text":"在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ...","text_tokens":["目标","部分","例程","true","过程","的","通信","配置","使用","指令","后","---","根据","接口定义","生成","learning","会","定义","\"","需要","}","rosidl","_","xml","让","依赖","一次","两个","required","cmakelists","这个","中有","是","代码","x","group","服务端","编译","完成","在","interfaces","，","project","packages","还",")","default","generators","添加","代码生成","<","package","上边","了","选项","编译器","中","interface","y","服务","#","、","包","：","不同","...","int32","name","获取","位置",".","反馈","bool","我们","/","。","的话","exec","坐标","文件","{","of","find","表示","也",">","语言","为","member","getobjectposition","txt","build","自动","就","depend","generate","接口","功能","("," ","get","$","srv","runtime"],"title":"接口定义","title_tokens":["接口定义","接口","定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_7","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["在","中","来","接口","的","方法","再","我们","下","看","代码","。","重点","使用"],"title":"程序调用","title_tokens":["调用","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_8","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["目标","result","once","target","对象","true","的","识别","failed","bin","from","示例","break","shutdown","request","not","main","object","python","learning","objectclient","guyuehome","关闭","定义","初始","init","for","\"","service","rclpy","初始化","spin","args","_","usr","send","try","destroy","create","else","logger","d","%","wait","coding","self","类","'","进行","x","done","@","自定","none","创建","utf","if","，","python3","ros2",")","client","super","ok","except","interface","sec","销毁","\\","y","#","服务","应答","again","async","...","自定义","e","future","作者","class","说明","居","name","www","call","位置",".","并","1.0","父类","exception","__","timeout","/","node","等待","available","waiting","position","节点","库","of","请求","*","response","-","while","!","info","getobjectposition","py","8","as","com","接口","(",","," ","env","import","def","get","srv",":","古月","r","=","n"],"title":"客户端接口调用","title_tokens":["客户","调用","接口","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_9","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["日志","目标","范围","spin","findcontours","模型","target","对象","true","hierarchy","订阅","inrange","h","raw","的","类型","识别","circle","continue","名","w","bin","from","listener","示例","颜色","勾勒","callback","list","图像处理","使用","shutdown","一些","request","像素","ros","后","效果","main","object","sensor","args","红色","255","数值","python","learning","信息","guyuehome","关闭","定义","初始","（","下限","循环","上限","者","数据","imshow","init","for","opencv","\"","服务器","service","upper","接口类型","退出","rclpy","cvbridge","初始化","务器","处理","_","numpy","waitkey","用于","usr","bgr","chain","上角","bgr8","frame","return","red","对","图像","destroy","150","提示","create","else","logger","进入","d","%","左上角","轮廓","去除","将","转化成","imagesubscriber","2","coding","互相","self","话题","提供","类","'","detect","shape","进行","x","左上","化成","苹果","cvtcolor","@","自定","创建","none","utf","函数","if","，","int","50","消息","python3","ros2",")","回调","video","sub","收到","与","+","array","img","retr","<","hsv","180","90","super","msgs","cv2","]","中","interface","销毁","\\","y","#","服务","、","二值化","contours","太小","物体","xy","自定义","cnt","主","作者","drawcontours","objectx","一个","class","显示","说明","居","name","www","5","in","已经","接口类","出来",".","转换","反馈","并","父类","__","已","/","lower","image","队列","node","等待","面积","坐标","128","所在","mask","中心","）","position","节点","库","np","approx","高","请求","command","*","server","和","response","-","执行","bgr2hsv","receiving","为","入口","0","宽","阈值","转化","!","从","计算","boundingrect","info","1","bridge","10","及","data","getobjectposition","py","输出","cv","长度","imgmsg","点画","8","as","invalid","com","subscription","接口","color","("," ","env","msg",",","import","def","get","objecty","噪声","to","srv","检测",":","古月","得到","[","=","n"],"title":"服务端接口调用","title_tokens":["服务","服务端","调用","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_10","text":"话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。","text_tokens":["通信接口","中来","目标","继续","需要","人","不管","把","没有","视觉","案例","也","的","服务","识别","通信","周期","从","发布","衍生","话题","是","位置","机器","之前","接口","换成","我们","想","定义","，","。","类似","有没有"],"title":"案例二：话题接口的定义与使用","title_tokens":["案例","与","接口","的","话题","：","定义","二","使用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_11","text":"现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub","text_tokens":["第二个","；","目标","sub","需要","打印","第一","节点","成","_","视觉","希望","二个","订阅","topic","谁","启动","图像","中","interface","的","识别","驱动","：","第二","以上","分别","cam","这个","第一个","将","使用","一个","此时","发布","相机","第三","到","来","exe","三个","话题","是","ros","位置","第三个","标准","object","终端","pub","运行","封装","就","并","出去","功能","learning"," ","会","我们","，","定义","现在","$","image","消息","。","数据","run","usb","node","ros2"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_12","text":"在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ...","text_tokens":["目标","例程","过程","objectposition","坐标值","的","通信","配置","使用","标值","后","根据","接口定义","生成","learning","定义","\"","描述","需要","}","rosidl","_","让","required","cmakelists","这个","话题","是","进行","代码","x","编译","完成","在","interfaces","，","project","消息","还",")","default","generators","package","了","选项","编译器","中","interface","y","服务","#","、","包","：","不同","...","一个","int32","name","位置",".","我们","/","内容","。","坐标","{","find","表示","语言","txt","自动","generate","接口","功能","("," ","msg","$"],"title":"接口定义","title_tokens":["接口定义","接口","定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_13","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["在","中","来","接口","的","方法","再","我们","下","看","代码","。","重点","使用"],"title":"程序调用","title_tokens":["调用","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_14","text":"learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["日志","目标","范围","spin","findcontours","模型","对象","hierarchy","objectposition","topic","订阅","inrange","h","raw","的","类型","circle","continue","名","w","bin","from","listener","示例","颜色","勾勒","callback","list","图像处理","使用","shutdown","一些","发布","像素","ros","后","效果","main","object","sensor","args","红色","255","数值","python","learning","信息","guyuehome","关闭","定义","初始","（","下限","循环","上限","者","imshow","init","for","opencv","\"","upper","退出","rclpy","cvbridge","初始化","waitkey","处理","_","numpy","receiving","用于","usr","bgr","chain","上角","bgr8","frame","red","图像","destroy","150","提示","create","logger","进入","左上角","轮廓","去除","将","转化成","imagesubscriber","2","coding","互相","self","话题","类","'","进行","detect","shape","x","左上","publish","化成","苹果","cvtcolor","@","自定","创建","none","utf","函数","if","，","int","50","消息","python3","ros2",")","回调","video","sub","与","+","array","img","发布者","retr","<","hsv","180","90","super","msgs","publisher","cv2","]","中","interface","销毁","y","#","、","二值化","contours","太小","xy","自定义","cnt","主","作者","drawcontours","objectx","一个","class","显示","说明","居","name","www","5","in","位置","出来",".","转换","并","父类","__","已","/","lower","image","队列","node","等待","面积","坐标","128","所在","mask","中心","）","position","节点","库","np","approx","高","*","和","-","bgr2hsv","为","入口","0","宽","阈值","转化","!","从","webcam","计算","boundingrect","info","1","bridge","10","及","data","py","输出","pub","cv","长度","imgmsg","点画","8","as","com","subscription","接口","color","("," ","env","msg",",","import","def","objecty","噪声","get","to","检测",":","古月","得到","[","="],"title":"发布者接口调用","title_tokens":["调用","发布","接口","发布者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_15","text":"learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["日志","目标","target","对象","订阅","topic","objectposition","std","的","类型","名","bin","from","listener","示例","callback","shutdown","后","main","object","python","learning","信息","guyuehome","关闭","定义","初始","（","循环","者","数据","init","\"","subscribernode","退出","rclpy","初始化","spin","args","处理","_","usr","对","destroy","提示","create","logger","d","%","coding","self","话题","类","'","进行","x","@","自定","创建","none","utf","函数","，","消息","python3","ros2",")","回调","收到","sub","字符","super","msgs","interface","销毁","\\","y","#","、","自定义","主","作者","一个","class","说明","居","name","www","位置",".","并","父类","__","/","字符串","队列","node","等待","position","节点","库","*","-","执行","入口","!","info","10","py","输出","长度","8","com","subscription","接口","(",","," ","env","msg","import","def","get",":","古月","string","="],"title":"订阅者接口调用","title_tokens":["订阅","调用","者","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_16","text":"接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义","text_tokens":["列表","详细","<","_","package","命令","interface","的","#","：",">","某个","list","name","常用","操作","包中","系统","show","接口定义","接口","如下","功能","查看"," ","定义","$","ros2"],"title":"接口命令行操作","title_tokens":["命令行","命令","接口","操作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_17","text":"https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["html","single","package","humble","tutorials","interface","-","and","en","ros","about",".","docs","https"," ","interfaces","/","define","concepts","use","org",":"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/","text":"动作 机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。 通信模型 举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。 客户端/服务器模型 动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。 一对多通信 和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。 同步通信 既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。 由服务和话题合成 大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。 案例一：小海龟的动作 我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback 案例二：机器人画圆 如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。 运行效果 启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。 接口定义 例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是动作的目标，enable为true时，表示开始运动； 第二块是动作的执行结果，finish为true，表示动作执行完成； 第三块是动作的周期反馈，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ... 通信模型 通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。 服务端代码解析 learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], }, 客户端代码解析 learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], }, 动作命令行操作 动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["feedback","movecircleactionserver","部分","例程","true","上","类型","配置","add","读取","动作","list","例子","shutdown","movecircleactionclient","time","指令","应带","接口定义","docs","同步","时","解析","rejected","for","小海","\"","需要","接口类型","}","度","rclpy","便于","args","spin","退出","需求","希望","send","不是","当中","指定","moving","第二","%","周期","按照","那","来","进行","代码","干什么","运行","完成","https","行为","是不是","服务器端","project","run","20","结束",")","过","收到","html","随时","default","一段时间","client","第一","特性","二","teleop","1s","启动","编译器","interface","具体","满足","不同","：","async","得","...","另外","圆周","future","编写","int32","name","点","www","一点","只能","console","之前","整个","接口类","并","父类","只有","scripts","取消","被","完整","文件","key","表示","也","response","比如","知道","语言","能","终端","动","8","功能","接口","move","调用"," ","(","env","真器","def","底层","数据类型","导航","当前","仔细","模型","仅仅","多少度","finish","更为","识别","好","bin","像","使用","发布","先","编程","main","1.57","handle","生成","客户端","顺利","圈","介绍","哪里","一套","（","结果","毕竟","使","发送","参考","务器","处理","_","--","应用","tutorials","一次","sleep","required","destroy","时间","多个","这个","画圆","还会","en","实时","是","话题","接下来","又","进度条","theta","turtlesim","管理","以下","done","操作","服务端","@","—","utf","告诉","消息","python3","命令行","智能","有没有","还","ros2","方法","流程","写","方式","了","中","处理函数","说明","居","三个","in","含义","遥控","每","understanding","但是","角度","__","分析","不仅","node","坐标","其实","）","名字","节点","程序","{","仿真器","humble","rotateabsolute","请求","圆周运动","entry","模拟","-","动图","但","入口","通信模型","!","info","送给","抓取","一起","txt","这","如下","打开","org",":","最终","日志","开始","成功","看","一块","对象","action","三块","请","的","turtle1","circle","竟然","示例","callback","一段","一","都","每隔","理","publishing","第二块","运动","后","就此","设置","针对","其","关闭","初始","循环","者","机器人","数据","隐藏","第一块","实现","；","多","服务器","客户","rosidl","初始化","发现","usr","让","通过","什么","拒绝","装","应用层","就是","wait","actions","编译","创建","肯定","负责","函数","if","interfaces","起来","秘密","眼前","360","回调","姿态","发布者","链接","package","ok","键盘","可能","服务","包","加入","旋转","分别","某个","主","相比","作者","一个","class","机制","是否","场景","0.5","获取","机器","一点一点","异步","i","到底","accepted","查看","bool","我们","/","不","转圈","。","相对","等","假设","送货","库","复杂","没错","臂","控","命令","*","server","虽然","就此结束","find","？","执行","简单",">","之后","0","turtle","到","接下","海龟","data","range","看到","py","输出","actionclient","points",",","直到","get","仿真","试一试","result","类似","=","通信接口","目标","发出","第三块","列表","当","一种","actionserver","模块","把","过程","订阅","这些","进度","拒绝执行","type","通信","名","from","用到","not","ros","效果","二块","标准","---","一边","goal","execute","较长","封装","根据","python","某一","learning","接收","enable","信息","会","guyuehome","定义","控制","不仅仅","init","可以","一对","转","没有","这么","小海龟","分拣","return","对","某","而是","很","案例","两个","概念","setup","呢","logger","d","转个","达到","cmakelists","原理","coding","下来","self","类","'","常用","state","清楚","状态","publish","目的","在","自定","none","所处","常常","，","才能","30","基于","movecircle","机械","generators","发送给","<","super","上边","选项","]","销毁","#","、","再","如何","自定义","succeed","加深","多少","如果","位置","这样","系统","大家",".","一样","反馈","absolute","合适","下","现在","理解","根本","背后","思路","等待","合成","rotate","实际","同时","既然","有","送餐","和","由","一下","received","为","从","第三","10","包含","直接","自动","就","com","generate","这种","msg","想","import","$","再用","举个","段时间","不会","古月","["],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_1","text":"机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。","text_tokens":["目标","被","完整","一种","需要","等","流程","仅仅","便于","名字","送货","这么","复杂","需求","上","键盘","分拣","应用","这些","对","中","送餐","很","也","的","识别","、","简单","满足","具体","通信","好","概念","另外","某个","用到","动作","这个","一个","就是","从","机制","那","场景","是","进行","ros","含义","遥控","运动","机器","管理","系统","目的","在","并","就","某一","功能","—","这种","行为"," ","我们","会","常常","，","理解","不仅仅","机器人","。","不仅","智能","实现","可以"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_2","text":"举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。","text_tokens":["发出","开始","把","多少度","过程","更为","进度","的","通信","像","一段","动作","使用","例子","每隔","指令","后","运动","信息","圈","哪里","机器人","可以","需要","发送","度","转","没有","让","不是","当中","时间","转个","装","是","进度条","完成","在","肯定","行为","告诉","，","才能","30","20","有没有","结束","眼前","还","360","随时","一段时间","ok","了","1s","、","再","得","旋转","一个","机制","多少","一点","如果","机器","这样","一点一点","并","反馈","到底","合适","我们","现在","不","根本","转圈","。","取消","假设","控","命令","表示","？","比如","执行","一下","之后","知道","到","10","就","这"," ","想","直到","举个","段时间","当前"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_3","text":"动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。","text_tokens":["收到","目标","开始","服务器","导航","坐标","姿态","当","客户","模型","发送","务器","同时","臂","过程","让","中","和","就此结束","可能","也","的","执行","服务","再","通信","之后","什么","达到","周期","这个","动作","使用","一个","实时","是","又","如果","运动","后","机器","状态","一边","抓取","干什么","整个","就此","动","就","反馈","客户端","所处"," ","信息","想","，","服务器端","控制","起来","机器人","。","类似","机械","当前","结束"],"title":"客户端/服务器模型","title_tokens":["服务器","客户端","客户","服务","模型","/","务器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_4","text":"和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。","text_tokens":["服务器","客户","发送","务器","命令","有","中","和","的","执行","服务","通信","多个","动作","都","一个","先","只能","运动","机器","但是","大家","完成","一样","客户端","只有","下","，","服务器端","才能","机器人","。","毕竟","可以"],"title":"一对多通信","title_tokens":["多","通信","一对"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_5","text":"既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。","text_tokens":["过","通信接口","文件","一种","过程","action","既然","有","中","也","的","通信","动作","使用","机制","那","是","进行","之前",".","反馈","同步","接口","我们","，","介绍","定义","。","数据"],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_6","text":"大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。","text_tokens":["收到","目标","服务器","仔细","当","一种","客户","发送","其实","模块","看","务器","发布者","没错","发现","过程","上边","订阅","应用","命令","请求","有","不是","两个","表示","也","的","和","服务","再","通信","竟然","动图","周期","动作","使用","一个","应用层","就是","机制","发布","还会","来","三个","是","话题","运动","应带","大家","反馈","客户端","是不是"," ","下","调用","会","时","，","服务器端","其","基于","秘密","。","者","底层","隐藏","实现"],"title":"由服务和话题合成","title_tokens":["和","由","服务","合成","话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_7","text":"我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback","text_tokens":["feedback","小海","\"","姿态","rotate","}","_","--","teleop","action","小海龟","仿真器","让","命令","send","rotateabsolute","对","启动","某","案例","key","指定","的","-","概念","turtle1","：","动作","加深","一","使用","turtle","按照","到","下来","info","接下来","接下","海龟","{","运动","theta","turtlesim","1.57","以下","goal","absolute"," ","我们","真器","，","/","仿真","再用","理解","控制","$","。","run",":","node","ros2","可以"],"title":"案例一：小海龟的动作","title_tokens":["案例","小海","的","：","海龟","动作","一","小海龟"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_8","text":"如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。","text_tokens":["服务器","方法","客户","假设","务器","实际","特性","希望","过程","让","有","而是","通过","中","虽然","和","请","？","的","服务","如何","好","通信","呢","转个","动作","但","使用","一个","下来","来","是","编程","话题","接下","接下来","代码","机器","一起","直接","针对","封装","在","并","就","接口","客户端"," ","我们","圈","，","一套","服务器端","不会","基于","。","试一试","机器人","实现"],"title":"案例二：机器人画圆","title_tokens":["案例","：","机器","二","机器人","画圆"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_9","text":"启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。","text_tokens":["目标","开始","服务器","客户","发送","度","client","务器","例程","_","实现","action","命令","一次","启动","server","和","两个","中","模拟","的","服务","一下","：","之后","分别","示例","这个","动作","原理","下来","接下来","接下","运动","每","机器","看到","终端","服务端","运行","完成","就","反馈","并","move","客户端","learning"," ","信息","我们","下","，","服务器端","$","背后","30","分析","run","机器人","。","最终","ros2","结束","可以"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_10","text":"例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是动作的目标，enable为true时，表示开始运动； 第二块是动作的执行结果，finish为true，表示动作执行完成； 第三块是动作的周期反馈，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ...","text_tokens":["目标","开始","部分","第三块","例程","成功","一块","true","action","过程","finish","三块","的","配置","动作","使用","指令","ros","第二块","运动","二块","标准","---","后","根据","接口定义","生成","learning","enable","时","定义","机器人","第一块","结果","；","\"","需要","}","rosidl","_","让","通过","不是","required","第二","cmakelists","周期","是","进行","state","代码","编译","完成","在","自定","interfaces","，","project","movecircle","还",")","default","第一","generators","package","选项","编译器","中","interface","#","包","不同","：","...","旋转","自定义","int32","是否","name","三个","位置","机器",".","角度","并","反馈","bool","我们","/","。","{","find","表示","执行","语言","为","到","第三","包含","txt","自动","generate","功能","接口","("," ","$","当前"],"title":"接口定义","title_tokens":["接口定义","接口","定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_11","text":"通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。","text_tokens":["目标","开始","服务器","客户","模型","发送","发送给","务器","写","例程","程序","和","的","服务","一下","通信","周期","动作","一","相比","一个","就是","通信模型","下来","理","送给","接下","接下来","话题","运动","后","机器","清楚","代码","之前","这样","较长","运行","并","反馈","客户端"," ","信息","我们","，","起来","控制","分析","机器人","。","思路","结束","相对"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_12","text":"learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["movecircleactionserver","目标","feedback","result","actionserver","成功","true","对象","action","finish","的","类型","circle","名","bin","from","配置","示例","callback","动作","shutdown","发布","time","publishing","运动","后","main","goal","execute","设置","handle","python","learning","信息","guyuehome","关闭","定义","初始","（","循环","init","结果","for","\"","服务器","需要","接口类型","退出","rclpy","初始化","务器","度","处理","_","args","spin","}","usr","让","return","sleep","destroy","setup","moving","logger","d","[","%","周期","coding","self","类","'","进行","state","代码","publish","服务端","编译","完成","@","自定","创建","负责","none","utf","函数","，","30","消息","movecircle","python3","ros2",")","回调","收到","360","super","选项","如下","]","interface","销毁","#","服务","、","包","加入","：","...","处理函数","圆周","自定义","succeed","points","主","作者","一个","class","编写","说明","居","name","点","www","in","0.5","console","接口类","系统",".","i","角度","反馈","并","父类","__","scripts","/","node","等待","最终","文件","）","节点","库","程序","{","圆周运动","*","server","entry","表示","-","执行","之后","知道","入口","0","!","从","到","info","range","py","8","com","move","接口","(","功能"," ","env",",","msg","import","def","get","打开",":","古月","当前","="],"title":"服务端代码解析","title_tokens":["解析","服务","服务端","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_13","text":"learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["feedback","目标","开始","日志","result","对象","true","action","finish","的","类型","拒绝执行","circle","名","bin","from","配置","示例","add","读取","callback","动作","shutdown","movecircleactionclient","not","运动","后","main","goal","设置","handle","python","learning","客户端","接收","enable","顺利","guyuehome","时","定义","初始","（","循环","关闭","机器人","数据","init","结果","rejected","for","\"","服务器","使","需要","客户","接口类型","发送","}","rclpy","初始化","务器","args","处理","_","spin","退出","usr","希望","send","让","return","destroy","setup","logger","d","%","周期","拒绝","wait","coding","self","类","'","进行","state","代码","done","编译","完成","@","自定","创建","none","utf","函数","if","，","服务器端","消息","movecircle","python3","ros2",")","回调","收到","client","super","方式","选项","如下","启动","]","interface","销毁","#","、","服务","async","包","加入","：","圆周","自定义","points","主","future","作者","一个","class","编写","说明","居","name","点","www","如果","获取","console","机器","接口类","异步","系统",".","反馈","并","父类","accepted","__","scripts","/","node","等待","最终","被","文件","）","节点","库","程序","{","请求","圆周运动","*","server","entry","response","-","执行","received","之后","知道","为","入口","!","能","info","py","输出","8","com","actionclient","接口","move","(","功能"," ","env",",","msg","import","def","get","打开",":","古月","[","="],"title":"客户端代码解析","title_tokens":["解析","客户","代码","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_14","text":"动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求","text_tokens":["列表","发送","<","_","action","send","命令","请求","的","类型","#","服务","type","：",">","动作","list","name","info","常用","data","操作","goal","如下","查看"," ","$","数据","数据类型","ros2"],"title":"动作命令行操作","title_tokens":["操作","命令行","命令","动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["docs","html","en","https","-","/","ros","actions","understanding","org",":","humble","tutorials","ros2","."],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/","text":"参数 话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。 通信模型 比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。 全局字典 在ROS系统中，参数是以全局字典的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。 可动态监控 在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。 案例一：小海龟例程中的参数 在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 参数列表 参数查询与修改 $ ros2 param describe turtlesim background_b $ ros2 param get turtlesim background_b $ ros2 param set turtlesim background_b 10 参数文件保存与加载 $ ros2 param dump turtlesim >> turtlesim.yaml $ ros2 param load turtlesim turtlesim.yaml 案例二：参数编程 接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。 运行效果 $ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle 代码解析 learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], }, 案例三：机器视觉应用 参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。 运行效果 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180 代码解析 learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["部分","范围","么","例程","h","raw","三","类型","yaml","配置","读取","后边","动作","list","shutdown","255","docs","解析","for","小海","\"","连接","需要","退出","度","rclpy","便于","args","spin","}","cvbridge","用于","不是","指定","提示","create","即可","%","左上角","周期","轮廓","去除","转化成","不如","来","进行","提供","代码","大大提高","变化","运行","完成","哪个","滑动","https","run","usb",")","html","sub","+","特性","视觉","二","那个","teleop","图像识别","不同","contours","：","太小","编写","问题","name","点","www","已经","很大","保存","console","号","整个","出来","并","父类","scripts","已","了解","某些","敏感","易用性","lower","文件","128","所在","中心","挺","格式","提高","approx","条","key","表示","也","比如","bgr2hsv","知道","分辨率","丰富","宽","parameter","共享","不少","new","形态","8","subscription","功能","接口","("," ","env","真器","def","timer","定时器","string","模型","访问","秒","inrange","麻烦","识别","比较","continue","s","bin","像","使用","先","编程","核心","integer","比较简单","main","sensor","时候","nodea","本","介绍","（","下限","发送","参考","bgr8","处理","_","上角","应用","tutorials","red","图像","destroy","易用","parameters","多个","这个","imagesubscriber","一两句","en","互相","话题","是","接下来","shape","turtlesim","x","参数值","左上","苹果","@","—","utf","其他","50","消息","python3","命令行","ros2","还","与","方法","写","180","以","90","方式","或者","了","提炼","中","y","关注","物体","参数","cnt","drawcontours","显示","说明","居","5","in","含义","就要","understanding","set","转换","__","分辨","默认值","配置文件","image","node","定时","全局变量","坐标","继续","mask","）","区域","节点","程序","{","仿真器","parameternode","humble","三种","立刻","entry","-","入口","转化","通信模型","!","计算","boundingrect","动态","info","送给","长度","imgmsg","as","这","如下","作用","高级","打开","to","最新","检测","org",":","imshow","dump","日志","开始","findcontours","对象","看","查询","declare","的","circle","输入框","示例","勾勒","callback","一","都","一些","端口","mbot","像素","后","设置","影响","关闭","初始","传输","循环","者","机器人","数据","光线","实现","名称","参数设置","初始化","receiving","usr","让","frame","通过","辨率","150","驱动","进入","什么","将","就是","detect","编译","cvtcolor","创建","函数","if","叫做","起来","回调","曝光","跟","单位","retr","环境","然后","非常","hsv","链接","msgs","cv2","可能","value","服务","包","加入","二值化","加载","分别","xy","主","作者","一个","class","每次","机制","键和值","是否","真实","获取","机器","大大","几个","我们","组成","/","不","。","值","等","background","打印","robot","体验","库","默认","np","命令","高","*","考虑","？","describe","执行","简单",">","变量","0","阈值","turtle","到","接下","海龟","bridge","两句","data","等等","py","输出","编码","点画","param","points",",","重新","get","仿真","nodeb","类似","得到","=","列表","目标","一种","一两","把","成","hierarchy","过程","订阅","这些","type","通信","名","w","from","listener","颜色","cam","用到","图像处理","ros","效果","object","红色","数值","python","learning","b","信息","会","guyuehome","说干就干","上限","init","可以","opencv","节","upper","waitkey","numpy","优化","bgr","chain","小海龟","某","对","案例","setup","logger","呢","d","传输方式","2","coding","修改","下来","self","exe","类","'","常用","清楚","熟悉","化成","很多","美颜","在","none","，","int","video","改变","all","array","load","img","发送给","<","super","选项","]","销毁","#","、","再","如何","字典","键值","多少","如果","来看","系统","大家",".","一样","办法","下","可","理解","队列","等待","面积","叫","从而","合成","有","和","由","一下","c++","为","从","相机","hello","存在","输入","1","10","及","cv","就","监控","com","color","msg","噪声","import","$","古月","全局","["],"title":"**参数**","title_tokens":["*","参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_1","text":"话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。","text_tokens":["全局变量","一种","节","便于","节点","程序","方式","三种","中","的","服务","、","再","通信","c++","变量","知道","参数","多个","字典","动作","传输方式","机制","是否","来","共享","话题","编程","是","ros","常用","已经","清楚","机器","系统","本","大家","运行","在","这","—"," ","了解","我们","某些","，","介绍","传输","不","。","数据","机器人","类似","全局","可以"],"title":"参数","title_tokens":["参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_2","text":"比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。","text_tokens":["部分","过程","这些","的","识别","输入框","配置","像","使用","都","一些","端口","核心","效果","后","时候","nodea","设置","影响","会","可以","连接","需要","参数设置","度","通过","辨率","图像","驱动","什么","就是","是","进行","很多","美颜","在","哪个","滑动","，","usb","改变","曝光","视觉","那个","或者","图像识别","中","关注","不同","参数","分别","问题","多少","是否","很大","机器","整个","一样","我们","分辨","配置文件","。","面积","文件","区域","节点","格式","程序","条","有","和","考虑","也","比如","执行","分辨率","阈值","到","相机","输入","等等","编码","就","这","功能","作用"," ","nodeb"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_3","text":"在ROS系统中，参数是以全局字典的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。","text_tokens":["名称","跟","合成","等","访问","然后","以","或者","了","有","中","和","由","？","的","也","名","即可","字典","参数","什么","像","后边","为","这个","使用","一个","就是","键和值","键值","存在","真实","是","编程","ros","号","形态","参数值","时候","系统","一样","在","就","数值","叫做"," ","组成","我们","，","理解","。","全局","叫","可以"],"title":"全局字典","title_tokens":["字典","全局"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_4","text":"在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。","text_tokens":["从而","访问","节点","特性","非常","了","有","某","对","立刻","中","可能","也","的","比如","参数","知道","用到","丰富","都","一个","修改","共享","进行","编程","如果","获取","大家","在","数值","这","办法"," ","高级","其他","会","，","最新","。","ros2","可以"],"title":"可动态监控","title_tokens":["可","动态","监控"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_5","text":"在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["小海","方法","例程","_","teleop","小海龟","仿真器","了","命令","通过","中","和","key","也","的","参数","这个","一","使用","turtle","提供","海龟","不少","含义","turtlesim","熟悉","在"," ","下","我们","真器","，","起来","仿真","$","。","run","命令行","ros2","node"],"title":"案例一：小海龟例程中的参数","title_tokens":["中","案例","小海","的","：","海龟","例程","参数","一","小海龟"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_6","text":"","text_tokens":[],"title":"参数列表","title_tokens":["参数","列表"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_7","text":"$ ros2 param describe turtlesim background_b $ ros2 param get turtlesim background_b $ ros2 param set turtlesim background_b 10","text_tokens":["param","describe","b"," ","background","get","$","_","10","turtlesim","set","ros2"],"title":"参数查询与修改","title_tokens":["参数","查询","与","修改"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_8","text":"$ ros2 param dump turtlesim >> turtlesim.yaml $ ros2 param load turtlesim turtlesim.yaml","text_tokens":["param"," ","yaml","load",">","$","turtlesim","dump","ros2","."],"title":"参数文件保存与加载","title_tokens":["文件","与","保存","参数","加载"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_9","text":"接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。","text_tokens":["开始","方法","一两","写","体验","程序","了","中","和","的","比较","简单","一下","参数","读取","使用","都","一两句","下来","来","先","接下来","接下","比较简单","两句","就要","设置","在","就","这","几个","函数","我们","，","。","实现","可以"],"title":"案例二：参数编程","title_tokens":["案例","编程","：","参数","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_10","text":"$ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle","text_tokens":["declare","param","parameter","learning","name"," ","robot","$","_","run","set","ros2","turtle"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_11","text":"learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], },","text_tokens":["日志","列表","秒","对象","declare","的","type","s","bin","from","配置","示例","读取","callback","shutdown","mbot","后","main","设置","python","数值","learning","信息","guyuehome","关闭","初始","（","循环","init","\"","需要","发送","退出","rclpy","初始化","spin","args","}","_","usr","让","古月","destroy","指定","create","setup","logger","parameters","%","周期","将","2","coding","修改","self","类","'","进行","代码","参数值","编译","完成","@","创建","none","utf","函数","，","python3","ros2",")","回调","all","单位","发送给","super","选项","]","中","销毁","value","#","、","包","加入","：","参数","points","主","作者","一个","class","编写","说明","居","name","点","www","console","系统","set",".","并","父类","__","scripts","/","默认值","node","等待","定时","值","文件","打印","）","robot","节点","库","程序","默认","{","parameternode","*","entry","-","执行","知道","为","入口","!","从","到","hello","parameter","info","送给","new","py","输出","8","com","param","接口","功能","(","如下"," ","env",",","打开","import","def","get","重新","timer",":","定时器","string","[","="],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_12","text":"参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。","text_tokens":["继续","么","挺","看","环境","把","优化","视觉","成","提高","过程","程序","了","应用","提炼","对","中","不是","？","的","也","识别","如何","比较","不同","麻烦","易用","呢","物体","再","参数","示例","使用","阈值","每次","不如","修改","先","动态","是","已经","效果","机器","代码","大大","来看","大大提高","设置","大家","运行","变化","在","就"," ","下","会","敏感","我们","，","易用性","说干就干","机器人","。","光线","还","可以"],"title":"案例三：机器视觉应用","title_tokens":["案例","三","：","机器","视觉","应用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_13","text":"$ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180","text_tokens":["upper","_","180","h","red","cam","parameter","exe","detect","object","set","param","learning"," ","$","run","usb","node","ros2"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_14","text":"learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], },","text_tokens":["日志","目标","范围","spin","findcontours","模型","对象","hierarchy","订阅","inrange","h","raw","declare","的","类型","识别","circle","continue","名","w","bin","from","颜色","示例","listener","读取","callback","list","勾勒","配置","图像处理","使用","shutdown","一些","像素","integer","ros","后","效果","main","object","sensor","args","设置","红色","255","数值","python","learning","信息","guyuehome","关闭","初始","（","循环","下限","上限","者","imshow","init","for","opencv","\"","upper","需要","退出","rclpy","cvbridge","初始化","waitkey","处理","_","numpy","receiving","用于","usr","bgr","chain","上角","让","bgr8","frame","red","通过","图像","destroy","150","提示","create","setup","logger","d","进入","%","左上角","轮廓","去除","将","转化成","imagesubscriber","2","coding","互相","self","话题","类","'","进行","detect","shape","功能","代码","x","左上","参数值","化成","苹果","编译","完成","cvtcolor","@","创建","none","utf","函数","if","，","int","50","消息","python3","ros2",")","回调","video","sub","与","+","array","img","retr","<","hsv","180","90","super","msgs","选项","如下","cv2","]","中","销毁","value","y","#","、","二值化","contours","太小","包","加入","：","参数","cnt","xy","points","主","作者","drawcontours","显示","一个","class","编写","}","说明","居","name","点","www","5","in","console","系统","出来",".","转换","并","父类","__","scripts","已","/","lower","image","队列","node","等待","面积","坐标","文件","128","所在","mask","打印","中心","）","节点","库","程序","np","{","approx","高","*","和","entry","表示","-","bgr2hsv","知道","为","入口","0","宽","阈值","转化","!","从","到","计算","parameter","boundingrect","info","1","bridge","10","及","data","py","输出","cv","长度","imgmsg","点画","as","8","com","param","接口","subscription","(","color"," ","env","msg",",","import","def","get","噪声","to","打开","检测",":","古月","得到","[","="],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["docs","html","en","https","-","/","ros","parameters","understanding","org",":","humble","tutorials","ros2","."],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/","text":"分布式通信 智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统，可以实现多计算平台上的任务分配。 分布式通信 什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。 分布式网络搭建 除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。 树莓派配置 在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。 装系统 我们先要给树莓派装系统，这里我们选择的是Ubuntu Mate针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/ 装ROS2 在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。 编译代码 将我们课程的代码也下载到树莓派中，进行编译。 远程桌面 如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728 分布式数据传输 树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 * 如使用虚拟机，请将虚拟机网络修改为桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。 分布式网络分组 没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。 案例一：小海龟分布式控制 分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动。 $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端 案例二：话题分布式通信 我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串。 $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端 案例三：服务分布式通信 话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能。 案例四：机器视觉分布式应用 以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体。 $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。 参考链接 https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["小","讲","例程","cpp","上","局域网","三","卡中","依然","配置","一切","动作","试试","全都","讲过","原本","docs","concepts","简而言之","小海","连接","算机","虚拟","需要","放","体积","希望","卡顿","不是","派端","即可","学习","互通","nodes","来","进行","提供","代码","你","笔记本","变化","运行","完成","https","先要","run","your","usb","资源","过","html","sub","csdn","视觉","二","teleop","启动","鼠标","几乎","具体","不同","：","另外","编写","问题","pc","安装","桥接","已经","友好","之前","分配","并","不在话下","经常","烧写","挺","key","也","比如","布式","数据传输","发生","采用","没","webcam","结构","于是","无法","派装","个","功能","只要"," ","真器","做","摄像头","访问","更强","比较","识别","好","像","使用","感觉","发布","先","之间","传感器","客户端","顺利","download","看上去","毕竟","分组","则","小组","参考","平台","务器","处理","_","应用","图像","world","反过","多个","talker","中有","en","同一个","实时","是","接下来","选择","主要","话题","任务","turtlesim","操作","据传","—","互联","不在","article","命令行","智能","还","网络","ros2","消耗","流程","方法","魅力","有点","了","或者","中","物体","显示","看上","测试","确保","每","派里","步骤","镜像","作为","字符串","node","export","继续","客户端程序","节点","程序","仿真器","52785580","humble","模拟","事情","传感","-","反过来","远程","相互","下载","计算","真有","设计","求和","details","这","如下","除了","网上","分布式系统","mate","org",":","端的","分布","成功","如","各种","请","电机","的","加法","性能","一","桌面","都","一些","所","运动","后","端","针对","处于","适合","传输","ubuntu","者","机器人","数据","实现","神奇","多","服务器","此外","客户","摄像","基本","像头","放置","经典","通过","这里","驱动","什么","系列","用","遇到","似乎","变得","将","装","就是","课程","里","计算机","采集","给","编译","感器","id","起来","发布者","环境","非常","链接","然后","开发","键盘","压力","blog","可能","派","搭建","服务","加入","款","电脑","122599728","net","支持","一个","机制","之外","是否","流畅","机器","一致","笔记本电脑","不够","岂","我们","组成","/","不","典型","sd","拆解","。","的话","domain","还是","之一","任务分配","等","轻松","复杂","命令","能力","*","？","放在",">","只","之后","带领","turtle","到","接下","海龟","出现","py","pub","一句","显示器","仿真","频繁","类似","=","qq","远程桌面","四","一系列","顺利实现","订阅","topic","这些","如此","啦","通信","listener","cam","用到","ros","demo","效果","方便","虚拟机","红色","两者","小型","learning","较","信息","会","控制","发给","框架","可以","基本一致","没有","这么","小海龟","而是","而言","案例","两个","呢","一系","控制器","计算能力","修改","下来","exe","bashrc","很多","在","分布式应用","，","才能","资料","树莓","局域","字符","完全","过来","<","模式","上边","不过","分布式","情况","#","、","建立","再","以上","带来","感受","任何","如果","局域网络","about","这样","我","系统","大家",".","一样","下","繁多","叫","减轻","实际","笔记","他们","有","和","由","一下","服务器程序","安排","为","同一","helloworld","hello","直接","并且","就","监控","这种","整体","想","位于","$","上去","打通"],"title":"**分布式通信**","title_tokens":["*","分布","分布式","通信","布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_1","text":"智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统，可以实现多计算平台上的任务分配。","text_tokens":["分布","多","任务分配","算机","等","平台","处理","上","这些","能力","卡顿","压力","中","不是","？","的","情况","分布式","、","放在","布式","多个","遇到","将","计算能力","一个","就是","里","到","计算","计算机","如果","任务","机器","全都","出现","分配","不够","岂","系统","运行","这","功能"," ","会","，","繁多","拆解","机器人","分布式系统","。","经常","智能","实现","减轻","可以"],"title":"分布式通信","title_tokens":["分布","通信","分布式","布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_2","text":"什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。","text_tokens":["分布","小","讲","上","更强","这些","各种","电机","的","比较","好","通信","配置","性能","一","都","之间","ros","运动","方便","传感器","原本","较","信息","适合","传输","控制","框架","机器人","数据","看上去","毕竟","实现","可以","多","算机","此外","需要","平台","放","处理","体积","应用","两个","驱动","什么","控制器","将","就是","下来","计算机","是","接下来","主要","任务","笔记本","变化","运行","在","感器","，","起来","还","树莓","过","资源","消耗","完全","环境","非常","视觉","魅力","上边","了","有点","开发","压力","中","可能","派","分布式","不过","不同","款","电脑","另外","一个","看上","感受","任何","已经","每","机器","之前","分配","笔记本电脑","系统","派里","大家","下","我们","组成","作为","不","典型","。","减轻","叫","之一","等","挺","节点","笔记","复杂","有","和","由","？","也","比如","传感","放在","布式","只","远程","为","采用","带领","结构","到","计算","相互","于是","设计","接下","并且","就","这","监控","功能","这种"," ","位于","上去","分布式系统","做"],"title":"分布式通信","title_tokens":["分布","通信","分布式","布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_3","text":"除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。","text_tokens":["平台","笔记","上","了","放置","模拟","派","的","电脑","另外","控制器","使用","一个","之外","计算","选择","机器","我","笔记本电脑","笔记本","在","除了","我们","，","控制","机器人","。","树莓"],"title":"分布式网络搭建","title_tokens":["分布","搭建","分布式","布式","网络"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_4","text":"在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。","text_tokens":["需要","参考","环境","开发","有","派","的","也","好","可以","配置","都","先","之前","大家","很多","在","我们","，","网上","资料","。","树莓"],"title":"树莓派配置","title_tokens":["配置","派","树莓"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_5","text":"我们先要给树莓派装系统，这里我们选择的是Ubuntu Mate针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/","text_tokens":["链接","了","启动","这里","派","的","-","：","卡中","可以","之后","到","下载","选择","是","派装","系统","给","针对",".","就","镜像","https","先要"," ","我们","/","，","download","sd","ubuntu","mate","。",":","烧写","org","树莓"],"title":"装系统","title_tokens":["系统","装"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#ros2","text":"在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。","text_tokens":["一样","在","中","和","安装","的","流程"," ","好","，","电脑","ubuntu","mate","端","。","系统","ros2"],"title":"装ROS2","title_tokens":["装","ros2"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_6","text":"将我们课程的代码也下载到树莓派中，进行编译。","text_tokens":["课程","到","下载","中","也","的","派","我们","进行","，","代码","。","将","编译","树莓"],"title":"编译代码","title_tokens":["代码","编译"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_7","text":"如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728","text_tokens":["连接","流程","参考","访问","基本","_","链接","csdn","上","键盘","了","52785580","有","通过","blog","鼠标","和","派","也","的","好","qq","：","可以","以上","电脑","配置","远程","net","122599728","桌面","使用","显示","如果","方便","一致","端","操作","系统","直接","大家","步骤",".","在","就","details","如下","https"," ","远程桌面","整体","/","，","显示器","基本一致","不","article","。","的话",":","网络","树莓"],"title":"远程桌面","title_tokens":["桌面","远程","远程桌面"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_8","text":"树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 * 如使用虚拟机，请将虚拟机网络修改为桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。","text_tokens":["cpp","订阅","如","局域网","请","的","好","通信","listener","配置","像","动作","使用","都","感觉","发布","所","之间","demo","后","效果","端","讲过","虚拟机","处于","会","者","简而言之","分组","实现","可以","神奇","小组","连接","虚拟","算机","需要","平台","_","希望","而是","而言","两个","派端","呢","什么","talker","用","将","互通","里","中有","修改","下来","同一个","nodes","计算机","接下来","话题","是","你","很多","完成","在","互联","，","run","命令行","网络","ros2","树莓","局域","发布者","模式","了","启动","中","派","不过","具体","#","、","服务","：","电脑","带来","一个","问题","pc","测试","安装","确保","桥接","如果","已经","局域网络","之前","这样","一样","并","我们","不","。","等","节点","命令","他们","能力","*","和","事情","？","也","一下","为","发生","同一","到","计算","接下","无法","py","直接","并且","就","这","个","如下","只要"," ","$","做","打通"],"title":"分布式数据传输","title_tokens":["分布","据传","分布式","布式","传输","数据传输","数据"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_9","text":"没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。","text_tokens":["端的","小组","export","算机","_","<","实现","了","中","和","派","的","加入","不同","通信","：",">","电脑","即可","配置","树莓","没","将","同一","一个","问题","机制","到","计算","同一个","计算机","提供","无法","ros","如果","这样","分配","bashrc","两者",".","一样","就","在","处于","一句"," ","id","我们","，","才能","domain","。","your","类似","则","分组","ros2","=","可以"],"title":"分布式网络分组","title_tokens":["分布","网络","分布式","布式","分组"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_10","text":"分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动。 $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端","text_tokens":["神奇","过","分布","小海","继续","成功","例程","节点","过来","这么","_","teleop","上","小海龟","了","仿真器","键盘","或者","经典","启动","中","案例","key","派","分布式","的","反过来","也","建立","通信","#","派端","布式","电脑","依然","反过","树莓","似乎","学习","turtle","一些","pc","真有","测试","是否","来","先","试试","流畅","海龟","ros","已经","运动","turtlesim","之前","端","在","—"," ","我们","想","真器","，","仿真","控制","$","。","run","node","网络","ros2","可以"],"title":"案例一：小海龟分布式控制","title_tokens":["案例","小海","分布","分布式","：","海龟","布式","控制","一","小海龟"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_11","text":"我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串。 $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端","text_tokens":["字符","sub","例程","发布者","_","订阅","topic","？","的","情况","派","#","派端","通信","world","呢","电脑","树莓","使用","编写","pc","发布","修改","hello","是否","helloworld","先","试试","话题","任何","代码","之前","端","pub","直接","在","learning"," ","下","我们","作为","，","$","不","字符串","者","。","run","ros2","可以"],"title":"案例二：话题分布式通信","title_tokens":["分布","案例","分布式","话题","通信","：","布式","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_12","text":"话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能。","text_tokens":["服务器","客户端程序","客户","顺利实现","务器","没有","程序","也","派端","服务","加法","电脑","可以","服务器程序","问题","话题","端","求和","运行","功能","客户端"," ","顺利","我们","不在","，","不在话下","还是","。","实现","树莓"],"title":"案例三：服务分布式通信","title_tokens":["分布","案例","三","分布式","服务","通信","：","布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_13","text":"以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体。 $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。","text_tokens":["端的","分布","摄像头","例程","上","topic","这些","如此","啦","的","识别","好","配置","cam","一切","用到","使用","都","ros","端","红色","小型","learning","会","发给","机器人","可以","连接","需要","摄像","处理","像头","_","没有","通过","图像","派端","系列","变得","一系","将","修改","下来","exe","采集","实时","接下来","提供","代码","在","，","run","网络","ros2","usb","还","树莓","sub","方法","然后","视觉","非常","开发","了","中","派","分布式","搭建","#","几乎","再","以上","电脑","物体","支持","一个","问题","pc","测试","任何","机器","友好","不够","系统","我们","不","。","node","轻松","节点","实际","复杂","模拟","？","也","布式","安排","没","为","webcam","接下","功能","只要"," ","$","频繁","类似","做","一系列"],"title":"案例四：机器视觉分布式应用","title_tokens":["四","案例","分布","分布式","：","分布式应用","布式","机器","视觉","应用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_14","text":"https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["docs","html","en","https","-","id","/","ros","about","concepts","org","domain",":","humble","."],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2_%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/","text":"从本节开始，我们将进入第二个篇章，以ROS2的核心概念为线索，详细讲解ROS2的应用开发方法。","text_tokens":["第二个","开始","本节","方法","线索","详细","以","二个","开发","应用","讲解","的","概念","第二","进入","为","开发方法","篇章","将","核心","从本节","我们","，","。","ros2"],"title":"2 核心概念","title_tokens":["核心"," ","概念","2"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/","text":"Launch：多节点启动与配置脚本 到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是Launch启动文件。 它是ROS系统中多节点启动与配置的一种脚本。 Launch文件 这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。 多节点启动 运行效果 文件解析 learning_launch/simple.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'learning_topic' , executable = 'topic_helloworld_pub' , ), Node ( package = 'learning_topic' , executable = 'topic_helloworld_sub' , ), ]) 命令行参数配置 运行效果 文件解析 learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): rviz_config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ Node ( package = 'rviz2' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' , rviz_config ] ) ]) 资源重映射 运行效果 文件解析 learning_launch/remapping.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , namespace = 'turtlesim2' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , executable = 'mimic' , name = 'mimic' , remappings = [ ( '/input/pose' , '/turtlesim1/turtle1/pose' ), ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), ] ) ]) ROS参数设置 运行效果 文件解析 learning_launch/parameters.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node def generate_launch_description (): background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) ) return LaunchDescription ([ background_r_launch_arg , background_g_launch_arg , background_b_launch_arg , Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [{ 'background_r' : LaunchConfiguration ( 'background_r' ), 'background_g' : LaunchConfiguration ( 'background_g' ), 'background_b' : LaunchConfiguration ( 'background_b' ), }] ), ]) learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , namespace = 'turtlesim2' , name = 'sim' , parameters = [ config ] ) ]) Launch文件包含 运行效果 文件解析 learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction from launch_ros.actions import PushRosNamespace def generate_launch_description (): parameter_yaml = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ parameter_yaml_with_namespace ]) learning_launch/parameters_nonamespace.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [ config ] ) ]) 功能包编译配置 ... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ... 参考链接 https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docsros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["r","launch","一种","remappings","large","projects","例程","过程","目前","topic","substitutions","using","share","中多","path","各种","的","麻烦","turtle1","yaml","好","from","配置","像","使用","都","description","rviz2","自由","合剂","编程","阅读","核心","ros","各个","效果","vel","launchconfiguration","main","设置","docs","python","=","learning","b","脚本","为止","pythonlaunchdescriptionsource","机器人","前为","解析","看上去","呀","可以","for","多","executable","declarelaunchargument","描述","需要","参数设置","}","参考","没有","_","xml","pushrosnamespace","tutorials","一次","return","通过","config","新","呢","parameters","d","系列","arg","一系","粘合","就是","重","groupaction","那","en","g","来","是","进行","'","actions","代码","turtlesim","input","ament","很多","运行","目的","turtlesim2","在","编译","肯定","https","pose","频次","，","namespaces","基于","packages","命令行","有没有","ros2","甚至","还","好像","这是","粘合剂",")","sub","与","simple","资源","default","+","html","链接","package","它","方式","或者","了","映射","turtlesim1","启动","]","中","组装","模版","value","包","如何","：","...","所有","参数","output","一个","编写","每次","看上","cmd","name","多样","remapping","with","mimic","机器","大大","之高","这样","目前为止","系统","大家",".","directory","一样","我们","了解","/","。","相当","node","当然","文件","完整","原有","files","rviz","background","节点","没错","{","humble","命令","join","namespace","includelaunchdescription","*","和","？","也","launchdescription","-","textsubstitution","多样化","nonamespace","带领","丰富","0","turtle","text","sources","到","helloworld","parameter","输入","sim","index","resource","glob","包含","乍","data","docsros","终端","一次性","出现","py","pub","答案","122","就","generate","功能","("," ","打开",",","import","def","get","arguments","上去","每当","os","org",":","类似","84","[","一系列"],"title":"**Launch：多节点启动与配置脚本**","title_tokens":["启动","*","多","与","launch","：","脚本","节点","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch","text":"到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是Launch启动文件。 它是ROS系统中多节点启动与配置的一种脚本。","text_tokens":["当然","文件","与","一种","需要","launch","节点","没有","它","方式","目前","命令","一次","中多","启动","中","？","的","麻烦","好","新","呢","所有","配置","都","一个","每次","就是","到","那","是","ros","机器","终端","一次性","这样","目前为止","系统","很多","运行","答案","肯定"," ","打开","我们","，","为止","脚本","每当","。","前为","机器人","有没有","呀","可以"],"title":"Launch：多节点启动与配置脚本","title_tokens":["启动","多","与","launch","：","脚本","节点","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_1","text":"这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。","text_tokens":["launch","例程","过程","各种","的","配置","像","使用","自由","合剂","编程","阅读","核心","ros","各个","python","看上去","呀","可以","描述","通过","呢","系列","一系","粘合","就是","那","来","是","进行","代码","目的","很多","在","频次","，","基于","命令行","还","甚至","ros2","好像","这是","粘合剂","它","或者","了","启动","中","组装","模版","如何","参数","一个","编写","看上","多样","大大","之高","这样","系统","大家","一样","我们","了解","。","相当","完整","文件","原有","节点","没错","命令","和","也","多样化","带领","丰富","输入","乍","出现","就","功能"," ","上去","类似","一系列"],"title":"Launch文件","title_tokens":["文件","launch"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_1","text":"","text_tokens":[],"title":"多节点启动","title_tokens":["启动","节点","多"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_2","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_3","text":"learning_launch/simple.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'learning_topic' , executable = 'topic_helloworld_pub' , ), Node ( package = 'learning_topic' , executable = 'topic_helloworld_sub' , ), ])","text_tokens":["sub","executable","simple","launch","_","package","topic","return","]","launchdescription","from","description","helloworld","'","actions","ros","py","pub",".","generate","learning","("," ",",","/","import","def",":","node","[","=",")"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_4","text":"","text_tokens":[],"title":"命令行参数配置","title_tokens":["命令行","配置","命令","参数"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_5","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_6","text":"learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): rviz_config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ Node ( package = 'rviz2' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' , rviz_config ] ) ])","text_tokens":["executable","launch","rviz","_","package","share","path","join","return","]","config","launchdescription","-","from","d","turtle","description","rviz2","name","index","actions","ros","'","ament","py",".","directory","python","generate","learning","("," ",",","/","import","get","def","arguments","os","packages",":","node","[","=",")"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_7","text":"","text_tokens":[],"title":"资源重映射","title_tokens":["重","映射","资源"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_8","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_9","text":"learning_launch/remapping.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , namespace = 'turtlesim2' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , executable = 'mimic' , name = 'mimic' , remappings = [ ( '/input/pose' , '/turtlesim1/turtle1/pose' ), ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), ] ) ])","text_tokens":["executable","launch","remappings","_","package","turtlesim1","namespace","return","]","launchdescription","turtle1","from","output","description","cmd","name","remapping","sim","'","actions","ros","vel","mimic","turtlesim","input","py",".","turtlesim2","generate","learning","("," ",",","pose","/","import","def",":","node","[","=",")"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#ros","text":"","text_tokens":[],"title":"ROS参数设置","title_tokens":["参数","参数设置","设置","ros"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_10","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_11","text":"learning_launch/parameters.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node def generate_launch_description (): background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) ) return LaunchDescription ([ background_r_launch_arg , background_g_launch_arg , background_b_launch_arg , Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [{ 'background_r' : LaunchConfiguration ( 'background_r' ), 'background_g' : LaunchConfiguration ( 'background_g' ), 'background_b' : LaunchConfiguration ( 'background_b' ), }] ), ]) learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , namespace = 'turtlesim2' , name = 'sim' , parameters = [ config ] ) ])","text_tokens":["declarelaunchargument","executable","default","launch","background","}","_","package","{","substitutions","namespace","share","return","path","]","join","config","value","launchdescription","yaml","parameters","from","textsubstitution","[","arg","0","text","description","g","name","sim","'","actions","ros","index","launchconfiguration","turtlesim","ament","py",".","directory","122","turtlesim2","84","python","generate","learning","(","b"," ",",","/","import","def","get","os","packages",":","node","r","=",")"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_2","text":"","text_tokens":[],"title":"Launch文件包含","title_tokens":["文件","包含","launch"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_12","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_13","text":"learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction from launch_ros.actions import PushRosNamespace def generate_launch_description (): parameter_yaml = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ parameter_yaml_with_namespace ]) learning_launch/parameters_nonamespace.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [ config ] ) ])","text_tokens":["executable","launch","_","package","pushrosnamespace","includelaunchdescription","share","path","join","]","namespace","return","config","launchdescription","yaml","from","parameters","nonamespace","sources","groupaction","description","parameter","name","sim","with","index","actions","ros","'","turtlesim","ament","py",".","directory","turtlesim2","python","generate","learning","("," ",",","/","namespaces","import","get","pythonlaunchdescriptionsource","os","def","packages",":","node","[","=",")"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_14","text":"... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ...","text_tokens":["+","files","launch","rviz","_","package","xml","share","path","join","]","*","config","...","name","'","index","resource","glob","data","ament","py",".","("," ",",","/","os","packages","[","=",")"],"title":"功能包编译配置","title_tokens":["包","配置","编译","功能"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docsros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["html","launch","large","projects","using","humble","tutorials","-","en","ros","main","docsros",".","docs","https"," ","/","org",":","ros2","for"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/","text":"TF：机器人坐标系管理神器 坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器——TF。 机器人中的坐标系 机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做基坐标系Base Frame，机器人安装位置在外部环境下的参考系叫做世界坐标系World Frame，机器人末端夹爪的位置叫做工具坐标系，外部被操作物体的位置叫做工件坐标系，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是基坐标系Base Link，雷达所在的位置叫做雷达坐标系laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做里程计坐标系odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做地图坐标系map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为平移和旋转两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实向量的数学描述。 ROS中TF功能的底层原理，其实就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。 TF命令行操作 ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。 小海龟跟随例程 这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 查看TF树 $ ros2 run tf2_tools view_frames 查询坐标变换信息 $ ros2 run tf2_ros tf2_echo turtle2 turtle1 坐标系可视化 $ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。 静态TF广播 我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为静态TF变换，我们来看看在程序中该如何实现？ 运行效果 $ ros2 run learning_tf static_tf_broadcaster 代码解析 learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？ TF监听 我们再来学习下如何查询两个坐标系之间的位置关系。 运行效果 $ ros2 run learning_tf tf_listener 代码解析 learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。 海龟跟随功能解析 运行效果 $ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 原理解析 在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？这两个向量我们可以根据海龟的位置话题计算出来，那这个位置向量不就容易得到了么。 我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心是这个向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。 Launch文件解析 learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ]) 坐标系动态广播 learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 海龟跟随 learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":["怎么样","范围","部分","变得复杂","tools","么","中画","空间","例程","中间","true","外部环境","上","stamp","重要","就绪","依然","配置","could","shutdown","试试","time","时刻","指令","最为","geometry","参考系","四乘","forward","docs","显得","时","基","解析","broadcaster2","小海","\"","描述","需要","退出","rclpy","spin","便于","args","}","send","生变","中该","rotation","不是","transformations","提示","create","出","%","周期","学习","末端","按照","那","来","提供","进行","说","代码","跟随运动","变化","运行","完成","broadcaster1","里程计","哪个","https","ex","是不是","quat","run","apt",")","html","+","default","雷达","client","teleop","爪","publisher","漂移","启动","分解","lookup","静态","具体","async","：","得","你家","另外","编写","激光雷达","安装","cmd","name","点","www","call","保存","console","已经","平移","优先","出来","rate","标志","transformstamped","并","1.0","父类","scripts","了解","应该","激光","完整","被","文件","所在","称之为","中心","rviz","broadcaster","trans","4","key","表示","也","比如","变换","知道","turtlename","发生","没","ready","包括","四元","0.0","parameter","格外","形态","拆","动","8","subscription","功能","接口","(","只要"," ","env","def","真器","timer","srv","底层","定时器","string","做","当前","z","一层","失败","好","s","知识","bin","基础","使用","发布","先","request","所以","之间","核心","vel","speed","main","launchconfiguration","时候","statictfbroadcaster","不变","pkg","生成",".__","客户端","动机","（","transform","管理系","linear","executable","service","发送","参考","详细","echo","可视化","处理","_","务器","--","try","tutorials","解决","destroy","world","广播","时间","parameters","两者之间","这个","还会","en","是","话题","主要","又","theta","turtlesim","管理","操作","x","参数值","done","速度","@","—","底盘","utf","消息","左边","绝对","python3","命令行","atan2","ros2","child","还","与","方法","关于","translation","矩阵","有点","了","中","中心点","y","地图","段","物体","参数","说明","居","数学","转变成","5","laser","三个","spawn","每","管理系统","transformation","转换","角度","良好","__","异常","默认值","及时","加","node","坐标","定时","移动机器人","继续","其实","）","节点","quaternion","程序","{","仿真器","humble","source","请求","机器人学","entry","-","launchdescription","sqrt","算法","spawned","入口","!","计算","info","动态","sim","跟随","理论知识","怎样","抓取","一起","q","长度","tf2","这","as","如下","作用","打开","to","org",":","有所","following","buffer","base","对象","看","成功","保持","transformbroadcaster","substitutions","查询","house","declare","的","turtle1","两只","示例","理论","callback","都","一些","rel","慢慢","数","turtletfbroadcaster","角速度","运动","后","常见","设置","看似","spawning","关闭","初始","循环","者","机器人","数据","实现","float","名称","declarelaunchargument","服务器","客户","不要","转变","基本","初始化","准备","usr","让","frame","通过","经过","进入","变得","用","transformexception","将","就是","the","actions","又会有","yaw","给","编译","statictransformbroadcaster","创建","is","函数","存储","叫做","id","pose","if","起来","clock","now","回调","姿态","教材","源","环境","非常","然后","package","链接","计算出来","神器","msgs","讲解","内","value","包","加入","器","服务","缓冲","旋转","xy","坐标系","作者","一个","class","tflistener","是否","view","获取","机器","位","10.0","工具","发生变化","roll","产生","install","查看","准备就绪","我们","/","不","方向","。","至关重要","相对","累积","5.0","世界","更新","euler","库","复杂","臂","默认","命令","turtle2","*","？","简单",">","之后","算出","tf","0","turtle","到","link","海龟","其中","人学","py","想起","看看","map","否则","要","房子","points",",","get","报告","仿真","false","twist","试一试","result","得到","=","四","目标","finished","一种","launch","移动","target","戳","spawner","过程","订阅","sudo","这些","share","啦","一本","哪些","名","w","from","listener","缓冲区","容易","向量","description","rviz2","not","ros","demo","效果","两者","封装","根据","python","数值","learning","prefix","信息","会","guyuehome","定义","控制","该","监听器","init","欧拉","可以","挑战","没有","3","小海龟","return","对","某","随便","很","案例","两个","概念","odom","setup","变成","else","呢","一只","d","logger","固定","原理","coding","2","关系","self","类","'","清楚","publish","熟悉","successfully","很多","在","none","，","基于","机械","箭头","呗","pitch","super","except","外部","选项","static","之为","]","销毁","连线","情况","#","如何","、","再","pos","on","math","向","如果","位置","距离","误差","这样","相应","系统","sendtransform","大家",".","一样","着急","怎么","里程","线速度","下","现在","背后","理解","监听","f","内容","等待","turtlefollowing","高中","header","有","angular","意思","和","夹","树","器类","可视","transformlistener","为","frames","同理","存在","1","欧拉角","不断","工件","scale","至关","自动","就","com","generate","这种","msg","import","$","不会","古月","全局","["],"title":"**TF：机器人坐标系管理神器**","title_tokens":["*","坐标","：","机器","机器人","坐标系","管理","神器","tf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf","text":"坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器——TF。","text_tokens":["坐标","完整","非常","神器","了","重要","这些","中","机器人学","也","的","？","概念","如何","基础","坐标系","tf","一个","存在","关系","是","之间","提供","ros","位置","机器","管理","人学","熟悉","系统","很多","给","在","—"," ","我们","会","，","该","机器人","。"],"title":"TF：机器人坐标系管理神器","title_tokens":["坐标","：","机器","机器人","坐标系","管理","神器","tf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_1","text":"机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做基坐标系Base Frame，机器人安装位置在外部环境下的参考系叫做世界坐标系World Frame，机器人末端夹爪的位置叫做工具坐标系，外部被操作物体的位置叫做工件坐标系，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是基坐标系Base Link，雷达所在的位置叫做雷达坐标系laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做里程计坐标系odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做地图坐标系map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为平移和旋转两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实向量的数学描述。 ROS中TF功能的底层原理，其实就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。","text_tokens":["四","范围","部分","变得复杂","base","移动","空间","中画","外部环境","过程","这些","重要","一层","的","一本","哪些","知识","理论","使用","都","一些","向量","之间","ros","参考系","四乘","两者","封装","看似","动机","显得","会","基","机器人","管理系","可以","描述","参考","基本","详细","frame","对","通过","两个","odom","world","呢","出","两者之间","这个","变得","固定","末端","原理","就是","那","关系","是","进行","主要","又会有","管理","操作","变化","在","里程计","叫做","，","绝对","机械","方法","关于","教材","雷达","环境","矩阵","外部","了","爪","讲解","漂移","中","分解","中心点","内","地图","物体","旋转","坐标系","一个","安装","数学","laser","位置","每","机器","管理系统","误差","平移","工具","系统","大家","一样","良好","里程","下","我们","。","至关重要","相对","累积","坐标","被","移动机器人","所在","世界","中心","其实","复杂","臂","有","和","机器人学","？","也","比如","简单","夹","变换","为","tf","link","跟随","格外","不断","形态","工件","抓取","人学","理论知识","至关","map","就","要","功能"," ","底层"],"title":"机器人中的坐标系","title_tokens":["中","坐标","的","机器","机器人","坐标系"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_1","text":"ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。","text_tokens":["坐标","小海","一种","小海龟","通过","中","？","的","如何","呢","两只","算法","示例","坐标系","使用","tf","先","海龟","ros","跟随","机器","下","我们","了解","，","基于","该","机器人","。"],"title":"TF命令行操作","title_tokens":["tf","命令","命令行","操作"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_2","text":"这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key","text_tokens":["文件","小海","tools","launch","需要","_","然后","teleop","小海龟","humble","sudo","通过","启动","key","？","的","-","包","具体","如何","一只","之后","另外","示例","这个","一个","turtle","安装","来","先","其中","海龟","跟随","ros","运动","效果","demo","turtlesim","py","相应","跟随运动","自动","运行",".","就","tf2","功能","install"," ","我们","会","，","控制","$","。","试一试","run","apt","ros2","可以"],"title":"小海龟跟随例程","title_tokens":["小海","海龟","例程","跟随","小海龟"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_2","text":"$ ros2 run tf2_tools view_frames","text_tokens":["tf2","tools","view"," ","$","_","run","ros2","frames"],"title":"查看TF树","title_tokens":["查看","tf","树"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_3","text":"$ ros2 run tf2_ros tf2_echo turtle2 turtle1","text_tokens":["tf2","turtle1"," ","echo","ros","$","_","run","turtle2","ros2"],"title":"查询坐标变换信息","title_tokens":["变换","坐标","查询","信息"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_4","text":"$ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。","text_tokens":["小海","方法","rviz","不要","便于","_","--","小海龟","有点","share","案例","意思","？","的","-","呢","d","tf","使用","turtle","原理","rviz2","来","先","慢慢","是","海龟","跟随","怎样","py","大家",".","pkg","tf2","这","着急","(","prefix"," ","下","我们","了解","/","，","$","背后","理解","run","。","ros2",")"],"title":"坐标系可视化","title_tokens":["可视化","可视","坐标","坐标系"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_3","text":"我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为静态TF变换，我们来看看在程序中该如何实现？","text_tokens":["坐标","称之为","雷达","基本","呗","程序","生变","中该","对","之为","中","很","和","静态","？","的","情况","比如","简单","也","好","如何","你家","变换","之后","这个","坐标系","发生","tf","一个","那","激光雷达","安装","关系","来","试试","是","进行","之间","主要","说","最为","位置","机器","管理","拆","常见","发生变化","系统","变化","看看","就","在","房子","哪个","这种","底盘","作用","只要"," ","我们","，","不","不会","。","机器人","应该","激光","实现","相对"],"title":"静态TF广播","title_tokens":["tf","静态","广播"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_5","text":"$ ros2 run learning_tf static_tf_broadcaster","text_tokens":["learning","broadcaster"," ","$","_","run","tf","ros2","static"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_6","text":"learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？","text_tokens":["目标","z","对象","戳","保持","查询","stamp","house","的","w","bin","from","配置","示例","使用","shutdown","数","ros","后","main","geometry","时候","statictfbroadcaster","不变","设置","python","learning","guyuehome","初始","（","循环","该","transform","init","欧拉","\"","描述","需要","退出","rclpy","初始化","spin","args","}","_","usr","3","让","frame","rotation","两个","destroy","transformations","经过","setup","world","广播","时间","呢","将","2","coding","关系","self","是","类","'","进行","又","清楚","代码","yaw","x","变化","编译","完成","statictransformbroadcaster","@","创建","none","utf","id","quat","，","消息","python3","clock","ros2","child",")","now","源","translation","pitch","super","了","msgs","选项","static","]","中","静态","销毁","y","#","、","器","包","加入","：","段","如何","旋转","points","坐标系","作者","一个","class","编写","说明","居","name","点","www","向","位置","console","10.0","平移","sendtransform","系统",".","转换","transformstamped","并","roll","父类","__","scripts","我们","/","node","等待","5.0","坐标","文件","broadcaster","）","euler","节点","库","quaternion","程序","{","header","*","entry","？","-","器类","变换","知道","为","入口","tf","0","!","四元","到","0.0","1","欧拉角","py","8","tf2","这","com","接口","功能","(","如下"," ","env","msg",",","import","def","get","to","打开",":","古月","[","="],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_4","text":"我们再来学习下如何查询两个坐标系之间的位置关系。","text_tokens":["坐标","两个","来","的","关系","如何","下","再","我们","之间","位置","。","坐标系","查询","学习"],"title":"TF监听","title_tokens":["tf","监听"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_7","text":"$ ros2 run learning_tf tf_listener","text_tokens":["learning"," ","listener","$","_","run","tf","ros2"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_8","text":"learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。","text_tokens":["目标","buffer","z","target","对象","house","declare","啦","失败","的","好","名","定时器","w","s","listener","bin","from","示例","缓冲区","配置","两只","could","使用","shutdown","not","time","之间","时刻","数","ros","后","main","有所","设置","python","数值","learning","信息","guyuehome","关闭","初始","（","循环","transform","监听器","init","\"","需要","挑战","}","rclpy","初始化","spin","args","处理","_","退出","基本","--","usr","try","让","frame","return","某","对","rotation","案例","两个","destroy","transformations","create","world","setup","时间","logger","进入","[","%","用","周期","transformexception","固定","2","coding","self","类","'","进行","代码","x","参数值","编译","完成","@","创建","none","utf","存储","ex","，","quat","左边","python3","ros2",")","now","姿态","源","translation","super","except","外部","了","选项","static","]","lookup","销毁","value","y","#","包","加入","pos","：","缓冲","参数","points","坐标系","作者","on","一个","class","编写","tflistener","说明","居","name","点","www","如果","保存","获取","位置","console","优先","系统","大家",".","并","1.0","父类","__","scripts","了解","我们","/","异常","默认值","现在","f","监听","。","node","等待","坐标","定时","文件","继续","broadcaster","）","euler","节点","库","quaternion","程序","默认","trans","{","source","*","entry","-",">","变换","知道","transformlistener","入口","tf","0","!","四元","到","parameter","info","1","海龟","跟随","py","否则","8","tf2","as","com","接口","功能","(","如下",","," ","env","打开","import","def","get","报告","to","timer",":","古月","string","当前","="],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_9","text":"","text_tokens":[],"title":"海龟跟随功能解析","title_tokens":["解析","海龟","功能","跟随"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_10","text":"$ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key","text_tokens":["key","following","learning","launch"," ","demo","$","_","turtlesim","run","teleop","py","tf","ros2",".","turtle"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_11","text":"在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？这两个向量我们可以根据海龟的位置话题计算出来，那这个位置向量不就容易得到了么。 我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心是这个向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。","text_tokens":["怎么样","么","中间","例程","看","上","的","turtle1","好","两只","容易","向量","发布","所以","核心","运动","参考系","设置","两者","封装","根据","时","定义","该","实现","可以","描述","参考","随便","某","解决","很","不是","两个","world","时间","广播","这个","用","周期","学习","2","就是","按照","那","还会","话题","是","说","代码","速度","在","是不是","叫做","，","起来","做","箭头","与","方法","然后","计算出来","了","中","中心点","连线","如何","再","得","坐标系","一个","向","三个","位置","距离","这样","出来","角度","怎么","下","我们","不","方向","监听","。","加","相对","坐标","高中","中心","仿真器","turtle2","有","和","表示","也","？","比如","变换","算出","tf","同理","计算","动态","海龟","1","跟随","不断","一起","动","想起","长度","就","要","这"," ","真器","仿真","得到","全局"],"title":"原理解析","title_tokens":["解析","原理"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#launch","text":"learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ])","text_tokens":["declarelaunchargument","executable","following","launch","default","broadcaster","}","target","_","package","{","substitutions","turtle2","frame","return","]","value","launchdescription","turtle1","from","parameters","listener","turtlename","tf","turtle","description","name","sim","'","actions","ros","demo","launchconfiguration","turtlesim","py",".","broadcaster1","generate","learning","("," ",",","/","import","def",":","node","broadcaster2","[","=",")"],"title":"Launch文件解析","title_tokens":["解析","文件","launch"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_12","text":"learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], },","text_tokens":["目标","z","对象","戳","transformbroadcaster","订阅","stamp","declare","的","w","bin","from","配置","示例","listener","callback","使用","shutdown","turtletfbroadcaster","数","ros","后","main","geometry","设置","python","数值","learning","信息","guyuehome","关闭","初始","（","循环","者","transform","init","欧拉","名称","\"","小海","需要","}","rclpy","初始化","转变","args","处理","_","spin","退出","usr","3","send","小海龟","让","frame","rotation","destroy","transformations","create","变成","world","广播","时间","setup","用","将","2","coding","self","the","类","'","进行","theta","代码","yaw","turtlesim","x","参数值","变化","编译","完成","@","创建","none","utf","函数","pose","id","，","消息","python3","clock","ros2","child",")","回调","now","源","translation","pitch","super","外部","msgs","选项","static","]","中","销毁","value","y","#","、","器","包","加入","：","旋转","参数","points","坐标系","作者","一个","class","编写","说明","居","name","转变成","www","向","点","位置","获取","console","transformation","优先","平移","sendtransform","系统",".","转换","transformstamped","并","roll","父类","__","scripts","/","默认值","及时","f","node","等待","坐标","文件","broadcaster","）","更新","euler","节点","库","quaternion","程序","默认","{","header","*","entry","-","变换","知道","turtlename","为","入口","tf","0","turtle","!","四元","到","0.0","parameter","动态","海龟","1","欧拉角","py","q","否则","8","tf2","com","subscription","接口","功能","(","如下"," ","env","msg",",","import","def","get","to","打开",":","古月","string","[","="],"title":"坐标系动态广播","title_tokens":["广播","动态","坐标","坐标系"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_13","text":"learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], },","text_tokens":["目标","finished","following","buffer","result","z","成功","true","对象","spawner","就绪","declare","失败","的","turtle1","名","定时器","bin","from","listener","示例","缓冲区","依然","配置","could","使用","shutdown","发布","rel","request","not","time","时刻","指令","ros","vel","运动","角速度","speed","geometry","main","后","设置","forward","根据","python","数值","生成",".__","learning","客户端","spawning","信息","guyuehome","关闭","初始","循环","控制","transform","监听器","数据","init","实现","float","linear","\"","服务器","service","需要","客户","发送","}","rclpy","初始化","务器","args","spin","_","没有","退出","准备","usr","try","让","frame","return","通过","rotation","destroy","transformations","提示","create","else","setup","时间","logger","进入","[","用","周期","transformexception","固定","2","coding","self","话题","类","'","进行","theta","代码","turtlesim","x","参数值","publish","done","跟随运动","速度","变化","successfully","完成","编译","@","创建","is","none","utf","存储","if","ex","，","消息","左边","python3","atan2","ros2","还",")","now","+","姿态","源","translation","client","super","except","外部","msgs","publisher","选项","static","]","lookup","销毁","value","y","#","服务","、","async","包","加入","缓冲","：","参数","xy","points","坐标系","作者","on","一个","class","编写","说明","居","math","name","是否","www","cmd","5","call","点","spawn","如果","保存","已经","位","获取","距离","位置","console","优先","系统","rate",".","标志","角度","并","父类","产生","线速度","__","查看","scripts","准备就绪","/","异常","默认值","内容","f","监听","node","等待","坐标","turtlefollowing","定时","文件","broadcaster","节点","库","程序","默认","trans","{","4","turtle2","source","请求","angular","*","entry","表示","-","sqrt","变换","知道","spawned","transformlistener","没","入口","tf","ready","0","turtle","包括","!","到","计算","parameter","info","海龟","1","跟随","scale","py","否则","8","tf2","as","com","功能","接口","(","如下"," ","env","msg",",","import","def","get","to","报告","打开","srv","false","twist","timer",":","古月","string","当前","="],"title":"海龟跟随","title_tokens":["海龟","跟随"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_14","text":"https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":["docs","tf2","en","html","https","-","/","ros","main","org",":","humble","tutorials","."],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/","text":"URDF：机器人建模方法 ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法——URDF，用来描述机器人外观、性能等各方面属性。 机器人的组成 建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由硬件结构、驱动系统、传感器系统、控制系统四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备，驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等，传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境，控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。 URDF ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是XML格式，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为连杆Link，手肘就类似于机器人电机驱动部分，称为关节joint。 所以在URDF建模过程中，关键任务就是通过这里的 和 ，理清楚每一个连杆和关节的描述信息。 连杆Link的描述 标签用来描述机器人某个刚体部分的外观和物理属性，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。Link里边的 部分用来描述机器人的外观，比如 表示几何形状，里边使用 调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的。 表示坐标系相对初始位置的偏移，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分 ，描述碰撞参数，里边的内容似乎和 一样，也有 和 ，看似相同，其实区别还是比较大的。 部分重在描述机器人看上去的状态，也就是视觉效果， 部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过 来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是 里边 描述的形状。 坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。 关节Joint描述 机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 第一种continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 第二种revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 第三种prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 第四种是fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 第五种Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 既然是运动，就是相对的，parent标签描述父连杆，child标签描述子连杆，子连杆会相对父连杆发生运动。 这里的origin表示两个连杆坐标系之间的关系，也就是这个向量，可以理解为这两个连杆该如何安装到一起。 Axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的。 Limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等，大家注意单位，ROS中关于平移的默认单位都是m，旋转是弧度，不是度，所以这里3.14就表示可以在-180度到180度之间运动，速度也是m/s，或者rad/s。 完整机器人模型 最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。 创建机器人模型 好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。 功能包结构 urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件 查看URDF模型结构 $ urdf_to_graphiz mbot_base.urdf # 在模型文件夹下 模型可视化效果 模型文件解析 learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot> 参考链接 https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":["部分","讲","0.4","上","外部环境","父","手","碰撞","raw","等于","注意","类型","配置","meshes","有点像","存放","先来","floating","组成部分","全都","geometry","docs","时","解析","关节","\"","一般","描述","连接","需要","度","便于","这款","不是","弧度","第二","感知","sphere","正常","按照","三维","来","提供","进行","相对运动","代码","形成","相同","变化","完成","手肘","找","滑动","https","caster","html","雷达","绿色","柱体","第一","视觉","它","蓝色","启动","分解","back","yellow","：","接触","得","rpy","安装","name","cylinder","保存","prismatic","之前","子","平移","正","沿某","小车","1.0","0.16","了解","为了","文件","完整","fixed","rviz","格式","尖括号","二个","表示","也","比如","度到","面上","语言","发生","包括","直线","标签","结构","无法","3.14","关键","功能","调用"," ","planar","要求","urdf","摄像头","模型","z","实打实","各","四种","比较","好","s","全称","尺寸","使用","先","所以","之间","控制系统","main","时候","传感器","0.095","重在","left","动机","介绍","管理系","看上去","则","设备","参考","平台","joint","可视化","_","length","0.05","编码器","应用","tutorials","black","这个","en","板载","是","主要","任务","x","管理","操作","速度","—","底盘","惯性","或","还","child","相关","与","方法","关于","180","以","第六种","矩阵","有点","了","stl","外界","方式","或者","中","y","硬件","参数","圆柱","看上","碰撞检测","极限","建模","平面","每","管理系统","车体","看下","?","角度","独自","radius","应用软件","配置文件","第五","不仅","坐标","移动机器人","其实","0.06","名字","front","humble","三种","0.9","传感","-","xacro","计算","组合而成","设计","称为","乍","一起","几何","这","如下","version","to","m","检测","org",":","最终","第五种","wheel","用来","限制","axis","手臂","base","看","一块","无论是","简化","未来","1.5707","圆柱体","网页","电机","的","二种","单位向量","示例","性能","旋转关节","一段","0.20","都","一些","必须","理","无限","mbot","五种","white","运动","第四","常见","看似","轮子","初始","0.015","机器人","名称","多","摄像","电源","里边","清晰","像头","limit","让","放置","通过","这里","驱动","什么","系列","用","似乎","将","就是","为此","0.19","给","visual","操作系统","创建","叫做","感器","起来","括号","rgba","单位","环境","链接","统一","方面","开发","material","派","在于","包","电脑","不能","旋转","所有","分别","细节","某个","最小","肘关节","坐标系","一个","物理","真实","机器","一致","roll","产生","查看","我们","组成","/","还是","为例","方向","不","。","无论","的话","revolute","文件夹","相对","第二种","等","robot","哪","第四种","属性","复杂","臂","默认","高","轴","？","第三种","放在",">","组合","桌子","之后","continuous","允许","imu","origin","0","到","此时","每个","浮动","link","其中","等等","看到","编码","要","小臂","大","0.18","算作","频繁","最大","类似","包围","一系列","=","区别","一种","质心","launch","移动","把","过程","码器","这些","啦","偏移","哪些","type","颜色","右侧","以及","向量","转关","带有","两种","装置","ros","效果","视觉效果","质量","learning","较","信息","会","定义","控制","该","驱动器","可以","第二个","连杆","模型简化","属于","专门","外观","这么","xml","某","自己","而是","对","两个","right","市面上","呢","一系","固定","自身","关系","算力","清楚","全为","状态","局","熟悉","少","在","围绕","自定","形状","0.025","，","软件","才能","机械","树莓","完全","<","pitch","引用","外部","渲染","不过","#","如何","、","再","自定义","六种","rad","parent","大臂","如果","位置","四大","第六","这样","系统","市面","大家",".","外壳","一样","着急","驱使","下","独立","内容","理解","件夹","思路","于","叫","当然","实际","刚体","唯一","他们","肌肉","有","既然","和","由","xyz","可视","为","graphiz","第三","相机","1","第一种","框","0.95","建模语言","就","这种","color","认识","$","上去","不会","载体","提前","源代码"],"title":"**URDF：机器人建模方法**","title_tokens":["*","urdf","方法","：","建模","机器","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf","text":"ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法——URDF，用来描述机器人外观、性能等各方面属性。","text_tokens":["当然","urdf","用来","一种","方法","描述","等","专门","外观","把","属性","方面","各","让","了","啦","不过","的","？","如何","、","得","呢","性能","使用","一个","是","提供","建模","ros","机器","为此","之前","操作","系统","给","操作系统","在","要","—","认识","下","我们"," ","，","介绍","机器人","。","还"],"title":"URDF：机器人建模方法","title_tokens":["urdf","方法","建模","：","机器","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_1","text":"建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由硬件结构、驱动系统、传感器系统、控制系统四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备，驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等，传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境，控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。","text_tokens":["部分","摄像头","移动","实打实","把","无论是","过程","上","码器","这些","电机","的","使用","都","一些","以及","先","装置","控制系统","组成部分","传感器","常见","动机","控制","机器人","管理系","驱动器","设备","可以","一般","描述","需要","摄像","电源","里边","平台","便于","像头","编码器","应用","自己","通过","驱动","市面上","感知","正常","就是","按照","板载","是","进行","主要","清楚","管理","状态","操作","熟悉","操作系统","底盘","感器","，","软件","起来","机械","树莓","雷达","环境","开发","外部","了","中","分解","派","、","再","硬件","电脑","参数","一个","安装","建模","四大","机器","每","管理系统","系统","市面","外壳","驱使","我们","组成","应用软件","还是","无论","。","思路","移动机器人","等","其实","臂","和","由","传感","比如","组合","面上","语言","imu","包括","结构","计算","等等","看到","编码","建模语言","这"," ","载体","类似"],"title":"机器人的组成","title_tokens":["机器","组成","机器人","的"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_1","text":"ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是XML格式，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为连杆Link，手肘就类似于机器人电机驱动部分，称为关节joint。 所以在URDF建模过程中，关键任务就是通过这里的 和 ，理清楚每一个连杆和关节的描述信息。","text_tokens":["urdf","部分","模型","手臂","看","外部环境","过程","手","这些","网页","电机","的","全称","右侧","使用","都","有点像","必须","理","所以","ros","运动","信息","机器人","源代码","看上去","可以","关节","连接","描述","连杆","清晰","joint","xml","自己","通过","这里","驱动","呢","系列","这个","一系","就是","自身","是","相对运动","任务","清楚","代码","手肘","在","叫做","，","才能","括号","机械","还","方法","环境","统一","有点","外部","开发","中","如何","肘关节","一个","看上","大臂","建模","每","机器","这样","大家","独自","产生","下","我们","组成","独立","。","不仅","于","相对","文件","刚体","格式","尖括号","属性","臂","他们","肌肉","和","由","也","？","比如","组合","桌子","之后","标签","组合而成","link","其中","无法","称为","乍","就","小臂","关键"," ","上去","算作","类似","包围","一系列"],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#link","text":"标签用来描述机器人某个刚体部分的外观和物理属性，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。Link里边的 部分用来描述机器人的外观，比如 表示几何形状，里边使用 调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的。 表示坐标系相对初始位置的偏移，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分 ，描述碰撞参数，里边的内容似乎和 一样，也有 和 ，看似相同，其实区别还是比较大的。 部分重在描述机器人看上去的状态，也就是视觉效果， 部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过 来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是 里边 描述的形状。 坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。","text_tokens":["部分","区别","用来","质心","z","模型","移动","上","过程","简化","未来","碰撞","raw","圆柱体","的","偏移","比较","好","尺寸","颜色","使用","效果","运动","时候","重在","视觉效果","看似","质量","动机","较","会","轮子","时","定义","初始","控制","该","机器人","看上去","则","可以","名称","第二个","连接","描述","需要","连杆","里边","模型简化","外观","joint","通过","第二","这个","用","似乎","将","就是","三维","来","算力","是","全为","x","状态","相同","在","自定","形状","惯性","，","软件","机械","与","绿色","柱体","pitch","视觉","以","它","矩阵","stl","了","外界","蓝色","中","y","、","如何","：","接触","旋转","参数","自定义","分别","某个","圆柱","坐标系","一个","看上","物理","碰撞检测","name","真实","如果","位置","机器","一致","车体","平移","这样","小车","一样","roll","我们","内容","方向","为例","不","还是","。","的话","为了","相对","文件","坐标","移动机器人","等","其实","实际","刚体","属性","复杂","臂","二个","高","有","和","表示","也","比如","0","包括","标签","到","计算","link","设计","框","几何","就","如下","调用"," ","大","上去","算作","提前","检测","类似","要求"],"title":"连杆Link的描述","title_tokens":["连杆","link","描述","的"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#joint","text":"机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 第一种continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 第二种revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 第三种prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 第四种是fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 第五种Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 既然是运动，就是相对的，parent标签描述父连杆，child标签描述子连杆，子连杆会相对父连杆发生运动。 这里的origin表示两个连杆坐标系之间的关系，也就是这个向量，可以理解为这两个连杆该如何安装到一起。 Axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的。 Limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等，大家注意单位，ROS中关于平移的默认单位都是m，旋转是弧度，不是度，所以这里3.14就表示可以在-180度到180度之间运动，速度也是m/s，或者rad/s。","text_tokens":["第五种","urdf","区别","限制","一种","axis","模型","z","上","父","四种","电机","等于","的","类型","比较","注意","s","二种","单位向量","旋转关节","一段","使用","都","一些","向量","转关","无限","带有","两种","所以","之间","五种","floating","运动","第四","ros","较","会","轮子","该","机器人","可以","关节","连接","描述","一般","连杆","属于","度","joint","xml","limit","某","通过","而是","这里","不是","两个","弧度","第二","什么","这个","固定","就是","关系","是","进行","相对运动","少","速度","变化","围绕","在","滑动","，","才能","机械","child","关于","单位","第一","180","第六种","方式","或者","了","中","不过","在于","如何","不能","旋转","最小","坐标系","六种","rad","一个","parent","安装","极限","平面","位置","prismatic","机器","每","第六","平移","这样","子","正","沿某","大家","小车","角度","产生","/","内容","不","revolute","还是","理解","。","方向","第五","相对","叫","坐标","fixed","第二种","等","哪","名字","第四种","刚体","唯一","臂","默认","轴","有","三种","既然","和","表示","也","比如","-","第三种","度到","之后","continuous","允许","发生","为","origin","直线","标签","此时","到","第三","相机","浮动","link","1","3.14","第一种","一起","就","要","这","这种"," ","planar","不会","频繁","m","最大","最终"],"title":"关节Joint描述","title_tokens":["关节","描述","joint"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_2","text":"最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。","text_tokens":["完整","urdf","部分","描述","完全","模型","robot","joint","看","一块","了","对","某","中","和","由","的","哪些","放在","再","所有","组合","细节","之后","这个","一个","标签","每个","先","所以","是","link","先来","每","机器","全都","形成","代码","局","大家","完成","就","在","着急","找"," ","下","组成","了解","时","，","不","机器人","。","最终"],"title":"完整机器人模型","title_tokens":["完整","机器","模型","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_3","text":"好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。","text_tokens":["完整","多","移动机器人","urdf","讲","移动","模型","看","这么","以","它","这款","过程","了","啦","的","好","示例","一个","建模","机器","一起","看下","要","动机"," ","我们","，","还是","为例","。","机器人"],"title":"创建机器人模型","title_tokens":["模型","机器","创建","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_4","text":"urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件","text_tokens":["相关","urdf","文件","launch","模型","rviz","引用","放置","启动","中","渲染","的","：","xacro","配置","meshes","存放","保存","机器"," ","或","配置文件","机器人"],"title":"功能包结构","title_tokens":["包","结构","功能"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_2","text":"$ urdf_to_graphiz mbot_base.urdf # 在模型文件夹下","text_tokens":["在","urdf","graphiz","文件","mbot","#"," ","base","模型","下","to","$","_","件夹","文件夹","."],"title":"查看URDF模型结构","title_tokens":["查看","urdf","模型","结构"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_5","text":"","text_tokens":[],"title":"模型可视化效果","title_tokens":["可视化","可视","模型","效果"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_6","text":"learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot>","text_tokens":["urdf","\"","wheel","axis","base","0.06","0.4","robot","joint","_","<","length","xml","0.05","front","1.5707","black","0.9","material","back","yellow","xyz","-","right","type",">","continuous","sphere","origin","0","rpy","0.20","parent","mbot","name","cylinder","link","1","white","geometry","0.095","0.19","visual","?",".","0.95","1.0","0.16","color","learning","left"," ","radius","0.025","/","version","0.18","0.015","caster","rgba","child","="],"title":"模型文件解析","title_tokens":["解析","模型","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_7","text":"https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":["docs","urdf","en","html","https","-","/","ros","main","org",":","humble","tutorials","."],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/","text":"Gazebo：三维物理仿真平台 ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台Gazebo，了解一下。 Gazebo仿真平台 介绍 Gazebo是ROS系统中最为常用的三维物理仿真平台，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。 安装 Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-* 运行 通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py 注意：为保证模型顺利加载，请将离线模型文件库下载并放置到~/.gazebo/models路径下， https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。 XACRO机器人模型优化 我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本——XACRO文件。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro 常量定义 一些常用的XACRO文件语法，大家了解下。 标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。 数学计算 如果需要做数学计算，同样是在$加大括号中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 注意：所有数学运算都会转换成浮点数进行，以保证运算精度 宏定义 机器人的轮子我们也做成宏定义，定义方式是通过这个 标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。 文件包含 宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。 机器人仿真模型配置 完善物理参数 第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。 添加Gazebo标签 第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。 配置传动装置 第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。 添加控制器插件 第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。 构建仿真环境 接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ]) 机器人运动仿真 万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard 注意：虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。 Ignition：下一代Gazebo 随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为Ignition，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/ 附录：机器人完整模型 learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["collision","么","0.4","四步","true","上","二步","碰撞","path","h","pi","注意","max","配置","list","有点像","试试","高质","time","续航","时刻","最为","geometry","filename","原本","include","区分","时","matter","val","for","关节","\"","小海","描述","虚拟","需要","}","度","尝试","3.1415926","into","进步","第二步","不是","构建","必备","新","第二","and","sphere","inertia","so","传递数据","见证","三维","那","来","vgpu10","提供","进行","迭代","人机","代码","条件","你","嵌套","变化","运行","models","完成","找","https","是不是","第二句","随着","上来","caster","run","ixy","apt","20","结束",")","+","第一","spwan","correctly","它","teleop","0.75","publisher","启动","interface","back","第四步","yellow","不同","acceleration","：","得","另外","reflect","rpy","问题","安装","cmd","name","官方网站","www","cylinder","已经","izz","友好","之前","整个","分配","rate","装上","小车","provided","并","值为","1.0","0.16","you","了解","某些","很长","0.001","为了","motor","github","插件","inertial","完整","文件","fixed","c语言","万事俱备","格式","trans","冗余","4","command","一步","也","比如","重复使用","一行","语言","没","火星车","丰富","官方","标签","0.0","differential","于是","网站","个","功能","接口","(","调用"," ","主角","def","真器","运算","做","r","实物","urdf","宏","摄像头","模型","z","torque","周边环境","更","worlds","defining","更为","doesn","this","差速","好","own","尺寸","drive","像","使用","传动","切分","先","所以","编程","vel","交给","时候","传感器","blue","pkg","gazebo","neighborhood","left","动机","顺利","want","介绍","use","结果","executable","http","iyy","entity","平台","参考","echo","joint","property","部署","_","length","转换成","较大","--","0.05","iyz","应用","black","turngravityoff","params","world","这个","enabled","硬件加速","update","互相","是","接下来","高质量","跑","主要","点数","相识","be","x","速度","mass","—","底盘","惯性","diameter","actuator","公式","总体","packages","版本","还","ros2","child","相关","change","方法","流程","写","添加","离线","以","方式","有点","了","中","y","因为","硬件","导致","screen","参数","have","万事","测试","数学","命名","确保","一代","5","建模","in","spawn","摩擦力","每","macro","transmission","set","转换","?","角度","力学","镜像","radius","xmlns","浮点","ign","不仅","node","used","火星","移动机器人","export","0.06","名字","节点","比","odometry","{","仿真器","humble","front","includelaunchdescription","动力","source","模拟","传感","-","launchdescription","important","xacro","算法","sources","!","下载","计算","sim","设计","c","一起","这","arguments","to","version","m","org",":","wheel","用来","axis","base","限飞","0.2","这句","传动装置","未来","验证","请","电机","的","新一代","加法","同样","摩擦","0.20","都","一些","附录","名为","加速","mbot","gray","运动","第四","无人机","设置","针对","下一代","技术","3.14159","keyboard","轮子","关闭","0.015","pythonlaunchdescriptionsource","第一步","机器人","数据","separation","实现","帮助","名称","多","不妨","摄像","里边","参数设置","基本","像头","让","matrix","simpletransmission","frame","放置","通过","box","这里","ignitionrobotics","用","将","似曾","就是","课程","俱备","第一句","the","想不起来","actions","velocityjointinterface","yaw","ament","0.19","给","visual","diff","创建","is","函数","if","感器","动力学","pose","起来","wiki","括号","rgba","甚至","记得","精度","hardwareinterface","还要","三步","环境","升级","然后","package","文件格式","开发","键盘","ixz","奇迹","material","可能","数学计算","value","加入","包","路径","不能","所有","加载","支持","output","一个","表面","官方网","物理","make","可编程","流畅","场景","机器","弹性系数","directory","几个","install","我们","/","不","似曾相识","。","相对","等","robot","弹性","库","属性","复杂","really","试一下","命令","rgbd","*","find","考虑","？","简单",">","变量","刚好","continuous","origin","0","tf","此时","到","每个","controller","一定","ignition","接下","link","海龟","尽量","两句","bridge","by","py","出现","demos","要","一句",",","0.18","get","仿真","频繁","os","false","twist","类似","得到","=","不多","当","launch","移动","模块","把","spawner","过程","手边","topic","sudo","这些","share","our","啦","where","type","语法","加大","from","颜色","用到","”","description","t","only","hardware","装置","ros","效果","方便","---","改成","12","虚拟机","引擎","数值","质量","python","ixx","svga","learning","b","prefix","信息","会","定义","“","控制","为止","系数","该","做成","可以","周边","没有","优化","xml","可编","3","小海龟","除法","return","对","认识一下","~","很","某","两个","force","right","odom","呢","mechanicalreduction","控制器","2","修改","下来","关系","them","'","常用","state","me","publish","bashrc","很多","在","a","0.025","，","30","reference","all","load","<","怎么办","file","]","图形","渲染","不过","浮点数","、","再","如何","#","以上","colors","parent","如果","位置","第三步","这样","系统","大家",".","一样","怎么","办法","下","可","根本","理解","叫","当然","single","we","items","必要","sure","常量","实验","化","同时","二句","libgazebo","join","有","和","xyz","size","plugin","一下","差不多","完善","为","传递","从","第三","想不起","camera","输入","1","index","无人","保证","及","包含","去","不断","joints","放到","直接","重复","0.95","就","com","generate","这种","color","语句","换成","认识","import","$","再用","不会","osrf","footprint","["],"title":"**Gazebo：三维物理仿真平台**","title_tokens":["物理","*","三维","gazebo","平台","：","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo","text":"ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台Gazebo，了解一下。","text_tokens":["当然","实物","平台","没有","怎么办","手边","开发","？","一下","呢","没","问题","物理","三维","是","ros","如果","机器","gazebo","怎么","我们","了解","主角","，","仿真","机器人","。"],"title":"Gazebo：三维物理仿真平台","title_tokens":["物理","三维","gazebo","平台","：","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_1","text":"","text_tokens":[],"title":"Gazebo仿真平台","title_tokens":["仿真","gazebo","平台"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_1","text":"Gazebo是ROS系统中最为常用的三维物理仿真平台，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。","text_tokens":["实物","不多","限飞","周边环境","更","验证","的","摩擦","使用","都","先","高质","所以","续航","ros","最为","引擎","无人机","gazebo","质量","系数","机器人","实现","帮助","可以","多","周边","不妨","平台","没有","部署","优化","应用","用","三维","那","是","提供","高质量","常用","人机","运行","在","动力学","，","上来","还","环境","开发","了","中","图形","渲染","可能","加入","、","再","导致","支持","一个","表面","物理","测试","场景","摩擦力","机器","这样","弹性系数","系统","力学","办法","我们","。","不仅","火星","等","实验","弹性","属性","动力","和","模拟","比如","差不多","算法","为","火星车","此时","到","设计","无人","及","就","要"," ","仿真","频繁","类似","做"],"title":"介绍","title_tokens":["介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_2","text":"Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-*","text_tokens":["相关","完整","不妨","把","它","了","humble","命令","sudo","认识一下","通过","中","和","*","？","的","-","包","如何","一下","简单","：","呢","使用","都","一个","安装","互相","先","确保","跑","ros","已经","这样","系统","给","大家","直接","装上","gazebo","功能","install","认识"," ","我们","起来","，","$","。","为了","apt","可以"],"title":"安装","title_tokens":["安装"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_3","text":"通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py 注意：为保证模型顺利加载，请将离线模型文件库下载并放置到~/.gazebo/models路径下， https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。","text_tokens":["launch","么","模型","移动","把","这句","啦","请","注意","的","试试","ros","运动","gazebo","动机","顺利","控制","该","机器人","可以","尝试","_","放置","通过","~","不是","将","课程","下来","接下来","models","在","https","是不是","，","还","ros2","记得","还要","环境","离线","它","了","启动","中","路径","：","加载","机器","之前","大家",".","并","下","我们","/","。","github","文件","移动机器人","库","命令","？","为","到","下载","接下","设计","保证","一起","py","放到","就","com"," ","认识","$","仿真",":","osrf"],"title":"运行","title_tokens":["运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#xacro","text":"我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本——XACRO文件。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro","text_tokens":["urdf","宏","摄像头","模型","移动","模块","把","更","这句","过程","sudo","更为","的","好","尺寸","同样","像","使用","都","一些","切分","先","编程","ros","时候","传感器","gazebo","动机","b","会","轮子","介绍","定义","机器人","数据","实现","可以","多","描述","需要","摄像","像头","没有","优化","可编","让","放置","对","通过","这里","传递数据","下来","是","接下来","代码","条件","你","给","在","创建","—","底盘","函数","a","感器","，","总体","版本","apt","还","甚至","方法","写","升级","然后","文件格式","了","中","可能","加入","、","不同","包","：","不能","一个","安装","可编程","建模","如果","机器","友好","之前","大家","小车","一样","install","我们","可","很长","。","为了","叫","文件","移动机器人","必要","常量","化","格式","复杂","humble","4","命令","有","也","传感","比如","-","重复使用","一下","xacro","变量","没","传递","丰富","此时","每个","计算","设计","link","接下","包含","放到","直接","重复","就","个","要","接口","功能","语句","调用"," ","$","再用","做"],"title":"XACRO机器人模型优化","title_tokens":["模型","xacro","机器","优化","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_4","text":"一些常用的XACRO文件语法，大家了解下。 标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。","text_tokens":["文件","urdf","移动机器人","用来","需要","常量","里边","移动","模型","_","把","了","未来","这些","通过","pi","很","中","也","的","比如","、","好","语法","xacro","加大","尺寸","一行","”","使用","都","一个","一些","标签","修改","安装","名为","常用","位置","数据","机器","方便","时候","这样","大家","针对","变化","原本","在","值为","就","质量","找","底盘","动机","调用"," ","下","了解","3.14159","我们","，","定义","“","$","轮子","不会","m","。","括号","机器人","不","可以"],"title":"常量定义","title_tokens":["常量","定义"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_5","text":"如果需要做数学计算，同样是在$加大括号中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 注意：所有数学运算都会转换成浮点数进行，以保证运算精度","text_tokens":["移动","模型","未来","注意","的","加法","加大","同样","都","时候","改成","数值","动机","会","机器人","数据","结果","可以","需要","转换成","除法","某","通过","两个","这个","修改","关系","来","是","进行","想不起来","点数","很多","在","，","起来","公式","括号","做","精度","写","以","了","中","可能","数学计算","加入","浮点数","：","所有","一个","数学","如果","位置","机器","转换","怎么","我们","浮点","根本","。","相对","移动机器人","常量","有","和","比如","计算","想不起","尽量","保证","直接","就","这","换成"," ","$","运算","得到"],"title":"数学计算","title_tokens":["计算","数学","数学计算"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_6","text":"机器人的轮子我们也做成宏定义，定义方式是通过这个 标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。","text_tokens":["关节","名称","宏","描述","当","需要","里边","参数设置","模型","joint","名字","同时","把","方式","了","通过","这里","记得","中","和","也","的","比如","两个","、","好","-","参数","刚好","这个","像","用到","使用","一个","一些","标签","来","关系","是","link","输入","1","两句","位置","机器","包含","c","时候","这样","出现","设置","一样","就","要","几个","在","做成","这","镜像","函数","a"," ","b","我们","轮子","会","定义","，","调用","区分","机器人","。","还","可以"],"title":"宏定义","title_tokens":["宏","定义"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_7","text":"宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。","text_tokens":["文件","宏","流程","还","模型","里边","模块","c语言","把","然后","优化","没有","了","对","很","不是","中","这里","也","的","和","加入","再","必备","得","另外","参数","语言","像","使用","一个","似曾","一些","到","下来","于是","是","接下","接下来","机器","包含","嵌套","相识","去","include","这种","底盘","函数","调用"," ","是不是","我们","某些","定义","，","为止","仿真","似曾相识","机器人","。","结束","做","做成","可以"],"title":"文件包含","title_tokens":["文件","包含"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_8","text":"","text_tokens":[],"title":"机器人仿真模型配置","title_tokens":["模型","仿真","配置","机器","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_9","text":"第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。","text_tokens":["必要","需要","平台","第一","属性","碰撞","有","一步","和","的","因为","参数","都","一个","物理","确保","一定","是","link","每","gazebo","惯性","，","仿真","第一步","。"],"title":"完善物理参数","title_tokens":["物理","完善","参数"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_2","text":"第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。","text_tokens":["urdf","添加","二步","冗余","第二步","中","和","渲染","一步","的","不同","因为","第二","得","颜色","配置","为","一个","标签","所以","是","link","主要","每","这样","系统","在","gazebo","，","为了","。","做","可以"],"title":"添加Gazebo标签","title_tokens":["添加","gazebo","标签"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_10","text":"第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。","text_tokens":["joint","三步","传动装置","了","电机","的","配置","为","一个","传动","第三","是","装置","运动","第三步","给","要","，","仿真","理解","。","可以"],"title":"配置传动装置","title_tokens":["传动","配置","装置","传动装置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_11","text":"第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。","text_tokens":["四步","添加","了","两个","电机","第四步","的","差速","不同","可以","控制器","一个","那","来","是","第四","交给","这样","分配","速度","小车","角度","就","要","gazebo","在","完成","下","，","控制","。","插件"],"title":"添加控制器插件","title_tokens":["控制","添加","控制器","插件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_12","text":"接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ])","text_tokens":["urdf","launch","模型","z","true","把","spawner","topic","worlds","our","share","path","doesn","的","where","own","from","用到","description","mbot","t","only","time","ros","---","pkg","python","gazebo","include","neighborhood","learning","want","pythonlaunchdescriptionsource","use","matter","val","executable","需要","entity","}","_","into","return","force","world","enabled","下来","them","the","接下来","提供","'","actions","state","be","me","x","yaw","ament","if","a","pose","，","packages","run",")","change","all","load","spwan","<","package","correctly","file","了","publisher","]","中","y","#","如何","screen","加载","have","output","一个","make","name","spawn","set",".","directory","provided","you","/","。","node","single","we","items","sure","robot","节点","really","{","includelaunchdescription","join","考虑","launchdescription","-","sources","!","到","0.0","sim","接下","index","by","py","就","generate","功能","("," ",",","import","def","get","to","arguments","os",":","[","="],"title":"构建仿真环境","title_tokens":["仿真","环境","构建"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_13","text":"万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard 注意：虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。","text_tokens":["urdf","launch","过程","注意","的","有点像","加速","时刻","虚拟机","gazebo","svga","learning","keyboard","时","关闭","控制","机器人","\"","小海","虚拟","需要","基本","echo","_","into","小海龟","~","第二","就是","见证","硬件加速","俱备","下来","第一句","vgpu10","接下来","bashrc","很多","运行","第二句","，","run","ros2","流程","load","第一","环境","teleop","有点","键盘","了","奇迹","启动","中","不过","：","硬件","以上","万事","已经","机器","整个",".","我们","/","。","export","万事俱备","节点","比","二句","复杂","命令","和",">","0","此时","接下","海龟","两句","py","一句"," ","仿真","$","twist","="],"title":"机器人运动仿真","title_tokens":["运动","机器","仿真","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#ignitiongazebo","text":"随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为Ignition，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/","text_tokens":["多","不妨","launch","参考","平台","度","_","进步","较大","试一下","上","更","humble","仿真器","sudo","有","rgbd","和","新一代","渲染","也","的","-","ignitionrobotics","一下","新","为","都","官方网","官方","从","camera","来","命名","官方网站","一代","ignition","流畅",":","www","迭代","ros","bridge","效果","网站","不断","py","变化",".","demos","大家","在","gazebo","技术","install"," ","信息","随着","我们","真器","，","/","仿真","$","ign","。","org","版本","apt","ros2","可以"],"title":"Ignition：下一代Gazebo","title_tokens":["下一代","gazebo","一代","ignition","："]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_14","text":"learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["urdf","wheel","collision","axis","base","z","0.4","true","torque","0.2","topic","defining","h","pi","this","max","type","drive","list","0.20","mbot","gray","hardware","ros","vel","geometry","12","filename","blue","gazebo","include","ixx","learning","left","prefix","0.015","separation","for","\"","http","iyy","property","}","joint","3.1415926","_","length","0.05","xml","--","3","iyz","matrix","simpletransmission","frame","black","box","turngravityoff","params","right","odom","and","sphere","mechanicalreduction","inertia","so","2","update","the","velocityjointinterface","x","publish","0.19","visual","mass","diff","is","0.025","diameter","actuator","wiki","30","caster","ixy","20","rgba","child",")","reference","+","hardwareinterface","<","0.75","ixz","material","interface","back","yellow","value","y","acceleration","colors","reflect","rpy","parent","cmd","name","cylinder","www","5","in","izz","macro","transmission","rate","?",".","1.0","0.16","radius","xmlns","/","0.001","used","motor","inertial","fixed","0.06","robot","libgazebo","odometry","trans","{","front","source","command","*","find","xyz","-","important","size","plugin",">","xacro","continuous","origin","0","tf","!","differential","controller","link","1","joints","0.95","color","("," ","version","0.18","to","$","false","m","org",":","footprint","r","="],"title":"附录：机器人完整模型","title_tokens":["完整","附录","模型","：","机器","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/","text":"Rviz：三维可视化显示平台 大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾——Rviz，一款三维可视化显示的神器。 Rviz三维可视化平台 机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。 Rviz介绍 一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。 运行方法 $ ros2 run rviz2 rviz2 彩色相机仿真与可视化 摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。 仿真插件配置 关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 主要配置项如下： 标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 标签：加载摄像头仿真插件 运行仿真环境 模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py 图像数据可视化 $ ros2 run rviz2 rviz2 三维相机仿真与可视化 二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。 仿真插件配置 运行仿真环境 $ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py 点云数据可视化 $ ros2 run rviz2 rviz2 激光雷达仿真与可视化 除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。 仿真插件配置 运行仿真环境 $ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py 点云数据可视化 $ ros2 run rviz2 rviz2 Rviz vs Gazebo 好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下，Gazebo是仿真平台，核心功能是创造数据，我们没有机器人或者传感器，它可以帮我们做一个虚拟的，Rviz是可视化平台，核心功能是显示数据，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。 参考链接 https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":["范围","么","讲","分钱","层面","上","外部环境","类型","配置","自由","试试","会用","先来","搞定","最为","全都","255","docs","描述","虚拟","需要","想不到","into","希望","不是","新","so","按照","三维","来","提供","常备","各种各样","代码","你","大大提高","畅想","运行","https","是不是","什么样","run","usb","过","雷达","它","拭目以待","启动","具体","问","：","问题","激光雷达","intel","name","www","已经","出来","只有","某些","了解","qt","激光","github","插件","二维","rviz","可贵","体感","格式","提高","也","比如","知道","分辨率","包括","官方","标签","相信","能","不少","一位","一款","功能","只要"," ","一目","一分钱","做","导航","效率","摄像头","模型","玩起来","更","好","使用","发布","创造","所以","巧妇难为无米之炊","核心","时候","传感器","本","gazebo","样","动机","介绍","彩色","一脸","参考","平台","可视化","_","出厂","点云","图像","这个","是","话题","主要","这幅","图形化","一分","项","—","stereolabs","各样","消息","有没有","ros2","与","方法","流程","关于","不到","价格比","添加","或者","了","中","话","参数","显示","说明","命名","laser","分辨","分析","上位","坐标","移动机器人","帮","快速","对应","自带","打造","传感","但","计算","设计","还有","这","如下","除了","混淆",":","用来","才","汽车","巧妇","成功","看","懵","以待","各种","拭目","不想","的","过瘾","都","一些","mbot","运动","设置","内部","机器人","数据","多","摄像","难为","重量","像头","通过","辨率","这里","什么","手上","用","kinect","装","就是","给","肯定","叫做","感器","起来","一目了然","一堆","环境","非常","链接","玩起","神器","开发","规划","路径","不能","加载","坐标系","一个","价格","真实","场景","机","获取","机器","大大","工具","岂","几个","我们","/","不","还是","。","的话","世界","等","自主","臂","rgbd","？","0","到","realsense","等等","看到","py","拍摄","编码","一句","长","仿真","不用","试一试","类似","很难","量级","一种","launch","移动","把","噪音","过程","这些","啦","哪些","type","颜色","涉及","rviz2","ros","效果","方便","learning","范畴","信息","会","强调","了然","框架","可以","啥","周边","没有","开放式","对","自己","眼中","案例","两个","呢","常用","熟悉","很多","在","开放","驾驶","，","软件","基于","只是","机械","能够","对照","load","外部","重量级","嘉宾","图形","渲染","不过","如何","再","、","数字","如果","位置","这样","大家",".","下","内容","理解","当然","人","libgazebo","有","满意","和","可视","vs","从","相机","camera","去","自动","并且","就","com","这种","想","$","众多"],"title":"**Rviz：三维可视化显示平台**","title_tokens":["*","三维","rviz","平台","：","可视化","可视","显示"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz","text":"大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾——Rviz，一款三维可视化显示的神器。","text_tokens":["过","摄像头","量级","世界","摄像","讲","rviz","重量","可视化","没有","像头","神器","了","重量级","图像","眼中","中","嘉宾","？","的","如何","呢","可视","什么","显示","一个","问题","涉及","到","三维","是","一位","一款","ros","机器","看到","本","大家","畅想","拍摄","就","这","—"," ","范畴","我们","什么样","，","介绍","机器人","。","有没有","能够"],"title":"Rviz：三维可视化显示平台","title_tokens":["三维","rviz","平台","：","可视化","可视","显示"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_1","text":"机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。","text_tokens":["摄像头","用来","么","才","模型","移动","看","层面","把","过程","懵","这些","各种","的","哪些","颜色","都","效率","所以","搞定","效果","运动","全都","传感器","255","内部","样","动机","信息","了然","机器人","数据","可以","啥","描述","周边","需要","摄像","一脸","可视化","像头","希望","通过","自己","图像","这里","什么","就是","三维","是","各种各样","这幅","你","大大提高","给","很多","在","肯定","感器","，","软件","一目了然","各样","只是","机械","雷达","一堆","环境","开发","中","渲染","规划","问","再","、","路径","数字","坐标系","激光雷达","场景","如果","位置","机器","大大","这样","出来","岂","我们","内容","理解","分析","不","。","激光","当然","坐标","移动机器人","人","rviz","自主","提高","臂","快速","和","？","传感","比如","可视","知道","但","0","从","到","相机","计算","设计","一款","去","等等","看到","还有","就","功能"," ","长","一目","众多","类似","做","导航","很难"],"title":"Rviz三维可视化平台","title_tokens":["三维","rviz","平台","可视化","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_2","text":"一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。","text_tokens":["多","rviz","不到","平台","想不到","可视化","没有","添加","出厂","更","它","或者","了","对应","开放式","自带","有","对","满意","开发","中","图形","自己","打造","也","的","话","新","可视","这个","显示","一个","官方","按照","发布","说明","插件","是","话题","机","核心","常用","ros","效果","如果","机器","方便","看到","工具","图形化","很多","就","开放","在","项","功能","一句","只有","只要"," ","我们","想","某些","，","不","基于","qt","框架","。","数据","机器人","消息","上位","做","可以"],"title":"Rviz介绍","title_tokens":["rviz","介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_1","text":"$ ros2 run rviz2 rviz2","text_tokens":["rviz2"," ","$","run","ros2"],"title":"运行方法","title_tokens":["运行","方法"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_2","text":"摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。","text_tokens":["摄像头","一种","摄像","像头","上","了","的","传感","装","是","先来","常用","最为","机器","传感器","给","肯定","感器","我们","，","机器人","。"],"title":"彩色相机仿真与可视化","title_tokens":["彩色","相机","与","可视化","仿真","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_3","text":"关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 主要配置项如下： 标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 标签：加载摄像头仿真插件","text_tokens":["对照","范围","摄像头","方法","需要","关于","摄像","模型","描述","等","像头","libgazebo","_","格式","噪音","对应","辨率","图像","的","传感","类型","type","：","配置","参数","分辨率","这个","加载","so","使用","都","标签","camera","name","命名","自由","提供","主要","ros","代码","传感器","设置","给",".","大家","编码","gazebo","项","如下","叫做","感器","我们"," ","分辨","，","介绍","仿真","。","插件"],"title":"仿真插件配置","title_tokens":["仿真","配置","插件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_4","text":"模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py","text_tokens":["摄像头","launch","摄像","模型","rviz","load","成功","把","像头","_","into","以待","拭目以待","啦","中","图像","拭目","好","不能","配置","camera","mbot","能","已经","看到","py","出来",".","并且","在","gazebo","learning"," ","信息","我们","，","仿真","$","。","ros2"],"title":"运行仿真环境","title_tokens":["仿真","环境","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_5","text":"$ ros2 run rviz2 rviz2","text_tokens":["rviz2"," ","$","run","ros2"],"title":"图像数据可视化","title_tokens":["可视化","可视","图像","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_6","text":"二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。","text_tokens":["摄像头","二维","摄像","分钱","价格比","可贵","像头","体感","环境","玩起","玩起来","外部环境","或者","外部","点云","通过","不想","不过","传感","的","比如","也","过瘾","kinect","价格","三维","相机","intel","试试","不少","realsense","常用","获取","传感器","一分","就","这种","感器","想","我们","一分钱","，","起来","仿真","不","不用","。","数据","usb","可以"],"title":"三维相机仿真与可视化","title_tokens":["三维","相机","与","可视化","仿真","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_7","text":"","text_tokens":[],"title":"仿真插件配置","title_tokens":["仿真","配置","插件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_8","text":"$ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py","text_tokens":["rgbd","gazebo","learning","launch","mbot"," ","load","$","_","into","py","ros2","."],"title":"运行仿真环境","title_tokens":["仿真","环境","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_9","text":"$ ros2 run rviz2 rviz2","text_tokens":["rviz2"," ","$","run","ros2"],"title":"点云数据可视化","title_tokens":["点云","可视","可视化","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_10","text":"除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。","text_tokens":["移动机器人","摄像头","汽车","摄像","移动","雷达","像头","和","也","的","传感","包括","三维","相机","激光雷达","来","是","常备","机器","传感器","很多","自动","驾驶","除了","动机","感器","我们","，","机器人","试一试","。","激光"],"title":"激光雷达仿真与可视化","title_tokens":["激光雷达","与","雷达","可视化","仿真","可视","激光"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_11","text":"","text_tokens":[],"title":"仿真插件配置","title_tokens":["仿真","配置","插件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_12","text":"$ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py","text_tokens":["gazebo","learning","launch","mbot"," ","load","laser","$","_","into","py","ros2","."],"title":"运行仿真环境","title_tokens":["仿真","环境","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_13","text":"$ ros2 run rviz2 rviz2","text_tokens":["rviz2"," ","$","run","ros2"],"title":"点云数据可视化","title_tokens":["点云","可视","可视化","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz-vs-gazebo","text":"好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下，Gazebo是仿真平台，核心功能是创造数据，我们没有机器人或者传感器，它可以帮我们做一个虚拟的，Rviz是可视化平台，核心功能是显示数据，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。","text_tokens":["讲","巧妇","啦","的","好","使用","一些","会用","创造","巧妇难为无米之炊","所以","核心","时候","传感器","gazebo","信息","会","强调","机器人","数据","可以","虚拟","难为","平台","可视化","没有","对","通过","自己","这里","案例","两个","不是","手上","用","来","是","常用","熟悉","很多","在","是不是","感器","，","软件","方法","流程","不到","环境","非常","它","或者","了","启动","不过","具体","再","显示","一个","真实","如果","已经","机器","大家","几个","下","了解","我们","还是","。","的话","rviz","帮","有","和","也","传感","可视","到","相信","就","这","功能"," ","混淆","仿真","做"],"title":"Rviz vs Gazebo","title_tokens":["vs","rviz"," ","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_14","text":"https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":["docs","github","com","rviz2","https","www","rviz"," ","/","stereolabs",":","ros2","."],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/","text":"RQT：模块化可视化工具 ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具——rqt。 rqt介绍 正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，接下来，大家就可以跟随我的思路，我们一起来试一试。 日志显示 图像显示 接口控制 数据曲线 数据包管理 节点可视化 参考资料 https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":["日志","小","摄像头","一种","模块","界面","更","曲线","using","模块化","sudo","的","麻烦","难免","用到","一","难免会","使用","都","一些","指令","ros","docs","会","介绍","控制","concepts","数据","实现","可以","需要","摄像","里边","参考","可视化","像头","tutorials","参考资料","通过","很","图像","这个","en","下来","来","是","提供","进行","接下来","管理","操作","很多","在","有些","—","https","，","起来","基于","资料","apt","html","然后","它","有点","了","开发","启动","中","可能","不过","具体","：","另外","加载","数据包","显示","一个","觉得","安装","命名","场景","已经","about","console","工具","这样","我","大家",".","一样","install","下","我们","/","。","的话","qt","思路","rviz","rqt","节点","而","humble","强大","命令","和","也","比如","-","简单","只","前","可视","此时","每个","接下","跟随","就","正如","功能","一句","接口"," ","$","org","试一试",":","类似"],"title":"**RQT：模块化可视化工具**","title_tokens":["*","模块","：","rqt","可视","可视化","工具","模块化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt","text":"ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具——rqt。","text_tokens":["摄像头","一种","需要","摄像","rviz","模块","可视化","rqt","像头","更","有点","了","强大","模块化","中","很","图像","可能","不过","的","比如","麻烦","简单","难免","只","可视","另外","用到","难免会","显示","使用","一个","觉得","一些","此时","场景","提供","ros","已经","操作","工具","就","有些","功能","—"," ","下","我们","会","，","。","的话"],"title":"RQT：模块化可视化工具","title_tokens":["模块","：","rqt","可视","可视化","工具","模块化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt_1","text":"正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，接下来，大家就可以跟随我的思路，我们一起来试一试。","text_tokens":["小","需要","rviz","里边","模块","类似","rqt","可视化","而","然后","界面","它","开发","了","humble","命令","sudo","通过","启动","和","思路","也","的","-","具体","前","可视","加载","这个","一","使用","都","一个","每个","安装","下来","来","命名","是","进行","接下","指令","ros","接下来","跟随","工具","这样","我","很多","大家","一样","在","就","正如","install","一句","功能"," ","我们","，","起来","$","基于","。","试一试","apt","qt","实现","可以"],"title":"rqt介绍","title_tokens":["rqt","介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_1","text":"","text_tokens":[],"title":"日志显示","title_tokens":["日志","显示"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_2","text":"","text_tokens":[],"title":"图像显示","title_tokens":["图像","显示"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_3","text":"","text_tokens":[],"title":"接口控制","title_tokens":["控制","接口"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_4","text":"","text_tokens":[],"title":"数据曲线","title_tokens":["曲线","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_5","text":"","text_tokens":[],"title":"数据包管理","title_tokens":["数据包","管理","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_6","text":"","text_tokens":[],"title":"节点可视化","title_tokens":["可视化","节点","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_7","text":"https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":["docs","html","en","https","-"," ","/","ros","rqt","about","console","concepts","org",":","using","humble","tutorials","."],"title":"参考资料","title_tokens":["参考","参考资料","资料"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/","text":"资源汇总 常用框架 自主导航 比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/ 自动驾驶 自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/ 路径规划 此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/ 机器人学 ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。 视频课程 斯坦福大学公开课 —— 机器人学 台大机器人学之运动学 Self-Driving Cars with ROS2 & Autoware 古月学院 常用链接 ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":["除此之外","autoware","仔细","一种","移动","感兴趣","模块","更","cars","除此","上","碰撞","这些","各种","这套","的","一本","driving","好","知识","理论","使用","都","即便","classic","阅读","ros","最为","运动","moveit","工程师","工程","重在","实操","docs","gazebo","动机","会","navigation","中文","guyuehome","控制","ubuntu","框架","机器人","io","结合","实现","可以","多","http","此外","参考","基本","斯坦福","auto","分拣","应用","》","经典","对","自己","内功","必备","推荐","这个","感知","公开","找到","学习","2","课程","en","自身","著作","斯坦福大学","self","是","提供","进行","修炼","常用","技能","选择","运动学","代码","基本功能","公开课","汇总","热门","很多","在","具备","驾驶","—","https","社区","autowareauto","，","autowarefoundation","《","wiki","每一","学院","版本","机械","ros2","资源","相关","html","当今","至于","仔细阅读","链接","非常","视觉","开发","了","人手","中","商业","规划","gazebosim","情况","、","路径","：","得","roscon","兴趣","之","一个","碰撞检测","之外","居","www","gitlab","with","任何","基本功","如果","福大","导航系统","机器","著名","开课","台大","documentation","工具","系统","大家",".","导论","几个","感兴","视频","我们","/","内容","不","典型","。","github","之一","完整","被","移动机器人","等","书籍","自主","臂","快速","humble","对应","有","大学","和","机器人学","也","比如","-","cn","算法","丰富","经典著作","index","&","包含","称为","理论知识","人学","还有","自动","robots","就","要","这","com","商业化","功能","行业"," ","本书","org","检测",":","古月","导航"],"title":"**资源汇总**","title_tokens":["*","汇总","资源"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_1","text":"","text_tokens":[],"title":"资源汇总","title_tokens":["汇总","资源"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_2","text":"","text_tokens":[],"title":"常用框架","title_tokens":["框架","常用"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_3","text":"比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/","text_tokens":["相关","导航","完整","移动机器人","移动","参考","基本","自主","链接","实现","上","开发","了","快速","应用","自己","各种","和","中","也","的","比如","这套","好","：","算法","这个","使用","都","即便","提供","进行","任何","基本功","如果","ros","导航系统","机器","代码","基本功能","系统","大家",".","在","要","具备","功能","动机","https"," ","会","我们","/","，","navigation","内容","不","框架","机器人","。",":","org","ros2","可以"],"title":"自主导航","title_tokens":["自主","导航"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_4","text":"自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/","text_tokens":["之一","当今","autoware","一种","等","感兴趣","参考","模块","非常","链接","auto","了","应用","有","对","中","和","商业","也","的","规划","、","：","这个","感知","兴趣","丰富","一个","www","是","gitlab","ros","如果","最为","著名","机器","包含","热门","系统","很多","自动","大家",".","在","这","几个","驾驶","—","功能","行业","商业化"," ","感兴","社区","https","/","，","autowarefoundation","控制","autowareauto","典型","框架","机器人","。",":","org","io","实现","可以"],"title":"自动驾驶","title_tokens":["驾驶","自动"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_5","text":"此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/","text_tokens":["相关","多","此外","等","非常","视觉","链接","臂","更","分拣","碰撞","经典","中","规划","的","也","、","这个","使用","都","找到","碰撞检测","是","ros","运动","moveit","还有","大家",".","在","这","功能","https"," ","/","，","内容","框架","检测","。",":","org","机械","可以"],"title":"路径规划","title_tokens":["路径","规划"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_6","text":"ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。","text_tokens":["相关","被","除此之外","仔细","至于","书籍","仔细阅读","除此","开发","》","对应","这些","内功","人手","经典","有","机器人学","的","比如","一本","情况","必备","得","知识","推荐","理论","都","学习","之外","自身","经典著作","著作","是","阅读","修炼","选择","ros","技能","机器","称为","理论知识","工程师","工程","工具","人学","重在","大家","实操","导论","就"," ","中文","本书","，","版本","机器人","。","每一","结合","《","可以"],"title":"机器人学","title_tokens":["人学","机器","机器人学","机器人"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_7","text":"斯坦福大学公开课 —— 机器人学 台大机器人学之运动学 Self-Driving Cars with ROS2 & Autoware 古月学院","text_tokens":["autoware","斯坦福","cars","大学","机器人学","-","driving","公开","之","斯坦福大学","self","with","福大","运动学","运动","&","公开课","开课","机器","台大","人学","—"," ","机器人","学院","古月","ros2"],"title":"视频课程","title_tokens":["视频","课程"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_8","text":"ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":["html","http","humble","gazebosim","cn","：","roscon","2","en","居","www","classic","index","ros","documentation",".","robots","docs","gazebo","com","https"," ","guyuehome","/","wiki","ubuntu","org",":","古月","ros2","github"],"title":"常用链接","title_tokens":["链接","常用"]}]}