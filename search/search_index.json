{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的电气时代。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的数字时代，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发，智能机器人时代正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。 教程链接 课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 博客泡泡： https://www.guyuehome.com/ 教程问答： https://www.guyuehome.com/bubble/index 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 参考资料： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["操作系统","baidu","此时","提出","动作","七八","减速","正式","但是","并","时代","年","电气","控制器","完全","智能","人工智能","参考资料","课程","热点","七八十年","感器","载体","电机","出现","驱动器","横跨","operating","状","guyuehome","设备","于","系统","依然","system","必将","俗称","gitee","传感器","软件","_","就是","。","主角","机器","四足","应用","只能","com","按照"," ","呈","驾驶","教程","劳动","释放","生产","ros2","七八十","业生","人类","思考","最为","https","更","爆发","/","之后","算机","伺服电机","之一","八十年","tutorials","多","agv","感知","拉开","大","发展","这是","动力","工厂","技术","泡泡","随着","这","要求","博客","十年","三个","自动","人工","了","关注","机器人","驱动","检测","github","ai","最佳","1dvxugmhxlxnsnfdezuxw0g","传感","和","www","快速","问答","逐渐","2015","重要","汽车","缺少","类型","计算","开发","帮助","主要","层面","class","链接","参考","局部","教器","后","数字","自主","的","狗","而言","命令","bubble","提取","由示","、","过程","年前","有限","丰富","送餐","pan","工业","操作","s","21","码","不断丰富","等","也","计算机","劳动力","仿生","index","八十","经历","控制","，","图文","环境","家庭","伺服","资料","我们","高","太","exc6","2000","没有","服务","是","时期",":","智能化","序幕","book","不过","：","工业生产","减速机","—","操控","成为","拉开序幕","视觉","井喷","前夜","对","视频","robot",".","源码","更加","不断","执行"],"title":"引言","title_tokens":["引言"]},{"location":"#_1","text":"课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 博客泡泡： https://www.guyuehome.com/ 教程问答： https://www.guyuehome.com/bubble/index 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 参考资料： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["21","码","github","baidu","_","index","1dvxugmhxlxnsnfdezuxw0g","图文","com","www"," ","教程","资料","问答","参考资料","课程","exc6","ros2","https","pan","/",":","class","参考","book","：","链接","tutorials","guyuehome","视频","bubble","提取",".","源码","博客","gitee","泡泡","s"],"title":"教程链接","title_tokens":["链接","教程"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["生态","实践","未经","使用","地区","及","模式","进行","传播","声明","合法","年","限于","公司","小时","课程","面向","任何","所有","声明者","不","交流学习","《","guyuehome","人才","创建","优质","未来","违反","上述","120","被","高校","追究","平台","学习","究其","授权","万人","法律","。","包括","机器","依法","com","有权"," ","努力","古月","有限公司","责任","培养","2011","至今","畅销","书面","线上","明者","brand","销售","知名","校企","构建","提供","科技","法律责任","为","累积","拥有","众多","课件","ros","机器人","如需","万字","ai","超过","学","产品","（","个人","用户","武汉","镜像","本","www","人才培养","和","创新","许可","高质","不得","开发","通过","均","建立","+","合作","企业","的","质量","有限","、","一体","与","致力","图书","致力于","请","内容","微控","居","等","华语","，","联系","仅限","网站","版权","交流","或","》","面向未来","修改","高质量","其它","是","出版","作品","上","精锋","复制","对本","集","）","赋能","单位","@","追究其","视频","但",".","将","源码","抄录","学习者","1000","捆绑","社区"],"title":"关于教程","title_tokens":["关于","教程"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["生态","实践","地区","及","模式","年","小时","课程","面向","交流学习","《","guyuehome","人才","创建","优质","未来","120","高校","平台","学习","万人","。","机器","com"," ","努力","古月","培养","2011","至今","畅销","线上","知名","校企","构建","提供","为","累积","众多","ros","机器人","万字","ai","超过","（","用户","www","人才培养","创新","高质","开发","通过","建立","+","合作","企业","的","质量","、","一体","与","致力","图书","致力于","内容","居","等","华语","，","交流","》","面向未来","高质量","是","出版","集","）","赋能","视频",".","学习者","1000","社区"],"title":"学机器人，上古月居","title_tokens":["，","机器人","居","上","机器","古月","学"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["未经","使用","进行","传播","声明","合法","限于","公司","课程","任何","所有","声明者","不","guyuehome","违反","上述","被","追究","学习","究其","授权","法律","。","包括","依法","com","有权"," ","古月","有限公司","责任","书面","明者","brand","销售","科技","法律责任","为","拥有","课件","如需","产品","个人","用户","武汉","镜像","本","和","许可","不得","均","的","有限","、","与","请","微控","居","等","，","联系","仅限","网站","版权","或","修改","其它","作品","精锋","复制","对本","单位","@","追究其","视频","但","将",".","源码","抄录","捆绑"],"title":"版权声明","title_tokens":["版权","声明"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/","text":"ROS/ROS2是什么 智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。 ROS的诞生 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS的发展 ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称ROSCon，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。 ROS的特点 ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的应用案例在社区中沉淀下来； ROS本身也是完全开源的，商业许可证非常宽松； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品，缩短了产品的上市时间； ROS也可以跨平台使用，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多支持工业应用的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。 参考资料 关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["叠","生态","项目","完成","2022","使用","此时","一个","作为","起点","但是","时代","暴露","不乏","不断更新","只想","很多","部件","斯坦福","精致","曲线","中","组成","别人","通常","齐聚一堂","正式版","时间","零","快","模块","左右","都","给","这群","托管","官方","pr2","a","包","开源","人才","更为","受限于","于","第一个","系统","所有人","度","开始","120","此","应用软件","风险","找到","成功","学习","下来","类似","近几年","得以","代","机器","好","月","全书","一家","每个","宽松","古月","手机","价格便宜","ros2","人类","存储","answers","2011","推进","等等","认识","可以","；","普及","终于","疫情","浏览量","就","配合","说明","发展","这是","动力","世界","扫地","复合","随着","每年","40","性能","记录","开发者","却","intel","得到","机器人","跟随","这一波","大部","资本","方式","个人","神兵","陪","80","轰动","非常","投资","复用","许可","模块化","？","汽车","数据","商业","以","之","后期","开发","帮助","主要","核心","的","福大","以叠","投了","许可证","率","多万","助推","而","而言","四项","移动机器人","、","向前","kinect","如何","使命","进步","欢迎","虽然","熟悉","多媒体系统","居","不仅","看中","“","熨烫","同时","向","你","跑","国家","经历","适用","整合","提问","不下","学术","turtlebot","，","实现","呢","差不多","变为","时间轴","我们","玩耍","怀揣","网站","总体","给出","没有","外观","ros1","低","起","成本","做出","目标","：","统统","全球","视频","下","将",".","希望","把","制造","发表","推动","社区","2","泡泡","简称","做法","同年","正如","全球化","25","革命","肩负着","进行","动机","并","由","完全","推出","150","尝试","课程","接下","任何","青年","各样","乐意","做到","不","更新","基本","当时","而生","微软","限性","此后","在","肩膀","无疑","带领","长期","为了","然后","无聊","总称","万人","就是","创始","方法","改为","应用","他们","有人","日常","成果","价格","直接","绝对","还","最为","更","各项","臂","踏上","做","促使","线上","框架","还有","野蛮","解决","离不开","掌握","当初","地域","几乎","高效","肩负","成熟","介于","大步","同理","笔记本","亚马","以上","越来","索引","方向","很快","不是","前","两年","嵌入式","全新","本","查看","这样","和","因为","自身","不多","多项","认识一下","打","逐渐","2015","其他","采购","百万","沉淀","到","选择","层面","能够","轮子","论坛","说干就干","万左右","一款","personal","风险投资","已有","部分","过程","机械","涉及","生态系统","之上","月底","条","资源","自己","来到","图中","向前走","步伐","roscon","繁荣","linux","圈","资料","一系","底盘","嵌入","这个","缩短","开发工具","服务","木头","现在","willow","年轻","对于","2007","案例","无论","家","清晰","长远","大会","对","干","同一","款","上图","趋势","强悍","可为","最后","一段","全人","站","基本上","衣服","各种各样","本身","研发","举办","充足","时至今日","物体","提出","之旅","原型","效率","conference","正式","甚至","新增","限于","根据","参考资料","棒","标准","系列","确定","商业化","高度","时候","才","感器","几年","资金","次数","生态系","来讲","上去","所学","进化","入门教程","其实","一起","后续","局限性","这位","访问量","年轻人","system","有","第一次","增长","平台","特点","头发","所以","利器","维基","从","全人类","广泛","同学","一定","造","discourse","速度","主阵地","嘉宾","没想","算是","引擎","教程","更好","会","实验","让","讲解","来看","全","加","联合","领域","整理","一大笔钱","/","效果","为什么","首先","这里","活跃","几百万","事情","处理","多","250","接下来","一切","加快","100","google","为","具备","柔性","毛巾","局限","大笔","不要","了","友好","c","迎来","苹果","人","最高","起来","传感","2014","名称","world","专业","创意","每","快速","一大","2010","2017","或者","重要","神秘","近两年","工具","聊天","该","分钟","电路","标志","设计","上市","结晶","工程师","收拾","有志","一堂","真正","想到","单独","人数","深知","复杂","提取","零部件","维基百","这些","知识","来自","操作","功能","发布","下载","大学","大家","而且","越来越","洗衣","明智","重量","真的","index","比如","来","问题","体感","研究","美妙","详细","一次","采用","如果","爆款","推荐","版本","已经","之内","不同","挑战","智能化","回到","看到","重量级","板块","据库","garage","剪头发","—","代表","注意","迅猛","绝大","光靠","体系","巨大","humble","特性","浪潮","啦","不断","参考","从中","还是","统计","操作系统","大部分","情况","用","重新","回答","代码","容易","两个","普遍","年","5","”","智能","电脑","公司","一系列","一大步","版","不开","智慧","这款","直到","掀起","所有","20","因","windows","一群","阵地","有没有","浏览","望而却步","可能","横跨","operating","几百","机制","图","张图","活动","只","被","那","同样","传感器","做成","游戏机","水下","软件","访问","程度","15","。","第一","万万","针对","要","游戏","稳定"," ","努力","尽量","个","围绕","百科全书","不想","实验室","至今","b","分享","虽好","历经","几个","不到","又","2012","四大","新鲜事","大","原本","频繁","增长速度","斯坦福大学","提供","技术","台球","出来","这","了解","元素","org","什么","媒体","ros","身影","简单","诞生","新鲜","一下","github","人形","最佳","入门","面纱","产品","用户","肯定","叫做","受限","wiki","之王","问答","笔记","团队","很","各种","通信","百科","其次","原因","一步","跨平台","只要","关于","通过","提高","一大笔","加上","进入","维基百科","页面","年底","多年","答案","扩展","今日","数据库","迭代","支持","工业","大大","ubuntu","正在","着","大有可为","内容","packages","等","搜索","也","基于","为例","一样","其中","量级","独立","控制","集合","做饭","大量","初期","软件系统","一些","居高不下","笔记本电脑","上边","一套","没想到","却步","是","活跃度","工程","早期","上","亚马逊","讨论","既然","关键","想法","绝大部分","一届","五年","便宜","无论是","巨人","排名","总而言之","成为","用于","场景","robot","xbox","源码","相关","移动","新","多媒体","远","万"],"title":"ROS和ROS2是什么","title_tokens":["什么","是","和","ros","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#rosros2","text":"智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。","text_tokens":["什么","下来","操作系统","了","大家","ros","机器人","方向","一下","重量","。","提出","向","机器","面纱","量级","时代","，","应用","嘉宾","呢"," ","智能","认识一下","我们","全","高度","？","ros2","接下","神秘","中","掀起","是","认识","挑战","智能化","开发","重量级","进化","而生","就","又","接下来","一起","的","场景","对","这位","巨大","系统","带领","这","那","操作","正在"],"title":"ROS/ROS2是什么","title_tokens":["什么","是","/","ros","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。","text_tokens":["叠","操作系统","完成","此时","用","充足","物体","一个","原型","效率","容易","甚至","但是","并","年","5","很多","智能","部件","斯坦福","精致","标准","系列","尝试","一系列","一大步","时候","中","组成","这款","别人","才","青年","所有","资金","因","一群","都","不","当时","而生","有没有","可能","pr2","横跨","一起","在","图","系统","所有人","有","第一次","只","那","应用软件","同样","平台","找到","软件","头发","类似","所以","无聊","得以","代","就是","。","机器","第一","应用","针对","他们","要"," ","实验","有人","个","手机","还","联合","整理","可以","更","不想","实验室","做","为什么","分享","事情","就","处理","框架","不到","多","一切","斯坦福大学","技术","台球","100","出来","这","高效","大步","性能","柔性","毛巾","越来","什么","了","却","ros","机器人","诞生","苹果","人","很快","不是","个人","陪","这样","肯定","专业","和","因为","轰动","非常","打","一大","或者","团队","重要","很","？","聊天","分钟","电路","后期","只要","开发","层面","帮助","设计","说干就干","收拾","有志","的","福大","一款","以叠","personal","深知","复杂","答案","零部件","、","机械","向前","如何","操作","功能","涉及","大学","虽然","大家","条","而且","越来越","洗衣","等","自己","也","真的","基于","熨烫","为例","你","其中","图中","问题","独立","学术","，","向前走","实现","呢","做饭","研究","初期","圈","一次","我们","一些","玩耍","一系","软件系统","这个","如果","一套","给出","没有","服务","外观","已经","之内","木头","是","低","做出","上","对于","2007","：","看到","既然","剪头发","想法","—","家","成为","用于","光靠","干","同一","款","robot","强悍","最后","推动","2","从中","衣服"],"title":"ROS的诞生","title_tokens":["的","诞生","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_1","text":"ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称ROSCon，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。","text_tokens":["项目","操作系统","大部分","2022","使用","举办","同年","一个","提出","原型","conference","肩负着","进行","正式","但是","起点","时代","各种各样","暴露","不乏","年","5","限于","只想","电脑","公司","斯坦福","推出","版","确定","中","直到","感器","几年","所有","各样","齐聚一堂","正式版","时间","给","这群","官方","望而却步","微软","pr2","operating","限性","开源","局限性","在","几百","受限于","此后","于","第一个","系统","年轻人","system","长期","开始","增长","被","风险","传感器","为了","成功","游戏机","软件","类似","所以","从","创始","。","改为","机器","第一","万万","应用","一家","没想","他们","游戏","稳定"," ","每个","教程","会","讲解","让","价格便宜","价格","直接","ros2","2011","一大笔钱","可以","更","普及","做","终于","疫情","分享","这里","虽好","几百万","线上","就","历经","多","2012","野蛮","大","原本","这是","发展","斯坦福大学","当初","加快","扫地","随着","这","每年","出来","肩负","成熟","为","了解","介于","笔记本","亚马","局限","越来","大笔","了","开发者","ros","intel","身影","机器人","诞生","迎来","很快","人","跟随","大部","资本","前","两年","传感","2014","个人","名称","全新","world","本","和","因为","叫做","受限","每","快速","一大","投资","2010","逐渐","笔记","2017","团队","重要","各种","2015","百万","近两年","原因","商业","该","后期","开发","到","标志","设计","能够","一大笔","加上","进入","一堂","年底","真正","想到","的","福大","投了","一款","单独","风险投资","助推","而","部分","多年","提取","、","过程","kinect","来自","迭代","支持","操作","使命","发布","功能","大大","ubuntu","大学","之上","着","月底","熟悉","越来越","等","自己","看中","也","不仅","一样","其中","经历","适用","不下","问题","turtlebot","控制","，","体感","roscon","步伐","变为","圈","时间轴","笔记本电脑","居高不下","我们","底盘","采用","这个","爆款","没想到","却步","服务","版本","已经","是","起","成本","现在","早期","willow","年轻","亚马逊","2007","回到","garage","关键","五年","绝大部分","—","一届","注意","便宜","成为","大会","全球","绝大","款","下","humble","robot","xbox","把","推动","简称"],"title":"ROS的发展","title_tokens":["发展","的","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_2","text":"ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的应用案例在社区中沉淀下来； ROS本身也是完全开源的，商业许可证非常宽松； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品，缩短了产品的上市时间； ROS也可以跨平台使用，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多支持工业应用的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["生态","本身","做法","使用","重新","时至今日","正如","一个","全球化","动机","并","普遍","由","新增","”","完全","很多","智能","公司","标准","商业化","智慧","中","组成","别人","通常","各样","零","时间","做到","windows","模块","都","生态系","来讲","上去","给","一起","a","人才","肩膀","在","机制","开源","系统","有","此","那","被","做成","平台","水下","软件","特点","下来","从","总称","全人类","广泛","。","就是","机器","造","应用","一家","他们"," ","宽松","引擎","会","尽量","成果","围绕","ros2","人类","还","直接","领域","推进","可以","更","至今","；","臂","做","b","促使","分享","这里","就","多","四大","发展","技术","复合","这","同理","具备","站","越来","媒体","不要","了","友好","ros","身影","简单","机器人","c","人形","不是","产品","嵌入式","和","这样","自身","创意","多项","快速","非常","复用","许可","模块化","各种","采购","通信","汽车","一步","工具","以","商业","跨平台","之","开发","到","沉淀","设计","上市","结晶","提高","轮子","新","核心","的","许可证","已有","率","部分","移动机器人","、","这些","今日","机械","向前","支持","功能","进步","工业","生态系统","着","大家","多媒体系统","越来越","明智","自己","也","“","同时","比如","来","跑","整合","集合","，","向前走","实现","繁荣","linux","我们","怀揣","嵌入","这个","缩短","开发工具","已经","ros1","是","智能化","目标","看到","上","：","案例","无论","无论是","巨人","家","代表","统统","成为","长远","全球","用于","对","体系","特性","将","最后","制造","移动","把","全人","社区","多媒体","远","还是","各种各样"],"title":"ROS的特点","title_tokens":["特点","的","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_3","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。","text_tokens":["统计","研发","情况","大部分","使用","一个","提出","回答","作为","25","革命","两个","根据","很多","棒","150","曲线","中","基本上","几年","次数","任何","20","乐意","快","左右","都","不","基本","给","浏览","其实","包","在","更为","无疑","访问量","张图","度","活动","有","增长","学习","访问","利器","维基","近几年","从","万人","程度","15","就是","。","机器","速度","discourse","月","应用","算是"," ","每个","教程","会","来看","日常","加","绝对","存储","answers","等等","最为","可以","；","各项","浏览量","这里","活跃","几个","就","多","250","新鲜事","说明","发展","这是","频繁","大","增长速度","动力","地域","这","以上","40","元素","记录","越来","org","什么","了","开发者","ros","得到","索引","机器人","新鲜","人","这一波","大部","最高","最佳","起来","方式","神兵","用户","查看","不多","和","wiki","80","本","每","快速","非常","问答","其他","很","重要","各种","？","百科","数据","关于","开发","到","参考","通过","选择","论坛","万左右","维基百科","页面","新","核心","的","多万","人数","而言","助推","部分","四项","、","维基百","这些","数据库","功能","下载","发布","正在","大家","大有可为","packages","资源","越来越","等","也","index","比如","国家","你","整合","其中","问题","，","呢","差不多","我们","网站","上边","总体","如果","已经","不同","是","活跃度","现在","上","看到","：","讨论","据库","总而言之","绝大部分","代表","清晰","排名","迅猛","成为","全球","绝大","趋势","可为",".","上图","源码","浪潮","相关","希望","发表","社区","万"],"title":"ROS的社区","title_tokens":["的","社区","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#_1","text":"关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["项目","大部分","使用","之旅","一个","作为","代码","不断更新","参考资料","不开","课程","中","所有","阵地","都","更新","所学","托管","入门教程","后续","一起","开源","在","有","120","开始","找到","学习","然后","从","万人","。","方法","同学","一定","机器","好","主阵地","全书","要"," ","教程","更好","会","努力","古月","ros2","百科全书","还","最为","可以","效果","踏上","首先","这里","分享","几个","配合","还有","解决","离不开","掌握","提供","世界","技术","几乎","泡泡","这","google","ros","机器人","github","入门","大部","本","和","之王","重要","百科","其次","工具","关于","开发","参考","主要","工程师","的","部分","扩展","知识","欢迎","大家","内容","居","搜索","也","来到","你","提问","问题","，","大量","美妙","详细","资料","我们","网站","这个","推荐","是","工程","板块","绝大部分","—","成为","绝大","视频","将","一段","最后","啦","不断","社区"],"title":"参考资料","title_tokens":["参考","参考资料","资料"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/","text":"ROS2对比ROS1 在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。 ROS1的局限性 首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。 全新的ROS2 ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。 ROS2 vs ROS1 系统架构 在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。 DDS通信 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。 核心概念 ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。 编码方式 再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。 命令行 最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随课程，你就会慢慢理解这些特性。","text_tokens":["项目","完成","协作","唯一","使用","一个","catkin","尤其","优化","么","足够","批量","但是","时代","打交道","命令行","层","如","很多","用到","master","消费市场","最","android","可选项","印象","中","经验","基础","时间","出现","都","面对","给","主","大幅","100ms","pr2","黑客","出错","强壮","开源","设备","于","第一个","系统","进程","开始","dds","风险","找到","涌现","学习","成功","受制","tcp","搭载","自","类似","体现","一团乱","机器","相对","想要","好","一致","运动学","一家","运动","每个","换成","架构","手机","ros2","过去","不好","可以","；","产品开发","程序","普及","产品化","就","入侵","安装","发成","小伙","说明","发展","动力","1ms","稳定性","管理","随着","再","不太","性能","三个","ceo","怎样","考虑","能力","开发者","配置","机器人","跟随","大部","当然","细节","完善","推倒","它","学","方式","借鉴","延迟","干扰","非常","复用","重来","更具","毛坯房","？","汽车","数据","商业","不断涌现","colcon","开发","应用层","话题","可靠","主要","链接","建立","企业","核心","的","率","而言","移植","新一代","而","表示","强","、","全部","第二个","如何","使命","陆续","虽然","请","熟悉","小","不仅","明显","同时","你","适用","启动","学术","，","实时","实现","呢","级别","run","解密","诟病","成","接触","我们","内部","怀揣","放在","总体","盖","没有","是从","ros1","rmw","成本","单兵","运行","编译系统","目标","国际标准","：","运算","编程语言","全球","udp","先进","大致","一旦","下","将","之外","把","没","翻地","社区","简称","推倒重来","更接","安全性","第二代","rosbuild","可选","勿躁","轻松","内","进行","也许","并","图像","名字","编码方式","完整","颠覆性","总结","课程","协议","不能","面向","整体","任何","雷达","各样","中间层","不用","做到","一边","上升","不","基本","这台","力学","限性","广泛应用","至关","一一","市场","在","经常","未来","共享","带领","开发方式","wifi","为了","二代","然后","国际","担忧","就是","受制于","主角","变革","方法","相比","纠结","可靠性","看看","他","应用","大幅度","项目管理","他们","按照","有且","不会","性","慢慢","变化","通用","下边","直接","编写","不爽","还","最为","更","原有","需求","amr","做","能","框架","还有","而已","解决","对象","不再","哪些","历史","几乎","差异","以上","越来","发送","学术研究","最大","驱动","厂商","不是","嵌入式","全新","专注","本","和","因为","这样","底层","突然","其他","系统工程","由于","百万","概念","测试","继续","计算","一团乱麻","到","选择","层面","某","最新","高昂","能够","收","建筑","ament","真实","一款","以下几点","依赖","历史使命","部分","分解","过程","与","一本","一行","之上","资源","自己","打成","难度","fastrtps","可移植","解算","先","微控制器","减少","管理器","linux","复杂度","嵌入","这个","搬","看","服务","修改","完整性","对于","无论","长远","角色","干掉","对","款","接近","方便","更换","最后","更加","前方","翻新","各种各样","研发","稍安","升级","下要","充足","个体","网络","discovery","精力","所示","甚至","基本保障","分布式","之初","控制器","只不过","走","标准","时候","连接","小伙伴","rosrun","接口","来讲","千差万别","除此","后续","其实","局限性","只有","部头","有","节点","平台","切换","现有","语言","所以","实时性","从","格局","属性","广泛","深入","封装","上手","具体","一定","发布者","总之","只能","天翻地覆","信息","宕机","驾驶","致使","教程","更好","会","航天","让","讲解","来看","尽力","全","编译器","选项","有线","可读性","大部头","/","为什么","发","首先","这里","一种","另","几百万","含义","处理","多","middleware","确实","接收","面向对象","走向市场","阶段","要求","陌生","为","彼此","具备","课时","局限","自动","二种","是因为","布式","了","售价","不要","topic","作战","编译","保留","调试","揭秘","（","应该","名称","移植性","交给","丢","到底","只是","两者","每","便于","或者","重要","通信协议","颠覆","实力","工具","编码","该","多功能","指挥","听说","变得","带来","设计","批量生产","vs","真正","复杂","去","几点","这些","丰富","标准化","操作","功能","发布","厂家","时","条件","大家","算力","越来越","客户端","通用性","常","道坎","比如","可移植性","来","加入","问题","结合","rostopic","环境","家庭","省略","研究","存在","远比","高","分散","macos","或","如果","以下","动力学","需要","右侧","版本","已经","不同","联网","得","挑战","对比","5g","举","不过","幅度","内存","—","消失","注意","听","理解","策略","灵活","消费","初次","绝大","安全","周期","巨大","特性","交道","适合","简单明了","过来","啦","不断","定性","大部分","之前","操作系统","间层","即可","用","重新","迁移","保障","加密","过","代码","总体而言","当","python","伙伴","两个","编程","面临","rtos","软件开发","智能","从而","电脑","理器","新版","公司","c++","不难理解","似乎","一代","不难","所有","借助","符合","是否","windows","装修","另外","可能","很大","机制","导致","体验","几百","张图","适配","依然","良好","还会","那","行人","做成","共享内存","同样","行为","房子","软件","左侧","。","诸多","调用","第一","之间","第二种","一页","针对","要","稳定","除了"," ","可读","比","api","第二","生产","尽量","除此之外","单兵作战","分布","成功经验","之后","满足","切记","开发成本","例子","大","原本","电脑系统","一团","频繁","客户","集成","提供","意义","方案","这","了解","以及","保证","什么","乱麻","ros","简单","图片","诞生","指定","工作","一下","提","最佳","迈过","最终","产品","毛坯","用户","肯定","叫做","接入","库会","常用","各种","通信","一步","中间","跨平台","类型","python3","流程","只要","生活","通过","提高","会成","后","各位","二个","命令","答案","mcu","有限","支持","里","工作站","无法","等","也","基于","一样","其中","独立","控制","部署","多个","定义","大量","通信接口","对系统","物","软件系统","一些","网络连接","较","交付","地方","完","一套","why","写","是","工程","上","发现","自家","改","角度","绝大部分","）","至关重要","用于","不够","场景","暂且","担心","但","信号","opensplice","最早","相关","走向"],"title":"ROS2对比ROS1","title_tokens":["对比","ros1","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2ros1","text":"在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。","text_tokens":["之前","ros","使用","从","第二代","就是","。","一个","你","过","其中","也许","么","，","看看","名称","和","到底"," ","我们","第二","或","来看","变化","？","ros2","ros1","听说","对比","做","上","能","不","就","多","大","的","在","这","有","学习","二代"],"title":"ROS2对比ROS1","title_tokens":["对比","ros1","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros1","text":"首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。","text_tokens":["大部分","完成","用","充足","一个","网络","足够","批量","但是","并","甚至","似乎","一代","课程","中","连接","时间","不用","出现","都","不","pr2","黑客","这台","市场","在","设备","第一个","系统","有","良好","那","风险","为了","平台","找到","做成","涌现","搭载","软件","类似","担忧","从","就是","。","主角","具体","机器","第一","可靠性","他","应用","针对","只能","天翻地覆","要"," ","驾驶","致使","会","航天","让","来看","生产","单兵作战","ros2","有线","可以","；","普及","为什么","首先","处理","就","入侵","框架","原本","发展","历史","走向市场","随着","这","具备","保证","自动","是因为","什么","了","能力","ros","售价","学术研究","机器人","诞生","工作","作战","大部","当然","它","最终","产品","嵌入式","丢","这样","因为","和","干扰","或者","各种","？","通信","由于","数据","汽车","实力","类型","不断涌现","计算","开发","设计","可靠","高昂","批量生产","的","一款","新一代","答案","部分","复杂","有限","支持","虽然","条件","工作站","算力","资源","小","自己","也","比如","问题","独立","学术","，","实时","呢","家庭","级别","研究","一些","我们","内部","网络连接","嵌入","地方","没有","服务","why","已经","ros1","是","成本","单兵","运行","目标","上","：","运算","绝大部分","—","先进","不够","用于","绝大","款","适合","最早","不断","更加","翻地","走向"],"title":"ROS1的局限性","title_tokens":["的","ros1","局限性","局限","限性"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2","text":"ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。","text_tokens":["项目","协作","完成","使用","一个","catkin","尤其","优化","但是","时代","很多","master","消费市场","android","中","经验","基础","出现","都","面对","给","100ms","黑客","出错","强壮","于","第一个","系统","dds","风险","成功","受制","搭载","类似","体现","机器","相对","好","运动学","运动","架构","手机","ros2","过去","不好","可以","产品化","就","入侵","说明","动力","1ms","稳定性","管理","性能","怎样","考虑","开发者","机器人","细节","推倒","它","借鉴","重来","更具","毛坯房","？","汽车","数据","colcon","开发","可靠","链接","的","移植","强","、","全部","如何","使命","虽然","不仅","明显","同时","，","实时","实现","呢","解密","我们","怀揣","盖","没有","ros1","运行","编译系统","：","一旦","下","把","推倒重来","安全性","rosbuild","内","进行","并","完整","颠覆性","课程","不能","任何","各样","不用","做到","不","基本","力学","市场","在","经常","未来","wifi","为了","就是","受制于","方法","变革","相比","纠结","应用","项目管理","他们","不会","性","变化","通用","直接","编写","还","更","原有","需求","amr","能","框架","不再","历史","差异","越来","发送","不是","全新","和","这样","系统工程","测试","继续","到","选择","层面","最新","能够","建筑","ament","一款","以下几点","历史使命","分解","与","之上","自己","打成","解算","微控制器","管理器","linux","这个","修改","完整性","无论","长远","角色","对","方便","更加","前方","翻新","各种各样","研发","升级","下要","个体","网络","甚至","基本保障","分布式","之初","控制器","标准","时候","连接","接口","千差万别","后续","有","节点","平台","语言","所以","实时性","格局","一定","具体","宕机","驾驶","会","让","尽力","全","来看","编译器","一种","多","阶段","要求","为","具备","课时","自动","二种","布式","了","编译","保留","调试","（","只是","或者","颠覆","工具","设计","真正","复杂","去","几点","这些","标准化","操作","大家","算力","越来越","通用性","比如","问题","结合","环境","远比","macos","以下","动力学","需要","已经","不同","得","挑战","策略","消费","安全","周期","巨大","特性","适合","定性","操作系统","用","重新","保障","加密","代码","python","两个","面临","rtos","智能","电脑","理器","新版","c++","所有","借助","windows","装修","可能","很大","机制","导致","体验","还会","行人","那","行为","房子","软件","。","诸多","之间","第一","第二种","针对","要","稳定","除了"," ","比","api","第二","尽量","分布","成功经验","满足","电脑系统","原本","大","提供","方案","这","以及","ros","简单","工作","一下","提","最佳","最终","产品","毛坯","肯定","叫做","各种","通信","跨平台","python3","流程","生活","后","mcu","无法","等","也","独立","控制","部署","大量","对系统","网络连接","较","是","工程","上","发现","）","用于","场景","但","信号","走向"],"title":"全新的ROS2","title_tokens":["的","全新","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2-vs-ros1","text":"","text_tokens":[],"title":"ROS2 vs ROS1","title_tokens":[" ","ros1","ros2","vs"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_1","text":"在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。","text_tokens":["间层","操作系统","可选","一个","discovery","内","进行","过","打交道","图像","并","名字","只不过","层","rtos","很多","从而","master","走","最","理器","公司","标准","不难理解","可选项","协议","时候","中","整体","不难","印象","连接","所有","雷达","中间层","windows","接口","都","不","另外","后续","至关","在","机制","张图","系统","进程","共享","只有","有","开始","那","dds","节点","找到","共享内存","tcp","学习","自","左侧","类似","就是","。","封装","深入","一团乱","方法","调用","好","应用","信息","稳定"," ","有且","会","让","架构","变化","下边","ros2","选项","可以","程序","安装","就","框架","而已","接收","频繁","一团","客户","哪些","提供","管理","再","这","不太","了解","彼此","ceo","乱麻","了","ros","简单","驱动","完善","它","方式","应该","和","肯定","底层","这样","两者","突然","库会","重要","通信协议","通信","数据","中间","指挥","一团乱麻","变得","应用层","开发","通过","主要","会成","建立","的","依赖","而","复杂","、","这些","操作","发布","里","大家","请","客户端","也","明显","基于","比如","一样","，","大量","先","通信接口","成","接触","管理器","linux","我们","macos","这个","如果","一套","看","需要","右侧","是从","ros1","写","是","得","对比","发现","上","不过","内存","消失","—","注意","听","至关重要","理解","udp","大致","角色","交道","但","将","简单明了","更换","把","更加"],"title":"系统架构","title_tokens":["架构","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#dds","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。","text_tokens":["唯一","重新","用","一个","加密","代码","轻松","精力","优化","么","并","master","最","标准","协议","中","是否","符合","不用","接口","都","不","来讲","给","基本","广泛应用","其实","开源","在","于","系统","适配","dds","为了","tcp","切换","软件","然后","类似","国际","所以","属性","就是","。","广泛","机器","相比","想要","纠结","好","应用","一家","总之","要","稳定","除了"," ","按照","每个","会","让","变化","ros2","不爽","可以","更","/","程序","产品开发","需求","做","发","满足","另","这里","一种","开发成本","就","安装","例子","多","还有","middleware","发成","频繁","解决","提供","再","这","为","性能","三个","了","ros","最大","配置","简单","指定","机器人","厂商","不是","当然","产品","应该","用户","延迟","丢","交给","这样","肯定","底层","专注","每","复用","接入","其他","各种","通信协议","通信","？","数据","商业","该","听说","只要","带来","开发","选择","层面","某","设计","能够","提高","收","的","率","移植","复杂","部分","、","这些","丰富","如何","功能","时","厂家","一行","熟悉","无法","等","常","也","基于","一样","比如","适用","fastrtps","加入","问题","部署","，","多个","实现","定义","先","省略","诟病","减少","物","软件系统","我们","复杂度","高","一些","放在","这个","如果","交付","完","版本","ros1","不同","是","联网","写","rmw","得","举","5g","成本","目标","国际标准","对于","不过","自家","改","udp","灵活","场景","之外","过来","opensplice","更换","把","更加","社区","简称"],"title":"DDS通信","title_tokens":["dds","通信"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_2","text":"ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。","text_tokens":["大家","熟悉","开发者","了","使用","从","ros","迁移","也","广泛","。","保留","方法","过","其中","伙伴","方式","应该","并","，","应用","一致","本","和"," ","很多","存在","非常","便于","我们","会","讲解","第二","如果","尽量","课程","学习","百万","ros2","中","没有","概念","已经","ros1","小伙伴","开发","到","不用","这里","不","几百万","含义","就","小伙","全球","的","各位","一一","几百","在","意义","二个","部分","担心","几乎","依然","开发方式","第二个","这些","有","陌生","以及"],"title":"核心概念","title_tokens":["核心","概念"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_3","text":"再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。","text_tokens":["更接","稍安","项目","用","勿躁","一个","总体而言","当","所示","两个","编程","如","软件开发","用到","课程","面向","中","一边","来讲","后续","在","带领","部头","同样","学习","语言","软件","从","。","方法","发布者","机器","具体","一页","看看"," ","可读","教程","更好","会","ros2","可读性","更","大部头","程序","之后","切记","就","多","确实","面向对象","对象","再","这","具备","不要","图片","机器人","大部","迈过","学","方式","移植性","和","编码","一步","开发","提高","企业","的","真实","而言","移植","过程","如何","操作","一本","发布","大家","也","道坎","难度","可移植性","来","可移植","，","实现","一些","我们","总体","搬","版本","ros1","写","是","发现","不过","编程语言","角度","暂且","特性","接近"],"title":"编码方式","title_tokens":["方式","编码方式","编码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_4","text":"最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随课程，你就会慢慢理解这些特性。","text_tokens":["即可","一个","命令行","编程","master","总结","课程","印象","中","所有","rosrun","上升","都","主","大幅","除此","后续","在","有","dds","节点","现有","就是","。","上手","相对","好","大幅度"," ","教程","换成","会","慢慢","除此之外","变化","ros2","最为","更","做","一种","就","集成","再","以上","了","topic","ros","跟随","揭秘","和","每","常用","通信","工具","概念","多功能","开发","某","话题","选择","核心","的","而言","命令","表示","这些","功能","陆续","大家","也","难度","比如","你","启动","独立","控制","，","rostopic","run","我们","分散","如果","ros1","是","对比","幅度","：","—","理解","大致","初次","干掉","对","下","特性","之外","最后","相关","把","啦","没"],"title":"命令行","title_tokens":["命令","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/","text":"ROS2安装方法 本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。 Linux系统简介 时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。 Ubuntu系统简介 我们后续课程使用到的Linux发行版就是ubuntu系统。 Ubuntu诞生于2004年10月份，每六个月发布一个新版本，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。 Ubuntu虚拟机安装 虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下： 1. 下载系统镜像 下载链接： https://ubuntu.com/download/desktop 2. 在虚拟机中创建系统 3. 设置虚拟机硬盘大小 4. 设置Ubuntu镜像路径 5. 启动虚拟机 6. 设置用户名和密码 7. 等待系统安装 8. 完成安装 Ubuntu系统安装好后，大家可以先随意使用熟悉一下。 ROS2系统安装 接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下： 1. 设置编码 $ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8 2. 添加源 $ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844 3. 安装ROS2 $ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop 4. 设置环境变量 $ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。 ROS2示例测试 为了验证ROS2安装成功，我们可以通过以下示例进行测试。 示例一：命令行示例 先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。 示例二：小海龟仿真示例 再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。 附：虚拟机镜像 为了方便大家入门学习，我们也提供了预装好ROS2软件和教程代码的虚拟机镜像，有需要的小伙伴可以通过以下链接下载： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["rosdistro","一般","2022","唯一","使用","完成","connect","baidu","此时","一个","可","千层","但是","命令行","很多","4","中将","master","最","中","http","时间","快","出现","左右","都","给","=","开源","于","第一个","系统","开始","应用软件","dds","成功","学习","报错","下来","by","py","仿真器","机器","想要","好","文件","evaluation","月","外衣","各个","bashrc","运动","影响","打包","务器","俱全","ros2","放到","等等","可以","发扬","程序","(","后缀","37844","安装","就","dev","行列","小伙","顺序","上下左右","说明","发展","正常","等待","摩拳擦掌","用户名","当中","衡量","发行版","键盘","管理","不太","每年","再","desktop","性能","考虑","开发者","机器人","个人爱好","上层","个人","千层浪","githubusercontent","listener","turtlesim","乐于","share","？","准备","数据","商业","以","吧","编辑器","开发","硬盘","会加","curl","主要","点击","链接","源代码","数字","企业","核心","的","&&","命名","移植","表示","分别","第二个","、","--","teleop","如何","bash","虽然","熟悉","看出","发挥","请","多任务","二句","不仅","“","计算机","同时","你","适用","启动","相同","免费","，","实现","呢","run","成","接触","etc","我们","bug","没有","sources","经典","运行","路径","：","探索","浏览器","html","任务","下","之外",".","将","出于","print","把","这套","出","2","仿真","提交","虚拟机","步骤","芬兰","环境变量","模式","进行","并","六个月","小海","名字","唯一标准","大学生","gpg","1991","课程","接下","8","任何","opt","各样","10","vmware","不","更新","基本","预装","guyuehome","在","指令","爱好者","未来","第二句","长期","通讯","强大","原理","发行","一直","为了","自行","就是","方法","兼容","cpp","反馈","ubuntu22.04","可视","二","他","应用","gen","com","紧随","一石激起千层浪","通用","绝对","界面","直接","还","最为","更","原有","做","激起","精神","source","示例","成熟","量","越来","人工","最大","关注",">","codename","1dvxugmhxlxnsnfdezuxw0g","两年","export","镜像","本","和","因为","底层","这样","$","3","其他","多人","概念","key","测试","setup","计算","奥义","热爱","到","选择","说干就干","fedora","keyring","已有","依赖","us","locale","lang","过程","与","者","背景","之上","signed","码","自己","比较","设置","多用户","先","动手做","先要","linux","互联网","合适","资料","一应俱全","其后","这个","技术实力","服务","地址","上下","优先","现在","占据","turtle","o","订阅","无论","内核","arch","激发","吸引","对","方便","deb","failed","何人","伴随","redhat","各种各样","升级","一位","网络","户名","传播","甚至","22","节","usr","试一试","标准","月份","修复","时候","小伙伴","ssl","来讲","建议","每隔","大小","archive","除此","demo","后续","一起","其他软件","源","upgrade","检验","好后","密码","海龟","dpkg","有","第一次","节点","所以","爱好","6","从","_","一定","发布者","locales","操作方法","教程","讲解","会","让","绑定","领域","真理","位置","/","效果","一","算机","这里","一种","之一","多","接下来","构建","编辑","[","尚","centos","林纳斯","学生","紧随其后","null","\"","字符","了","按键","tee","最好","起来","应该","d","world","添加","每","快速","7","]","或者","其","重要","~","虚拟","实力","编码","该","并用","设计","to","应用程序","开放","第一句","提取","raw","hello","真器","pan","操作","功能","发布","时","下载","如下","大学","大家","越来越","硬件","products","比如","来","apt","指标","加入","介绍","问题","前先要","unix","环境","蕴藏","一次","release","macos","采用","或","如果","-","以下","exc6","需要","版本","已经","之内","不同","联网",":","回到","看到","gnupg","pro","—","代表","提到","迅猛","字符串","humble","适合","echo","啦","参考","还是","操作系统","情况","实践","之前","keyrings","重新","ubuntu20.04","all","lc","代码","download","伙伴","服务器","持续","两个","年","5","”","软件开发","en","智能","随意","人工智能","电脑","公司","版","是否","windows","另外","浏览","talker","互联","可能","创建","依然","update","只","architecture","lsb","软件","好者","试试","。","第一","一应","workstation","多用","稳定","除了"," ","utf","main","第二","除此之外","可视化","个","变动","https","准确","之后","编号","分享","蓝色","附","04","热情","原本","大","六个",")","提供","技术","这","了解","保证","org","什么","ros","诞生","一下","并且","工作","入门","一句","基本相同","1","用户","决定","目前","node","www","叫做","nodes","常用","各种","很","终端","通信","变量","收费","擦掌","lts","关于","通过","加上","list","环境变","后","动手","命令","二个","任何人","有限","发扬光大","支持","s","验证","ubuntu","传输","光大","packages","等","也","为例","一样","其中","叫","控制","多个","大量","一些","os","install","一套","是","简介","普通","如遇","至此","上","|","18","无论是","成为","场景","但","操作界面","2004","维护","sudo","本相","新","华丽","小海龟"],"title":"ROS2安装方法","title_tokens":["ros2","方法","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2","text":"本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。","text_tokens":["操作系统","一下","。","前先要","，","节","本","底层","先要","linux","我们","最","重要","ros2","一种","安装","—","一起","的","系统","了解","操作"],"title":"ROS2安装方法","title_tokens":["ros2","方法","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#linux","text":"时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。","text_tokens":["操作系统","一般","实践","唯一","芬兰","使用","之前","情况","重新","此时","一个","一位","本相","代码","模式","千层","各种各样","传播","甚至","并","服务器","年","名字","唯一标准","大学生","很多","最","公司","1991","标准","修复","中","任何","各样","时间","windows","出现","都","不","来讲","基本","另外","给","互联","一起","开源","在","检验","爱好者","系统","有","应用软件","强大","原理","发行","软件","好者","所以","爱好","就是","。","方法","兼容","反馈","多用","可视","操作方法","他","应用","外衣","稳定"," ","一石激起千层浪","教程","打包","务器","讲解","会","通用","绑定","ros2","可视化","界面","还","真理","放到","等等","可以","更","原有","程序","发扬","之后","做","算机","激起","准确","分享","之一","就","精神","安装","多","行列","热情","原本","大","发展","当中","衡量","发行版","技术","管理","尚","这","每年","centos","成熟","不太","量","性能","学生","林纳斯","越来","什么","了","开发者","并且","个人爱好","最好","基本相同","起来","个人","千层浪","应该","用户","决定","目前","镜像","本","和","底层","叫做","每","快速","其他","或者","各种","重要","乐于","？","常用","其","多人","实力","概念","商业","收费","计算","并用","热爱","到","开发","设计","通过","主要","应用程序","加上","说干就干","源代码","后","fedora","企业","动手","的","开放","核心","命名","已有","依赖","任何人","有限","、","过程","与","发扬光大","支持","操作","功能","ubuntu","大学","之上","虽然","熟悉","光大","多任务","越来越","不仅","自己","也","硬件","等","计算机","比如","一样","其中","适用","指标","加入","相同","问题","免费","叫","，","unix","多用户","实现","呢","大量","先","动手做","成","互联网","linux","一些","我们","macos","bug","这个","或","一套","技术实力","需要","没有","服务","已经","版本","不同","是","联网","现在","回到","上","看到","—","内核","迅猛","提到","成为","激发","吸引","场景","对","任务","但","操作界面","下","适合","出于","维护","把","何人","这套","伴随","参考","华丽","redhat","提交"],"title":"Linux系统简介","title_tokens":["简介","linux","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu","text":"我们后续课程使用到的Linux发行版就是ubuntu系统。 Ubuntu诞生于2004年10月份，每六个月发布一个新版本，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。","text_tokens":["虚拟机","2022","之前","升级","使用","ubuntu20.04","一个","网络","进行","持续","但是","22","六个月","年","5","软件开发","很多","试一试","智能","4","人工智能","电脑","月份","课程","版","时候","中","快","windows","10","出现","都","更新","建议","每隔","除此","浏览","互联","可能","后续","在","于","未来","系统","依然","长期","有","只","第一次","通讯","一直","发行","为了","软件","所以","自行","从","就是","。","方法","机器","一定","想要","一应","好","文件","ubuntu22.04","第一","月","应用","各个","稳定","紧随"," ","除了","影响","教程","俱全","会","讲解","让","除此之外","个","绝对","直接","还","领域","变动","可以","更","位置","效果","编号","之后","这里","后缀","就","安装","多","顺序","04","六个","摩拳擦掌","发行版","编辑","再","性能","保证","紧随其后","人工","考虑","了","开发者","最大","关注","机器人","诞生","一下","上层","两年","用户","本","这样","因为","每","常用","其他","很","重要","各种","虚拟","以","擦掌","编辑器","开发","到","选择","会加","lts","硬盘","通过","主要","参考","数字","的","已有","移植","表示","、","支持","如何","发布","ubuntu","时","大家","看出","熟悉","发挥","等","自己","也","比较","硬件","为例","比如","你","其中","介绍","免费","，","环境","接触","linux","互联网","合适","我们","一应俱全","其后","一次","资料","如果","或","版本","已经","之内","不同","是","联网","普通","优先","占据","上","18","无论","无论是","浏览器","代表","2004","之外","维护","出","新","还是"],"title":"Ubuntu系统简介","title_tokens":["简介","ubuntu","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu_1","text":"虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下：","text_tokens":["虚拟机","软件","之上","步骤","请","大家","完成","自行","工作","products","。","一个","同时","workstation","相同","evaluation","并","，","多个","环境","com","和","www"," ","叫做","我们","让","采用","其他","-","虚拟","准备","地址","是","可以","https","运行","/",":","vmware","这里","：","另外","安装","pro","就","后","html","的","构建","其他软件","已有","在",".","系统","啦","开始","操作","下载","如下"],"title":"Ubuntu虚拟机安装","title_tokens":["虚拟机","虚拟","安装","ubuntu"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1","text":"下载链接： https://ubuntu.com/download/desktop","text_tokens":["https","com","/"," ",":",".","：","链接","download","desktop","下载","ubuntu"],"title":"1. 下载系统镜像","title_tokens":["镜像"," ",".","系统","下载","1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2","text":"","text_tokens":[],"title":"2. 在虚拟机中创建系统","title_tokens":["虚拟机","在","创建"," ",".","系统","虚拟","2","中"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3","text":"","text_tokens":[],"title":"3. 设置虚拟机硬盘大小","title_tokens":["虚拟机"," ","硬盘",".","设置","3","大小","虚拟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4-ubuntu","text":"","text_tokens":[],"title":"4. 设置Ubuntu镜像路径","title_tokens":["镜像"," ","路径",".","4","设置","ubuntu"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#5","text":"","text_tokens":[],"title":"5. 启动虚拟机","title_tokens":["虚拟机","5"," ",".","启动","虚拟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#6","text":"","text_tokens":[],"title":"6. 设置用户名和密码","title_tokens":["用户","用户名","和","6"," ",".","密码","设置","户名"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#7","text":"","text_tokens":[],"title":"7. 等待系统安装","title_tokens":["等待"," ",".","系统","7","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#8","text":"Ubuntu系统安装好后，大家可以先随意使用熟悉一下。","text_tokens":["，","大家","可以","先","熟悉","使用","好后","随意","系统","一下","。","安装","ubuntu"],"title":"8. 完成安装","title_tokens":["完成"," ",".","安装","8"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_1","text":"接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下：","text_tokens":["步骤","下来","了","。","，","我们","中","ros2","接下","可以","到","：","就","安装","接下来","ubuntu","系统","把","如下"],"title":"ROS2系统安装","title_tokens":["ros2","安装","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1_1","text":"$ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8","text_tokens":["all","_","lc","apt","locales","export","gen","$"," ","utf","en","-","install","8","&&","=",".","us","locale","lang","update","sudo"],"title":"1. 设置编码","title_tokens":[" ",".","设置","1","编码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2_1","text":"$ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844","text_tokens":["rosdistro","keyrings","connect","可","usr","”","gpg","master","http","ssl","archive","=","guyuehome","dpkg","update","architecture","lsb","报错","by","_","com","main"," ","ros2","https","/","(","37844","dev","source",")","[","null","org","\"","ros","tee",">","codename","d","www","$","githubusercontent","]","share","key","curl","to","list","keyring","&&","raw","--","ubuntu","signed","packages","“","apt","，","etc","release","-","install","os","sources","如遇",":","o","|","gnupg","arch",".","print","echo","deb","failed","sudo","参考"],"title":"2. 添加源","title_tokens":["源"," ",".","添加","2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3-ros2","text":"$ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop","text_tokens":["upgrade","$"," ","ros","humble","install","update","sudo","-","apt","desktop"],"title":"3. 安装ROS2","title_tokens":[" ",".","3","安装","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4","text":"$ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。","text_tokens":["bash","\"","了","ros","。",">","好","，","bashrc","$"," ","~","ros2","中","已经","opt","/","setup","至此","就","安装","source","在","humble",".","系统","echo"],"title":"4. 设置环境变量","title_tokens":["环境"," ",".","4","设置","环境变量","环境变","变量"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_2","text":"为了验证ROS2安装成功，我们可以通过以下示例进行测试。","text_tokens":["，","可以","测试","ros2","通过","示例","我们","。","安装","进行","以下","为了","验证","成功"],"title":"ROS2示例测试","title_tokens":["测试","ros2","示例"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_1","text":"先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。","text_tokens":["字符","传输","试试","py","_","“","。","一个","来","发布者","cpp","启动","第一","两个","问题","，","先","run","world","$","底层"," ","”","nodes","listener","第二","终端","重要","如果","以下","通信","ros2","数据","中","没有","吧","是否","最为","者","订阅","通过","：","demo","talker","说明","的","正常","在","字符串","命令","二个","第一个","系统","第二个","hello","dds","节点","发布"],"title":"示例一：命令行示例","title_tokens":["一","命令","示例","：","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_2","text":"再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["ros","二句","背景","_","仿真器","。","一个","一句","“","来","按键","启动","第一","持续","两个","控制","，","小海","蕴藏","run","node","$"," ","试一试","”","运动","教程","中将","我们","第二","终端","turtlesim","中","ros2","上下","key","该","经典","可以","运行","turtle","奥义","关于","至此","上","点击","左右","：","蓝色","探索","就","安装","—","上下左右","后续","的","第一句","在","指令","将","键盘","示例","分别","海龟","第二句","再","啦","teleop","成功","真器","节点","仿真","如下","小海龟"],"title":"示例二：小海龟仿真示例","title_tokens":["小海","示例","：","海龟","小海龟","仿真","二"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_3","text":"为了方便大家入门学习，我们也提供了预装好ROS2软件和教程代码的虚拟机镜像，有需要的小伙伴可以通过以下链接下载： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["虚拟机","软件","大家","了","码","baidu","也","入门","代码","伙伴","好","1dvxugmhxlxnsnfdezuxw0g","，","镜像","com","和"," ","教程","我们","exc6","虚拟","以下","ros2","需要","https","可以","小伙伴","/",":","通过","：","链接","下载","预装","小伙","的","s","提供","提取","方便",".","有","pan","为了","学习"],"title":"附：虚拟机镜像","title_tokens":["虚拟机","镜像","：","附","虚拟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/","text":"ROS2命令行操作 在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。 Linux中的命令行 类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。 启动方式 回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。 常用命令操作 我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。 ROS2中的命令行 ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。 运行节点程序 想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看节点信息 当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim 查看话题信息 当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose 发布话题消息 想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 发送服务请求 一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\" 发送动作目标 想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\" 录制控制命令 系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["新建","info","完成","2022","使用","手","此时","一个","定制","命令行","但是","本节","硬","很多","用到","send","中","一点","都","删除","跟","rotate","至于","黑客","rate","于","并不一定","第一个","系统","不一","适应","此","子","一只","学习","下来","类似","仿真器","鼠标","想要","好","文件","深色","不变","record","随身带","异常","ros2","action","name","商家","可以","程序","就","枯燥","正常","死机","列表","键盘","管理","不太","随着","再","40","移入","它","电影","约束","方式","必不可少","死记","后边","拷贝到","绝对路径","spawn","复现","turtlesim","段","？","数据","以","令人","改名","y","编辑器","话题","主要","每次","均","链接","目","bag","产生","死记硬背","核心","的","表示","进一步","0.2","、","--","teleop","如何","虽然","熟悉","小","看中","“","你","启动","相同","主目录","，","t","孤单","呢","实现","run","成","接触","我们","太","参数","没有","运行","路径","科幻","目标","：","目录","其上","转","大致","下","将","从来",".","炫酷","把","出","拷贝","2","仿真","动作","轻松","进行","并","由","小海","感兴趣","里边","便捷","完全","推出","统管","想象","尝试","接下","逛来","不用","文件名","一边","不","具体操作","在","指令","未来","带领","看似","一直","感觉","linear","alt","就是","服装","标目","什么样","可视","应用","看看","慢慢","绝对","直接","还","更","原有","play","需求","msg","列出","做好","动","还有","源文件","解决","这项","哪些","买","呀","以上","笔记本","x","发送","子目",">","不是","改变","消息","本","查看","这样","和","因为","$","及其","3","其他","背","概念","key","…","angular","theta","继续","到","某","选择","能够","+","目标目录","自主","与","常用命令","背景","地","有点","自己","逛去","service","先","看不到","当前","二十","linux","一系","cp","呈现","这个","服务","ls","turtle","播放","对于","快捷","案例","不可","款式","无论","复制","一二十个","对","既","mkdir","很少","衣服","2.0","精心设计","及","逛来逛去","输入","多到","根据","试一试","一件","系列","goal","时候","0.0","受","随身","哪","来讲","快捷键","难以","忙","呈现出","一起","总","精心","geometry","海龟","第一次","有","节点","现有","所以","右键","系统管理员","_","深入","twist","一定","具体","详细信息","信息","rosbag2","专门","会","实验","让","11","数量","选项","gedit","/","一","为什么","另","这里","一种","17","多","确实","接下来","编辑","[","为","字符","\"","了","topic","片段","保留","布料","调试","起来","件夹","名称","{","只是","pub","每","怎么","]","或者","重要","call","工具","该","设计","去","这些","语法","真器","操作","功能","干什么","如下","发布","一二十","大家","文件名称","比如","来","结合","问题","感受","帮上","vel","详细","一次","rm","商场","如果","或","-","规则","需要","已经","材料","不同",":",",","回到","看到","不过","—","当前工作","灵活","初次","echo","啦","mv","还是","显示","之前","即可","用","窗口","容易","1.8","二十个","”","记忆","电脑","一系列","觉得","这种","所有","录制","十个","权限","可能","体操","db3","感兴","机制","创建","体验","发指","想","rosbag","被","例如","知道","pose","z","魅力","科幻电影","软件","查","则","。","调用","第一","某段","总有","文件夹","要"," ","rotateabsolute","所在","ctrl","而是","可视化","改了","至今","实验室","0","满足","msgs","absolute","保持","既定","不到","又","04","集成","提供","'","麻烦","这","了解","<","目的","什么","ros","指定","一下","工作","度高","现出","1","}","用户","子目录","node","打开","叫做","兴趣","笔记","常用","各种","终端","很","35","一步","原因","通过","加上","list","后","命令","一二","srv","若","令人发指","内容","pwd","搜索","等","也","体会","一样","为例","复制到","控制","多个","cd","某个","一些","笔记本电脑","找","terminal","是","写字","上","cmd","角度","管理员","场景","请求","但","多种","sudo","执行","小海龟","turtle1"],"title":"ROS2命令行操作","title_tokens":["命令","操作","ros2","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2","text":"在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。","text_tokens":["大家","了","之前","有点","使用","深入","。","调试","一定","第一","命令行","感受","，","小海","本节"," ","接触","一次","我们","会","如果","重要","时候","中","ros2","工具","一步","可以","更","运行","到","案例","一种","—","多","可能","的","在","命令","进一步","将","魅力","带领","海龟","不太","随着","第一次","适应","学习","小海龟"],"title":"ROS2命令行操作","title_tokens":["命令","操作","ros2","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#linux","text":"类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。","text_tokens":["精心设计","手","使用","此时","一个","逛来逛去","容易","定制","但是","命令行","并","里边","便捷","根据","完全","很多","一件","推出","想象","时候","中","一点","这种","所有","逛来","受","都","哪","不","来讲","呈现出","精心","在","于","并不一定","不一","被","看似","一直","科幻电影","现有","软件","类似","就是","。","服装","一定","想要","什么样","还是","可视","总有"," ","会","异常","可视化","商家","可以","至今","需求","为什么","满足","既定","一种","这里","做好","就","多","解决","买","麻烦","呀","为","什么","了","ros","片段","度高","保留","不是","布料","电影","起来","方式","必不可少","约束","现出","这样","和","其他","各种","？","工具","某","设计","能够","每次","自主","的","命令","去","、","这些","操作","功能","虽然","大家","小","等","自己","看中","逛去","比如","你","来","一样","结合","问题","，","呢","先","成","linux","我们","一些","商场","呈现","没有","服务","规则","已经","材料","是","科幻","对于","看到","不可","款式","无论","其上","灵活","场景","但","炫酷","衣服"],"title":"Linux中的命令行","title_tokens":["的","命令","linux","中","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_1","text":"回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。","text_tokens":["即可","使用","手","用","窗口","及","输入","命令行","但是","并","多到","硬","二十个","用到","记忆","电脑","一系列","系列","觉得","时候","中","不用","随身","十个","都","快捷键","难以","至于","黑客","在","指令","发指","有","科幻电影","魅力","软件","所以","alt","右键","就是","。","鼠标","一定","应用","深色"," ","专门","所在","会","ctrl","随身带","慢慢","而是","数量","可以","为什么","就","不到","枯燥","又","确实","正常","死机","这项","列表","随着","这","笔记本","字符","什么","一下","不是","电影","方式","本","打开","叫做","因为","怎么","笔记","常用","终端","很","其他","背","原因","工具","令人","到","选择","通过","+","后","的","命令","一二","操作","功能","背景","一二十","大家","熟悉","令人发指","搜索","也","体会","来","启动","，","t","呢","看不到","二十","笔记本电脑","一系","我们","这个","参数","terminal","需要","是","写字","回到","科幻","快捷","看到","：","上","不过","一二十个","初次","对","既","从来","多种","很少"],"title":"启动方式","title_tokens":["启动","方式"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_2","text":"我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。","text_tokens":["显示","新建","用","一个","及","由","”","统管","中","所有","文件名","一边","删除","不","权限","创建","体验","指令","未来","系统","此","感觉","查","系统管理员","则","。","标目","文件","文件夹"," ","不变","会","绝对","选项","gedit","可以","/","一","原有","列出","另","保持","就","多","源文件","拷贝","列表","编辑","[","管理","<","为","目的","子目","了","指定","一下","工作",">","移入","它","改变","件夹","死记","用户","名称","子目录","打开","及其","拷贝到","绝对路径","只是","]","常用","或者","以","…","该","改名","编辑器","链接","均","目","目标目录","死记硬背","的","命令","这些","语法","常用命令","若","功能","地","大家","熟悉","pwd","文件名称","也","“","来","复制到","主目录","，","多个","先","cd","某个","当前","linux","我们","cp","rm","找","或","没有","需要","ls","路径","回到","目标","对于","：","目录","复制","当前工作","管理员","下","将","mkdir","把","sudo","出","执行","mv"],"title":"常用命令操作","title_tokens":["命令","操作","常用命令","常用"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2_1","text":"ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。","text_tokens":["什么","下来","topic","节点","内容","也","。","一个","比如","为例","具体","第一","相同","命令行","感受","，","后边","小海","node"," ","linux","一系","我们","一系列","系列","参数","中","ros2","接下","还","概念","以","所有","不同","可以","继续","话题","主要","都","不过","功能","跟","就","体操","接下来","一起","集成","的","具体操作","总","核心","大致","机制","在","命令","表示","对","下","第一个","海龟","有","与","了解","操作","仿真","干什么","目的","小海龟"],"title":"ROS2中的命令行","title_tokens":["的","命令","ros2","中","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_3","text":"想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["节点","使用","_","进行","想要","控制","，","要","某个","run","和"," ","$","node","我们","turtlesim","ros2","中","key","可以","运行","turtle","：","命令","键盘","海龟","teleop","例如","操作","仿真"],"title":"运行节点程序","title_tokens":["程序","节点","运行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_4","text":"当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim","text_tokens":["info","ros","一个","来","它","详细信息","，","感兴趣","呢","查看","node","这样","当前"," ","$","兴趣","详细","信息","如果","turtlesim","？","中","ros2","可以","运行","/","某","都","：","加上","就","list","的","哪些","感兴","对","命令","系统","啦","有","知道","节点","子"],"title":"查看节点信息","title_tokens":["节点","查看","信息"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_5","text":"当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose","text_tokens":["topic","即可","使用","一个","消息","，","呢","查看","当前"," ","$","试一试","ros2","中","数据","还","/","某","话题","看到","都","：","加上","list","的","命令","想","系统","echo","有","pose","子","如下","turtle1"],"title":"查看话题信息","title_tokens":["话题","查看","信息"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_6","text":"想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":["\"","topic","linear","2.0","_","twist","想要","起来","1.8","命令行","}","1","控制","，","{","vel","$"," ","pub","我们","直接","ros2","0.0","还","angular","可以","/","y",":",",","msgs","话题","通过","cmd","：","msg","动","geometry","指令","命令","rate","海龟","--","z","发布","x","turtle1"],"title":"发布话题消息","title_tokens":["发布","话题","消息"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_7","text":"一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\"","text_tokens":["\"","仿真器","一个","来","调用","service","}","，","孤单","{","$"," ","试一试","spawn","我们","turtlesim","太","call","ros2","服务","改了","还","name","theta","/","y",":",",","：","—","产生","提供","一只","'","0.2","海龟","再","srv","真器","2","仿真","x"],"title":"发送服务请求","title_tokens":["发送","请求","服务"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_8","text":"想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\"","text_tokens":["发送","\"","完成","指定","_","仿真器","一个","比如","动作","具体","想要","命令行","，","帮上","这样","$"," ","rotateabsolute","send","3","让","这个","goal","turtlesim","中","action","ros2","theta","可以","/",":","到","absolute","目标","通过","：","角度","rotate","忙","转","的","提供","命令","海龟","真器","仿真","turtle1"],"title":"发送动作目标","title_tokens":["发送","动作","目标"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_9","text":"系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["下来","大家","2022","用","自己","_","就是","。","一个","轻松","想要","好","某段","，","看看","实现","vel","rosbag2","$"," ","很多","以上","复现","record","每","我们","11","实验","常用","如果","段","很","？","-","中","数据","ros2","35","尝试","可以","play","运行","实验室","录制","播放","/","回到","0","cmd","：","17","还有","40","bag","04","的","db3","命令",".","系统","把","再","这","有","rosbag","与","啦","如何","功能","子","还是","turtle1"],"title":"录制控制命令","title_tokens":["命令","录制","控制"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","text":"ROS2开发环境配置 ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。 Git git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git 下载教程源码 《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。 VSCode Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download VSCode插件配置 为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。 中文语言包 Python插件 C++插件 CMake插件 vscode-icons ROS插件 Msg Language Support Visual Studio IntelliCode URDF Markdown All in One VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["项目","完成","操作系统","无限","使用","有些","变更","用","all","一个","两款","作为","代码","download","进行","管理软件","python","官方网","成千上万","并","年","理工","里边","很多","最","推出","系列","不开","课程","修复","冲突","一系列","中","c++","这款","language","所有","哪里","icons","因","记事","windows","简称","合并","都","不","给","另外","而生","浏览","官方","可能","《","微软","广泛应用","后续","开源","guyuehome","在","系统","有","visual","被","gitee","只","讲","强大","为了","切换","语言","软件","非常简单","所以","利器","vscode","_","广泛","。","国内","方法","判断","语言包","机器","成千","具体","之间","好","下载方式","文件","code","应用","文件夹","千万","com"," ","教程","会","不会","让","cmake","喜欢","ros2","编写","直接","还","等等","https","可以","更","/","之后","做","msg","support","这里","听到","就","码云","安装","tutorials","clone","多","in","发展","离不开","集成","提供","编辑","示例","管理","功能强大","这","高效","one","以上","网上","以及","自动","众多","人工","了","开发者","ros","简单","配置","机器人","驱动","linus","github","人","编译","入门","调试","方式","件夹","个人","神兵","git","查看","和","肯定","$","这样","官方网站","非常","快速","便于","2015","终端","重要","？","准备","intellicode","工具","轻量","studio","编辑器","开发","设计","记事本","每次","链接","markdown","visualstudio","源代码","的","一款","中会","已有","常听到","命令","复杂","扩展","、","这些","略显","丰富","与","管理工具","如何","功能","下载","支持","一行","操作","中文","大家","迅速","21","内容","贡献","硬件","也","搜索","自己","比如","自带","apt","，","千上万","环境","呢","多个","大量","先","urdf","linux","我们","一些","一系","网站","bug","macos","如果","install","-","几千万","推荐","》","开发工具","搭建","需要","版本","不同","是","之父",":","组件","几千","看到","插件","：","浏览器","—","行","成为","审核","增加","特性",".","但","源码","上万","sudo","出","新","提交"],"title":"ROS2开发环境配置","title_tokens":["环境","配置","开发","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros2","text":"ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。","text_tokens":["大家","完成","ros","vscode","配置","机器人","。","编译","两款","代码","机器","，","git","环境","呢","大量","查看","先","肯定","和","我们","一些","不开","课程","重要","？","准备","编写","推荐","开发工具","需要","工具","开发","做","给","—","离不开","的","中会","提供","示例","源码","、","这些","如何"],"title":"ROS2开发环境配置","title_tokens":["环境","配置","开发","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#git","text":"git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git","text_tokens":["项目","完成","使用","有些","变更","一个","代码","进行","管理软件","成千上万","并","理工","修复","冲突","中","这款","所有","哪里","因","合并","都","不","而生","可能","广泛应用","开源","在","系统","有","被","gitee","切换","软件","非常简单","所以","广泛","。","国内","方法","判断","具体","成千","之间","应用","千万"," ","会","不会","让","直接","等等","可以","之后","听到","就","码云","安装","发展","管理","这","高效","以及","自动","众多","人工","了","开发者","简单","linus","驱动","github","人","git","和","肯定","$","非常","终端","工具","开发","设计","每次","的","一款","已有","常听到","命令","这些","管理工具","功能","一行","迅速","大家","内容","贡献","硬件","也","比如","apt","，","千上万","多个","linux","我们","网站","bug","install","几千万","需要","版本","不同","是","之父","几千","看到","—","行","审核","增加","特性","上万","sudo","新","提交"],"title":"Git","title_tokens":["git"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_1","text":"《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。","text_tokens":["21","vscode","用","_","。","入门","一个","自带","代码","好","方式","下载方式","文件","件夹","，","git","环境","文件夹","com","里边","这样","$"," ","很多","和","查看","会","如果","课程","》","ros2","中","推荐","还","https","是","更","/","记事",":","开发","：","记事本","这里","另外","tutorials","浏览器","就","多","clone","《","浏览","—","集成","的","guyuehome","复杂",".","源码","系统","略显","有","gitee","讲","下载"],"title":"下载教程源码","title_tokens":["下载","教程","源码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode","text":"Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download","text_tokens":["操作系统","项目","利器","vscode","操作","。","一个","代码","download","官方网","code","，","神兵","年","com","和"," ","官方网站","linux","非常","快速","macos","2015","推出","网站","搭建","轻量","是","可以","studio","https","/","编辑器","windows","开发","组件",":","：","链接","下载","visualstudio","官方","微软","源代码","成为","的","在","但",".","扩展","编辑","系统","、","功能强大","visual","丰富","支持","功能","强大","简称"],"title":"VSCode","title_tokens":["vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode_1","text":"为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。","text_tokens":["无限","vscode","。","调试","，","便于","我们","一系","一系列","系列","ros2","还","可以","开发","插件","安装","后续","的","扩展","与","功能","为了"],"title":"VSCode插件配置","title_tokens":["vscode","配置","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_2","text":"","text_tokens":[],"title":"中文语言包","title_tokens":["语言","中文","语言包"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#python","text":"","text_tokens":[],"title":"Python插件","title_tokens":["python","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#c","text":"","text_tokens":[],"title":"C++插件","title_tokens":["插件","c++"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#cmake","text":"","text_tokens":[],"title":"CMake插件","title_tokens":["cmake","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode-icons","text":"","text_tokens":[],"title":"vscode-icons","title_tokens":["vscode","icons","-"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros","text":"","text_tokens":[],"title":"ROS插件","title_tokens":["插件","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#msg-language-support","text":"","text_tokens":[],"title":"Msg Language Support","title_tokens":[" ","support","msg","language"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#visual-studio-intellicode","text":"","text_tokens":[],"title":"Visual Studio IntelliCode","title_tokens":[" ","visual","studio","intellicode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#urdf","text":"","text_tokens":[],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#markdown-all-in-one","text":"VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["大家","vscode","配置","搜索","自己","也","。","作为","个人","，","环境","最","喜欢","推荐","可以","开发","插件","支持","的","在","网上","只","以上","出","众多"],"title":"Markdown All in One","title_tokens":[" ","all","markdown","one","in"]}]}