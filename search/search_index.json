{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"引言 机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的 电气时代 。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的 数字时代 ，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发， 智能机器人时代 正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。 教程链接汇总 课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/90 博客泡圈： https://www.guyuehome.com/","text_tokens":["驱动","七八十年","减速","这是","—","大","：","2015","仿生","博客","后","思考","电气","有限","自动","驾驶","但是","传感器","局部","教程","机器人","guyuehome","图文","没有","生产","操作系统","github","问答"," ","人工智能","时代","book","也","是","七八","对","随着","的","完全","热点","驱动器","robot","circledetail","教器","动作","这","重要","class","人类","软件","年","帮助","只能","www","发展","家庭","执行","ai","俗称","服务","。","感器","更","计算","视觉","汽车","拉开序幕","链接","我们","技术","正式","拉开","依然","操控","/","命令","序幕","工业","算机","由示","智能化","并","、","电机","控制","智能","多","前夜","年前","ros2","operating","开发",":","层面","计算机","2000","成为","泡圈","劳动力","90",".","检测","tutorials","必将","快速","system","之后","https","释放","gitee","人工","工厂","不断丰富","课程","和","应用","缺少","呈","八十","等","关注","更加","操作","丰富","21","减速机","环境","八十年","伺服","传感","类型","最为","狗","于","主要","伺服电机","十年","最佳","系统","出现","七八十","三个","控制器","之一","源码","载体","横跨","爆发","感知","主角","劳动","bubble","工业生产","提出","了","四足","高","时期","设备","数字","要求","引言","不过","状","此时","不断","按照","汇总","agv","就是","过程","太","com","动力","id","逐渐","视频","经历","送餐","而言","自主","业生","，","井喷","_","机器"],"title":"引言","title_tokens":["引言"]},{"location":"#_1","text":"机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的 电气时代 。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的 数字时代 ，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发， 智能机器人时代 正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。","text_tokens":["驱动","七八十年","减速","这是","—","大","2015","仿生","后","思考","电气","有限","自动","驾驶","但是","传感器","局部","机器人","没有","生产","操作系统"," ","人工智能","时代","也","是","七八","对","随着","的","完全","热点","驱动器","robot","教器","动作","这","重要","人类","软件","年","帮助","只能","发展","家庭","执行","ai","俗称","服务","。","感器","更","计算","视觉","汽车","拉开序幕","我们","技术","正式","拉开","依然","操控","命令","序幕","工业","算机","由示","智能化","并","、","电机","控制","智能","多","前夜","年前","operating","开发","层面","计算机","2000","成为","劳动力","检测","必将","快速","system","之后","释放","人工","工厂","不断丰富","课程","和","应用","缺少","呈","八十","等","关注","更加","操作","丰富","减速机","环境","八十年","伺服","传感","类型","最为","狗","于","主要","伺服电机","十年","最佳","系统","出现","七八十","三个","控制器","之一","载体","横跨","爆发","感知","主角","劳动","工业生产","提出","了","四足","高","时期","设备","数字","要求","不过","状","此时","不断","按照","agv","就是","过程","太","动力","逐渐","经历","送餐","而言","自主","业生","，","井喷","机器"],"title":"引言","title_tokens":["引言"]},{"location":"#_2","text":"课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/90 博客泡圈： https://www.guyuehome.com/","text_tokens":["circledetail","源码","泡圈","class","bubble","：","90",".","www","tutorials","博客","https","gitee","教程","课程","guyuehome","图文","/","github","21","问答","com","id","视频"," ","book","_","ros2",":"],"title":"教程链接汇总","title_tokens":["教程","链接","汇总"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["对本","质量","书面","超过","销售","用户","修改","地区","华语","企业","有限","限于","未来","学习者","联系","机器人","提供","guyuehome"," ","依法","（","与","武汉","人才","许可","进行","追究其","是","任何","本","畅销","累积","众多","至今","的","模式","》","致力于","传播","高质量","年","创新","www","有权","通过","单位","ai","所有","校企","致力","创建","。","交流学习","如需","面向","交流","将","责任","均","万人","合作","公司","使用","捆绑","、","合法","一体","培养","课件","brand","或","镜像","声明者","开发","高质","版权","集","图书","明者",".","请","包括","声明","2011","追究","+","学","上","课程","和","产品","究其","线上","为","但","等","上述","精锋","面向未来","人才培养","不","120","努力","1000","万字","知名","建立","古月","@","源码","居","授权","出版","被","网站","拥有","实践","仅限","抄录","构建","《","ros","法律","优质","）","生态","有限公司","其它","平台","复制","及","赋能","小时","微控","com","未经","视频","科技","高校","学习","社区","违反","内容","，","作品","不得","法律责任","个人","机器"],"title":"关于我们","title_tokens":["关于","我们"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["质量","超过","用户","地区","华语","企业","未来","学习者","机器人","提供","guyuehome"," ","（","与","人才","是","畅销","累积","众多","至今","的","模式","》","致力于","高质量","年","创新","www","通过","ai","校企","致力","创建","。","交流学习","面向","交流","万人","合作","、","一体","培养","开发","高质","集","图书",".","2011","+","课程","线上","为","等","面向未来","人才培养","120","努力","1000","万字","知名","建立","古月","居","出版","实践","构建","《","ros","优质","）","生态","平台","及","赋能","小时","com","视频","高校","学习","社区","内容","，","机器"],"title":"学机器人，上古月居","title_tokens":["上","机器人","居","，","古月","机器","学"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["对本","书面","销售","用户","修改","有限","限于","联系","guyuehome","依法"," ","与","武汉","许可","追究其","进行","本","的","传播","有权","单位","所有","。","如需","个人","将","责任","均","公司","使用","捆绑","、","合法","课件","brand","或","镜像","声明者","版权","明者",".","请","包括","声明","追究","课程","和","产品","究其","为","但","等","上述","精锋","不","古月","@","源码","居","授权","被","网站","拥有","仅限","抄录","法律","有限公司","其它","复制","微控","未经","com","视频","科技","学习","违反","，","作品","不得","法律责任","任何"],"title":"版权声明","title_tokens":["版权","声明"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/","text":"ROS/ROS2是什么 智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。 ROS的诞生 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人—— PR2 ，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS的发展 ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称 ROSCon ，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。 ROS的特点 ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。 参考资料 关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["长期","做到","willow","没想到","这里","可为","机械","频繁","外观","排名","新鲜","迎来","两年","活跃度","不同","如果","配合","投资","传感器","聊天","教程","；","2022","棒","框架","实现","有人","想法","一个","还是","github","这一波","增长速度","大有可为","适用","成熟","以上","时代","由","许可","正如","嵌入式","跑","台球","页面","系列","之旅","已经","因","方法","生态系","一些","这","重要","可能","有志","年","这个","零部件","机制","采用","维基","想到","world","服务","几乎","。","感器","记录","发布","利器","野蛮","技术","访问","不开","几个","绝对","根据","有没有","每个","广泛","5","解决","并","巨大","控制","这款","不到","针对","虽然","通常","让","商业化","一套","已有","大步","garage","啦","轮子","快速","圈","来自","2011","官方","图","单独","真正","趋势","诞生","后续","历经","新鲜事","全书","处理","快","开源","部件","一群","度","款","笔记","身影","当初","无疑","努力","原本","怀揣","于","a","最佳","全人","量级","柔性","起","index","零","给","还","就","绝大部分","毛巾","了","甚至","陪","类似","加快","资本","而生","此时","熟悉","向前走","生态","大学","roscon","什么","浏览量","就是","来","过程","齐聚一堂","会","访问量","学习","内容","望而却步","应用软件","着","packages","扩展","任何","这样","收拾","每年","answers","自身","—","局限性","算是","浏览","不下","用户","日常","发表","同时","80","神秘","为了","板块","案例","版","多年","限于","但是","人数","机器人","提供","该","尝试","使命","掀起","举办","其他","乐意","维基百科"," ","媒体","程度","价格便宜","终于","托管","月","本","从中","大量","率","别人","得以","robot","改为","剪头发","等等","虽好","250","主阵地","都","论坛","intel","一系","直到","几百万","工程师","友好","软件","做","相关","发展","可以","关于","通过","更新","沉淀","标志","所有","向前","开发者","更","远","前","加","笔记本","只想","从","简称","我们","将","深知","核心","浪潮","重量","次数","一次","很","推进","生态系统","一家","接下来","上边","头发","智能化","同一","用于","参考","时间轴","玩耍","采购","百科全书","投了","ros2","风险","operating","开发","现在","大大","？","2012","集合","开始","提问","此后","越来","直接","之内","20","无论是","洗衣","年底","方向","电路","早期","这位","肩膀","进化","下来","上","充足","模块化","课程","线上","大部分","提高","操作","认识","活动","普遍","无聊","120","研究","特性","最为","主要","资源","要","智慧","系统","事情","数据库","用","部分","其次","五年","水下","比如","2014","org","人形","ros","福大","肯定","特点","“","discourse","接下","更好","讲解","整合","缩短","基本上","光靠","最后","爆款","设计","视频","基于","google","一定","扫地","年轻","时候","问题","新增","2007","步伐","个人","两个","一起","同学","万","时至今日","得到","革命","这是","越来越","带领","加上","不多","轰动","推动","回答","：","起点","受限于","才","受限","2015","暴露","当时","做出","统统","一下","普及","版本","上市","更为","增长","每","场景","高效","时间","讨论","操作系统","没有","斯坦福大学","学术","问答","衣服","中","非常","进行","”","人才","神兵","是","出来","项目","这群","嘉宾","推出","不想","同理","元素","打","新","情况","左右","差不多","曲线","容易","电脑","组成","而","人类","肩负着","体系","详细","了解","首先","多媒体","资金","低","年轻人","多媒体系统","汽车","工具","ubuntu","欢迎","正式","认识一下","/","引擎","把","进入","却","一款","月底","基本","限性","助推","多","工程","变为","几百","总称","之王","知识","其中","在","据库","选择",".","正在","初期","大会","疫情","存储","做成","清晰","做饭","专业","造","联合","personal","第一次","来到","看到","和","应用","2","几年","为","全","亚马","长远","自己","居高不下","全球化","个","后期","只","笔记本电脑","不仅","2017","叫做","一步","传感","一切","宽松","张图","古月","标准","turtlebot","25","所学","复合","精致","原型","因为","近两年","或者","一大","分享","各样","斯坦福","你","介于","pr2","此","便宜","被","网站","kinect","xbox","一大笔钱","却步","底盘","物体","向","促使","人","青年","一大笔","不断更新","不是","总体","之上","给出","苹果","不要","上去","能够","来看","美妙","所有人","社区","说明","搜索","，","原因","百万","肩负","叠","关键","机器","一届","围绕","实验室","四大","木头","注意","亚马逊","参考资料","大家","复杂","查看","上图","大","活跃","很多","简单","明智","全新","真的","实验","代","无论","稳定","万万","动机","windows","性能","近几年","总而言之","说干就干","掌握","c","维基百","希望","不乏","局限","巨人","体感","b","15","今日","完成","为例","绝大","入门教程","也","繁荣","团队","对","效果","呢","随着","挑战","的","至今","多项","完全","世界","看中","而且","确定","各项","具备","一段","所以","大笔","既然","以","万左右","软件系统","复用","离不开","推荐","帮助","干","答案","ros1","四项","以叠","他们","迅猛","独立","家","第一","全人类","一样","统计","到","如何","尽量","全球","工业","万人","强悍","公司","制造","分钟","找到","使用","创始","、","资料","智能","各种各样","地域","手机","领域","下载","熨烫","humble","为什么","目标","阵地","名称","一系列","移动","层面","通信","那","成果","成为","又","只要","创意","wiki","40","好","风险投资","没想","system","作为","回到","研发","支持","国家","泡泡","之","一大步","2010","正式版","速度","价格","游戏机","重新","产品","150","起来","入门","等","许可证","进步","高度","同年","不","臂","方式","来讲","100","商业","嵌入","一堂","同样","conference","重量级","涉及","多万","跟随","站","linux","成本","有","这些","百科","源码","游戏","居","迭代","功能","开发工具","下","横跨","结晶","包","跨平台","提出","其实","提取","很快","第一个","代表","然后","条","做法","不断","踏上","大部","面纱","代码","平台","数据","最高","整理","图中","对于","动力","各种","模块","效率","逐渐","经历","而言","索引","本身","移动机器人","还有","成功","微软"],"title":"ROS和ROS2是什么","title_tokens":["什么","和","是","ros","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#rosros2","text":"智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。","text_tokens":["量级","带领","？","那","一起","大家","这","又","神秘","就","提出","了","正在","方向","向","ros","这位","进化","而生","。","一下","下来","什么","机器人","场景","我们","应用","接下","面纱","重量","操作系统","认识一下","全","操作","掀起","认识","呢","接下来","高度"," ","时代","智能化","的","巨大","挑战","智能","，","中","是","重量级","嘉宾","对","ros2","机器","系统","开发"],"title":"ROS/ROS2是什么","title_tokens":["什么","/","是","ros","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人—— PR2 ，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。","text_tokens":["实验室","木头","越来越","收拾","—","复杂","大家","轰动","推动","机械","很多","外观","：","真的","实验","代","才","性能","当时","做出","说干就干","如果","但是","聊天","机器人","高效","框架","实现","尝试","有人","操作系统","想法","一个","斯坦福大学","没有","学术","衣服"," ","完成","为例","非常","也","中","是","出来","团队","台球","从中","系列","不想","呢","的","已经","别人","得以","robot","打","剪头发","而且","因","所以","都","一些","这","重要","容易","可能","组成","一系","既然","有志","软件系统","软件","年","这个","做","答案","帮助","干","零部件","以叠","可以","他们","独立","所有","家","向前","服务","第一","。","更","资金","低","如何","我们","技术","深知","一次","很","有没有","强悍","5","分钟","找到","头发","同一","并","一款","、","却","智能","这款","不到","针对","手机","虽然","玩耍","多","熨烫","为什么","开发","一系列","层面","？","那","成为","其中","在","只要","一套","越来","大步","初期","之内","洗衣","圈","电路","做饭","专业","联合","personal","一大步","第一次","上","充足","图","看到","和","应用","诞生","2","等","处理","操作","用于","自己","部件","一群","不","无聊","个","后期","只","款","一切","研究","100","同样","涉及","标准","要","系统","有","事情","精致","用","原型","功能","因为","柔性","横跨","或者","一大","分享","斯坦福","你","还","pr2","就","毛巾","了","甚至","陪","很快","类似","物体","ros","福大","此时","条","人","青年","向前走","而生","大学","不是","什么","肯定","平台","就是","给出","苹果","整理","光靠","最后","图中","对于","设计","效率","基于","所有人","，","时候","问题","应用软件","2007","叠","个人","机器","一起","这样"],"title":"ROS的诞生","title_tokens":["诞生","ros","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_1","text":"ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称 ROSCon ，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。","text_tokens":["长期","注意","这是","willow","越来越","每年","加上","—","亚马逊","推动","没想到","不下","大","局限性","这里","全新","为了","起点","稳定","万万","受限于","受限","迎来","2015","两年","暴露","版","多年","限于","但是","普及","版本","投资","传感器","增长","每","教程","机器人","2022","该","不乏","局限","时间","操作系统","使命","体感","斯坦福大学","一个","举办"," ","适用","成熟","时代","绝大","中","也","价格便宜","终于","进行","这群","是","项目","团队","出来","本","推出","随着","的","已经","robot","改为","看中","虽好","确定","所以","这","intel","重要","大笔","电脑","而","直到","几百万","软件","肩负着","年","这个","做","了解","发展","他们","采用","可以","标志","所有","想到","2007","开发者","world","服务","第一","。","更","感器","一样","发布","前","年轻人","笔记本","只想","到","简称","从","野蛮","我们","ubuntu","正式","全球","把","每个","一家","公司","进入","5","使用","创始","、","一款","控制","月底","时间轴","各种各样","限性","助推","多","投了","ros2","风险","operating","开发","名称","humble","现在","几百","大大","变为","2012","成为","其中","开始","在","让","此后","越来","garage","直接","风险投资","大会","没想","疫情","system","快速","圈","回到","年底","早期","来自","2011","支持","官方","2010","正式版","单独","真正","和","价格","诞生","游戏机","应用","几年","一届","为","线上","历经","大部分","亚马","等","操作","开源","自己","同年","居高不下","后期","笔记本电脑","款","笔记","身影","叫做","当初","传感","商业","2017","不仅","一堂","conference","原本","于","跟随","turtlebot","步伐","成本","系统","部分","游戏","原型","功能","因为","下","近两年","迭代","起","一大","给","分享","斯坦福","介于","五年","pr2","各样","就","绝大部分","便宜","被","了","提出","提取","kinect","xbox","一大笔钱","却步","底盘","很快","2014","第一个","类似","加快","ros","福大","资本","熟悉","人","一大笔","大学","roscon","大部","之上","讲解","过程","爆款","齐聚一堂","会","各种","设计","能够","逐渐","经历","扫地","，","望而却步","年轻","原因","问题","着","百万","成功","肩负","关键","个人","机器","微软"],"title":"ROS的发展","title_tokens":["发展","ros","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_2","text":"ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["围绕","时至今日","做到","四大","越来越","自身","大家","这里","机械","很多","简单","明智","同时","：","windows","无论","动机","案例","统统","上市","c","；","机器人","实现","时间","巨人","一个","还是","b","今日"," ","媒体","由","中","也","正如","”","人才","繁荣","是","许可","非常","嵌入式","跑","对","同理","至今","已经","的","率","别人","多项","完全","新","具备","都","生态系","这","组成","人类","以","复用","软件","友好","这个","做","体系","ros1","机制","发展","可以","他们","沉淀","家","向前","。","更","远","多媒体","全人类","多媒体系统","汽车","从","到","我们","将","核心","工具","技术","尽量","推进","全球","把","生态系统","工业","一家","公司","广泛","制造","使用","智能化","用于","、","并","智能","各种各样","领域","采购","多","ros2","目标","开发","移动","通信","总称","集合","那","成果","成为","在","通常","商业化","创意","已有","越来","直接","轮子","快速","无论是","做成","肩膀","支持","造","之","上","下来","模块化","看到","和","应用","产品","重新","提高","长远","开源","许可证","自己","进步","普遍","全球化","臂","来讲","身影","一步","宽松","商业","嵌入","特性","怀揣","站","linux","标准","a","智慧","系统","这些","有","复合","全人","部分","功能","开发工具","零","分享","给","结晶","还","各样","此","跨平台","就","被","了","水下","比如","代表","人形","ros","促使","做法","向前走","生态","不是","特点","“","平台","就是","来","不要","整合","缩短","最后","会","上去","各种","设计","模块","社区","，","着","本身","移动机器人","新增","引擎","机器","一起","这样"],"title":"ROS的特点","title_tokens":["特点","ros","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_3","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。","text_tokens":["万","得到","革命","这是","answers","浏览","越来越","不多","大家","算是","这里","查看","上图","活跃","大","可为","很多","用户","日常","发表","回答","频繁","80","排名","：","新鲜","近几年","总而言之","活跃度","不同","如果","维基百","教程","增长","人数","；","棒","更为","机器人","每","希望","讨论","一个","其他","问答","乐意","维基百科","增长速度","15"," ","这一波","大有可为","以上","程度","绝大","中","非常","也","神兵","月","是","本","页面","呢","元素","的","新","等等","已经","情况","左右","各项","曲线","差不多","250","都","论坛","这","重要","万左右","相关","四项","发展","可以","关于","通过","迅猛","开发者","。","记录","发布","加","统计","利器","从","到","我们","访问","核心","浪潮","几个","绝对","次数","很","根据","全球","每个","万人","上边","使用","、","参考","地域","基本","下载","助推","多","开发","现在","？","成为","其中","在","据库","选择",".","越来","wiki","40","正在","20","快速","存储","作为","清晰","研发","国家","上","速度","和","应用","几年","趋势","150","起来","新鲜事","看到","大部分","等","快","活动","方式","不","度","无疑","张图","最为","多万","资源","25","最佳","有","这些","数据库","百科","源码","部分","功能","index","给","包","你","就","绝大部分","提出","了","其实","网站","比如","代表","org","ros","人","两个","大部","什么","discourse","浏览量","总体","就是","数据","整合","最高","基本上","会","动力","各种","访问量","来看","学习","社区","而言","说明","，","索引","问题","packages","任何","机器","维基"],"title":"ROS的社区","title_tokens":["社区","ros","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#_1","text":"关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["参考资料","—","大家","这里","板块","掌握","配合","教程","机器人","提供","一个","github"," ","绝大","入门教程","中","也","托管","是","项目","本","效果","大量","之旅","的","世界","方法","主阵地","一段","都","这","重要","工程师","离不开","推荐","这个","详细","首先","关于","可以","更新","所有","几乎","。","从","工具","我们","技术","将","不开","欢迎","几个","万人","使用","找到","解决","参考","资料","工程","百科全书","ros2","开发","阵地","之王","知识","成为","开始","在","提问","啦","好","作为","泡泡","来到","课程","和","后续","入门","全书","大部分","开源","120","努力","最为","古月","主要","要","所学","有","部分","百科","居","其次","分享","还","你","绝大部分","网站","然后","ros","不断","踏上","不断更新","大部","更好","代码","最后","会","视频","学习","社区","google","美妙","内容","一定","搜索","，","问题","还有","扩展","机器","一起","同学"],"title":"参考资料","title_tokens":["参考","资料","参考资料"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/","text":"ROS2对比ROS1 在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。 ROS1的局限性 首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。 全新的ROS2 ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。 ROS2 vs ROS1 系统架构 在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。 DDS通信 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。 核心概念 ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。 编码方式 再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。 命令行 最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随教程，你就会慢慢理解这些特性。","text_tokens":["做到","几点","master","这里","常用","过","通用","频繁","提","定义","稳定性","单兵","写","原有","之前","广泛应用","纠结","精力","有限","不同","如果","驾驶","单兵作战","彼此","更接","教程","；","框架","实现","一个","国际","大致","不用","一一","安全","适用","以上","时代","个体","策略","与","第二","不再","嵌入式","rmw","项目管理","省略","已经","诟病","软件开发","rostopic","搭载","架构","升级","一团","上手","方法","相对","一些","这","重要","大部头","可能","国际标准","里","这个","揭秘","只不过","运算","一代","机制","没","服务","几乎","适配","。","rosbuild","发布","作战","课时","面向对象","基本保障","通信协议","封装","每个","python","联网","一致","广泛","担心","解决","并","条件","控制","巨大","去","虽然","针对","举","colcon","方案","系统工程","最终","两者","第二代","整体","让","一套","电脑系统","啦","推倒重来","有线","通用性","另","保障","确实","学","上升","真正","保证","移植","诞生","后续","变革","建筑","一行","表示","处理","开源","总结","环境","行为","分布式","延迟","款","原本","怀揣","于","盖","除此之外","级别","最佳","当","以下","推倒","三个","乱麻","移植性","主角","给","还","就","绝大部分","了","甚至","客户","宕机","高","新版","类似","熟悉","macos","实时","多功能","什么","发成","换成","轻松","就是","节点","来","打交道","从而","经验","过程","会","1ms","是从","学习","图像","地方","切换","任何","生活","管理器","所示","差异","这样","—","局限性","是否","用户","开发成本","同时","下要","属性","为了","共享内存","企业","自动","适合","常","变化","启动","但是","未来","机器人","提供","该","迁移","解密","使命","毛坯","二代","之初","其他","尽力","完整","历史","诸多"," ","深入","存在","改","编码方式","暂且","编译系统","完","本","mcu","大量","调试","安装","率","解算","接近","突然","catkin","理器","最新","都","可读","一团乱","较","几百万","打成","迈过","软件","做","相关","很大","只能","发展","可以","通过","rtos","所有","大幅","开发者","更","他","以及","应用层","历史使命","从","链接","我们","运动","将","简称","交付","核心","走向","python3","只是","不够","之间","命令","接触","似乎","陆续","一家","用于","间层","干掉","产品化","微控制器","一团乱麻","体验","布式","ros2","风险","开发","装修","客户端","千差万别","？","稍安","开始","也许","走","最大","命令行","越来","直接","分布","先","c++","编译器","保留","通信接口","用到","上","充足","课程","运动学","优化","但","大部分","提高","操作","不会","丰富","自家","专注","完善","研究","android","特性","最为","强壮","例子","当然","方便","资源","主要","要","唯一","系统","时","用","部分","api","总之","过来","一本","考虑","要求","如","比如","阶段","满足","ros","听","发布者","实时性","高昂","部署","开发方式","肯定","更好","讲解","下边","左侧","依赖","最后","产品开发","大幅度","设计","放在","只有","中间","基于","选项","一定","房子","全部","时候","问题","还会","两个","消费","一种","明显","担忧","驱动","层","越来越","可靠性","带领","编程语言","以下几点","库会","交道","协议","：","另外","消失","含义","切记","后","至关","一下","普及","良好","版本","应该","毛坯房","物","opensplice","每","便于","场景","角度","时间","没有","操作系统","内部","尤其","理解","学术","编写","指挥","不断涌现","再","发送","tcp","导致","中","进行","哪些","非常","ament","定性","是","二个","项目","到底","指定","第二个","加密","涌现","更具","一边","电脑","而","继续","概念","加入","了解","批量","首先","减少","现有","不能","dds","discovery","部头","道坎","接收","汽车","工具","一页","二种","对系统","体现","翻地","/","真实","搬","把","ceo","可靠","网络","一款","细节","基本","限性","力学","程序","或","多","工程","学术研究","动力学","第二种","集成","几百","发现","不难理解","意义","其中","内存","在","自","可选","格局","听说","选择","amr","相比","共享","幅度","灵活","黑客","做成","分解","之后","主","而已","致使","wifi","连接","和","应用","难度","航天","为","全","信号","变得","长远","middleware","雷达","需要","自己","100ms","带来","不仅","管理","配置","一步","叫做","张图","运行","建立","udp","类型","某","标准","更换","why","出现","因为","或者","可读性","各样","看看","你","pr2","经常","设备","run","批量生产","vs","编码","符合","不过","名字","）","右侧","按照","不是","性","印象","总体","之上","不要","5g","能够","来看","会成","社区","说明","，","rosrun","网络连接","厂家","百万","机器","入侵","注意","信息","重来","复杂","这台","大家","大","具体","很多","是因为","简单","修改","全新","得","windows","足够","无论","稳定","一旦","性能","编程","新一代","接口","接入","丢","颠覆","看","调用","局限","受制","由于","生产","标准化","小伙","完成","（","绝大","厂商","测试","也","干扰","对","呢","随着","的","挑战","不太","话题","最","出错","多个","复杂度","具备","所以","总体而言","基础","不爽","结合","工作站","软件系统","复用","答案","ros1","家庭","走向市场","独立","他们","除此","么","天翻地覆","编译","第一","内","颠覆性","算力","一样","有且","计算","即可","面向","能","到","如何","协作","尽量","流程","交给","依然","小伙伴","全球","无法","收","公司","成功经验","周期","使用","找到","各位","中间层","慢慢","、","初次","智能","各种各样","手机","图片","借助","为什么","目标","能力","名称","进程","层面","可移植","通信","除了","不难","那","topic","需求","只要","消费市场","可选项","请","受制于","它","好","完整性","售价","研发","支持","想要","远比","面临","安全性","翻新","可移植性","产品","重新","勿躁","过去","比","等","更加","发","方式","不","fastrtps","来讲","商业","嵌入","同样","不好","先进","对比","linux","跟随","成本","有","这些","控制器","最早","实力","功能","下","借鉴","分散","对象","跨平台","之外","成","其实","第一个","然后","不断","面对","至关重要","大部","语言","工作","市场","代码","平台","数据","前方","对于","动力","各种","强","底层","怎样","伙伴","小","行人","陌生","而言","还有","角色","简单明了","成功"],"title":"ROS2对比ROS1","title_tokens":["ros1","ros2","对比"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2ros1","text":"在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。","text_tokens":["第二代","？","大","其中","这","在","也许","过","看看","你","听说","就","之前","做","ros1","么","ros","变化","。","上","从","能","我们","和","就是","一个","二代","来看","使用","不"," ","学习","，","第二","或","对比","多","到底","ros2","有","的","名称"],"title":"ROS2对比ROS1","title_tokens":["ros1","ros2","对比"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros1","text":"首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。","text_tokens":["担忧","入侵","可靠性","—","复杂","这台","具体","是因为","：","为了","单兵","足够","新一代","自动","有限","适合","驾驶","但是","良好","普及","单兵作战","丢","；","机器人","框架","时间","没有","由于","一个","内部","生产","学术","不用","不断涌现","历史"," ","完成","绝大","中","也","嵌入式","是","干扰","呢","随着","的","已经","搭载","具备","涌现","都","一些","这","工作站","软件","答案","ros1","只能","运算","首先","发展","可以","家庭","独立","批量","走向市场","一代","天翻地覆","服务","第一","。","他","算力","计算","作战","汽车","从","我们","走向","不够","翻地","似乎","找到","可靠","用于","网络","一款","并","条件","虽然","针对","学术研究","ros2","为什么","目标","开发","能力","风险","最终","通信","？","那","在","让","它","有线","黑客","售价","做成","支持","致使","连接","上","充足","课程","和","保证","应用","产品","诞生","航天","大部分","处理","更加","自己","不","款","研究","嵌入","运行","类型","原本","先进","当然","资源","级别","why","成本","有","要","系统","出现","用","部分","最早","因为","实力","或者","主角","pr2","就","绝大部分","了","甚至","设备","批量生产","比如","第一个","类似","ros","高昂","不断","大部","实时","什么","工作","市场","平台","就是","数据","会","各种","设计","来看","小","，","网络连接","问题","地方","机器","这样"],"title":"ROS1的局限性","title_tokens":["ros1","局限性","局限","限性","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2","text":"ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。","text_tokens":["做到","几点","master","通用","提","稳定性","原有","纠结","不同","驾驶","框架","实现","一个","不用","安全","时代","个体","策略","与","第二","不再","项目管理","已经","搭载","架构","升级","方法","相对","这","可能","这个","机制","。","rosbuild","课时","基本保障","python","并","控制","巨大","去","虽然","针对","colcon","方案","系统工程","最终","让","电脑系统","推倒重来","通用性","保障","真正","移植","后续","变革","建筑","环境","行为","分布式","原本","怀揣","于","盖","最佳","以下","推倒","给","还","就","了","甚至","宕机","新版","类似","macos","实时","就是","节点","经验","会","1ms","任何","管理器","生活","这样","差异","同时","下要","为了","自动","适合","变化","未来","但是","机器人","提供","解密","使命","毛坯","之初","尽力","完整","历史","诸多"," ","编译系统","mcu","大量","调试","解算","catkin","理器","最新","都","较","打成","软件","很大","可以","rtos","所有","开发者","更","以及","历史使命","链接","我们","运动","走向","python3","只是","之间","用于","产品化","微控制器","体验","布式","ros2","风险","开发","装修","千差万别","？","越来","直接","分布","c++","编译器","保留","上","课程","运动学","优化","但","操作","不会","android","特性","强壮","方便","要","系统","用","api","考虑","要求","比如","阶段","满足","ros","实时性","部署","肯定","设计","一定","房子","全部","时候","问题","还会","两个","消费","一种","明显","越来越","以下几点","：","后","一下","毛坯房","场景","没有","操作系统","尤其","编写","发送","导致","中","进行","ament","定性","是","项目","加密","更具","电脑","继续","不能","dds","汽车","工具","二种","对系统","体现","把","可靠","网络","一款","细节","基本","力学","多","工程","动力学","第二种","发现","在","格局","选择","amr","相比","黑客","分解","wifi","连接","和","应用","为","全","信号","长远","需要","自己","100ms","不仅","管理","叫做","运行","标准","出现","或者","各样","经常","）","不是","性","之上","能够","来看","说明","，","网络连接","机器","入侵","重来","复杂","大家","大","具体","很多","简单","修改","得","全新","windows","无论","稳定","一旦","性能","接口","颠覆","受制","标准化","（","完成","测试","也","对","呢","的","挑战","出错","具备","所以","基础","结合","ros1","他们","独立","编译","内","第一","颠覆性","算力","能","到","如何","协作","尽量","流程","无法","成功经验","周期","使用","、","智能","各种各样","手机","借助","层面","通信","除了","那","需求","消费市场","受制于","它","好","完整性","研发","远比","面临","安全性","翻新","产品","重新","过去","比","等","更加","不","不好","linux","有","这些","控制器","下","借鉴","跨平台","第一个","面对","语言","市场","工作","代码","平台","数据","前方","动力","各种","强","怎样","行人","角色","成功"],"title":"全新的ROS2","title_tokens":["ros2","全新","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2-vs-ros1","text":"","text_tokens":[],"title":"ROS2 vs ROS1","title_tokens":[" ","ros2","ros1","vs"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_1","text":"在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。","text_tokens":["驱动","层","注意","信息","—","大家","复杂","master","很多","过","频繁","简单","库会","交道","得","协议","windows","写","稳定","另外","消失","共享内存","至关","变化","如果","接口","应该","彼此","提供","框架","看","调用","操作系统","理解","一个","大致","指挥","再","深入"," ","tcp","中","也","进行","哪些","是","安装","大量","的","不太","最","突然","一团","架构","理器","方法","都","这","重要","一团乱","而","里","这个","ros1","只不过","了解","机制","通过","可以","dds","所有","rtos","discovery","内","。","一样","有且","发布","应用层","接收","我们","将","接触","ceo","把","封装","通信协议","公司","找到","中间层","、","间层","并","程序","一团乱麻","ros2","开发","进程","两者","通信","客户端","发现","不难","不难理解","那","内存","整体","在","开始","走","自","让","可选","一套","可选项","请","它","好","共享","先","通信接口","而已","连接","上","和","应用","后续","但","变得","更加","雷达","需要","操作","方式","不","完善","管理","张图","udp","建立","对比","linux","主要","标准","更换","系统","这些","有","乱麻","就","成","了","客户","比如","类似","听","ros","不过","名字","右侧","macos","至关重要","肯定","印象","就是","节点","数据","打交道","从而","下边","依赖","会","底层","会成","只有","中间","基于","选项","是从","学习","图像","，","时候","角色","简单明了","左侧","管理器","明显","这样"],"title":"系统架构","title_tokens":["架构","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#dds","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。","text_tokens":["复杂","master","这里","是否","用户","开发成本","频繁","简单","定义","属性","协议","得","为了","写","稳定","广泛应用","性能","纠结","精力","常","变化","不同","接口","如果","接入","版本","应该","物","opensplice","丢","每","机器人","提供","该","场景","实现","一个","国际","其他","不用","再"," ","适用","tcp","改","厂商","中","也","是","完","rmw","省略","指定","安装","的","率","诟病","加密","最","多个","复杂度","所以","都","一些","这","不爽","国际标准","软件系统","软件","复用","这个","做","ros1","减少","加入","可以","dds","么","适配","。","更","一样","简称","我们","如何","交付","交给","/","通信协议","无法","收","每个","联网","一家","把","广泛","解决","、","并","基本","举","程序","多","ros2","目标","开发","层面","通信","除了","？","在","让","需求","最大","只要","听说","选择","相比","好","先","另","灵活","想要","移植","应用","产品","重新","优化","一行","为","等","提高","middleware","发","开源","丰富","自家","更加","专注","fastrtps","不","带来","延迟","来讲","配置","udp","商业","某","例子","当然","于","唯一","标准","更换","要","成本","系统","这些","时","用","三个","部分","总之","功能","过来","给","之外","就","了","其实","高","比如","满足","然后","类似","符合","不过","ros","熟悉","按照","部署","不是","肯定","发成","轻松","代码","就是","数据","5g","产品开发","对于","会","各种","设计","能够","底层","放在","基于","社区","，","问题","还有","厂家","切换","机器","一种","这样"],"title":"DDS通信","title_tokens":["通信","dds"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_2","text":"ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。","text_tokens":["部分","几百","开发","意义","大家","方法","这里","其中","在","很多","过","几百万","就","了","概念","ros1","含义","这些","保留","开发者","几乎","ros","熟悉","以及","。","如果","应该","开发方式","便于","从","到","应用","迁移","课程","我们","尽量","依然","讲解","和","没有","小伙伴","全球","第二个","小伙","会","一一","不用","一致","广泛","方式","不"," ","使用","各位","学习","存在","伙伴","并","陌生","担心","，","非常","中","也","第二","二个","百万","已经","本","ros2","有","的"],"title":"核心概念","title_tokens":["核心","概念"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_3","text":"再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。","text_tokens":["带领","大家","编程语言","具体","写","编程","切记","企业","版本","教程","更接","角度","机器人","实现","一个","再"," ","中","也","暂且","是","项目","的","软件开发","接近","方法","具备","一边","一些","这","可读","总体而言","大部头","迈过","软件","ros1","。","更","部头","发布","道坎","面向","面向对象","从","如何","我们","一页","真实","搬","程序","图片","多","ros2","开发","可移植","发现","稍安","在","之后","确实","可移植性","学","用到","移植","和","课程","后续","难度","勿躁","提高","操作","方式","来讲","一步","特性","同样","当","用","移植性","可读性","一本","对象","看看","就","如","编码","发布者","不过","大部","语言","更好","总体","来","不要","过程","会","学习","而言","，","两个","机器","所示"],"title":"编码方式","title_tokens":["编码","编码方式","方式"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_4","text":"最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随教程，你就会慢慢理解这些特性。","text_tokens":["—","大家","master","常用","：","编程","启动","变化","如果","教程","每","理解","一个","大致","再"," ","以上","中","也","是","对","的","话题","rostopic","上手","相对","都","做","相关","概念","ros1","揭秘","没","现有","独立","大幅","所有","除此","dds","。","更","即可","工具","我们","核心","命令","把","陆续","慢慢","控制","干掉","初次","ros2","开发","集成","通信","topic","在","选择","命令行","啦","好","幅度","主","上升","和","后续","难度","表示","总结","特性","最为","某","对比","跟随","除此之外","有","这些","功能","下","分散","你","之外","就","了","run","比如","ros","多功能","换成","印象","节点","就是","最后","会","大幅度","而言","，","rosrun","一种"],"title":"命令行","title_tokens":["命令","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/","text":"ROS2安装方法 本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。 Linux系统简介 时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。 Ubuntu系统简介 我们后续课程使用到的Linux发行版就是 ubuntu系统 。 Ubuntu诞生于2004年10月份， 每六个月发布一个新版本 ，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。 Ubuntu虚拟机安装 虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下： 1. 下载系统镜像 下载链接： https://ubuntu.com/download/desktop 2. 在虚拟机中创建系统 3. 设置虚拟机硬盘大小 4. 设置Ubuntu镜像路径 5. 启动虚拟机 6. 设置用户名和密码 7. 等待系统安装 8. 完成安装 Ubuntu系统安装好后，大家可以先随意使用熟悉一下。 ROS2系统安装 接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下： 1. 设置编码 $ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8 2. 添加源 $ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844 3. 安装ROS2 $ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop 4. 设置环境变量 $ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。 ROS2示例测试 为了验证ROS2安装成功，我们可以通过以下示例进行测试。 示例一：命令行示例 先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。 示例二：小海龟仿真示例 再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["长期","行列","路径","ssl","18","上层","常用","这里","master","后缀","通用","字符串","原有","之前","验证","一","(","可视化","两年","~","有限","不同","如果","强大","教程","2022","实现","guyuehome","一个","还是","检验","发行版","第二句","适用","热情","成熟","与","print","第二","8","已经","软件开发","蓝色","升级","方法","一些","这","重要","源","可能","1","并用","年","这个","当中","合适","www","最好","准备","7","hello","采用","何人","精神","world","服务","。","可视","每隔","]","发布","null","这套","unix","技术","技术实力","绝对","中将","简介","ubuntu20.04","联网","学生","上下左右","5","by","22","d","并","控制","任务","share","虽然","发挥","通讯","lts","6","一句","opt","raw","互联网","让","一套","随意","已有","添加","目前","啦","各个","变量","快速","操作方法","https","本相","人工","背景","尚","收费","移植","保证","后续","诞生","py","仿真器","表示","地址","deb","快","开源","提交","环境","叫","紧随其后","原本","products","于","除此之外","优先","以下","list","vmware","之一","指标","个人爱好","给","还","就","户名","了","甚至","main","激发","试一试","构建","此时","熟悉","大学","macos","二","一直","$","什么","紧随","echo","就是","来","节点","过程","会","至此","04","workstation","反馈","应用软件","_","packages","任何","这样","每年","浏览","林纳斯","—","是否","大学生","用户","同时","量","为了","上下","企业","变动","版","适合","多用户","启动","但是","未来","机器人","该","其他",">"," ","demo","兼容","月","本","修复","芬兰","安装","大量","等等","模式","订阅","分别","都","发行","传播","一应俱全","lc","软件","做","真器","传输","通过","可以","发展","更新","关于","顺序","动手做","开发者","更","他","创建","failed","吸引","命名","从","链接","我们","指令","核心","将","运动","一次","很","命令","接触","接下来","install","参考","源代码","决定","ros2","开发","如遇","teleop","现在","？","开始","to","最大","原理","命令行","越来","sudo","出于","直接","之内","先","介绍","无论是","上","下来","课程","但","操作","connect","示例",")","任何人","最为","正常","唯一","主要","前先要","系统","时","虚拟机","=","setup","keyring","可","tee","好者","考虑","激起","比如","archive","实践","org","ros","热爱","基本相同","o","发布者","探索","“","|","接下","讲解","37844","依赖","提到","com","位置","设计","先要","一定","cpp","小海","时候","问题","10","redhat","bash","sources","个人","两个","一起","一种","比较","gen","越来越","加上","字符","：","locale","-","另外","千层浪","后","talker","一下","版本","html","应该","每","4","打包","场景","时间","操作系统","没有","node","六个","再","人工智能","吧","中","进行","”","二个","是","gnupg","keyrings","第二个","新","情况","左右","终端","步骤","等待","电脑","务器","应用程序","概念","占据","加入","了解","持续","download","报错","update","dds","六个月","多人","2004","多任务","ubuntu","/","把","算机","建议","其后","us","网络","基本","程序","或","镜像","多","codename",":","外衣","计算机","其中","在","arch","选择",".","3","者","编辑","之后","环境变量","第一次","turtlesim","看到","和","应用","2","turtle","擦掌","开放","关注","维护","需要","自己","http","千层","只","内核","不仅","管理","会加","叫做","个","apt","运行","usr","nodes","普通","操作界面","标准","免费","出现","互联","影响","因为","rosdistro","或者","分享","伴随","相同","各样","你","自行","os","仿真","其","衡量","硬件","数字","run","文件","编码","多用","一应","名字","lang","之上","如下","服务器","好后","gpg","绑定","说明","放到","，","试试","&&","机器","密码","all","经典","大家","大","upgrade","很多","windows","无论","稳定","摩拳擦掌","环境变","编辑器","性能","俱全","说干就干","用户名","华丽","bashrc","pro","desktop","成功","准确","evaluation","完成","为例","测试","也","release","对","效果","呢","的","不太","最","多个","utf","lsb","所以","signed","以","看出","bug","迅猛","architecture","除此","并且","第一","一位","爱好","一样","计算","发扬光大","爱好者","到","如何","依然","en","公司","奥义","使用","、","资料","智能","各种各样","领域","下载","source","humble","编号","通信","节","除了","key","一石激起千层浪","成为","请","好","curl","回到","月份","小海龟","支持","想要","\"","重新","起来","locales","界面","等","硬盘","二句","大小","不","来讲","ubuntu22.04","商业","虚拟","centos","linux","有","fedora","动手","功能","实力","下","export","海龟","之外","真理","成","其他软件","dpkg","第一个","代表","点击","[","1991","第一句","设置","工作","出","按键","代码","数据","一般","键盘","乐于","发扬","githubusercontent","dev","各种","底层","listener","浏览器","etc","蕴藏","--","唯一标准","光大"],"title":"ROS2安装方法","title_tokens":["方法","ros2","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2","text":"本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。","text_tokens":["最","节","—","一起","重要","了解","一下","。","我们","操作系统","操作","底层","先要","的","，","本","安装","linux","前先要","ros2","系统","一种"],"title":"ROS2安装方法","title_tokens":["方法","ros2","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#linux","text":"时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。","text_tokens":["行列","越来越","每年","林纳斯","—","加上","常用","大","大学生","通用","用户","很多","量","windows","原有","之前","稳定","另外","性能","可视化","千层浪","说干就干","后","企业","有限","多用户","不同","适合","华丽","强大","版本","应该","教程","每","打包","场景","实现","时间","操作系统","没有","一个","其他","准确","检验","发行版"," ","热情","成熟","适用","与","中","也","兼容","是","任何","修复","本","对","芬兰","大量","安装","的","已经","呢","模式","等等","情况","最","不太","方法","所以","都","一些","这","重要","务器","发行","传播","并用","软件","年","应用程序","做","当中","加入","概念","最好","这个","通过","可以","bug","发展","何人","迅猛","精神","动手做","并且","开发者","服务","。","他","一位","爱好","更","计算","多人","爱好者","发扬光大","吸引","命名","这套","到","unix","我们","技术","核心","多任务","ubuntu","技术实力","把","联网","学生","公司","可视","算机","一样","使用","、","参考","并","任务","各种各样","虽然","基本","源代码","程序","或","镜像","多","决定","ros2","开发","外衣","现在","计算机","？","一石激起千层浪","其中","成为","在","互联网","原理","一套","已有","越来","出于","目前","先","快速","回到","之后","操作方法","本相","支持","上","尚","看到","和","应用","收费","重新","起来","但","界面","开放","等","操作","维护","开源","自己","需要","提交","不","千层","任何人","内核","不仅","管理","叫","来讲","叫做","商业","原本","centos","操作界面","linux","唯一","标准","主要","系统","有","免费","出现","之一","互联","fedora","动手","功能","实力","下","或者","指标","个人爱好","分享","伴随","相同","还","好者","给","各样","就","真理","成","了","甚至","衡量","其","硬件","激发","激起","比如","实践","多用","热爱","基本相同","此时","熟悉","名字","1991","大学","macos","什么","代码","就是","讲解","之上","过程","一般","依赖","提到","服务器","乐于","发扬","会","各种","设计","底层","绑定","反馈","放到","，","应用软件","问题","redhat","唯一标准","个人","一起","光大"],"title":"Linux系统简介","title_tokens":["系统","简介","linux"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu","text":"我们后续课程使用到的Linux发行版就是 ubuntu系统 。 Ubuntu诞生于2004年10月份， 每六个月发布一个新版本 ，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。","text_tokens":["长期","浏览","18","大家","上层","常用","这里","后缀","用户","很多","为了","windows","无论","之前","稳定","摩拳擦掌","编辑器","性能","两年","俱全","变动","版","不同","一下","如果","但是","版本","未来","教程","每","4","机器人","2022","一个","还是","其他","六个","发行版","再"," ","人工智能","为例","中","进行","也","月","是","本","效果","安装","的","已经","新","软件开发","升级","方法","所以","都","重要","电脑","可能","发行","一应俱全","以","软件","年","占据","持续","合适","看出","通过","可以","更新","顺序","除此","六个月","开发者","第一","。","更","每隔","发布","2004","到","如何","我们","从","ubuntu","绝对","依然","一次","很","接触","ubuntu20.04","联网","5","使用","建议","其后","22","、","参考","资料","网络","智能","发挥","领域","或","通讯","多","lts","开发","编号","除了","其中","在","互联网","让","最大","选择","已有","直接","之内","好","介绍","各个","无论是","编辑","月份","之后","支持","想要","人工","第一次","上","课程","移植","应用","后续","诞生","保证","擦掌","表示","等","关注","快","硬盘","维护","自己","环境","个","只","会加","ubuntu22.04","紧随其后","虚拟","普通","linux","于","除此之外","主要","优先","系统","有","时","免费","出现","虚拟机","互联","影响","因为","自行","还","你","之外","就","了","考虑","硬件","数字","比如","试一试","文件","代表","一应","熟悉","一直","紧随","出","就是","讲解","会","04","位置","各种","浏览器","一定","，","时候","10","机器","比较","这样"],"title":"Ubuntu系统简介","title_tokens":["ubuntu","系统","简介"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu_1","text":"虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下：","text_tokens":["vmware","虚拟机","多个","步骤","大家","这里","开始","在","自行","让","同时","相同","：","就","软件","已有","其他软件","请",".","另外","-","www","准备","啦","可以","采用","构建","https","后","。","pro","html","工作","我们","和","之上","如下","一个","地址","/","操作","其他","com","workstation","环境"," ","evaluation","完成","并","叫做","虚拟","，","运行","是","下载","products","安装","系统","的",":"],"title":"Ubuntu虚拟机安装","title_tokens":["ubuntu","安装","虚拟","虚拟机"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1","text":"下载链接： https://ubuntu.com/download/desktop","text_tokens":[" ","download","链接","ubuntu","下载","https","/","desktop","com","：",":","."],"title":"1. 下载系统镜像","title_tokens":[" ","下载","镜像","1","系统","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2","text":"","text_tokens":[],"title":"2. 在虚拟机中创建系统","title_tokens":[" ","虚拟机","2","虚拟","中","在","创建","系统","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3","text":"","text_tokens":[],"title":"3. 设置虚拟机硬盘大小","title_tokens":[" ","设置","虚拟机","3","虚拟","硬盘","大小","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4-ubuntu","text":"","text_tokens":[],"title":"4. 设置Ubuntu镜像路径","title_tokens":[" ","4","设置","路径","ubuntu","镜像","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#5","text":"","text_tokens":[],"title":"5. 启动虚拟机","title_tokens":["5"," ","虚拟机","虚拟","启动","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#6","text":"","text_tokens":[],"title":"6. 设置用户名和密码","title_tokens":["6"," ","设置","密码","和","用户名","用户","户名","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#7","text":"","text_tokens":[],"title":"7. 等待系统安装","title_tokens":[" ","7","等待","安装","系统","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#8","text":"Ubuntu系统安装好后，大家可以先随意使用熟悉一下。","text_tokens":["使用","先","一下","ubuntu","可以","，","大家","好后","熟悉","安装","系统","随意","。"],"title":"8. 完成安装","title_tokens":[" ","完成","8","安装","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_1","text":"接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下：","text_tokens":["步骤","：","就","了","可以","。","ros2","下来","到","我们","接下","ubuntu","如下","把","接下来","，","中","安装","系统"],"title":"ROS2系统安装","title_tokens":["ros2","系统","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1_1","text":"$ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8","text_tokens":["utf","all","=","export","lc","locale",".","sudo","-","update","lang","$","locales","en","install"," ","apt","us","_","8","&&","gen"],"title":"1. 设置编码","title_tokens":[" ","设置","编码","1","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2_1","text":"$ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844","text_tokens":["ssl","master","-","(","guyuehome",">"," ","print","”","release","gnupg","keyrings","lsb","signed","www","architecture","报错","update","failed","]","null","ubuntu","/","install","by","d","参考","share","source","codename","ros2",":","如遇","key","raw","to","arch",".","sudo","curl","https","\"","deb","connect","http",")","apt","usr","list","=","rosdistro","keyring","可","os","tee","dpkg","main","archive","org","ros","o","[","$","echo","“","|","37844","dev","githubusercontent","com","gpg","etc","，","_","packages","--","sources","&&"],"title":"2. 添加源","title_tokens":[" ","2","源","添加","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3-ros2","text":"$ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop","text_tokens":["$","apt"," ","sudo","-","update","upgrade","desktop","ros","humble","install"],"title":"3. 安装ROS2","title_tokens":[" ","3","ros2","安装","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4","text":"$ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。","text_tokens":["opt","setup","在","就",".","了","好","~","ros","。","bashrc","\"","$","echo","/",">","至此"," ","，","中","source","安装","bash","humble","ros2","系统","已经"],"title":"4. 设置环境变量","title_tokens":[" ","4","设置","环境变","环境变量","变量","环境","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_2","text":"为了验证ROS2安装成功，我们可以通过以下示例进行测试。","text_tokens":["验证","我们","通过","可以","，","测试","进行","安装","成功","。","ros2","为了","以下","示例"],"title":"ROS2示例测试","title_tokens":["ros2","测试","示例"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_1","text":"先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。","text_tokens":["订阅","通信","字符","终端","是否","重要","在","：","字符串","run","先","hello","通过","者","传输","第一个","dds","启动","发布者","talker","第一","world","。","如果","发布","以下","$","两个","“","数据","来","节点","py","没有","一个","命令","第二个","底层"," ","listener","nodes","吧","cpp","说明","试试","，","第二","demo","最为","正常","_","二个","”","中","问题","ros2","系统","的"],"title":"示例一：命令行示例","title_tokens":["一","命令行","命令","：","示例"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_2","text":"再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["一句","teleop","蓝色","分别","左右","经典","—","终端","key","海龟","在","仿真","：","就","真器","持续","上下","run","啦","试一试","可以","关于","启动","ros","小海龟","第一","点击","。","探索","ros2","背景","第一句","$","教程","上","指令","turtlesim","“","将","该","按键","节点","来","运动","仿真器","turtle","如下","后续","中将","node","一个","键盘","二句","至此","再","示例","第二句","上下左右"," ","奥义","小海","控制","蕴藏","，","中","运行","第二","_","”","我们","安装","成功","两个","的"],"title":"示例二：小海龟仿真示例","title_tokens":["小海","海龟","小海龟","仿真","：","二","示例"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/","text":"ROS2命令行操作 在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。 Linux中的命令行 类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。 启动方式 回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。 常用命令操作 我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。 ROS2中的命令行 ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。 运行节点程序 想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看节点信息 当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim 查看话题信息 当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose 发布话题消息 想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 发送服务请求 一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\" 发送动作目标 想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\" 录制控制命令 系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["目标目录","rm","路径","absolute","精心设计","这里","常用","mv","原有","之前","一","可视化","cmd","ctrl","感觉","spawn","不同","如果","}","2022","实现","一个","还是","大致","不用","geometry","以上","从来","rotateabsolute","由","mkdir","与","地","系列","已经","call","文件名称","看似","移入","一些","这","重要","里边","可能","1","本节","这个","改名","机制","逛来","服务","。","可视","]","发布","硬","产生","体操","逛去","绝对","商家","找","子目","根据","件夹","死记","解决","并","控制","去","虽然","不到","rotate","terminal","…","列表","度高","让","msgs","死记硬背","啦","觉得","另","快捷","其上","确实","背景","拷贝到","目","仿真器","进一步","表示","看不到","商场","绝对路径","笔记","哪","service","当前工作","什么样","目的","于","现出","list","跟","不变","还","就","了","参数","试一试","感受","片段","类似","此时","熟悉","ls","一直","$","什么","echo","rosbag","轻松","就是","来","节点","鼠标","复制","会","太","04","学习","内容","_","一点","不可","后边","播放","二十个","这样","发指","便捷","—","异常","怎么","theta","用户","标目","输入","若","name","二十","并不一定","案例","精心","启动","play","但是","未来","提供","该","尝试","体会","帮上","其他",">","难以","深入"," ","gedit","目录","info","本","pwd","科幻电影","调试","turtle1","都","一系","软件","真器","通过","可以","多到","所有","更","创建","t","笔记本","指令","链接","我们","将","核心","只是","一次","很","命令","接触","款式","所在","呀","接下来","枯燥","窗口","msg","体验","ros2","呈现出","teleop","？","写字","命令行","sudo","直接",",","先","保留","列出","用到","上","下来","但","系统管理员","操作","0.0","孤单","bag","统管","正常","主要","要","系统","动","用","某段","例如","深色","详细信息","比如","满足","源文件","ros","科幻","专门","“","pose","2.0","接下","pub","及其","既定","转","设计","选项","小海","一定","时候","问题","令人发指","一起","一种","带领","必不可少","字符","加上","总有","cp","：","z","-","后","一下","linear","每","呈现","角度","场景","没有","至于","node","再","删除","衣服","vel","发送","约束","中","进行","哪些","”","复现","是","做好","推出","指定","一二十个","x","既","终端","动作","一边","容易","电脑","继续","管理员","概念","现有","了解","详细","忙","一二","一件","权限","send","angular","工具","很少","/","把","程序","或","多","干什么","不一","集成",":","背","这种","录制","服装","在","rate","受","快捷键","选择","文件名",".","3","0","srv","record","灵活","黑客","编辑","麻烦","新建","想象","第一次","turtlesim","看到","和","应用","2","为","turtle","主目录","需要","自己","笔记本电脑","管理","一步","叫做","运行","某","一只","改了","因为","或者","相同","你","看看","此","手","仿真","请求","被","改变","兴趣","run","文件","想","多种","右键","不过","1.8","不是","适应","db3","语法","如下","及","35","则","能够","搜索","，","子目录","原因","这项","0.2","具体操作","保持","'","实验室","信息","<","随身带","17","大家","查看","某个","买","具体","很多","实验","无论","编辑器","复制到","一二十","调用","而是","子","魅力","完成","为例","twist","也","对","呢","随着","至今","的","不太","完全","话题","看中","多个","消息","所以","结合","以","感兴趣","执行","第一","一样","即可","到","如何","当前","感兴","rosbag2","均","死机","慢慢","常用命令","使用","定制","总","、","初次","炫酷","布料","为什么","目标","规则","名称","一系列","key","令人","显示","topic","action","又","材料","需求","逛来逛去","拷贝","40","它","好","回到","十个","小海龟","想要","+","\"","{","有点","起来","等","方式","不","goal","来讲","记忆","查","linux","11","有","这些","功能","下","每次","海龟","打开","成","第一个","数量","[","cd","电影","y","工作","出","数据","键盘","对于","随身","各种","自主","小","还有","段","alt","知道","--","文件夹"],"title":"ROS2命令行操作","title_tokens":["操作","ros2","命令","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2","text":"在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。","text_tokens":["带领","—","大家","海龟","在","重要","可能","本节","命令行","了","之前","案例","可以","感受","小海龟","第一","更","如果","ros2","。","第一次","到","工具","我们","适应","将","有点","一次","进一步","命令","接触","会","深入"," ","使用","魅力","学习","的","一步","小海","一定","运行","，","中","时候","多","调试","随着","一种","不太"],"title":"ROS2命令行操作","title_tokens":["操作","ros2","命令","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#linux","text":"类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。","text_tokens":["必不可少","便捷","精心设计","大家","异常","这里","买","很多","总有","无论","并不一定","可视化","精心","但是","呈现","场景","没有","一个","还是","其他","衣服"," ","约束","中","是","做好","科幻电影","推出","呢","至今","的","完全","已经","看中","看似","都","一些","里边","容易","结合","软件","现有","可以","逛来","一件","所有","服务","。","可视","一样","工具","我们","逛去","商家","根据","命令","款式","呀","使用","定制","解决","并","、","去","虽然","炫酷","多","布料","为什么","呈现出","规则","不一","这种","？","服装","在","度高","材料","需求","逛来逛去","受","命令行","先","灵活","保留","麻烦","想要","其上","想象","看到","和","起来","为","但","等","操作","自己","方式","不","商场","来讲","哪","什么样","某","于","linux","现出","这些","功能","每次","你","手","就","成","被","了","比如","满足","片段","类似","ros","科幻","此时","电影","一直","不是","什么","就是","来","既定","对于","会","各种","设计","能够","自主","一定","小","，","时候","问题","一点","不可","一种","这样"],"title":"Linux中的命令行","title_tokens":["中","命令","linux","的","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_1","text":"回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。","text_tokens":["随身带","发指","字符","大家","常用","怎么","输入","：","二十","ctrl","启动","后","一下","但是","一二十","体会","至于","而是","其他","不用","难以"," ","魅力","从来","中","也","是","本","科幻电影","对","系列","呢","随着","的","一二十个","既","终端","所以","都","这","电脑","一系","软件","这个","通过","可以","一二","多到","。","即可","硬","t","笔记本","到","工具","我们","指令","很少","很","命令","所在","死机","慢慢","使用","并","初次","枯燥","不到","窗口","为什么","一系列","背","令人","写字","terminal","在","又","列表","快捷键","选择","命令行","觉得","回到","黑客","十个","快捷","确实","+","背景","用到","上","看到","应用","操作","需要","看不到","方式","笔记本电脑","笔记","记忆","叫做","正常","有","用","因为","功能","打开","手","就","深色","参数","多种","数量","右键","不过","科幻","熟悉","专门","电影","不是","什么","就是","来","鼠标","及","会","随身","一定","搜索","，","原因","令人发指","时候","alt","这项","二十个"],"title":"启动方式","title_tokens":["启动","方式"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_2","text":"我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。","text_tokens":["目标目录","rm","路径","<","大家","某个","常用","用户","标目","若","cp","：","mv","原有","一","编辑器","复制到","感觉","一下","未来","该","没有","一个",">","删除"," ","gedit","由","目录","mkdir","中","也","”","地","pwd","指定","的","多个","文件名称","移入","一边","以","管理员","改名","可以","执行","所有","权限","。","创建","]","指令","链接","我们","将","绝对","找","当前","子目","只是","/","件夹","命令","把","均","常用命令","死记","或","多","体验","目标","名称","显示","…","列表","文件名","拷贝","sudo","死记硬背","它","先","另","回到","编辑","新建","列出","拷贝到","目","为","主目录","系统管理员","需要","不","绝对路径","统管","管理","当前工作","查","目的","linux","系统","这些","用","功能","不变","下","或者","打开","此","就","改变","了","文件","源文件","[","熟悉","cd","ls","工作","“","出","语法","来","复制","及其","及","对于","会","则","选项","，","子目录","保持","文件夹"],"title":"常用命令操作","title_tokens":["操作","命令","常用","常用命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2_1","text":"ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。","text_tokens":["跟","功能","下","都","topic","具体","在","海龟","相同","还","一系","仿真","继续","就","以","命令行","概念","了解","系列","机制","参数","比如","话题","可以","第一个","感受","所有","主要","不过","小海龟","第一","不同","。","下来","体操","什么","我们","核心","接下","节点","表示","一个","node","命令","操作","大致","接下来"," ","总","为例","内容","小海","与","，","中","也","有","目的","linux","具体操作","后边","对","ros2","干什么","一起","的","集成","一系列"],"title":"ROS2中的命令行","title_tokens":["中","命令","ros2","的","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_3","text":"想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["teleop","key","某个","海龟","例如","仿真","：","run","可以","想要","要","$","turtlesim","我们","和","节点","turtle","键盘","node","命令","操作","使用"," ","控制","运行","中","，","进行","_","ros2"],"title":"运行节点程序","title_tokens":["程序","节点","运行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_4","text":"当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim","text_tokens":["信息","加上","？","查看","都","：","就","感兴趣","兴趣","它","详细","啦","详细信息","可以","ros","如果","$","turtlesim","list","系统","节点","来","当前","感兴","node","一个","命令","/","子"," ","运行","中","哪些","，","某","info","知道","对","ros2","呢","有","的","这样"],"title":"查看节点信息","title_tokens":["节点","查看","信息"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_5","text":"当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose","text_tokens":["消息","turtle1","加上","查看","都","topic","还","：","试一试","想","即可","$","echo","看到","pose","数据","当前","如下","一个","/","命令","子","使用"," ","有","，","中","某","ros2","呢","系统","的","话题","list"],"title":"查看话题信息","title_tokens":["查看","信息","话题"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_6","text":"想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":["x","turtle1","topic","海龟","动","rate","还","1","：","msgs","命令行","z","直接",",","通过","可以","cmd","想要","1.8","发布","\"","{","}","$","linear","y","指令","angular","我们","2.0","起来","pub","/","命令","0.0","geometry",":","vel"," ","控制","twist","，","_","msg","--","ros2","话题"],"title":"发布话题消息","title_tokens":["消息","发布","话题"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_7","text":"一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\"","text_tokens":["'","x","call","改了","—","海龟","theta","name","还","仿真","：","真器",",","srv","试一试","服务","spawn","\"","}","{","产生","$","y","turtlesim","提供","我们","2","调用","来","仿真器","一个","/","孤单","太","再"," ","service","，","一只","0.2","ros2",":"],"title":"发送服务请求","title_tokens":["发送","服务","请求"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_8","text":"想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\"","text_tokens":["rotate","turtle1","absolute","动作","海龟","具体","action","theta","让","仿真","：","命令行","真器","这个","3","忙","通过","比如","可以","想要","send","\"","$","到","角度","提供","turtlesim","仿真器","一个","转","帮上","命令","/"," ","发送","goal","完成","rotateabsolute","，","中","_","指定","ros2","目标","的",":","这样"],"title":"发送动作目标","title_tokens":["发送","目标","动作"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_9","text":"系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["实验室","播放","用","turtle1","17","录制","某段","？","功能","常用","大家","这","很多","看看","：","实验",".","-","40","啦","好","0","可以","record","回到","cmd","play","想要","。","如果","$","每","下来","如何","rosbag","轻松","系统","2022","数据","实现","db3","就是","我们","尝试","rosbag2","很","/","还是","命令","一个","把","35","自己","04","再","bag","子","vel"," ","以上","与","运行","中","，","复现","_","还有","段","ros2","11","有","的"],"title":"录制控制命令","title_tokens":["录制","控制","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","text":"ROS2开发环境配置 ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。 Git git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git 下载教程源码 《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。 VSCode Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download VSCode插件配置 为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。 中文语言包 Python插件 C++插件 CMake插件 vscode-icons ROS插件 Msg Language Support Visual Studio IntelliCode URDF Markdown All in One VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["驱动","听到","all","浏览","—","大家","查看","复杂","这里","具体","很多","简单","：","官方网","windows","为了","常听到","-","广泛应用","另外","2015","编辑器","搭建","urdf","网上","自动","不同","如果","轻量","几千","版本","强大","教程","机器人","提供","高效","便于","非常简单","guyuehome","操作系统","visualstudio","一个","github","编写"," ","以上","完成","与","linus","中","也","进行","非常","神兵","中文","是","项目","修复","成千上万","推出","安装","大量","呢","的","众多","新","等等","调试","因","系列","多个","最","方法","终端","略显","所以","管理软件","都","一些","这","重要","上万","》","里边","可能","一系","离不开","软件","推荐","做","年","download","准备","发展","bug","几千万","可以","记事本","所有","开发者","编译","自带","。","以及","更","记事","利器","个人","如何","我们","工具","千上万","不开","简称","链接","组件","icons","中会","之间","/","件夹","命令","功能强大","intellicode","有些","python","广泛","install","language","使用","、","一款","并","这款","code","判断","git","源代码","冲突","下载","msg","多","ros2","讲","开发","哪里",":","集成","官方网站","一系列","clone","？","成为","在","让","增加","已有",".","sudo","vscode","直接","先","好","tutorials","c++","快速","两款","编辑","之后","插件","作为","https","in","支持","gitee","官方","人工","课程","和","看到","应用","入门","后续","一行","千万","管理工具","但","开源","不会","需要","21","操作","丰富","自己","提交","环境","示例","不","方式","审核","apt","管理","配置","one","studio","码云","只","特性","迅速","linux","无限","语言包","系统","这些","有","用","cmake","源码","功能","开发工具","每次","给","还","就","被","了","网站","硬件","visual","比如","成千","文件","《","support","ros","而生","人","macos","$","语言","肯定","出","国内","代码","喜欢","会","行","合并","com","设计","markdown","浏览器","贡献","内容","之父","，","搜索","_","下载方式","扩展","切换","理工","变更","机器","微软","文件夹","这样"],"title":"ROS2开发环境配置","title_tokens":["配置","ros2","开发","环境"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros2","text":"ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。","text_tokens":["源码","—","大家","查看","？","开发工具","一些","重要","给","离不开","推荐","做","vscode","准备","先","这些","两款","ros","编译","。","肯定","机器人","我们","代码","不开","课程","提供","如何","工具","和","中会","机器","需要","编写","呢","示例","环境","完成","的","、","配置","，","git","大量","开发"],"title":"ROS2开发环境配置","title_tokens":["配置","ros2","开发","环境"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#git","text":"git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git","text_tokens":["驱动","听到","—","大家","具体","简单","常听到","广泛应用","自动","不同","几千","版本","高效","非常简单","一个","github"," ","完成","linus","中","也","进行","非常","是","项目","修复","成千上万","安装","众多","的","等等","新","因","多个","方法","终端","所以","管理软件","都","这","上万","可能","软件","发展","bug","几千万","可以","所有","开发者","。","以及","工具","我们","千上万","之间","命令","有些","广泛","install","使用","并","一款","这款","判断","git","冲突","开发","哪里","在","让","增加","已有","sudo","直接","之后","gitee","人工","看到","和","应用","一行","千万","管理工具","开源","不会","需要","提交","不","审核","apt","管理","码云","特性","迅速","linux","有","系统","这些","功能","每次","就","被","了","网站","硬件","比如","成千","而生","人","$","肯定","国内","代码","会","行","合并","设计","贡献","内容","之父","，","切换","理工","变更"],"title":"Git","title_tokens":["git"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_1","text":"《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。","text_tokens":["用","源码","浏览","clone","略显","复杂","查看","这里","开发","—","》","很多","里边","还","：","就","集成",".","推荐","另外","vscode","好","tutorials","记事本","文件","《","https","自带","更","gitee","ros2","如果","记事","。","$","课程","和","代码","系统","入门","guyuehome","/","件夹","一个","21","会","com","环境","方式"," ","浏览器","，","中","git","_","下载","下载方式","是","多","文件夹","讲","有","的",":","这样"],"title":"下载教程源码","title_tokens":["教程","下载","源码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode","text":"Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download","text_tokens":["开发","功能","成为","在","：","官方网","windows",".","年","网站","vscode","download","visual","2015","编辑器","可以","搭建","快速","编辑","https","支持","。","轻量","官方","强大","macos","利器","简称","链接","和","代码","系统","组件","功能强大","但","一个","操作系统","/","visualstudio","操作","丰富","com"," ","studio","、","code","，","非常","源代码","神兵","是","扩展","项目","下载","linux","推出","微软","的",":","官方网站"],"title":"VSCode","title_tokens":["vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode_1","text":"为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。","text_tokens":["功能","一系","还","为了","vscode","可以","插件","。","ros2","便于","我们","后续","的","与","，","扩展","调试","安装","无限","系列","开发","一系列"],"title":"VSCode插件配置","title_tokens":["配置","vscode","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_2","text":"","text_tokens":[],"title":"中文语言包","title_tokens":["语言","中文","语言包"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#python","text":"","text_tokens":[],"title":"Python插件","title_tokens":["python","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#c","text":"","text_tokens":[],"title":"C++插件","title_tokens":["c++","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#cmake","text":"","text_tokens":[],"title":"CMake插件","title_tokens":["cmake","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode-icons","text":"","text_tokens":[],"title":"vscode-icons","title_tokens":["-","vscode","icons"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros","text":"","text_tokens":[],"title":"ROS插件","title_tokens":["ros","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#msg-language-support","text":"","text_tokens":[],"title":"Msg Language Support","title_tokens":[" ","msg","support","language"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#visual-studio-intellicode","text":"","text_tokens":[],"title":"Visual Studio IntelliCode","title_tokens":[" ","intellicode","visual","studio"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#urdf","text":"","text_tokens":[],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#markdown-all-in-one","text":"VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["最","开发","大家","在","推荐","vscode","可以","作为","插件","网上","支持","。","喜欢","出","自己","环境","只","以上","配置","搜索","，","也","个人","众多","的"],"title":"Markdown All in One","title_tokens":[" ","all","in","one","markdown"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/","text":"DDS Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。 通信模型 DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。 DDS DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。 什么是DDS 好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是 Data Distribution Service ，也就是 数据分发服务 ，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。 DDS在ROS2中的应用 DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。 质量服务策略QoS DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是 Domain ，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为 数据提供者和接收者之间的合约 。 具体会有哪些策略？比如： DEADLINE 策略，表示通信数据必须要在每次截止时间内完成一次通信； HISTORY 策略，表示针对历史数据的一个缓存大小； RELIABILITY 策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式； DURABILITY 策略，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。 案例一：在命令行中配置DDS 我们先来试一试在命令行中配置DDS的参数。 启动第一个终端，我们使用best_effort创建一个发布者节点，循环发布任意数据，在另外一个终端中，如果我们使用reliable模型订阅同一话题，无法实现数据通信，如果修改为同样的best_effort，才能实现数据传输。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort 如何去查看ROS2系统中每一个发布者或者订阅者的QoS策略呢，在topic命令后边跟一个\"--verbose\"参数就行了。 $ ros2 topic info /chatter --verbose 案例二：DDS编程示例 接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。 运行效果 启动两个终端，分别运行发布者和订阅者节点： $ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub 可以看到两个终端中的通信效果如下，和之前貌似并没有太大区别。 看效果确实差不多，不过底层通信机理上可是有所不同的。 发布者代码解析 我们看下在代码中，如果加入QoS的配置。 learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , }, 订阅者代码解析 订阅者中的QoS配置和发布者类似。 learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], }, DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们主要带领大家认识DDS，更多使用方法和相关内容，大家也可以参考下边的链接进行学习。 参考链接 https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["体","__","通路","第三种","组织","这里","常用","上层","航拍","42","过","频繁","提","定义","字符串","broker","之前","广泛应用","一","(","纠结","课","不同","如果","驾驶","无人机","}","树莓","一角","；","框架","实现","有人","guyuehome","一个","所","还是","这么","不用","焕然一新","0.5","4g","策略","由","与","第二","预测","吃","能源","8","地","rmw","众多","已经","服务端","蓝色","架构","升级","送给","库","回忆","有所","方法","关系","一些","这","几种","重要","class","可能","小组","1","年","这个","成立","合适","没","刚才","hello","某一","www","world","服务","。","]","发布","bv12z4y167w2","空间","才能","技术","sysml","concepts","接口标准","根据","how","每个","python","广泛","解决","并","控制","去","占用","针对","durability","举","on","流畅性","据传","可信","那该","技术标准","通常","让","一套","msgs","啦","各个","快速","https","保障","确实","图","退出","单独","真正","保证","数据通","domain","它们","py","进一步","地址","表示","处理","主讲人","21","开源","华为","定时器","reliable","环境","分布式","行为","service","哪","相当于","忽略","四种","于","解析","当","跟","模型","不变","原则","给","全局","就","了","客户","main","参数","试一试","类似","入口","guides","此时","生态","有所不同","二","env","$","实时","什么","echo","\\","专利","about","节点","来","就是","过程","循环","火锅","许多","通信模型","构图","get","强调","会","太","定位","学习","图像","内容","_","每条","无论如何","后边","流畅","这样","质量","bilibili","—","异常","旋转","qoshistorypolicy","用户","name","为了","案例","默认","企业","启动","自动","变化","但是","机器人","提供","类","尝试","使命","建设","丢失","其他","任意","传送","尽力","完整","供者","历史"," ","程度","存在","终于","兼容","交换","info","互相","大量","订阅","收到","模式","提示","分别","截止","都","兼容性问题","subscription","软件","增多","差别","做","std","无用","相关","传输","通过","可以","from","logger","前边","所有","无人","父类","更","创建","靠","指令","链接","我们","将","核心","运动","python3","大大提高","只是","之间","很","一次","决策","data","命令","上边","接下来","第一种","none","entry","同一","参考","chatter","msg","布式","ros2","开发","国防","verbose","现在","大大","客户端","可见","？","全称","to","遥控器","命令行","直接",",","分布","先","with","介绍","可是","宗旨","啥意思","列出","处理速度","高通","上","下来","课程","callback","优化","该用","三种","docs","但","提高","通道","publishing","丰富","认识","示例",")","publish","特性","最为","正常","例子","当然","主要","资源","要","系统","延时","时","用","太多","部分","=","定时","setup","可","last","授权","高速","uml","要求","第三","尽可","比如","就行了","满足","貌似","《","org","ros","拿","发布者","派","import","专门","样","肯定","更好","“","接下","pub","下边","提到","填充","com","位置","设计","放在","视频","关心","中间","只有","选项","海军","红色","黑入","一定","包含","时候","问题","初始化","个人","两个","明显","第四","一种","一起","驱动","行业","console","带领","回调","不多","字符","必须","同一个","兼容性","：","#","best","-","另外","super","并行","能响","后","至关","一下","人机","版本","html","应该","增长","每","一条","便于","场景","高效","半天","时间","没有","理解","node","编写","遥控","发送","导致","合约","中","重大","非常","进行","哪些","”","是","接收者","中间件","video","到底","指定","新","情况","加密","函数","差不多","动作","终端","等待","连接数","像是","说了半天","务器","组成","电脑","数据传输","架构图","应用程序","加入","统一","神经网","dds","不感兴趣","单位","implementations","机理","秒","点对点","2004","接收","reliability","数据通信","欢迎","组成部分","二种","shutdown","真实","/","把","保证数据","进入","网络","瓶颈","提供者","广播","*","基本","depth","程序","或","多","s","受到","第二种",":","profile","这种","像","在","对应","一新","qosprofile","init","听说","选择",".","垂直","qosreliabilitypolicy","者","讲到","灵活","黑客","主","麻烦","learning","vendors","就行","缓存","来到","连接","强制","分组","看到","和","我","应用","综合","sub","名","i","为","working","middleware","维护","需要","自己","timer","%","销毁","关闭","只","管理","配置","一步","databus","coding","运行","建立","usr","类型","整个","古月","标准","分发","出现","@","spin","交通","影响","非常复杂","multiple","或者","publisher","deadline","你","冰山一角","请求","中心","兴趣","run","那个","日志","想","文件","符合","不过","向","）","按照","不是","性","适应","相当","之上","掉","5g","如下","服务器","具体地址","初始","行","能够","来看","qos","所有人","绑定","说明","，","建模","美国","机器","'","四大","信息","神经","大家","复杂","处于","查看","大","具体","很多","修改","得","无论","一旦","性能","编程","历史数据","int32","带","design","接口","在于","self","heard","办法","点","看","神经网络","意思","由于","当于","避免","def","医疗","完成","信赖","为例","bin","优势","（","厂商","也","尽可能","对","门","呢","效果","的","话题","scripts","不管","而且","多个","消息","utf","subscribernode","different","所以","晚","》","价值","集中","以","既然","复用","publishernode","感兴趣","create","ros1","作者","帧","他们","distribution","string","发生变化","执行","并且","编译","第一","内","建模语言","一样","结构","到","如何","服务质量","尽量","感兴","航空","en","无法","工业","有些","周期","使用","找到","、","rclpy","好吃","effort","领域","区别","destroy","借助","humble","讲","主讲","能力","通信","处","那","规模","成为","topic","articles","需求","history","边","它","好","完整性","作为","可信赖","!","数以千计","容性","\"","发生","之","{","速度","有点","入门","keep","1989","过去","焕然","等","更加","大小","helloworld","方式","不","发送给","商业","同样","不好","先进","第四种","任","omg","有","这些","points","最早","居","功能","输出","下","每次","感知","转移","对象","打开","双方","包","成","其实","选用","第一个","的话","[","舰船","至关重要","设置","语言","代码","数据","看下","入个","冰山","args","各种","模块","底层","效率","id","顺利","listener","运转","而言","生变","corba","集中处理","还有","角色","本身","知道","--"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds","text":"Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。","text_tokens":["通信","神经","—","大家","动作","都","》","在","具体","它","好","hello","他们","讲到","前边","dds","神经网","《","ros","服务","。","变化","ros2","靠","来到","机器人","我们","课程","我","欢迎","入门","实现","来","相当","神经网络","过程","当于","主讲人","21","机器","底层"," ","学习","完成","、","网络","，","中","终于","重大","最为","相当于","是","古月","讲","主讲","系统","的","话题"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_1","text":"DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。","text_tokens":["通路","第三种","异常","这里","常用","必须","旋转","具体","很多","broker","一旦","之前","性能","并行","能响","变化","如果","但是","在于","应该","增长","一条","提供","框架","实现","有人","没有","一个","所","其他","不用","传送"," ","程度","导致","由","与","第二","非常","也","进行","中","吃","优势","是","的","订阅","服务端","收到","架构","而且","消息","连接数","都","关系","这","几种","像是","可能","务器","集中","以","软件","增多","感兴趣","这个","ros1","可以","发生变化","dds","所有","不感兴趣","并且","服务","第一","。","更","发布","点对点","到","我们","核心","二种","感兴","很","无法","每个","有些","第一种","使用","找到","解决","并","瓶颈","好吃","广播","针对","多","受到","第二种","通信","客户端","这种","可见","处","规模","成为","在","它","作为","麻烦","发生","列出","处理速度","之","连接","上","单独","真正","和","速度","有点","优化","三种","为","进一步","地址","但","处理","通道","更加","需要","自己","只","一步","databus","建立","忽略","四种","正常","先进","整个","第四种","当","系统","时","太多","影响","模型","每次","双方","就","请求","了","客户","其实","中心","兴趣","第三","想","类似","不过","拿","节点","就是","数据","第四","火锅","许多","服务器","通信模型","会","具体地址","行","各种","能够","效率","关心","所有人","运转","一定","，","生变","包含","问题","集中处理","每条","角色","知道","明显","一种","这样"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_1","text":"DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。","text_tokens":["国防","交通","通信","都","感知","在","很多","通常","频繁","需求","高速","之前","广泛应用","好","比如","可以","这些","满足","dds","自动","。","驾驶","不是","和","应用","数据","它们","很","一个","航空","等","决策","会","需要","广泛","方式","医疗"," ","定位","模块","的","存在","并","，","预测","非常","领域","能源","交换","地","借助","ros2","已经","新"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_2","text":"好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是 Data Distribution Service ，也就是 数据分发服务 ，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。","text_tokens":["质量","行业","复杂","组织","这里","大家","兼容性","过","提","课","一下","提供","高效","半天","意思","使命","一个","完整"," ","策略","由","中","也","进行","兼容","是","中间件","地","到底","大量","呢","已经","的","订阅","升级","兼容性问题","价值","说了半天","可能","以","软件","年","做","成立","可以","distribution","统一","dds","服务","。","建模语言","发布","2004","我们","技术","服务质量","sysml","真实","/","data","解决","网络","、","布式","开发","现在","通信","技术标准","？","全称","成为","需求","一套","听说","垂直","啦","好","分布","它","介绍","灵活","保障","数以千计","啥意思","容性","强制","和","应用","1989","为","等","维护","丰富","环境","分布式","管理","service","当然","于","标准","omg","系统","分发","最早","可","对象","中心","uml","比如","满足","舰船","专门","实时","语言","就是","来","数据","强调","各种","设计","中间","海军","，","建模","corba","问题","还有","美国"],"title":"什么是DDS","title_tokens":["是","什么","dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#ddsros2","text":"DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。","text_tokens":["驱动","四大","大家","组织","上层","这里","具体","兼容性","很多","用户","得","为了","无论","性能","编程","纠结","企业","至关","如果","接口","版本","每","机器人","场景","实现","时间","建设","由于","一个","还是","这么","其他"," ","4g","厂商","中","也","兼容","是","中间件","对","呢","的","蓝色","不管","架构","多个","函数","所以","都","重要","可能","组成","既然","架构图","软件","复用","差别","这个","加入","没","刚才","某一","可以","他们","统一","dds","所有","。","更","一样","如何","我们","技术","组成部分","尽量","大大提高","接口标准","根据","把","工业","上边","进入","使用","、","基本","或","多","布式","ros2","能力","开发","通信","大大","？","那","像","在","对应","让","选择","边","分布","宗旨","容性","就行","高通","上","和","应用","保证","综合","该用","但","middleware","提高","开源","需要","自己","华为","分布式","不","哪","商业","建立","标准","要","任","有","系统","用","部分","影响","功能","不变","原则","可","转移","授权","给","你","就","了","选用","那个","比如","想","符合","ros","此时","生态","按照","至关重要","性","肯定","专利","代码","就是","之上","来","5g","过程","下边","构图","提到","会","位置","模块","能够","设计","放在","中间","红色","而言","，","问题","无论如何","个人","机器","一种","这样"],"title":"DDS在ROS2中的应用","title_tokens":["应用","中","dds","在","ros2","的"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#qos","text":"DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是 Domain ，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为 数据提供者和接收者之间的合约 。 具体会有哪些策略？比如： DEADLINE 策略，表示通信数据必须要在每次截止时间内完成一次通信； HISTORY 策略，表示针对历史数据的一个缓存大小； RELIABILITY 策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式； DURABILITY 策略，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。","text_tokens":["质量","体","处于","大家","必须","同一个","航拍","具体","定义","：","流畅","之前","best","另外","默认","历史数据","带","人机","如果","不同","但是","无人机","办法","树莓","每","；","机器人","提供","场景","便于","实现","时间","理解","丢失","一个","所","避免","没有","这么","尽力","完整","供者","历史","遥控"," ","发送","焕然一新","合约","完成","导致","策略","信赖","中","哪些","进行","尽可能","也","是","接收者","地","对","互相","呢","指定","的","众多","新","模式","门","情况","送给","加密","截止","回忆","都","关系","晚","一些","重要","电脑","可能","小组","这个","应用程序","无用","合适","加入","传输","帧","通过","可以","dds","所有","无人","服务","内","。","空间","结构","才能","接收","reliability","数据通信","指令","我们","将","运动","如何","尽量","之间","一次","根据","命令","保证数据","使用","同一","网络","控制","提供者","effort","占用","基本","针对","durability","程序","举","多","ros2","流畅性","可信","那该","通信","这种","？","在","让","需求","一新","history","遥控器","选择","直接","好","啦","先","完整性","各个","快速","黑客","可信赖","缓存","分组","图","数据通","和","应用","domain","保证","为","表示","过去","焕然","需要","大小","reliable","行为","不","配置","发送给","特性","不好","例子","资源","要","系统","有","这些","延时","出现","用","模型","功能","下","每次","deadline","给","全局","成","了","客户","要求","那个","尽可","比如","参数","满足","的话","类似","ros","向","此时","派","样","更好","适应","就是","数据","节点","掉","入个","过程","通信模型","会","id","来看","视频","只有","顺利","qos","黑入","绑定","图像","一定","，","时候","_","机器","一起","一种","这样"],"title":"质量服务策略QoS","title_tokens":["策略","质量","服务","qos"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_3","text":"我们先来试一试在命令行中配置DDS的参数。 启动第一个终端，我们使用best_effort创建一个发布者节点，循环发布任意数据，在另外一个终端中，如果我们使用reliable模型订阅同一话题，无法实现数据通信，如果修改为同样的best_effort，才能实现数据传输。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort 如何去查看ROS2系统中每一个发布者或者订阅者的QoS策略呢，在topic命令后边跟一个\"--verbose\"参数就行了。 $ ros2 topic info /chatter --verbose","text_tokens":["42","查看","修改","best","-","另外","int32","启动","如果","每","实现","一个","任意"," ","策略","中","info","呢","的","话题","订阅","终端","数据传输","std","传输","dds","第一","。","创建","发布","才能","数据通信","reliability","如何","我们","/","data","命令","无法","使用","同一","chatter","effort","去","msg","ros2","据传",":","verbose","通信","topic","在","msgs","命令行","先","者","\"","数据通","为","reliable","配置","同样","系统","跟","模型","或者","试一试","参数","就行了","第一个","发布者","$","echo","节点","来","数据","pub","循环","qos","，","_","--","后边"],"title":"案例一：在命令行中配置DDS","title_tokens":["一","案例","配置","中","dds","在","命令","：","命令行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_4","text":"接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。","text_tokens":["通信","在","以","之前","hello","dds","world","。","下来","我们","代码","接下","尝试","接下来"," ","配置","为例","，","中","话题"],"title":"案例二：DDS编程示例","title_tokens":["案例","编程","dds","：","二","示例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_2","text":"启动两个终端，分别运行发布者和订阅者节点： $ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub 可以看到两个终端中的通信效果如下，和之前貌似并没有太大区别。 看效果确实差不多，不过底层通信机理上可是有所不同的。","text_tokens":["订阅","分别","通信","有所","不多","终端","差不多","大","效果","：","之前","run","者","可以","可是","貌似","启动","发布者","learning","不过","。","确实","不同","发布","机理","有所不同","$","两个","上","看到","和","sub","节点","看","pub","如下","没有","太","helloworld","底层"," ","qos","并","，","运行","中","_","区别","ros2","的"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_3","text":"我们看下在代码中，如果加入QoS的配置。 learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , },","text_tokens":["'","信息","console","__","回调","字符","qoshistorypolicy","name","#","：","字符串","-","best","(","super","后","如果","接口","self","}","点","类","guyuehome","node","一个","编写","def"," ","0.5","（","完成","bin","中","进行","”","8","info","的","话题","已经","scripts","库","提示","函数","utf","消息","等待","class","1","publishernode","std","create","加入","www","作者","hello","from","string","单位","logger","执行","父类","world","编译","。","创建","发布","秒","reliability","我们","python3","shutdown","/","data","python","周期","none","entry","、","rclpy","并","*","effort","chatter","depth","程序","msg","destroy","ros2","s",":","profile","在","让","qosprofile","init","msgs","history",".",",","qosreliabilitypolicy","主","!","learning","\"","{","退出","callback","名","py","keep","为","publishing","需要","timer","定时器","helloworld","reliable","示例","%","销毁",")","关闭","配置","coding","usr","publish","类型","古月","系统","@","spin","points","=","居","定时","输出","原则","功能","setup","last","publisher","对象","打开","包","main","日志","文件","入口","发布者","[","）","env","import","设置","“","代码","节点","数据","看下","pub","如下","get","循环","args","初始","填充","com","选项","qos","说明","，","_","知道","初始化"],"title":"发布者代码解析","title_tokens":["代码","发布者","发布","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_4","text":"订阅者中的QoS配置和发布者类似。 learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], }, DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们主要带领大家认识DDS，更多使用方法和相关内容，大家也可以参考下边的链接进行学习。","text_tokens":["'","信息","console","__","回调","带领","复杂","大家","qoshistorypolicy","name","定义","#","：","-","best","(","super","后","接口","self","heard","}","一角","点","类","guyuehome","node","一个","编写","def"," ","（","完成","bin","中","进行","非常","”","也","是","8","info","对","的","话题","scripts","订阅","收到","库","提示","subscribernode","utf","消息","函数","方法","等待","class","1","subscription","std","相关","create","加入","www","作者","hello","可以","from","string","logger","执行","dds","父类","world","编译","。","创建","]","更","发布","reliability","链接","我们","python3","只是","shutdown","/","data","python","none","使用","entry","、","rclpy","并","*","effort","chatter","参考","depth","程序","msg","destroy","多","ros2","s",":","profile","让","qosprofile","init","msgs","history",".",",","qosreliabilitypolicy","者","主","!","learning","\"","{","退出","callback","和","名","sub","i","py","keep","处理","认识","需要","helloworld","reliable","示例","%","销毁",")","关闭","配置","coding","usr","类型","古月","主要","标准","系统","@","spin","points","=","非常复杂","居","功能","输出","原则","setup","last","对象","打开","包","冰山一角","main","日志","文件","类似","入口","发布者","[","）","env","import","设置","“","\\","代码","节点","数据","pub","冰山","如下","get","循环","下边","args","初始","com","listener","选项","qos","学习","内容","说明","，","_","本身","知道","初始化"],"title":"订阅者代码解析","title_tokens":["订阅","者","解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_5","text":"https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["bilibili","different","multiple","articles","to",".","-","with","www","dds","org","design","https","ros","vendors","guides","implementations","html","bv12z4y167w2","about","working","concepts","docs","/","en","middleware","how","com"," ","_","on","video","rmw","humble","ros2",":"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/","text":"工作空间：开发过程的大本营 大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是 工程 。 工作空间是什么 类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做 工作空间 。 所以工作空间是一个存放项目开发相关文件的文件夹，也是 开发过程中存放所有资料的大本营 。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。 创建工作空间 了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 自动安装依赖 我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init $ rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y 编译工作空间 依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。 设置环境变量 编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["eclipse","得到","信息","大家","编写程序","这里","过","定义","脚本","：","自动生产","为了","#","之前","-","另外","环境变","~","后","自动","如果","bashrc","未来","..","path","html","应该","教程","；","机器人","设置","guyuehome","生产","一个","一部分","--",">","b","编写","rosdep","子"," ","以上","存在","完成","绝大","目录","mkdir","中","进行","也","”","空间结构","是","pip3","项目","b2","任何","安装","的","完全","新","log","情况","仅","多个","手动","终端","所以","都","关系","一些","这","里边","像是","1","如图所示","里","这个","相关","w","概念","了解","可以","from","报错","update","执行","所有","并且","编译","。","创建","以及","错误","一样","警告","空间","产生","结构","到","工具","我们","从","链接","可执行文件","python3","当前","子目","很少","中会","/","件夹","命令","接触","生效","均","en","接下来","install","使用","找到","用于","、","并","资料","参考","针对","git","colcon","程序","下载","source","工程","根目录","workspace","humble","ros2","开发","集成","名称",":","允许","qt","clone","开始","在","sh","让","行文","init",".","某些","保存","sudo","3","啦","tutorials","变量","local","https","想要","gitee","ws","\"","环境变量","下来","看到","和","i","后续","2","缺少","docs","大部分","等","典型","操作","21","需要","人为","自己","不会","环境","大本营","apt","来讲","管理","配置","大本","studio","叫做","运行","某","唯一","pip","要","当","有","这些","系统","时","build","放置","a","存放","creator","部分","用","否则","出现","rosdistro","功能","setup","rosdepc","或者","四个","包","还","一部","就","绝大部分","了","visual","比如","参数","日志","并列","文件","结果","org","类似","数量","ros","多少","点击","工具栏","此时","cd","src","$","大部","不是","什么","工作","“","y","代码","总体","就是","接下","p","echo","如下","过程","依赖","强调","会","dev","至此","com","各种","能够","选项","中间","学习","社区","内容","，","子目录","_","一点","creating","成功","两个","机器","所示","文件夹"],"title":"工作空间","title_tokens":["工作","空间"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_1","text":"大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是 工程 。","text_tokens":["eclipse","放置","creator","qt","大家","编写程序","都","在","过","里边","就","某些","之前","这个","visual","比如","这些","文件","所有","想要","点击","工具栏","创建","此时","以及","。","应该","产生","工具","我们","和","“","后续","工作","一个","等","件夹","接触","会","编写","环境"," ","选项","学习","的","studio","、","内容","叫做","，","中","”","程序","是","工程","文件夹","当","有","开发","集成","新"],"title":"工作空间：开发过程的大本营","title_tokens":["大本营","工作","的","大本","过程","：","开发","空间"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_2","text":"类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做 工作空间 。 所以工作空间是一个存放项目开发相关文件的文件夹，也是 开发过程中存放所有资料的大本营 。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。","text_tokens":["得到","信息","这里","定义","脚本","：","另外","后","未来","；","机器人","一个","一部分","b","编写","子"," ","以上","存在","绝大","目录","中","进行","也","空间结构","是","项目","b2","安装","的","完全","新","log","情况","多个","所以","都","关系","一些","这","里边","像是","1","如图所示","里","这个","相关","w","可以","执行","所有","编译","。","创建","错误","一样","警告","空间","结构","产生","到","我们","可执行文件","子目","很少","件夹","install","用于","、","并","资料","针对","工程","根目录","开发","名称","集成","允许","开始","在","行文","某些","保存","3","ws","和","2","大部分","等","典型","操作","需要","人为","自己","环境","大本营","来讲","管理","大本","叫做","运行","某","唯一","要","a","有","系统","build","时","放置","存放","用","部分","功能","或者","四个","一部","就","绝大部分","了","参数","日志","比如","并列","文件","结果","类似","数量","ros","src","大部","不是","工作","代码","总体","就是","过程","强调","会","dev","各种","中间","，","子目录","_","一点","成功","两个","机器","所示","文件夹"],"title":"工作空间是什么","title_tokens":["是","什么","工作","空间"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_3","text":"了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git","text_tokens":["clone","：",".","了","-","概念","了解","可以","tutorials","结果","~","并且","https","创建","gitee","cd","ws","src","空间","教程","$","下来","工作","我们","和","代码","接下","p","guyuehome","如下","一个","/","命令","21","dev","com","接下来","使用"," ","mkdir","，","_","git","下载","ros2","的",":"],"title":"创建工作空间","title_tokens":["创建","工作","空间"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_4","text":"我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init $ rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y","text_tokens":["手动","rosdistro","都","rosdepc","一些","init","：","sudo","-","可以","from","update","多少","自动","cd","..","path","src","$","y","从","工具","我们","i","代码","python3","一个","--","依赖","会","各种","rosdep","install","使用"," ","apt","社区","，","中","也","下载","pip3","pip","humble","安装","有","的"],"title":"自动安装依赖","title_tokens":["安装","依赖","自动"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_5","text":"依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。","text_tokens":["log","出现","否则","或者","在","自动生产","就","：","了","sudo","-","啦","可以","报错","文件","~","后","ros","编译","自动","。","如果","错误","cd","ws","空间","应该","$","工作","看到","代码","缺少","python3","build","如下","过程","中会","/","生产","依赖","命令","件夹","不会","dev","install","使用"," ","apt","完成","、","，","中","_","colcon","任何","成功","安装","有","的","文件夹"],"title":"编译工作空间","title_tokens":["工作","编译","空间"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_6","text":"编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。","text_tokens":["终端","功能","setup","在","sh","让","还","包","行文","为了","：","#",".","就","了","环境变","变量","文件","执行","~","local","所有","后","编译","。","创建","bashrc","\"","ws","环境变量","空间","$","设置","echo","我们","和","工作","可执行文件","当前","生效","/",">","需要","dev","均","至此","环境","能够","install"," ","找到","完成","配置","、","，","_","source","成功","仅","系统","的"],"title":"设置环境变量","title_tokens":["环境变","设置","变量","环境","环境变量"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_7","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":[" ","-","tutorials","docs","org","/","https","ros","en","creating","workspace","html","humble","a",":","."],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/","text":"功能包：开发过程的大本营 在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做 功能包 。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。 创建功能包 如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python 编译功能包 在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash 功能包的结构 功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。 C++功能包 首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。 Python功能包 C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["信息","<","大家","这里","必须","编译成","新创","是否","很多","name","得","：","#","-","环境变","type","编程","某种","~","包中","立刻","不同","如果","但是","版本","html","c","教程","；","机器人","该","看","型","一个","package","还是","而是",">","编写","降低"," ","完成","存在","黄豆","中","也","耦合","”","ament","是","出来","拿出","拆分","呢","的","率","别人","新创建","分别","方法","终端","cmakerlists","所以","都","关系","一些","这","重要","里边","可能","继续","复用","软件","里","这个","越","create","相关","刚才","机制","首先","可以","他们","first","假设","执行","所有","除此","绿豆","么","编译","。","创建","一颗","一样","视觉","才能","空间","结构","只想","到","如何","我们","指令","cmakelists","将","可执行文件","链接","尽量","找","之间","txt","/","件夹","命令","en","把","每个","python","install","使用","混合","袋子","entry","并","控制","、","划分","译成","参考","判断","colcon","程序","下载","举个","source","多","workspace","humble","ros2","五颜六色","开发","名称","规则","移动",":","版权","颜色","发现","xml","？","那","其中","在","手上","行文","原理",".","某些","pkg","好","介绍","c++","变量","声明","tutorials","头疼","之后","local","https","新建","learning","ws","环境变量","是否是","看到","和","后续","起来","py","docs","很难","表示","但","等","提高","需要","分析","环境","大本营","不","只","配置","大本","叫做","运行","是不是","类型","正常","bash","例子","普通","当然","主要","解析","除此之外","要","当","有","这些","导航","时","build","points","a","三个","用","之一","源码","跟","cmake","功能","包是","setup","下","或者","感知","分享","给","红豆","包","你","之外","就","了","比如","包该","文件","想","很快","包并","org","数量","入口","ros","拿","描述","名字","cd","豆子","src","$","不是","设置","语言","工作","“","代码","就是","来","语法","讲解","如下","过程","依赖","必然","会","dev","各种","放在","社区","自主","内容","说明","放到","，","包含","your","时候","_","还有","creating","--","两个","机器","一起","文件夹"],"title":"功能包","title_tokens":["包","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_1","text":"在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做 功能包 。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。","text_tokens":["大家","很多","得","某种","包中","立刻","不同","如果","但是","教程","；","机器人","一个","而是","降低"," ","黄豆","中","也","耦合","是","出来","拿出","拆分","的","率","别人","方法","所以","都","关系","重要","可能","复用","软件","里","这个","越","机制","可以","他们","假设","绿豆","么","。","一颗","视觉","只想","到","如何","我们","尽量","找","之间","件夹","把","每个","使用","混合","袋子","并","控制","、","划分","下载","举个","多","ros2","五颜六色","名称","移动","颜色","发现","其中","在","手上","原理","某些","头疼","看到","起来","很难","等","提高","需要","不","只","叫做","是不是","例子","普通","当然","当","有","导航","这些","时","三个","用","之一","源码","功能","感知","分享","给","红豆","包","你","就","了","比如","包该","文件","想","很快","数量","ros","拿","豆子","不是","代码","就是","会","放在","社区","自主","说明","放到","，","时候","机器","一起","文件夹"],"title":"功能包：开发过程的大本营","title_tokens":["大本营","的","大本","功能","过程","包","：","开发"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_2","text":"如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python","text_tokens":["cmake","分别","<","跟","终端","功能","？","包是","那","或者","新创","这里","在","name","包","：","就","#","这个","-","pkg","create","type","相关","可以","c++","比如","~","新建","learning","。","创建","如果","名字","版本","cd","ws","src","c","$","指令","如何","我们","；","和","表示","一个","package","命令","还是","/",">","dev","python","使用"," ","的","，","中","_","ament","--","ros2","呢","build","新创建"],"title":"创建功能包","title_tokens":["包","创建","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_3","text":"在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash","text_tokens":["功能","setup","在","包","继续","：","#",".","环境变","好","可以","变量","之后","~","所有","包中","local","编译","创建","cd","ws","src","环境变量","才能","$","空间","工作","我们","和","代码","build","/","需要","dev","编写","环境","install"," ","完成","配置","，","运行","_","正常","colcon","source","bash","的"],"title":"编译功能包","title_tokens":["包","功能","编译"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_4","text":"功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。","text_tokens":["功能","那","？","下","新创","是否","包","刚才","包并","文件","。","创建","结构","不是","如何","是否是","我们","来","一个","件夹","分析","新创建","，","判断","普通","两个","呢","的","文件夹"],"title":"功能包的结构","title_tokens":["包","功能","的","结构"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#c","text":"首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。","text_tokens":["版权","cmake","cmakerlists","xml","功能","下","所以","必须","其中","在","包","：",".","首先","c++","声明","文件","编译","描述","。","要","才能","设置","cmakelists","如何","和","代码","看","该","语法","如下","txt","package","依赖","必然","需要","各种"," ","使用","存在","内容","，","包含","运行","类型","中","是","主要","两个","规则","的"],"title":"C++功能包","title_tokens":["包","c++","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#python","text":"C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。","text_tokens":["points","版权","信息","源码","xml","功能","setup","所以","大家","编译成","一些","这","在","里边","给","包","行文","之外","：",".","编程","c++","声明","介绍","文件","执行","除此","入口","编译","描述","不同","。","但是","版本","一样","语言","如何","“","将","和","可执行文件","后续","讲解","py","型","我们","但","package","依赖","需要","会","python","各种","不"," ","使用","entry","配置","内容","译成","，","包含","也","中","_","”","还有","是","程序","解析","主要","除此之外","两个","有","的"],"title":"Python功能包","title_tokens":["包","python","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_5","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":[".","-","tutorials","first","a","org","https","ros","html","docs","/","en","package"," ","your","creating","workspace","humble","ros2",":"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/","text":"节点 机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。 通信模型 完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。 案例一：Hello World节点（面向过程） ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。 运行效果 大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ], 创建节点流程 代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。 案例二：Hello World节点（面向对象） 所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。 运行效果 接下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ], 创建节点流程 所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。 案例三：物体识别节点 没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。 运行效果 在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 Attention 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。 代码解析 在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ], 案例四：机器视觉识别节点 用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。 运行效果 启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 Attention 如果是在虚拟机中操作，需要进行以下设置： 1. 把虚拟机设置为兼容USB3.1； 2. 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。 代码解析 相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ], 节点命令行操作 节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息 思考题 现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["做到","路径","__","厂房","这里","常用","一张","过","字符串","ok","之前","远程","一","(","可视化","打印","纠结","shape","不同","如果","心里","；","框架","实现","guyuehome","一个","还是","128","不用","0.5","细胞","8","hierarchy","众多","库","搭载","方法","int","一些","这","重要","class","二值化","可能","知其然","1","框会","岂","里","这个","溜溜","w","www","刚才","机制","hello","只不过","没","webcam","想到","world","。","可视","]","转换","发布","面向对象","time","知其所以然","中将","根据","每个","python","共同","5","并","控制","去","这款","任务","虽然","waitkey","boundingrect","着急","h","cnt","整体","列表","让","某些","啦","轮子","findcontours","tutorials","没错","https","保障","ws","退出","移植","py","表示","处理","21","人为","总结","环境","分布式","后勤部","状态","chain","一节","color","监控","解析","位于","除此之外","左上角","a","当","以下","list","usb3.1","模型","移植性","给","还","就","了","高","main","参数","入口","类似","熟悉","env","二","$","实时","contours","节点","就是","来","过程","循环","get","通信模型","bgr","drawcontours","会","太","学习","图像","_","一点","地方","这样","思考题","—","算是","编写程序","综合体","像头","是否","name","噪声","while","案例","框架图","启动","思考","变化","未来","但是","负责","理过","img","destroyallwindows","机器人","乃至","提供","该","image","类","helloworldnode","摄像",">","50","完整"," ","编码方式","兼容","info","互相","调试","安装","收到","分别","都","可读","图像识别","太小","做","通过","可以","关于","from","logger","父类","detect","自然","更","创建","前","命名","从","指令","我们","运动","java","将","链接","python3","只是","之间","很","命令","所在","呀","接下来","install","none","识别","entry","参考","窗口","工人","孤立","布式","ros2","upper","开发","像素","现在","先拉","颜色","？","读取","看上去","开始","apple","true","最大","命令行","sudo",",","分布","先","点画","介绍","c++","三","模拟","前后左右","attention","看上","前后","用到","上","一线","下来","课程","模块化","np","合理","docs","但","操作","认识","示例",")","是不是","最为","正常","当然","唯一","方便","要","系统","时","用","虚拟机","=","circle","setup","载体","可","过来","云端","宽","approx","比如","查询","org","ros","一帧","import","轮廓","更好","“","接下","com","设计","放在","选项","中间","红色","马","时候","问题","还会","下限","初始化","两个","一起","一种","驱动","mask","得到","home","console","字符","部门","推动","编程语言","就让","外界","勾勒","：","#","-","休眠","另外","super","某种","后","一下","上限","稍微","pyhton","应该","更为","更多要","每","if","联系","角度","html","xy","cap","时间","操作系统","理解","node","好像","imread","编写","再","发送","吧","中","进行","”","是","出来","cv2","到底","同理","腿","x","左右","函数","图像处理","终端","步骤","等待","电脑","组成","inrange","左上","概念","加入","不能","会弹","bgr2hsv","read","可执行文件","摇杆","shutdown","ret","/","把","算机","却","*","程序","imshow","多",":","发现","这种","计算机","像","摄像头","其中","red","在","阈值","相机","init","难","cvtcolor","90","范围",".","相比","数值","0","各不相同","numpy","jpg","主","learning","而已","opencv","连接","看到","和","综合","2","为","改成","关注","为止","需要","continue","分析","销毁","关闭","apt","配置","动态","考题","叫做","coding","去除","运行","usr","取","nodes","某","古月","@","例程","出现","所以然","spin","或者","至","可读性","相同","你","看看","疑惑","经常","被","改变","中心","合体","硬件","run","180","设备","日志","文件","多种","编码","物体","不过","名字","）","眼睛","retr","不是","来源","总体","understanding","不要","如下","苹果","array","及","初始","ruby","上去","来看","说明","，","比喻","中心点","保持","机器","'","信息","注意","<","复杂","大家","查看","具体","简单","后勤","一项","修改","得","编程","网上","接口","self","hcx","点","看","上角","videocapture","b","def","这份","完成","（","bin","为例","也","处理过程","此处","效果","呢","的","scripts","utf","具备","所以","总体而言","object","既然","以","四","推荐","获取","作者","他们","独立","除此","执行","并且","编译","一样","计算","视觉","即可","面向","结构","到","如何","流程","依然","en","周期","使用","找到","、","rclpy","图片","destroy","humble","名称","进程","移动","可移植","通信","那","显示","成为","行文","每一项","请","检测","它","好","保持联系","调整","后勤部门","回到","!","in","想要","+","\"","可移植性","{","发生","工厂","速度","sleep","重新","更多","起来","hsv","150","as","等","更加","helloworld","方式","不","这座","虚拟","实际","骡子","有","这些","points","255","居","功能","输出","下","四个","对象","打开","包","绿色","之外","lower","桌子","绿点","结果","然后","的话","物理","[","一台","src","设置","y","语言","工作","出","代码","坐标","面积","职责","身体","args","对于","重点","dev","各种","模块","而言","for","生成","还有","知道","成功"],"title":"节点","title_tokens":["节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_1","text":"机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。","text_tokens":["功能","那","像","成为","综合体","一些","整体","在","给","一项","就","每一项","了","合体","机制","通过","这些","ros","。","名字","连接","到","机器人","工作","我们","“","综合","就是","节点","一个","机器","各种"," ","细胞","，","中","取","”","是","众多","一起","的"],"title":"节点","title_tokens":["节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_2","text":"完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。","text_tokens":["得到","信息","—","厂房","算是","部门","推动","复杂","像头","具体","编程语言","外界","后勤","：","远程","另外","编程","不同","更为","每","；","机器人","角度","乃至","提供","该","实现","操作系统","一个","b","完整"," ","完成","细胞","中","也","”","是","到底","互相","的","腿","搭载","左右","分别","都","这","可能","组成","既然","里","这个","做","获取","通过","可以","他们","独立","除此","执行","想到","编译","自然","。","更","计算","命名","到","从","java","运动","我们","可执行文件","如何","摇杆","根据","每个","python","接下来","共同","算机","找到","并","控制","、","去","这款","任务","虽然","却","程序","工人","多","布式","名称","进程","移动","计算机","那","摄像头","整体","在","让","行文","某些","它","轮子","分布","c++","后勤部门","各不相同","想要","保障","前后左右","前后","连接","上","一线","工厂","看到","速度","和","下来","但","等","操作","认识","人为","需要","环境","分布式","后勤部","不","这座","配置","状态","叫做","运行","某","监控","位于","除此之外","唯一","a","当","有","这些","系统","时","功能","载体","或者","云端","相同","你","还","之外","看看","就","了","硬件","桌子","比如","参数","查询","文件","结果","物理","一台","眼睛","不是","语言","工作","“","接下","就是","节点","来","职责","身体","ruby","设计","放在","来看","，","生成","时候","比喻","还有","地方","还会","摄像","机器","一起","这样"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world","text":"ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。","text_tokens":["例程","字符","终端","功能","复杂","编写程序","开始","简单","字符串","了","先","hello","打印","world","。","从","到","我们","“","节点","实现","来","就是","循环","一个","需要","编写","不"," ","并","，","中","最为","”","程序","是","当然","ros2","的"],"title":"案例一：Hello World节点（面向过程）","title_tokens":["面向"," ","一","案例","（","hello","节点","过程","world","）","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_3","text":"大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["做到","所以然","先拉","字符","终端","大家","下","所以","在","效果","知其然","字符串","这个","溜溜","run","先","好","通过","可以","hello","打印","执行","然后","后","world","编译","learning","。","$","如何","我们","课程","代码","看","节点","来","实现","看到","不要","“","过程","知其所以然","node","成功","命令","循环","helloworld","再","分析"," ","的","，","马","运行","也","_","中","”","是","出来","骡子","ros2","着急"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_4","text":"这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ],","text_tokens":["'","信息","console","是否","#","：","ok","-","while","休眠","(","后","接口","点","实现","类","guyuehome","时间","node","编写","def"," ","0.5","完成","bin","进行","”","是","8","info","呢","的","scripts","库","函数","utf","这个","加入","www","作者","hello","from","logger","world","编译","。","创建","]","发布","面向","如何","我们","time","python3","shutdown","/","python","使用","none","entry","并","rclpy","控制","*","程序","destroy","ros2",":","？","让","init",".",",","主","!","learning","\"","{","sleep","py","需要","helloworld","示例","方式","销毁",")","关闭","配置","coding","usr","运行","正常","古月","系统","@","points","=","居","功能","输出","下","setup","对象","打开","包","main","日志","文件","入口","[","env","import","设置","“","代码","节点","如下","过程","get","循环","args","初始","com","来看","选项","说明","，","_","知道","初始化"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_5","text":"代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。","text_tokens":["做到","出现","函数","方法","发现","大家","功能","这里","这种","或者","复杂","具体","重要","过","简单","难","：","就","经常","做","先","编程","c++","纠结","可以","编码","的话","想要","更","。","一下","未来","接口","创建","如果","pyhton","应该","面向","用到","但是","稍微","机器人","我们","模块化","代码","系统","节点","实现","流程","理解","过程","一个","很","对于","会","不用","初始","总结","模块","销毁","方式","使用"," ","关闭","学习","并","，","中","虽然","一点","是","初始化","机器","有","的","这样"],"title":"创建节点流程","title_tokens":["创建","节点","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world_1","text":"所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。","text_tokens":["可移植","具备","大家","复杂","所以","移植性","看上去","一些","在","可读","可读性","对象","就","推荐","了","刚才","编程","比如","可以","更","。","但是","可移植性","面向","面向对象","看上","更好","我们","和","代码","移植","起来","改成","更加","会","上去","方式"," ","使用","的","，","中","虽然","也","调试","方便","ros2","开发","这样"],"title":"案例二：Hello World节点（面向对象）","title_tokens":["面向"," ","面向对象","案例","（","hello","节点","world","对象","）","：","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_6","text":"接下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["字符","终端","class","在","效果","：","字符串","run","hello","调整","可以","打印","后","world","learning","一下","。","$","下来","看到","“","接下","节点","循环","node","还是","helloworld","接下来"," ","运行","，","中","_","”","成功","ros2","的"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_7","text":"功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ],","text_tokens":["'","信息","console","__","具体","是否","name","#","：","ok","-","while","休眠","(","super","后","变化","接口","一下","但是","self","点","看","实现","类","guyuehome","helloworldnode","时间","node","一个","编写","def","这份"," ","0.5","完成","bin","进行","”","8","info","的","scripts","库","函数","utf","等待","class","加入","www","作者","hello","from","logger","父类","world","编译","。","创建","]","一样","发布","结构","面向","面向对象","我们","time","python3","shutdown","/","python","使用","none","entry","并","rclpy","控制","*","虽然","程序","destroy","ros2",":","让","init",".",",","主","!","learning","\"","发生","{","退出","sleep","py","需要","helloworld","示例","方式","销毁",")","关闭","配置","coding","usr","运行","正常","古月","系统","时","@","spin","points","=","居","功能","输出","setup","对象","打开","包","了","main","日志","文件","入口","[","env","import","设置","“","代码","节点","如下","get","循环","args","初始","com","选项","说明","，","_","知道","初始化"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_8","text":"所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。","text_tokens":["步骤","功能","所以","这里","大家","一些","这","具体","总体而言","四个","疑惑","得","了","做","改变","只不过","hello","编程","不能","打印","编码","不过","world","而已","。","接口","创建","心里","不是","到","机器人","总体","节点","实现","依然","只是","一个","为止","初始","方式","销毁"," ","关闭","编码方式","完成","而言","并","吧","，","是不是","中","任务","还有","是","初始化","机器","的"],"title":"创建节点流程","title_tokens":["创建","节点","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_9","text":"没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。","text_tokens":["一张","以","就","先","通过","没错","网上","。","模拟","视觉","下来","从","机器人","我们","接下","节点","实现","来","苹果","过程","一个","编写","接下来"," ","找到","识别","为例","，","任务","中","图片","实际","机器","的"],"title":"案例三：物体识别节点","title_tokens":["识别","案例","节点","物体","三","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_10","text":"在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 Attention 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。","text_tokens":["'","home","注意","路径","—","修改","勾勒","：","#","-","(","可视化","后","hcx","image","一个","node","imread"," ","中","cv2","出来","安装","的","库","图像处理","object","框会","这个","可以","会弹","编译","可视","。","前","即可","指令","我们","将","python3","/","把","install","使用","识别","窗口","图片","ros2","apple","在",".","请","sudo","啦","tutorials","jpg","learning","ws","attention","opencv","用到","看到","重新","py","为","表示","处理","21","需要",")","apt","运行","实际","例程","=","绿色","就","被","中心","run","绿点","然后","src","轮廓","$","出","代码","苹果","如下","dev","中间","图像","，","_","中心点","成功"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_11","text":"在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ],","text_tokens":["'","mask","得到","home","<","console","大家","具体","噪声","勾勒","#","：","-","(","shape","后","上限","接口","理过","更多要","img","destroyallwindows","if","hcx","机器人","点","image","xy","实现","类","guyuehome","一个","node","128","上角","imread","编写","def"," ","完成","bin","中","进行","处理过程","是","此处","8","cv2","出来","info","hierarchy","效果","的","scripts","库","x","函数","utf","图像处理","int","等待","图像识别","一些","class","二值化","object","1","inrange","这个","概念","太小","加入","www","作者","w","通过","关于","左上","from","bgr2hsv","logger","detect","编译","。","创建","]","转换","计算","从","如何","我们","将","python3","shutdown","/","所在","python","5","识别","none","使用","entry","并","rclpy","*","waitkey","程序","图片","boundingrect","imshow","destroy","ros2","upper","像素",":","h","cnt","颜色","显示","读取","red","在","apple","阈值","让","init","cvtcolor","90","范围",".","检测","数值",",","0","findcontours","点画","tutorials","numpy","jpg","主","!","in","learning","模拟","如下","+","\"","ws","{","opencv","退出","和","2","np","更多","py","hsv","为","150","as","处理","关注","21","需要","continue","helloworld","示例","销毁",")","关闭","配置","去除","coding","usr","chain","color","古月","左上角","系统","list","@","例程","出现","255","spin","=","circle","points","模型","居","功能","setup","宽","对象","打开","包","approx","了","lower","高","中心","180","main","文件","入口","[","env","import","src","轮廓","retr","不是","y","设置","contours","代码","节点","来","面积","坐标","苹果","array","过程","及","get","循环","bgr","drawcontours","args","重点","初始","dev","com","选项","红色","图像","说明","for","，","_","知道","下限","初始化","机器"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_12","text":"用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。","text_tokens":["用","颜色","摄像头","读取","像头","其中","就让","或者","还","没","类似","物体","。","眼睛","应该","下来","机器人","我们","接下","节点","合理","苹果","好像","呀","太","接下来","不","识别","动态","图像","，","进行","问题","图片","摄像","机器","有","的"],"title":"案例四：机器视觉识别节点","title_tokens":["识别","案例","节点","机器","：","视觉","四"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_13","text":"启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 Attention 如果是在虚拟机中操作，需要进行以下设置： 1. 把虚拟机设置为兼容USB3.1； 2. 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。","text_tokens":["移动","驱动","虚拟机","注意","usb3.1","终端","摄像头","可","像头","在","至","object","1","#","：","就",".","设备","run","啦","可以","webcam","并且","启动","后","learning","物体","。","如果","attention","$","设置","连接","；","实时","该","2","节点","为","如下","中将","一个","node","成功","操作","把","需要"," ","识别","的","红色","，","运行","虚拟","中","_","进行","兼容","是","摄像","ros2","以下"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_14","text":"相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ],","text_tokens":["驱动","'","mask","得到","信息","<","console","这里","像头","修改","噪声","勾勒","#","：","ok","之前","-","while","(","shape","后","变化","接口","上限","img","if","点","image","xy","类","cap","guyuehome","node","128","上角","videocapture","50","编写","def"," ","完成","bin","中","进行","是","8","cv2","出来","info","hierarchy","效果","的","scripts","库","x","函数","utf","图像处理","int","一些","class","二值化","object","1","inrange","太小","左上","w","加入","www","作者","通过","from","bgr2hsv","webcam","logger","并且","detect","编译","。","创建","read","]","转换","计算","从","将","python3","ret","shutdown","/","所在","python","周期","使用","识别","none","5","entry","并","rclpy","*","waitkey","程序","图片","boundingrect","imshow","destroy","ros2","upper","像素",":","h","cnt","颜色","摄像头","显示","读取","red","阈值","true","让","最大","相机","init","cvtcolor","90","范围",".","相比","检测","数值",",","0","findcontours","点画","numpy","主","!","in","learning","+","\"","{","opencv","和","2","np","150","py","hsv","为","as","处理","需要","continue","helloworld","示例","销毁",")","关闭","配置","去除","coding","usr","chain","color","古月","左上角","系统","list","@","出现","255","points","=","circle","模型","居","功能","setup","宽","对象","打开","包","approx","了","lower","高","中心","180","main","文件","入口","[","一帧","env","import","轮廓","retr","设置","y","来源","contours","代码","节点","来","面积","坐标","苹果","array","get","及","如下","bgr","drawcontours","args","初始","com","选项","红色","图像","说明","for","，","_","知道","下限","摄像","初始化"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_15","text":"节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息","text_tokens":["信息","<","查看","常用","列表","name","#","：","$","节点","如下","node","命令","操作",">"," ","_","info","ros2","的","list"],"title":"节点命令行操作","title_tokens":["操作","节点","命令","命令行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_16","text":"现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。","text_tokens":["大家","常用","像头","得","另外","框架图","某种","后","如果","负责","应该","联系","机器人","框架","实现","一个","b"," ","发送","细胞","中","同理","的","收到","方法","这","电脑","岂","这个","概念","机制","他们","。","指令","我们","运动","将","摇杆","之间","很","把","并","控制","孤立","现在","发现","显示","摄像头","开始","在","保持联系","介绍","回到","没错","想要","连接","速度","和","看到","配置","一节","最为","a","要","有","系统","这些","下","过来","保持","给","就","了","改变","比如","参数","多种","ros","熟悉","不是","工作","节点","会","图像","，","问题","还会","摄像","两个","机器","一种"],"title":"思考题","title_tokens":["思考题","思考","考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_17","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["-","nodes","tutorials","understanding","docs","org","/","https","ros","en","html","humble","ros2",":","."],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/","text":"话题 节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。 通信模型 以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。 发布/订阅模型 从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。 多对多通信 大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。 异步通信 话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。 消息接口 最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。 案例一：Hello World话题通信 了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 运行效果 启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。 发布者代码解析 我们来看下发布者的实现方法。 程序实现 learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口 订阅者代码解析 我们再来看下订阅者的实现方法。 程序实现 learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。 案例二：机器视觉识别 在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。 运行效果 这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。 发布者代码解析 learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], }, 订阅者代码解析 learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], }, 案例三：机器视觉识别优化 通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub 话题命令行操作 话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息 思考题 关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？ 参考链接 https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["做到","数据结构","__","单向","比方","区分","组织","这里","常用","后缀","通用","定义","字符串","写","之前","一","(","可视化","中是","耦","frame","shape","感觉","如果","}","传感器","长度","就要","实现","guyuehome","一个","还是","128","焕然一新","0.5","以上","与","第二","接收数据","8","解","hierarchy","已经","库","方法","int","关系","一些","这","重要","数据类型","class","二值化","可能","1","里","这个","公众","合适","www","没","hello","w","刚才","webcam","world","几乎","并不知道","。","可视","感器","]","发布","转换","才能","固定","接口协议","几个","每个","python","5","并","控制","虽然","waitkey","举","boundingrect","哪里","据传","h","一句","cnt","bw","对劲","raw","列表","号","让","每换","msgs","某些","平时","啦","findcontours","tutorials","另","没错","他会","https","rgb","渲染","英文","退出","移植","保证","py","一行","进一步","处理","队列","定时器","总结","叫","chain","什么样","原本","color","监控","解析","左上角","a","优先","以下","list","模型","不变","移植性","给","还","就","东西","了","高","main","参数","类似","入口","此时","env","二","$","实时","换成","什么","echo","\\","contours","节点","就是","逻辑","来","从而","循环","get","过程","通信模型","bgr","drawcontours","会","长宽","太","usb","是从","图像","_","拍摄","本原","任何","生活","这样","思考题","是否","用户","带宽","name","思想","噪声","案例","type","稍后","启动","思考","适合","转换成","变化","但是","未来","程序实现","不然","img","机器人","该","image","类",">"," ","存在","中文","info","互相","安装","率","等等","订阅","收到","异步","提示","分别","都","exe","subscription","软件","联系方式","std","做","太小","传输","通过","可以","关于","from","logger","所有","父类","detect","自然","更","创建","从","指令","我们","将","运动","链接","python3","之间","一次","data","命令","似乎","所在","呀","接下来","install","none","识别","entry","用于","参考","chatter","msg","ros2","upper","像素","开发","已","现在","传递数据","可见","颜色","？","读取","开始","true","to","原理","命令行","sudo","直接",",","先","点画","传递","方向","三","不行","imagepublisher","上","下来","模块化","callback","优化","np","docs","但","提高","操作","publishing","精简","接口定义","示例",")","是不是","publish","特性","块","例子","当然","唯一","要","格式","系统","用","=","circle","定时","setup","0.1","宽","approx","要求","比如","！","满足","org","ros","发布者","听","万缕","放入","一帧","import","轮廓","更好","“","肯定","接下","讲解","pub","过瘾","最后","填充","com","设计","视频","选项","基于","红色","千丝","一定","包含","时候","10","问题","cam","阅读","下限","初始化","两个","一种","报社","同学","驱动","mask","得到","console","回调","字符","谁","编程语言","魔性","勾勒","协议","：","#","-","另外","super","某种","后","想下","一下","上限","html","应该","联系","每","if","角度","xy","cap","没有","理解","node","好像","较强","编写","再","发送","中","随处可见","进行","”","二个","是","cv2","出来","video","第二个","打","x","基本原理","函数","图像处理","所谓","终端","等待","数据传输","一篇","说","组成","topics","继续","inrange","左上","概念","加入","了解","不能","bgr2hsv","统一","单位","dds","之为","read","秒","接收","hz","摇杆","shutdown","ret","/","留","把","采集","进入","建议","cvbridge","*","基本","程序","控制指令","多","imshow","cv","s",":","集成","这种","像","知识","其中","red","在","阈值","对应","一新","相机","init","听说","范围","90",".","cvtcolor","数值","3","receiving","0","者","排版","numpy","做成","之后","主","learning","逻辑性","bridge","想象","第一次","opencv","看到","和","名","2","sub","i","为","需要","杂志","timer","自己","continue","分析","%","销毁","关闭","个","只","apt","配置","一步","叫做","coding","传感","运行","usr","去除","类型","考题","某","古月","标准","更换","@","例程","spin","因为","一份","sensor","publisher","各样","自行","你","频率","被","中心","文章","兴趣","设备","硬件","run","180","日志","想","文件","符合","物体","不过","换","名字","人","）","retr","不是","understanding","根本","苹果","如下","array","及","初始","能够","来看","说明","，","发出","优先级","保持","机器","'","信息","注意","<","大家","查看","复杂","画面","很多","修改","得","无论","编程","说干就干","接口","self","heard","imagesubscriber","周期性","点","看","小编","上角","videocapture","b","def","（","完成","为例","bin","也","转化","对","效果","呢","化成","的","话题","不知","scripts","完全","不太","最","多个","utf","消息","subscribernode","拼接","object","既然","以","publishernode","复用","感兴趣","create","获取","作者","独立","桥梁","string","执行","称之为","并且","么","词","编译","第一","内","一样","计算","视觉","即可","结构","到","如何","流程","感兴","en","随处","无法","积木","周期","使用","、","rclpy","微信","各种各样","值","destroy","humble","讲","目标","名称","可移植","通信","那","出去","显示","成为","topic","又","千丝万缕","需求","只要","检测","它","好","bgr8","作为","!","in","想要","+","\"","可移植性","{","在生活中","间","150","hsv","as","焕然","无关","helloworld","仔细","方式","不","指","来讲","imgmsg","同样","挺","有","这些","points","发送数据","255","居","报纸","功能","输出","下","对象","打开","包","成","lower","第一个","的话","数量","描述","[","设置","y","语言","代码","数据","坐标","面积","一般","必然","args","对于","各种","模块","listener","for","本身","还有","转化成","知道","成功"],"title":"话题","title_tokens":["话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_1","text":"节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。","text_tokens":["最","传递数据","功能","其中","重要","各样","千丝万缕","联系方式","了","它","传递","独立","桥梁","这些","万缕","。","联系","不是","机器人","间","节点","实现","就是","数据","之间","但","一种","会","各种","方式"," ","并","千丝","，","各种各样","是","机器","有","的","话题"],"title":"话题","title_tokens":["话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_2","text":"以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。","text_tokens":["驱动","得到","信息","大家","查看","用户","可视化","某种","一下","机器人","实现","一个","b"," ","存在","为例","中","是","的","话题","关系","这","数据传输","以","这个","做","获取","传输","可以","桥梁","称之为","之为","。","可视","才能","到","从","我们","将","之间","据传","？","显示","在","相机","它","传递","作为","没错","方向","渲染","上","方式","是不是","某","监控","要","a","有","功能","给","就","了","设备","硬件","想","ros","此时","实时","不是","节点","数据","必然","视频","图像","，","拍摄","两个","机器","这样"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_3","text":"从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。","text_tokens":["比方","大家","组织","另外","如果","应该","每","角度","机器人","看","实现","小编","没有","一个"," ","发送","随处可见","也","”","接收数据","是","对","呢","的","话题","打","订阅","收到","等等","都","数据类型","数据传输","感兴趣","这个","公众","传输","可以","dds","称之为","自然","之为","。","发布","接收","从","到","固定","感兴","/","随处","把","无法","使用","、","微信","生活","据传","名称","可见","？","出去","知识","成为","号","平时","它","好","者","排版","之后","他会","在生活中","和","需要","杂志","叫","叫做","特性","类型","古月","有","格式","发送数据","模型","居","报纸","对象","就","成","了","文章","兴趣","要求","比如","的话","类似","发布者","名字","什么","“","数据","节点","就是","会","来看","是从","基于","，","本身","机器","这样"],"title":"发布/订阅模型","title_tokens":["订阅","/","发布","模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_4","text":"大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。","text_tokens":["注意","区分","大家","谁","画面","很多","魔性","想下","一下","如果","不然","机器人","该","一个","还是","再"," ","发送","存在","也","是","对","的","话题","订阅","多个","可能","1","里","这个","公众","可以","称之为","之为","。","一样","发布","指令","我们","摇杆","似乎","每个","建议","并","、","控制","控制指令","多","通信","号","3","者","没错","想象","和","2","杂志","仔细","不","个","是不是","挺","唯一","要","优先","有","这些","模型","报纸","因为","东西","被","了","数量","ros","发布者","听","人","不是","节点","通信模型","，","知道","优先级","机器"],"title":"多对多通信","title_tokens":["对","多","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_5","text":"话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。","text_tokens":["修改","后","适合","如果","传感器","一个","较强","同学"," ","也","是","的","话题","不知","订阅","收到","异步","等等","所谓","一些","这","可能","一篇","这个","公众","合适","传输","可以","词","第一","并不知道","。","更","感器","发布","指令","运动","一次","周期","用于","控制","通信","？","那","号","让","只要","听说","某些","者","逻辑性","第一次","不","指","叫做","传感","特性","某","古月","有","用","居","报纸","一份","你","就","了","文章","比如","参数","类似","发布者","什么","就是","数据","根本","逻辑","太","，","发出","时候","还有","阅读","知道","报社"],"title":"异步通信","title_tokens":["异步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_6","text":"最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。","text_tokens":["数据结构","复杂","这里","编程语言","后缀","定义","得","编程","接口","机器人","理解","一个"," ","与","中文","中","也","进行","是","的","话题","等等","订阅","消息","都","数据传输","拼接","说","组成","既然","概念","传输","通过","可以","不能","统一","称之为","之为","。","一样","发布","结构","我们","每个","积木","、","各种各样","msg","值","像素","据传","通信","像","在","对应",".","者","rgb","英文","和","无关","接口定义","方式","块","标准","有","格式","系统","自行","各样","就","成","了","比如","文件","发布者","ros","描述","语言","数据","节点","最后","会","长宽","各种","图像","，","包含","机器","一种","这样"],"title":"消息接口","title_tokens":["接口","消息"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#hello-world","text":"了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。","text_tokens":["订阅","例程","基本原理","消息","字符","开始","定义","原理","字符串","了","这个","啦","了解","hello","者","string","world","发布者","ros","。","创建","发布","接收","下来","从","到","我们","“","代码","接下","就要","来","从而","一个","还是","编写","接下来","再","周期"," ","发送","chatter","，","中","基本","”","类型","是","标准","本原","的","话题"],"title":"案例一：Hello World话题通信","title_tokens":[" ","一","案例","通信","hello","world","：","话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_7","text":"启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。","text_tokens":["订阅","收到","消息","字符","终端","topic","频率","以","：","字符串","run","hello","者","可以","第一个","启动","发布者","learning","第一","world","几乎","。","发布","$","看到","“","该","sub","节点","数据","pub","循环","一个","第二个","helloworld"," ","，","运行","第二","也","_","二个","”","同样","ros2","的","话题"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_8","text":"我们来看下发布者的实现方法。","text_tokens":["来看","我们","方法","实现","下","发布者","。","发布","的"],"title":"发布者代码解析","title_tokens":["代码","发布者","发布","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_9","text":"learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], },","text_tokens":["'","信息","console","__","回调","字符","name","#","：","字符串","-","(","super","后","接口","self","}","长度","点","类","guyuehome","node","一个","编写","def"," ","0.5","（","完成","bin","中","进行","”","8","info","的","话题","已经","scripts","库","提示","函数","utf","消息","等待","class","publishernode","std","create","加入","www","作者","hello","from","string","单位","logger","执行","父类","world","编译","创建","]","发布","秒","python3","shutdown","/","data","python","周期","none","entry","、","rclpy","并","*","chatter","程序","msg","destroy","ros2","s",":","topic","让","init","msgs",".",",","主","!","learning","\"","{","退出","callback","名","py","为","队列","publishing","需要","timer","定时器","helloworld","示例","%","销毁",")","关闭","配置","coding","usr","publish","类型","古月","系统","@","spin","points","=","居","定时","输出","功能","setup","publisher","对象","打开","包","main","日志","文件","入口","发布者","[","）","env","import","设置","“","代码","节点","数据","pub","如下","get","循环","args","初始","填充","com","选项","说明","，","_","10","知道","初始化"],"title":"程序实现","title_tokens":["程序","实现","程序实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_10","text":"对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口","text_tokens":["消息","对象","：","编程","发布者","想要","接口","如果","创建","发布","初始化","我们","实现","节点","流程","如下","一个","初始","填充","分析","销毁"," ","关闭","以上","并","，","进行","程序","对","话题"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_11","text":"我们再来看下订阅者的实现方法。","text_tokens":["来看","订阅","的","我们","者","方法","实现","下","。","再"],"title":"订阅者代码解析","title_tokens":["订阅","者","解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_12","text":"learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], },","text_tokens":["'","信息","console","__","回调","name","定义","#","：","-","(","super","后","接口","self","heard","}","长度","点","类","guyuehome","node","一个","编写","def"," ","（","完成","bin","进行","”","8","info","对","的","话题","scripts","订阅","收到","库","提示","subscribernode","utf","消息","函数","等待","class","subscription","std","create","加入","www","作者","hello","from","string","logger","执行","父类","world","编译","创建","]","python3","shutdown","/","data","python","none","entry","、","rclpy","并","*","chatter","程序","msg","destroy","ros2","s",":","topic","让","init","msgs",".",",","者","主","!","learning","\"","{","退出","callback","名","i","sub","py","处理","队列","需要","helloworld","示例","%","销毁",")","关闭","配置","coding","usr","类型","古月","标准","系统","@","spin","points","=","居","功能","输出","setup","对象","打开","包","main","日志","文件","入口","[","）","env","import","设置","“","\\","代码","节点","数据","pub","如下","get","循环","args","初始","com","listener","选项","说明","，","_","10","知道","初始化"],"title":"程序实现","title_tokens":["程序","实现","程序实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_13","text":"对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。","text_tokens":["订阅","例程","函数","通信","回调","大家","下","对象","还","继续","：","之前","啦","好","hello","者","编程","world","想要","。","接口","如果","创建","初始化","视觉","下来","我们","接下","实现","节点","数据","流程","优化","如下","一个","过瘾","处理","初始","接下来","分析","销毁","不"," ","关闭","基于","以上","并","一定","，","进行","程序","对","机器","的","话题"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_14","text":"在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。","text_tokens":["驱动","做到","开发","功能","在","相机","了","这个","概念","没","传输","通过","做成","并且","物体","。","但是","视觉","即可","联系","机器人","我们","模块化","更好","将","节点","讲解","实现","和","间","就是","过程","没有","一个","数据","对于","模块","方式","周期","识别","来讲","红色","并","图像","，","中","虽然","问题","程序","是","对","两个","机器","的","话题"],"title":"案例二：机器视觉识别","title_tokens":["识别","案例","机器","：","二","视觉"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_15","text":"这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。","text_tokens":["驱动","修改","定义","思想","中是","说干就干","启动","如果","未来","实现","一个"," ","第二","二个","是","效果","第二个","话题","的","订阅","完全","分别","消息","终端","软件","这个","可以","webcam","第一","内","。","发布","视觉","即可","如何","我们","将","识别","并","ros2","可移植","这种","？","topic","在","相机","范围","啦","好","先","另","learning","可移植性","模块化","移植","保证","看到","sub","需要","只","运行","标准","更换","要","以下","功能","不变","下","移植性","就","了","run","第一个","物体","ros","放入","$","两个","更好","节点","pub","模块","设计","来看","红色","图像","，","_","保持"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_16","text":"learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], },","text_tokens":["'","驱动","信息","console","__","回调","name","#","：","-","(","super","稍后","frame","后","转换成","接口","如果","self","}","if","长度","点","image","类","cap","guyuehome","node","一个","videocapture","编写","def"," ","（","完成","bin","与","进行","cv2","8","info","video","的","话题","已经","scripts","库","提示","函数","utf","消息","图像处理","等待","class","create","加入","www","作者","from","logger","webcam","单位","执行","父类","编译","创建","转换","read","发布","秒","]","将","python3","ret","shutdown","/","python","采集","周期","none","entry","用于","、","rclpy","cvbridge","*","并","程序","msg","destroy","cv","ros2",":","topic","读取","raw","true","号","to","让","相机","init","msgs",".","bgr8",",","0","主","!","learning","bridge","\"","{","opencv","imagepublisher","退出","callback","名","sub","py","为","处理","队列","publishing","需要","timer","定时器","helloworld","示例","销毁",")","关闭","配置","coding","usr","publish","imgmsg","类型","古月","系统","@","spin","points","=","居","0.1","定时","输出","功能","sensor","publisher","setup","对象","打开","包","设备","main","日志","文件","入口","ros","发布者","[","）","一帧","env","import","换成","设置","代码","节点","pub","如下","get","循环","args","初始","com","视频","选项","图像","说明","，","_","10","知道","成功","初始化"],"title":"发布者代码解析","title_tokens":["代码","发布者","发布","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_17","text":"learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], },","text_tokens":["'","mask","得到","信息","<","__","回调","console","name","噪声","勾勒","#","：","-","(","super","shape","frame","后","上限","接口","self","}","img","imagesubscriber","if","长度","点","image","xy","类","guyuehome","node","一个","128","上角","编写","def"," ","（","完成","bin","与","中","进行","cv2","8","出来","info","video","转化","互相","hierarchy","效果","的","话题","化成","订阅","scripts","库","x","函数","utf","消息","图像处理","提示","int","等待","一些","class","二值化","object","1","subscription","inrange","太小","左上","create","w","www","作者","加入","from","bgr2hsv","webcam","logger","父类","detect","编译","创建","转换","]","计算","从","将","python3","shutdown","/","data","所在","python","进入","5","none","使用","entry","用于","、","rclpy","cvbridge","*","并","waitkey","程序","msg","boundingrect","imshow","destroy","cv","ros2","upper","像素",":","已","h","cnt","颜色","topic","显示","red","raw","阈值","让","to","init","msgs","90","cvtcolor",".","范围","数值","检测",",","receiving","0","者","findcontours","点画","bgr8","numpy","主","!","in","learning","bridge","+","\"","{","opencv","退出","callback","名","和","sub","np","150","py","hsv","为","2","as","处理","队列","需要","continue","helloworld","示例","销毁",")","关闭","配置","去除","coding","usr","chain","imgmsg","类型","color","古月","左上角","系统","list","@","spin","255","points","=","circle","模型","居","功能","输出","setup","sensor","宽","对象","打开","包","approx","lower","中心","高","180","main","日志","文件","入口","ros","[","）","env","import","轮廓","retr","设置","y","contours","代码","节点","坐标","面积","pub","苹果","array","get","及","循环","如下","bgr","drawcontours","args","初始","com","listener","选项","红色","图像","说明","for","，","_","10","转化成","知道","下限","初始化"],"title":"订阅者代码解析","title_tokens":["订阅","者","解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_18","text":"通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub","text_tokens":["驱动","得到","大家","常用","通用","协议","得","写","无论","-","耦","感觉","变化","接口","一个","好像","node"," ","焕然一新","中","也","是","解","对","安装","的","率","话题","不太","都","exe","这","可能","复用","软件","做","刚才","通过","可以","webcam","么","。","发布","视觉","到","指令","我们","接口协议","似乎","呀","install","识别","使用","humble","ros2","目标","哪里","集成","一句","现在","？","topic","对劲","又","让","一新","相机","每换","只要","sudo","直接","好","learning","不行","sub","一行","进一步","焕然","提高","需要","自己","精简","不","apt","只","一步","什么样","是不是","原本","当然","标准","有","例程","用","功能","你","就","了","run","！","符合","不过","ros","换","$","不是","换成","什么","代码","节点","一般","usb","图像","，","_","还有","cam","任何","这样"],"title":"案例三：机器视觉识别优化","title_tokens":["识别","案例","优化","三","机器","：","视觉"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_19","text":"话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息","text_tokens":["bw","信息","<","消息","查看","常用","topic","带宽","列表","name","频率","#","：","type","传输","发布","$","hz","echo","数据","pub","如下","data","命令","操作",">"," ","_","msg","info","ros2","的","话题","list"],"title":"话题命令行操作","title_tokens":["操作","命令","话题","命令行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_20","text":"关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？","text_tokens":["思考题","通信","单向","方法","这种","大家","复杂","这里","？","是否","给","数据传输","需求","原理","就","：","传输","传递","关于","满足","所有","思考","适合","据传","周期性","到","机器人","我们","和","肯定","实现","数据","几个","一个","留","对于","无法","呢","能够","周期","来讲","完成","考题","，","特性","举","是","例子","讲","机器","系统","的","话题"],"title":"思考题","title_tokens":["思考题","思考","考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_21","text":"https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["-","tutorials","understanding","docs","org","/","https","ros","en","ros2","html","humble","topics",":","."],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/","text":"服务 话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。 通信模型 在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。 客户端/服务器模型 从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。 同步通信 这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。 一对多通信 比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。 服务接口 和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。 案例一：加法求解器 大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 运行效果 我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3 客户端代码解析 我们来看下客户端的实现方法。 程序实现 learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口 服务端代码解析 至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。 程序实现 learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口 案例二：机器视觉识别 好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。 运行效果 此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client 客户端代码解析 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], }, 服务端代码解析 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], }, 服务命令行操作 服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求 思考题 话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。 参考链接 https://docs.ros.org/en/humble/Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["单向","__","上层","常用","通用","定义","ok","之前","一","越好","(","打印","sec","shape","frame","不同","如果","}","传感器","timeout","；","长度","就要","实现","guyuehome","一个","还是","128","这么","以上","n","与","第二","of","8","页面","hierarchy","已经","服务端","库","call","有所","方法","int","相对","一些","class","数据类型","二值化","可能","1","岂","这个","w","www","刚才","机制","准备","假设","服务","并不知道","。","感器","]","转换","发布","访问","根据","封装","python","圈圈","发给","5","d","并","控制","waitkey","针对","boundingrect","h","cnt","raw","列表","让","msgs","某些","啦","sys","findcontours","tutorials","https","官方","加数","objectx","退出","数据通","后续","py","处理","队列","总结","service","状态","request","chain","color","软硬件","解析","左上角","a","当","list","三个","模型","域名","给","就","绝大部分","了","客户","高","宕机","main","类似","入口","此时","invalid","有所不同","env","二","一直","$","什么","\\","contours","节点","就是","过程","循环","get","通信模型","bgr","drawcontours","会","else","usb","学习","图像","反馈","available","_","常见","生活","这样","思考题","浏览","—","是否","name","噪声","while","案例","type","wait","启动","思考","适合","但是","程序实现","img","机器人","提供","image","类",">","50"," ","存在","target","info","本","传入","waiting","互相","等等","订阅","收到","异步","提示","分别","argv","最新","都","exe","图像识别","once","subscription","太小","传输","通过","可以","from","logger","父类","objectclient","detect","更","创建","failed","从","简称","我们","将","运动","核心","指令","软硬","链接","python3","之间","很","一次","data","命令","future","所在","接下来","识别","none","认为","entry","用于","接口类","参考","msg","ros2","upper","像素","已","开发","现在","客户端","传递数据","颜色","开始","true","to","原理","越快越好","命令行",",","点画","传递","介绍","同步性","通信接口","not","用到","上","下来","课程","网页","callback","两种","np","合理","docs","但","大部分","上述","操作","示例",")","服务器发送","跟踪","最为","正常","唯一","要","系统","时","部分","=","circle","setup","宽","approx","try","要求","比如","查询","满足","org","ros","发布者","加法","import","轮廓","“","接下","提到","incoming","形式","com","位置","尽快","接口类型","设计","选项","红色","时候","10","cam","下限","初始化","两个","一起","一种","驱动","mask","得到","console","回调","返回","勾勒","：","#","-","另外","并不需要","super","后","上限","html","应该","每","if","场景","随时","半天","xy","command","objecty","时间","没有","至于","越快","好像","node","比比皆是","break","done","编写","求解","发送","again","自定","中","进行","器","”","二个","ints","是","cv2","出来","答","video","adderserver","第二个","x","函数","图像处理","r","终端","等待","电脑","务器","two","继续","inrange","左上","加入","了解","bgr2hsv","之为","send","接收","数据通信","shutdown","/","进入","网络","interface","cvbridge","*","判断","基本","e","程序","imshow","多","控制指令","cv",":","集成","问","这种","前者","其中","red","在","阈值","相机","init","cvtcolor","90","范围",".","相比","数值","3","receiving","0","者","cs","srv","numpy","之后","主","sum","learning","bridge","opencv","add","看到","和","我","应用","2","名","展现","sub","为","雷达","需要","打印输出","continue","分析","后者","%","销毁","关闭","附近","配置","考题","叫做","coding","getobjectposition","运行","usr","去除","类型","response","传感","里程计","古月","标准","@","例程","spin","出现","server","自定义","或者","sensor","同步","你","频率","请求","经常","中心","网站","180","run","...","硬件","日志","文件","物体","向","不过","人","）","按照","retr","不是","understanding","苹果","如下","array","及","服务器","初始","来看","说明","放到","，","那有","机器","'","信息","position","应答","<","大家","查看","某个","具体","addtwoints","很多","简单","加法器","编程","繁杂","exception","比比","接口","self","return","希望","imagesubscriber","周期性","点","看","服务器端","上角","而是","b","准确","def","（","完成","bin","绝大","也","反应","转化","对","效果","化成","的","话题","完全","scripts","不知","多个","adder","消息","utf","所以","object","create","1.0","作者","获取","执行","法器","称之为","并且","编译","第一","一样","计算","视觉","到","流程","当前","en","回想","无法","client","周期","使用","、","rclpy","destroy","humble","讲","目标","通信","处","出去","显示","成为","需求","检测","bgr8","好","!","in","想要","+","\"","{","在生活中","有点","150","hsv","as","界面","等","里程","发","更加","方式","不","async","一对","imgmsg","同样","不好","跟随","有","这些","points","255","转圈","居","功能","求和","下","adderclient","输出","对象","打开","包","一问一答","成","lower","变成","第一个","拿到","然后","结果","转圈圈","[","services","设置","y","大部","result","代码","数据","坐标","面积","一般","args","各种","listener","浏览器","for","还有","转化成","except","知道","成功"],"title":"服务","title_tokens":["服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_1","text":"话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。","text_tokens":["订阅","收到","异步","多个","通信","单向","消息","这种","方法","—","问","常用","是否","同步","效果","你","另外","传输","机制","者","可以","类似","ros","发布者","服务","。","发布","我们","将","我","实现","节点","数据","之间","一种","无法","准确","使用"," ","学习","，","知道","本","答","讲","一起","的","话题"],"title":"服务","title_tokens":["服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_2","text":"在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。","text_tokens":["驱动","得到","信息","应答","单向","上层","之前","另外","并不需要","不同","希望","机器人","实现","一个","好像","这么","而是"," ","发送","中","是","答","对","的","话题","订阅","有所","最新","图像识别","继续","这个","传输","机制","通过","可以","服务","。","更","一样","发布","到","我们","运动","周期","识别","发给","使用","并","目标","通信","问","这种","成为","其中","在","相机","课程","和","应用","我","发","需要","附近","service","跟随","模型","或者","频率","你","请求","了","高","比如","查询","变成","然后","物体","ros","此时","有所不同","按照","一直","节点","数据","通信模型","形式","位置","尽快","红色","图像","反馈","，","时候","机器","这样"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_3","text":"从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。","text_tokens":["收到","信息","问","客户端","模型","这种","应答","通信","浏览","某个","域名","或者","返回","具体","在","电脑","务器","你","就","请求","经常","某些","客户","网站","机制","cs","比如","通过","之后","向","服务","此时","。","上","从","简称","在生活中","我们","我","网页","实现","数据","服务器端","就是","为","展现","很","/","服务器","处理","操作","需要","会","形式","各种","来看"," ","发送","服务器发送","浏览器","并","叫做","反馈","，","进行","时候","针对","也","答","页面","常见","生活","的"],"title":"客户端/服务器模型","title_tokens":["客户","客户端","模型","/","服务器","服务","务器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_4","text":"这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。","text_tokens":["信息","通信","浏览","转圈","客户端","应答","所以","或者","在","同步","可能","务器","你","越快越好","了","这个","相比","宕机","越好","客户","要求","通过","可以","假设","称之为","服务","转圈圈","之为","。","一直","接收","到","我们","半天","服务器端","过程","一般","越快","没有","服务器","圈圈","浏览器","网络","状态","，","中","那有","判断","也","不好","反应","是","的","话题"],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_5","text":"比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。","text_tokens":["多个","通信","客户端","模型","居","大家","所以","都","务器","这个","客户","网站","比如","可以","服务","。","人","但是","一样","每","看到","访问","服务器端","没有","但","一个","界面","服务器","通信模型","不","存在","并","，","中","同样","是","古月","唯一","的","完全"],"title":"一对多通信","title_tokens":["一对","多","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_6","text":"和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。","text_tokens":["部分","通信","消息","传递数据","方法","大家","在","给","定义","请求",".","了","传递","比如","srv","变成","介绍","这些","文件","类似","ros","服务","。","一样","要","我们","和","核心","后续","数据","坐标","苹果","一个","还是","命令","会","位置"," ","使用","反馈","，","中","也","还有","是","msg","标准","两个","的","话题"],"title":"服务接口","title_tokens":["接口","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_7","text":"大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。","text_tokens":["得到","应答","大家","简单","后","应该","提供","就要","实现","服务器端","一个","还是","编写","求解"," ","发送","也","器","”","进行","ints","是","对","的","收到","相对","two","务器","这个","了解","通过","可以","服务","。","计算","从","我们","将","封装","接下来","并","基本","针对","现在","通信","客户端","出去","开始","啦","之后","想要","官方","加数","下来","add","需要","当","有","时","例程","功能","求和","给","就","成","请求","了","客户","结果","ros","加法","“","代码","接下","节点","数据","服务器","反馈","，","_","两个"],"title":"案例一：加法求解器","title_tokens":["一","案例","器","求解","：","加法"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_8","text":"我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3","text_tokens":["例程","服务端","adder","客户端","server","终端","求和","等待","下","功能","原理","请求","这个","客户","3","run","第一个","结果","并且","启动","服务","第一","传入","。","learning","ros2","加数","$","我们","提供","代码","看","实现","节点","数据","2","如下","一个","第二个","操作","client"," ","发送","service","并","，","运行","第二","_","二个","是","两个","一起","的"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_9","text":"我们来看下客户端的实现方法。","text_tokens":["来看","客户","我们","客户端","方法","实现","下","。","的"],"title":"客户端代码解析","title_tokens":["代码","客户","解析","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_10","text":"learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], },","text_tokens":["'","信息","console","__","是否","addtwoints","name","定义","#","加法器","：","ok","-","while","(","super","wait","打印","sec","启动","后","exception","接口","self","}","if","timeout","点","类","服务器端","guyuehome","node","一个","break","b","done","编写","def"," ","发送","（","完成","bin","again","自定","进行","of","ints","8","info","waiting","的","scripts","收到","库","异步","函数","adder","utf","argv","call","int","r","等待","class","two","务器","1","once","create","1.0","www","作者","加入","from","logger","执行","法器","父类","服务","编译","failed","创建","]","send","计算","接收","将","python3","shutdown","一次","/","future","python","client","none","entry","d","并","rclpy","interface","*","接口类","e","程序","destroy","ros2",":","客户端","让","init",".",",","sys","srv","!","sum","learning","not","加数","\"","+","{","add","名","2","py","as","处理","需要","打印输出","示例","方式","%",")","销毁","async","关闭","service","配置","request","coding","usr","运行","类型","response","正常","古月","a","系统","@","spin","points","=","居","功能","输出","自定义","adderclient","setup","对象","打开","包","请求","try","客户","main","...","文件","入口","[","）","env","加法","import","设置","result","代码","节点","数据","如下","循环","get","服务器","args","初始","com","接口类型","else","选项","for","说明","available","，","反馈","_","except","知道","成功","初始化","两个"],"title":"程序实现","title_tokens":["程序","实现","程序实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_11","text":"对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口","text_tokens":["应答","客户端","等待","对象","务器","：","请求","客户","编程","想要","服务","接口","如果","创建","初始化","我们","实现","节点","数据","流程","服务器端","如下","一个","服务器","初始","分析","销毁"," ","发送","关闭","以上","并","，","进行","程序","对"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_12","text":"至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。","text_tokens":["订阅","出现","函数","通信","回调","务器","请求","了","机制","者","话题","类似","服务","并不知道","。","用到","什么","有点","实现","数据","服务器端","时间","至于","服务器","，","中","也","知道","的","不知"],"title":"服务端代码解析","title_tokens":["代码","服务端","服务","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_13","text":"learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], },","text_tokens":["'","信息","应答","__","回调","console","addtwoints","name","定义","#","加法器","：","-","(","super","后","接口","self","return","}","提供","点","类","guyuehome","node","b","编写","def"," ","（","完成","bin","n","自定","中","进行","ints","8","info","adderserver","对","的","已经","scripts","收到","库","提示","函数","adder","utf","等待","class","务器","two","create","加入","www","作者","from","logger","执行","法器","父类","服务","编译","创建","]","计算","将","python3","shutdown","/","python","client","none","entry","d","、","rclpy","interface","*","接口类","并","程序","destroy","ros2",":","让","init",".",",","srv","主","!","sum","learning","+","\"","{","add","退出","callback","名","py","处理","需要","示例","%","销毁",")","关闭","service","配置","request","coding","usr","类型","response","古月","a","系统","@","spin","points","=","server","居","功能","求和","自定义","输出","setup","对象","打开","包","请求","main","日志","文件","结果","入口","[","）","env","加法","import","设置","\\","代码","节点","数据","如下","get","循环","服务器","args","初始","incoming","com","接口类型","选项","说明","放到","，","反馈","_","知道","初始化"],"title":"程序实现","title_tokens":["程序","实现","程序实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_14","text":"对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口","text_tokens":["服务端","函数","应答","客户端","回调","处","对象","务器","：","客户","通过","编程","结果","向","想要","服务","接口","如果","创建","初始化","我们","实现","节点","服务器端","流程","如下","一个","服务器","初始","分析","销毁"," ","关闭","以上","并","反馈","，","进行","程序","对"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_15","text":"好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。","text_tokens":["通信","下","岂","了","啦","好","刚才","机制","通过","物体","服务","。","加法","视觉","不是","我们","实现","合理","流程","提到","回想","更加","需要","求解","位置","目标","识别","，","器","时候","已经","知道","当","的"],"title":"案例二：机器视觉识别","title_tokens":["识别","案例","机器","：","二","视觉"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_16","text":"此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client","text_tokens":["驱动","出现","订阅","三个","分别","客户端","server","终端","exe","对象","object","务器","相机","：","就","请求","了","客户","准备","run","可以","拿到","然后","并且","启动","服务","learning","此时","。","发布","视觉","$","；","机器人","提供","我们","运动","随时","节点","数据","服务器端","当前","一次","一个","根据","服务器","上述","node","机器","会","需要","位置","client","usb"," ","识别","认为","发送","service","图像","跟踪","，","运行","_","是","当","cam","ros2","目标","有","的","集成","时"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_17","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], },","text_tokens":["'","position","应答","__","console","name","定义","#","：","ok","-","while","(","super","wait","sec","后","exception","接口","self","}","if","timeout","点","类","guyuehome","node","break","done","编写","def"," ","n","完成","bin","again","自定","进行","of","target","8","info","waiting","的","scripts","库","x","utf","call","adder","r","等待","class","object","once","create","1.0","www","作者","加入","from","logger","objectclient","父类","服务","编译","failed","创建","]","send","python3","shutdown","/","future","python","client","识别","none","entry","d","并","rclpy","interface","*","e","程序","destroy","ros2","目标",":","true","让","init",".",",","srv","!","learning","not","\"","{","py","as","需要","示例","%","销毁",")","关闭","async","service","配置","request","coding","getobjectposition","usr","response","古月","系统","@","spin","points","=","居","server","功能","setup","自定义","对象","打开","包","请求","try","main","...","文件","入口","[","env","import","设置","y","result","\\","代码","节点","如下","get","args","初始","com","位置","else","选项","for","说明","available","，","_","except","知道","初始化"],"title":"客户端代码解析","title_tokens":["代码","客户","解析","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_18","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], },","text_tokens":["'","mask","得到","position","信息","<","__","回调","console","name","定义","噪声","勾勒","#","：","-","(","super","scripts","shape","frame","后","上限","接口","self","return","}","img","imagesubscriber","if","长度","提供","image","点","xy","类","command","objecty","guyuehome","node","一个","128","上角","50","编写","def"," ","（","n","bin","完成","与","自定","中","进行","target","cv2","8","出来","info","video","转化","对","互相","hierarchy","效果","的","话题","化成","订阅","收到","库","x","函数","utf","消息","图像处理","提示","int","adder","等待","一些","class","二值化","object","务器","1","subscription","inrange","太小","左上","create","w","www","作者","加入","from","bgr2hsv","logger","执行","父类","detect","服务","编译","创建","转换","]","计算","从","将","python3","shutdown","/","data","所在","python","client","进入","5","识别","none","使用","entry","用于","、","interface","rclpy","*","cvbridge","接口类","waitkey","d","并","程序","msg","boundingrect","imshow","destroy","cv","ros2","目标","upper","像素",":","已","h","cnt","颜色","显示","red","raw","阈值","true","让","to","init","msgs","90","cvtcolor",".","范围","数值","检测",",","receiving","0","srv","者","findcontours","点画","bgr8","numpy","主","!","in","learning","bridge","+","\"","{","opencv","objectx","退出","callback","名","和","sub","np","150","py","hsv","为","2","as","处理","队列","需要","continue","示例","%","销毁",")","关闭","service","配置","去除","getobjectposition","coding","usr","chain","imgmsg","类型","request","response","color","古月","左上角","系统","list","@","spin","255","points","=","circle","模型","server","居","功能","输出","自定义","setup","sensor","宽","对象","打开","包","请求","approx","lower","中心","高","180","main","日志","文件","入口","物体","ros","[","invalid","）","env","import","轮廓","retr","设置","y","\\","contours","代码","节点","坐标","面积","数据","苹果","array","get","及","循环","如下","服务器","bgr","drawcontours","args","初始","com","接口类型","else","listener","选项","红色","图像","说明","for","，","反馈","_","10","转化成","已经","下限","知道","初始化"],"title":"服务端代码解析","title_tokens":["代码","服务端","服务","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_19","text":"服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求","text_tokens":["call","<","查看","常用","数据类型","列表","name","#","：","请求","type","服务","$","数据","如下","data","命令","操作",">"," ","发送","service","类型","_","ros2","的","list"],"title":"服务命令行操作","title_tokens":["操作","命令","服务","命令行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_20","text":"话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。","text_tokens":["单向","常用","通用","很多","定义","繁杂","适合","比比","接口","传感器","周期性","机器人","场景","就要","比比皆是"," ","绝大","自定","中","也","是","的","话题","等等","方法","都","数据类型","这个","传输","获取","服务","感器","更","。","视觉","数据通信","指令","到","我们","软硬","无法","周期","识别","、","控制","针对","控制指令","目标","开发","通信","前者","在","需求","同步性","通信接口","数据通","和","两种","应用","大部分","等","里程","雷达","后者","传感","里程计","类型","最为","软硬件","标准","这些","部分","自定义","同步","一问一答","绝大部分","了","高","硬件","要求","比如","满足","类似","ros","不过","大部","数据","过程","位置","设计","图像","，","时候","机器"],"title":"思考题","title_tokens":["思考题","思考","考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_21","text":"https://docs.ros.org/en/humble/Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["-","tutorials","understanding","docs","org","/","https","ros","en","html","humble","ros2","services",":","."],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/","text":"通信接口 在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。 接口的定义 接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。 ROS通信接口 接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。 语言无关 为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。 标准接口 大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。 案例一：服务接口的定义与使用 了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。 接口定义 在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ... 程序调用 我们在代码中再来重点看下接口的使用方法。 客户端接口调用 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 服务端接口调用 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 案例二：话题接口的定义与使用 话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。 运行效果 现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub 接口定义 在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ... 程序调用 我们在代码中再来重点看下接口的使用方法。 发布者接口调用 learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 订阅者接口调用 learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 接口命令行操作 接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义 参考链接 https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["数据结构","路径","体","单向","__","区分","这里","常用","定义","字符串","ok","之前","一","(","像素点","打印","sec","shape","frame","不同","}","彼此","timeout","；","长度","实现","数组","guyuehome","一个","还是","128","不用","以上","n","由","与","第二","of","8","hierarchy","众多","已经","软件开发","服务端","库","call","方法","int","关系","一些","这","重要","class","三原","将要","可能","二值化","1","里","这个","w","www","中有","机制","single","webcam","micro","64","调用函数","服务","。","每隔","转换","]","发布","才能","固定","concepts","几个","件夹","根据","封装","每个","python","有没有","广泛","5","d","并","控制","share","waitkey","举个","boundingrect","h","一句","最终","两者","cnt","xml","整型","raw","精髓","列表","让","msgs","添加","轮子","findcontours","tutorials","各个","objectposition","find","包装","https","你来我往","分成","objectx","退出","interfaces","保证","后续","诞生","py","表示","处理","队列","度","service","状态","request","涵盖","什么样","chain","color","目的","解析","左上角","a","list","三个","模型","给","还","就","了","甚至","客户","却是","话","main","高","参数","rosidl","衍生","类似","入口","此时","invalid","env","二","$","换成","什么","\\","contours","about","就是","节点","来","group","过程","get","循环","bgr","drawcontours","会","else","usb","学习","内容","图像","反馈","available","_","packages","g","常见","形象化","生活","这样","—","旋转","编写程序","像头","是否","name","输入","噪声","为了","while","案例","wait","包中","启动","自动","img","generate","机器人","提供","image","类",">","50","第三个","降低"," ","typec","各个领域","target","info","安装","waiting","互相","等等","别人","收到","订阅","提示","分别","都","exe","once","subscription","软件","太小","std","传输","通过","可以","关于","from","logger","objectclient","父类","detect","generators","更","以及","创建","failed","加","交流","指令","从","我们","运动","核心","将","链接","python3","一次","很","之间","data","命令","future","所在","插头","接下来","上边","识别","none","用于","接口类","参考","msg","ros2","upper","开发","像素","转到第","已","现在","客户端","颜色","可见","？","看上去","开始","true","to","命令行","直接",",","20","点画","传递","c++","编译器","无论是","通信接口","not","use","看上","角速度","用到","上","下来","课程","callback","np","三种","docs","但","操作","接口定义","示例",")","研究","publish","最为","正常","图形","例子","主要","方便","要","系统","build","时","部分","=","circle","主程序","宽","approx","try","第三","比如","查询","org","重复","ros","发布者","project","种","一帧","加法","import","轮廓","肯定","“","接下","讲解","pub","depend","转","依赖","com","位置","接口类型","设计","关心","只有","中间","选项","红色","小海","包含","时候","10","cam","下限","初始化","两个","个人","一起","一种","驱动","mask","得到","30","回调","字符","谁","必须","勾勒","：","#","-","另外","super","后","一下","上限","html","更为","联系","每","if","便于","角度","高效","xy","command","objecty","理解","没有","node","break","done","编写","有机","再","发送","again","约束","自定","中","随处可见","进行","”","哪些","二个","是","出来","cv2","exec","video","到底","第二个","x","函数","图像处理","r","动作","终端","输入输出","32","等待","一边","电脑","像是","组成","务器","继续","inrange","左上","概念","详细","减少","了解","bgr2hsv","之为","send","shutdown","/","把","进入","interface","cvbridge","*","形象","e","程序","imshow","多","布尔值","cv",":","摄像头","red","在","阈值","对应","进度","相机","init","cvtcolor","90","范围",".","程序模块","数值","receiving","member","srv","0","者","numpy","做成","主","sum","learning","bridge","造","就行","opencv","连接","看到","和","应用","sub","名","2","为","关注","required","需要","自己","continue","%","销毁","关闭","只","配置","相互","去除","getobjectposition","coding","运行","建立","usr","类型","response","古月","标准","@","例程","spin","server","自定义","或者","sensor","publisher","看看","好奇","请求","中心","180","硬件","...","run","日志","文件","想","符合","物体","自语","人","）","retr","不是","数","苹果","array","如下","及","show","服务器","初始","上去","说明","，","机器","'","---","position","信息","应答","<","大家","查看","某个","具体","转到","布尔","runtime","得","无论","编程","int32","exception","接口","self","return","反正","imagesubscriber","标准接口","希望","看","调用","由于","package","int64","匹配","上角","而是","b","准确","def","完成","（","bin","也","转化","对","效果","呢","化成","的","话题","完全","不管","subscribernode","utf","消息","所以","原色","位","object","create","1.0","两","传输数据","获取","作者","他们","形状","string","执行","称之为","并且","编译","第一","计算","视觉","bool","结构","到","如何","cmakelists","当前","txt","en","随处","and","client","周期","使用","找到","、","rclpy","线速度","手机","领域","define","值","destroy","humble","讲","目标","通信","那","出去","显示","topic","action","只要","用来","检测","它","好","bgr8","标值","回到","!","三原色","小海龟","in","+","\"","{","速度","二维","150","hsv","as","等","无关","default","回顾","插座","图形化","async","坐标值","imgmsg","中来","有","这些","255","居","求和","输出","功能","下","代码生成","海龟","对象","打开","包","成","lower","第一个","结果","自言自语","的话","描述","[","y","语言","工作","result","代码","数据","坐标","1s","面积","键盘","args","重点","各种","模块","listener","for","生成","还有","转化成","except","知道","摄像","文件夹"],"title":"通信接口","title_tokens":["通信接口","接口","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_1","text":"在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。","text_tokens":["通信","动作","—","？","大家","都","或者","这","在","重要","给","将要","让","定义","为了","无论","甚至","概念","好","传递","可以","自言自语","ros","服务","通信接口","接口","。","人","自语","更","你来我往","结构","用到","不是","个人","交流","我们","什么","后续","数据","就是","理解","一个","还是","而是","会"," ","学习","并","内容","，","中","是","多","标准","两个","呢","系统","的","话题"],"title":"通信接口","title_tokens":["通信接口","接口","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_2","text":"接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。","text_tokens":["驱动","大家","必须","编写程序","常用","像头","具体","定义","输入","得","无论","-","编程","像素点","形象化","接口","更为","彼此","每","反正","；","机器人","提供","高效","实现","调用","一个","还是","匹配","b","不用","编写","准确"," ","typec","约束","由","随处可见","中","各个领域","也","进行","是","出来","安装","呢","的","话题","等等","软件开发","完全","函数","r","输入输出","所以","都","关系","一些","这","原色","电脑","像是","三原","组成","软件","这个","概念","传输","传输数据","通过","关于","形状","机制","他们","可以","micro","称之为","并且","调用函数","服务","之为","。","更","发布","才能","结构","加","到","固定","我们","运动","指令","如何","一次","很","随处","把","机器","每个","所在","插头","广泛","使用","、","控制","线速度","手机","领域","程序","形象","举个","多","值","讲","开发","像素","一句","两者","通信","可见","？","那","摄像头","看上去","开始","在","精髓","让","只要","相机","程序模块","它","好","直接","各个","无论是","回到","包装","三原色","通信接口","看上","角速度","连接","上","速度","和","应用","诞生","但","等","关注","自己","插座","图形化","g","配置","相互","运行","建立","什么样","最为","正常","图形","目的","解析","主要","标准","例子","要","有","系统","这些","时","主程序","输出","给","包","就","了","却是","话","硬件","比如","参数","结果","符合","类似","ros","什么","工作","肯定","代码","就是","数据","节点","键盘","上去","usb","模块","关心","只有","内容","图像","反馈","，","时候","知道","摄像","常见","两个","生活","一起","一种"],"title":"接口的定义","title_tokens":["定义","接口","的"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#ros","text":"接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。","text_tokens":["分别","通信","动作","一起","常用","这","让","定义","减少","轮子","机制","通过","可以","重复","ros","服务","。","接口","造","种","才能","联系","每","到","便于","我们","代码","核心","就是","节点","三种","之间","一种","依赖","降低","各种","有机","使用"," ","、","，","也","程序","是","方便","目标","有","的","话题","别人"],"title":"ROS通信接口","title_tokens":["通信接口","接口","ros","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_3","text":"为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。","text_tokens":["数据结构","---","30","体","单向","应答","区分","旋转","这里","是否","转到","布尔","定义","为了","之前","另外","编程","int32","自动","不同","接口","一下","每","机器人","数组","由于","一个","还是","int64","b"," ","完成","中","”","是","的","话题","x","分别","动作","32","一边","位","里","这个","两","传输","机制","通过","可以","64","编译","服务","。","每隔","bool","结构","到","我们","将","运动","当前","python","周期","使用","、","msg","布尔值","目标","转到第","最终","通信","整型","开始","在","action","对应","让","进度","用来","90",".","数值","20","srv","c++","做成","sum","小海龟","通信接口","就行","分成","看到","保证","和","二维","表示","等","无关","需要","度","只","状态","a","这些","三个","部分","求和","功能","海龟","还","请求","了","比如","文件","结果","ros","描述","此时","一帧","加法","y","什么","语言","数","“","节点","数据","坐标","1s","过程","转","会","设计","中间","学习","小海","反馈","，","包含","生成","10","还有","知道","两个","机器","一种"],"title":"语言无关","title_tokens":["语言","无关"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_4","text":"大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。","text_tokens":["路径","大家","？","在","给","可能","打开","定义","看看","好奇","了","可以","众多","文件","ros","。","接口","我们","几个","件夹","找到","涵盖","，","中","哪些","share","到底","标准","安装","呢","系统","的","文件夹"],"title":"标准接口","title_tokens":["标准","接口","标准接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_5","text":"了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。","text_tokens":["驱动","例程","服务端","三个","收到","通信","下","在","对象","定义","相机","就","请求","了","之前","概念","了解","第三","查询","可以","第一个","服务","第一","通信接口","接口","以及","。","发布","视觉","下来","从","角度","我们","如何","代码","接下","实现","讲解","课程","来","节点","提供","一个","第二个","封装","需要","编写","第三个","接下来","再","回顾","目标","位置","使用"," ","识别","发送","图像","，","研究","中","第二","时候","二个","进行","是","机器","有","的","话题","这样"],"title":"案例一：服务接口的定义与使用","title_tokens":["使用","一","案例","与","服务","定义","接口","：","的"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_6","text":"在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ...","text_tokens":["---","<","runtime","name","定义","：","#","(","int32","后","自动","不同","接口","}","generate","package",">"," ","完成","中","也","of","是","exec","的","服务端","x","这个","获取","中有","服务","编译","generators","。","bool","指令","cmakelists","我们","一次","txt","/","根据","上边","使用","、","interface","目标","通信","xml","在","true","让","添加",".","member","srv","编译器","find","learning","\"","{","interfaces","为","表示","required","需要","default","接口定义",")","配置","getobjectposition","build","例程","部分","功能","代码生成","还","包","就","了","...","rosidl","文件","的话","project","$","y","语言","代码","坐标","group","depend","get","过程","依赖","会","位置","选项","反馈","，","生成","_","packages","两个"],"title":"接口定义","title_tokens":["定义","接口","接口定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_7","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["使用","的","我们","代码","看","方法","来","中","下","在","重点","。","接口","再"],"title":"程序调用","title_tokens":["程序","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_8","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["'","position","应答","__","name","定义","#","ok","-","while","(","super","wait","sec","exception","接口","self","if","timeout","类","guyuehome","node","break","done","def"," ","n","bin","again","自定","进行","of","target","8","info","waiting","的","库","x","utf","call","r","等待","class","object","once","create","1.0","www","作者","from","logger","objectclient","父类","服务","failed","创建","send","python3","shutdown","/","future","python","client","识别","none","d","并","rclpy","interface","*","e","destroy","ros2","目标",":","true","init",".",",","srv","!","learning","not","\"","py","as","示例","%","销毁",")","关闭","async","service","request","coding","getobjectposition","usr","response","古月","@","spin","=","居","自定义","对象","请求","try","main","...","env","import","y","result","\\","节点","get","args","初始","com","位置","else","for","说明","available","，","_","except","初始化"],"title":"客户端接口调用","title_tokens":["客户","调用","接口","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_9","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["'","mask","得到","position","信息","<","__","回调","name","定义","噪声","勾勒","#","-","(","super","shape","frame","后","上限","接口","self","return","img","imagesubscriber","if","长度","提供","image","xy","类","command","objecty","guyuehome","node","一个","128","上角","50","def"," ","（","n","bin","与","自定","中","进行","target","cv2","8","出来","info","video","转化","对","互相","hierarchy","效果","的","话题","化成","订阅","收到","库","x","函数","utf","消息","图像处理","提示","int","等待","一些","class","二值化","object","务器","1","subscription","inrange","太小","左上","create","w","www","作者","from","bgr2hsv","logger","执行","父类","detect","服务","创建","转换","]","计算","从","将","python3","shutdown","/","data","所在","python","进入","5","识别","none","使用","用于","、","interface","rclpy","*","cvbridge","接口类","waitkey","d","并","msg","boundingrect","imshow","destroy","cv","ros2","目标","upper","像素",":","已","h","cnt","颜色","显示","red","raw","阈值","true","to","init","msgs","90","cvtcolor",".","范围","数值","检测",",","receiving","0","srv","者","findcontours","点画","bgr8","numpy","主","!","in","learning","bridge","+","\"","opencv","objectx","退出","callback","名","和","sub","np","150","py","hsv","为","2","as","处理","队列","continue","示例","%","销毁",")","关闭","service","去除","getobjectposition","coding","usr","chain","imgmsg","类型","request","response","color","古月","左上角","list","@","spin","255","=","circle","模型","server","居","输出","自定义","sensor","宽","对象","请求","approx","lower","中心","高","180","main","日志","入口","物体","ros","[","invalid","）","env","import","轮廓","retr","y","\\","contours","节点","坐标","面积","数据","苹果","array","get","及","循环","服务器","bgr","drawcontours","args","初始","com","接口类型","else","listener","红色","图像","说明","for","，","反馈","_","10","转化成","已经","下限","初始化"],"title":"服务端接口调用","title_tokens":["服务端","调用","服务","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_10","text":"话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。","text_tokens":["不管","通信","定义","继续","之前","案例","想","衍生","类似","服务","通信接口","接口","人","。","发布","视觉","换成","从","我们","没有","把","需要","有没有","位置","目标","周期","识别","，","也","是","中来","机器","的","话题"],"title":"案例二：话题接口的定义与使用","title_tokens":["使用","案例","的","与","定义","接口","：","二","话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_11","text":"现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub","text_tokens":["驱动","订阅","三个","分别","现在","消息","终端","功能","谁","出去","exe","topic","object","定义","相机","：","就","成","这个","run","第三","打印","第一个","启动","ros","learning","第一","此时","。","发布","视觉","希望","$","；","到","我们","将","image","sub","节点","数据","来","pub","一个","node","第二个","会","封装","需要","第三个","位置","usb"," ","使用","识别","以上","并","图像","interface","运行","，","中","第二","_","二个","是","cam","标准","ros2","目标","的","话题"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_12","text":"在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ...","text_tokens":["name","定义","：","#","(","int32","后","自动","不同","接口","}","generate","一个","package"," ","完成","中","进行","是","的","话题","x","消息","这个","服务","编译","generators","。","cmakelists","我们","txt","/","根据","使用","、","interface","msg","目标","通信","在","让",".","标值","objectposition","编译器","find","learning","\"","{","interfaces","表示","required","需要","default","接口定义",")","配置","坐标值","例程","功能","还","包","了","...","rosidl","描述","project","$","y","语言","代码","坐标","过程","位置","选项","内容","，","生成","_"],"title":"接口定义","title_tokens":["定义","接口","接口定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_13","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["使用","的","我们","代码","看","方法","来","中","下","在","重点","。","接口","再"],"title":"程序调用","title_tokens":["程序","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_14","text":"learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["'","mask","得到","position","信息","<","__","回调","name","定义","噪声","勾勒","#","-","(","super","shape","frame","后","上限","接口","self","img","imagesubscriber","if","长度","image","xy","类","objecty","guyuehome","node","一个","128","上角","50","def"," ","（","bin","与","自定","中","进行","cv2","8","出来","info","video","转化","互相","hierarchy","效果","的","话题","化成","订阅","库","x","函数","utf","消息","图像处理","提示","int","等待","一些","class","二值化","object","1","subscription","inrange","太小","左上","create","w","www","作者","from","bgr2hsv","logger","webcam","父类","detect","创建","转换","]","发布","计算","从","将","python3","shutdown","/","data","所在","python","进入","5","none","使用","用于","、","interface","rclpy","*","cvbridge","并","waitkey","msg","boundingrect","imshow","destroy","cv","ros2","目标","upper","像素",":","已","h","cnt","颜色","topic","显示","red","raw","阈值","to","init","msgs","90","cvtcolor",".","范围","数值","检测",",","receiving","0","者","findcontours","点画","objectposition","bgr8","numpy","主","!","in","learning","bridge","+","\"","opencv","objectx","退出","callback","名","和","sub","np","150","py","hsv","为","2","as","处理","队列","continue","示例","销毁",")","关闭","去除","coding","usr","chain","imgmsg","类型","publish","color","古月","左上角","list","@","spin","255","=","circle","模型","居","输出","自定义","sensor","publisher","宽","对象","approx","lower","中心","高","180","main","日志","入口","ros","发布者","[","）","env","import","轮廓","retr","y","contours","节点","坐标","面积","pub","苹果","array","get","及","循环","bgr","drawcontours","args","初始","com","位置","listener","红色","图像","说明","for","，","_","10","转化成","下限","初始化"],"title":"发布者接口调用","title_tokens":["接口","发布者","调用","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_15","text":"learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["'","position","信息","__","回调","字符","name","定义","#","字符串","-","(","super","后","接口","self","长度","类","guyuehome","node","一个","def"," ","（","bin","自定","进行","target","8","info","对","的","话题","订阅","收到","库","x","subscribernode","utf","消息","函数","提示","等待","class","object","subscription","std","create","www","作者","from","string","logger","执行","父类","创建","python3","shutdown","/","python","none","d","、","interface","rclpy","*","并","msg","destroy","ros2","目标",":","topic","init","msgs",".",",","者","objectposition","主","!","learning","\"","退出","callback","名","sub","py","处理","队列","示例","%","销毁",")","关闭","coding","usr","类型","古月","@","spin","=","居","输出","自定义","对象","main","日志","入口","env","import","y","\\","节点","数据","get","循环","args","初始","com","位置","listener","说明","，","_","10","初始化"],"title":"订阅者接口调用","title_tokens":["订阅","接口","者","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_16","text":"接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义","text_tokens":["<","功能","查看","某个","常用","列表","name","定义","#","：","详细","包中","接口","$","如下","show","package","命令","操作",">","接口定义"," ","interface","_","ros2","系统","的","list"],"title":"接口命令行操作","title_tokens":["接口","操作","命令","命令行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_17","text":"https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":[".","-","tutorials","single","org","https","ros","html","use","interfaces","about","concepts","docs","/","en","package","and"," ","interface","define","humble",":"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/","text":"动作 机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。 通信模型 举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。 客户端/服务器模型 动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。 一对多通信 和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。 同步通信 既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。 由服务和话题合成 大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。 案例一：小海龟的动作 我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback 案例二：机器人画圆 如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。 运行效果 启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。 接口定义 例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是 动作的目标 ，enable为true时，表示开始运动； 第二块是 动作的执行结果 ，finish为true，表示动作执行完成； 第三块是 动作的周期反馈 ，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ... 通信模型 通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。 服务端代码解析 learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], }, 客户端代码解析 learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], }, 动作命令行操作 动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["1.57","absolute","__","常用","机械","过","定义","execute","写","ok","之前","一","(","不同","如果","}","；","实现","隐藏","guyuehome","一个","这么","0.5","rotateabsolute","由","第二","8","range","服务端","库","送给","方法","相对","这","class","数据类型","可能","这个","合适","当中","www","机制","某一","假设","服务","。","每隔","]","发布","才能","time","根据","封装","有没有","python","二块","d","并","控制","虽然","针对","姿态","举个","控","哪里","最终","rotate","列表","让","一套","tutorials","圈","没错","find","https","就此结束","退出","interfaces","py","仿真器","表示","处理","行为","度","状态","画圆","目的","解析","背后","当","以下","list","三个","一块","模型","enable","还","达到","就","了","客户","main","试一试","rosidl","多少","类似","入口","二","env","$","实时","received","什么","就是","来","节点","过程","get","循环","通信模型","多少度","会","装","送餐","反馈","_","一点","这样","—","旋转","是否","theta","actionserver","同时","name","案例","type","wait","启动","自动","但是","圆周运动","负责","generate","机器人","类",">","完整"," ","抓取","info","较长","段时间","订阅","收到","异步","分别","turtle1","都","结束","直到","真器","只能","通过","可以","from","logger","父类","generators","创建","应用层","从","指令","我们","运动","链接","python3","一次","很","data","命令","future","上边","接下来","识别","none","entry","接口类","参考","msg","ros2","动图","teleop","现在","客户端","？","读取","开始","true","第三块","原理","命令行","直接",",","20","先","介绍","编译器","通信接口","模拟","not","用到","上","下来","callback","docs","但","accepted","操作","不会","publishing","示例","接口定义",")","是不是","publish","特性","例子","分拣","不仅仅","系统","动","时","部分","=","circle","setup","第三","比如","满足","org","清楚","ros","发布者","project","import","再用","转个","肯定","接下","转","actions","送货","com","位置","接口类型","只有","基于","选项","小海","思路","包含","10","还会","初始化","两个","一起","一种","30","console","回调","：","#","-","另外","含义","super","后","一下","html","更为","每","if","便于","场景","角度","随时","时间","理解","没有","node","done","编写","一点一点","遥控","再","发送","自定","中","进行","眼前","第一块","是","到底","指定","函数","动作","终端","等待","一边","务器","拒绝执行","概念","加入","就此","send","接收","shutdown","/","把","第二块","interface","*","理","程序","所处","多","干什么","仅仅",":","这种","发现","像","在","进度","init",".","相比","0","者","moving","之后","主","learning","add","turtlesim","看到","和","应用","名","i","一段时间","turtle","为","圆周","竟然","required","需要","分析","%","销毁","关闭","不仅","管理","配置","coding","运行","usr","类型","response","某","整个","古月","标准","@","例程","spin","server","自定义","同步","movecircle","仿真","请求","被","其","处理函数","run","...","日志","想","文件","名字","）","按照","不是","understanding","根本","如下","服务器","初始","说明","，","发出","机器","'","---","信息","<","复杂","大家","某个","查看","具体","毕竟","简单","得","编程","int32","接口","self","return","希望","点","看","调用","服务器端","成功","package","而是","def","完成","（","state","bin","也","对","效果","呢","的","话题","scripts","多个","utf","消息","一段","取消","应带","既然","作者","获取","常常","执行","编译","第一","一样","进度条","bool","能","到","如何","cmakelists","流程","当前","加深","txt","使","en","client","周期","使用","、","rclpy","智能","destroy","humble","告诉","目标","movecircleactionserver","通信","key","那","action","又","拒绝","需求","movecircleactionclient","请","好","handle","!","小海龟","in","\"","{","sleep","起来","等","合成","三块","default","仔细","方式","不","臂","goal","async","一对","发送给","rejected","feedback","实际","有","这些","导航","points","转圈","居","功能","输出","下","海龟","对象","打开","包","actionclient","其实","结果","[","设置","语言","result","代码","坐标","数据","1s","键盘","args","succeed","模块","底层","顺利","move","for","360","生成","知道","秘密","--","finish"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_1","text":"机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。","text_tokens":["通信","这种","—","复杂","功能","某个","那","动作","具体","在","简单","需求","就","被","这个","概念","另外","好","机制","含义","可以","某一","满足","这些","常常","ros","。","名字","用到","上","从","机器人","我们","运动","场景","应用","实现","就是","便于","流程","理解","一种","一个","键盘","等","这么","很","机器","需要","送货","会","遥控","完整","目标","行为","识别"," ","不仅","送餐","管理","并","、","智能","，","中","也","进行","是","目的","仅仅","对","分拣","不仅仅","系统","的"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_2","text":"举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。","text_tokens":["信息","30","旋转","得","ok","后","一下","如果","更为","机器人","随时","时间","没有","一个","一点一点","再"," ","发送","完成","眼前","是","到底","段时间","的","动作","一段","取消","这","结束","直到","合适","当中","机制","可以","假设","执行","每隔","。","进度条","才能","指令","到","我们","运动","当前","命令","把","有没有","使用","并","、","举个","告诉","控","哪里","现在","通信","？","像","开始","在","让","进度","20","圈","之后","一段时间","表示","需要","不","度","行为","例子","转圈","还","就","了","比如","想","多少","转个","不是","肯定","根本","1s","过程","转","多少度","装","360","反馈","，","发出","10","一点","知道","机器","这样"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_3","text":"动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。","text_tokens":["收到","信息","通信","客户端","模型","动作","一边","开始","机械","又","让","务器","同时","达到","可能","结束","就","客户","这个","想","执行","之后","类似","后","服务","就此","。","如果","就此结束","实时","什么","机器人","和","运动","坐标","服务器端","起来","当前","过程","一个","服务器","再","目标","周期","使用","发送"," ","臂","状态","控制","反馈","，","中","也","导航","姿态","是","抓取","所处","当","干什么","整个","机器","的","动"],"title":"客户端/服务器模型","title_tokens":["客户","客户端","模型","/","服务器","服务","务器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_4","text":"和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。","text_tokens":["多个","通信","客户端","动作","大家","下","都","毕竟","务器","客户","只能","先","可以","执行","服务","。","但是","一样","才能","机器人","和","运动","服务器端","一个","命令","服务器","发送","只有","完成","，","中","机器","有","的"],"title":"一对多通信","title_tokens":["一对","多","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_5","text":"既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。","text_tokens":["通信","动作","那","同步","过","action","定义","既然",".","之前","机制","介绍","文件","通信接口","接口","。","我们","数据","过程","一种","使用","反馈","，","中","也","进行","是","有","的"],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_6","text":"大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。","text_tokens":["动图","收到","订阅","三个","通信","客户端","发现","动作","大家","下","应带","务器","请求","其","客户","其实","机制","者","没错","发布者","服务","实现","。","发布","应用层","不是","运动","应用","看","隐藏","调用","服务器端","就是","和","来","过程","表示","一个","一种","竟然","服务器","命令","会","上边","再","仔细","模块","目标"," ","发送","使用","周期","底层","基于","反馈","，","是不是","也","是","还会","秘密","两个","当","有","的","话题","时"],"title":"由服务和话题合成","title_tokens":["和","由","合成","服务","话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_7","text":"我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback","text_tokens":["1.57","指定","teleop","rotate","turtle1","absolute","动作","key","海龟","action","theta","让","仿真","：","真器","概念","案例","一","run","-","可以","启动","小海龟","。","send","\"","按照","{","再用","}","$","下来","到","turtlesim","我们","运动","接下","仿真器","turtle","加深","理解","node","/","命令","接下来"," ","使用","goal","的","rotateabsolute","小海","控制","，","姿态","_","某","feedback","info","--","对","ros2","以下",":"],"title":"案例一：小海龟的动作","title_tokens":["一","案例","小海","动作","海龟","小海龟","：","的"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_8","text":"如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。","text_tokens":["通信","客户端","方法","动作","？","一起","在","让","务器","一套","就","请","客户","直接","好","通过","编程","试一试","假设","圈","服务","。","接口","希望","转个","下来","如何","我们","和","代码","接下","实现","来","机器人","服务器端","过程","但","一个","服务器","不会","而是","封装","机器","接下来"," ","使用","基于","并","，","中","虽然","针对","特性","是","实际","呢","有","的","话题"],"title":"案例二：机器人画圆","title_tokens":["案例","机器人","画圆","机器","：","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_9","text":"启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。","text_tokens":["服务端","最终","例程","分别","30","信息","客户端","server","终端","动作","下","开始","action","务器","结束","原理","：","就","客户","这个","run","可以","之后","启动","服务","learning","一下","模拟","ros2","。","$","每","下来","机器人","我们","和","看到","运动","接下","实现","服务器端","一次","命令","服务器","机器","client","接下来","示例","分析"," ","发送","度","完成","move","并","反馈","，","运行","中","_","背后","两个","目标","的"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_10","text":"例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是 动作的目标 ，enable为true时，表示开始运动； 第二块是 动作的执行结果 ，finish为true，表示动作执行完成； 第三块是 动作的周期反馈 ，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ...","text_tokens":["---","旋转","是否","name","定义","：","#","(","int32","后","自动","不同","接口","}","generate","；","机器人","角度","package"," ","完成","state","自定","中","进行","第二","第一块","是","的","动作","通过","执行","编译","第一","generators","。","bool","指令","到","我们","运动","cmakelists","当前","txt","/","根据","第二块","二块","周期","使用","并","interface","目标","开始","action","在","true","第三块","让",".","编译器","find","learning","\"","{","interfaces","为","表示","required","三块","需要","default","接口定义",")","配置","标准","时","例程","三个","部分","一块","enable","功能","自定义","movecircle","还","包","...","第三","rosidl","结果","ros","project","$","不是","语言","代码","过程","位置","选项","反馈","，","包含","生成","_","成功","机器","finish"],"title":"接口定义","title_tokens":["定义","接口","接口定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_11","text":"通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。","text_tokens":["例程","送给","信息","通信","客户端","模型","动作","相对","开始","务器","结束","写","客户","相比","之前","一","后","清楚","服务","。","一下","下来","机器人","我们","运动","代码","接下","就是","和","起来","一个","通信模型","服务器","接下来","分析","目标","周期"," ","发送","并","控制","反馈","发送给","，","思路","理","运行","程序","较长","机器","的","话题","这样"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_12","text":"learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["'","信息","30","console","__","回调","actionserver","name","定义","#","：","execute","-","(","super","后","接口","圆周运动","负责","self","return","}","角度","点","类","guyuehome","node","一个","编写","def"," ","0.5","（","完成","bin","state","自定","进行","8","info","range","的","scripts","服务端","库","收到","函数","utf","消息","动作","等待","class","务器","加入","www","作者","from","logger","执行","父类","服务","编译","创建","]","发布","从","到","运动","time","python3","当前","shutdown","/","python","周期","none","entry","d","、","rclpy","interface","*","接口类","并","程序","msg","destroy","ros2","目标",":","movecircleactionserver","最终","action","true","让","init",".",",","0","moving","之后","handle","主","!","in","learning","\"","{","退出","callback","名","i","sleep","py","圆周","表示","处理","publishing","需要","示例","%","销毁",")","goal","度","关闭","配置","coding","usr","publish","类型","feedback","古月","系统","@","spin","points","=","circle","server","居","功能","setup","自定义","movecircle","对象","打开","包","处理函数","main","...","文件","结果","入口","[","）","env","import","设置","result","代码","节点","如下","get","循环","服务器","args","初始","succeed","com","接口类型","选项","move","for","说明","反馈","360","，","_","知道","成功","初始化","finish"],"title":"服务端代码解析","title_tokens":["代码","服务端","服务","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_13","text":"learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["'","console","__","回调","name","定义","#","：","-","(","super","wait","启动","后","接口","如果","圆周运动","self","return","}","希望","if","机器人","点","类","服务器端","guyuehome","node","一个","done","编写","def"," ","发送","（","完成","bin","state","自定","进行","8","info","的","scripts","收到","库","异步","函数","utf","消息","动作","等待","class","务器","拒绝执行","加入","www","作者","获取","from","logger","执行","父类","服务","编译","创建","]","send","接收","能","运动","python3","使","shutdown","/","future","python","client","周期","none","entry","d","、","接口类","rclpy","*","interface","并","程序","msg","destroy","ros2","目标",":","最终","客户端","读取","开始","action","拒绝","true","让","movecircleactionclient","init",".",",","之后","handle","主","!","learning","not","\"","{","add","退出","callback","名","py","圆周","为","accepted","处理","需要","示例","方式","%",")","goal","async","销毁","关闭","配置","coding","usr","类型","response","rejected","feedback","古月","系统","时","@","spin","points","=","circle","居","server","enable","输出","自定义","功能","setup","movecircle","对象","打开","包","actionclient","请求","被","客户","main","日志","文件","结果","入口","[","）","env","import","received","设置","result","代码","节点","数据","如下","get","循环","服务器","args","初始","com","接口类型","顺利","选项","move","for","说明","反馈","，","_","知道","初始化","机器","finish"],"title":"客户端代码解析","title_tokens":["代码","客户","解析","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_14","text":"动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求","text_tokens":["<","动作","查看","常用","action","数据类型","列表","name","#","：","请求","type","服务","send","$","数据","如下","data","命令","操作",">"," ","goal","发送","类型","_","info","ros2","的","list"],"title":"动作命令行操作","title_tokens":["操作","动作","命令","命令行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["-","tutorials","understanding","docs","org","/","https","ros","en","actions","html","humble","ros2",":","."],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/","text":"参数 话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。 通信模型 比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。 全局字典 在ROS系统中，参数是以 全局字典 的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。 可动态监控 在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。 案例一：小海龟例程中的参数 在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 启动两个终端，分别运行小海龟仿真器和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看参数列表 当前系统中有哪些参数呢？我们可以启动一个终端，并使用如下命令查询： $ ros2 param list 参数查询与修改 如果想要查询或者修改某个参数的值，可以在param命令后边跟get或者set子命令： $ ros2 param describe turtlesim background_b # 查看某个参数的描述信息 $ ros2 param get turtlesim background_b # 查询某个参数的值 $ ros2 param set turtlesim background_b 10 # 修改某个参数的值 参数文件保存与加载 一个一个查询/修改参数太麻烦了，不如试一试参数文件，ROS中的参数文件使用yaml格式，可以在param命令后边跟dump子命令，将某个节点的参数都保存到文件中，或者通过load命令一次性加载某个参数文件中的所有内容： $ ros2 param dump turtlesim >> turtlesim.yaml # 将某个节点的参数保存到参数文件中 $ ros2 param load turtlesim turtlesim.yaml # 一次性加载某一个文件中的所有参数 案例二：参数编程 接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。 运行效果 启动一个终端，先运行第一句指令，启动param_declare节点，终端中可以看到循环打印的日志信息，其中的“mbot”就是我们设置的一个参数值，参数名称是“robot_name”，通过命令行修改这个参数，看下终端中会发生什么？ $ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle 代码解析 我们来看下在代码中，如何声明、创建、修改一个参数的值。 learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], }, 案例三：机器视觉应用 参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。 运行效果 启动三个终端，分别运行： 相机驱动节点 视觉识别节点 修改红色阈值 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180 在启动的视觉识别节点中，我们故意将视觉识别中红色阈值的上限设置为0，如果不修改参数，将无法实现目标识别。 为了便于调整阈值，我们在节点中将红色阈值的限位修改为了ROS参数，通过命令行修改该参数的值，就可以实现视觉识别啦。 代码解析 我们来看下在视觉识别的代码中，是如何通过参数来设置阈值的。 learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["__","describe","常用","加载","写","一","(","打印","易用性","shape","frame","不同","如果","}","不少","长度","就要","实现","guyuehome","一个","128","由","与","background","8","hierarchy","已经","库","mbot","送给","nodeb","方法","int","一些","这","class","二值化","可能","1","美颜","这个","w","www","中有","机制","hello","服务","。","哪个","]","转换","访问","几个","中将","python","5","两句","d","并","控制","辨率","parameters","waitkey","boundingrect","h","一句","cnt","全局变量","限位","raw","一次性","列表","号","让","msgs","某些","啦","findcontours","tutorials","变量","https","退出","光线","py","仿真器","load","表示","处理","队列","定时器","环境","度","叫","chain","高级","color","监控","传输方式","解析","左上角","list","三个","跟","模型","还","全局","就","了","高","main","参数","试一试","类似","多少","入口","熟悉","二","env","$","什么","contours","参数设置","节点","来","就是","过程","从而","get","循环","通信模型","bgr","drawcontours","会","太","usb","图像","内容","_","一两句","后边","一两","—","是否","name","输入","噪声","为了","案例","type","默认","键值","默认值","启动","立刻","变化","img","提炼","机器人","提供","该","image","类","其他",">","50"," ","存在","info","本","互相","等等","robot","订阅","提示","分别","最新","都","exe","图像识别","subscription","太小","真器","很大","传输","通过","可以","from","logger","所有","父类","detect","创建","指令","从","我们","将","核心","链接","python3","大大提高","一次","data","命令","所在","接下来","识别","none","实现目标","entry","用于","参考","故意","msg","体验","ros2","upper","像素","已","分辨率","teleop","大大","颜色","？","读取","开始","to","命令行",",","先","点画","介绍","c++","三","用到","下来","callback","优化","np","三种","docs","提高","丰富","示例",")","特性","系统","格式","部分","=","circle","定时","setup","可","宽","set","approx","考虑","易用","比如","查询","区域","作用","org","清楚","ros","敏感","import","轮廓","“","接下","com","declare","选项","红色","小海","时候","问题","10","cam","下限","初始化","两个","一种","比较","驱动","mask","得到","console","回调","曝光","键和值","勾勒","：","#","-","含义","super","后","一下","上限","html","if","便于","xy","理解","node","编写","再","发送","中","进行","非常","哪些","”","是","cv2","出来","video","指定","x","函数","integer","图像处理","动作","终端","等待","组成","继续","inrange","左上","加入","了解","bgr2hsv","单位","秒","shutdown","真实","/","把","进入","cvbridge","*","程序","imshow","cv","s",":","像","其中","red","在","阈值","相机","init","cvtcolor","90","范围",".","数值","共享","receiving","0","者","声明","numpy","主","麻烦","learning","bridge","opencv","连接","配置文件","turtlesim","看到","和","名","2","应用","sub","为","turtle","关注","端口","需要","timer","continue","%","销毁","关闭","配置","动态","叫做","coding","去除","运行","usr","类型","某","整个","古月","@","例程","spin","影响","value","或者","sensor","仿真","改变","中心","180","run","那个","日志","文件","编码","物体","）","retr","参数值","不是","understanding","苹果","如下","parameter","array","及","初始","来看","说明","，","机器","'","信息","all","<","大家","查看","某个","比较简单","很多","形态","yaml","修改","简单","编程","说干就干","接口","分辨","self","办法","imagesubscriber","点","看","param","上角","b","def","子","（","完成","bin","也","转化","对","效果","呢","化成","的","话题","scripts","多个","utf","消息","不如","滑动","object","以","create","获取","作者","string","执行","么","编译","第一","一样","计算","视觉","即可","到","如何","当前","en","无法","周期","使用","、","rclpy","值","destroy","humble","目标","名称","通信","节","key","显示","保存","检测","bgr8","调整","!","小海龟","想要","in","+","\"","发生","{","重新","150","起来","hsv","字典","as","等","合成","parameternode","方式","不","发送给","imgmsg","dump","挺","有","这些","输入框","points","255","居","功能","输出","下","每次","海龟","对象","打开","包","new","成","lower","然后","条","描述","[","第一句","设置","y","代码","数据","坐标","面积","键盘","args","nodea","listener","for","转化成","知道"],"title":"参数","title_tokens":["参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_1","text":"话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。","text_tokens":["多个","通信","节","动作","大家","—","常用","全局变量","这","是否","在","全局","某些","共享","了解","传输","机制","介绍","参数","c++","编程","变量","可以","类似","清楚","ros","服务","。","便于","我们","机器人","数据","来","三种","节点","一种","字典","再","方式","不"," ","的","、","，","中","运行","程序","是","传输方式","知道","本","机器","系统","已经","话题"],"title":"参数","title_tokens":["参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_2","text":"比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。","text_tokens":["驱动","曝光","是否","很多","输入","后","不同","分辨"," ","中","进行","也","是","效果","的","等等","分别","nodeb","都","图像识别","一些","这","滑动","美颜","很大","通过","可以","执行","。","哪个","一样","视觉","到","我们","核心","识别","使用","辨率","程序","分辨率","像","在","阈值","相机","连接","配置文件","和","关注","端口","需要","度","配置","整个","格式","这些","有","输入框","部分","影响","功能","或者","就","改变","考虑","那个","比如","参数","文件","区域","编码","多少","作用","条","设置","什么","参数设置","节点","就是","面积","过程","会","usb","nodea","图像","，","时候","问题","机器"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_3","text":"在ROS系统中，参数是以 全局字典 的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。","text_tokens":["跟","？","像","或者","在","形态","号","组成","键和值","全局","就","以","了","这个","数值","参数","可以","编程","键值","然后","ros","。","一样","即可","参数值","什么","我们","和","名","访问","就是","为","理解","字典","真实","一个","等","合成"," ","使用","叫","存在","叫做","由","有","，","中","也","时候","是","后边","系统","的","名称"],"title":"全局字典","title_tokens":["字典","全局"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_4","text":"在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。","text_tokens":["最新","大家","都","这","在","修改","可能","了","数值","共享","获取","可以","参数","比如","编程","立刻","。","如果","办法","用到","访问","节点","从而","一个","其他","丰富","会"," ","，","中","非常","特性","进行","也","某","高级","知道","对","ros2","有","的"],"title":"可动态监控","title_tokens":["动态","可","监控"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_5","text":"在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 启动两个终端，分别运行小海龟仿真器和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["例程","teleop","分别","方法","终端","key","下","海龟","在","仿真","：","命令行","了","真器","这个","一","run","含义","通过","参数","启动","小海龟","熟悉","。","ros2","不少","$","turtlesim","提供","我们","和","节点","起来","仿真器","turtle","键盘","node","命令","使用"," ","小海","控制","，","中","也","运行","_","两个","的"],"title":"案例一：小海龟例程中的参数","title_tokens":["例程","一","案例","小海","参数","中","海龟","小海龟","：","的"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_6","text":"当前系统中有哪些参数呢？我们可以启动一个终端，并使用如下命令查询： $ ros2 param list","text_tokens":["终端","？","：","中有","参数","可以","查询","启动","$","我们","param","当前","如下","一个","命令","使用"," ","并","，","哪些","ros2","呢","系统","list"],"title":"查看参数列表","title_tokens":["参数","查看","列表"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_7","text":"如果想要查询或者修改某个参数的值，可以在param命令后边跟get或者set子命令： $ ros2 param describe turtlesim background_b # 查看某个参数的描述信息 $ ros2 param get turtlesim background_b # 查询某个参数的值 $ ros2 param set turtlesim background_b 10 # 修改某个参数的值","text_tokens":["信息","跟","describe","查看","某个","或者","在","set","修改","：","#","查询","参数","可以","想要","描述","如果","$","turtlesim","param","get","命令","b","子"," ","，","_","background","10","值","后边","ros2","的"],"title":"参数查询与修改","title_tokens":["参数","与","查询","修改"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_8","text":"一个一个查询/修改参数太麻烦了，不如试一试参数文件，ROS中的参数文件使用yaml格式，可以在param命令后边跟dump子命令，将某个节点的参数都保存到文件中，或者通过load命令一次性加载某个参数文件中的所有内容： $ ros2 param dump turtlesim >> turtlesim.yaml # 将某个节点的参数保存到参数文件中 $ ros2 param load turtlesim turtlesim.yaml # 一次性加载某一个文件中的所有参数","text_tokens":["跟","不如","某个","都","或者","在","一次性","yaml","修改","加载","：","#",".","了","保存","通过","查询","参数","试一试","可以","文件","所有","麻烦","ros","$","到","turtlesim","将","节点","param","load","一次","一个","/","命令",">","太","子","使用"," ","内容","，","中","dump","某","后边","ros2","格式","的"],"title":"参数文件保存与加载","title_tokens":["保存","参数","与","文件","加载"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_9","text":"接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。","text_tokens":["函数","一两","方法","比较简单","都","读取","开始","在","这","简单","就","写","了","先","参数","可以","一下","。","设置","下来","我们","和","就要","接下","实现","来","几个","接下来","使用","两句","，","中","程序","体验","一两句","的","比较"],"title":"案例二：参数编程","title_tokens":["案例","参数","编程","：","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_10","text":"启动一个终端，先运行第一句指令，启动param_declare节点，终端中可以看到循环打印的日志信息，其中的“mbot”就是我们设置的一个参数值，参数名称是“robot_name”，通过命令行修改这个参数，看下终端中会发生什么？ $ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle","text_tokens":["robot","一句","mbot","信息","终端","？","下","其中","set","修改","name","命令行","这个","数值","run","先","通过","可以","日志","打印","参数","启动","learning","第一","发生","第一句","$","设置","参数值","指令","什么","看到","“","我们","看","节点","就是","param","turtle","parameter","循环","一个","命令","会","declare"," ","，","运行","中","_","”","是","ros2","的","名称"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_11","text":"我们来看下在代码中，如何声明、创建、修改一个参数的值。 learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], },","text_tokens":["'","信息","all","console","__","回调","修改","name","#","：","-","(","type","默认","super","打印","默认值","后","接口","self","}","点","类","param","guyuehome","一个","node","编写","def"," ","发送","（","完成","bin","中","进行","8","info","指定","的","scripts","robot","库","mbot","函数","utf","送给","等待","class","create","加入","www","作者","hello","from","string","单位","logger","执行","父类","编译","。","创建","]","秒","从","如何","我们","到","将","python3","shutdown","/","python","周期","none","entry","、","rclpy","并","*","parameters","程序","值","destroy","ros2","s",":","读取","在","列表","让","init",".","数值",",","声明","主","!","learning","\"","{","退出","callback","2","重新","py","为","需要","parameternode","timer","定时器","示例","%","销毁",")","关闭","配置","coding","发送给","usr","古月","系统","@","spin","points","=","value","居","定时","输出","下","功能","setup","set","对象","打开","包","new","main","参数","日志","文件","入口","[","）","env","import","设置","参数值","代码","节点","parameter","get","循环","如下","args","初始","com","来看","declare","选项","说明","，","_","知道","初始化"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_12","text":"参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。","text_tokens":["大大","不如","大家","？","下","每次","在","阈值","修改","还","继续","就","成","了","先","易用","参数","可以","易用性","麻烦","说干就干","物体","么","不同","变化","敏感","。","视觉","设置","不是","光线","如何","机器人","我们","应用","代码","优化","提炼","看","大大提高","过程","提高","把","机器","会","再","示例","环境","来看","使用"," ","识别","的","动态","，","中","也","运行","程序","是","挺","对","效果","呢","已经","比较"],"title":"案例三：机器视觉应用","title_tokens":["案例","应用","三","机器","：","视觉"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_13","text":"启动三个终端，分别运行： 相机驱动节点 视觉识别节点 修改红色阈值 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180 在启动的视觉识别节点中，我们故意将视觉识别中红色阈值的上限设置为0，如果不修改参数，将无法实现目标识别。 为了便于调整阈值，我们在节点中将红色阈值的限位修改为了ROS参数，通过命令行修改该参数的值，就可以实现视觉识别啦。","text_tokens":["驱动","h","三个","分别","终端","exe","限位","red","在","set","阈值","修改","object","相机","：","为了","命令行","就","180","run","啦","0","通过","参数","调整","可以","启动","detect","learning","ros","上限","如果","。","视觉","upper","$","设置","便于","我们","将","该","节点","实现","param","为","parameter","中将","node","命令","无法","usb","不"," ","识别","实现目标","红色","，","运行","中","_","cam","故意","值","ros2","目标","的"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_14","text":"我们来看下在视觉识别的代码中，是如何通过参数来设置阈值的。 learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], },","text_tokens":["'","mask","得到","信息","<","__","回调","console","name","噪声","勾勒","#","：","-","(","super","打印","shape","frame","后","上限","接口","self","}","img","imagesubscriber","if","长度","点","image","xy","类","param","guyuehome","node","一个","128","上角","50","编写","def"," ","（","完成","bin","与","中","进行","是","8","cv2","info","出来","video","转化","互相","hierarchy","效果","的","话题","化成","订阅","scripts","库","x","函数","utf","消息","图像处理","integer","int","提示","等待","一些","class","二值化","object","1","subscription","inrange","太小","左上","create","w","www","作者","加入","通过","from","logger","bgr2hsv","父类","detect","编译","。","创建","转换","]","计算","视觉","到","如何","我们","从","将","python3","shutdown","/","data","所在","python","进入","5","识别","none","使用","entry","用于","、","rclpy","cvbridge","*","d","并","waitkey","程序","msg","boundingrect","imshow","destroy","cv","ros2","目标","upper","像素",":","已","h","cnt","颜色","显示","读取","red","在","raw","阈值","让","to","init","msgs","90","cvtcolor",".","范围","数值","检测",",","receiving","0","者","findcontours","点画","bgr8","numpy","主","!","in","learning","bridge","+","\"","{","opencv","退出","callback","名","和","sub","np","150","py","hsv","为","2","表示","as","处理","队列","需要","continue","示例","%","销毁",")","关闭","配置","去除","coding","usr","chain","imgmsg","类型","color","古月","左上角","系统","list","@","spin","255","points","=","circle","value","模型","居","功能","输出","下","setup","sensor","宽","对象","打开","包","approx","lower","中心","高","180","main","参数","日志","文件","入口","ros","[","）","env","import","轮廓","retr","设置","参数值","y","contours","代码","节点","来","面积","坐标","苹果","parameter","array","get","及","循环","bgr","drawcontours","args","如下","初始","com","来看","declare","listener","选项","红色","图像","说明","for","，","_","10","转化成","知道","下限","初始化"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["-","tutorials","parameters","understanding","docs","org","/","https","ros","en","html","humble","ros2",":","."],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/","text":"分布式通信 智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。 分布式通信 什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。 分布式网络搭建 除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。 树莓派配置 在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。 装系统 我们先要给树莓派装系统，这里我们选择的是 Ubuntu Mate 针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/ 安装ROS2 在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。 编译代码 将我们课程的代码也下载到树莓派中，进行编译。 远程桌面 如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728 分布式数据传输 树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。 分布式网络分组 没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。 案例一：小海龟分布式控制 分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动： $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端 案例二：话题分布式通信 我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串： $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端 案例三：服务分布式通信 话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能： $ ros2 run learning_service service_adder_server # PC端 $ ros2 run learning_service service_adder_client 2 3 # 树莓派端 案例四：机器视觉分布式应用 以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体： $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 没有任何问题，视觉识别的效果如下。 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。 参考链接 https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["这里","过","频繁","分布式应用","字符串","之前","远程","一","端","端的","感觉","不同","如果","服务器程序","传感器","树莓","框架","实现","一个","所","还是","这么","以上","分布式系统","由","不在话下","系列","已经","方法","一些","这","可能","小组","桌面","岂","里","没","中有","机制","hello","采用","qq","webcam","world","服务","几乎","。","感器","发布","才能","烧写","访问","concepts","一致","发给","并","控制","任务","针对","据传","一句","两者","整体","啦","https","遇到","domain","py","仿真器","典型","处理","环境","分布式","叫","款","笔记","service","打通","原本","监控","位于","之一","给","还","就","了","客户","感受","类似","减轻","二","$","实时","什么","轻松","about","就是","节点","来","鼠标","会","csdn","装","usb","确保","学习","图像","_","不在","任何","流畅","这样","派里","—","像头","是否","真有","互通","案例","启动","适合","变化","机器人","提供","摄像",">","远程桌面"," ","demo","任务分配","安装","压力","模式","订阅","都","exe","52785580","一系","较","友好","sd","做","真器","传输","通过","可以","笔记本","链接","我们","将","运动","不够","之间","命令","pc","似乎","上边","接下来","识别","同一","参考","电机","details","布式","ros2","开发","net","teleop","客户端","？","看上去","命令行","直接","分布","先","三","模拟","attention","看上","用到","上","下来","课程","docs","反过来","操作","主要","资源","方便","系统","事情","神奇","放置","用","虚拟机","=","过来","如","比如","org","ros","发布者","派","加法","接下","pub","设计","放在","先要","红色","小海","article","cpp","问题","cam","两个","比较","驱动","带领","字符","同一个","：","#","-","另外","搭建","后","talker","一下","顺利实现","html","每","没有","node","编写","再","中","非常","放","进行","是","派装","情况","动作","步骤","电脑","数据传输","组成","务器","继续","download","加入","ubuntu","如此","/","采集","算机","网络","基本","体积","程序","镜像","多",":","这种","计算机","像","摄像头","在","反过","选择",".","3","者","之后","局域网络","learning","繁多","连接","分组","turtlesim","安排","和","应用","我","sub","2","为","turtle","变得","需要","个","带来","笔记本电脑","nodes","此外","相互","只","配置","传感","运行","建立","一切","出现","例程","互联","server","或者","你","blog","仿真","经常","run","想","物体","不过","卡顿","不是","如下","小型","服务器","上去","则","分配","your","，","试试","机器","信息","<","经典","复杂","大家","处于","具体","很多","毕竟","修改","派端","性能","网上","bashrc","希望","消耗","而是","魅力","完成","拆解","桥接","测试","也","于是","效果","呢","的","完全","话题","多个","adder","客户端程序","局域","mate","四","基本一致","他们","并且","编译","一样","计算","视觉","即可","结构","到","流程","依然","en","无法","client","使用","、","资料","智能","下载","全都","humble","讲","能力","一系列","通信","除了","key","显示","topic","只要","请","好","作为","计算能力","小海龟","支持","发生","显示器","有点","起来","更强","等","helloworld","不","虚拟","122599728","挺","实际","有","这些","控制器","功能","求和","下","export","海龟","讲过","之外","局域网","然后","的话","简而言之","代码","平台","数据","键盘","卡中","各种","id","listener","顺利","小","而言","成功"],"title":"分布式通信","title_tokens":["分布式","布式","分布","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_1","text":"智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。","text_tokens":["压力","出现","情况","多个","功能","计算机","？","这","经常","岂","里","分布","可以","这些","计算能力","减轻","卡顿","如果","遇到","繁多","。","计算","不是","上","到","机器人","将","平台","就是","实现","不够","一个","等","处理","机器","会","算机","放在","分配"," ","分布式","分布式系统","拆解","、","智能","，","任务","中","运行","任务分配","多","全都","布式","能力","系统","的"],"title":"分布式通信","title_tokens":["分布式","布式","分布","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_2","text":"什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。","text_tokens":["驱动","派里","信息","带领","复杂","大家","过","毕竟","之前","远程","另外","一","性能","适合","不同","变化","传感器","树莓","每","机器人","框架","实现","消耗","一个"," ","魅力","分布式系统","由","中","也","放","非常","是","于是","任何","的","已经","完全","压力","都","这","电脑","可能","组成","较","做","传输","可以","采用","并且","。","感器","计算","视觉","结构","笔记本","到","我们","将","运动","之间","上边","接下来","算机","控制","电机","任务","体积","多","布式","讲","开发","通信","这种","？","计算机","看上去","在","好","分布","作为","看上","上","下来","和","应用","有点","起来","更强","为","典型","等","处理","需要","环境","分布式","不","叫","笔记本电脑","款","笔记","此外","相互","只","传感","运行","配置","原本","监控","挺","位于","资源","主要","方便","有","这些","系统","控制器","之一","功能","下","还","就","了","比如","感受","ros","减轻","不过","派","什么","平台","节点","就是","数据","接下","上去","各种","设计","分配","放在","小","，","两个","机器","比较"],"title":"分布式通信","title_tokens":["分布式","布式","分布","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_3","text":"除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。","text_tokens":["放置","控制器","除了","在","电脑","之外","选择","了","另外","。","模拟","派","计算","笔记本","树莓","上","机器人","我们","我","平台","一个","使用","笔记本电脑","笔记","控制","，","机器","的"],"title":"分布式网络搭建","title_tokens":["分布式","分布","网络","搭建","布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_4","text":"在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。","text_tokens":["开发","大家","都","在","很多","之前","好","先","可以","网上","。","派","树莓","我们","需要","环境","配置","参考","资料","，","也","有","的"],"title":"树莓派配置","title_tokens":["派","树莓","配置"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_5","text":"我们先要给树莓派装系统，这里我们选择的是 Ubuntu Mate 针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/","text_tokens":["这里","给","mate","选择","就","：",".","sd","了","-","download","可以","之后","org","启动","https","。","派","树莓","到","链接","我们","烧写","ubuntu","/","卡中"," ","先要","，","针对","是","镜像","下载","派装","系统","的",":"],"title":"装系统","title_tokens":["系统","装"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#ros2","text":"在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。","text_tokens":[" ","好","和","端","ubuntu","，","中","流程","ros2","在","一样","电脑","。","安装","mate","系统","的"],"title":"安装ROS2","title_tokens":["ros2","安装"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_6","text":"将我们课程的代码也下载到树莓派中，进行编译。","text_tokens":["树莓","到","课程","我们","代码","将","，","中","也","进行","下载","编译","。","派","的"],"title":"编译代码","title_tokens":["代码","编译"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_7","text":"如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728","text_tokens":["大家","步骤","显示","整体","在","52785580","电脑","blog","就","：","桌面",".","了","基本一致","远程","直接","好","通过","可以","端","qq","的话","https","。","如果","派","显示器","树莓","上","连接","链接","访问","系统","和","鼠标","流程","如下","键盘","/","操作","csdn","一致","不","使用","远程桌面"," ","以上","配置","网络","参考","article","，","也","基本","_","details","122599728","方便","有","的",":","net"],"title":"远程桌面","title_tokens":["远程桌面","远程","桌面"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_8","text":"树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。","text_tokens":["处于","同一个","具体","很多","修改","互通","：","#","之前","派端","端","后","启动","talker","感觉","一下","如果","希望","树莓","实现","一个","所","而是"," ","完成","桥接","中","测试","demo","也","是","效果","呢","安装","已经","的","话题","模式","订阅","动作","都","这","局域","电脑","小组","里","做","中有","他们","可以","并且","服务","。","一样","发布","计算","到","我们","将","之间","命令","pc","无法","接下来","算机","使用","同一","网络","、","并","ros2","能力","通信","？","计算机","像","在","只要","命令行","请","直接","好","者","局域网络","发生","attention","连接","下来","分组","和","py","为","等","需要","不","带来","个","配置","nodes","虚拟","打通","事情","神奇","用","虚拟机","互联","讲过","你","就","局域网","了","run","如","简而言之","发布者","不过","派","$","什么","接下","平台","节点","如下","会","确保","listener","而言","cpp","，","_","问题","两个","这样"],"title":"分布式数据传输","title_tokens":["分布式","分布","传输","数据","数据传输","布式","据传"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_9","text":"没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。","text_tokens":["一句","两者","=","通信","<","处于","计算机","同一个","export","在","电脑","小组","就","：",".","了","加入","没","机制","可以","端的","类似","ros","不同","如果","派","一样","bashrc","计算","。","才能","即可","$","分组","树莓","到","提供","我们","和","domain","将","实现","一个",">","无法","则","id","算机","分配"," ","配置","同一","your","，","中","问题","_","ros2","的","这样"],"title":"分布式网络分组","title_tokens":["分布式","分组","分布","网络","布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_10","text":"分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动： $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端","text_tokens":["例程","teleop","通信","经典","—","key","或者","一些","是否","真有","过","海龟","在","电脑","过来","反过","仿真","继续","：","#","了","之前","真器","案例","run","分布","先","端","可以","派端","想","启动","ros","小海龟","。","派","$","树莓","上","turtlesim","我们","运动","节点","来","仿真器","依然","turtle","键盘","node","pc","这么","似乎","反过来","分布式"," ","学习","网络","小海","控制","，","建立","测试","试试","中","也","_","已经","成功","布式","ros2","流畅","的","神奇"],"title":"案例一：小海龟分布式控制","title_tokens":["分布式","一","案例","分布","小海","控制","海龟","小海龟","布式","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_11","text":"我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串： $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端","text_tokens":["订阅","例程","情况","通信","字符","？","下","topic","是否","在","电脑","修改","：","#","字符串","之前","直接","run","先","hello","者","可以","派端","端","作为","发布者","world","learning","派","ros2","发布","$","树莓","我们","代码","sub","pub","pc","编写","helloworld","不","使用"," ","，","试试","_","任何","呢","的","话题"],"title":"案例二：话题分布式通信","title_tokens":["分布式","案例","分布","通信","布式","：","二","话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_12","text":"话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能： $ ros2 run learning_service service_adder_server # PC端 $ ros2 run learning_service service_adder_client 2 3 # 树莓派端","text_tokens":["adder","客户端","server","求和","功能","客户端程序","电脑","务器","：","#","客户","3","run","派端","端","可以","服务","learning","。","顺利实现","加法","服务器程序","$","树莓","我们","2","实现","没有","还是","服务器","pc","client"," ","顺利","service","，","运行","也","问题","_","程序","不在","不在话下","ros2","话题"],"title":"案例三：服务分布式通信","title_tokens":["分布式","案例","分布","通信","服务","三","布式","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_13","text":"以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体： $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 没有任何问题，视觉识别的效果如下。 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。","text_tokens":["复杂","像头","频繁","修改","：","#","派端","端","搭建","端的","树莓","机器人","提供","没有","一个","node","再"," ","以上","中","测试","非常","也","效果","系列","的","方法","exe","都","电脑","一系","友好","做","没","通过","可以","webcam","几乎","。","视觉","我们","将","不够","如此","pc","采集","接下来","发给","识别","使用","网络","布式","ros2","开发","一系列","？","摄像头","topic","在","只要","啦","好","分布","learning","支持","模拟","连接","安排","上","下来","用到","sub","为","处理","变得","需要","分布式","不","配置","一切","实际","系统","这些","例程","功能","还","了","run","然后","类似","物体","ros","派","$","实时","轻松","代码","接下","节点","如下","小型","会","usb","红色","图像","，","问题","_","cam","摄像","任何","机器"],"title":"案例四：机器视觉分布式应用","title_tokens":["分布式","案例","分布","应用","布式","分布式应用","机器","：","视觉","四"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_14","text":"https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["-","about","domain","concepts","docs","org","/","https","ros","en","html","humble","id",":","."],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2_%E6%A6%82%E5%BF%B5%E6%80%BB%E8%A7%88/","text":"从本节开始，我们将进入第二个篇章，以ROS2的核心概念为线索，详细讲解ROS2的应用开发方法。","text_tokens":["开发","方法","开发方法","开始","以","本节","概念","详细","。","我们","将","核心","线索","应用","讲解","为","第二个","进入","从本节","，","第二","二个","篇章","ros2","的"],"title":"概念总览","title_tokens":["总览","概念"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/","text":"Launch：多节点启动与配置脚本 到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是 Launch启动文件 ，它是ROS系统中多节点启动与配置的一种脚本。 Launch文件 这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。 多节点启动 先来看看如何启动多个节点。 运行效果 启动终端，使用ros2中的launch命令来启动第一个launch文件示例： $ ros2 launch learning_launch simple.launch.py 运行成功后，就可以在终端中看到发布者和订阅者两个节点的日志信息啦。 文件解析 这两个节点是如何启动的呢？我们来分析下这个launch文件。 learning_launch/simple.launch.py from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'learning_topic' , # 节点所在的功能包 executable = 'topic_helloworld_pub' , # 节点的可执行文件 ), Node ( # 配置一个节点的启动 package = 'learning_topic' , # 节点所在的功能包 executable = 'topic_helloworld_sub' , # 节点的可执行文件名 ), ]) 命令行参数配置 我们使用ros2命令在终端中启动节点时，还可以在命令后配置一些传入程序的参数，使用launch文件一样可以做到。 运行效果 比如我们想要运行一个Rviz可视化上位机，并且加载某一个配置文件，使用命令行的话，是这样的： $ ros2 run rviz2 rviz2 -d <PACKAGE-PATH>/rviz/turtle_rviz.rviz 命令后边还得跟一长串配置文件的路径，如果放在launch文件里，启动就优雅很多了： $ ros2 launch learning_launch rviz.launch.py 文件解析 命令行后边的参数是如何通过launch传入节点的呢？来看下这个launch文件。 learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 rviz_config = os . path . join ( # 找到配置文件的完整路径 get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'rviz2' , # 节点所在的功能包 executable = 'rviz2' , # 节点的可执行文件名 name = 'rviz2' , # 对节点重新命名 arguments = [ '-d' , rviz_config ] # 加载命令行参数 ) ]) 资源重映射 ROS社区中的资源非常多，当我们使用别人代码的时候，经常会发现通信的话题名称不太符合我们的要求，能否对类似的资源重新命名呢？ 为了提高软件的复用性，ROS提供了资源重映射的机制，可以帮助我们解决类似的问题。 运行效果 启动一个终端，运行如下例程，很快会看到出现了两个小海龟仿真器界面；再打开一个终端，发布如下话题，让海龟1动起来，海龟2也会一起运动： $ ros2 launch learning_launch rviz.launch.py $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 文件解析 为什么两个海龟都会动呢？这里要用到turtlesim功能包里另外一个节点，叫做mimic，它的功能是订阅某一个海龟的Pose位置，通过计算，变换成一个同样运动的速度指令，发布出去。 至于mimic节点订阅或者发布的话题名叫什么呢？我们就可以通过重映射修改成对应任意海龟的名字。 learning_launch/remapping.launch.py from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 namespace = 'turtlesim1' , # 节点所在的命名空间 executable = 'turtlesim_node' , # 节点的可执行文件名 name = 'sim' # 对节点重新命名 ), Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 namespace = 'turtlesim2' , # 节点所在的命名空间 executable = 'turtlesim_node' , # 节点的可执行文件名 name = 'sim' # 对节点重新命名 ), Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 executable = 'mimic' , # 节点的可执行文件名 name = 'mimic' , # 对节点重新命名 remappings = [ # 资源重映射列表 ( '/input/pose' , '/turtlesim1/turtle1/pose' ), # 将/input/pose话题名修改为/turtlesim1/turtle1/pose ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), # 将/output/cmd_vel话题名修改为/turtlesim2/turtle1/cmd_vel ] ) ]) ROS参数设置 ROS系统中的参数，也可以在Launch文件中设置。 运行效果 启动一个终端，运行如下命令： $ ros2 launch learning_launch parameters.launch.py 在启动的海龟仿真器中，我们看到背景颜色被改变了，这个颜色参数的设置就是在launch文件中完成的。 文件解析 我们看下在launch文件中如何来设置参数的。 learning_launch/parameters.launch.py from launch import LaunchDescription # launch文件的描述类 from launch.actions import DeclareLaunchArgument # 声明launch文件内使用的Argument类 from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) # 创建一个Launch文件内参数（arg）background_r ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) # 创建一个Launch文件内参数（arg）background_g ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) # 创建一个Launch文件内参数（arg）background_b ) return LaunchDescription ([ # 返回launch文件的描述信息 background_r_launch_arg , # 调用以上创建的参数（arg） background_g_launch_arg , background_b_launch_arg , Node ( # 配置一个节点的启动 package = 'turtlesim' , executable = 'turtlesim_node' , # 节点所在的功能包 name = 'sim' , # 对节点重新命名 parameters = [{ # ROS参数列表 'background_r' : LaunchConfiguration ( 'background_r' ), # 创建参数background_r 'background_g' : LaunchConfiguration ( 'background_g' ), # 创建参数background_g 'background_b' : LaunchConfiguration ( 'background_b' ), # 创建参数background_b }] ), ]) Attention launch文件中出现的argument和parameter，虽都译为“参数”，但含义不同： - argument：仅限launch文件内部使用，方便在launch中调用某些数值； - parameter：ROS系统的参数，方便在节点见使用某些数值。 加载参数文件 以上例程我们在launch文件中一个一个的设置参数，略显麻烦，当参数比较多的时候，建议使用参数文件进行加载。 learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 config = os . path . join ( # 找到参数文件的完整路径 get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 executable = 'turtlesim_node' , # 节点的可执行文件名 namespace = 'turtlesim2' , # 节点所在的命名空间 name = 'sim' , # 对节点重新命名 parameters = [ config ] # 加载参数文件 ) ]) Launch文件包含 在复杂的机器人系统中，launch文件也会有很多，此时我们可以使用类似编程中的include机制，让launch文件互相包含。 文件解析 learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch.actions import IncludeLaunchDescription # 节点启动的描述类 from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction # launch文件中的执行动作 from launch_ros.actions import PushRosNamespace # ROS命名空间配置 def generate_launch_description (): # 自动生成launch文件的函数 parameter_yaml = IncludeLaunchDescription ( # 包含指定路径下的另外一个launch文件 PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( # 对指定launch文件中启动的功能加上命名空间 actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ # 返回launch文件的描述信息 parameter_yaml_with_namespace ]) 功能包编译配置 ... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ... 参考链接 https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docsros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["做到","路径","这里","加载","脚本","原有","(","可视化","cmd","不同","如果","}","；","一个","目前为止","geometry","以上","与","background","系列","方法","一些","这","1","里","这个","机制","launch","。","可视","]","发布","变换","空间","上位","launchdescription","有没有","python","解决","d","namespaces","parameters","share","xml","join","output","一次性","列表","让","nonamespace","files","msgs","某些","目前","啦","remapping","tutorials","各个","没错","remappings","https","背景","py","仿真器","122","目的","解析","当","跟","前为","index","还","就","了","甚至","substitutions","main","参数","重","类似","此时","模版","$","什么","参数设置","节点","就是","来","过程","get","合剂","会","多样化","_","packages","g","后边","这样","using","glob","name","输入","turtlesim1","为了","启动","自动","path","pushrosnamespace","generate","机器人","提供","类",">","任意","完整"," ","directory","见","虽","传入","互相","别人","订阅","中多","turtle1","略显","都","一系","软件","真器","通过","可以","from","所有","长串","创建","自由","mimic","命名","指令","链接","我们","运动","核心","机","将","一次","名叫","命令","data","所在","呀","rviz","参考","msg","ros2","大大","颜色","？","看上去","arguments","命令行","with",",","先","attention","看上","用到","text","优雅","groupaction","docs","但","提高","丰富","0.0","示例",")","能否","rviz2","当然","argument","方便","资源","要","系统","动","时","=","多样","要求","比如","查询","org","会动","ros","发布者","import","肯定","pose","2.0","“","pub","actions","declarelaunchargument","位置","放在","基于","小海","包含","时候","问题","docsros","阅读","sources","两个","一起","一种","比较","这是","带领","加上","返回","：","#","映射","-","z","另外","含义","一长串","后","html","linear","粘合剂","没有","至于","node","好像","内部","编写","再","vel","84","中","进行","非常","”","ament","是","指定","新","x","函数","r","include","终端","动作","resource","textsubstitution","了解","angular","可执行文件","/","译","simple","建议","*","程序","多","description",":","config","发现","像","在","对应","rate",".","数值","0","者","声明","input","麻烦","learning","配置文件","turtlesim","看到","和","名","sub","2","turtle","为","为止","需要","分析","配置","叫做","运行","某","出现","例程","value","或者","每当","看看","os","仿真","经常","被","改变","sim","run","...","日志","文件","符合","1.8","名字","）","性","相当","如下","turtlesim2","parameter","上去","来看","社区","，","机器","'","信息","<","大家","复杂","很多","yaml","修改","得","编程","projects","pythonlaunchdescriptionsource","return","调用","launchconfiguration","package","成功","b","def","完成","（","twist","也","对","效果","呢","的","话题","不太","多个","复用","帮助","答案","之高","执行","并且","编译","第一","内","一样","计算","组装","到","如何","namespace","en","使用","找到","arg","humble","粘合","为什么","名称","一系列","通信","那","出去","topic","includelaunchdescription","行文","它","好","executable","小海龟","想要","+","\"","{","速度","重新","起来","界面","helloworld","default","方式","乍","同样","有","large","功能","重新命名","下","每次","海龟","打开","包","成","很快","第一个","仅限","的话","描述","[","设置","y","代码","看下","各种","for","生成","频次","--"],"title":"Launch","title_tokens":["launch"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch","text":"到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是 Launch启动文件 ，它是ROS系统中多节点启动与配置的一种脚本。","text_tokens":["中多","前为","终端","这样","？","那","都","每次","一次性","很多","每当","打开","脚本","目前","答案","好","它","可以","文件","所有","麻烦","launch","启动","ros","。","到","机器人","我们","肯定","节点","就是","没有","一种","一个","一次","命令","为止","目前为止","需要","有没有","呀","呢","方式"," ","配置","与","，","运行","中","是","当然","机器","系统","的","新"],"title":"Launch：多节点启动与配置脚本","title_tokens":["配置","节点","与","launch","启动","多","脚本","："]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_1","text":"这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。","text_tokens":["这是","带领","大家","很多","输入","原有","编程","启动","粘合剂","一个","好像","编写","完整"," ","中","也","进行","是","系列","呢","的","一系","了解","之高","通过","可以","launch","。","一样","自由","组装","如何","我们","核心","命令","呀","python","使用","粘合","ros2","一系列","大大","那","像","看上去","在","命令行","它","各个","没错","看上","和","丰富","配置","乍","目的","系统","出现","例程","功能","或者","多样","还","就","了","甚至","参数","文件","类似","ros","描述","模版","代码","相当","就是","节点","来","过程","合剂","多样化","上去","各种","基于","，","阅读","频次","这样"],"title":"Launch文件","title_tokens":["launch","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_1","text":"先来看看如何启动多个节点。","text_tokens":["多个","如何","先","节点","来","启动","看看","。"],"title":"多节点启动","title_tokens":["节点","启动","多"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_2","text":"启动终端，使用ros2中的launch命令来启动第一个launch文件示例： $ ros2 launch learning_launch simple.launch.py 运行成功后，就可以在终端中看到发布者和订阅者两个节点的日志信息啦。","text_tokens":["订阅","信息","终端","在","：","就",".","啦","者","可以","日志","文件","第一个","launch","启动","后","learning","第一","发布者","。","发布","$","两个","看到","和","节点","来","py","一个","命令","示例","使用"," ","simple","，","中","运行","_","成功","ros2","的"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_3","text":"这两个节点是如何启动的呢？我们来分析下这个launch文件。 learning_launch/simple.launch.py from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'learning_topic' , # 节点所在的功能包 executable = 'topic_helloworld_pub' , # 节点的可执行文件 ), Node ( # 配置一个节点的启动 package = 'learning_topic' , # 节点所在的功能包 executable = 'topic_helloworld_sub' , # 节点的可执行文件名 ), ])","text_tokens":["'","函数","信息","=","？","功能","下","返回","topic","这","包","行文","#",".","这个","(",",","executable","from","文件","执行","launch","启动","ros","learning","自动","描述","。","[","]","return","import","generate","如何","我们","名","可执行文件","节点","来","py","launchdescription","类","pub","sub","/","node","一个","package","actions","所在","def","分析","helloworld"," ","simple",")","配置","生成","_","是","两个","呢","description","的",":"],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_4","text":"我们使用ros2命令在终端中启动节点时，还可以在命令后配置一些传入程序的参数，使用launch文件一样可以做到。","text_tokens":["做到","终端","一些","在","还","可以","参数","文件","launch","启动","后","。","ros2","一样","我们","节点","命令","使用","配置","，","中","程序","传入","的","时"],"title":"命令行参数配置","title_tokens":["参数","命令","配置","命令行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_5","text":"比如我们想要运行一个Rviz可视化上位机，并且加载某一个配置文件，使用命令行的话，是这样的： $ ros2 run rviz2 rviz2 -d <PACKAGE-PATH>/rviz/turtle_rviz.rviz 命令后边还得跟一长串配置文件的路径，如果放在launch文件里，启动就优雅很多了： $ ros2 launch learning_launch rviz.launch.py","text_tokens":["路径","<","跟","很多","加载","还","得","：","就","命令行",".","里","-","了","run","可视化","比如","一长串","文件","launch","的话","并且","启动","想要","长串","learning","可视","如果","path","$","配置文件","我们","上位","优雅","机","py","turtle","一个","package","命令","/",">","rviz","放在","使用"," ","配置","d","运行","，","_","rviz2","某","是","后边","ros2","的","这样"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_6","text":"命令行后边的参数是如何通过launch传入节点的呢？来看下这个launch文件。 learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 rviz_config = os . path . join ( # 找到配置文件的完整路径 get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'rviz2' , # 节点所在的功能包 executable = 'rviz2' , # 节点的可执行文件名 name = 'rviz2' , # 对节点重新命名 arguments = [ '-d' , rviz_config ] # 加载命令行参数 ) ])","text_tokens":["'","信息","路径","返回","name","加载","#","-","(","启动","自动","path","return","generate","类","node","package","一个","def","完整"," ","directory","ament","是","对","传入","呢","的","函数","方法","这个","通过","from","执行","launch","。","]","命名","如何","可执行文件","launchdescription","/","命令","所在","python","rviz","找到","d","share","description","config",":","？","join","行文","arguments","命令行",".",",","executable","learning","配置文件","名","重新","py","turtle",")","配置","rviz2","=","功能","重新命名","下","index","os","包","参数","查询","文件","ros","描述","[","import","节点","get","actions","来看","生成","_","packages","后边"],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_7","text":"ROS社区中的资源非常多，当我们使用别人代码的时候，经常会发现通信的话题名称不太符合我们的要求，能否对类似的资源重新命名呢？ 为了提高软件的复用性，ROS提供了资源重映射的机制，可以帮助我们解决类似的问题。","text_tokens":["通信","发现","重新命名","？","为了","复用","经常","软件","了","映射","帮助","要求","机制","可以","重","符合","类似","ros","。","命名","性","我们","提供","代码","重新","提高","会","呢","使用"," ","能否","社区","解决","，","中","非常","时候","名称","不太","问题","多","资源","对","当","的","话题","别人"],"title":"资源重映射","title_tokens":["资源","重","映射"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_8","text":"启动一个终端，运行如下例程，很快会看到出现了两个小海龟仿真器界面；再打开一个终端，发布如下话题，让海龟1动起来，海龟2也会一起运动： $ ros2 launch learning_launch rviz.launch.py $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":["例程","出现","x","turtle1","终端","topic","海龟","动","打开","让","rate","1","仿真","：","msgs",".","了","真器","z",",","很快","cmd","launch","启动","小海龟","learning","1.8","ros2","发布","\"","{","}","$","linear","y","；","angular","看到","运动","2.0","2","起来","仿真器","py","如下","pub","一个","界面","/","会","0.0","rviz","再","geometry",":","vel"," ","小海","twist","，","运行","也","_","msg","--","两个","一起","话题"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_9","text":"为什么两个海龟都会动呢？这里要用到turtlesim功能包里另外一个节点，叫做mimic，它的功能是订阅某一个海龟的Pose位置，通过计算，变换成一个同样运动的速度指令，发布出去。 至于mimic节点订阅或者发布的话题名叫什么呢？我们就可以通过重映射修改成对应任意海龟的名字。 learning_launch/remapping.launch.py from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 namespace = 'turtlesim1' , # 节点所在的命名空间 executable = 'turtlesim_node' , # 节点的可执行文件名 name = 'sim' # 对节点重新命名 ), Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 namespace = 'turtlesim2' , # 节点所在的命名空间 executable = 'turtlesim_node' , # 节点的可执行文件名 name = 'sim' # 对节点重新命名 ), Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 executable = 'mimic' , # 节点的可执行文件名 name = 'mimic' , # 对节点重新命名 remappings = [ # 资源重映射列表 ( '/input/pose' , '/turtlesim1/turtle1/pose' ), # 将/input/pose话题名修改为/turtlesim1/turtle1/pose ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), # 将/output/cmd_vel话题名修改为/turtlesim2/turtle1/cmd_vel ] ) ])","text_tokens":["'","信息","这里","返回","修改","turtlesim1","name","#","映射","另外","(","cmd","启动","自动","return","generate","类","至于","一个","node","package","任意","def","vel"," ","是","对","呢","的","话题","订阅","函数","turtle1","都","里","通过","可以","from","执行","launch","。","]","发布","计算","变换","空间","mimic","命名","指令","我们","运动","namespace","可执行文件","launchdescription","将","/","名叫","所在","为什么","description",":","？","出去","output","列表","对应","行文",".","它",",","executable","remapping","input","remappings","learning","用到","turtlesim","速度","名","重新","py","为",")","配置","叫做","同样","某","资源","要","=","功能","重新命名","或者","海龟","包","就","成","sim","文件","重","会动","ros","描述","[","名字","import","什么","pose","节点","turtlesim2","actions","位置","，","生成","_","两个"],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#ros","text":"ROS系统中的参数，也可以在Launch文件中设置。","text_tokens":["设置","参数","可以","，","中","也","文件","launch","在","ros","。","系统","的"],"title":"ROS参数设置","title_tokens":["参数设置","参数","设置","ros"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_10","text":"启动一个终端，运行如下命令： $ ros2 launch learning_launch parameters.launch.py 在启动的海龟仿真器中，我们看到背景颜色被改变了，这个颜色参数的设置就是在launch文件中完成的。","text_tokens":["颜色","终端","海龟","在","仿真","：",".","被","真器","改变","了","这个","参数","文件","launch","启动","learning","。","背景","$","设置","我们","看到","就是","py","仿真器","如下","一个","命令"," ","完成","parameters","，","运行","中","_","ros2","的"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_11","text":"我们看下在launch文件中如何来设置参数的。 learning_launch/parameters.launch.py from launch import LaunchDescription # launch文件的描述类 from launch.actions import DeclareLaunchArgument # 声明launch文件内使用的Argument类 from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) # 创建一个Launch文件内参数（arg）background_r ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) # 创建一个Launch文件内参数（arg）background_g ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) # 创建一个Launch文件内参数（arg）background_b ) return LaunchDescription ([ # 返回launch文件的描述信息 background_r_launch_arg , # 调用以上创建的参数（arg） background_g_launch_arg , background_b_launch_arg , Node ( # 配置一个节点的启动 package = 'turtlesim' , executable = 'turtlesim_node' , # 节点所在的功能包 name = 'sim' , # 对节点重新命名 parameters = [{ # ROS参数列表 'background_r' : LaunchConfiguration ( 'background_r' ), # 创建参数background_r 'background_g' : LaunchConfiguration ( 'background_g' ), # 创建参数background_g 'background_b' : LaunchConfiguration ( 'background_b' ), # 创建参数background_b }] ), ]) Attention launch文件中出现的argument和parameter，虽都译为“参数”，但含义不同： - argument：仅限launch文件内部使用，方便在launch中调用某些数值； - parameter：ROS系统的参数，方便在节点见使用某些数值。","text_tokens":["'","信息","返回","name","#","：","-","(","含义","启动","自动","不同","return","}","generate","；","类","调用","launchconfiguration","node","一个","package","内部","b","def"," ","以上","（","84","中","”","background","见","虽","对","的","函数","r","都","textsubstitution","from","launch","内","。","创建","]","命名","如何","我们","launchdescription","/","所在","译","使用","parameters","arg","description",":","在","列表",".","某些","数值",",","executable","0","声明","learning","{","attention","text","turtlesim","和","重新","py","为","但","default",")","配置","122","argument","方便","系统","出现","=","value","功能","重新命名","包","substitutions","sim","参数","文件","仅限","ros","描述","[","）","import","设置","“","节点","来","看下","parameter","actions","declarelaunchargument","，","生成","_","g"],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_12","text":"以上例程我们在launch文件中一个一个的设置参数，略显麻烦，当参数比较多的时候，建议使用参数文件进行加载。 learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch_ros.actions import Node # 节点启动的描述类 def generate_launch_description (): # 自动生成launch文件的函数 config = os . path . join ( # 找到参数文件的完整路径 get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ # 返回launch文件的描述信息 Node ( # 配置一个节点的启动 package = 'turtlesim' , # 节点所在的功能包 executable = 'turtlesim_node' , # 节点的可执行文件名 namespace = 'turtlesim2' , # 节点所在的命名空间 name = 'sim' , # 对节点重新命名 parameters = [ config ] # 加载参数文件 ) ])","text_tokens":["'","信息","路径","返回","yaml","加载","name","#","(","启动","自动","path","return","generate","类","一个","package","node","def","完整"," ","以上","directory","中","进行","ament","对","的","函数","略显","方法","from","执行","launch","。","]","空间","命名","我们","namespace","可执行文件","launchdescription","/","所在","python","使用","建议","找到","parameters","share","多","description",":","config","join","在","行文",".",",","executable","麻烦","learning","turtlesim","名","重新","py",")","配置","当","例程","=","功能","重新命名","index","os","包","sim","参数","查询","文件","ros","描述","[","import","设置","节点","turtlesim2","get","actions","，","生成","时候","_","packages","比较"],"title":"加载参数文件","title_tokens":["参数","文件","加载"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_2","text":"在复杂的机器人系统中，launch文件也会有很多，此时我们可以使用类似编程中的include机制，让launch文件互相包含。","text_tokens":["include","复杂","在","很多","让","机制","可以","编程","文件","launch","类似","此时","。","机器人","我们","系统","会","使用","，","中","也","包含","互相","机器","有","的"],"title":"Launch文件包含","title_tokens":["launch","包含","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_13","text":"learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory # 查询功能包路径的方法 from launch import LaunchDescription # launch文件的描述类 from launch.actions import IncludeLaunchDescription # 节点启动的描述类 from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction # launch文件中的执行动作 from launch_ros.actions import PushRosNamespace # ROS命名空间配置 def generate_launch_description (): # 自动生成launch文件的函数 parameter_yaml = IncludeLaunchDescription ( # 包含指定路径下的另外一个launch文件 PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( # 对指定launch文件中启动的功能加上命名空间 actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ # 返回launch文件的描述信息 parameter_yaml_with_namespace ])","text_tokens":["'","信息","路径","加上","返回","yaml","#","另外","(","启动","自动","pythonlaunchdescriptionsource","path","return","pushrosnamespace","generate","类","一个","package","def"," ","directory","中","ament","对","指定","的","函数","方法","动作","from","执行","launch","]","空间","命名","namespace","launchdescription","/","python","namespaces","parameters","share","description",":","join","includelaunchdescription","nonamespace",".","with",",","learning","groupaction","py",")","配置","=","功能","index","下","os","包","查询","文件","ros","描述","[","import","节点","parameter","get","turtlesim2","actions","包含","生成","_","packages","sources"],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_14","text":"... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ...","text_tokens":["'","=","glob","xml","index","join","resource","os","name","files",".","...","(",",","launch","[","]","+","path","py","/","data","package","rviz"," ",")","*","share","_","ament","packages","config"],"title":"功能包编译配置","title_tokens":["包","配置","功能","编译"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docsros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["using","large",".","-","main","tutorials","launch","org","projects","https","ros","html","docs","/","en"," ","for","docsros","humble","ros2",":"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/","text":"TF：机器人坐标系管理神器 坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器——TF。 机器人中的坐标系 机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做基坐标系Base Frame，机器人安装位置在外部环境下的参考系叫做世界坐标系World Frame，机器人末端夹爪的位置叫做工具坐标系，外部被操作物体的位置叫做工件坐标系，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是基坐标系Base Link，雷达所在的位置叫做雷达坐标系laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做里程计坐标系odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做地图坐标系map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为平移和旋转两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实向量的数学描述。 ROS中TF功能的底层原理，其实就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。 TF命令行操作 ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。 小海龟跟随例程 这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools $ sudo pip3 install transforms3d 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 当我们控制一只海龟运动时，另外一只海龟也会跟随运动。 查看TF树 在当前运行的两只海龟中，有哪些坐标系呢，我们可以通过这个小工具来做查看。 $ ros2 run tf2_tools view_frames 默认在当前终端路径下生成了一个frames.pdf文件，打开之后，就可以看到系统中各个坐标系的关系了。 查询坐标变换信息 只看到坐标系的结构还不行，如果我们想要知道某两个坐标系之间的具体关系，可以通过tf2_echo这个工具查看： $ ros2 run tf2_ros tf2_echo turtle2 turtle1 运行成功后，终端中就会循环打印坐标系的变换数值了，由平移和旋转两个部分组成，还有旋转矩阵。 坐标系可视化 看数值还不直观？可以试试用可视化软件来做显示： $ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 再让小海龟动起来，Rviz中的坐标轴就会开始运动，这样是不是更加直观了呢！ 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。 静态TF广播 我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为 静态TF变换 ，我们来看看在程序中该如何实现？ 运行效果 启动终端，运行如下命令： $ ros2 run learning_tf static_tf_broadcaster $ ros2 run tf2_tools view_frames 可以看到当前系统中存在两个坐标系，一个是world，一个是house，两者之间的相对位置不会发生改变，通过一个静态的TF对象进行维护。 代码解析 来看下在代码中是如何创建坐标系并且发布静态变换的。 learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？ TF监听 我们再来学习下如何查询两个坐标系之间的位置关系。 运行效果 启动一个终端，运行如下节点，就可以在终端中看到周期显示的坐标关系了。 $ ros2 run learning_tf tf_listener 代码解析 这个节点中是如何查询坐标关系的，我们来看下代码。 learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。 海龟跟随功能解析 还是之前小海龟跟随的示例，我们自己通过代码来实现一下。 运行效果 先看下实现的效果，启动终端后，通过如下命令启动例程： $ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 看到的效果和ROS自带的例程相同。 原理解析 在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心通过坐标系实现向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。 Launch文件解析 先来看下刚才运行的launch文件，里边启动了四个节点，分别是： 小海龟仿真器 海龟1的坐标系广播 海龟2的坐标系广播 海龟跟随控制 其中，两个坐标系的广播复用了turtle_tf_broadcaster节点，通过传入的参数名修改维护的坐标系名称。 learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ]) 坐标系动态广播 海龟1和海龟2在world坐标系下的坐标变换，在turtle_tf_broadcaster节点中实现，除了海龟坐标系的名字不同之外，针对两个海龟的功能是一样的。 learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 海龟跟随 坐标系都正常广播了，接下来我们就可以订阅两只海龟的位置关系，并且变换成速度指令进行控制啦。 learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":["路径","__","机械","定义","呗","之前","外部环境","(","可视化","打印","中是","cmd","frame","spawn","不同","如果","}","长度","算法","实现","guyuehome","一个","还是","link","geometry","由","与","显得","8","spawning","已经","speed","库","call","有所","方法","看似","相对","关系","一些","这","重要","class","源","里边","1","这个","w","www","刚才","准备","没","矩阵","launch","world","服务","。","可视","哪个","转换","发布","变换","]","空间","产生","固定","quat","launchdescription","time","绝对","frames","根据","封装","python","5","house","d","并","控制","解决","parameters","share","针对","姿态","on","false","着急","两者","is","让","msgs","管理系统","啦","tutorials","各个","transformstamped","https","退出","经过","py","仿真器","表示","处理","静态","理论知识","定时器","环境","箭头","service","request","解析","缓冲区","背后","当","优先","三个","相应","不变","给","爪","还","全局","就","了","客户","substitutions","main","试一试","参数","scale","入口","熟悉","env","$","echo","直观","就是","来","节点","过程","循环","get","误差","会","else","学习","ready","内容","_","常见","这样","—","旋转","异常","怎么","是否","theta","name","clock","案例","默认","默认值","启动","rotation","自动","transformations","末端","变化","10.0","准备就绪","机器人学","generate","机器人","提供","该","finished","类","turtletfbroadcaster","你家",">","完整"," ","存在","demo","target","pip3","抓取","info","累积","安装","传入","订阅","提示","分别","turtle1","激光","都","rel","subscription","树","软件","做","真器","通过","关于","可以","from","logger","更新","标志","父类","turtlename","自带","创建","spawned","加","指令","链接","我们","运动","将","核心","python3","f","之间","很","命令","所在","rviz","接下来","四元","install","none","entry","参考","msg","ros2","teleop","tf2","现在","transform","客户端","？","开始","true","两只","to","the","原理","地图","命令行","sudo","包括","pkg",",","先","tools","方向","yaw","not","怎么样","不行","角速度","上","下来","及时","callback","docs","操作","不会","0.0","child","示例","中该",")","戳","是不是","坐标轴","publish","最为","rviz2","正常","缓冲","主要","要","系统","动","时","用","部分","=","setup","定时","一本","sendtransform","try","两者之间","transforms3d","比如","查询","！","作用","org","清楚","ros","transformbroadcaster","import","欧拉角","pose","接下","讲解","actions","declarelaunchargument","com","位置","declare","选项","基于","could","中间","小海","房子","时候","还会","初始化","两个","一起","一种","tflistener","得到","console","回调","中画","：","#","-","z","另外","q","super","后","工件","至关","一下","良好","pitch","左边","应该","html","每","if","linear","便于","角度","ex","4","xy","时间","数学","理解","node","没有","done","编写","再","vel","发送","tf","非常","中","哪些","进行","器","想起","是","同理","successfully","情况","x","函数","终端","等待","broadcaster","transformlistener","四乘","组成","说","务器","继续","概念","详细","了解","加入","就绪","trans","之为","5.0","send","angular","工具","跟随运动","shutdown","/",".__","高中","进入","*","广播","基本","程序","一层","s","description",":","距离","这种","知识","其中","在","rate","外部","init","范围",".","数值","3","0","者","srv","存储","之后","分解","learning","buffer","laser","turtlesim","看到","和","名","2","now","时刻","为","turtle","变得","失败","参考系","雷达","需要","维护","timer","自己","销毁","%","关闭","apt","只","管理","配置","动态","叫做","coding","里程计","运行","usr","broadcaster1","某","古月","一只","@","例程","spin","value","publisher","pdf","看看","相同","向量","仿真","请求","被","中心","改变","sim","run","底盘","文件","物体","向","名字","）","按照","不是","参数值","数","不要","如下","parameter","夹","平移","broadcaster2","服务器","初始","stamp","来看","transformation","说明","，","试试","转变成","forward","中心点","保持","机器","连线","'","float","信息","复杂","大家","查看","报告","转变","lookup","具体","人学","很多","形态","简单","修改","得","prefix","动机","接口","self","return","点","translation","看","launchconfiguration","意思","成功","package","教材","管理系","def","turtlefollowing","（","完成","bin","twist","也","对","效果","呢","quaternion","的","挑战","scripts","话题","世界","欧拉","utf","消息","坐标系","所以","statictransformbroadcaster","基础","位","static","复用","四","create","1.0","作者","获取","string","发生变化","称之为","并且","么","编译","内","一样","计算","结构","map","器类","到","如何","odom","漂移","roll","依然","当前","en","client","基","慢慢","使用","周期","、","turtle2","rclpy","先看","线速度","又会有","source","statictfbroadcaster","变得复杂","destroy","humble","目标","名称","移动","除了","key","那","显示","又","atan2","只要","监听","base","math","保存","好","executable","!","following","小海龟","想要","view","\"","发生","{","+","速度","有点","起来","transformexception","as","里程","更加","pos","euler","default","不","臂","async","激光雷达","跟随","监听器","有","这些","points","sqrt","否则","拆","居","功能","下","海龟","四个","对象","打开","包","之外","成","其实","理论","变成","然后","描述","[","随便","不断","至关重要","设置","y","result","出","代码","spawner","坐标","数据","header","args","id","神器","底层","怎样","listener","小","生变","生成","还有","移动机器人","段","except","知道","--","格外"],"title":"TF","title_tokens":["tf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf","text":"坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器——TF。","text_tokens":["—","？","坐标系","关系","重要","人学","基础","在","很多","给","了","概念","这些","ros","熟悉","。","机器人学","机器人","我们","该","如何","提供","坐标","之间","一个","会","位置","完整","神器"," ","管理","存在","，","非常","也","中","tf","是","机器","系统","的"],"title":"TF：机器人坐标系管理神器","title_tokens":["管理","机器人","坐标","tf","坐标系","机器","：","神器"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_1","text":"机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做基坐标系Base Frame，机器人安装位置在外部环境下的参考系叫做世界坐标系World Frame，机器人末端夹爪的位置叫做工具坐标系，外部被操作物体的位置叫做工件坐标系，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是基坐标系Base Link，雷达所在的位置叫做雷达坐标系laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做里程计坐标系odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做地图坐标系map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为平移和旋转两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实向量的数学描述。 ROS中TF功能的底层原理，其实就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。","text_tokens":["复杂","旋转","大家","机械","人学","形态","简单","中画","动机","外部环境","frame","工件","至关","末端","变化","良好","机器人学","每","机器人","数学","一个","link","教材","管理系"," ","tf","中","哪些","也","进行","显得","是","抓取","累积","对","安装","呢","的","世界","方法","看似","坐标系","都","关系","一些","相对","重要","四乘","四","这个","详细","通过","关于","可以","矩阵","world","内","。","一样","变换","空间","map","工具","odom","漂移","固定","我们","绝对","之间","封装","所在","基","使用","参考","基本","一层","又会有","变得复杂","移动","两者","？","那","知识","在","外部","原理","base","范围","地图","管理系统","分解","laser","和","为","变得","里程","操作","参考系","雷达","理论知识","环境","臂","管理","叫做","里程计","跟随","主要","要","系统","这些","有","部分","功能","下","一本","爪","向量","就","被","中心","其实","两者之间","了","理论","比如","物体","ros","描述","不断","至关重要","出","坐标","讲解","就是","过程","夹","平移","误差","会","位置","底层","，","移动机器人","中心点","两个","机器","格外"],"title":"机器人中的坐标系","title_tokens":["机器人","坐标","中","坐标系","机器","的"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_1","text":"ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。","text_tokens":["？","下","坐标系","海龟","两只","了解","先","通过","ros","小海龟","。","如何","我们","该","机器人","坐标","算法","一种","机器","示例","使用","基于","小海","tf","中","，","跟随","呢","的"],"title":"TF命令行操作","title_tokens":["操作","tf","命令","命令行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_2","text":"这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools $ sudo pip3 install transforms3d 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 当我们控制一只海龟运动时，另外一只海龟也会跟随运动。","text_tokens":["teleop","tf2","相应","功能","？","key","其中","海龟","具体","效果","包","就",".","这个","sudo","另外","-","transforms3d","先","run","通过","可以","tools","试一试","文件","之后","然后","launch","启动","小海龟","自动","ros","。","ros2","$","turtlesim","如何","我们","运动","来","py","跟随运动","turtle","一个","需要","会","示例","install"," ","apt","控制","小海","，","运行","也","demo","_","pip3","一只","跟随","humble","安装","当","的","时"],"title":"小海龟跟随例程","title_tokens":["例程","小海","海龟","小海龟","跟随"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_2","text":"在当前运行的两只海龟中，有哪些坐标系呢，我们可以通过这个小工具来做查看。 $ ros2 run tf2_tools view_frames 默认在当前终端路径下生成了一个frames.pdf文件，打开之后，就可以看到系统中各个坐标系的关系了。","text_tokens":["tf2","路径","终端","查看","坐标系","下","关系","海龟","在","pdf","两只","打开","就",".","了","这个","做","run","通过","可以","tools","默认","各个","文件","之后","。","view","$","工具","我们","看到","系统","坐标","来","当前","frames","一个"," ","小","运行","中","，","哪些","_","生成","ros2","呢","有","的"],"title":"查看TF树","title_tokens":["tf","查看","树"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_3","text":"只看到坐标系的结构还不行，如果我们想要知道某两个坐标系之间的具体关系，可以通过tf2_echo这个工具查看： $ ros2 run tf2_ros tf2_echo turtle2 turtle1 运行成功后，终端中就会循环打印坐标系的变换数值了，由平移和旋转两个部分组成，还有旋转矩阵。","text_tokens":["tf2","部分","turtle1","终端","查看","坐标系","旋转","关系","具体","组成","还","：","就","了","这个","数值","run","通过","可以","打印","矩阵","后","ros","想要","。","如果","ros2","变换","不行","结构","$","echo","看到","我们","工具","和","坐标","之间","循环","平移","会"," ","只","turtle2","由","，","运行","中","_","某","还有","知道","成功","两个","的"],"title":"查询坐标变换信息","title_tokens":["查询","坐标","信息","变换"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_4","text":"看数值还不直观？可以试试用可视化软件来做显示： $ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 再让小海龟动起来，Rviz中的坐标轴就会开始运动，这样是不是更加直观了呢！ 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。","text_tokens":["大家","：","prefix","-","案例","(","可视化","便于","看","意思","理解","再"," ","tf","中","是","呢","的","方法","这","软件","做","了解","可以","可视","。","我们","运动","/","rviz","慢慢","使用","d","share","ros2","着急","tf2","？","显示","开始","让","原理",".","数值","pkg","先","小海龟","有点","py","起来","turtle","更加","不",")","是不是","坐标轴","rviz2","跟随","背后","动","用","下","海龟","还","就","了","run","！","$","不是","直观","坐标","来","不要","会","怎样","小海","试试","，","_","--","这样"],"title":"坐标系可视化","title_tokens":["可视","坐标","坐标系","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_3","text":"我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为 静态TF变换 ，我们来看看在程序中该如何实现？","text_tokens":["情况","拆","激光","这种","？","那","坐标系","相对","关系","在","简单","说","只要","看看","就","呗","这个","好","比如","底盘","发生变化","之后","作用","称之为","之为","变化","。","哪个","变换","发生","应该","机器人","我们","和","如何","坐标","来","实现","之间","很","一个","你家","静态","不会","雷达","位置","不"," ","中该","管理","房子","tf","，","进行","试试","中","最为","生变","是","也","激光雷达","基本","程序","主要","常见","对","安装","机器","系统","的"],"title":"静态TF广播","title_tokens":["tf","广播","静态"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_5","text":"启动终端，运行如下命令： $ ros2 run learning_tf static_tf_broadcaster $ ros2 run tf2_tools view_frames 可以看到当前系统中存在两个坐标系，一个是world，一个是house，两者之间的相对位置不会发生改变，通过一个静态的TF对象进行维护。","text_tokens":["两者","tf2","终端","坐标系","broadcaster","相对","对象","static","：","改变","两者之间","run","通过","tools","可以","启动","world","learning","。","view","发生","$","两个","看到","坐标","frames","如下","当前","之间","一个","命令","静态","不会","维护","位置"," ","存在","house","运行","，","tf","中","_","进行","是","ros2","系统","的"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_6","text":"来看下在代码中是如何创建坐标系并且发布静态变换的。 learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？","text_tokens":["'","console","__","旋转","name","clock","#","：","-","z","(","super","中是","frame","后","rotation","transformations","变化","接口","10.0","self","pitch","}","点","该","translation","类","guyuehome","时间","node","一个","编写","def","geometry"," ","（","完成","bin","tf","中","器","进行","是","8","quaternion","呢","的","scripts","库","x","欧拉","utf","消息","等待","坐标系","broadcaster","关系","class","源","statictransformbroadcaster","这","static","1","w","加入","www","作者","from","父类","并且","world","编译","5.0","。","创建","转换","]","发布","变换","器类","到","如何","quat","将","我们","roll","python3","shutdown","/","python","四元","none","使用","entry","house","、","rclpy","并","*","广播","程序","msg","statictfbroadcaster","destroy","ros2","目标",":","tf2","transform","？","在","又","让","to","init","msgs",".","3",",","0","transformstamped","!","learning","yaw","\"","{","退出","2","经过","now","py","为","静态","0.0","child","需要","euler","示例","销毁",")","配置","coding","戳","usr","古月","系统","@","spin","points","=","居","功能","不变","下","setup","保持","对象","打开","sendtransform","包","了","main","查询","文件","入口","清楚","ros","向","描述","[","）","env","import","欧拉角","设置","y","数","代码","坐标","节点","header","如下","get","循环","平移","args","初始","stamp","com","位置","id","来看","选项","说明","，","时候","_","段","知道","初始化","两个"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_4","text":"我们再来学习下如何查询两个坐标系之间的位置关系。","text_tokens":["学习","如何","我们","的","查询","坐标","来","下","坐标系","关系","之间","。","两个","位置","再"],"title":"TF监听","title_tokens":["监听","tf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_7","text":"启动一个终端，运行如下节点，就可以在终端中看到周期显示的坐标关系了。 $ ros2 run learning_tf tf_listener","text_tokens":["终端","显示","关系","在","就","了","run","可以","启动","learning","。","$","看到","节点","坐标","如下","一个","周期"," ","listener","，","运行","中","tf","_","ros2","的"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_8","text":"这个节点中是如何查询坐标关系的，我们来看下代码。 learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。","text_tokens":["'","tflistener","信息","console","__","大家","异常","报告","lookup","name","#","：","-","z","案例","(","默认","super","中是","frame","默认值","后","rotation","transformations","接口","如果","self","左边","}","return","点","ex","translation","类","guyuehome","时间","node","一个",">","编写","def"," ","（","完成","bin","tf","进行","target","8","info","对","quaternion","的","挑战","scripts","库","x","utf","有所","等待","坐标系","broadcaster","关系","class","源","transformlistener","static","1","继续","这个","create","1.0","www","作者","获取","w","加入","了解","from","string","logger","父类","trans","world","编译","。","创建","]","变换","到","如何","我们","固定","quat","time","python3","当前","f","之间","shutdown","/","python","四元","进入","周期","使用","none","entry","house","并","rclpy","*","基本","姿态","程序","source","on","destroy","ros2","目标","s",":","tf2","现在","transform","让","to","两只","外部","init","监听",".","保存","数值","啦",",","好","0","存储","!","learning","buffer","not","\"","{","退出","名","2","now","py","时刻","transformexception","as","处理","失败","需要","pos","timer","定时器","euler","示例","%","销毁",")","关闭","配置","coding","usr","某","缓冲","古月","跟随","缓冲区","监听器","优先","系统","@","spin","否则","用","points","=","value","居","定时","功能","下","setup","海龟","对象","打开","包","try","了","main","查询","参数","文件","入口","ros","[","）","env","import","设置","参数值","y","数","代码","节点","坐标","parameter","get","循环","如下","args","初始","com","位置","来看","declare","listener","could","选项","说明","，","_","except","知道","--","初始化","两个"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_9","text":"还是之前小海龟跟随的示例，我们自己通过代码来实现一下。","text_tokens":["之前","。","我们","小海","通过","代码","，","来","实现","海龟","还是","小海龟","跟随","一下","自己","的","示例"],"title":"海龟跟随功能解析","title_tokens":["海龟","解析","功能","跟随"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_10","text":"先看下实现的效果，启动终端后，通过如下命令启动例程： $ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 看到的效果和ROS自带的例程相同。","text_tokens":["例程","teleop","终端","key","下","效果","相同","：",".","run","通过","launch","following","启动","后","learning","ros","自带","。","$","turtlesim","看到","和","实现","py","turtle","如下","命令"," ","先看","，","tf","demo","_","ros2","的"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_11","text":"在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心通过坐标系实现向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。","text_tokens":["得到","怎么","定义","得","长度","角度","该","看","实现","时间","一个","再"," ","与","想起","中","也","tf","同理","的","话题","turtle1","方法","坐标系","相对","所以","这","说","1","真器","做","这个","通过","可以","么","world","。","发布","计算","变换","加","如何","我们","运动","核心","很","封装","高中","周期","解决","参考","turtle2","广播","两者","距离","？","在","两只","监听","好","方向","怎么样","上","速度","和","2","起来","仿真器","表示","参考系","箭头","不","动态","叫做","是不是","某","跟随","要","有","动","时","例程","三个","用","一起","下","海龟","仿真","全局","就","向量","中心","了","比如","然后","向","描述","随便","不断","按照","不是","设置","代码","坐标","就是","位置","中间","学习","，","中心点","还会","连线","这样"],"title":"原理解析","title_tokens":["原理","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#launch","text":"先来看下刚才运行的launch文件，里边启动了四个节点，分别是： 小海龟仿真器 海龟1的坐标系广播 海龟2的坐标系广播 海龟跟随控制 其中，两个坐标系的广播复用了turtle_tf_broadcaster节点，通过传入的参数名修改维护的坐标系名称。 learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ])","text_tokens":["'","修改","name","：","(","frame","启动","return","}","generate","launchconfiguration","node","package","def"," ","tf","demo","target","是","传入","的","分别","turtle1","坐标系","broadcaster","里边","1","复用","真器","刚才","通过","from","launch","turtlename","。","]","launchdescription","/","控制","turtle2","parameters","广播","description",":","名称","其中",".",",","先","executable","following","小海龟","learning","{","turtlesim","名","2","py","仿真器","turtle","维护","default",")","运行","broadcaster1","跟随","=","value","下","海龟","四个","仿真","了","substitutions","sim","参数","文件","ros","[","import","节点","坐标","broadcaster2","actions","declarelaunchargument","来看","listener","小海","，","_","两个"],"title":"Launch文件解析","title_tokens":["launch","文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_12","text":"海龟1和海龟2在world坐标系下的坐标变换，在turtle_tf_broadcaster节点中实现，除了海龟坐标系的名字不同之外，针对两个海龟的功能是一样的。 learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], },","text_tokens":["'","信息","console","__","回调","转变","旋转","theta","name","clock","#","：","-","z","(","默认","q","super","frame","默认值","后","rotation","transformations","不同","接口","变化","self","}","pitch","点","translation","实现","类","guyuehome","时间","turtletfbroadcaster","node","一个","编写","def","geometry"," ","（","完成","bin","tf","中","器","进行","是","8","quaternion","的","scripts","订阅","库","x","函数","utf","消息","欧拉","等待","坐标系","broadcaster","class","源","static","1","subscription","create","w","www","作者","获取","加入","from","string","更新","父类","turtlename","world","编译","。","创建","转换","一样","]","变换","send","到","将","roll","python3","f","shutdown","/","python","四元","使用","none","entry","并","rclpy","、","*","广播","针对","程序","msg","destroy","ros2","目标",":","名称","tf2","transform","除了","在","让","to","the","外部","init","msgs",".","数值","3",",","0","者","transformstamped","!","小海龟","learning","yaw","\"","{","turtlesim","及时","callback","和","退出","2","now","py","turtle","为","处理","0.0","child","需要","euler","示例","销毁",")","关闭","配置","动态","coding","戳","usr","古月","优先","系统","@","spin","否则","用","points","=","value","居","功能","setup","下","海龟","对象","打开","sendtransform","包","之外","main","参数","变成","文件","入口","ros","transformbroadcaster","向","[","名字","）","env","import","欧拉角","设置","参数值","y","pose","数","代码","节点","坐标","header","parameter","get","循环","如下","平移","args","初始","stamp","com","位置","id","declare","选项","listener","transformation","小海","说明","，","_","知道","初始化","两个","转变成"],"title":"坐标系动态广播","title_tokens":["坐标","广播","坐标系","动态"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_13","text":"坐标系都正常广播了，接下来我们就可以订阅两只海龟的位置关系，并且变换成速度指令进行控制啦。 learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], },","text_tokens":["'","float","信息","console","__","异常","报告","查看","lookup","是否","theta","name","#","：","-","z","(","默认","super","cmd","frame","默认值","scripts","后","rotation","transformations","spawn","变化","接口","如果","self","左边","}","return","准备就绪","if","linear","4","角度","finished","ex","translation","xy","实现","类","点","guyuehome","时间","没有","node","一个","done","编写","def","geometry","vel"," ","发送","turtlefollowing","完成","bin","twist","tf","进行","8","info","spawning","的","已经","话题","订阅","speed","库","x","successfully","utf","消息","turtle1","call","提示","等待","坐标系","都","关系","broadcaster","class","源","transformlistener","位","static","务器","rel","1","加入","create","就绪","www","作者","获取","通过","可以","准备","from","string","logger","没","标志","父类","并且","trans","服务","编译","。","创建","spawned","]","发布","变换","计算","产生","指令","固定","我们","运动","到","angular","time","python3","跟随运动","当前","f","依然","/",".__","根据","shutdown","python","接下来","client","进入","周期","使用","5","none","entry","、","rclpy","控制","*","turtle2","广播","线速度","并","姿态","程序","msg","source","false","on","destroy","ros2","目标",":","tf2","is","transform","客户端","距离","true","rate","两只","to","外部","init","监听","math","msgs","atan2",".","保存","包括","数值","啦",",","0","srv","存储","following","!","learning","buffer","not","+","\"","{","角速度","下来","turtlesim","退出","速度","名","2","now","py","时刻","turtle","transformexception","表示","as","失败","需要","timer","定时器","示例","销毁",")","关闭","async","service","配置","request","coding","usr","publish","正常","缓冲","古月","跟随","缓冲区","监听器","优先","系统","@","sqrt","否则","用","spin","=","points","value","居","功能","定时","setup","publisher","海龟","对象","打开","还","包","就","成","请求","了","客户","try","main","参数","scale","文件","入口","ros","让","[","env","import","设置","参数值","y","result","代码","接下","坐标","节点","spawner","数据","parameter","get","循环","如下","服务器","args","初始","com","位置","else","declare","listener","could","选项","ready","内容","说明","，","生成","_","forward","except","知道","成功","初始化"],"title":"海龟跟随","title_tokens":["海龟","跟随"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_14","text":"https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":["-","tf2","main","tutorials","docs","org","/","https","ros","en","html","humble",":","."],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/","text":"URDF：机器人建模方法 ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法—— URDF ，用来描述机器人外观、性能等各方面属性。 机器人的组成 建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由 硬件结构、驱动系统、传感器系统、控制系统 四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备； 驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等； 传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境； 控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。 URDF ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是 XML格式 ，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为连杆Link，手肘就类似于机器人电机驱动部分，称为关节joint。 所以在URDF建模过程中，关键任务就是通过这里的<link>和<joint>，理清楚每一个连杆和关节的描述信息。 连杆Link的描述 <link>标签用来描述机器人某个刚体部分的外观和物理属性，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。 link里边的<visual>部分用来描述机器人的外观，比如： <geometry>表示几何形状，里边使用<mesh>调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的 <origin>表示坐标系相对初始位置的偏移，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分<collision>，描述碰撞参数，里边的内容似乎和<visual>一样，也有<geometry>和<origin>，看似相同，其实区别还是比较大的。 <visual>部分重在描述机器人看上去的状态，也就是视觉效果； <collision>部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过<visual>来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是<collision>里边<geometry>描述的形状。<origin>坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。 关节Joint描述 机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 parent标签：描述父连杆； child标签：描述子连杆，子连杆会相对父连杆发生运动； origin：表示两个连杆坐标系之间的关系，也就是图中红色的向量，可以理解为这两个连杆该如何安装到一起； axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的； limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等。 Info ROS中关于平移的默认单位都是m，旋转是弧度，不是度，所以这里3.14就表示可以在-180度到180度之间运动，速度也是m/s，或者rad/s。 完整机器人模型 最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。 创建机器人模型 好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。 功能包结构 机器人的模型放置在learning_urdf功能包中，功能包中包含的文件夹如下： urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件 模型可视化效果 我们先来看下这个模型的效果，尝试逆向分下一下机器人的结构。 $ ros2 launch learning_urdf display.launch.py 很快就可以看到Rviz中显示的机器人模型啦，大家可以使用鼠标拖拽观察。 从可视化的效果来看，这个机器人由五个link和4个joint组成。 查看URDF模型结构 我们分析的对不对呢，可以在模型文件的路径下，使用urdf_to_graphviz这个小工具来分析下。 $ urdf_to_graphviz mbot_base.urdf # 在模型文件夹下运行 运行成功后会产生一个pdf文件，打开之后就可以看到URDF模型分析的结果啦，是不是和我们的猜测完全相同呢！ 模型文件解析 具体URDF模型什么样的，还是要打开模型来研究。 learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot> 参考链接 https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":["路径","这里","提前","机械","各","频繁","定义","外观","之前","正","外部环境","radius","可视化","urdf","形成","如果","rad","传感器","树莓","直线","；","第六","一个","还是","yellow","link","这么","geometry","由","与","第二","系列","驱动器","蓝色","mbot","方法","看似","相对","关系","一些","这","里边","三维","1","version","material","单位向量","这个","0.015","矩阵","launch","。","感器","可视","才能","产生","固定","找","称为","件夹","算作","每个","一致","五个","meshes","控制","刚体","任务","这款","极限","wheel","着急","最终","连杆","允许","xml","raw","让","管理系统","啦","轮子","tutorials","mesh","https","等于","渲染","py","偏移","表示","肘关节","编码器","环境","度","叫","哪","状态","什么样","color","于","解析","一块","模型","给","还","就","了","外壳","高","main","手臂","参数","类似","圆柱","joint","此时","熟悉","$","什么","就是","来","括号","鼠标","过程","xyz","会","sphere","猜测","内容","应用软件","_","常见","这样","质量","自身","—","局","旋转","像头","name","属性","为了","市面","type","默认","rpy","包中","启动","变化","未来","机器人","提供","该","尝试",">","完整"," ","拖拽","info","安装","planar","等等","robot","分别","cylinder","都","continuous","一系","较","软件","相关","肌肉","通过","可以","关于","revolute","所有","以及","创建","从","链接","我们","运动","将","之间","m","接触","似乎","限制","rviz","参考","电机","源代码","ros2","开发","碰撞检测","颜色","？","collision","全称","转关","看上去","to","最大","圆柱体","包括","graphviz","先","介绍","无论是","方向","看上","上","少","网页","两种","先来","docs","第六种","操作","认识","不会","child","码器","示例","柱体","属于","研究","是不是","正常","当然","主要","唯一","length","要","系统","格式","时","放置","用","0.16","部分","=","?","重在","载体","white","装置","要求","比如","！","org","清楚","ros","派","专门","right","caster","带有","位置","设计","碰撞","放在","红色","思路","包含","时候","两个","一起","一种","比较","沿某","驱动","分下","必须","为此","外界","质心","：","#","z","-","尖括号","后","一下","pitch","html","每","4","便于","角度","0.06","1.5707","floating","操作系统","理解","小车","再","自定","中","进行","stl","哪些","二个","0.4","是","第二个","x","fixed","模型简化","电脑","组成","left","轴","了解","不能","统一","单位","包围","简化","parent","工具","大臂","组成部分","度到","真实","/","把","标签","相对运动","prismatic","细节","组合而成","xacro","理","或","多","s",":","控制系统","front","这种","摄像头","其中","在","外部","相机",".","0","惯性","之后","分解","清晰","learning","驱使","几何","连接","配置文件","看到","和","应用","为","雷达","需要","自己","分析","0.05","个","管理","不仅","配置","叫做","传感","运行","类型","某","0.095","无限","rgba","组合","display","自定义","或者","imu","pdf","相同","向量","手","limit","实打实","硬件","设备","180","底盘","文件","编码","不过","名字","右侧","按照","完全相同","0.9","不是","back","如下","0.95","平移","初始","axis","上去","则","来看","，","建模","关键","机器","围绕","四大","信息","<","大家","复杂","某个","查看","大","具体","得","origin","无论","动机","性能","板载","在于","3.14","看","调用","0.19","旋转关节","六种","成功","管理系","而是","子","完成","为例","也","对","效果","呢","的","完全","一段","所以","坐标系","市面上","滑动","以","父","1.0","他们","形状","独立","方面","建模语言","算力","一样","计算","视觉","框","结构","到","如何","浮动","roll","有点像","en","无法","全为","使用","视觉效果","、","区别","全都","humble","讲","名称","一系列","移动","小臂","引用","显示","尺寸","base","用来","保存","面上","检测","它","好","观察","独自","\"","发生","0.20","速度","有点","起来","等","black","方式","不","臂","车体","乍","电源","逆向","实际","最小","有","这些","弧度","存放","功能","下","感知","0.025","打开","绿色","包","其实","visual","桌子","很快","结果","的话","关节","描述","物理","0.18","y","语言","代码","平台","坐标","看下","一般","平面","图中","小","手肘","移动机器人","摄像","文件夹"],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf","text":"ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法—— URDF ，用来描述机器人外观、性能等各方面属性。","text_tokens":["方法","—","？","下","在","为此","给","让","各","还","属性","外观","得","用来","了","之前","啦","性能","介绍","urdf","方面","ros","不过","描述","。","专门","机器人","我们","如何","提供","操作系统","一种","一个","等","操作","认识","把","呢","使用"," ","、","，","建模","是","当然","要","机器","系统","的"],"title":"URDF：机器人建模方法","title_tokens":["机器人","方法","建模","urdf","机器","："]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_1","text":"建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由 硬件结构、驱动系统、传感器系统、控制系统 四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备； 驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等； 传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境； 控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。","text_tokens":["驱动","四大","像头","机械","无论","动机","市面","板载","传感器","树莓","每","；","机器人","便于","操作系统","一个","还是","管理系","再"," ","由","中","进行","是","安装","的","等等","驱动器","都","一些","这","市面上","里边","电脑","组成","软件","通过","可以","感器","。","以及","建模语言","计算","结构","我们","组成部分","把","使用","、","控制","电机","开发","控制系统","移动","摄像头","外部","面上","管理系统","包括","先","无论是","分解","驱使","上","看到","和","应用","起来","等","操作","雷达","需要","自己","码器","编码器","环境","臂","管理","状态","传感","电源","正常","主要","系统","这些","组合","部分","载体","装置","imu","感知","外壳","了","其实","实打实","硬件","设备","参数","比如","底盘","编码","类似","清楚","描述","熟悉","派","按照","语言","平台","就是","过程","一般","思路","，","建模","应用软件","移动机器人","摄像","常见","机器"],"title":"机器人的组成","title_tokens":["的","机器","机器人","组成"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_1","text":"ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是 XML格式 ，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为连杆Link，手肘就类似于机器人电机驱动部分，称为关节joint。 所以在URDF建模过程中，关键任务就是通过这里的<link>和<joint>，理清楚每一个连杆和关节的描述信息。","text_tokens":["驱动","信息","<","自身","大家","这里","必须","机械","属性","外部环境","尖括号","urdf","每","机器人","看","一个","link",">"," ","由","中","也","是","系列","呢","的","方法","相对","都","所以","组成","一系","这个","肌肉","通过","可以","他们","独立","统一","包围","。","才能","产生","如何","我们","运动","大臂","有点像","称为","算作","无法","标签","相对运动","使用","刚体","组合而成","电机","任务","理","源代码","开发","一系列","小臂","连杆","xml","？","全称","看上去","其中","在","外部","之后","清晰","独自","看上","连接","网页","和","有点","肘关节","自己","环境","臂","不仅","叫做","乍","于","格式","这些","组合","部分","模型","下","还","手","就","手臂","桌子","比如","文件","类似","清楚","ros","关节","描述","joint","右侧","代码","就是","括号","过程","上去","手肘","，","建模","关键","机器","这样"],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#link","text":"<link>标签用来描述机器人某个刚体部分的外观和物理属性，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。 link里边的<visual>部分用来描述机器人的外观，比如： <geometry>表示几何形状，里边使用<mesh>调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的 <origin>表示坐标系相对初始位置的偏移，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分<collision>，描述碰撞参数，里边的内容似乎和<visual>一样，也有<geometry>和<origin>，看似相同，其实区别还是比较大的。 <visual>部分重在描述机器人看上去的状态，也就是视觉效果； <collision>部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过<visual>来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是<collision>里边<geometry>描述的形状。<origin>坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。","text_tokens":["质量","<","复杂","旋转","某个","提前","大","机械","name","定义","属性","外观","外界","：","origin","为了","质心","动机","z","如果","未来","pitch","；","机器人","该","调用","一个","还是","link",">","小车","geometry"," ","为例","与","自定","中","第二","stl","也","二个","是","效果","的","第二个","蓝色","x","分别","看似","坐标系","相对","模型简化","里边","三维","较","以","软件","这个","通过","可以","形状","矩阵","。","算力","一样","计算","视觉","框","简化","到","如何","我们","运动","将","roll","真实","接触","似乎","全为","标签","算作","一致","使用","视觉效果","、","刚体","控制","区别","名称","移动","碰撞检测","连杆","颜色","collision","看上去","raw","在","尺寸","用来","圆柱体","包括","检测","它","好","轮子","0","惯性","方向","mesh","几何","看上","连接","上","和","偏移","表示","等","需要","柱体","不","臂","状态","车体","实际","有","时","用","部分","模型","重在","自定义","相同","绿色","就","了","其实","高","visual","要求","参数","比如","文件","的话","类似","圆柱","物理","描述","joint","y","就是","坐标","来","如下","过程","平移","会","初始","上去","位置","则","设计","碰撞","内容","，","时候","移动机器人","机器","比较","这样"],"title":"连杆Link的描述","title_tokens":["的","描述","link","连杆"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#joint","text":"机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 parent标签：描述父连杆； child标签：描述子连杆，子连杆会相对父连杆发生运动； origin：表示两个连杆坐标系之间的关系，也就是图中红色的向量，可以理解为这两个连杆该如何安装到一起； axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的； limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等。 Info ROS中关于平移的默认单位都是m，旋转是弧度，不是度，所以这里3.14就表示可以在-180度到180度之间运动，速度也是m/s，或者rad/s。","text_tokens":["围绕","旋转","这里","机械","频繁","：","origin","z","正","-","默认","urdf","变化","在于","rad","直线","每","；","机器人","角度","该","3.14","第六","floating","理解","旋转关节","一个","六种","还是","link","而是","小车","子"," ","中","也","进行","是","info","安装","的","planar","一段","相对","都","坐标系","关系","这","fixed","滑动","一些","所以","continuous","较","1","单位向量","轴","父","这个","通过","可以","不能","关于","revolute","单位","。","才能","产生","parent","到","固定","浮动","运动","如何","度到","之间","m","/","限制","标签","相对运动","使用","prismatic","刚体","电机","极限","区别","s","最终","连杆","允许","这种","xml","转关","在","比较","最大","相机","轮子","之后","方向","等于","发生","连接","上","少","速度","和","两种","为","第六种","表示","等","不会","child","方式","不","臂","度","叫","哪","属于","类型","某","无限","唯一","最小","要","有","弧度","模型","或者","向量","就","limit","了","180","比如","不过","ros","关节","joint","描述","此时","名字","不是","什么","就是","坐标","一般","带有","平移","平面","图中","会","axis","位置","红色","内容","，","两个","机器","一起","一种","沿某","这样"],"title":"关节Joint描述","title_tokens":["joint","关节","描述"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_2","text":"最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。","text_tokens":["robot","最终","部分","一块","模型","局","大家","所以","下","在","组成","就","了","这个","了解","先","之后","所有","urdf","形成","joint","描述","。","着急","每","机器人","和","代码","看","先来","找","一个","link","时","标签","每个","完整","再","放在","不"," ","完成","细节","由","，","中","哪些","某","是","全都","对","机器","的","完全","组合"],"title":"完整机器人模型","title_tokens":["模型","机器","机器人","完整"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_3","text":"好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。","text_tokens":["移动","模型","以","了","动机","啦","好","它","urdf","。","要","机器人","我们","看","看下","过程","一个","还是","这么","完整","示例"," ","为例","，","这款","建模","移动机器人","多","讲","机器","一起","的"],"title":"创建机器人模型","title_tokens":["模型","创建","机器","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_4","text":"机器人的模型放置在learning_urdf功能包中，功能包中包含的文件夹如下： urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件","text_tokens":["放置","存放","模型","功能","引用","在","：","保存","相关","文件","urdf","launch","包中","启动","learning","渲染","配置文件","机器人","如下","件夹","rviz"," ","配置","meshes","xacro","，","包含","中","_","或","机器","的","文件夹"],"title":"功能包结构","title_tokens":["包","功能","结构"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_5","text":"我们先来看下这个模型的效果，尝试逆向分下一下机器人的结构。 $ ros2 launch learning_urdf display.launch.py 很快就可以看到Rviz中显示的机器人模型啦，大家可以使用鼠标拖拽观察。 从可视化的效果来看，这个机器人由五个link和4个joint组成。","text_tokens":["display","模型","分下","大家","下","显示","组成","就",".","这个","啦","先","可视化","可以","很快","launch","urdf","观察","learning","joint","一下","。","ros2","可视","结构","$","4","从","机器人","我们","看到","和","尝试","py","鼠标","link","rviz","来看"," ","使用","五个","拖拽","个","由","，","中","_","逆向","效果","机器","的"],"title":"模型可视化效果","title_tokens":["模型","可视化","效果","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_2","text":"我们分析的对不对呢，可以在模型文件的路径下，使用urdf_to_graphviz这个小工具来分析下。 $ urdf_to_graphviz mbot_base.urdf # 在模型文件夹下运行 运行成功后会产生一个pdf文件，打开之后就可以看到URDF模型分析的结果啦，是不是和我们的猜测完全相同呢！","text_tokens":["mbot","路径","模型","下","在","pdf","to","打开","相同","base","#","就",".","这个","graphviz","啦","可以","！","文件","之后","urdf","结果","后","。","完全相同","产生","$","不是","工具","我们","看到","和","来","一个","件夹","会","分析","猜测","不","使用"," ","小","完全","，","运行","是不是","_","成功","对","呢","的","文件夹"],"title":"查看URDF模型结构","title_tokens":["urdf","查看","模型","结构"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_6","text":"具体URDF模型什么样的，还是要打开模型来研究。 learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot>","text_tokens":["robot","mbot","0.16","=","<","front","模型","?","xml","cylinder","white","具体","0.025","打开","name","continuous","1","version","material","base","origin","left",".","-","1.0","radius","visual","0","type","0.015","urdf","rpy","learning","joint","。","\"","0.9","parent","0.18","right","什么","0.20","back","caster","0.06","来","0.19","1.5707","xyz","0.95","/","还是","yellow","link",">","child","axis","sphere","black","geometry"," ","0.05","什么样","，","研究","0.4","_","color","0.095","wheel","length","要","rgba","的"],"title":"模型文件解析","title_tokens":["模型","文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_7","text":"https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":["-","main","tutorials","docs","urdf","org","/","https","ros","en","html","humble",":","."],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/","text":"Gazebo：三维物理仿真平台 ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台 Gazebo ，了解一下。 Gazebo仿真平台 介绍 Gazebo是ROS系统中最为常用的 三维物理仿真平台 ，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。 安装 Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-* 运行 通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py Attention 为保证模型顺利加载，请将离线模型下载并放置到~/.gazebo/models路径下 下载链接： https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。 XACRO机器人模型优化 我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本——XACRO文件。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro 以下是一些常用的XACRO文件语法，大家了解下。 常量定义 <xacro:property>标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。 数学计算 如果需要做数学计算，同样是在$加大括号中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 Info 所有数学运算都会转换成浮点数进行，以保证运算精度 宏定义 机器人的轮子我们也做成宏定义，定义方式是通过这个<xacro:macro>标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。 文件包含 宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。 机器人仿真模型配置 完善物理参数 第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。 添加Gazebo标签 第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。 配置传动装置 第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。 添加控制器插件 第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。 构建仿真环境 接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ]) 机器人运动仿真 万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard Attention 虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 通过键盘上的“i、j、，、l”几个按键，就可以控制机器人前后左右运动啦。 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。 Ignition：下一代Gazebo 随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为 Ignition ，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 运行成功后，会打开Ignition的仿真界面和Rviz上位机，我们可以看到RGBD相机仿真后发布的图像数据。 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/ 附录：机器人完整模型 learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["路径","区分","libgazebo","这里","常用","频繁","加载","定义","matter","官方网","写","验证","之前","(","radius","四步","cmd","~","urdf","frame","spawn","blue","不同","如果","无人机","}","传感器","实现","算法","一个","github","doesn","link","yellow","二步","第四步","第二句","geometry","以上","传动","第二","跑","已经","mbot","升级","方法","相对","关系","一些","这","里边","上来","可能","三维","1","version","material","高质量","这个","没","运算","一代","www","可编","single","0.015","限飞","launch","world","。","感器","转换","]","发布","俱备","上位","技术","filename","launchdescription","time","几个","找","val","附录","每个","python","5","by","两句","并","控制","条件","去","share","针对","ixy","wheel","false","inertial","h","一句","is","xml","join","output","让","硬件加速","添加","某些","啦","ixx","轮子","变量","find","https","渲染","官方","保证","mass","l","py","一行","仿真器","load","drive","actuator","环境","公式","度","叫","装上","hardwareinterface","想不起来","原本","嵌套","color","a","当","以下","file","force","list","模型","macro","worlds","index","主角","给","还","就","了","甚至","参数","diff","常量","构建","类似","matrix","joint","此时","化","$","换成","echo","参数设置","节点","来","we","记得","括号","就是","过程","get","xyz","会","sphere","确保","svga","图像","很长","_","packages","want","size","流畅","这样","质量","—","怎么","像头","表面","同时","输入","属性","name","为了","differential","3.14159","必备","type","rpy","启动","变化","转换成","未来","path","generate","机器人","提供","该","ignitionrobotics","尝试","数学计算","velocityjointinterface","--",">","周边环境","离线","浮点数","完整"," ","camera","directory","info","万事","安装","互相","robot","cylinder","be","都","continuous","结束","enabled","友好","做","相关","真器","通过","可以","语句","from","无人","所有","更","创建","our","t","命名","acceleration","从","链接","我们","将","运动","机","摩擦","很","m","max","命令","接下来","rviz","install","this","必要","传动装置","电机","参考","ros2","开发","teleop","传递数据","颜色","0.001","？","collision","加大","true","to","the","arguments","sudo","pkg","直接","宏","先",",","传递","介绍","20","yaw","模拟","点数","前后左右","attention","use","见证","前后","用到","下来","上","课程","万事俱备","优化","j","认识","丰富","不会","0.0","iyy","child","完善",")","是不是","publish","osrf","最为","gray","图形","当然","方便","主要","length","要","系统","格式","时","放置","用","虚拟机","=","0.16","?","可","box","装置","set","名为","考虑","第三","比如","org","重复","ros","加法","import","再用","部署","right","“","pose","caster","接下","续航","actions","com","位置","设计","文件格式","碰撞","12","一定","小海","包含","only","时候","问题","这句","sources","两个","一起","第四","得到","30","you","刚好","不多","0.75","me","iyz","：","#","-","第一步","另外","z","izz","后","一下","人机","odometry","版本","更为","4","每","if","角度","场景","0.06","command","数学","没有","理解","pi","node","keyboard","小车","再","so","vel","导致","models","tf","中","进行","0.4","”","ament","是","where","reflect","新","x","函数","左右","r","差不多","include","fixed","plugin","left","除法","加入","了解","不能","update","弹性系数","trans","params","ign","parent","mechanicalreduction","认识一下","/","引擎","把","demos","标签","ignition","own","xacro","interface","*","似曾","基本","力学","镜像","多","动力学","description",":","turngravityoff","front","这种","sure","像","摄像头","在","footprint","rate","周边","相机","切分",".","数值","3","0","惯性","浮点","插件","做成","reference","learning","bridge","xmlns","看到","和","应用","i","2","时刻","为","改成","为止","需要","http","关闭","apt","个","不仅","c语言","配置","一步","较大","0.05","传感","运行","奇迹","某","整个","弹性","rgba","diameter","相识","出现","精度","value","因为","冗余","publisher","os","你","仿真","simpletransmission","ixz","网站","sim","run","硬件","底盘","文件","不过","separation","名字","correctly","值为","provided","不是","back","总体","语法","根本","及","0.95","defining","axis","分配","摩擦力","into","motor","3.1415926","放到","，","试试","建模","have","0.2","机器","'","---","信息","all","<","大家","复杂","很多","简单","修改","得","origin","实验","prefix","动机","火星","joints","编程","新一代","系数","pythonlaunchdescriptionsource","接口","差速","bashrc","return","办法","c","screen","调用","0.19","火星车","package","成功","b","def","完成","state","twist","测试","也","inertia","colors","于是","对","效果","呢","随着","的","可编程","change","rgbd","所以","下一代","以","第三步","帮助","make","1.0","么","第一","一样","计算","还要","到","如何","odom","怎么办","尽量","流程","交给","有点像","items","and","使用","、","property","下载","controller","source","humble","torque","名称","官方网站","移动","高质","实物","想不起","gazebo","那","topic","includelaunchdescription","尺寸","base","用来","请","wiki","它","好","executable","hardware","!","小海龟","支持","in","似曾相识","+","\"","{","important","0.20","速度","有点","起来","等","比","界面","二句","进步","black","方式","不","spwan","really","虚拟","同样","重复使用","有","这些","控制器","transmission","迭代","功能","下","export","海龟","0.025","打开","包","used","neighborhood","visual","然后","结果","加速","物理","描述","关节","[","不断","第一句","设置","y","语言","vgpu10","按键","0.18","代码","平台","数据","spawner","键盘","不妨","动力","模块","顺利","entity","试一下","for","第二步","移动机器人","them","摄像","三步","手边"],"title":"Gazebo","title_tokens":["gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo","text":"ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台 Gazebo ，了解一下。","text_tokens":["实物","gazebo","？","主角","怎么","三维","仿真","没","了解","ros","物理","一下","如果","。","机器人","我们","平台","怎么办","没有","机器"," ","，","问题","是","当然","呢","开发","手边"],"title":"Gazebo：三维物理仿真平台","title_tokens":["平台","gazebo","物理","三维","仿真","："]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_1","text":"","text_tokens":[],"title":"Gazebo仿真平台","title_tokens":["平台","gazebo","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_1","text":"Gazebo是ROS系统中最为常用的 三维物理仿真平台 ，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。","text_tokens":["质量","不多","常用","频繁","表面","属性","实验","验证","火星","系数","人机","无人机","办法","机器人","场景","提供","实现","算法","火星车","没有","一个","周边环境","再"," ","导致","中","测试","是","的","差不多","所以","都","上来","可能","三维","高质量","做","帮助","加入","可以","无人","弹性系数","限飞","。","更","到","我们","摩擦","使用","、","力学","多","动力学","开发","高质","实物","gazebo","那","在","周边","先","支持","渲染","模拟","和","应用","优化","为","等","环境","不仅","运行","最为","图形","要","弹性","系统","用","还","仿真","就","了","比如","类似","ros","物理","此时","部署","平台","续航","及","不妨","动力","设计","摩擦力","，","引擎","机器","这样"],"title":"介绍","title_tokens":["介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_2","text":"Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-*","text_tokens":["gazebo","？","功能","大家","都","给","简单","包","为了","：","了","sudo","相关","-","它","直接","先","通过","可以","ros","一下","。","$","如何","我们","和","起来","认识一下","一个","不妨","命令","把","认识","完整","install","使用"," ","确保","apt","的","装上","*","，","中","跑","安装","humble","互相","呢","系统","已经","这样"],"title":"安装","title_tokens":["安装"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_3","text":"通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py Attention 为保证模型顺利加载，请将离线模型下载并放置到~/.gazebo/models路径下 下载链接： https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。","text_tokens":["路径","大家","加载","：","动机","之前","~","启动","机器人","该","尝试","github","离线"," ","models","中","的","通过","可以","launch","么","。","还要","到","链接","我们","将","运动","/","命令","把","接下来","并","控制","下载","ros2",":","移动","gazebo","？","在",".","请","啦","它","https","attention","下来","课程","保证","py","为","认识","环境","是不是","osrf","放置","模型","下","还","仿真","就","了","ros","$","不是","接下","记得","com","设计","顺利","放到","，","试试","_","这句","移动机器人","机器","一起"],"title":"运行","title_tokens":["运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#xacro","text":"我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本——XACRO文件。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro 以下是一些常用的XACRO文件语法，大家了解下。","text_tokens":["—","大家","复杂","这里","常用","像头","定义","：","为了","写","动机","之前","-","编程","urdf","不同","接口","如果","一下","版本","更为","传感器","4","机器人","实现","调用","没有","一个","link","b","小车"," ","中","也","是","对","安装","的","可编程","升级","函数","方法","都","一些","可能","友好","做","加入","没","了解","语句","可以","不能","可编","通过","。","创建","更","一样","感器","计算","我们","命令","把","每个","接下来","install","使用","、","xacro","必要","条件","多","humble","移动","传递数据","gazebo","像","摄像头","在","尺寸","让","切分","sudo","直接","好","宏","轮子","传递","介绍","变量","先","下来","优化","需要","丰富","个","叫","apt","传感","同样","重复使用","a","要","有","格式","以下","放置","模型","功能","下","可","给","还","你","包","就","了","甚至","比如","底盘","文件","常量","然后","重复","ros","此时","描述","化","再用","$","代码","总体","数据","接下","语法","过程","会","设计","文件格式","模块","放到","，","包含","很长","时候","建模","移动机器人","这句","摄像","机器"],"title":"XACRO机器人模型优化","title_tokens":["机器人","xacro","模型","优化","机器"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_4","text":"<xacro:property>标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。","text_tokens":["移动","质量","<","模型","都","一些","在","加大","里边","尺寸","修改","定义","就","用来","了","名为","3.14159","动机","好","轮子","通过","比如","可以","底盘","文件","这些","常量","urdf","方便","。","变化","未来","值为","$","机器人","“","我们","数据","调用","一行","括号","找","很","一个","m","把",">","标签","不会","需要","位置","不","使用"," ","、","xacro","，","中","也","时候","_","property","”","针对","原本","移动机器人","pi","安装","机器","的",":","这样"],"title":"常量定义","title_tokens":["定义","常量"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_5","text":"如果需要做数学计算，同样是在$加大括号中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 Info 所有数学运算都会转换成浮点数进行，以保证运算精度","text_tokens":["得到","怎么","很多","修改","写","动机","转换成","如果","未来","机器人","数学计算","数学","一个","浮点数"," ","中","进行","是","info","的","相对","都","关系","这","可能","以","做","这个","除法","加入","运算","通过","可以","所有","。","转换","计算","我们","尽量","移动","想不起","在","加大","数值","直接","浮点","点数","和","保证","起来","改成","需要","公式","想不起来","同样","某","有","精度","模型","就","了","比如","常量","结果","加法","$","换成","数据","来","根本","括号","会","位置","，","时候","移动机器人","两个","机器"],"title":"数学计算","title_tokens":["数学","数学计算","计算"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_6","text":"机器人的轮子我们也做成宏定义，定义方式是通过这个<xacro:macro>标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。","text_tokens":["<","刚好","区分","这里","同时","定义","输入","-","c","机器人","调用","一个","link",">","b"," ","中","也","是","的","函数","关系","一些","这","里边","1","这个","通过","可以","。","一样","我们","几个","把","标签","使用","两句","、","xacro","镜像","名称",":","像","在","宏","好","轮子","做成","用到","和","需要","方式","要","当","a","出现","macro","模型","还","就","了","参数","比如","joint","描述","关节","名字","设置","参数设置","来","记得","会","位置","，","包含","时候","两个","机器","这样"],"title":"宏定义","title_tokens":["定义","宏"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_7","text":"宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。","text_tokens":["相识","函数","模型","这种","include","像","这里","一些","里边","结束","定义","还","仿真","得","了","做","某些","另外","宏","加入","必备","可以","参数","底盘","文件","做成","然后","。","似曾相识","不是","下来","语言","机器人","我们","到","和","接下","优化","调用","流程","没有","很","一个","把","为止","接下来","再","模块","使用"," ","c语言","去","，","包含","也","是不是","似曾","嵌套","中","是","于是","对","机器","的"],"title":"文件包含","title_tokens":["包含","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_8","text":"","text_tokens":[],"title":"机器人仿真模型配置","title_tokens":["配置","机器人","模型","仿真","机器"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_9","text":"第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。","text_tokens":["因为","gazebo","都","属性","仿真","第一步","惯性","参数","第一","物理","。","每","和","平台","一个","link","需要","碰撞","确保","一步","必要","一定","，","是","有","的"],"title":"完善物理参数","title_tokens":["完善","参数","物理"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_2","text":"第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。","text_tokens":["颜色","gazebo","因为","所以","冗余","在","得","为了","添加","做","可以","urdf","渲染","不同","。","每","和","为","一个","link","标签","二步","配置","一步","第二","，","中","第二步","是","主要","系统","的","这样"],"title":"添加Gazebo标签","title_tokens":["标签","gazebo","添加"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_10","text":"第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。","text_tokens":["装置","给","仿真","第三步","了","第三","可以","joint","。","运动","为","理解","一个","配置","传动","传动装置","电机","，","是","三步","要","的"],"title":"配置传动装置","title_tokens":["装置","传动装置","配置","传动"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_11","text":"第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。","text_tokens":["控制器","gazebo","那","下","在","就","添加","了","可以","四步","插件","不同","差速","。","两个","角度","速度","来","交给","第四","一个","小车","第四步","分配","完成","控制","电机","，","是","要","的","这样"],"title":"添加控制器插件","title_tokens":["控制","控制器","添加","插件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_12","text":"接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ])","text_tokens":["'","---","all","you","<","me","加载","name","matter","#","z","-","(","urdf","pythonlaunchdescriptionsource","spawn","path","}","return","generate","if","提供","screen","一个","package","node","doesn","def"," ","directory","state","中","ament","where","的","robot","x","change","mbot","include","be","enabled","make","from","single","launch","world","。","our","]","t","到","如何","launchdescription","time","val","/","items","把","python","接下来","by","own","share","description",":","gazebo","sure","join","topic","output","includelaunchdescription","true","to","the","arguments",".","pkg",",","executable","!","learning","yaw","{","use","用到","下来","py","load","需要","0.0","spwan",")","really","a","file","force","=","模型","功能","worlds","index","publisher","set","os","就","了","考虑","sim","run","neighborhood","ros","[","correctly","import","provided","y","pose","接下","节点","spawner","we","get","actions","into","entity","，","only","_","packages","want","have","them","sources"],"title":"构建仿真环境","title_tokens":["构建","仿真","环境"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_13","text":"万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard Attention 虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 通过键盘上的“i、j、，、l”几个按键，就可以控制机器人前后左右运动啦。 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。","text_tokens":["复杂","很多","：","urdf","~","启动","bashrc","机器人","keyboard",">","第二句"," ","以上","twist","第二","中","”","万事","的","已经","左右","通过","可以","launch","第一","。","俱备","我们","运动","几个","有点像","流程","/","命令","接下来","两句","、","控制","基本","ros2","一句","teleop","gazebo","硬件加速",".","啦","0","小海龟","learning","\"","前后左右","attention","见证","前后","下来","上","i","万事俱备","有点","l","和","py","时刻","j","load","比","二句","需要","环境","关闭","奇迹","运行","虚拟","整个","时","虚拟机","=","export","海龟","仿真","就","了","run","硬件","不过","加速","此时","第一句","$","vgpu10","echo","按键","“","接下","就是","节点","过程","键盘","into","svga","小海","，","_","机器"],"title":"机器人运动仿真","title_tokens":["仿真","机器","机器人","运动"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#ignitiongazebo","text":"随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为 Ignition ，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 运行成功后，会打开Ignition的仿真界面和Rviz上位机，我们可以看到RGBD相机仿真后发布的图像数据。 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/","text_tokens":["信息","大家","官方网","-","新一代","后","变化","一下","版本","ignitionrobotics"," ","camera","也","效果","随着","的","新","rgbd","都","真器","www","一代","可以","launch","。","更","发布","ign","命名","从","我们","技术","上位","机","/","demos","ignition","rviz","install","参考","多","humble","ros2",":","官方网站","gazebo","在","相机",".","sudo","渲染","bridge","官方","上","看到","和","py","仿真器","为","界面","进步","度","apt","较大","运行","有","迭代","打开","仿真","网站","org","ros","不断","$","平台","数据","来","不妨","会","试一下","图像","，","_","成功","流畅"],"title":"Ignition：下一代Gazebo","title_tokens":["一代","gazebo","：","下一代","ignition"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_14","text":"learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["30","<","0.75","libgazebo","iyz","name","origin","prefix","differential","z","-","izz","(","radius","type","joints","cmd","urdf","rpy","frame","blue","odometry","}","0.06","command","0.19","velocityjointinterface","yellow","--","link",">","geometry","so"," ","vel","tf","0.4","inertia","colors","reflect","robot","mbot","x","r","include","cylinder","fixed","continuous","plugin","1","version","material","left","1.0","www","0.015","update","trans","params","parent","mechanicalreduction","acceleration","odom","filename","max","/","m","and","5","this","xacro","interface","*","ixy","property","wheel","controller","false","inertial","source","torque",":","h","turngravityoff","front","is","0.001","gazebo","xml","collision","topic","footprint","true","rate","to","the","base",".","wiki","3","ixx","hardware","0","20","find","reference","!","in","learning","xmlns","+","\"","{","important","0.20","mass","2","drive","iyy","black","child","http","actuator",")","0.05","hardwareinterface","publish","gray","color","length","rgba","diameter","list","transmission","0.16","=","value","?","macro","box","0.025","simpletransmission","used","ixz","visual","diff","org","ros","matrix","joint","separation","$","0.18","y","right","back","caster","xyz","0.95","defining","sphere","axis","12","motor","3.1415926","for","_","size","0.2","pi"],"title":"附录：机器人完整模型","title_tokens":["机器人","模型","附录","机器","：","完整"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/","text":"Rviz：三维可视化显示平台 大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾—— Rviz ，一款三维可视化显示的神器。 Rviz三维可视化平台 机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。 Rviz介绍 一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。 运行方法 启动一个终端，使用如下命令即可启动： $ ros2 run rviz2 rviz2 彩色相机仿真与可视化 摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。 仿真插件配置 关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 learning_gazebo/urdf/sensers/camera_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"camera\" name= \"camera_node\" > <update_rate> 30.0 </update_rate> <camera name= \"head\" > <horizontal_fov> 1.3962634 </horizontal_fov> <image> <width> 1280 </width> <height> 720 </height> <format> R8G8B8 </format> </image> <clip> <near> 0.02 </near> <far> 300 </far> </clip> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.007 </stddev> </noise> </camera> <plugin name= \"gazebo_camera\" filename= \"libgazebo_ros_camera.so\" > <ros> <!-- <namespace>stereo</namespace> --> <remapping> ~/image_raw:=image_raw </remapping> <remapping> ~/camera_info:=camera_info </remapping> </ros> <camera_name> ${prefix} </camera_name> <frame_name> ${prefix}_link </frame_name> <hack_baseline> 0.2 </hack_baseline> </plugin> </sensor> </gazebo> 主要配置项如下： 标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 - 标签：加载摄像头仿真插件 运行仿真环境 模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py 可以使用命令行看下仿真出来的图像话题： 图像数据可视化 我们使用Rviz可视化显示图像信息，先来启动Rviz： $ ros2 run rviz2 rviz2 启动成功后，在左侧Displays窗口中点击“Add”，找到Image显示项，OK确认后就可以加入显示列表啦，然后配置好该显示项订阅的图像话题，就可以顺利看到机器人的摄像头图像啦。 三维相机仿真与可视化 二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。 仿真插件配置 三维相机使用的Gazebo插件也是libgazebo_ros_camera.so，配置方法如下： learning_gazebo/urdf/sensers/kinect_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"depth\" name= \"${prefix}\" > <always_on> true </always_on> <update_rate> 15.0 </update_rate> <pose> 0 0 0 0 0 0 </pose> <camera name= \"kinect\" > <horizontal_fov> ${60.0*M_PI/180.0} </horizontal_fov> <image> <format> R8G8B8 </format> <width> 640 </width> <height> 480 </height> </image> <clip> <near> 0.05 </near> <far> 8.0 </far> </clip> </camera> <plugin name= \"${prefix}_controller\" filename= \"libgazebo_ros_camera.so\" > <ros> <!-- <namespace>${prefix}</namespace> --> <remapping> ${prefix}/image_raw:=rgb/image_raw </remapping> <remapping> ${prefix}/image_depth:=depth/image_raw </remapping> <remapping> ${prefix}/camera_info:=rgb/camera_info </remapping> <remapping> ${prefix}/camera_info_depth:=depth/camera_info </remapping> <remapping> ${prefix}/points:=depth/points </remapping> </ros> <camera_name> ${prefix} </camera_name> <frame_name> ${prefix}_frame_optical </frame_name> <hack_baseline> 0.07 </hack_baseline> <min_depth> 0.001 </min_depth> <max_depth> 300.0 </max_depth> </plugin> </sensor> </gazebo> 运行仿真环境 使用如下命令启动仿真环境： $ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py 启动成功后，可以看下当前的话题列表，已经产生了三维相机的相关话题。 点云数据可视化 运行Rviz： $ ros2 run rviz2 rviz2 同样的流程，点击Add，添加PointCloud2，设置订阅的点云话题，还要配置Rviz的参考系是odom，就可以看到点云数据啦，每一个点都是由xyz位置和rgb颜色组成。 激光雷达仿真与可视化 除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。 仿真插件配置 雷达使用的Gazebo插件是libgazebo_ros_ray_sensor.so，配置方法如下： learning_gazebo/urdf/sensers/lidar_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"ray\" name= \"rplidar\" > <update_rate> 20 </update_rate> <ray> <scan> <horizontal> <samples> 360 </samples> <resolution> 1 </resolution> <min_angle> -3 </min_angle> <max_angle> 3 </max_angle> </horizontal> </scan> <range> <min> 0.10 </min> <max> 30.0 </max> <resolution> 0.01 </resolution> </range> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.01 </stddev> </noise> </ray> <plugin name= \"gazebo_rplidar\" filename= \"libgazebo_ros_ray_sensor.so\" > <ros> <namespace> / </namespace> <remapping> ~/out:=scan </remapping> </ros> <output_type> sensor_msgs/LaserScan </output_type> </plugin> </sensor> </gazebo> 运行仿真环境 使用如下命令启动仿真环境： $ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py 在话题列表中也可以看到激光雷达啦。 点云数据可视化 启动Rviz： $ ros2 run rviz2 rviz2 点击Add，选择Laserscan，然后配置订阅的话题名，rviz的固定坐标系依然是odom，此时就可以看到激光点啦。 Rviz vs Gazebo 好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下： Gazebo是 仿真平台 ，核心功能是 创造数据 ，我们没有机器人或者传感器，它可以帮我们做一个虚拟的； Rviz是 可视化平台 ，核心功能是 显示数据 ，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。 参考链接 https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":["scan","路径","libgazebo","这里","常用","1.3962634","机械","过","加载","ok","外部环境","可视化","urdf","~","frame","displays","如果","驾驶","}","传感器","不少","；","框架","范畴","一个","format","还是","link","github","不用","由","与","众多","range","已经","mbot","方法","彩色","一些","这","三维","1","岂","这个","常备","www","launch","难为","可视","。","感器","发布","产生","固定","上位","filename","几个","有没有","混淆","好该","0.01","fov","去","辨率","不到","on","一脸","出厂","一句","qt","output","raw","列表","msgs","添加","某些","啦","remapping","快速","https","rgb","渲染","官方","py","load","环境","什么样","量级","模型","给","拭目以待","就","0.07","了","话","参数","试一试","对照","head","类似","此时","熟悉","价格比","$","什么","就是","来","过程","xyz","强调","打造","会","规划","装","usb","图像","内容","640","pointcloud2","_","拍摄","clip","resolution","这样","想不到","—","像头","name","realsense","案例","type","启动","自动","机器人","提供","image","开放式","摄像",">"," ","camera","info","本","等等","订阅","8.0","激光","搞定","都","intel","软件","做","相关","通过","可以","关于","自带","更","一目了然","自由","一堆","命名","从","链接","我们","运动","核心","机","重量","只是","大大提高","一分钱","max","m","命令","300","rviz","参考","窗口","baseline","ros2","开发","分辨率","巧妇难为无米之炊","大大","颜色","0.001","？","true","命令行","包括","先","20","介绍","上","先来","out","docs","但","提高","0.0","可贵","是不是","拭目","最为","rviz2","图形","当然","optical","方便","主要","格式","height","用","=","帮","far","比如","ros","样","噪音","肯定","“","pose","左侧","过瘾","com","位置","设计","只有","基于","时候","问题","懵","两个","一种","60.0","：","-","才","一个点","后","stereolabs","always","每","场景","没有","理解","内部","node","pi","gaussian","再","so","hack","中","哪些","0.007","”","非常","是","出来","stereo","width","嘉宾","不想","新","终端","plugin","组成","加入","了解","不能","update","ray","汽车","工具","真实","/","把","标签","sensers","一款","xacro","*","lidar","depth","多",":","问","这种","摄像头","在","对应","rate","周边","相机","外部","范围","选择",".","了然","3","0","0.02","插件","reference","learning","laser","add","看到","和","名","0.10","很难","开放","雷达","需要","自己","参考系","分析","0.05","300.0","配置","叫做","传感","运行","类型","mean","或者","sensor","各样","你","仿真","畅想","相信","run","数字","vs","kinect","想","编码","不过","人","按照","不是","一目","如下","能够","into","说明","，","试试","0.2","机器","信息","1280","<","大家","具体","stddev","很多","啥","prefix","动机","180.0","分辨","horizontal","希望","项","点","看","samples","体感","成功","点云","确认","也","15.0","满意","对","效果","呢","的","话题","世界","消息","rgbd","坐标系","所以","获取","min","并且","么","以待","这幅","一位","计算","即可","angle","能","到","如何","namespace","还要","odom","会用","流程","当前","依然","巧妇","使用","找到","、","各种各样","controller","near","全都","讲","移动","层面","gazebo","除了","显示","手上","只要","眼中","用来","它","长","好","一分","!","noise","\"","{","价格","30.0","二维","起来","等","不","臂","图形化","虚拟","同样","激光雷达","涉及","重量级","有","这些","导航","points","255","功能","r8g8b8","下","laserscan","720","创造","然后","rplidar","的话","分钱","描述","点击","设置","480","代码","平台","数据","坐标","各种","神器","效率","顺利","玩起","自主","360","玩起来","还有","移动机器人","知道","--"],"title":"Rviz","title_tokens":["rviz"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz","text":"大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾—— Rviz ，一款三维可视化显示的神器。","text_tokens":["世界","量级","—","大家","？","摄像头","显示","像头","这","过","三维","畅想","眼中","就","了","可视化","介绍","ros","可视","。","一位","什么","机器人","如何","看到","到","范畴","我们","重量","没有","一个","机器","有没有","rviz","神器","能够"," ","图像","一款","，","什么样","中","问题","是","拍摄","涉及","本","重量级","摄像","嘉宾","讲","呢","的"],"title":"Rviz：三维可视化显示平台","title_tokens":["可视化","平台","：","显示","三维","rviz","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_1","text":"机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。","text_tokens":["信息","路径","这里","像头","机械","很多","啥","动机","才","可视化","如果","希望","传感器","机器人","场景","看","理解","内部","再"," ","中","哪些","是","出来","效果","众多","的","等等","激光","坐标系","都","所以","搞定","三维","软件","岂","做","通过","可以","么","这幅","。","感器","可视","一目了然","计算","一堆","从","到","我们","运动","只是","大大提高","把","rviz","、","一款","去","各种各样","全都","一脸","开发","移动","层面","问","大大","颜色","？","摄像头","在","周边","相机","用来","了然","长","0","快速","渲染","看到","和","很难","但","提高","雷达","需要","自己","分析","环境","不","臂","传感","激光雷达","当然","这些","导航","255","模型","功能","各样","给","你","就","数字","比如","类似","描述","人","样","什么","肯定","一目","数据","坐标","就是","过程","规划","位置","各种","设计","效率","自主","图像","内容","，","还有","移动机器人","懵","知道","摄像","机器","这样"],"title":"Rviz三维可视化平台","title_tokens":["可视化","平台","三维","rviz","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_2","text":"一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。","text_tokens":["想不到","一句","出厂","消息","qt","开发","功能","常用","显示","或者","在","很多","对应","只要","就","添加","了","做","某些","这个","话","它","可视化","可以","插件","想","ros","自带","可视","。","如果","官方","发布","按照","更","工具","我们","框架","核心","开放式","数据","平台","机器人","看到","项","上位","没有","机","一个","开放","打造","自己","rviz","不"," ","只有","基于","图形化","说明","，","中","不到","也","是","满意","图形","多","方便","对","效果","机器","有","的","话题","新"],"title":"Rviz介绍","title_tokens":["介绍","rviz"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_1","text":"启动一个终端，使用如下命令即可启动： $ ros2 run rviz2 rviz2","text_tokens":["使用"," ","$","run","终端","，","如下","rviz2","一个","启动","命令","ros2","：","即可"],"title":"运行方法","title_tokens":["方法","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_2","text":"摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。","text_tokens":["摄像头","常用","像头","给","了","感器","。","传感器","上","肯定","我们","机器人","先来","装","的","传感","，","最为","是","摄像","机器","一种"],"title":"彩色相机仿真与可视化","title_tokens":["可视化","与","彩色","可视","相机","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_3","text":"关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 learning_gazebo/urdf/sensers/camera_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"camera\" name= \"camera_node\" > <update_rate> 30.0 </update_rate> <camera name= \"head\" > <horizontal_fov> 1.3962634 </horizontal_fov> <image> <width> 1280 </width> <height> 720 </height> <format> R8G8B8 </format> </image> <clip> <near> 0.02 </near> <far> 300 </far> </clip> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.007 </stddev> </noise> </camera> <plugin name= \"gazebo_camera\" filename= \"libgazebo_ros_camera.so\" > <ros> <!-- <namespace>stereo</namespace> --> <remapping> ~/image_raw:=image_raw </remapping> <remapping> ~/camera_info:=camera_info </remapping> </ros> <camera_name> ${prefix} </camera_name> <frame_name> ${prefix}_link </frame_name> <hack_baseline> 0.2 </hack_baseline> </plugin> </sensor> </gazebo> 主要配置项如下： 标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 - 标签：加载摄像头仿真插件","text_tokens":["1280","<","大家","libgazebo","1.3962634","像头","stddev","name","加载","：","prefix","-","type","urdf","~","frame","分辨","}","horizontal","传感器","提供","image","项","node","format","--","link","gaussian",">","so","camera"," ","hack","0.007","info","stereo","width","的","方法","都","plugin","这个","关于","update","感器","。","自由","命名","我们","namespace","filename","/","标签","sensers","300","使用","fov","xacro","辨率","baseline","near",":","分辨率","gazebo","摄像头","raw","对应","rate","范围",".","remapping","介绍","0.02","插件","reference","!","learning","noise","\"","{","30.0","等","需要","0.0","配置","叫做","传感","类型","主要","格式","height","=","模型","r8g8b8","mean","sensor","给","仿真","far","720","参数","对照","head","编码","ros","描述","$","设置","噪音","代码","如下","图像","，","_","clip","0.2","摄像"],"title":"仿真插件配置","title_tokens":["配置","仿真","插件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_4","text":"模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py 可以使用命令行看下仿真出来的图像话题：","text_tokens":["mbot","信息","模型","gazebo","下","摄像头","像头","在","拭目以待","仿真","：","命令行",".","啦","好","可以","不能","launch","并且","learning","以待","。","$","能","看到","我们","看","py","load","摄像","命令","把","rviz"," ","camera","into","使用","配置","的","图像","，","中","拭目","_","出来","成功","ros2","已经","话题"],"title":"运行仿真环境","title_tokens":["仿真","运行","环境"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_5","text":"我们使用Rviz可视化显示图像信息，先来启动Rviz： $ ros2 run rviz2 rviz2 启动成功后，在左侧Displays窗口中点击“Add”，找到Image显示项，OK确认后就可以加入显示列表啦，然后配置好该显示项订阅的图像话题，就可以顺利看到机器人的摄像头图像啦。","text_tokens":["订阅","信息","显示","摄像头","像头","在","列表","：","就","ok","加入","run","先","啦","可视化","可以","然后","启动","后","displays","点击","可视","。","$","add","机器人","我们","“","image","项","看到","来","左侧","摄像","rviz","好该","使用"," ","找到","确认","配置","顺利","图像","，","中","”","rviz2","窗口","成功","ros2","机器","的","话题"],"title":"图像数据可视化","title_tokens":["图像","数据","可视化","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_6","text":"二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。","text_tokens":["这种","摄像头","常用","像头","或者","intel","三维","相机","外部","仿真","realsense","就","外部环境","获取","kinect","比如","可以","通过","想","一分","不过","分钱","感器","。","价格比","传感器","不少","我们","价格","二维","数据","起来","一分钱","体感","过瘾","不用","点云","环境","usb","不","可贵","玩起","传感","，","试试","也","玩起来","摄像","不想","的"],"title":"三维相机仿真与可视化","title_tokens":["可视化","与","三维","相机","仿真","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_7","text":"三维相机使用的Gazebo插件也是libgazebo_ros_camera.so，配置方法如下： learning_gazebo/urdf/sensers/kinect_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"depth\" name= \"${prefix}\" > <always_on> true </always_on> <update_rate> 15.0 </update_rate> <pose> 0 0 0 0 0 0 </pose> <camera name= \"kinect\" > <horizontal_fov> ${60.0*M_PI/180.0} </horizontal_fov> <image> <format> R8G8B8 </format> <width> 640 </width> <height> 480 </height> </image> <clip> <near> 0.05 </near> <far> 8.0 </far> </clip> </camera> <plugin name= \"${prefix}_controller\" filename= \"libgazebo_ros_camera.so\" > <ros> <!-- <namespace>${prefix}</namespace> --> <remapping> ${prefix}/image_raw:=rgb/image_raw </remapping> <remapping> ${prefix}/image_depth:=depth/image_raw </remapping> <remapping> ${prefix}/camera_info:=rgb/camera_info </remapping> <remapping> ${prefix}/camera_info_depth:=depth/camera_info </remapping> <remapping> ${prefix}/points:=depth/points </remapping> </ros> <camera_name> ${prefix} </camera_name> <frame_name> ${prefix}_frame_optical </frame_name> <hack_baseline> 0.07 </hack_baseline> <min_depth> 0.001 </min_depth> <max_depth> 300.0 </max_depth> </plugin> </sensor> </gazebo>","text_tokens":["<","libgazebo","name","60.0","：","prefix","type","urdf","frame","always","180.0","}","horizontal","image","format","pi","link",">","so","camera"," ","hack","也","15.0","是","info","width","的","8.0","方法","plugin","三维","update","min","namespace","filename","max","/","m","sensers","使用","fov","xacro","*","depth","controller","on","baseline","near",":","0.001","gazebo","raw","true","rate","相机",".","0","remapping","插件","reference","!","learning","rgb","\"","{","0.05","300.0","配置","optical","height","points","=","r8g8b8","sensor","0.07","far","kinect","ros","$","480","pose","如下","640","，","_","clip","--"],"title":"仿真插件配置","title_tokens":["配置","仿真","插件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_8","text":"使用如下命令启动仿真环境： $ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py 启动成功后，可以看下当前的话题列表，已经产生了三维相机的相关话题。","text_tokens":["mbot","rgbd","gazebo","下","列表","三维","相机","仿真","：",".","了","相关","可以","launch","启动","后","learning","。","产生","$","看","py","当前","如下","load","命令","环境","使用"," ","into","，","_","已经","成功","ros2","的","话题"],"title":"运行仿真环境","title_tokens":["仿真","运行","环境"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_9","text":"运行Rviz： $ ros2 run rviz2 rviz2 同样的流程，点击Add，添加PointCloud2，设置订阅的点云话题，还要配置Rviz的参考系是odom，就可以看到点云数据啦，每一个点都是由xyz位置和rgb颜色组成。","text_tokens":["订阅","颜色","都","组成","：","添加","就","啦","run","可以","一个点","rgb","点击","。","$","设置","add","还要","每","odom","看到","和","数据","流程","xyz","一个","参考系","点云","rviz","位置"," ","配置","参考","由","运行","，","pointcloud2","同样","rviz2","是","ros2","的","话题"],"title":"点云数据可视化","title_tokens":["可视","数据","点云","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_10","text":"除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。","text_tokens":["移动","激光","除了","摄像头","像头","很多","三维","相机","动机","包括","常备","试一试","自动","感器","。","驾驶","传感器","汽车","机器人","我们","和","来","雷达","传感","，","也","激光雷达","是","移动机器人","摄像","机器","的"],"title":"激光雷达仿真与可视化","title_tokens":["激光","可视化","与","激光雷达","雷达","可视","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_11","text":"雷达使用的Gazebo插件是libgazebo_ros_ray_sensor.so，配置方法如下： learning_gazebo/urdf/sensers/lidar_gazebo.xacro <gazebo reference= \"${prefix}_link\" > <sensor type= \"ray\" name= \"rplidar\" > <update_rate> 20 </update_rate> <ray> <scan> <horizontal> <samples> 360 </samples> <resolution> 1 </resolution> <min_angle> -3 </min_angle> <max_angle> 3 </max_angle> </horizontal> </scan> <range> <min> 0.10 </min> <max> 30.0 </max> <resolution> 0.01 </resolution> </range> <noise> <type> gaussian </type> <mean> 0.0 </mean> <stddev> 0.01 </stddev> </noise> </ray> <plugin name= \"gazebo_rplidar\" filename= \"libgazebo_ros_ray_sensor.so\" > <ros> <namespace> / </namespace> <remapping> ~/out:=scan </remapping> </ros> <output_type> sensor_msgs/LaserScan </output_type> </plugin> </sensor> </gazebo>","text_tokens":["scan","=","<","方法","gazebo","libgazebo","mean","sensor","output","stddev","rate","name","plugin","1","：","msgs","prefix",".","laserscan","-","3","type","20","remapping","插件","update","urdf","reference","rplidar","min","ros","learning","~","noise","\"","}","ray","{","horizontal","$","angle","namespace","filename","0.10","30.0","out","如下","samples","max","/","link","gaussian","雷达",">","sensers","0.0","so","使用"," ","0.01","配置","xacro","360","，","lidar","_","是","resolution","range","的",":"],"title":"仿真插件配置","title_tokens":["配置","仿真","插件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_12","text":"使用如下命令启动仿真环境： $ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py 在话题列表中也可以看到激光雷达啦。","text_tokens":["mbot","激光","gazebo","在","列表","仿真","：",".","啦","可以","launch","启动","learning","。","$","laser","看到","py","如下","load","命令","雷达","环境","使用"," ","into","中","也","_","激光雷达","ros2","话题"],"title":"运行仿真环境","title_tokens":["仿真","运行","环境"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_13","text":"启动Rviz： $ ros2 run rviz2 rviz2 点击Add，选择Laserscan，然后配置订阅的话题名，rviz的固定坐标系依然是odom，此时就可以看到激光点啦。","text_tokens":["订阅","激光","坐标系","：","选择","laserscan","就","啦","run","可以","然后","启动","点击","此时","。","$","add","固定","odom","名","看到","点","坐标","依然","rviz"," ","配置","，","rviz2","是","ros2","的","话题"],"title":"点云数据可视化","title_tokens":["可视","数据","点云","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz-vs-gazebo","text":"好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下： Gazebo是 仿真平台 ，核心功能是 创造数据 ，我们没有机器人或者传感器，它可以帮我们做一个虚拟的； Rviz是 可视化平台 ，核心功能是 显示数据 ，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。","text_tokens":["信息","大家","这里","常用","具体","很多","：","案例","可视化","启动","如果","传感器","；","机器人","没有","一个","还是","再"," ","非常","也","是","对","的","已经","方法","所以","一些","这","软件","做","了解","通过","可以","难为","可视","感器","。","到","会用","我们","核心","几个","流程","真实","混淆","巧妇","rviz","使用","不到","讲","巧妇难为无米之炊","gazebo","显示","在","手上","啦","好","它","和","自己","环境","传感","虚拟","是不是","有","用","功能","下","帮","或者","仿真","就","了","相信","创造","的话","不过","熟悉","不是","平台","数据","来","强调","会","，","时候","两个","机器"],"title":"Rviz vs Gazebo","title_tokens":[" ","gazebo","rviz","vs"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_14","text":"https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":[" ","www","docs","rviz2","/","github","https","stereolabs","ros2","com","rviz",":","."],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/","text":"RQT：模块化可视化工具 ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具—— rqt 。 rqt介绍 正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，一些常用的功能如下： 日志显示 图像显示 发布话题数据/调用服务请求 绘制数据曲线 数据包管理 节点可视化 参考资料 https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":["console","参考资料","using","—","常用","像头","具体","很多","简单","加载","数据包","：","-","另外","可视化","启动","强大","html","场景","提供","实现","调用","一个"," ","中","也","正如","进行","是","安装","的","已经","话题","难免会","曲线","都","一些","里边","可能","难免","而","这个","通过","可以","服务","可视","更","。","一样","前","发布","命名","指令","工具","我们","concepts","很","/","rqt","命令","en","每个","有些","rviz","install","使用","参考","资料","humble","开发",":","一句","qt","显示","摄像头","在",".","sudo","它","觉得","介绍","tutorials","麻烦","https","用到","模块化","和","有点","docs","界面","操作","需要","apt","只","管理","功能","下","就","请求","了","比如","日志","然后","的话","类似","org","ros","不过","此时","$","about","绘制","数据","来","节点","如下","会","模块","基于","小","图像","，","摄像","一种","这样"],"title":"Rqt","title_tokens":["rqt"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt","text":"ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具—— rqt 。","text_tokens":["难免会","功能","—","下","显示","摄像头","一些","像头","可能","简单","难免","就","了","另外","觉得","可视化","比如","的话","麻烦","ros","不过","此时","更","可视","。","强大","用到","模块化","场景","我们","工具","有点","提供","很","一个","一种","rqt","操作","需要","会","有些","rviz","模块","使用"," ","只","的","图像","，","中","摄像","已经"],"title":"RQT：模块化可视化工具","title_tokens":["模块化","工具","可视化","rqt","可视","：","模块"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt_1","text":"正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，一些常用的功能如下：","text_tokens":["一句","qt","功能","都","常用","一些","具体","在","很多","里边","加载","而","就","：","了","这个","sudo","-","它","可视化","通过","可以","然后","类似","启动","ros","可视","。","一样","前","$","命名","指令","工具","我们","和","实现","来","如下","一个","rqt","命令","界面","需要","每个","rviz","模块","install","使用"," ","基于","apt","的","小","，","也","正如","进行","是","humble","安装","开发","这样"],"title":"rqt介绍","title_tokens":["介绍","rqt"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_1","text":"","text_tokens":[],"title":"日志显示","title_tokens":["日志","显示"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_2","text":"","text_tokens":[],"title":"图像显示","title_tokens":["图像","显示"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_3","text":"","text_tokens":[],"title":"发布话题数据/调用服务请求","title_tokens":["请求","数据","调用","/","服务","发布","话题"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_4","text":"","text_tokens":[],"title":"绘制数据曲线","title_tokens":["绘制","数据","曲线"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_5","text":"","text_tokens":[],"title":"数据包管理","title_tokens":["数据","管理","数据包"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_6","text":"","text_tokens":[],"title":"节点可视化","title_tokens":["可视","节点","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_7","text":"https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":["-"," ","console","about","using","tutorials","concepts","docs","org","/","https","ros","en","rqt","html","humble",":","."],"title":"参考资料","title_tokens":["参考","资料","参考资料"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/","text":"资源汇总 常用框架 自主导航 比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/ 自动驾驶 自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/ 路径规划 此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/ 机器人学 ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。 视频课程 斯坦福大学公开课 —— 机器人学 台大机器人学之运动学 Self-Driving Cars with ROS2 & Autoware 古月学院 常用链接 ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":["行业","路径","经典","自身","—","大家","常用","机械","热门","很多","人学","得","：","动机","-","必备","著作","自动","如果","驾驶","版本","self","html","机器人学","机器人","提供","框架","driving","实现","算法","基本功能","guyuehome","至于","一个","斯坦福大学","github","完整"," ","中","也","进行","非常","中文","是","公开","对","的","人手","情况","gitlab","具备","基本功","都","这","》","结合","工程师","感兴趣","这个","相关","推荐","www","导论","可以","除此","。","更","robots","视觉","公开课","这套","链接","我们","运动","auto","工具","仔细阅读","ubuntu","几个","感兴","称为","/","en","autowareauto","经典著作","使用","找到","、","参考","控制","基本","实操","多","工程","humble","ros2","开发",":","移动","碰撞检测","moveit","gazebo","知识","导航系统","在","对应","每一","商业化","内功","选择","即便",".","台大","wiki","检测","with","好","书籍","快速","https","autowarefoundation","之","当今","上","课程","和","应用","运动学","2","学院","docs","典型","等","理论知识","丰富","自己","http","仔细","不","臂","此外","cars","商业","最为","古月","资源","除此之外","要","分拣","系统","导航","有","这些","gazebosim","documentation","之一","cn","居","本书","功能","重在","index","感知","一本","斯坦福","之外","修炼","就","被","了","兴趣","理论","比如","classic","org","《","ros","福大","汇总","大学","roscon","开课","代码","著名","io","会","规划","com","各种","模块","navigation","碰撞","视频","学习","社区","自主","内容","，","包含","autoware","移动机器人","还有","技能","阅读","&","任何","机器","一种"],"title":"资源汇总","title_tokens":["资源","汇总"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_1","text":"","text_tokens":[],"title":"资源汇总","title_tokens":["资源","汇总"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_2","text":"","text_tokens":[],"title":"常用框架","title_tokens":["常用","框架"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_3","text":"比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/","text_tokens":["移动","开发","具备","功能","基本功","大家","都","导航系统","在","：","即便",".","动机","了","相关","这个","好","比如","可以","快速","链接","org","https","ros","。","如果","要","上","这套","机器人","提供","框架","和","我们","实现","算法","代码","应用","基本功能","/","会","自己","完整","各种","navigation","不","使用"," ","的","自主","参考","内容","，","中","也","基本","进行","移动机器人","任何","ros2","机器","系统","导航",":"],"title":"自主导航","title_tokens":["导航","自主"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_4","text":"自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/","text_tokens":["行业","之一","gitlab","—","功能","大家","感知","这","在","热门","很多","商业化","：",".","了","这个","兴趣","感兴趣","www","可以","org","https","ros","自动","autowarefoundation","。","如果","驾驶","当今","机器人","链接","框架","应用","和","实现","系统","几个","auto","感兴","一个","典型","著名","等","/","io","丰富","autowareauto","规划","模块"," ","的","社区","、","控制","参考","，","中","也","包含","最为","非常","autoware","是","商业","对","机器","有","一种",":"],"title":"自动驾驶","title_tokens":["驾驶","自动"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_5","text":"此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/","text_tokens":["碰撞检测","moveit","经典","功能","大家","都","这","机械","在",".","这个","相关","检测","可以","org","https","ros","。","更","视觉","链接","运动","框架","/","等","规划","碰撞","臂","使用"," ","此外","找到","、","内容","，","中","也","非常","还有","是","多","分拣","的",":"],"title":"路径规划","title_tokens":["规划","路径"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_6","text":"ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。","text_tokens":["情况","经典","开发","本书","重在","大家","自身","知识","都","》","人学","一本","对应","每一","结合","内功","工程师","之外","得","修炼","就","选择","被","推荐","相关","必备","理论","书籍","导论","比如","可以","这些","著作","除此","《","ros","。","版本","机器人学","机器人","工具","仔细阅读","称为","至于","理论知识","仔细","经典著作"," ","学习","，","中文","实操","是","技能","阅读","工程","除此之外","机器","有","的","人手"],"title":"机器人学","title_tokens":["人学","机器人学","机器","机器人"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_7","text":"斯坦福大学公开课 —— 机器人学 台大机器人学之运动学 Self-Driving Cars with ROS2 & Autoware 古月学院","text_tokens":["—","人学","斯坦福","台大","-","with","福大","self","之","大学","公开课","机器人学","开课","机器人","运动","运动学","driving","学院","斯坦福大学"," ","cars","autoware","&","公开","古月","ros2","机器"],"title":"视频课程","title_tokens":["视频","课程"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_8","text":"ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":["documentation","cn","居","gazebo","index","：",".","wiki","www","classic","org","https","ros","robots","html","roscon","2","ubuntu","docs","guyuehome","/","en","github","com","http"," ","gazebosim","古月","humble","ros2",":"],"title":"常用链接","title_tokens":["链接","常用"]}]}