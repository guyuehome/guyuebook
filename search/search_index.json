{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的电气时代。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的数字时代，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发，智能机器人时代正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。 教程链接 课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 博客泡泡： https://www.guyuehome.com/ 教程问答： https://www.guyuehome.com/bubble/index 参考资料： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["计算","视频","s","图文","有限","七八十","1dvxugmhxlxnsnfdezuxw0g","劳动力","gitee","算机","由示","传感","提取","：","生产","泡泡","。","system","动作","快速","拉开","博客","拉开序幕","资料","环境","之后","爆发","https","之一","com","完全","更","github","此时","人工智能","于","减速机","视觉","自主","最佳","index","最为","2015","人类","逐渐","多","而言","呈","软件","家庭","2000","汽车","感器","服务","exc6","控制","tutorials","七八十年","guyuehome","七八","和"," ","了","操控","电机","教程","只能","载体","智能","pan","后","狗","课程","参考资料","也","是","时代","驱动","计算机","操作","释放","关注","智能化","开发","ros2","bubble","传感器","这","我们","设备","八十","这是","问答","缺少","class","robot","动力",".","正式","高","baidu","井喷","没有","过程","局部","大","减速","但是","思考","www","伺服","横跨","不断丰富","电气","人工","主角","十年","经历","并","仿生","码","ai","工厂","发展","驾驶","业生","就是","依然","太","前夜","/","对","命令","按照","劳动","技术","年","链接","三个","操作系统","年前","机器人","出现","成为","帮助","丰富","送餐","检测","执行","_","状","operating","机器","控制器","俗称","agv","系统","四足","—","21","驱动器","等","源码","提出","工业生产","不过","参考","类型","应用","book","感知","教器","主要","自动","重要","序幕","热点","、","伺服电机","要求","更加",":","数字","的","，","必将","时期","八十年","随着","不断","层面","工业"],"title":"引言","title_tokens":["引言"]},{"location":"#_1","text":"课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 博客泡泡： https://www.guyuehome.com/ 教程问答： https://www.guyuehome.com/bubble/index 参考资料： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["baidu","index","视频","21","源码","www","exc6","s","图文","tutorials","1dvxugmhxlxnsnfdezuxw0g","guyuehome","gitee","参考"," ","提取","book","：","码","教程","泡泡","pan","课程","参考资料","博客","资料",":","ros2","bubble","链接","https","com","问答","github","class",".","/","_"],"title":"教程链接","title_tokens":["教程","链接"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["任何","授权","企业","视频","优质","》","高质量","被","产品","《","人才培养","有限","校企","联系","网站","均","及","使用","。","1000","地区","声明者","赋能","包括","销售","有限公司","课件","com","120","为","合法","如需","追究","面向未来","仅限","有权","一体","与","书面","学","@","社区","其它","对本","培养","未经","+","镜像","生态","guyuehome","所有","万字"," ","和","万人","面向","出版","线上","课程","构建","是","至今","版权","实践","合作","不","致力","开发","建立","上述","知名","但","捆绑","请","（",".","究其","法律责任","brand","限于","许可","ros","学习者","不得","古月","努力","公司","法律","www","上","单位","通过","声明","致力于","质量","ai","居","超过","武汉","畅销","创建","提供","创新","年","微控","机器人","交流学习","用户","华语","众多","人才","传播","小时","机器","高校","未来","精锋","本","累积","图书","追究其","等","集","源码","模式","平台","违反","将","或","复制","、","科技","责任","内容","拥有","交流","）","高质","明者","2011","依法","进行","，","的","个人","抄录","作品","修改","学习"],"title":"关于教程","title_tokens":["教程","关于"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["企业","视频","优质","》","高质量","《","人才培养","校企","及","。","1000","地区","赋能","com","120","为","面向未来","一体","与","社区","培养","+","生态","guyuehome","万字"," ","万人","面向","出版","线上","课程","构建","是","至今","实践","合作","致力","开发","建立","知名","（",".","ros","学习者","古月","努力","www","通过","致力于","质量","ai","居","超过","畅销","创建","提供","创新","年","机器人","交流学习","用户","华语","众多","人才","小时","机器","高校","未来","累积","图书","等","集","模式","平台","、","内容","交流","）","高质","2011","，","的","学习"],"title":"学机器人，上古月居","title_tokens":["，","居","机器人","机器","学","古月","上"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["任何","授权","视频","被","产品","有限","联系","网站","均","使用","。","声明者","包括","销售","有限公司","课件","com","为","合法","如需","追究","仅限","有权","与","书面","@","其它","对本","未经","镜像","guyuehome","所有"," ","和","课程","版权","不","上述","但","捆绑","请","究其",".","法律责任","brand","限于","许可","不得","古月","公司","法律","单位","声明","居","武汉","微控","用户","传播","精锋","本","追究其","等","源码","违反","将","或","复制","、","科技","责任","拥有","明者","进行","依法","的","，","个人","抄录","作品","修改","学习"],"title":"版权声明","title_tokens":["声明","版权"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/","text":"ROS/ROS2是什么 智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。 ROS的诞生 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS的发展 ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称ROSCon，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。 ROS的特点 ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的应用案例在社区中沉淀下来； ROS本身也是完全开源的，商业许可证非常宽松； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品，缩短了产品的上市时间； ROS也可以跨平台使用，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多支持工业应用的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。 参考资料 关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["巨人","这个","为了","任何","受限于","得到","大大","作为","上边","humble","ros1","全人","目标","详细","希望","全人类","百科","网站","百科全书","5","风险","条","容易","20","衣服","泡泡","乐意","更好","只","只想","现在","资本","conference","啦","做法","商业","爆款","garage","在","最高","更","围绕","水下","亚马","让","移动","很多","查看","开发者","其次","时至今日","项目","一大","？","嘉宾","几年","逐渐","人类","得以","团队","2017","实验","柔性","不断更新","生态","虽好","会","带领","了","工程","新增","一下","全球","创意","做出","强悍","受限","离不开","情况","存储","不","发表","身影","越来越","前","诞生","最后","传感器","开源","一样","这","尝试","robot","向前","又",".","pr2","精致","ros","手机","后续","同一","努力","大","但是","活跃","陪","一系","下","场景","给","越来","其中","才","创始","真正","；","居","找到","统统","world","时候","迭代","不是","特性","有志","一群","出来","充足","当时","已有","之王","起来","差不多","一系列","青年","已经","成果","之上","人数","四大","不多","明智","2007","工业","改为","推荐","你","国家","而","正式版","roscon","配合","自身","向","方向","虽然","笔记本电脑","源码","有没有","家","100","所以","讲解","简单","多媒体","利器","成功","基于","大学","轮子","木头","却","包","、","几百","回答","体感","类似","用","新鲜","单独","左右","图中","领域","，","第一次","模块化","投资","一个","把","来讲","多年","全","”","“","据库","认识一下","肩负","浏览量","站","几个","步伐","多媒体系统","绝对","注意","适用","基本","提取","新","：","局限性","缩短","年轻人","这里","具备","一步","使用","对于","google","就","同学","微软","快速","资料","每年","棒","介于","该","历经","2014","图","看中","一段","intel","入门教程","同理","大步","便宜","维基百科","因为","此时","b","下载","answers","促使","年底","好","程度","不到","复杂","首先","这些","无聊","高效","跟随","等等","第一个"," ","不同","神兵","阵地","挑战","特点","用于","轰动","发布","课程","机械","正如","也","至今","无疑","解决","玩耍","入门","操作","智能化","ros2","而且","一切","我们","这是","工具","清晰","此","说明","浏览","正式","访问","回到","之内","总而言之","神秘","公司","来到","扫地","能够","近两年","移动机器人","不下","百万","世界","机制","250","收拾","做","上去","论坛","经历","方法","却步","代码","底盘","看到","早期","叠","迎来","还有","代表","提供","对","技术","一款","开始","时间轴","性能","广泛","帮助","采购","用户","活动","电路","生态系统","原本","快","涉及","一届","今日","维基百","—","本身","知识","15","等","率","了解","资源","媒体","所学","托管","举办","org","整理","认识","绝大部分","效果","各种","局限","从","洗衣","大有可为","做到","应用软件","都","部分","想到","windows","进入","模块","美妙","统计","的","为例","不乏","discourse","深知","各种各样","不开","活跃度","长期","说干就干","a","/","层面","张图","个","掀起","原型","起","几百万","排名","产品","低","总称","推动","想法","掌握","绝大","一大笔","那","设计","。","趋势","聊天","事情","给出","提高","速度","稳定","中","完全","120","四项","github","研发","甚至","别人","加快","推出","这位","索引","更为","官方","基本上","于","相关","同样","如果","臂","最佳","index","最为","数据库","限性","社区","根据","或者","分享","笔记本","服务","当初","重新","友好","大部分","很快","控制","嵌入","wiki","以","所有","独立","教程","页面","智能","熨烫","成熟","线上","然后","直到","无论","要","没想","所有人","加上","着","怀揣","工程师","实现","万万","问答","有人","熟悉","动力","限于","许可","部件","加","苹果","过程","packages","没想到","投了","turtlebot","肩负着","上市","研究","频繁","之旅","度","重量","造","效率","整合","推进","跨平台","五年","横跨","2022","一次","通过","外观","并","确定","引擎","野蛮","斯坦福大学","发展","嵌入式","价格便宜","此后","很","集合","personal","无论是","来","两个","长远","答案","大笔","年轻","接下","年","操作系统","这样","革命","机器人","近几年","制造","还是","因","人形","价格","大部","真的","人才","问题","学术","operating","机器","万左右","第一","变为","linux","提出","可能","维基","一堂","平台","由","有","进化","月","欢迎","将","重要","每个","日常","款","呢","后期","联合","ubuntu","2011","台球","游戏","成本","25","一起","标志","增长","不想","willow","从中","重量级","版本","复合","跑","万","什么","肩膀","向前走","随着","这款","学习","不断","一大步","功能","居高不下","月底","案例","全书","视频","一家","更新","望而却步","每","人","被","做成","不要","智慧","实验室","直接","动机","亚马逊","生态系","传感","进步","可为","一套","风险投资","来自","全新","普遍","system","原因","元素","主阵地","自己","来看","板块","高度","迅猛","搜索","为","叫做","非常","处理","记录","他们","同年","许可证","选择","软件系统","全球化","150","只要","2015","软件","多","而言","圈","代","正在","头发","感器","电脑","汽车","以上","这一波","干","尽量","起点","既然","和","万人","次数","肯定","福大","物体","参考资料","关键","是","时代","支持","暴露","多万","开发","扩展","可以","开发工具","组成","一大笔钱","使命","终于","简称","其实","通信","xbox","接下来","资金","大会","游戏机","不仅","到","没有","一些","古月","大量","还","增长速度","上","做饭","比如","繁荣","上图","浪潮","远","以叠","普及","算是","一定","零","复用","之","初期","通常","关于","就是","专业","框架","体系","零部件","采用","各项","其他","如何","齐聚一堂","完成","量级","名称","新鲜事","成为","同时","访问量","版","助推","数据","大家","下来","标准","分钟","本","讨论","系统","针对","曲线","商业化","提问","为什么","结晶","c","沉淀","而生","巨大","光靠","2","两年","参考","80","应用","面纱","剪头发","kinect","40","主要","笔记","时间","这群","踏上","2012","多项","总体","内容","几乎","方式","打","系列","各样","疫情","进行","地域","个人","毛巾","2010","斯坦福","宽松","核心"],"title":"ROS和ROS2是什么","title_tokens":["ros","是","和","什么","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#rosros2","text":"智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。","text_tokens":["ros","大家","下来","机器","认识一下","神秘","系统","向","掀起","方向","？","嘉宾","重量","正在","提出","场景","而生","巨大","进化"," ","带领","了","应用","面纱","挑战","一下","智能","那","认识","。","这位","就","是","时代","高度","呢","对","操作","智能化","ros2","开发","接下","操作系统","，","的","一起","机器人","量级","中","这","我们","重量级","又","接下来","什么","全"],"title":"ROS/ROS2是什么","title_tokens":["ros","是","什么","ros2","/"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。","text_tokens":["个","这个","功能","原型","人","实验室","低","推动","想法","一套","：","5","条","容易","那","衣服","设计","对于","。","就","聊天","只","自己","事情","给出","图","中","在","更","大步","甚至","非常","别人","因为","处理","他们","此时","很多","同样","如果","软件系统","一大","只要","？","不到","软件","多","或者","圈","代","分享","头发","复杂","团队","服务","得以","很快","实验","无聊","柔性","高效","干","所有","既然"," ","和","了","独立","肯定","福大","物体","智能","做出","强悍","熨烫","轰动","用于","要","机械","所有人","也","是","玩耍","不","操作","向前走","开发","越来越","诞生","最后","可以","而且","组成","一切","实现","我们","这","尝试","有人","robot","向前","资金","pr2","精致","部件","之内","ros","苹果","手机","没有","同一","一些","还","但是","研究","上","做饭","陪","一系","效率","收拾","横跨","越来","做","其中","才","外观","并","以叠","一次","斯坦福大学","找到","初期","时候","不是","有志","看到","就是","专业","很","personal","叠","框架","零部件","一群","答案","出来","充足","当时","技术","年","如何","操作系统","这样","一款","完成","一系列","机器人","青年","性能","已经","成为","帮助","因","电路","2007","真的","问题","学术","你","涉及","标准","机器","大家","分钟","第一","系统","针对","—","虽然","等","有没有","可能","家","为什么","100","所以","而生","光靠","平台","2","有","基于","应用","大学","剪头发","木头","却","重要","整理","、","洗衣","款","呢","类似","应用软件","用","都","联合","后期","打","系列","图中","台球","的","，","个人","一起","毛巾","深知","为例","第一次","不想","从中","一个","斯坦福","什么","说干就干","这款","层面","一大步"],"title":"ROS的诞生","title_tokens":["的","ros","诞生"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_1","text":"ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称ROSCon，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。","text_tokens":["这个","为了","功能","居高不下","受限于","月底","原型","一家","肩负","望而却步","大大","几百万","起","人","被","每","步伐","直接","humble","亚马逊","注意","适用","推动","传感","提取","风险投资","5","风险","局限性","年轻人","这里","来自","全新","绝大","一大笔","使用","设计","。","system","原因","就","自己","微软","现在","资本","conference","快速","只想","每年","商业","爆款","介于","该","历经","2014","garage","看中","intel","为","中","稳定","在","更","亚马","叫做","加快","便宜","推出","因为","让","他们","官方","同年","于","开发者","项目","一大","年底","限性","2015","几年","软件","多","逐渐","圈","分享","笔记本","感器","电脑","团队","服务","大部分","很快","控制","当初","2017","跟随","所有","虽好","起点","会","第一个"," ","和","了","教程","福大","全球","成熟","线上","发布","受限","直到","关键","没想","也","加上","是","着","支持","暴露","时代","操作","ros2","开发","越来越","身影","诞生","前","传感器","开源","一样","使命","一大笔钱","可以","终于","简称","这","万万","我们","这是","xbox","robot","熟悉","正式","pr2","大会","限于","游戏机","回到","到","不仅","ros","过程","没想到","投了","公司","turtlebot","肩负着","但是","大","扫地","能够","近两年","下","不下","百万","给","五年","2022","其中","越来","做","确定","普及","经历","创始","真正","却步","野蛮","斯坦福大学","发展","world","迭代","价格便宜","底盘","此后","早期","迎来","采用","出来","大笔","年","年轻","一款","操作系统","开始","齐聚一堂","机器人","名称","时间轴","成为","已经","之上","价格","大部","2007","版","助推","问题","改为","原本","operating","而","机器","一届","正式版","本","roscon","第一","系统","变为","—","笔记本电脑","等","所以","提出","讲解","一堂","了解","成功","两年","应用","大学","举办","kinect","重要","笔记","时间","、","这群","每个","几百","2012","绝大部分","各种","局限","从","体感","款","类似","后期","单独","部分","想到","ubuntu","各样","2011","疫情","进入","游戏","成本","进行","的","，","不乏","标志","个人","增长","版本","willow","投资","2010","一个","把","各种各样","斯坦福","多年","长期","随着"],"title":"ROS的发展","title_tokens":["的","ros","发展"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_2","text":"ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的应用案例在社区中沉淀下来； ROS本身也是完全开源的，商业许可证非常宽松； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品，缩短了产品的上市时间； ROS也可以跨平台使用，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多支持工业应用的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["“","这个","巨人","功能","案例","一家","做成","站","被","产品","不要","智慧","ros1","直接","动机","多媒体系统","全人","目标","生态系","总称","全人类","新","进步","：","缩短","具备","这里","一步","那","使用","普遍","设计","。","就","自己","快速","做法","提高","商业","中","完全","在","更","围绕","水下","同理","别人","非常","他们","b","移动","很多","臂","时至今日","许可证","全球化","促使","社区","人类","软件","多","汽车","重新","分享","友好","嵌入","这些","以","尽量","生态","会"," ","和","了","新增","创意","智能","用于","特点","全球","无论","机械","正如","也","是","至今","着","支持","怀揣","智能化","ros2","开发","身影","越来越","最后","可以","开发工具","组成","开源","实现","我们","这","工具","通信","此","向前","许可","到","ros","公司","还","上市","造","上","移动机器人","比如","整合","给","推进","机制","跨平台","繁荣","做","上去","越来","远","并","引擎","零","；","发展","复用","统统","之","嵌入式","特性","不是","通常","看到","就是","集合","无论是","体系","来","代表","长远","对","已有","技术","这样","机器人","广泛","已经","成为","成果","采购","同时","制造","还是","四大","人形","明智","工业","人才","生态系统","标准","大家","机器","下来","今日","系统","自身","商业化","本身","linux","家","多媒体","简单","率","结晶","c","沉淀","媒体","由","平台","有","应用","轮子","将","时间","、","多项","各种","从","做到","都","部分","各样","windows","模块","领域","的","，","一起","模块化","复合","跑","一个","把","各种各样","来讲","肩膀","a","向前走","宽松","”","核心"],"title":"ROS的特点","title_tokens":["的","ros","特点"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_3","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。","text_tokens":["据库","任何","功能","得到","作为","每","上边","浏览量","排名","人","几个","绝对","基本","希望","百科","新","网站","可为","：","这里","绝大","20","使用","。","元素","乐意","就","趋势","来看","快速","现在","迅猛","棒","速度","中","在","最高","四项","研发","索引","维基百科","非常","记录","更为","基本上","很多","相关","开发者","查看","如果","最佳","选择","下载","answers","index","最为","150","数据库","？","社区","几年","根据","多","程度","而言","正在","以上","这一波","大部分","这些","wiki","等等","会"," ","和","了","不同","神兵","万人","次数","教程","页面","全球","发布","也","是","存储","情况","无疑","不","发表","多万","开发","越来越","可以","这","其实","问答","这是","我们","清晰","说明","动力",".","浏览","访问","到","ros","加","总而言之","packages","大","活跃","频繁","增长速度","度","上","比如","整合","给","上图","250","浪潮","越来","其中","通过","论坛","算是","；","发展","关于","就是","很","看到","两个","代表","各项","其他","起来","新鲜事","差不多","机器人","革命","已经","成为","近几年","用户","人数","活动","访问量","不多","大部","助推","问题","快","数据","国家","大家","你","机器","本","万左右","维基百","讨论","曲线","15","源码","等","提出","维基","资源","利器","有","参考","80","应用","月","包","org","40","重要","、","每个","绝大部分","总体","各种","日常","回答","从","方式","大有可为","呢","新鲜","都","左右","部分","25","统计","地域","的","，","discourse","增长","一个","万","什么","活跃度","张图","学习","核心"],"title":"ROS的社区","title_tokens":["的","ros","社区"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#_1","text":"关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["这个","全书","视频","更新","作为","几个","详细","百科","网站","百科全书","这里","掌握","绝大","泡泡","使用","。","google","更好","同学","主阵地","板块","啦","资料","搜索","一段","120","中","入门教程","在","github","其次","项目","最为","好","社区","分享","首先","大部分","不断更新","所有","会"," ","和","工程","万人","教程","阵地","然后","课程","参考资料","离不开","要","也","是","解决","入门","ros2","开发","扩展","最后","可以","开源","工程师","这","我们","工具","ros","后续","古月","大量","还","努力","来到","之旅","世界","方法","一定","居","找到","代码","关于","还有","提供","技术","之王","开始","机器人","成为","大部","问题","推荐","你","大家","机器","本","配合","—","提问","知识","有","参考","所学","托管","欢迎","将","主要","重要","踏上","绝大部分","效果","内容","从","几乎","都","部分","美妙","的","，","一起","一个","不开","不断","学习"],"title":"参考资料","title_tokens":["资料","参考","参考资料"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/","text":"ROS2对比ROS1 在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。 ROS1的局限性 首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。 全新的ROS2 ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。 ROS2 vs ROS1 系统架构 在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。 DDS通信 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。 核心概念 ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。 编码方式 再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。 命令行 最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随课程，你就会慢慢理解这些特性。","text_tokens":["为了","计算","任何","这个","接入","rtos","交付","ros1","库会","专注","二个","之初","目标","天翻地覆","另","有线","可靠性","实力","需求","风险","连接","适合","middleware","更好","一行","毛坯房","真实","分解","啦","运动","项目管理","商业","环境","第二种","成功经验","内存","厂家","结合","在","再","更","布式","一种","而已","架构","让","精力","很多","开发者","学","定性","项目","？","很大","学术研究","macos","会","大致","某","消费市场","级别","了","当然","工程","诸多","带领","延迟","面向","迁移","几点","一下","全球","多功能","颠覆","底层","走","系统工程","驱动","之前","不","解算","基本保障","以及","所示","可移植性","越来越","内","诞生","最后","开源","两者","建立","一样","条件","这","但","（","5g","对象","体现","最终","pr2","先","高","整体","重来","ros","手机","后续","装修","一一","大","但是","是从","道坎","继续","下","rosbuild","上升","更具","场景","售价","给","历史","会成","不再","越来","其中","ceo","真正","；","名字","完","找到","特性","驾驶","时候","不是","可读性","可选","现有","充足","借助","批量","第二个","链接","wifi","一边","批量生产","时","已经","初次","电脑系统","之上","运动学","丰富","你","怎样","而","属性","开发成本","虽然","干扰","打成","所以","讲解","简单","dds","成功","不断涌现","基础","中间","基于","层","还会","编程","、","升级","几百","行人","去","最新","用","类似","接近","更加","深入","）","变革","更换","，","搬","明显","联网","100ms","当","变得","一个","把","来讲","rostopic","全","暂且","高昂","企业","乱麻","测试","即可","难度","听说","主","过","注意","基本","适用","作战","语言","宕机","总之","小伙","：","市场","启动","局限性","标准化","具备","这里","生产","一步","使用","对于","就","优化","带来","大幅","致使","不难","该","之后","写","是因为","以下几点","尤其","含义","因为","解密","python3","慢慢","好","不用","一页","产品开发","复杂","首先","这些","最大","第二代","跟随","第一个","流程"," ","得","只是","不同","微控制器","至关重要","挑战","具体","用于","概念","课程","发布","也","解决","至关","master","操作","周期","ros2","走向","之间","常","我们","设备","工具","指挥","软件开发","说明","节点","适配","1ms","接口","出错","雷达","公司","翻新","能够","安全","面向对象","百万","总体而言","国际","加入","机制","也许","面对","vs","做","编译系统","似乎","方法","过来","代码","广泛应用","确实","共享","依然","还有","干掉","mcu","提供","对","命令","不会","一款","远比","开始","体验","三个","意义","性能","广泛","出现","他","符合","航天","彼此","用户","右侧","担忧","厂商","勿躁","放在","opensplice","简单明了","调试","可选项","原本","切记","—","全部","等","安全性","面临","共享内存","率","了解","资源","只不过","走向市场","除此","一团乱","消失","实时","颠覆性","或","需要","移植","客户端","这台","对系统","run","绝大部分","discovery","对比","各种","第二","局限","从","信号","运行","做到","生活","都","部分","c++","windows","用到","各位","的","图片","从而","新一代","管理器","各种各样","编写","张图","地方","另外","层面","/","指定","发布者","下边","满足","几百万","产品","经验","更接","通用性","想要","看看","有限","依赖","api","成","房子","国际标准","理解","陌生","部署","交道","绝大","完整性","那","如","除此之外","设计","。","信息","上手","借鉴","提高","毛坯","网络","省略","不好","一团","封装","稳定","中","总结","一本","研发","甚至","强壮","不够","与","变化","于","相关","同样","如果","担心","最佳","udp","发现","定义","编码","最为","下要","限性","社区","或者","colcon","重新","服务","rmw","嵌入","大部分","控制","所有","移植性","保障","独立","伙伴","教程","只能","保证","android","智能","后","然后","无论","要","是否","fastrtps","考虑","怀揣","举","python","交给","可靠","完整","实现","请","熟悉","动力","受制","话题","rosrun","协议","过程","由于","消费","突然","编程语言","频繁","研究","通用","跨平台","印象","通过","并","编译器","切换","内部","细节","搭载","之外","减少","发展","嵌入式","相对","复杂度","管理","接触","哪些","配置","两个","来","长远","答案","翻地","这样","操作系统","机器人","表示","运算","唯一","大部","千差万别","问题","进程","安装","学术","分散","大幅度","机器","未来","控制器","第一","程序","较","自","发成","linux","可能","选项","平台","有","性","常用","丢","原有","产品化","重要","将","每个","幅度","足够","无法","建筑","策略","部头","款","呢","发","成本","以下","揭秘","小伙伴","版本","修改","什么","协作","随着","受制于","不断","学习","发送","通信接口","功能","可移植","一团乱麻","它","行为","编译","一家","每","做成","tcp","不要","直接","客户","盖","工作","ament","一套","轻松","catkin","稍安","全新","阶段","到底","良好","应该","自己","来看","陆续","方便","换成","历史使命","接收","纠结","为","例子","比","叫做","非常","处理","听","他们","个体","选择","软件系统","导致","只要","一致","软件","多","动力学","收","而言","家庭","汽车","加密","电脑","以上","能","amr","尽量","间层","大部头","最早","和","小","新版","肯定","没","调用","单兵","看","么","是","时代","支持","入侵","分布式","角度","先进","开发","可以","使命","单兵作战","简称","其实","提","迈过","不能","通信","灵活","编码方式","topic","多个","不仅","到","开发方式","可读","有且","没有","推倒","涌现","一些","大量","还","格局","应用层","诟病","上","比如","保留","不难理解","强","主角","完善","普及","一定","里","力学","除了","复用","理器","推倒重来","命令行","就是","框架","why","物","网络连接","过去","中间层","算力","按照","其他","如何","不太","完成","名称","分布","存在","同时","只有","能力","通信协议","数据","标准","大家","图像","本","针对","系统","最","二代","一旦","便于","一代","为什么","不爽","巨大","不过","类型","角色","应用","前方","课时","黑客","自动","主要","改","时间","差异","稳定性","方案","总体","要求","几乎","方式","相比","实时性","二种","各样","进行","左侧","自家","经常","尽力","打交道","工作站","集成","核心"],"title":"ROS2对比ROS1","title_tokens":["ros2","ros1","对比"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2ros1","text":"在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。","text_tokens":["ros","你","大","二代","？","多","上","听说","ros1","过","能","看看","第二代","也许","有","做","其中"," ","和","或","到底","使用","。","对比","就是","就","第二","从","么","来看","之前","不","ros2","，","的","名称","这","我们","在","一个","学习","变化"],"title":"ROS2对比ROS1","title_tokens":["ros2","ros1","对比"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros1","text":"首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。","text_tokens":["为了","计算","高昂","它","做成","产品","ros1","有限","工作","目标","作战","天翻地覆","有线","可靠性","实力","：","市场","风险","连接","具备","绝大","生产","那","适合","设计","。","就","良好","自己","来看","致使","网络","是因为","中","在","甚至","因为","不够","处理","让","？","软件","不用","或者","家庭","汽车","服务","复杂","学术研究","嵌入","首先","大部分","第一个","会","最早"," ","和","级别","了","当然","独立","小","只能","保证","具体","用于","单兵","课程","要","也","是","支持","入侵","不","先进","ros2","开发","诞生","可靠","可以","单兵作战","走向","条件","这","我们","设备","通信","最终","pr2","ros","没有","涌现","一些","由于","但是","研究","上","比如","售价","历史","主角","似乎","并","普及","内部","搭载","；","发展","找到","嵌入式","驾驶","地方","就是","框架","why","网络连接","答案","充足","批量","算力","翻地","这样","一款","完成","机器人","批量生产","已经","他","出现","航天","担忧","运算","大部","问题","能力","学术","原本","数据","机器","第一","针对","系统","—","虽然","干扰","一代","为什么","资源","走向市场","平台","不断涌现","有","类型","应用","实时","黑客","丢","自动","时间","这台","绝大部分","足够","各种","从","运行","款","呢","用","类似","更加","都","部分","成本","，","的","新一代","一个","什么","工作站","随着","不断"],"title":"ROS1的局限性","title_tokens":["的","局限","限性","局限性","ros1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2","text":"ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。","text_tokens":["为了","这个","任何","rtos","ros1","之初","需求","风险","连接","适合","毛坯房","分解","运动","项目管理","环境","第二种","成功经验","结合","在","更","布式","一种","架构","让","很多","开发者","定性","项目","？","很大","macos","会","消费市场","了","工程","诸多","几点","一下","颠覆","系统工程","不","以及","解算","基本保障","越来越","内","这","但","（","体现","最终","重来","ros","手机","后续","装修","大","但是","继续","下","rosbuild","更具","场景","给","历史","不再","越来","真正","特性","驾驶","时候","不是","借助","链接","wifi","已经","电脑系统","之上","运动学","怎样","虽然","打成","所以","简单","dds","成功","基础","还会","、","升级","行人","去","最新","用","类似","更加","）","变革","，","明显","100ms","一个","把","全","测试","基本","语言","宕机","：","市场","标准化","具备","使用","就","优化","以下几点","尤其","解密","python3","好","不用","复杂","这些","第一个","流程"," ","得","只是","不同","微控制器","挑战","具体","用于","课程","也","master","操作","周期","ros2","之间","走向","我们","工具","说明","节点","1ms","接口","出错","翻新","能够","安全","机制","面对","编译系统","方法","代码","mcu","提供","对","不会","一款","远比","体验","性能","出现","调试","原本","全部","等","安全性","面临","实时","颠覆性","需要","移植","对系统","各种","第二","运行","信号","做到","生活","都","c++","windows","的","管理器","各种各样","编写","层面","满足","产品","经验","通用性","api","房子","部署","完整性","那","设计","。","借鉴","毛坯","网络","不好","稳定","中","研发","甚至","强壮","与","变化","于","最佳","发现","下要","或者","colcon","重新","控制","所有","保障","独立","android","智能","后","无论","要","考虑","怀揣","python","可靠","完整","实现","动力","受制","消费","通用","跨平台","并","编译器","细节","搭载","相对","管理","两个","长远","这样","操作系统","机器人","千差万别","问题","机器","未来","控制器","第一","较","linux","可能","平台","有","性","原有","产品化","无法","建筑","策略","呢","以下","修改","协作","受制于","发送","它","行为","编译","直接","盖","工作","ament","catkin","阶段","全新","自己","来看","方便","历史使命","纠结","为","比","叫做","他们","个体","选择","导致","软件","多","动力学","汽车","加密","电脑","amr","能","尽量","和","新版","肯定","是","时代","分布式","入侵","开发","可以","使命","提","不能","通信","不仅","到","没有","推倒","大量","还","格局","上","比如","保留","强","一定","力学","除了","理器","推倒重来","就是","框架","网络连接","过去","算力","如何","完成","分布","同时","数据","标准","大家","系统","针对","一旦","巨大","角色","应用","前方","课时","黑客","自动","差异","稳定性","方案","要求","相比","实时性","二种","各样","进行","经常","尽力"],"title":"全新的ROS2","title_tokens":["的","ros2","全新"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2-vs-ros1","text":"","text_tokens":[],"title":"ROS2 vs ROS1","title_tokens":["vs","ros2","ros1"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_1","text":"在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。","text_tokens":["通信接口","这个","下边","一团乱麻","它","乱麻","rtos","tcp","ros1","客户","库会","过","依赖","注意","成","理解","一套","连接","交道","那","。","信息","就","应该","不难","写","一团","封装","接收","内存","稳定","中","在","再","而已","听","让","变化","架构","很多","如果","udp","发现","好","复杂","macos","这些","间层","所有","会","大致"," ","得","和","了","肯定","至关重要","调用","底层","看","发布","走","也","是","至关","驱动","master","不","操作","ros2","开发","内","可以","两者","建立","一样","这","我们","但","请","通信","指挥","节点","先","整体","接口","ros","协议","有且","后续","雷达","公司","大量","是从","突然","频繁","应用层","上","比如","机制","会成","不难理解","印象","通过","完善","ceo","里","方法","并","名字","找到","理器","时候","管理","接触","就是","共享","哪些","可选","框架","提供","中间层","这样","操作系统","不太","开始","彼此","右侧","只有","简单明了","进程","安装","可选项","通信协议","数据","大家","标准","图像","而","程序","系统","最","—","自","linux","简单","dds","共享内存","了解","只不过","选项","不过","一团乱","消失","有","角色","中间","基于","应用","层","将","需要","主要","重要","、","客户端","discovery","对比","方式","类似","更加","都","深入","更换","进行","windows","，","的","明显","左侧","从而","变得","一个","管理器","把","打交道","张图","另外","学习"],"title":"系统架构","title_tokens":["架构","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#dds","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。","text_tokens":["为了","这个","功能","满足","一家","接入","每","交付","听说","tcp","产品","ros1","专注","想要","适用","基本","目标","国际标准","另","总之","轻松","需求","这里","部署","middleware","设计","。","对于","就","一行","应该","带来","优化","提高","商业","省略","该","写","厂家","稳定","中","为","纠结","例子","在","再","更","一种","让","变化","精力","于","如果","选择","udp","软件系统","定义","只要","好","？","社区","软件","多","收","不用","加密","重新","产品开发","rmw","复杂","最大","这些","某","会"," ","得","了","当然","不同","延迟","肯定","然后","底层","要","也","是","么","解决","是否","master","fastrtps","不","举","ros2","开发","交给","可以","一样","开源","常","实现","其实","我们","这","简称","通信","5g","熟悉","灵活","适配","多个","先","高","接口","ros","协议","一些","频繁","诟病","能够","比如","国际","场景","给","加入","做","并","切换","减少","之外","完","复用","除了","广泛应用","代码","过来","不是","复杂度","就是","还有","物","配置","提供","按照","其他","如何","这样","三个","机器人","性能","广泛","时","符合","用户","丰富","厂商","唯一","放在","opensplice","问题","安装","通信协议","数据","开发成本","标准","属性","机器","程序","系统","最","发成","等","所以","简单","dds","率","不爽","不过","基于","应用","丢","改","、","移植","每个","无法","各种","相比","类似","用","更加","都","部分","发","更换","成本","的","，","联网","版本","一个","自家","把","来讲","/","层面","指定"],"title":"DDS通信","title_tokens":["dds","通信"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_2","text":"ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。","text_tokens":["很多","开发方式","开发者","ros","大家","如果","担心","本","没有","一一","一致","几百万","不用","便于","讲解","ros1","保留","百万","过","这些","二个","尽量","有","其中","会"," ","和","应用","了","并","方法","小伙","陌生","伙伴","迁移","这里","全球","几百","概念","使用","。","课程","依然","第二","应该","从","也","方式","几乎","就","以及","不","部分","ros2","开发","第二个","意义","各位","，","的","存在","广泛","已经","中","我们","在","小伙伴","含义","熟悉","非常","学习","到"],"title":"核心概念","title_tokens":["概念","核心"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_3","text":"再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。","text_tokens":["发布者","暂且","可移植","企业","难度","不要","ros1","更接","看看","语言","稍安","具备","一步","如","。","就","更好","真实","提高","之后","写","中","再","在","更","一本","同样","发现","项目","编码","学","软件","多","而言","一页","大部头","会","带领"," ","和","移植性","教程","面向","具体","发布","课程","也","是","角度","所示","操作","可移植性","ros2","开发","实现","我们","迈过","这","对象","软件开发","可读","后续","过程","一些","道坎","编程语言","面向对象","总体而言","方法","特性","确实","可读性","来","两个","如何","机器人","一边","勿躁","大部","大家","切记","机器","程序","不过","编程","移植","总体","从","部头","方式","接近","用","用到","，","的","图片","搬","当","版本","一个","来讲","学习"],"title":"编码方式","title_tokens":["编码方式","编码","方式"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_4","text":"最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随课程，你就会慢慢理解这些特性。","text_tokens":["功能","每","即可","难度","ros1","主","理解","：","启动","除此之外","。","就","上手","陆续","啦","大幅","换成","中","再","在","更","总结","一种","变化","相关","如果","选择","最为","慢慢","好","而言","以上","这些","控制","跟随","所有","某","会"," ","和","大致","了","独立","教程","多功能","没","概念","课程","也","是","master","ros2","开发","最后","我们","工具","通信","节点","topic","话题","rosrun","ros","后续","比如","下","上升","做","印象","之外","相对","命令行","特性","就是","干掉","现有","对","命令","表示","初次","大幅度","分散","你","大家","—","dds","除此","有","常用","编程","run","幅度","对比","都","的","，","揭秘","一个","把","rostopic","集成","核心"],"title":"命令行","title_tokens":["命令","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/","text":"ROS2安装方法 本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。 Linux系统简介 时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。 Ubuntu系统简介 我们后续课程使用到的Linux发行版就是ubuntu系统。 Ubuntu诞生于2004年10月份，每六个月发布一个新版本，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。 Ubuntu虚拟机安装 虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下： 1. 下载系统镜像 下载链接： https://ubuntu.com/download/desktop 2. 在虚拟机中创建系统 3. 设置虚拟机硬盘大小 4. 设置Ubuntu镜像路径 5. 启动虚拟机 6. 设置用户名和密码 7. 等待系统安装 8. 完成安装 Ubuntu系统安装好后，大家可以先随意使用熟悉一下。 ROS2系统安装 接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下： 1. 设置编码 $ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8 2. 添加源 $ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844 3. 安装ROS2 $ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop 4. 设置环境变量 $ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。 ROS2示例测试 为了验证ROS2安装成功，我们可以通过以下示例进行测试。 示例一：命令行示例 先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。 示例二：小海龟仿真示例 再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。 附：虚拟机镜像 为了方便大家入门学习，我们也提供了预装好ROS2软件和教程代码的虚拟机镜像，有需要的小伙伴可以通过以下链接下载： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["这个","计算","任何","为了","en","humble","二个","s","keyring","dpkg","1dvxugmhxlxnsnfdezuxw0g","算机","建议","dev","$","~","实力","5","install","试一试","适合","尚","二句","任何人","只","现在","啦","运动","会加","商业","传输","内核","环境","优先","背景","通讯","在","再","更","keyrings","一种","修复","让","很多","人工智能","开发者","附","源","蕴藏","]","伴随","？","地址","后缀","macos","发扬光大","会","了","外衣","绑定","一下","这套","第一句","pan","底层","deb","情况","报错","之前","不","22","命名","激起","越来越","诞生","开源","免费","一样","大学生","这","但","等待","1991","arch",".","先","8","ros","10","爱好","后续","上下","如下","环境变量","大","但是","listener","其后","下","codename","sudo","何人","给","场景","main","越来","其中","turtlesim","互联","名字","world","时候","上层","界面","已有","connect","第二个","链接","起来","时","已经","之上","key","source","04","基本相同","_","你","好者","虽然","讲解","所以","一","dds","成功","开放","大学","、","蓝色","升级","本相","一应俱全","编号","比较","左右","紧随其后","领域","数字","，","联网","第一次","一个","把","来讲","至此","4","”","“","echo","企业","文件","添加","测试","上下左右","一句","绝对","位置","null","适用","基本","|","目前","新","小伙","提取","：",">","启动","小海","编辑","这里","使用","就","demo","快速","资料","pro","每年","该","download","之后","apt","etc","py","二","https","叫","upgrade","因为","此时","cpp","下载","好","curl","37844","试试","最大","lang","等等","guyuehome","第一个"," ","终端","不同",")","收费","概念","课程","发布","也","擦掌","入门","master","操作","计算机","任务","ros2","products","检验","我们","软件开发","update","说明","浏览","节","节点","回到","精神","普通","之内","公司","用户名","虚拟","加入","hello","学生","做","人工","方法","=","1","代码","一位","看到","依然","者","代表","提供","对","发挥","failed","命令","\"","源代码","应用程序","技术","开始","性能","出现","他","密码","用户","turtle","摩拳擦掌","维护","合适","原本","简介","快","raw","export","键盘","中将","bug","—","等","lsb","了解","唯一标准","除此","ubuntu20.04","强大","html","正常","订阅","或","需要","18","org","各个","移植","run","动手做","效果","各种","第二","从","热爱","介绍","运行","应用软件","都","路径","windows","影响","放到","的","为例","workstation","share","可视","--","各种各样","吧","长期","说干就干","另外","/","个","发布者","locale","多用","想要","有限","依赖","反馈","吸引","成","大小","&&","desktop","一直","talker","除此之外","设计","。","预装","centos","提交","硬盘","6","网络","node","之一","稳定","中","com","点击","甚至","与","bash","于","如果","设置","编码","最为","opt","操作界面","或者","重新","分享","服务","teleop","占据","控制","以","随意","先要","伙伴","教程","务器","保证","智能","成熟","后","无论","构建","加上","是否","实践","激发","考虑","关注","前先要","出","相同","实现","请","熟悉","[","如遇","print","并用","六个","过程","packages","编辑器","通用","to","2022","一次","通过","提到","并","顺序","之外","gen","变量","发展","管理","接触","互联网","很","创建","lc","无论是","步骤","bashrc","list","来","两个","服务器","一般","年","接下","这样","操作系统","机器人","爱好者","表示","还是","unix","指令","唯一","发扬","问题","安装","机器","未来","程序","第一","linux","可能","locales","evaluation","有","sources","兼容","release","常用","月","原有","将","重要","呢","ubuntu","usr","以下","一起","出于","o","小伙伴","版本","(","按键","俱全","海龟","什么","奥义","学习","硬件","衡量","功能","可","热情","持续","每","更新","看出","直接","准备","一石激起千层浪","工作","gnupg","千层","7","仿真器","一套","原理","setup","应该","自己","gpg","方便","迅猛","光大","虚拟机","叫做","准确","githubusercontent","字符串","选择","最好","技术实力","软件","多","vmware","exc6","字符","signed","电脑","示例","第二句","archive","镜像","ubuntu22.04","architecture","个人爱好","和","量","os","tee","是","支持","自行","小海龟","开发","-","可以","林纳斯","其","通信","验证","接下来","月份","多个","发行","all","不仅","到","us","仿真","baidu","没有","一些","大量","还","好后","户名","fedora","上","www","多任务","比如","3","lts","当中","可视化","一定","码","真理","打包","除了","命令行","by","芬兰","就是","关于","多用户","http","采用","其他","2004","如何","不太","完成","一应","成为","发行版","探索","同时","多人","浏览器","分别","版","d","传播","每隔","行列","数据","标准","大家","下来","本","系统","最","utf","决定","rosdistro","动手","nodes","经典","模式","2","参考","千层浪","两年","应用","redhat","主要","操作方法","时间","华丽","六个月","ssl","环境变",":","真器","乐于","各样","进行","指标","并且","个人","变动","其他软件","紧随","核心"],"title":"ROS2安装方法","title_tokens":["ros2","安装","方法"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2","text":"本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。","text_tokens":["本","系统","最","—","linux","了解","先要","重要","一下","底层","。","操作","前先要","ros2","操作系统","，","的","一起","我们","节","一种","安装"],"title":"ROS2安装方法","title_tokens":["ros2","安装","方法"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#linux","text":"时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。","text_tokens":["衡量","这个","计算","任何","功能","企业","热情","每","多用","有限","一石激起千层浪","依赖","之前","基本","反馈","吸引","成","适用","算机","千层","目前","一套","实力","原理","适合","尚","使用","设计","。","任何人","就","centos","应该","提交","自己","快速","现在","每年","迅猛","商业","内核","之后","光大","之一","稳定","中","叫","在","更","叫做","甚至","修复","准确","与","此时","很多","开发者","最好","伴随","？","技术实力","软件","多","操作界面","或者","重新","分享","服务","macos","发扬光大","镜像","等等","会"," ","和","个人爱好","了","外衣","不同","绑定","教程","务器","量","收费","这套","成熟","后","概念","底层","也","是","加上","情况","支持","实践","不","计算机","操作","任务","命名","激发","激起","开发","越来越","ros2","相同","可以","开源","免费","大学生","林纳斯","其","检验","实现","这","但","我们","1991","熟悉","先","发行","不仅","回到","到","精神","并用","爱好","过程","没有","一些","大量","还","大","公司","fedora","通用","上","多任务","下","比如","加入","何人","给","场景","学生","做","越来","通过","其中","提到","方法","当中","并","互联","可视化","真理","名字","发展","代码","打包","管理","一位","芬兰","互联网","就是","看到","多用户","服务器","一般","对","界面","其他","源代码","已有","应用程序","年","技术","操作系统","不太","起来","性能","爱好者","已经","他","成为","出现","用户","发行版","多人","unix","之上","唯一","发扬","问题","维护","传播","原本","基本相同","安装","行列","标准","好者","本","bug","程序","系统","最","—","虽然","决定","linux","动手","等","讲解","所以","唯一标准","模式","强大","开放","参考","兼容","千层浪","有","应用","大学","常用","一样","原有","或","主要","重要","时间","需要","、","redhat","操作方法","本相","动手做","各种","华丽","热爱","呢","应用软件","都","乐于","ubuntu","windows","各样","指标","放到","，","的","个人","联网","出于","并且","一起","版本","一个","可视","把","各种各样","来讲","什么","说干就干","另外","核心","硬件"],"title":"Linux系统简介","title_tokens":["简介","系统","linux"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu","text":"我们后续课程使用到的Linux发行版就是ubuntu系统。 Ubuntu诞生于2004年10月份，每六个月发布一个新版本，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。","text_tokens":["个","为了","文件","持续","更新","每","看出","直接","绝对","位置","想要","建议","新","一直","5","编辑","这里","试一试","使用","除此之外","。","就","只","自己","硬盘","会加","资料","网络","环境","优先","之后","稳定","中","通讯","在","再","更","虚拟机","因为","让","人工智能","于","很多","开发者","如果","选择","好","软件","多","后缀","电脑","占据","最大","以","ubuntu22.04","会"," ","了","不同","教程","保证","一下","智能","课程","发布","无论","也","是","擦掌","支持","之前","22","考虑","关注","自行","开发","出","诞生","可以","免费","我们","软件开发","熟悉","浏览","月份","发行","到","普通","10","之内","六个","后续","还","但是","编辑器","其后","上","虚拟","比如","2022","lts","其中","一次","通过","人工","方法","一定","互联","顺序","之外","除了","时候","接触","互联网","就是","很","上层","无论是","依然","代表","发挥","其他","已有","年","2004","如何","这样","机器人","一应","性能","表示","出现","发行版","时","已经","用户","还是","浏览器","版","04","摩拳擦掌","维护","合适","安装","每隔","快","你","大家","机器","本","未来","第一","系统","linux","等","所以","可能","讲解","除此","ubuntu20.04","有","两年","参考","常用","应用","月","18","主要","重要","或","各个","、","移植","升级","一应俱全","效果","各种","六个月","编号","从","比较","介绍","都","ubuntu","紧随其后","进行","windows","影响","领域","数字","的","，","变动","联网","为例","第一次","版本","一个","俱全","长期","紧随","4","硬件"],"title":"Ubuntu系统简介","title_tokens":["简介","系统","ubuntu"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu_1","text":"虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下：","text_tokens":["大家","下载","如下","系统","软件","vmware","地址","虚拟","www","安装","准备","evaluation","工作","html"," ","和","并","：","这里","后","。","就","构建","步骤","是","运行","/","采用","啦",":","pro","操作","自行","其他","已有","相同","环境","-","，","可以","的","https","workstation","com","products","完成","开始","我们","在","同时","一个","请","之上",".","虚拟机","叫做","其他软件","多个","另外","让"],"title":"Ubuntu虚拟机安装","title_tokens":["虚拟","虚拟机","安装","ubuntu"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1","text":"下载链接： https://ubuntu.com/download/desktop","text_tokens":["https","com","下载"," ","desktop",":",".","：","ubuntu","/","download","链接"],"title":"1. 下载系统镜像","title_tokens":["镜像","下载","系统"," ",".","1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2","text":"","text_tokens":[],"title":"2. 在虚拟机中创建系统","title_tokens":["中","2","创建","在","系统"," ",".","虚拟机","虚拟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3","text":"","text_tokens":[],"title":"3. 设置虚拟机硬盘大小","title_tokens":["设置","3","硬盘","大小"," ",".","虚拟机","虚拟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4-ubuntu","text":"","text_tokens":[],"title":"4. 设置Ubuntu镜像路径","title_tokens":["设置","镜像"," ",".","路径","ubuntu","4"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#5","text":"","text_tokens":[],"title":"5. 启动虚拟机","title_tokens":[" ",".","虚拟机","5","启动","虚拟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#6","text":"","text_tokens":[],"title":"6. 设置用户名和密码","title_tokens":["设置","密码","用户"," ","和","6",".","户名","用户名"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#7","text":"","text_tokens":[],"title":"7. 等待系统安装","title_tokens":["等待","系统"," ","7",".","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#8","text":"Ubuntu系统安装好后，大家可以先随意使用熟悉一下。","text_tokens":["，","可以","使用","大家","。","随意","好后","系统","熟悉","ubuntu","先","安装","一下"],"title":"8. 完成安装","title_tokens":["完成"," ",".","8","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_1","text":"接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下：","text_tokens":["下来","如下","系统","了","：","。","就","步骤","ubuntu","ros2","接下","，","可以","中","我们","把","接下来","安装","到"],"title":"ROS2系统安装","title_tokens":["ros2","系统","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1_1","text":"$ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8","text_tokens":["export","en","utf","locale","sudo","locales","lang"," ","&&","$","=","gen","install","lc","apt","-","update",".","8","all","_","us"],"title":"1. 设置编码","title_tokens":["设置","编码"," ",".","1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2_1","text":"$ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844","text_tokens":["“","echo","可","keyring","dpkg","null","gnupg","&&","|","dev","$",">","install","gpg","apt","etc","https","com","keyrings","githubusercontent","]","curl","signed","37844","archive","guyuehome","architecture"," ",")","os","deb","tee","报错","master","ros2","-","update","[",".","arch","如遇","print","ros","packages","www","to","codename","sudo","main","=","by","http","list","failed","\"","connect","key","source","d","_","raw","rosdistro","lsb","sources","参考","release","org","ssl",":","ubuntu","usr","，","share","o","(","--","/","”"],"title":"2. 添加源","title_tokens":["2","源"," ","添加","."]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3-ros2","text":"$ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop","text_tokens":["ros"," ","desktop","update","$","upgrade","-","install","humble","apt","sudo"],"title":"3. 安装ROS2","title_tokens":["3"," ",".","ros2","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4","text":"$ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。","text_tokens":["bash","ros","echo","opt","系统","好","humble"," ","了","$","~",">","setup","。","bashrc","就","\"","ros2","，","中","已经","在",".","至此","source","/","安装"],"title":"4. 设置环境变量","title_tokens":["设置","环境变"," ","环境变量",".","变量","4","环境"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_2","text":"为了验证ROS2安装成功，我们可以通过以下示例进行测试。","text_tokens":["，","为了","可以","以下","。","成功","我们","通过","验证","测试","ros2","示例","进行","安装"],"title":"ROS2示例测试","title_tokens":["ros2","示例","测试"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_1","text":"先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。","text_tokens":["发布者","“","数据","字符串","如果","cpp","没有","最为","第一","系统","listener","字符","nodes","dds","试试","二个","hello","第一个","正常"," ","终端","通过","$","：","启动","订阅","重要","talker","world","run","”","底层","。","发布","第二","来","demo","者","两个","是否","命令","ros2","第二个","以下","py","传输","的","，","中","在","一个","通信","说明","节点","吧","先","问题","_"],"title":"示例一：命令行示例","title_tokens":["一","：","命令","示例","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_2","text":"再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["“","ros","仿真","后续","键盘","中将","上下","如下","第一","蕴藏","持续","—","上下左右","一句","上","teleop","示例","第二句","经典","安装","控制","成功"," ","终端","turtlesim","仿真器","$","：","启动","小海","将","教程","蓝色","第一句","试一试","run","”","二句","。","关于","就","第二","来","两个","运行","啦","运动","真器","左右","小海龟","ros2","该","背景","的","，","node","可以","点击","中","我们","探索","再","在","一个","海龟","按键","分别","指令","turtle","key","节点","奥义","至此","_"],"title":"示例二：小海龟仿真示例","title_tokens":["仿真","海龟","：","小海","小海龟","示例","二"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_3","text":"为了方便大家入门学习，我们也提供了预装好ROS2软件和教程代码的虚拟机镜像，有需要的小伙伴可以通过以下链接下载： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["baidu","为了","大家","下载","好","软件","虚拟","exc6","s","1dvxugmhxlxnsnfdezuxw0g","镜像","有","通过","和"," ","了","提取","小伙","伙伴","：","码","教程","需要","代码","pan","预装","也","方便","提供","入门",":","ros2","以下","链接","，","的","可以","https","com","小伙伴","我们",".","虚拟机","/","学习"],"title":"附：虚拟机镜像","title_tokens":["镜像","附","虚拟机","：","虚拟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/","text":"ROS2命令行操作 在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。 Linux中的命令行 类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。 启动方式 回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。 常用命令操作 我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。 ROS2中的命令行 ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。 运行节点程序 想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看节点信息 当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim 查看话题信息 当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose 发布话题消息 想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 发送服务请求 一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\" 发送动作目标 想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\" 录制控制命令 系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["pub","这个","call","twist","管理员","不一","干什么","异常","既","死机","{","目标","详细","复制到","另","$","均","需求","容易","试一试","衣服","新建","死记硬背","啦","深色","感觉","背景","约束","record","结合","name","在","再","更","受","材料","例如","一种","让","很多","查看","自主","并不一定","发指","]","？","做好","实验","服装","会","带领","某","大致","了","angular","总","一下","子目","看不到","之前","不","商场","十个","service","现出","action","消息","一样","但","这","pose","尝试","又",".","记忆","先","1.8","ros","体会","便捷","如下","但是","play","goal","继续","一系","下","标目","sudo","场景","呈现","文件名称","turtlesim","窗口","其上","款式","时候","不是","保持","太","现有","感受","必不可少","链接","起来","一系列","一边","已经","当前工作","当前","初次","key","04","_","你","虽然","笔记本电脑","所以","一","产生","rate","srv","至于","列表","、","硬","去","类似","用","地","深入","麻烦","，","第一次","改变","一个","把","来讲","查","”","“","绝对路径","theta","echo","文件","即可","17","绝对","这项","y","多种","：",">","小海","启动","编辑","这里","改了","一步","使用","对于","就","z","该","本节","目标目录","看中","0.0","因为","逛来","有点","此时","慢慢","好","gedit","不到","不用","info","这些","第一个"," ","终端","只是","不同","感兴","具体","概念","发布","也","至今","解决","terminal","随身带","操作","ros2","我们","工具","此","节点","右键","cd","回到","二十个","每次","能够","一只","精心设计","db3","看似","机制","度高","文件夹","turtle1","1","cmd","确实","及其","看到",",","忙","还有","提供","对","命令","\"","体验","复现","35","请求","pwd","段","用户","turtle","调试","键盘","快捷","权限","—","快捷键","等","了解","移入","spawn","msg","}","'","正常","兴趣","需要","或","run","各种","运行","都","路径","用到","的","为例","令人发指","所在","这种","可视","--","/","geometry","指定","满足","播放","逛来逛去","想要","mv","看看","成","想象","知道","一直","及","布料","设计","。","信息","2.0","动作","呈现出","bag","node","absolute","中","完全","rosbag","目","mkdir","推出","参数","与","于","如果","鼠标","根据","统管","或者","笔记本","服务","teleop","详细信息","控制","科幻","+","以","炫酷","所有","呀","后","无论","要","msgs","总有","加上","rosbag2","商家","很少","出","相同","实现","熟悉","主目录","[","电影","cp","话题","魅力","ls","编辑器","显示","某个","难以","数量","一二十","精心","2022","一次","通过","并","管理","接触","很","创建","哪些","来","list","死记","linear","动","改名","接下","这样","里边","若","表示","rotate","还是","指令","件夹","系统管理员","问题","拷贝到","执行","既定","rm","未来","第一","程序","linux","定制","可能","x","选项","rotateabsolute","枯燥","由","有","常用","列出","找","将","原有","重要","科幻电影","不可","写字","帮上","呢","<","目的","多到","一起","输入","海龟","什么","常用命令","一二十个","随着","11","学习","发送","功能","案例","它","删除","体操","每","被","一件","alt","直接","实验室","工作","具体操作","仿真器","适应","0.2","轻松","源文件","规则","原因","vel","打开","自己","搜索","二十","跟","为","转","买","叫做","t","选择","孤单","软件","多","怎么","字符","电脑","以上","进一步","和","小","感兴趣","一二","调用","是","则","角度","send","小海龟","-","可以","某段","灵活","子目录","接下来","topic","多个","随身","到","仿真","没有","背","一些","还","子","上","比如","保留","3","一定","可视化","命令行","一点","就是","什么样","从来","其他","专门","不变","如何","不太","完成","名称","觉得","逛去","数据","后边","大家","哪","下来","本","录制","系统","文件名","目录","…","为什么","手","而是","不过","2","想","应用","语法","黑客","40","ctrl","复制","主要","笔记","内容","方式","片段",":","真器","0","系列","拷贝","进行","令人","集成","核心"],"title":"ROS2命令行操作","title_tokens":["ros2","操作","命令","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2","text":"在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。","text_tokens":["大家","如果","魅力","案例","第一","—","多","可能","进一步","学习","会","一次"," ","带领","了","一定","适应","小海","将","重要","命令行","一步","时候","使用","接触","。","运行","感受","之前","命令","深入","ros2","小海龟","的","，","不太","本节","可以","第一次","中","我们","在","工具","更","海龟","一种","随着","调试","有点","到"],"title":"ROS2命令行操作","title_tokens":["ros2","操作","命令","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#linux","text":"类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。","text_tokens":["功能","满足","被","一件","不一","异常","逛来逛去","想要","成","想象","一直","需求","这里","布料","容易","衣服","使用","设计","。","对于","规则","就","呈现出","自己","约束","看中","中","结合","完全","为","在","受","买","材料","一种","推出","逛来","此时","很多","于","自主","并不一定","？","做好","根据","多","软件","服务","这些","科幻","服装","炫酷","所有","会","某"," ","和","小","了","呀","无论","总有","是","至今","解决","不","操作","商场","商家","现出","可以","一样","但","我们","工具","灵活","先","电影","ros","每次","便捷","没有","一些","但是","能够","精心设计","比如","保留","看似","场景","精心","呈现","并","可视化","一定","其上","款式","度高","命令行","时候","不是","一点","看到","就是","什么样","来","现有","命令","其他","必不可少","这样","起来","里边","已经","还是","逛去","问题","既定","你","大家","哪","虽然","linux","定制","等","为什么","手","科幻电影","、","各种","不可","去","方式","类似","片段","呢","都","麻烦","的","，","一个","这种","可视","来讲","什么"],"title":"Linux中的命令行","title_tokens":["的","中","命令","linux","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_1","text":"回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。","text_tokens":["这个","功能","即可","alt","既","这项","死机","多种","：","启动","及","使用","。","原因","打开","就","深色","搜索","二十","背景","中","在","叫做","因为","参数","t","选择","鼠标","慢慢","发指","不到","软件","怎么","不用","字符","笔记本","电脑","+","科幻","会"," ","终端","一下","一二","后","也","是","看不到","terminal","随身带","操作","十个","很少","可以","这","我们","工具","熟悉","又","右键","记忆","电影","随身","回到","到","二十个","体会","魅力","背","但是","上","难以","一系","数量","一二十","通过","并","一定","窗口","命令行","时候","不是","确实","看到","很","就是","从来","来","对","命令","其他","专门","一系列","初次","觉得","指令","大家","本","快捷","快捷键","笔记本电脑","所以","为什么","而是","手","不过","枯燥","有","正常","应用","常用","至于","黑客","列表","ctrl","需要","笔记","科幻电影","硬","写字","方式","呢","用","都","系列","用到","，","的","多到","令人发指","所在","输入","令人","什么","一二十个","随着"],"title":"启动方式","title_tokens":["方式","启动"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_2","text":"我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。","text_tokens":["“","绝对路径","功能","它","文件","删除","管理员","绝对","mv","工作","目标","复制到","另","均","：",">","及","编辑","源文件","。","对于","打开","就","新建","死记硬背","感觉","该","目标目录","中","为","目","mkdir","]","gedit","多","统管","或者","这些","以","所有","会"," ","了","只是","一下","子目","也","则","不","出","可以","我们","主目录","此","[","子目录","熟悉","先","多个","cp","cd","回到","没有","ls","编辑器","显示","某个","下","标目","sudo","文件名称","文件夹","管理","保持","及其","创建","来","死记","命令","改名","不变","链接","体验","名称","一边","若","pwd","当前工作","当前","用户","指令","件夹","系统管理员","拷贝到","执行","rm","大家","未来","系统","权限","文件名","目录","linux","…","一","移入","选项","由","常用","列出","找","语法","列表","或","将","复制","原有","需要","用","<","地","目的","路径","拷贝","的","，","改变","一个","把","查","常用命令","/","”","指定"],"title":"常用命令操作","title_tokens":["常用命令","常用","操作","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2_1","text":"ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。","text_tokens":["仿真","后边","功能","下来","第一","还","参数","体操","linux","继续","比如","干什么","一系","下","了解","机制","以","不过","所有","有","第一个","具体操作","大致"," ","不同","总","核心","小海","主要","命令行","具体","概念","。","就","内容","也","感受","都","操作","命令","目的","对","系列","ros2","小海龟","相同","接下","的","，","node","可以","跟","一系列","为例","中","表示","我们","一起","在","一个","海龟","接下来","节点","什么","topic","集成","与","话题"],"title":"ROS2中的命令行","title_tokens":["的","中","命令","ros2","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_3","text":"想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["仿真","键盘","某个","teleop","想要","控制"," ","和","turtlesim","$","：","run","使用","要","运行","命令","操作","ros2","进行","，","可以","node","中","我们","海龟","turtle","key","节点","例如","_"],"title":"运行节点程序","title_tokens":["程序","运行","节点"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_4","text":"当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim","text_tokens":["ros","查看","如果","它","系统","？","子","info","详细信息","有","详细","某"," ","知道","turtlesim","$","感兴","：","兴趣","感兴趣","信息","哪些","就","来","加上","运行","list","呢","啦","都","对","命令","ros2","这样","的","可以","node","，","中","当前","一个","节点","/"],"title":"查看节点信息","title_tokens":["查看","信息","节点"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_5","text":"当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose","text_tokens":["查看","数据","echo","如下","系统","还","即可","子","有","某"," ","想","$","：","turtle1","试一试","使用","看到","加上","list","呢","都","命令","ros2","，","的","消息","中","当前","一个","pose","topic","/","话题"],"title":"查看话题信息","title_tokens":["查看","信息","话题"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_6","text":"想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":["pub","还","twist","直接","x","想要","控制","y","{","msg","}","rate","通过"," ","angular","$","：","turtle1","1","命令行","cmd",",","发布","vel","msgs","2.0","z",":","命令","linear","geometry","\"","动","ros2","，","起来","可以","我们","海龟","--","指令","0.0","topic","/","_","话题","1.8"],"title":"发布话题消息","title_tokens":["消息","发布","话题"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_7","text":"一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\"","text_tokens":["仿真","theta","call","孤单","还","—","一只","服务","x","产生","y","spawn","{","2","}","'"," ","turtlesim","仿真器","$","srv","：","0.2","改了","试一试","调用",",","太","来","提供","真器",":","\"","ros2","service","，","name","我们","再","一个","海龟","/"],"title":"发送服务请求","title_tokens":["发送","服务","请求"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_8","text":"想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\"","text_tokens":["发送","仿真","这个","theta","goal","比如","想要","3","rotateabsolute","目标","通过"," ","turtlesim","仿真器","$","：","turtle1","命令行","_","具体","忙","动作","角度","帮上","send","提供","真器",":","命令","\"","ros2","这样","action","，","的","完成","可以","absolute","中","rotate","一个","海龟","转","到","/","让","指定"],"title":"发送动作目标","title_tokens":["发送","目标","动作"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_9","text":"系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["很多","数据","如果","下来","功能","大家","录制","系统","好","？","每","17","play","子","db3","实验室","播放","以上","想要","实验","看看","2022","有"," ","常用","$","轻松","：","40","turtle1","_","cmd","。","vel","很","就是","还有","自己","运行","11","用","啦","rosbag2","0","命令","bag","ros2","如何","-","的","，","某段","复现","35","可以","中","这","rosbag","段","再","实现","record","还是","我们","一个","把","尝试",".","04","/","与","回到"],"title":"录制控制命令","title_tokens":["控制","录制","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","text":"ROS2开发环境配置 ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。 Git git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git 下载教程源码 《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。 VSCode Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download VSCode插件配置 为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。 中文语言包 Python插件 C++插件 CMake插件 vscode-icons ROS插件 Msg Language Support Visual Studio IntelliCode URDF Markdown All in One VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["linus","为了","功能","文件","》","编译","作为","语言包","人","被","喜欢","迅速","直接","审核","《","准备","studio","千上万","略显","gitee","语言","理工","新","$","网站","中文","：","install","编辑","这里","使用","设计","。","就","一行","哪里","提交","只","微软","快速","自己","变更","冲突","码云","组件","搜索","非常简单","环境","之后","apt","download","https","com","中","在","github","更","非常","修复","推出","让","官方","与","很多","查看","开发者","如果","下载","项目","2015","好","？","网上","软件","多","记事","管理软件","示例","复杂","成千","language","macos","这些","以上","clone","tutorials","高效","等等","guyuehome","所有","记事本","无限","会"," ","和","成千上万","了","终端","不同","神兵","官方网站","肯定","教程","visual","听到","具体","插件","课程","离不开","上万","也","是","另外","支持","驱动","不","以及","入门","操作","ros2","开发","扩展","python","出","-","两款","开发工具","可以","开源","千万","之间","这","我们","简称","但","工具","功能强大","几千万",".","浏览","one","先","多个","all","判断","ros","每次","code","后续","一些","大量","还","编辑器","官方网","比如","一系","sudo","给","git","做","集成","人工","并","方法","切换","常听到","发展","讲","代码","特性","广泛应用","文件夹","管理","有些","看到","配置","提供","命令","贡献","support","源代码","已有","不会","年","如何","一款","这样","操作系统","完成","visualstudio","机器人","里边","链接","广泛","成为","一系列","下载方式","因","浏览器","丰富","几千","之父","件夹","众多","自带","in","调试","安装","_","推荐","大家","机器","bug","系统","最","—","21","icons","源码","linux","轻量","所以","可能","简单","便于","搭建","利器","而生","msg","有","强大","应用","intellicode","中会","需要","自动","重要","、","vscode","内容","cmake","方式","呢","用",":","都","系列","markdown","c++","windows","进行","，","的","个人","国内","版本","增加","一个","不开","编写","行","合并","urdf","这款","/","管理工具","硬件"],"title":"ROS2开发环境配置","title_tokens":["ros2","开发","配置","环境"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros2","text":"ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。","text_tokens":["ros","查看","推荐","大家","机器","一些","大量","编译","？","—","源码","示例","这些","给","准备","git","做","和","中会","肯定","需要","重要","代码","、","课程","。","离不开","vscode","配置","呢","提供","开发","环境","如何","，","的","完成","两款","机器人","开发工具","我们","工具","不开","编写","先"],"title":"ROS2开发环境配置","title_tokens":["ros2","开发","配置","环境"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#git","text":"git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git","text_tokens":["linus","功能","人","被","迅速","直接","审核","千上万","gitee","理工","新","$","网站","install","使用","设计","。","就","一行","哪里","提交","变更","冲突","码云","非常简单","apt","之后","中","在","github","非常","修复","让","开发者","项目","软件","管理软件","成千","这些","高效","等等","所有","会"," ","成千上万","和","了","终端","不同","肯定","听到","具体","上万","也","是","驱动","不","以及","开发","可以","开源","千万","之间","这","我们","工具","几千万","多个","判断","每次","比如","sudo","git","人工","并","方法","切换","常听到","发展","代码","特性","广泛应用","管理","有些","看到","命令","贡献","已有","不会","一款","完成","广泛","因","几千","之父","众多","安装","大家","bug","系统","—","linux","所以","可能","简单","而生","有","应用","自动","需要","内容","都","进行","，","的","国内","版本","增加","一个","行","合并","这款","管理工具","硬件"],"title":"Git","title_tokens":["git"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_1","text":"《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。","text_tokens":["很多","查看","推荐","如果","下载","文件","》","还","好","系统","—","21","多","源码","记事","复杂","《","git","clone","tutorials","记事本","guyuehome","略显","gitee","有","会","集成"," ","和","$","：","文件夹","讲","代码","这里","课程","。","vscode","就","是","方式","另外","用","入门",":","ros2","开发","环境","这样","的","，","https","里边","com","中","下载方式","更","一个","浏览器",".","浏览","件夹","自带","/","_"],"title":"下载教程源码","title_tokens":["下载","教程","源码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode","text":"Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download","text_tokens":["code","功能","下载","项目","系统","2015","编辑器","linux","轻量","官方网","studio","macos","搭建","利器","强大"," ","和","网站","神兵","官方网站","：","编辑","visual","代码","、","。","vscode","是","微软","快速","支持",":","操作","组件","windows","源代码","开发","扩展","年","download","链接","操作系统","，","的","可以","https","visualstudio","com","简称","但","功能强大","成为","在","一个","丰富",".","非常","推出","/","官方"],"title":"VSCode","title_tokens":["vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode_1","text":"为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。","text_tokens":["为了","功能","后续","还","与","便于","一系","无限","插件","。","vscode","系列","ros2","开发","扩展","的","，","可以","一系列","我们","调试","安装"],"title":"VSCode插件配置","title_tokens":["配置","插件","vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_2","text":"","text_tokens":[],"title":"中文语言包","title_tokens":["中文","语言","语言包"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#python","text":"","text_tokens":[],"title":"Python插件","title_tokens":["python","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#c","text":"","text_tokens":[],"title":"C++插件","title_tokens":["插件","c++"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#cmake","text":"","text_tokens":[],"title":"CMake插件","title_tokens":["cmake","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode-icons","text":"","text_tokens":[],"title":"vscode-icons","title_tokens":["-","icons","vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros","text":"","text_tokens":[],"title":"ROS插件","title_tokens":["ros","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#msg-language-support","text":"","text_tokens":[],"title":"Msg Language Support","title_tokens":["support","msg","language"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#visual-studio-intellicode","text":"","text_tokens":[],"title":"Visual Studio IntelliCode","title_tokens":["visual","intellicode","studio"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#urdf","text":"","text_tokens":[],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#markdown-all-in-one","text":"VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["推荐","大家","网上","最","作为","喜欢","以上","插件","。","vscode","只","也","配置","自己","支持","搜索","出","开发","环境","的","，","个人","可以","在","众多"],"title":"Markdown All in One","title_tokens":[" ","one","in","markdown","all"]}]}