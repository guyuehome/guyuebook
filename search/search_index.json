{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的电气时代。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的数字时代，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发，智能机器人时代正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。 教程链接 课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 博客泡泡： https://www.guyuehome.com/ 教程问答： https://www.guyuehome.com/bubble/index 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 参考资料： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["人工智能","com","驱动器","参考资料","丰富","数字",".","guyuehome","开发","业生","正式","exc6","这","人类","人工","此时","由示","只能","层面","感知","软件","的","动作","时期","后","_","劳动力","operating","检测","之后","工业","横跨","agv","状","class","而言","机器人","我们","减速机","工厂","减速","控制器","system","汽车","1dvxugmhxlxnsnfdezuxw0g","视觉","不断丰富","热点","这是","提出","bubble","成为","。","局部","操作系统","就是","动力","也","时代","伺服电机","—","计算","ai","四足","https","没有","重要","拉开序幕","/","俗称","感器","爆发","操作","博客","发展","载体","智能","课程","随着","应用","ros2","依然","年前","环境","2015","完全","八十年","类型","八十","index","家庭","源码","更加","七八十年","要求","图文","出现","狗","拉开","最佳","按照","操控","呈","泡泡","电机","链接","了","帮助","仿生","智能化","年","执行","是",":","快速","参考","2000","：","命令","前夜","传感器","s","对","驱动","robot","传感","多","服务","送餐","gitee","更","教器","baidu","技术","主要","自动","十年","必将","思考","驾驶","三个","序幕","劳动"," ","教程","不过","pan","但是","大","井喷","主角","github","于","自主","高","关注","电气","七八","问答","工业生产","有限","算机","，","缺少","控制","不断","book","21","释放","最为","系统","生产","逐渐","设备","经历","等","伺服","太","tutorials","机器","和","并","七八十","、","视频","之一","提取","资料","过程","码","www","计算机"],"title":"引言","title_tokens":["引言"]},{"location":"#_1","text":"课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 博客泡泡： https://www.guyuehome.com/ 教程问答： https://www.guyuehome.com/bubble/index 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 参考资料： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["com","1dvxugmhxlxnsnfdezuxw0g","参考资料","bubble",".","guyuehome",":","参考","：","问答","exc6","s","book","21","https","gitee","/","博客","课程","ros2","baidu","tutorials","index","源码","_","视频","图文","class","提取"," ","教程","资料","码","www","pan","泡泡","github","链接"],"title":"教程链接","title_tokens":["教程","链接"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["集","com","捆绑","培养",".","guyuehome","开发","赋能","作品","所有","未来","构建","单位","个人","包括","上述","面向","但","如需","授权","均","追究","进行","声明者","（","的","用户","1000","或","学习者","优质","机器人","通过","合法","小时","学","创新","武汉","华语","超过","。","公司","使用","高校","ai","科技","人才","不得","知名","追究其","课程","法律","居","建立","万人","有权","及","限于","源码","出版","古月","被","努力","致力于","模式","社区","创建","企业","致力","修改","仅限","与","为","实践","）","将","交流","一体","》","年","依法","不","地区","是","高质量","至今","复制","法律责任","质量","《","内容","联系","累积","明者","传播","ros","网站","高质","上","平台","任何","版权","微控","线上","未经","合作","许可","精锋"," ","课件","声明","责任","对本","请","2011","有限公司","120","究其","有限","，","销售","人才培养","书面","镜像","众多","其它","校企","+","等","本","提供","万字","图书","机器","和","面向未来","学习","、","抄录","视频","交流学习","@","产品","违反","拥有","生态","www","brand","畅销"],"title":"关于教程","title_tokens":["关于","教程"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["集","com","培养",".","guyuehome","开发","赋能","未来","构建","面向","（","的","用户","1000","学习者","优质","机器人","通过","小时","创新","华语","超过","。","高校","ai","人才","知名","课程","居","建立","万人","及","出版","古月","努力","致力于","模式","社区","创建","企业","致力","与","为","实践","）","交流","一体","》","年","地区","是","高质量","至今","质量","《","内容","累积","ros","高质","平台","线上","合作"," ","2011","120","，","人才培养","众多","校企","+","等","提供","万字","图书","机器","面向未来","学习","、","视频","交流学习","生态","www","畅销"],"title":"学机器人，上古月居","title_tokens":["上","居","机器","机器人","古月","学","，"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["com","捆绑",".","guyuehome","作品","所有","单位","个人","包括","上述","但","如需","授权","均","追究","进行","声明者","的","用户","或","合法","武汉","公司","。","使用","科技","不得","追究其","课程","法律","居","有权","限于","源码","古月","被","修改","仅限","与","为","将","依法","不","复制","法律责任","联系","明者","传播","网站","任何","微控","版权","未经","许可","精锋"," ","课件","声明","责任","对本","请","有限公司","究其","有限","，","销售","书面","镜像","其它","等","本","和","学习","、","抄录","视频","@","产品","违反","拥有","brand"],"title":"版权声明","title_tokens":["版权","声明"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/","text":"ROS/ROS2是什么 智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。 ROS的诞生 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS的发展 ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称ROSCon，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。 ROS的特点 ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的应用案例在社区中沉淀下来； ROS本身也是完全开源的，商业许可证非常宽松； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品，缩短了产品的上市时间； ROS也可以跨平台使用，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多支持工业应用的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。 参考资料 关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["维基","同样","提问","更好","笔记","复用","那","扫地","实现","官方","论坛","一届","不要","真正","年轻人","org","台球","当时","大部","原本","说明","基本上","智慧","却步","统计","助推","能够","自己","operating","容易","完成","家","而言","我们","一下","学术","乐意","研发","通过","他们","给出","2017","自身","大笔","加快","汽车","还","一些","其中","下来","体系","成为","公司","操作系统","就是","原型","数据库","一套","提高","人才","/","感器","说干就干","率","掌握","发展","ros2","应用","一大","随着","万人","受限于","不开","人","？","很","实验","不断更新","游戏机","一堂","毛巾","工程","光靠","2007","可为","几乎","活动","其次","泡泡","普遍","苹果","80","想到","解决","暴露","wiki","工程师","新鲜","认识","来","其他","内容","版本","来看","量级","引擎","robot","多","巨大","服务","风险","简称","商业化","一款","直到","复杂","后续","主要","单独","初期","任何","都","软件系统","这些","多项","受限","为了","roscon","起","这个","别人","人形","轰动","而","越来越","此","浏览量","很快","甚至","后期","设计","熨烫","为例","问答","绝对","，","步伐","远","来自","工具","主阵地","联合","系统","最为","根据","野蛮","叫做","无论","一大步","本","提供","通信","嵌入式","入门","问题","从","百万","和","得以","成熟","把","投了","电路","视频","部分","如何","在","绝大","疫情","领域","结晶","标志","明智","团队","已有","资料","5","一个","媒体","生态","爆款","研究","肩膀","分享","实验室","代","动机","玩耍","代表","怀揣","要",".","加","开发","上边","维基百","发表","xbox","所有","生态系统","25","标准","packages","现在","适用","只要","无聊","关于","成本","此时","趋势","层面","进行","重新","一家","复合","特性","各种","选择","许可证","注意","排名","你","intel","横跨","张图","机器人","各项","棒","相关","促使","据库","全书","图","system","局限性","时候","提出","这是","打","统统","扩展","接下来","直接","查看","windows","希望","personal","同学","零","进化","重要","智能","很多","头发","居","限性","成果","详细","跑","向前走","条","discourse","被","一步","案例","活跃","努力","社区","局限","月底","轮子","全人","多万","一切","以叠","身影","还有","近两年","kinect","推动","该","速度","入门教程","百科全书","衣服","整合","部件","神秘","使命","正式版","几个","开始","活跃度","不","100","至今","有志","：","托管","效率","每","linux","这位","一系列","所有人","传感","这款","个","大会","正如","这群","下载","开发工具","上","技术","同理","c","以","广泛","大步","平台","有人","特点","机制","2012","斯坦福大学","许可","水下","有","answers","让","来讲","但是","创始","齐聚一堂","认识一下","于","下","开源","“","2","移动","美妙","上图","跨平台","之上","圈","无论是","当初","garage","一大笔","看中","绝大部分","革命","创意","一起","之内","涉及","讨论","15","ros1","、","不乏","起来","面纱","零部件","干","简单","此后","基本","频繁","大有可为","来到","重量级","过程","出来","全","整理","原因","围绕","更新","同年","因","木头","数据","福大","参考资料","会","这一波","精致","微软","到","带领","正式","肩负","挑战","越来","洗衣","肩负着","做法","笔记本","这","无疑","20","高效","大部分","本身","人类","做饭","神兵","得到","百科","世界","却","页面","叠","不下","的","总称","知识","亚马","多年","正在","而且","项目","迭代","对于","居高不下","pr2","存储","肯定","版","回答","针对","索引","第一","等等","望而却步","两年","ubuntu","250","时至今日","不多","沉淀","。","四大","专业","青年","一大笔钱","动力","类似","大大","也","开发者","物体","前","移动机器人","左右","事情","没有","巨人","万","操作","框架","总而言之","如果","四项","近几年","还是","浪潮","一群","长远","从中","2015","这样","变为","完全","资金","新","度","历经","turtlebot","限于","强悍","采购","源码","古月","支持","做出","关键","陪","一系","不到","笔记本电脑","推进","时间轴","最佳","功能","智能化","掀起","已经","用于","差不多","一样","非常","参考","几年","模块化","又","具备","做到","对","人数","普及","欢迎","总体","a","找到","ros","google","踏上","更","充足","跟随","新鲜事","做","确定","名称","核心","好","介于","配合","高度"," ","教程","b","处理","全人类","全球","采用","阵地","访问","2011","讲解","就","一次","国家","款","几百万","资源","之","五年","逐渐","只","回到","所以","conference","模块","啦","等","可能","月","组成","机器","想法","分钟","学习","维基百科","年底","造","目标","各样","外观","一段","提取","之王","亚马逊","两个","150","臂","只想","大学","搜索","最高","真的","全新","可以","这里","进入","个人","作为","年轻","电脑","改为","推荐","多媒体系统","以上","几百","软件","剪头发","而生","大量","呢","今日","给","或者","用户","体感","商业","缩短","起点","浏览","访问量","长期","包","价格便宜","工业","风险投资","同时","聊天","40","迅猛","算是","更为","全球化","代码","离不开","同一","新增","每年","清晰","时间","宽松","不同","使用","曲线","用","才","日常","资本","成功","地域","应用软件","次数","时代","—","不是","举办","价格","早期","万万","课程","有没有","嘉宾","集合","基于","index","进步","没想","中","稳定","每个","发布","站","答案","为","迎来","嵌入","2010","独立","将","了","帮助","年","由","其实","方式","程度","是","推出","性能","虽好","快速","做成","万左右","上市","”","传感器","尽量","然后","大家","元素","网站","斯坦福","增长速度","首先","收拾","第一次","利器","什么","记录","接下","熟悉","线上","之旅","重量","2022","了解","加上","多媒体","场景","第一个","world","大","上去","github","底盘","向","效果","手机","低","为什么","诞生","看到","humble","willow","120","深知","生态系","2014","不想","因为","虽然","控制","不断","增长","机械","；","经历","便宜","着","既然","系列","比如","快","最后","终于","友好","没想到","并","情况","方向","投资","所学","各种各样","柔性","向前","产品","图中","通常","游戏","繁荣","尝试","一定","制造","方法","板块","不仅"],"title":"ROS和ROS2是什么","title_tokens":["什么","和","是","ros","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#rosros2","text":"智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。","text_tokens":["神秘","智能化","掀起","提出","下来","是","开发","。","就","操作系统","认识一下","又","认识","接下来","那","带领","，","时代","挑战","这位","对","量级","这","巨大","进化","系统","大家","ros","操作","向","一起","智能","ros2","应用","而生","呢","的","嘉宾","机器","正在","什么","？","接下","方向","面纱","中","重量","高度"," ","机器人","场景","我们","一下","重量级","全","了"],"title":"ROS/ROS2是什么","title_tokens":["什么","是","ros","/","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。","text_tokens":["研究","因","木头","分享","实验室","福大","代","玩耍","真的","要","同样","精致","开发","可以","所有","那","洗衣","越来","实现","个人","标准","这","高效","无聊","只要","做饭","此时","台球","当时","层面","软件","却","剪头发","叠","而生","呢","的","或者","而且","自己","对于","容易","完成","家","pr2","你","横跨","肯定","针对","机器人","我们","聊天","第一","学术","他们","给出","图","同一","还","一些","其中","时候","打","成为","。","操作系统","就是","用","才","专业","青年","原型","应用软件","类似","也","物体","—","personal","事情","不是","没有","重要","一套","操作","说干就干","框架","如果","智能","一大","应用","一群","有没有","很多","头发","这样","从中","基于","资金","条","人","？","向前走","很","实验","强悍","做出","中","陪","一系","不到","毛巾","光靠","一切","2007","答案","以叠","推动","功能","衣服","独立","部件","了","帮助","苹果","已经","用于","年","不","100","是","非常","性能","有志","：","效率","一系列","所有人","robot","多","服务","这款","大家","找到","ros","个","更","充足","一款","斯坦福","上","技术","复杂","做","收拾","第一次","大步","什么","平台","有人","初期","都","软件系统","斯坦福大学","有"," ","这个","处理","但是","别人","轰动","越来越","手机","低","为什么","诞生","很快","2","看到","甚至","后期","就","深知","设计","熨烫","为例","一次","款","圈","不想","，","因为","虽然","机械","联合","系统","只","所以","既然","等","一大步","一起","系列","可能","之内","问题","最后","涉及","组成","机器","和","得以","并","想法","分钟","、","电路","零部件","干","如何","柔性","在","向前","外观","图中","团队","5","一个","尝试","出来","整理","大学"],"title":"ROS的诞生","title_tokens":["的","诞生","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_1","text":"ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称ROSCon，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。","text_tokens":["爆款","同年","分享","福大","会","开发","笔记","xbox","全新","可以","所有","到","微软","肩负","正式","这里","扫地","越来","肩负着","官方","个人","笔记本","现在","这","适用","进入","年轻","大部分","一届","成本","真正","年轻人","电脑","改为","大部","原本","几百","进行","软件","却步","一家","的","给","不下","亚马","多年","助推","体感","能够","商业","自己","各种","项目","起点","迭代","operating","注意","居高不下","长期","pr2","intel","价格便宜","版","风险投资","机器人","我们","第一","他们","望而却步","2017","大笔","两年","ubuntu","加快","system","局限性","每年","其中","这是","提出","时间","成为","公司","。","使用","操作系统","资本","原型","一大笔钱","成功","类似","直接","也","开发者","大大","—","前","时代","举办","重要","价格","早期","感器","操作","发展","万万","一大","随着","应用","ros2","2015","限性","变为","受限于","人","历经","turtlebot","限于","被","游戏机","支持","关键","没想","中","稳定","一堂","每个","笔记本电脑","局限","月底","发布","2007","身影","时间轴","近两年","kinect","推动","为","迎来","功能","该","2010","了","使命","想到","已经","正式版","开始","年","一样","是","推出","虽好","快速","暴露","几年","每","传感器","版本","普及","robot","传感","多","风险","服务","简称","ros","更","大会","一款","斯坦福","这群","跟随","直到","确定","做","原因","单独","名称","熟悉","介于","2012","线上","斯坦福大学","受限","为了","了解","2022","让"," ","加上","教程","roscon","第一个","起","这个","world","但是","大","创始","齐聚一堂","底盘","下","于","越来越","而","全球","采用","诞生","很快","开源","humble","2011","讲解","willow","就","后期","设计","之上","款","几百万","圈","，","因为","2014","步伐","来自","控制","五年","当初","增长","garage","一大笔","看中","系统","绝大部分","野蛮","逐渐","回到","叫做","便宜","所以","conference","经历","着","等","本","问题","终于","从","百万","机器","没想到","和","成熟","把","、","投了","不乏","投资","年底","部分","各种各样","在","绝大","疫情","各样","此后","提取","标志","游戏","团队","亚马逊","5","一个","过程","出来","只想","大学","不仅"],"title":"ROS的发展","title_tokens":["的","发展","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_2","text":"ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的应用案例在社区中沉淀下来； ROS本身也是完全开源的，商业许可证非常宽松； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品，缩短了产品的上市时间； ROS也可以跨平台使用，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多支持工业应用的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["肩膀","分享","代表","动机","会","怀揣","开发","可以","生态系统","复用","到","做法","那","这里","越来","实现","标准","这","本身","不要","人类","多媒体系统","智慧","软件","重新","今日","一家","的","复合","给","总称","特性","自己","商业","各种","缩短","许可证","家","工业","同时","机器人","我们","全球化","促使","他们","自身","新增","汽车","还","时至今日","统统","体系","下来","时间","成为","宽松","公司","。","沉淀","四大","使用","就是","直接","移动机器人","也","windows","零","不是","巨人","提高","人才","率","发展","智能","还是","ros2","应用","很多","长远","成果","这样","完全","集合","跑","向前走","新","采购","被","一步","进步","案例","支持","中","社区","轮子","全人","推进","身影","站","功能","嵌入","普遍","整合","将","了","已经","智能化","用于","由","做成","是","快速","非常","至今","：","上市","模块化","具备","”","来","做到","linux","尽量","对","引擎","多","a","大家","ros","更","商业化","正如","开发工具","上","技术","同理","做","c","以","广泛","平台","核心","特点","机制","都","这些","多项","许可","水下","有"," ","多媒体","来讲","b","这个","上去","别人","人形","越来越","此","全人类","全球","“","开源","看到","移动","就","设计","跨平台","生态系","无论是","，","之","工具","远","机械","系统","；","着","无论","模块","创意","一起","通信","比如","嵌入式","组成","最后","友好","从","机器","和","ros1","并","把","、","造","部分","各种各样","目标","简单","在","领域","向前","结晶","各样","产品","通常","明智","已有","繁荣","媒体","一个","生态","臂","制造","围绕"],"title":"ROS的特点","title_tokens":["的","特点","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_3","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。","text_tokens":["数据","代表","维基","会",".","最高","加","这一波","上边","开发","维基百","发表","可以","到","这里","25","越来","packages","这","作为","论坛","无疑","现在","关于","20","大部分","神兵","org","说明","趋势","大部","以上","得到","百科","基本上","页面","呢","的","给","统计","正在","助推","用户","各种","选择","浏览","访问量","排名","包","你","存储","张图","回答","而言","我们","索引","乐意","相关","算是","各项","棒","等等","据库","更为","40","研发","通过","250","其中","这是","提出","清晰","不多","不同","成为","。","使用","曲线","就是","日常","地域","数据库","动力","查看","次数","左右","开发者","也","希望","万","重要","总而言之","如果","发展","四项","近几年","浪潮","应用","很多","万人","discourse","？","新","很","index","度","源码","人","活跃","中","社区","每个","多万","发布","最佳","可为","速度","功能","活动","整合","了","80","几个","已经","其实","活跃度","差不多","方式","不","程度","是","快速","非常","参考","wiki","：","万左右","几年","新鲜","每","其他","来看","人数","多","总体","元素","大家","ros","网站","机器人","下载","增长速度","上","新鲜事","利器","什么","记录","核心","任何","都","这些","迅猛","有","answers"," ","教程","大","浏览量","越来越","全球","看到","访问","就","上图","问答","国家","绝对","资源","，","增长","最为","绝大部分","根据","；","革命","等","本","比如","快","月","问题","讨论","从","15","机器","和","学习","、","维基百科","情况","起来","部分","在","绝大","基本","频繁","大有可为","两个","一个","150"],"title":"ROS的社区","title_tokens":["的","社区","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#_1","text":"关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["更新","分享","参考资料","会","要","提问","开发","更好","可以","所有","这里","作为","这","大部分","关于","推荐","大部","百科","世界","大量","的","知识","项目","你","我们","机器人","离不开","代码","全书","还","成为","。","使用","扩展","也","—","同学","重要","掌握","课程","ros2","居","详细","万人","不开","不断更新","古月","努力","中","社区","工程","还有","几乎","入门教程","其次","泡泡","百科全书","将","几个","开始","解决","是","参考","工程师","托管","内容","欢迎","然后","大家","google","ros","找到","踏上","网站","首先","技术","后续","主要","好","都","之旅","配合","有"," ","教程","这个","github","效果","开源","阵地","120","美妙","，","工具","主阵地","不断","最为","绝大部分","啦","本","一起","提供","入门","问题","最后","从","机器","和","学习","视频","所学","部分","在","绝大","一段","来到","之王","资料","一个","一定","方法","板块","搜索"],"title":"参考资料","title_tokens":["参考","资料","参考资料"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/","text":"ROS2对比ROS1 在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。 ROS1的局限性 首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。 全新的ROS2 ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。 ROS2 vs ROS1 系统架构 在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。 DDS通信 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。 核心概念 ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。 编码方式 再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。 命令行 最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随课程，你就会慢慢理解这些特性。","text_tokens":["丰富","看看","印象","同样","更好","开发方式","复用","那","产品化","实现","最早","看","升级","可移植性","但","发成","面向","真正","不要","房子","伙伴","说明","大部","原本","fastrtps","集成","dds","（","主","可靠","致使","简单明了","难度","能够","自己","后","涌现","方案","应用层","是否","完成","而言","我们","有线","学术","黑客","研发","一下","通过","他们","改","一致","学","指定","用到","汽车","还","学术研究","一些","其中","重来","编译","产品开发","开发成本","担心","公司","总体而言","操作系统","就是","没","管理","一套","提高","/","消费","率","发展","ros2","随着","应用","1ms","客户端","接入","？","更换","实时性","各位","出现","么","自家","工程","道坎","含义","名字","按照","几乎","迁移","）","内部","链接","也许","再","解决","翻地","完整性","不再","常用","来","其他","复杂度","来看","某","版本","一本","多","服务","风险","巨大","课时","5g","简称","不好","相比","协作","选项","一款","雷达","盖","去","复杂","后续","主要","自动","暂且","任何","不太","discovery","专注","都","这些","软件系统","为了","这个","不过","tcp","而","越来越","wifi","而已","高","真实","方便","一种","甚至","不够","设计","编译器","master","交道","，","工具","保障","经验","带来","系统","最为","大幅","翻新","对比","发送","新版","rosrun","叫做","无论","完","本","共享内存","提供","原有","通信","嵌入式","当然","问题","完善","可读","从","百万","毛坯房","网络连接","和","提","差异","新一代","把","部分","如何","理器","在","绝大","即可","以下几点","层","存在","一个","到底","不用","先进","有且","研究","成","怀揣","要","开发","通信协议","整体","所有","自","诟病","标准","适用","是因为","只要","成本","多个","中间层","从而","层面","加密","进行","现有","定性","命令行","重新","一家","尽力","过","特性","之外","换成","ceo","各种","强壮","选择","应该","注意","你","分布","张图","听说","第二代","机器人","相关","接近","run","局限性","发布者","面对","udp","时候","收","不能","优化","opensplice","直接","共享","windows","计算","明显","重要","左侧","实时","智能","电脑系统","很多","格局","限性","宕机","需求","下边","经常","编码","内","更加","配置","一步","运动","批量生产","rosbuild","体验","社区","企业","不会","局限","还有","解密","该","打交道","还会","联网","使命","c++","开始","不","：","二代","连接","每","linux","中间","确实","足够","一团乱麻","出错","基础","更接","编码方式","乱麻","不难理解","上","批量","通用性","广泛","编译系统","一一","平台","定义","发","机制","rostopic","三个","单兵作战","远比","有","售价","让","不断涌现","来讲","小伙伴","但是","能力","可读性","下","于","vs","举","上升","信息","封装","开源","当","运行","跨平台","之上","装修","对象","慢慢","工作","便于","怎样","绝大部分","生产","细节","迈过","国际标准","amr","幅度","似乎","一页","担忧","厂家","良好","ros1","由于","不爽","、","走向市场","他","分解","简单","软件开发","基本","诸多","频繁","对系统","api","可移植","以下","航天","标准化","过程","全","数据","力学","会","减少","阶段","可选项","一旦","到","未来","带领","挑战","越来","这","干扰","流程","大部分","至关","运动学","揭秘","算力","上手","变革","深入","的","最","编写","历史","程序","why","行人","项目","里","听","对于","之后","布式","pr2","肯定","或","属性","工作站","针对","过去","第一","只有","除此之外","意义","勿躁","走向","架构","适合","指挥","调试","。","可选","导致","搬","动力","具体","类似","解算","也","满足","开发者","打成","交付","一团乱","总结","没有","全部","框架","操作","符合","如果","颠覆性","建筑","长远","这样","环境","之前","建立","家庭","动力学","100ms","支持","管理器","要求","第二种","一行","topic","消失","最佳","与","功能","之间","移植","强","最大","大幅度","已经","用于","一样","非常","具备","市场","命令","做到","对","驱动","普及","系统工程","总体","找到","ros","搭载","突然","更具","更","调用","充足","唯一","轻松","编程语言","面向对象","跟随","做","middleware","名称","核心","交给","好","体现","驾驶","厂商","作战","python3","库会","启动","比","会成"," ","分散","走","教程","处理","接口","主角","先","客户","全球","高昂","请","讲解","如","就","微控制器","总之","条件","广泛应用","款","角度","有限","几百万","资源","以及","受制于","小","编程","所以","啦","成功经验","等","只不过","二种","可能","节点","推倒重来","放在","基本保障","机器","语言","考虑","python","入侵","个体","借助","学习","安全","目标","推倒","能","各样","只是","另","精力","两个","周期","彼此","rmw","延迟","最终","全新","可以","另外","这里","地方","无法","接收","catkin","过来","电脑","大部头","完整","只能","以上","部署","信号","面临","可靠性","时","软件","几百","分布式","干掉","需要","呢","大量","它","给","或者","mcu","毛坯","内存","用户","加入","丢","安装","商业","天翻地覆","通信接口","保留","变化","继续","间层","理解","二个","第二个","同时","第二","省略","代码","切记","借鉴","控制器","前方","小伙","至关重要","切换","历史使命","时间","不同","尤其","使用","用","一代","稳定性","成功","时代","—","写","底层","得","保证","不是","除了","项目管理","课程","物","colcon","依然","ament","基于","类型","策略","最新","级别","中","灵活","稳定","接触","之初","修改","两者","图像","每个","较","发布","答案","为","嵌入","macos","独立","将","了","消费市场","大致","陌生","其实","方式","陆续","是","做成","性能","测试","依赖","除此","尽量","右侧","初次","一团","然后","纠结","大家","不难","安全性","首先","表示","性","例子","什么","受制","熟悉","哪些","了解","场景","第一个","所示","几点","大","图片","是从","通用","手机","协议","为什么","诞生","实力","常","国际","角色","生活","因为","概念","虽然","控制","千差万别","不断","颠覆","一边","稍安","行为","话题","；","相对","设备","rtos","比如","最后","单兵","适配","结合","并","网络","各种各样","这台","移植性","发现","多功能","进程","产品","下要","部头","android","运算","一定","方法","想要","变得","不仅","很大"],"title":"ROS2对比ROS1","title_tokens":["对比","ros1","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2ros1","text":"在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。","text_tokens":["其中","也许","看看","不","就","。","使用","就是","二代","，","来看","这","多","ros","对比","ros2","上","做","从","之前","的","过","ros1","和","名称","？","学习","在","变化","你","么","能","有","或"," ","听说","第二","第二代","我们","一个","到底","大"],"title":"ROS2对比ROS1","title_tokens":["对比","ros1","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros1","text":"首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。","text_tokens":["研究","数据","会","要","开发","最终","可以","那","地方","最早","这","干扰","是因为","大部分","成本","大部","只能","原本","可靠性","软件","算力","呢","的","它","或者","可靠","致使","丢","自己","历史","各种","why","天翻地覆","涌现","完成","pr2","工作站","我们","机器人","第一","有线","黑客","学术","针对","走向","汽车","学术研究","一些","适合","时间","。","就是","用","一代","具体","类似","也","—","计算","保证","没有","框架","实时","发展","课程","ros2","随着","应用","这样","类型","？","家庭","级别","更加","支持","批量生产","出现","中","答案","嵌入","内部","独立","了","已经","用于","不","是","翻地","做成","：","具备","市场","连接","来看","足够","普及","服务","风险","找到","ros","搭载","充足","一款","首先","上","复杂","批量","自动","什么","平台","驾驶","都","作战","单兵作战","为了","有","售价","让"," ","不断涌现","第一个","处理","但是","主角","能力","为什么","诞生","高昂","实力","甚至","不够","就","设计","运行","条件","款","有限","，","因为","资源","虽然","工作","不断","小","系统","绝大部分","生产","；","设备","似乎","通信","比如","当然","问题","担忧","嵌入式","单兵","从","机器","良好","网络连接","ros1","和","由于","入侵","并","新一代","网络","走向市场","他","部分","这台","目标","在","绝大","产品","一个","航天","运算","不用","先进"],"title":"ROS1的局限性","title_tokens":["局限性","限性","的","局限","ros1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2","text":"ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。","text_tokens":["那","产品化","实现","升级","但","真正","房子","说明","原本","dds","（","可靠","能够","自己","后","方案","完成","我们","一下","黑客","研发","他们","汽车","还","重来","编译","操作系统","就是","管理","消费","ros2","应用","1ms","？","实时性","出现","工程","）","链接","完整性","不再","来看","多","风险","巨大","课时","不好","相比","协作","一款","盖","去","复杂","后续","自动","任何","都","这些","为了","这个","越来越","wifi","方便","一种","甚至","设计","编译器","master","，","工具","保障","经验","系统","翻新","发送","新版","叫做","无论","提供","原有","通信","问题","毛坯房","网络连接","和","提","差异","把","理器","如何","在","以下几点","一个","不用","怀揣","要","开发","所有","标准","层面","加密","进行","定性","重新","尽力","特性","各种","强壮","选择","分布","机器人","面对","时候","不能","优化","直接","windows","明显","实时","智能","电脑系统","很多","格局","宕机","需求","经常","内","更加","运动","rosbuild","体验","不会","解密","还会","使命","c++","不","：","连接","linux","出错","基础","上","通用性","编译系统","平台","机制","远比","有","让","但是","下","于","运行","跨平台","之上","装修","工作","怎样","细节","amr","ros1","、","分解","简单","基本","诸多","对系统","api","以下","标准化","全","力学","数据","会","阶段","一旦","到","未来","挑战","越来","这","流程","运动学","算力","变革","的","编写","历史","项目","行人","布式","肯定","针对","过去","第一","走向","架构","适合","调试","。","导致","动力","解算","类似","具体","也","满足","开发者","打成","没有","全部","操作","框架","颠覆性","建筑","长远","这样","环境","动力学","100ms","管理器","要求","第二种","最佳","与","之间","移植","强","已经","用于","具备","市场","做到","对","系统工程","ros","搭载","更具","更","好","体现","驾驶","python3","比"," ","接口","就","微控制器","以及","受制于","所以","成功经验","等","二种","可能","节点","推倒重来","基本保障","机器","语言","考虑","python","个体","入侵","借助","安全","推倒","各样","能","只是","两个","周期","最终","全新","可以","无法","catkin","电脑","完整","部署","信号","面临","软件","分布式","需要","大量","呢","它","给","或者","mcu","毛坯","保留","变化","继续","同时","第二","代码","借鉴","控制器","前方","历史使命","不同","尤其","使用","用","稳定性","成功","时代","得","不是","除了","项目管理","课程","colcon","ament","策略","最新","中","稳定","之初","修改","较","为","macos","独立","了","消费市场","是","性能","测试","尽量","纠结","大家","安全性","性","受制","场景","第一个","几点","大","通用","手机","角色","生活","千差万别","控制","颠覆","虽然","行为","相对","rtos","比如","结合","并","网络","各种各样","发现","产品","下要","android","一定","方法","不仅","很大"],"title":"全新的ROS2","title_tokens":["的","全新","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2-vs-ros1","text":"","text_tokens":[],"title":"ROS2 vs ROS1","title_tokens":["vs","ros1"," ","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_1","text":"在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。","text_tokens":["成","数据","会","印象","开发","通信协议","整体","另外","可以","所有","可选项","那","自","看","标准","这","接收","至关","但","中间层","从而","进行","dds","需要","大量","深入","的","它","简单明了","最","内存","过","安装","ceo","程序","应该","里","听","注意","应用层","通信接口","理解","变化","间层","张图","肯定","我们","只有","通过","至关重要","架构","udp","时候","指挥","公司","。","可选","操作系统","就是","共享","类似","管理","也","windows","—","明显","写","底层","得","一团乱","一套","重要","左侧","操作","框架","如果","ros2","应用","很多","这样","建立","下边","客户端","基于","内","更换","更加","管理器","中","稳定","接触","图像","两者","发布","消失","名字","打交道","macos","将","了","大致","开始","再","一样","方式","不","是","连接","依赖","中间","linux","一团乱麻","驱动","右侧","一团","大家","突然","找到","ros","调用","不难","选项","乱麻","不难理解","雷达","上","复杂","后续","主要","不太","discovery","好","机制","哪些","都","这些","库会","了解","有","让","会成"," ","走","这个","不过","接口","是从","先","tcp","而","客户","信息","封装","协议","而已","请","角色","就","master","交道","，","系统","对比","只不过","rtos","共享内存","提供","节点","通信","比如","完善","ros1","和","并","学习","把","、","理器","在","发现","简单","进程","频繁","一个","彼此","方法","变得","层","有且"],"title":"系统架构","title_tokens":["系统","架构"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#dds","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。","text_tokens":["数据","丰富","会","要","减少","开发","通信协议","延迟","可以","复用","诟病","这里","实现","标准","无法","适用","这","过来","只要","发成","成本","多个","fastrtps","层面","加密","部署","时","软件","dds","重新","一家","的","给","之外","最","用户","加入","能够","丢","安装","商业","程序","应该","选择","各种","对于","是否","变化","肯定","属性","听说","我们","机器人","省略","代码","改","指定","切换","一些","udp","产品开发","收","开发成本","不同","。","就是","用","优化","opensplice","类似","也","满足","写","底层","交付","得","不是","提高","/","除了","率","符合","如果","物","ros2","应用","这样","需求","基于","接入","？","更换","更加","配置","中","灵活","么","社区","自家","一行","稳定","每个","还有","该","按照","功能","为","联网","了","移植","最大","其实","解决","一样","再","不","是","性能","每","其他","复杂度","某","版本","多","然后","5g","纠结","简称","ros","唯一","轻松","更","相比","复杂","做","middleware","例子","广泛","定义","发","交给","好","专注","熟悉","厂商","软件系统","都","这些","三个","为了","让"," ","来讲","场景","不过","这个","接口","先","tcp","于","举","协议","开源","高","常","一种","国际","就","设计","总之","master","广泛应用","，","带来","系统","国际标准","所以","完","等","提供","通信","比如","当然","问题","放在","厂家","机器","适配","ros1","并","不爽","把","、","部分","如何","目标","在","另","简单","基本","产品","频繁","精力","一个","rmw","不用","想要"],"title":"DDS通信","title_tokens":["dds","通信"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_2","text":"ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。","text_tokens":["全球","已经","其中","陌生","会","担心","方式","不","讲解","开发","非常","。","开发方式","就","使用","方法","到","几百万","，","开发者","以及","概念","尽量","便于","这里","也","大家","没有","ros","伙伴","如果","几百","本","课程","ros2","应用","很多","依然","的","百万","广泛","从","一一","过","ros1","和","并","学习","熟悉","应该","各位","这些","部分","保留","在","中","二个","有","第二个","不用"," ","第二","存在","我们","含义","小伙","小伙伴","意义","几乎","一致","迁移","了"],"title":"核心概念","title_tokens":["核心","概念"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_3","text":"再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。","text_tokens":["会","看看","同样","开发","更好","带领","实现","这","可移植性","面向","不要","大部头","大部","软件","的","特性","难度","程序","项目","之后","而言","我们","机器人","接近","切记","学","用到","勿躁","发布者","一些","。","总体而言","用","搬","具体","也","写","提高","操作","课程","ros2","编码","一步","中","企业","道坎","发布","移植","再","方式","是","具备","来","确实","版本","一本","多","更接","总体","大家","更","编程语言","面向对象","后续","暂且"," ","来讲","教程","所示","不过","图片","可读性","真实","当","如","就","角度","，","对象","一边","稍安","编程","迈过","可读","一页","从","语言","机器","ros1","和","学习","移植性","如何","发现","在","软件开发","部头","两个","一个","可移植","过程","方法"],"title":"编码方式","title_tokens":["编码","方式","编码方式"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_4","text":"最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随课程，你就会慢慢理解这些特性。","text_tokens":["会","印象","开发","所有","揭秘","集成","现有","以上","命令行","dds","上手","干掉","的","主","之外","难度","特性","换成","选择","理解","变化","你","而言","我们","相关","除此之外","run","。","就是","没","也","—","总结","如果","课程","ros2","中","topic","功能","独立","了","大幅度","大致","再","陆续","是","：","命令","常用","每","某","除此","对","初次","大家","ros","更","表示","跟随","做","后续","核心","好","rostopic","都","这些","有","启动"," ","分散","教程","下","上升","一种","就","master","，","工具","概念","慢慢","控制","最为","话题","大幅","对比","相对","rosrun","编程","啦","幅度","节点","比如","通信","最后","ros1","和","把","在","多功能","即可","一个"],"title":"命令行","title_tokens":["命令","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/","text":"ROS2安装方法 本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。 Linux系统简介 时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。 Ubuntu系统简介 我们后续课程使用到的Linux发行版就是ubuntu系统。 Ubuntu诞生于2004年10月份，每六个月发布一个新版本，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。 Ubuntu虚拟机安装 虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下： 1. 下载系统镜像 下载链接： https://ubuntu.com/download/desktop 2. 在虚拟机中创建系统 3. 设置虚拟机硬盘大小 4. 设置Ubuntu镜像路径 5. 启动虚拟机 6. 设置用户名和密码 7. 等待系统安装 8. 完成安装 Ubuntu系统安装好后，大家可以先随意使用熟悉一下。 ROS2系统安装 接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下： 1. 设置编码 $ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8 2. 添加源 $ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844 3. 安装ROS2 $ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop 4. 设置环境变量 $ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。 ROS2示例测试 为了验证ROS2安装成功，我们可以通过以下示例进行测试。 示例一：命令行示例 先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。 示例二：小海龟仿真示例 再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。 附：虚拟机镜像 为了方便大家入门学习，我们也提供了预装好ROS2软件和教程代码的虚拟机镜像，有需要的小伙伴可以通过以下链接下载： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["节","六个月","发挥","com","硬盘","数字","何人","echo","传输","构建","实现","升级","但","伙伴","org","比较","原本","keyring","说明","发行","dds","并且","all","自己","后","是否","完成","发行版","一般","我们","一下","通过","workstation","-","还","一些","其中","下来","成为","公司","探索","操作系统","就是","ubuntu20.04","demo","管理","爱好","伴随","lts","http","一套","/","小海","说干就干","发展","维护","$","ros2","应用","apt","终端","外衣","？","[","很","print","\"","etc","出现","37844","创建","]","动手","名字","实践","链接","再","key","常用","来","其他","版本","keyrings","编辑器","字符","多","服务","list","简介","提到","决定","命名","唯一标准","arch","后续","影响","hello","主要","打包","任何","不太","都","编辑","为了","变量","源","出","这个","pan","操作界面","setup","多任务","越来越","虚拟机","原理","一种","方便","甚至","设计","为例","master","绝对","先要","，",")","紧随","系统","一直","最为","可视化","订阅","叫做","无论","teleop","尚","本","务器","原有","通信","入门","提供","问题","一应","从","signed","和","pro","成熟","把","发扬光大","字符串","占据","如何","在","领域","已有","资料","开放","5","一个","码","示例","html","计算机","试一试","人工智能","成","分享","代表","相同","随意",".","bug","开发","密码","exc6","想要","标准","packages","现在","适用","products","lc","中将","关于","多个","指标","此时","lang","进行","后缀","命令行","opt","重新","之外","多用户","各种","应该","其","选择","by","你","vmware","源代码","机器人","提交","run","芬兰","en","1dvxugmhxlxnsnfdezuxw0g","发布者","界面","时候","吸引","10","虚拟","直接","接下来","自行","windows","计算","技术实力","六个","多用","1991","一石激起千层浪","其他软件","重要","绑定","位置","智能","talker","报错","很多","install","编码","衡量","介绍","raw","运动","模式","准确","热爱","企业","收费","该","~","联网","redhat","开始","不",":","大学生","当中","持续","：","locale","每","linux","传播","最好","ubuntu22.04","个","附","sources","--","下载","一","上","紧随其后","技术","locales","null","仿真","baidu","以","turtle","desktop","rosdistro","真理","有","让","us","来讲","小伙伴","但是","7","这套","下","于","环境变","开源","“","2","关注","运行","os","之上","算机","无论是","工作","任何人","cpp","share","一起","吧","摩拳擦掌","准备","之内","基本相同","建议","(","第一句","精神","2004","放到","download","、","起来","其后","他","并用","软件开发","基本","真器","如遇","蓝色","过程","以下","服务器","更新","数据","会","二句","gen","到","未来","o","奥义","越来","者","这","目前","node","bash","出于","22","4","互联","connect","试试","的","免费","6","dev","最","按键","程序","之后","各个","版","发扬","或","第一","除此之外","等等","两年","ubuntu","擦掌","上下左右","适合","修复","本相","。","预装","俱全","也","开发者","左右","上层","光大","没有","操作","强大","d","如果","还是","爱好者","这样","环境","之前","设置","会加","新","反馈","upgrade","支持","gnupg","usr","=","py","与","互联网","功能","centos","蕴藏","turtlesim","兼容","移植","最大","已经","叫","一样","一应俱全","千层浪","参考","命令","04","s","对","dpkg","archive","操作方法","月份","ros","唯一","林纳斯","更","普通","release","export","一位","做","核心","好","合适","等待","千层","户名","启动"," ","教程","ssl","好者","gpg","一句","先","键盘","采用","update","请","讲解","就","个人爱好","fedora","一次","有限","lsb","正常","行列","回到","只","所以","啦","等","可能","节点","listener","月","分别","机器","考虑","学习","点击","各样","之一","提取","指令","任务","两个","海龟","8","curl","学生","大学","18","内核","evaluation","guyuehome","可视","另外","可以","验证","这里","激起","个人","二","电脑","人工","添加","量","failed","时","软件","变动","大量","需要","呢","给","通讯","或者","用户","加入","如下","安装","商业","背景","_","浏览","长期","二个","第二个","同时","第二","迅猛","代码","路径","步骤","小伙","每年","1","至此","时间","不同","使用","3","成功","应用软件","—","&&","底层","https","保证","bashrc","除了","课程","依然","前先要",">","地址","中","稳定","接触","codename","硬件","发布","看出","热情","nodes","macos","unix","将","了","华丽","deb","年","utf","是","文件","快速","性能","测试","”","依赖","除此","可","大家","表示","第一次","什么","接下","熟悉","了解","2022","加上","to","场景","第一个","architecture","world","大","用户名","通用","效果","仿真器","诞生","激发","看到","实力","humble","浏览器","sudo","检验","经典","动手做","source","githubusercontent","因为","顺序","概念","虽然","控制","大小","多人","第二句","镜像","应用程序","优先","上下","main","环境变量","乐于","比如","快","每隔","好后","tee","并","小海龟","网络","情况","各种各样","|","一定","www","方法","编号","不仅"],"title":"ROS2安装方法","title_tokens":["方法","安装","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2","text":"本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。","text_tokens":["节","一种","。","操作系统","linux","先要","，","—","底层","系统","重要","操作","本","一起","ros2","的","前先要","最","安装","了解","我们","一下"],"title":"ROS2安装方法","title_tokens":["方法","安装","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#linux","text":"时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。","text_tokens":["成","分享","相同","会","内核","bug","何人","开发","可视","另外","可以","到","越来","实现","激起","标准","个人","这","现在","适用","目前","但","指标","出于","此时","原本","量","发行","互联","软件","重新","大量","需要","的","呢","免费","给","或者","多用户","用户","最","加入","并且","安装","自己","后","程序","应该","各种","其","商业","之后","发行版","发扬","或","一般","源代码","我们","迅猛","通过","代码","等等","提交","ubuntu","芬兰","还","每年","一些","其中","界面","吸引","适合","时间","不同","修复","成为","。","公司","使用","操作系统","就是","本相","应用软件","管理","也","爱好","伴随","windows","计算","开发者","技术实力","多用","光大","—","底层","1991","一石激起千层浪","一套","重要","没有","绑定","操作","说干就干","强大","发展","维护","爱好者","ros2","应用","很多","之前","外衣","？","衡量","反馈","支持","出现","中","模式","稳定","热爱","准确","企业","硬件","动手","收费","名字","与","实践","互联网","热情","功能","macos","联网","unix","兼容","了","centos","华丽","已经","redhat","年","叫","一样","不","大学生","是","快速","参考","千层浪","当中","性能","常用","每","linux","依赖","其他","版本","对","多","服务","操作方法","传播","提到","唯一","林纳斯","更","最好","决定","命名","一位","上","唯一标准","技术","做","主要","什么","打包","核心","任何","不太","熟悉","真理","千层","都","有"," ","加上","教程","来讲","场景","这个","好者","大","操作界面","先","这套","多任务","通用","越来越","下","原理","开源","激发","看到","实力","讲解","甚至","就","设计","个人爱好","检验","fedora","之上","动手做","有限","算机","，","概念","虽然","多人","镜像","系统","应用程序","可视化","行列","回到","叫做","任何人","所以","尚","等","本","一起","务器","原有","乐于","比如","问题","基本相同","和","精神","并","成熟","放到","把","、","发扬光大","起来","情况","他","各种各样","并用","在","各样","之一","基本","已有","任务","开放","一个","过程","服务器","方法","计算机","学生","大学","不仅"],"title":"Linux系统简介","title_tokens":["简介","系统","linux"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu","text":"我们后续课程使用到的Linux发行版就是ubuntu系统。 Ubuntu诞生于2004年10月份，每六个月发布一个新版本，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。","text_tokens":["六个月","人工智能","更新","发挥","代表","硬盘","18","会","数字","开发","可以","到","未来","这里","想要","升级","电脑","人工","22","比较","4","进行","时","后缀","发行","软件","互联","变动","通讯","的","免费","之外","用户","安装","自己","各种","选择","浏览","之后","各个","长期","发行版","你","版","或","我们","机器人","一下","除此之外","第一","通过","两年","ubuntu","擦掌","还","其中","时候","不同","。","使用","10","就是","俱全","虚拟","ubuntu20.04","直接","自行","也","开发者","windows","六个","上层","lts","保证","重要","试一试","除了","位置","如果","课程","还是","智能","维护","应用","很多","依然","这样","环境","之前","会加","新","很","介绍","支持","出现","中","稳定","接触","硬件","发布","看出","互联网","联网","了","移植","最大","已经","年","再","是","文件","一应俱全","持续","性能","参考","常用","每","linux","04","其他","版本","除此","编辑器","多","大家","月份","个","ubuntu22.04","更","普通","表示","紧随其后","上","后续","以","影响","第一次","主要","好","合适","熟悉","编辑","都","为了","有","2022","让"," ","出","教程","但是","于","效果","虚拟机","诞生","关注","讲解","浏览器","就","一次","为例","绝对","无论是","，","因为","顺序","紧随","系统","一直","优先","只","无论","所以","等","本","可能","摩拳擦掌","比如","快","每隔","之内","月","一应","建议","从","机器","考虑","2004","、","网络","其后","占据","如何","在","软件开发","领域","已有","资料","5","一个","一定","方法","编号"],"title":"Ubuntu系统简介","title_tokens":["简介","系统","ubuntu"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu_1","text":"虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下：","text_tokens":["-","com","虚拟机","采用","相同","开始","请",".","evaluation",":","是","运行","。","就","：","另外","可以","之上","虚拟","构建","其他","，","这里","自行","工作","products","其他软件","系统","https","大家","多个","/","叫做","操作","啦","下载","软件","准备","环境","的","和","pro","并","如下","安装","后","地址","完成","在","让","vmware"," ","已有","同时","我们","一个","www","html","workstation","步骤"],"title":"Ubuntu虚拟机安装","title_tokens":["虚拟","虚拟机","安装","ubuntu"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1","text":"下载链接： https://ubuntu.com/download/desktop","text_tokens":["com","."," ","https",":","/","download","：","desktop","ubuntu","下载","链接"],"title":"1. 下载系统镜像","title_tokens":["1",".","镜像","系统"," ","下载"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2","text":"","text_tokens":[],"title":"2. 在虚拟机中创建系统","title_tokens":["在","中","虚拟机","创建",".","2"," ","系统","虚拟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3","text":"","text_tokens":[],"title":"3. 设置虚拟机硬盘大小","title_tokens":["虚拟机","硬盘","大小","设置","."," ","3","虚拟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4-ubuntu","text":"","text_tokens":[],"title":"4. 设置Ubuntu镜像路径","title_tokens":["设置",".","镜像"," ","路径","4","ubuntu"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#5","text":"","text_tokens":[],"title":"5. 启动虚拟机","title_tokens":["虚拟机","启动","."," ","5","虚拟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#6","text":"","text_tokens":[],"title":"6. 设置用户名和密码","title_tokens":["户名","设置","."," ","6","和","用户","密码","用户名"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#7","text":"","text_tokens":[],"title":"7. 等待系统安装","title_tokens":["."," ","系统","安装","7","等待"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#8","text":"Ubuntu系统安装好后，大家可以先随意使用熟悉一下。","text_tokens":["好后","随意","系统","大家","一下","。","使用","安装","熟悉","可以","ubuntu","先","，"],"title":"8. 完成安装","title_tokens":["完成","."," ","8","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_1","text":"接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下：","text_tokens":["下来","就","。","：","可以","到","接下来","，","系统","了","ros2","如下","把","接下","安装","中","我们","ubuntu","步骤"],"title":"ROS2系统安装","title_tokens":["系统","安装","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1_1","text":"$ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8","text_tokens":["-","en","update","utf",".","sudo","gen","locale","&&","lc","lang","export","$","locales","install","apt","all","_"," ","us","=","8"],"title":"1. 设置编码","title_tokens":["1","设置","."," ","编码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2_1","text":"$ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844","text_tokens":["com",".","guyuehome","echo","o","packages","org","keyring","failed","connect","dev","_","by","ubuntu","-","&&","https","http","/","d","$","ros2","报错","install","apt",">","[","print","\"","raw","gnupg","etc","37844","]","codename","usr","=","deb",":","参考","key","”","keyrings","dpkg","可","archive","list","ros","release","sources","--","null","arch","rosdistro"," ","to","ssl","architecture","gpg","update","“","sudo","os","master","source","githubusercontent",")","，","lsb","main","share","tee","signed","(","如遇","|","curl","www"],"title":"2. 添加源","title_tokens":["源",".","2"," ","添加"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3-ros2","text":"$ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop","text_tokens":["-","install","update"," ","humble","apt","ros","sudo","desktop","upgrade","$"],"title":"3. 安装ROS2","title_tokens":["."," ","安装","3","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4","text":"$ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。","text_tokens":["已经","至此",".","humble","就","echo","。","source","，","系统","bash","ros","bashrc","/","$","ros2","opt",">","安装","好","\"","在","中"," ","setup","~","了"],"title":"4. 设置环境变量","title_tokens":["环境变","变量","环境","设置","."," ","4","环境变量"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_2","text":"为了验证ROS2安装成功，我们可以通过以下示例进行测试。","text_tokens":["为了","可以","成功","我们","。","通过","以下","安装","示例","测试","验证","进行","，","ros2"],"title":"ROS2示例测试","title_tokens":["测试","示例","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_1","text":"先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。","text_tokens":["数据","发布者","“","。","传输","：","命令","demo","”","来","，","字符","者","正常","底层","系统","最为","没有","重要","订阅","说明","cpp","如果","run","吧","$","节点","通信","dds","ros2","试试","talker","listener","问题","的","hello","终端","_","字符串","是否","在","中","二个","第二个","启动"," ","第二","py","发布","第一","一个","第一个","通过","以下","world","两个","nodes","先"],"title":"示例一：命令行示例","title_tokens":["命令行","：","示例","命令","一"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_2","text":"再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["仿真器","上下左右","“","再","至此","二句","一句","蕴藏","持续","。","运行","就","key","：","探索","经典","可以","”","成功","来","奥义","，","左右","—","中将","控制","第二句","关于","node","ros","上下","小海","teleop","啦","$","节点","ros2","上","仿真","分别","的","后续","终端","第一句","按键","如下","turtle","安装","小海龟","背景","_","点击","运动","在","中","真器","启动"," ","指令","海龟","两个","蓝色","第一","一个","第二","我们","教程","示例","该","试一试","run","turtlesim","键盘","将"],"title":"示例二：小海龟仿真示例","title_tokens":["仿真","海龟","二","小海","：","示例","小海龟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_3","text":"为了方便大家入门学习，我们也提供了预装好ROS2软件和教程代码的虚拟机镜像，有需要的小伙伴可以通过以下链接下载： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["com","虚拟机","1dvxugmhxlxnsnfdezuxw0g",".","方便",":","预装","：","虚拟","可以","exc6","也","，","s","镜像","https","大家","/","伙伴","下载","提供","ros2","软件","入门","baidu","需要","的","和","学习","好","为了","有","提取"," ","教程","我们","小伙","通过","代码","小伙伴","以下","pan","码","链接","了"],"title":"附：虚拟机镜像","title_tokens":["虚拟机","镜像","：","附","虚拟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/","text":"ROS2命令行操作 在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。 Linux中的命令行 类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。 启动方式 回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。 常用命令操作 我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。 ROS2中的命令行 ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。 运行节点程序 想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看节点信息 当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim 查看话题信息 当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose 发布话题消息 想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 发送服务请求 一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\" 发送动作目标 想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\" 录制控制命令 系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["msgs","看看","则","笔记","echo","感觉","实现","但","逛来逛去","均","集成","麻烦","能够","自己","后","容易","mkdir","完成","多种","vel","我们","多到","黑客","通过","一下","地","死记硬背","参数","用到","指定","-","还","一些","下来","play","就是","进一步","后边","管理","rotateabsolute","1.8","/","小海","$","ros2","随着","应用","终端","？","[","很","想","实验","bag","\"","找","做好","]","创建","看似","常用命令","链接","解决","再","窗口","约束","key","常用","孤单","来","其他","里边","内容","某","字符","编辑器","多","服务","十个","list","turtle1","感受","买","cp","忙","选项","去","主要","子","mv","不太","都","这些","alt","编辑","改变","出","这个","不过","受","此","自主","一种","及其","设计","为例","绝对","，","工具","系统管理员","一直","系统","根据","可视化","消息","发送","叫做","无论","teleop","本","提供","原有","太","问题","科幻电影","炫酷","和","把","如何","在","即可","一个","快捷键","子目录","不用","试一试","成","实验室","相同","0.0","产生",".","要","感兴","标目","rosbag2","所有","rosbag","令人发指","度高","感兴趣","'","商场","多个","移入","此时","现有","进行","命令行","改名","电影","有点","各种","选择","你","干什么","二十个","run","时候","逛去","列表","接下来","查看","直接","死机","重要","至于","手","很多","详细","需求","动","及","总有","被","一步","案例","随身带","体验","不一","call","还有","该","衣服","angular","而是","不","既","复制到","右键",":","至今","复制","：","msg","规则","每","linux","确实","一系列","拷贝","不变","--","一","上","想象","记忆","逛来","仿真","以","turtle","机制","service","有","让","来讲","统管","呈现出","但是","这种","播放","下","于","魅力","信息","“","0","2","其上","运行","…","慢慢","工作","t","看中","呀","若","一起","快捷","件夹","、","cd","起来","这项","真器","35","既定","原因","某段","数据","会","死记","到","未来","带领","笔记本","这","node","目","一只","ls","深入","的","很少","觉得","款式","必不可少","程序","跟","对于","体操","某个","或","第一","z","调试","。","便捷","拷贝到","具体","类似","新建","也","满足","db3","theta","令人","没有","0.2","每次","cmd","操作","如果","还是","send","数量","这样","之前","一点","完全","精心设计","linear","y","随身","rotate","topic","一系","详细信息","笔记本电脑","不到","与","功能","turtlesim","已经","一样","rate","命令","又","04","对","ros","调用","轻松","更","输入","2.0","具体操作","目标目录","一二十","名称","核心","好","定制","启动","服装","兴趣"," ","pwd","源文件","先","键盘","写字","改了","呈现","就","一次","角度","语法","发指","正常","小","goal","转","怎么","回到","所以","啦","+","等","record","可能","节点","学习","并不一定","目标","请求","另","删除","只是","布料","文件夹","一件","指令","不可","海龟","所在","搜索","geometry","段","哪","当前","例如","twist","可视","可以","枯燥","商家","这里","保持","电脑","{","以上","软件","知道","需要","呢","它","片段","或者","用户","如下","动作","背景","总","_","文件名","保留","继续","pub","40","路径","info","1","不同","难以","使用","用","3","权限","}","—","x","什么样","不是","17","现出","子目","gedit",">","列出","中","灵活","接触","发布","二十","为","适应","<","将","了","大致","由","方式","执行","是","推出","文件","terminal","”","一二十个","本节","初次","rm","文件名称","大家","鼠标","从来",",","一二","表示","管理员","第一次","硬","什么","材料","接下","熟悉","哪些","action","absolute","主目录","了解","2022","加上","场景","第一个","仿真器","为什么","复现","看到","背","sudo","因为","概念","虽然","控制","一边","绝对路径","话题","打开","录制","11","当前工作","系列","比如","异常","目录","深色","目的","体会","srv","name","专门","结合","并","小海龟","看不到","ctrl","显示","spawn","精心","科幻","尝试","一定","想要","帮上","查","pose"],"title":"ROS2命令行操作","title_tokens":["命令","命令行","操作","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2","text":"在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。","text_tokens":["魅力","会","时候","一种","调试","运行","。","一次","使用","进一步","命令","可以","到","带领","，","工具","—","本节","多","大家","重要","更","小海","感受","如果","可能","ros2","命令行","随着","深入","的","之前","第一次","学习","有点","小海龟","不太","一步","案例","在","中","接触"," ","海龟","我们","第一","一定","适应","将","了"],"title":"ROS2命令行操作","title_tokens":["命令","命令行","操作","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#linux","text":"类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。","text_tokens":["成","会","哪","可视","可以","所有","商家","这里","度高","但","商场","逛来逛去","此时","现有","软件","命令行","麻烦","电影","呢","的","片段","款式","能够","自己","必不可少","各种","对于","容易","保留","你","我们","一些","时候","逛去","。","便捷","使用","就是","类似","满足","什么样","不是","没有","每次","操作","现出","还是","手","很多","这样","需求","一点","完全","精心设计","？","总有","被","做好","中","灵活","不一","看似","为","功能","衣服","了","已经","解决","一样","方式","不","是","推出","约束","至今","命令","规则","来","linux","里边","其他","某","多","服务","大家","ros","买","想象","去","逛来","什么","材料","都","这些","定制","服装"," ","来讲","场景","呈现出","但是","受","这种","先","于","为什么","自主","看到","其上","一种","呈现","就","设计","，","工具","虽然","小","一直","看中","根据","可视化","呀","无论","等","比如","异常","科幻电影","问题","炫酷","结合","和","并","并不一定","、","起来","在","布料","一件","不可","既定","一个","科幻","精心","一定","想要"],"title":"Linux中的命令行","title_tokens":["命令行","中","的","命令","linux"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_1","text":"回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。","text_tokens":["会","笔记","可以","枯燥","到","令人发指","笔记本","这","电脑","软件","命令行","电影","呢","需要","的","很少","觉得","后","背景","选择","多种","我们","多到","黑客","通过","一下","二十个","参数","用到","时候","难以","。","使用","就是","用","列表","也","死机","不是","令人","操作","随着","应用","至于","手","数量","终端","很","及","随身带","中","随身","一系","笔记本电脑","不到","二十","功能","而是","方式","窗口","既","是","右键","terminal","：","命令","又","常用","来","其他","确实","字符","对","一二十个","一系列","初次","十个","大家","鼠标","输入","从来","一二","上","记忆","硬","一二十","什么","熟悉","都","alt","有","启动"," ","这个","不过","但是","魅力","写字","为什么","看到","背","就","，","因为","工具","慢慢","发指","正常","t","怎么","回到","叫做","打开","所以","+","本","系列","科幻电影","深色","快捷","体会","专门","并","看不到","ctrl","在","这项","即可","不用","指令","科幻","一定","快捷键","所在","原因","搜索"],"title":"启动方式","title_tokens":["方式","启动"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_2","text":"我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。","text_tokens":["会","当前","死记","则","标目","可以","所有","未来","感觉","保持","目","多个","移入","均","ls","改名","需要","的","它","或者","用户","对于","mkdir","文件名","某个","或","我们","一下","地","路径","死记硬背","指定","。","拷贝到","用","权限","列表","新建","管理","也","没有","/","子目","gedit",">","[","及","列出","找","体验","中","]","创建","常用命令","为","该","功能","<","将","链接","了","由","不","复制到","执行","文件","复制","：","命令","常用","”","来","linux","编辑器","rm","文件名称","多","拷贝","大家","不变","cp","选项","一","管理员","目标目录","以","名称","mv","熟悉","编辑","这些","主目录","改变"," ","出","pwd","统管","源文件","先","下","此","“","及其","就","sudo","…","绝对","，","语法","工作","一边","系统管理员","绝对路径","系统","回到","打开","若","当前工作","原有","目录","目的","件夹","把","cd","显示","目标","另","删除","只是","文件夹","指令","一个","子目录","查"],"title":"常用命令操作","title_tokens":["常用","命令","常用命令","操作"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2_1","text":"ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。","text_tokens":["大致","还","相同","下来","不同","。","就","为例","后边","命令","所有","具体","可以","linux","，","内容","接下来","也","对","概念","一系列","node","话题","感受","小海","操作","集成","具体操作","一起","系列","表示","ros2","命令行","比如","节点","仿真","的","目的","以","主要","什么","核心","接下","小海龟","机制","总","跟","都","体操","在","中","继续","有","了解","topic","一系"," ","海龟","我们","一个","第一","不过","第一个","与","干什么","功能","参数","下"],"title":"ROS2中的命令行","title_tokens":["命令行","中","的","命令","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_3","text":"想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["要","例如","运行","使用","key","：","命令","可以","，","控制","node","teleop","操作","进行","$","节点","ros2","仿真","和","turtle","_","某个","中"," ","海龟","我们","想要","run","turtlesim","键盘"],"title":"运行节点程序","title_tokens":["运行","节点","程序"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_4","text":"当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim","text_tokens":["信息","当前","感兴","运行","就","：","可以","命令","查看","来","，","某","对","感兴趣","list","系统","node","ros","/","啦","如果","$","节点","ros2","知道","呢","这样","的","它","详细","子","？","哪些","都","中","有","兴趣","详细信息"," ","加上","一个","info","turtlesim"],"title":"查看节点信息","title_tokens":["查看","信息","节点"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_5","text":"当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose","text_tokens":["还","数据","看到","当前","echo","使用","：","命令","查看","，","某","list","系统","话题","消息","/","turtle1","$","ros2","呢","的","子","如下","想","都","中","有","即可","topic"," ","加上","一个","试一试","pose"],"title":"查看话题信息","title_tokens":["查看","信息","话题"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_6","text":"想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":["geometry","msgs","还","1","angular","0.0","rate",":","twist","msg","：","命令","可以","直接","}","，","控制","x","话题","1.8","/","turtle1","{","cmd","2.0","--",",","$","ros2","命令行","动","linear","y","起来","_","\"","topic","指令"," ","海龟","我们","发布","pub","vel","通过","z","想要"],"title":"发布话题消息","title_tokens":["消息","话题","发布"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_7","text":"一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\"","text_tokens":["还","仿真器","改了","产生","再","2",":","：","孤单","}","来","，","—","x","'","服务","theta","调用","/","{","0.2",",","$","提供","一只","太","ros2","仿真","srv","name","y","\"","spawn","service","真器","call"," ","海龟","我们","一个","试一试","turtlesim"],"title":"发送服务请求","title_tokens":["发送","服务","请求"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_8","text":"想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\"","text_tokens":["仿真器",":","：","3","可以","角度","到","具体","命令","，","goal","theta","rotateabsolute","转","发送","/","turtle1","忙","$","提供","比如","命令行","ros2","send","仿真","这样","的","动作","\"","_","action","目标","完成","中","absolute","真器","rotate","让"," ","海龟","一个","这个","通过","想要","帮上","turtlesim","指定"],"title":"发送动作目标","title_tokens":["发送","动作","目标"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_9","text":"系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["-","数据","实验室","复现","段","再","0",".","下来","看看","运行","。","play","rosbag2","用","：","就是","常用","命令","可以","每","rosbag","，","04","实现","db3","这","系统","大家","/","回到","轻松","turtle1","录制","cmd","17","以上","如果","11","record","$","还是","啦","ros2","很多","的","子","？","很","把","实验","好","bag","自己","_","如何","中","有","2022","还有"," ","vel","35","我们","40","一个","尝试","与","功能","想要","播放","某段"],"title":"录制控制命令","title_tokens":["命令","控制","录制"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","text":"ROS2开发环境配置 ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。 Git git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git 下载教程源码 《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。 VSCode Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download VSCode插件配置 为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。 中文语言包 Python插件 C++插件 CMake插件 vscode-icons ROS插件 Msg Language Support Visual Studio IntelliCode URDF Markdown All in One VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["因","com","自带","会",".","丰富","guyuehome","bug","开发","记事","code","官方网站","插件","另外","可以","所有","微软","这里","官方","个人","作为","这","高效","但","多个","人工","推荐","神兵","集成","以上","进行","喜欢","软件","而生","大量","呢","需要","给","的","轻量","git","特性","最","编写","all","安装","自己","项目","_","浏览","之后","完成","markdown","肯定","听到","源代码","机器人","我们","离不开","代码","等等","提交","-","编译","合并","切换","一些","还","调试","不同","修复","成为","。","使用","操作系统","国内","用","扩展","查看","具体","管理","也","开发者","直接","—","哪里","windows","冲突","组件","https","重要","管理工具","/","support","每次","操作","强大","如果","发展","课程","$","ros2","应用","vscode","很多","2015","install","环境","这样","千上万","有些","码云","不开","人","？","新","终端","行","apt","源码","in","被","配置","支持","中","一行","一系","不会","硬件","与","功能","之间","macos","urdf","链接","了","无限","》","c++","年","方式","不",":","是","文件","非常","推出","快速","msg","：","命令","两款","linux","内容","《","版本","里边","编辑器","驱动","一系列","多","这款","gitee","大家","简称","ros","成千上万","更","上万","网站","成千","一款","下载","开发工具","复杂","做","后续","利器","广泛","自动","记事本","中会","好","语言包","审核","都","这些","编辑","网上","为了","有","让"," ","出","管理软件","教程","先","github","下载方式","增加","判断","开源","看到","理工","studio","icons","千万","浏览器","就","sudo","设计","非常简单","广泛应用","贡献","，","以及","工具","常听到","便于","21","迅速","系统","几千万","众多","只","所以","略显","搭建","功能强大","cmake","系列","提供","可能","准备","变更","linus","比如","入门","intellicode","tutorials","官方网","机器","语言","python","和","之父","并","件夹","download","中文","language","、","如何","在","简单","几千","文件夹","visualstudio","已有","visual","一个","clone","讲","示例","one","方法","搜索"],"title":"ROS2开发环境配置","title_tokens":["开发","环境","配置","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros2","text":"ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。","text_tokens":["编译","一些","开发","。","查看","两款","，","工具","—","大家","ros","重要","推荐","课程","提供","准备","开发工具","vscode","做","大量","呢","需要","给","环境","的","机器","git","不开","和","编写","？","中会","源码","、","配置","这些","如何","完成","肯定","机器人","我们","离不开","代码","示例","先"],"title":"ROS2开发环境配置","title_tokens":["开发","环境","配置","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#git","text":"git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git","text_tokens":["因","会","bug","开发","可以","所有","这","高效","多个","人工","进行","软件","而生","需要","的","git","特性","安装","项目","之后","完成","肯定","听到","我们","代码","等等","提交","合并","切换","不同","修复","。","使用","国内","具体","直接","管理","也","开发者","哪里","—","冲突","管理工具","每次","发展","$","应用","install","千上万","有些","码云","终端","人","apt","新","行","被","中","一行","不会","硬件","功能","之间","了","不","是","非常","命令","linux","内容","版本","驱动","这款","gitee","大家","成千上万","上万","网站","成千","一款","广泛","自动","审核","都","这些","有","让"," ","管理软件","github","增加","判断","开源","看到","理工","千万","就","sudo","设计","非常简单","广泛应用","贡献","，","以及","工具","常听到","迅速","系统","几千万","众多","所以","可能","比如","变更","linus","之父","和","并","在","简单","几千","已有","一个","方法"],"title":"Git","title_tokens":["git"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_1","text":"《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。","text_tokens":["com","还","》","自带","会",".","方式","guyuehome",":","是","文件","浏览器","记事","就","开发","：","用","另外","。","查看","《","，","里边","这里","—","多","21","https","gitee","系统","/","推荐","更","集成","略显","如果","下载","$","课程","ros2","入门","很多","复杂","tutorials","vscode","这样","的","环境","git","和","记事本","件夹","源码","好","_","浏览","中","有","文件夹"," ","clone","一个","讲","代码","下载方式"],"title":"下载教程源码","title_tokens":["下载","教程","源码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode","text":"Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download","text_tokens":["com","年","丰富",".","studio","成为","是","推出","code","非常","快速","操作系统","开发","。","扩展","微软","可以","官方网站","：","linux","，","windows","官方","编辑器","组件","但","系统","https","简称","神兵","/","操作","强大","搭建","功能强大","网站","下载","vscode","2015","轻量","官方网","的","利器","和","download","、","项目","编辑","支持",":","在","visualstudio"," ","源代码","visual","一个","代码","功能","macos","链接"],"title":"VSCode","title_tokens":["vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode_1","text":"为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。","text_tokens":["无限","还","调试","开发","。","插件","扩展","可以","，","便于","一系列","系列","ros2","vscode","后续","的","安装","为了","一系","我们","与","功能"],"title":"VSCode插件配置","title_tokens":["vscode","插件","配置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_2","text":"","text_tokens":[],"title":"中文语言包","title_tokens":["语言包","中文","语言"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#python","text":"","text_tokens":[],"title":"Python插件","title_tokens":["插件","python"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#c","text":"","text_tokens":[],"title":"C++插件","title_tokens":["插件","c++"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#cmake","text":"","text_tokens":[],"title":"CMake插件","title_tokens":["cmake","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode-icons","text":"","text_tokens":[],"title":"vscode-icons","title_tokens":["-","icons","vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros","text":"","text_tokens":[],"title":"ROS插件","title_tokens":["插件","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#msg-language-support","text":"","text_tokens":[],"title":"Msg Language Support","title_tokens":["support","msg","language"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#visual-studio-intellicode","text":"","text_tokens":[],"title":"Visual Studio IntelliCode","title_tokens":[" ","studio","visual","intellicode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#urdf","text":"","text_tokens":[],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#markdown-all-in-one","text":"VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["开发","。","插件","可以","也","，","个人","作为","众多","大家","推荐","只","以上","喜欢","vscode","环境","的","最","自己","配置","支持","网上","在","出","搜索"],"title":"Markdown All in One","title_tokens":["markdown"," ","all","one","in"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/","text":"DDS Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。 通信模型 DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。 DDS DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。 什么是DDS 好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是Data Distribution Service，也就是数据分发服务，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。 DDS在ROS2中的应用 DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。 质量服务策略QoS DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是Domain，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为数据提供者和接收者之间的合约。 具体会有哪些策略？比如这个列表中描述的DEADLINE策略，表示通信数据必须要在每次截止时间内完成一次通信，HISTORY策略，表示针对历史数据的一个缓存大小，RELIABILITY策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式。 还有这个DURABILITY，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。 案例一：在命令行中配置DDS 我们先来试一试在命令行中配置DDS的参数。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort $ ros2 topic info /chatter --verbose 案例二：DDS编程示例 接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。 运行效果 $ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub 发布者代码解析 learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , }, 订阅者代码解析 learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], }, 参考链接 DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们课上主要带领大家认识DDS，更多使用方法和相关内容，课程配套的教程中会有介绍，大家也可以参考这里的链接进行学习。 https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["msgs","com","丰富","更好","广播","echo","__","传输","复用","那","丢失","单位","发生变化","实现","最早","中间件","create","升级","但","真正","授权","org","说明","multiple","相当于","集中","dds","麻烦","（","主","并且","靠","能够","自己","后","神经网络","完成","无论如何","主讲人","而言","我们","一下","接口标准","地","通过","黑客","他们","连接数","入个","heard","体","参数","指定","三种","-","父类","忽略","编译","一些","像","下来","成为","分组","描述","就是","进一步","没","管理","callback","发送给","定时","入口","焕然一新","一套","提高","转移","/","啥意思","design","维护","$","ros2","应用","服务质量","working","遥控器","客户端","综合","？","rclpy","很","想","[","\"","subscription","重大","无用","历史数据","出现","整个","创建","兼容性问题","]","分发","刚才","初始","按照","流畅","）","链接","交通","收到","模型","解决","articles","42","讲到","完整性","#","常用","认识","来","其他","内容","版本","来看","字符","可信","多","服务","5g","提到","不好","就行","函数","选项","关系","的话","depth","复杂","影响","hello","主要","自动","单独","publishernode","并行","架构图","都","这些","为了","不过","这个","航空","super","通路","setup","前边","处理速度","i","小组","真实","差别","一种","docs","设计","冰山","为例","价值","强制","，",")","保障","qosprofile","无人","互相","21","系统","最为","根据","订阅","消息","发送","行业","它们","无论","输出","务器","提供","入门","通信","当然","问题","get","海军","publisher","和","带","提","把","视频","字符串","部分","如何","在","具体地址","领域","华为","guides","存在","一个","生态","讲","到底","示例","html","旋转","不用","试一试","先进","派","组织","id","建模","成",".","要","感兴","开发","上边","占用","所有","红色","sub","保证数据","video","标准","感兴趣","现在","'","多个","许多","此时","构图","加密","进行","晚","截止","命令行","拿","尽力","过","特性","1989","供者","有点","神经网","应该","databus","各种","中心","一条","选择","你","分布","预测","self","听说","机器人","销毁","相关","该用","with","图","run","corba","第三种","en","发布者","时候","尽可","uml","优化","string","qoshistorypolicy","列表","直接","接下来","明显","重要","args","绑定","集中处理","位置","实时","课","在于","很多","居","受到","需求","下边","行","内","介绍","更加","配置","一步","案例","运动","发生","模式","掉","企业","还有","速度","大大提高","任","int32","增多","使命","点","通信模型","当于","某一","定时器","太多","def","不",":","msg","destroy","：","效率","避免","连接","每","《","中间","交换","所有人","console","不变","一角","--","像是","一","上","服务端","技术","entry","以","广泛","learning","定义","有人","中会","bilibili","接收者","none","空间","service","成立","有","让","scripts","兼容性","但是","这种","处","能力","第四种","于","下","broker","举","信息","开源","“","当","运行","建模语言","之上","无人机","对象","sysml","便于","helloworld","一起","所","原则","(","ros1","由于","2004","verbose","how","durability","、","关闭","能响","@","基本","频繁","来到","蓝色","过程","焕然","服务器","强调","数据","结构","会","秒","可见","数以千计","非常复杂","一旦","到","effort","带领","者","这","回忆","能源","高效","至关","node","本身","延时","第四","第一种","感知","缓存","一新","import","的","publish","编写","而且","程序","历史","对应","布式","各个","肯定","或","处于","针对","只有","第一","过去","deadline","points","航拍","初始化","我","规模","架构","生变","可信赖","黑入","。","四大","导致","具体","类似","大大","也","满足","高通","data","from","那该","上层","没有","定位","每次","框架","符合","如果","还是","vendors","类","这样","建立","之前","环境","设置","新","implementations","古月","默认","要求","第二种","topic","usr","\\","domain","concepts","py","=","与","0.5","功能","之间","主讲","兼容","数据通","已经","医疗","一样","非常","参考","命令","提供者","退出","s","对","驱动","欢迎","找到","ros","更","送给","env","传送","做","middleware","核心","好","合适","等待","驾驶","厂商","课上","python3","4g","半天","兴趣"," ","教程","门","处理","接口","双方","先","*","意思","客户","keep","就","相当","一次","尽可能","广泛应用","资源","之","包含","帧","qos","神经","正常","众多","timer","编程","只","模块","啦","所以","技术标准","通道","等","二种","可能","节点","listener","组成","放在","std","机器","语言","吃","python","美国","借助","学习","关心","reliability","请求","只是","!","指令","配套","周期","8","选用","rmw","遥控","信赖","四种","guyuehome","哪","profile","另外","可以","reliable","init","这里","进入","个人","作为","无法","接收","二","名","电脑","样","{","完整","spin","时","决策","软件","舰船","知道","分布式","需要","呢","大量","它","给","这么","用户","加入","如下","动作","商业","办法","那个","高速","_","边","专利","理解","变化","包","工业","class","pub","第二","代码","on","subscribernode","info","同一","数据通信","库","至关重要","1","时间","不同","使用","用","}","—","底层","运转","得","保证","不是","https","提示","课程","合约","国防","有些","日志","类型","策略","列出","顺利","地址","中","灵活","图像","每个","回调","发布","点对点","必须","为","适应","将","了","作者","bv12z4y167w2","》","由","其实","年","方式","组成部分","程度","utf","是","执行","性能","快速","文件","瓶颈","”","质量","尽量","几种","每条","可","统一","大家","纠结","火锅","不感兴趣","优势",",","表示","说了半天","性","解析","例子","才能","什么","建设","同一个","qosreliabilitypolicy","shutdown","接下","哪些","history","好吃","publishing","bin","different","to","场景","world","全称","向","效果","last","humble","角色","垂直","控制","大小","增长","应用程序","话题","行为","logger","流畅性","打开","main","既然","树莓","不管","比如","填充","%","异常","终于","容性","omg","name","专门","第三","全局","并","网络","情况","冰山一角","通常","chatter","coding","distribution","宗旨","best","尝试","循环","一定","www","about","方法","人机"],"title":"**DDS**","title_tokens":["dds","*"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds","text":"Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。","text_tokens":["我","》","当于","是","讲到","。","相当","具体","来","《","，","—","实现","神经","底层","欢迎","21","服务","最为","大家","话题","ros","系统","相当于","课程","入门","ros2","dds","通信","终于","的","它","hello","机器","学习","靠","动作","好","、","网络","神经网","古月","重大","都","神经网络","完成","在","中","变化","主讲人","来到"," ","我们","机器人","过程","讲","他们","前边","主讲"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_1","text":"DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。","text_tokens":["数据","会","四种","可见","感兴","广播","一旦","所有","到","可以","这里","发生变化","实现","作为","无法","感兴趣","这","但","真正","第四","许多","第一种","集中","进行","时","软件","dds","拿","知道","麻烦","需要","的","它","并且","能够","而且","自己","有点","databus","应该","各种","中心","一条","变化","第二","我们","针对","第一","连接数","三种","第三种","规模","架构","忽略","生变","成为","。","使用","就是","进一步","优化","导致","具体","类似","也","明显","运转","没有","每次","集中处理","框架","如果","在于","很多","受到","这样","建立","之前","有些","客户端","很","想","行","列出","更加","一步","地址","第二种","发生","中","整个","每个","发布","与","点对点","必须","速度","为","了","增多","通信模型","收到","模型","由","解决","太多","其实","程度","是","非常","性能","瓶颈","常用","效率","连接","其他","所有人","几种","每条","多","服务","找到","火锅","更","不感兴趣","优势","关系","像是","上","服务端","传送","以","影响","单独","核心","有人","并行","都","好吃","兴趣"," ","不过","这个","处理","但是","这种","通路","双方","处","处理速度","第四种","客户","broker","当","一种","角色","就","，","之","包含","正常","增长","系统","订阅","消息","只","通道","二种","务器","节点","通信","所","提供","问题","异常","可能","吃","和","ros1","并","第三","能响","关心","请求","在","具体地址","旋转","一个","一定","服务器","不用","先进"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_1","text":"DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。","text_tokens":["数据","已经","交通","医疗","会","方式","。","非常","可以","广泛应用","，","满足","交换","能源","不是","定位","模块","它们","感知","等","决策","ros2","dds","应用","比如","很多","通信","需要","的","之前","广泛","国防","需求","自动","和","并","新","借助","很","好","驾驶","高速","都","这些","在","领域","频繁","预测","通常"," ","存在","一个","航空","地"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_2","text":"好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是Data Distribution Service，也就是数据分发服务，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。","text_tokens":["组织","建模","数据","丰富","开发","数以千计","可以","这里","最早","标准","中间件","现在","升级","高效","完整","进行","软件","舰船","dds","分布式","大量","呢","的","它","过","1989","各种","中心","布式","分布","听说","我们","一下","地","corba","成为","。","就是","uml","管理","也","满足","data","一套","/","啥意思","实时","维护","课","应用","服务质量","环境","需求","策略","？","介绍","中","灵活","兼容性问题","分发","还有","发布","为","兼容","使命","已经","年","由","解决","是","来","质量","中间","可","统一","服务","大家","说了半天","技术","复杂","做","以","好","半天","service","成立"," ","兼容性","全称","意思","于","真实","设计","价值","建模语言","垂直","强制","，","对象","保障","sysml","系统","订阅","行业","啦","技术标准","等","提供","可能","通信","比如","当然","问题","容性","omg","语言","专门","海军","和","美国","2004","提","网络","、","distribution","一个","到底","强调"],"title":"什么是DDS","title_tokens":["dds","什么","是"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#ddsros2","text":"DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。","text_tokens":["组织","会","要","哪","开发","上边","可以","所有","红色","复用","那","这里","进入","实现","中间件","标准","个人","至关","但","多个","授权","此时","构图","软件","dds","分布式","需要","呢","的","给","这么","用户","加入","能够","商业","自己","选择","那个","边","对应","专利","无论如何","布式","你","工业","肯定","或","分布","而言","我们","机器人","接口标准","该用","代码","他们","至关重要","架构","像","时间","。","四大","使用","就是","用","没","具体","大大","也","高通","上层","得","保证","重要","转移","提高","位置","符合","如果","还是","ros2","应用","很多","这样","建立","下边","综合","？","想","中","企业","刚才","按照","功能","大大提高","任","兼容","了","某一","一样","组成部分","不","是","性能","来","每","中间","其他","版本","尽量","对","驱动","可","统一","多","5g","大家","不变","提到","ros","纠结","就行","更","函数","上","技术","性","middleware","影响","建设","厂商","架构图","都","4g","为了","有","让"," ","兼容性","场景","这个","接口","能力","开源","差别","一种","就","设计","之上","，","系统","根据","编程","无论","所以","模块","既然","可能","不管","通信","比如","问题","组成","放在","容性","原则","机器","和","由于","把","、","部分","如何","在","基本","华为","蓝色","宗旨","一个","选用","生态","过程"],"title":"DDS在ROS2中的应用","title_tokens":["dds","在","中","应用","的","ros2"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#qos","text":"DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是Domain，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为数据提供者和接收者之间的合约。 具体会有哪些策略？比如这个列表中描述的DEADLINE策略，表示通信数据必须要在每次截止时间内完成一次通信，HISTORY策略，表示针对历史数据的一个缓存大小，RELIABILITY策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式。 还有这个DURABILITY，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。","text_tokens":["id","成","数据","信赖","结构","会","要","更好","占用","传输","另外","可以","reliable","所有","effort","丢失","实现","保证数据","回忆","接收","延时","电脑","样","此时","完整","缓存","加密","进行","晚","一新","截止","dds","需要","呢","的","给","这么","尽力","特性","加入","供者","程序","历史","那个","_","选择","办法","各个","理解","完成","处于","针对","我们","只有","过去","机器人","通过","地","deadline","黑客","入个","图","体","同一","航拍","数据通信","参数","指定","一些","时候","可信赖","时间","分组","不同","黑入","。","描述","使用","尽可","就是","导致","用","具体","列表","类似","也","满足","发送给","直接","那该","焕然一新","保证","没有","重要","绑定","每次","如果","ros2","应用","合约","这样","遥控器","之前","需求","策略","？","新","内","顺利","配置","默认","要求","无用","历史数据","中","运动","模式","出现","掉","图像","还有","domain","为","必须","流畅","功能","之间","适应","将","了","数据通","通信模型","模型","不","是","完整性","快速","命令","避免","质量","提供者","每","来看","尽量","对","可信","多","服务","大家","ros","不好","送给","表示","的话","关系","例子","才能","同一个","定义","接收者","好","合适","哪些","history","都","空间","这些","有","让"," ","场景","这个","门","但是","这种","先","下","向","客户","举","小组","一种","一次","尽可能","无人机","，","资源","帧","qos","便于","控制","大小","无人","互相","系统","应用程序","行为","根据","众多","发送","流畅性","啦","一起","树莓","提供","节点","通信","所","可能","比如","机器","和","全局","带","durability","网络","情况","视频","如何","reliability","在","基本","指令","一个","best","过程","焕然","一定","人机","遥控","派"],"title":"质量服务策略QoS","title_tokens":["策略","服务","qos","质量"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_3","text":"我们先来试一试在命令行中配置DDS的参数。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort $ ros2 topic info /chatter --verbose","text_tokens":["msgs","-","42",":","。","echo","msg","命令","reliable","来","effort","data","qos","/","--","$","ros2","命令行","dds","std","的","verbose","\"","_","配置","reliability","在","中","topic"," ","pub","chatter","我们","best","info","试一试","先","参数","int32"],"title":"案例一：在命令行中配置DDS","title_tokens":["命令行","在","中","dds","：","命令","配置","案例","一"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_4","text":"接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。","text_tokens":["下来","。","为例","接下来","，","话题","通信","dds","以","之前","hello","接下","配置","在","中"," ","我们","尝试","代码","world"],"title":"案例二：DDS编程示例","title_tokens":["dds","二","编程","：","示例","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_2","text":"$ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub","text_tokens":["sub","qos","learning"," ","pub","helloworld","_","run","$","ros2"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_3","text":"learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , },","text_tokens":["msgs","com","数据",".","guyuehome","profile","秒","__","reliable","init","effort","单位","create","'","node","名","{","说明","spin","进行","知道","（","需要","import","的","publish","主","加入","编写","如下","后","程序","_","完成","包","class","self","pub","销毁","代码","points","初始化","info","库","父类","-","编译","1","发布者","string","qoshistorypolicy","}","from","callback","定时","data","入口","args","/","提示","ros2","居","类","设置","日志","类型","rclpy","[","\"","古月","配置","中","创建","usr","回调","=","py","发布","初始","为","0.5","功能","）","作者","点","已经","utf","定时器","def",":","执行","文件","msg","#","destroy","：","”","退出","字符","s","console","函数","选项","env",",","depth","entry","learning","hello","shutdown","qosreliabilitypolicy","publishernode","等待","history","none","python3","publishing","bin","让"," ","scripts","super","world","setup","接口","*","信息","“","last","keep",")","对象","，","qos","qosprofile","系统","话题","timer","logger","消息","helloworld","main","输出","打开","节点","填充","%","std","原则","(","get","name","python","publisher","并","关闭","、","字符串","@","reliability","!","chatter","coding","周期","8","一个","best","循环","www","示例"],"title":"发布者代码解析","title_tokens":["代码","发布者","解析","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_4","text":"learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], },","text_tokens":["msgs","com","数据",".","guyuehome","profile","__","reliable","init","effort","sub","者","标准","create","'","node","名","{","说明","spin","进行","知道","（","需要","import","的","主","加入","编写","如下","后","程序","_","完成","包","class","self","pub","销毁","代码","points","heard","subscribernode","初始化","info","库","父类","-","编译","1","string","qoshistorypolicy","}","from","callback","data","入口","args","/","提示","ros2","居","类","设置","日志","类型","rclpy","[","\"","古月","subscription","配置","创建","]","usr","\\","回调","py","初始","=","功能","）","作者","点","收到","utf","def",":","执行","文件","msg","#","destroy","：","”","退出","s","对","console","函数","选项","env",",","depth","entry","learning","hello","shutdown","定义","qosreliabilitypolicy","等待","history","none","python3","bin","让"," ","scripts","super","world","处理","setup","接口","*","i","信息","“","last","keep",")","对象","，","qos","qosprofile","系统","话题","logger","订阅","消息","helloworld","main","输出","打开","listener","节点","%","std","原则","(","get","name","python","并","关闭","、","@","reliability","!","chatter","coding","8","一个","best","循环","www","示例"],"title":"订阅者代码解析","title_tokens":["者","代码","解析","订阅"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_5","text":"DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们课上主要带领大家认识DDS，更多使用方法和相关内容，课程配套的教程中会有介绍，大家也可以参考这里的链接进行学习。 https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["-","en","com","bv12z4y167w2","articles",".","humble",":","是","非常","参考","使用","非常复杂","冰山","。","docs","可以","认识","带领","也","，","内容","这里","video","多","本身","系统","https","大家","with","ros","/","一角","更","org","multiple","design","进行","课程","vendors","ros2","dds","复杂","working","middleware","的","主要","和","how","implementations","中会","学习","bilibili","介绍","课上","_","冰山一角","只是","html","有","different","配套"," ","教程","我们","concepts","一个","相关","about","to","guides","www","rmw","on","方法","链接"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/","text":"工作空间：开发过程的大本营 大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是工程。 工作空间是什么 类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做工作空间。 所以工作空间是一个存放项目开发相关文件的文件夹，也是开发过程中存放所有资料的大本营。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。 创建工作空间 了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 自动安装依赖 我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init & rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y 编译工作空间 依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。 设置环境变量 编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["w","com","结构","会","产生",".","要","guyuehome","当前","开发","echo","另外","可以","所有","未来","到","典型","init","这里","这","大部分","多个","org","此时","集成","根目录","大部","得到","以上","进行","时","均","local","path","四个","某些","需要","的","很少","或者","git","过","dev","并且","编写","如下","能够","安装","错误","后","程序","应该","各种","里","项目","_","自己","mkdir","完成","包","pip3","针对","我们","机器人","相关","代码","参数","-","编译","1","还","一些","en","至此","并列","下来","。","允许","使用","就是","用","3","成功","接下来","类似","管理","也","from","空间结构","结果","https","不是","bashrc","/","操作","如果","$","ros2","数量","报错","colcon","install","环境","子目","之前","一点","完全","设置","日志","apt","终端",">","新","y","存放","\"","配置","log","自动生产","出现","中","接触","创建","社区","否则","生效","build","工程","pip","不会","sh","一部","功能","~","链接","了","开始","用于","可执行文件","一样","警告","执行","是","文件",":","参考","creating","#","：","命令","”","依赖","里边","内容","某","中间","多少","gitee","总体","大家","放置","ros","唯一","a","&","src","找到","workspace","选项","一部分","--","下载","像是","关系","rosdep","eclipse","后续","自动","什么","子","定义","名称","中会","任何","接下","rosdistro","都","空间","creator","这些","python3","为了","变量","人为","html","有","了解","让","工具栏"," ","b2","来讲","b","大本","教程","所示","这个","大本营","setup","..","qt","环境变","i","信息","“","update","当","2","studio","humble","看到","就","运行","sudo","docs","rosdepc","source","，","以及","工具","概念","缺少","工作","21","系统","绝大部分","生产","；","行文","叫做","保存","所以","啦","等","编写程序","环境变量","比如","目录","如图所示","tutorials","从","机器","脚本","和","件夹","并","学习","、","cd","情况","部分","点击","在","绝大","文件夹","ws","visual","资料","两个","一个","过程","存在","clone","手动","子目录","想要","p","仅","强调"],"title":"**工作空间：开发过程的大本营**","title_tokens":["工作","的","大本","开发","过程","：","大本营","*","空间"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_1","text":"大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是工程。","text_tokens":["“","会","当","产生","studio","是","开发","就","文件","。","所有","”","，","以及","工具","里边","内容","工作","大家","放置","叫做","此时","集成","选项","等","编写程序","比如","eclipse","某些","环境","的","之前","后续","过","和","编写","新","学习","件夹","、","程序","应该","都","这些","creator","点击","在","中","接触","有","创建","文件夹","工具栏","工程"," ","visual","我们","一个","这个","想要","qt"],"title":"工作空间：开发过程的大本营","title_tokens":["工作","的","大本","开发","过程","：","大本营","空间"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_2","text":"类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做工作空间。 所以工作空间是一个存放项目开发相关文件的文件夹，也是开发过程中存放所有资料的大本营。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。","text_tokens":["w","结构","会","产生","要","开发","另外","可以","所有","未来","到","典型","这里","这","大部分","多个","根目录","集成","大部","得到","以上","进行","时","四个","某些","需要","的","很少","或者","dev","编写","安装","错误","后","各种","自己","项目","里","_","针对","机器人","我们","相关","代码","参数","编译","1","一些","并列","。","允许","就是","用","3","成功","类似","管理","也","空间结构","结果","不是","操作","数量","install","子目","环境","完全","一点","日志","新","存放","log","中","创建","build","工程","一部","功能","了","开始","用于","可执行文件","一样","警告","执行","是","文件","：","里边","中间","某","总体","a","放置","ros","唯一","src","一部分","像是","关系","子","定义","名称","都","空间","人为","有"," ","b2","来讲","b","大本","所示","这个","大本营","信息","2","就","运行","，","工作","系统","绝大部分","；","行文","叫做","保存","所以","等","比如","目录","如图所示","机器","脚本","和","件夹","并","、","情况","部分","在","绝大","文件夹","ws","资料","两个","存在","一个","过程","子目录","强调"],"title":"工作空间是什么","title_tokens":["工作","空间","什么","是"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_3","text":"了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git","text_tokens":["-","com",".","下来","guyuehome",":","使用","：","命令","可以","接下来","，","概念","工作","结果","21","https","gitee","/","src","下载","$","ros2","tutorials","的","git","dev","和","并且","如下","接下","cd","_","空间","mkdir","了解","创建","ws"," ","教程","我们","一个","clone","代码","p","~","了"],"title":"创建工作空间","title_tokens":["工作","空间","创建"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_4","text":"我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init & rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y","text_tokens":["-","i","一些","update","会","humble","sudo","使用","：","rosdepc","可以","init","from","依赖","，","多少","也","工具","&","src","--","下载","$","path","rosdep","install","从","的","自动","apt","安装","y","cd","各种","rosdistro","都","python3","中","社区","有"," ","pip","pip3","我们","一个","代码","手动",".."],"title":"自动安装依赖","title_tokens":["依赖","安装","自动"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_5","text":"依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。","text_tokens":["-","编译","看到","文件","就","sudo","使用","。","：","命令","可以","成功","依赖","，","缺少","工作","生产","ros","/","啦","如果","$","报错","colcon","install","的","或者","apt","dev","自动","件夹","如下","中会","安装","错误","后","任何","应该","cd","_","、","空间","python3","自动生产","完成","出现","在","中","log","有","否则","文件夹","ws","不会","build"," ","过程","代码","~","了"],"title":"编译工作空间","title_tokens":["编译","工作","空间"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_6","text":"编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。","text_tokens":["环境变","编译","还","~","至此",".","可执行文件","当前","执行","文件","就","echo","。","#","：","成功","所有","source","，","工作","系统","找到","行文","/","bashrc","均","环境变量","$","local","需要","install","设置","的","环境",">","终端","和","dev","能够","后","、","\"","_","配置","空间","完成","为了","包","变量","在","生效","创建","让","ws"," ","我们","sh","setup","功能","仅","了"],"title":"设置环境变量","title_tokens":["环境变","变量","环境","设置","环境变量"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_7","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["-","en","tutorials",".","https"," ","humble",":","ros","workspace","/","docs","org","creating","a","html"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/","text":"功能包：开发过程的大本营 在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做功能包。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。 创建功能包 如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python 编译功能包 在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash 功能包的结构 功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。 C++功能包 首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。 Python功能包 C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["分享","结构","会",".","划分","包并","要","开发","xml","可以","所有","到","复用","那","这里","看","create","这","但","bash","org","说明","感知","时","软件","local","拿","某些","需要","呢","的","给","或者","dev","之外","编写","如下","各种","程序","混合","导航","里","_","跟","绿豆","之后","完成","包","是否","红豆","你","继续","机器人","我们","相关","除此之外","代码","points","他们","first","pkg","-","编译","en","视觉","一些","其中","时候","新创","不同","。","描述","某种","使用","就是","用","your","新建","也","编译成","手上","入口","得","https","不是","提高","重要","降低","/","package","率","如果","$","还是","ros2","数量","colcon","分析","很多","五颜六色","install","环境","ament","设置",">","终端","类型","？","想","源码","介绍","配置","找","中","么","社区","创建","立刻","型","每个","build","还有","py","刚才","名字","该","必须","功能","<","之间","越","~","将","了","cmakerlists","链接","c++","而是","可执行文件","不","一样","执行","是","文件",":","拆分","新创建","包是","：","#","参考","命令","规则","”","来","依赖","内容","里边","版本","尽量","除此","多","大家","a","ros","workspace","src","普通","--","下载","关系","表示","首先","c","entry","解析","例子","后续","才能","learning","假设","主要","袋子","名称","是否是","好","机制","txt","版权","cmakelists","都","这些","举个","三个","空间","变量","html","很难","有"," ","教程","大本","这个","大本营","但是","别人","setup","声明","下","环境变","判断","原理","自主","很快","信息","“","当","看到","humble","移动","头疼","讲解","就","运行","docs","creating","source","，","包含","语法","控制","工作","正常","豆子","一颗","颜色","；","行文","编程","只","叫做","type","所以","等","黄豆","一起","cmake","可能","环境变量","比如","当然","包该","放在","分别","tutorials","机器","name","python","语言","和","包中","件夹","并","放到","把","、","cd","起来","必然","如何","在","发现","之一","文件夹","拿出","ws","指令","两个","存在","一个","过程","是不是","译成","出来","耦合","方法","只想"],"title":"**功能包：开发过程的大本营**","title_tokens":["包","的","大本","开发","过程","：","大本营","功能","*"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_1","text":"在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做功能包。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。","text_tokens":["分享","会","划分","可以","到","复用","说明","感知","时","软件","拿","某些","需要","的","给","混合","导航","里","绿豆","包","红豆","你","机器人","我们","代码","他们","视觉","其中","时候","不同","。","某种","使用","就是","用","也","手上","得","不是","提高","重要","降低","率","如果","ros2","数量","很多","五颜六色","想","源码","找","中","么","社区","立刻","每个","功能","之间","越","了","而是","不","是","文件","拆分","尽量","多","大家","ros","普通","下载","关系","例子","假设","袋子","名称","机制","都","这些","举个","三个","很难","有"," ","教程","这个","但是","别人","原理","自主","很快","当","看到","移动","头疼","就","，","控制","豆子","一颗","颜色","；","只","叫做","所以","等","黄豆","一起","可能","比如","当然","包该","放在","机器","包中","件夹","并","放到","把","、","起来","如何","在","发现","之一","文件夹","拿出","一个","是不是","出来","耦合","方法","只想"],"title":"功能包：开发过程的大本营","title_tokens":["包","的","大本","开发","过程","：","大本营","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_2","text":"如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python","text_tokens":["-","c++","新创","就","包是","使用","新创建","：","。","#","可以","命令","那","新建","，","这里","版本","create","；","/","type","package","src","--","如果","cmake","$","还是","表示","ros2","功能","比如","c","呢","分别","的","ament","learning","name",">","python","或者","终端","？","和","dev","cd","_","跟","如何","在","中","包","创建","ws","build","指令"," ","我们","一个","相关","这个","名字","pkg","<","~"],"title":"创建功能包","title_tokens":["功能","包","创建"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_3","text":"在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash","text_tokens":["环境变","编译",".","运行","#","：","可以","所有","source","，","工作","正常","bash","/","src","环境变量","$","local","colcon","需要","install","环境","的","才能","dev","和","包中","编写","好","cd","_","配置","空间","之后","完成","在","变量","继续","包","创建","ws","build"," ","我们","代码","setup","功能","~"],"title":"编译功能包","title_tokens":["功能","包","编译"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_4","text":"功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。","text_tokens":["判断","结构","包并","新创","文件","。","新创建","那","来","，","不是","普通","分析","呢","的","件夹","？","是否是","是否","如何","包","创建","文件夹","两个","我们","刚才","一个","功能","下"],"title":"功能包的结构","title_tokens":["功能","包","的","结构"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#c","text":"首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。","text_tokens":["cmakerlists","编译","c++","其中",".","要","是","文件","xml","。","描述","运行","：","使用","规则","依赖","，","内容","包含","语法","看","package","所以","cmake","首先","需要","设置","的","才能","主要","类型","和","如下","txt","各种","cmakelists","版权","必然","如何","包","在","中"," ","两个","存在","代码","该","必须","功能","声明","下"],"title":"C++功能包","title_tokens":["功能","包","c++"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#python","text":"C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。","text_tokens":["编译","信息","一些","c++","“","会",".","可执行文件","一样","不","执行","是","文件","不同","xml","。","描述","：","讲解","使用","”","依赖","，","编译成","也","内容","版本","包含","里边","这","除此","入口","但","大家","编程","行文","package","所以","需要","entry","解析","的","后续","给","语言","主要","python","之外","和","源码","各种","程序","版权","_","配置","介绍","如何","包","声明","在","中","有","型","还有"," ","两个","py","我们","译成","除此之外","points","但是","setup","功能","将"],"title":"Python功能包","title_tokens":["功能","包","python"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_5","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["-","en",".","humble",":","creating","docs","your","https","a","ros","workspace","/","org","package","first","ros2","tutorials"," ","html"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/","text":"节点 机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。 通信模型 完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。 案例一：Hello World节点（面向过程） ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。 运行效果 大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ], 创建节点流程 代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。 案例二：Hello World节点（面向对象） 所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。 运行效果 下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ], 创建节点流程 所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。 案例三：物体识别节点 没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。 运行效果 在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。 代码解析 在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ], 案例四：机器视觉识别节点 用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。 运行效果 启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 注意：如果是在虚拟机中操作，需要进行以下设置： 把虚拟机设置为兼容USB3.1； 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。 代码解析 相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ], 节点命令行操作 节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息 思考题 现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["获取","com","hierarchy","会弹","看看","更好","__","那","实现","查询","看","阈值","可移植性","但","面向","不要","chain","org","说明","理过","岂","二值化","（","home","主","并且","pyhton","后","保持联系","是否","检测","完成","多种","而言","我们","一下","通过","他们","参数","用到","父类","-","编译","还","一些","其中","像","bgr","下来","取","成为","总体而言","操作系统","就是","没","部门","入口","/","findcontours","$","ros2","来源","左上","apt","终端","综合","？","rclpy","[","很","shape","合理","\"","一台","知其所以然","出现","创建","]","cnt","调整","疑惑","初始","刚才","名字","）","链接","苹果","mask","想到","收到","模型","再","可执行文件","窗口","勾勒","#","常用","认识","来","来看","某","字符","前后","多","list","所以然","src","一线","相比","函数","选项","命名","的话","apple","去","复杂","hello","一张","都","这些","物理","改变","出","true","这个","super","不过","setup","眼睛","虚拟机","cv2","而已","高","方便","一种","docs","设计","webcam","为例","坐标","，",")","保障","sleep","就让","互相","21","系统","最为","根据","可视化","inrange","发送","叫做","输出","监控","考题","编写程序","提供","通信","可读","当然","太","问题","tutorials","知其然","从","get","和","把","综合体","字符串","如何","在","远程","即可","框架图","5","一个","是不是","到底","示例","html","不用","计算机","难","外界","图像处理","工人","相同",".","要","50","开发","整体","红色","左上角","中将","打印","现在","'","关于","进行","命令行","共同","改成","没错","重新","好像","上角","之外","过","各种","应该","负责","看上去","中心","注意","你","分布","像素","self","机器人","销毁","点画","工厂","run","en","视觉","乃至","时候","这份","不能","虚拟","接下来","查看","列表","计算","重要","args","实时","分析","居","install","面积","摄像头","动态","经常","编码","及","xy","像头","介绍","更加","被","配置","videocapture","案例","运动","发生","轮子","还有","推动","速度","该","还会","点","通信模型","c++","开始","def","不",":","destroy","：","宽","连接","每","中间","console","这款","更多","编码方式","位于","jpg","一","上","身体","同理","entry","以","learning","180","每一项","机制","思考","相机","一项","none","有","让","转换","scripts","轮廓","但是","这种","可读性","下","信息","“","当","0","2","关注","移动","运行","hcx","算机","对象","噪声","工作","孤立","颜色","呀","helloworld","一起","吧","(","实际","关闭","、","前后左右","起来","状态","@","简单","生成","ws","可移植","过程","以下","云端","出来","red","结构","会","understanding","到","未来","例程","contours","这","流程","node","if","得到","ret","却","某些","import","的","dev","编写","程序","里","对于","一节","布式","下限","后勤部","bgr2hsv","java","除此之外","points","初始化","array","调试","这座","。","某种","boundingrect","方法","中心点","具体","from","前","也","左右","物体","类似","太小","后勤部门","总结","np","操作","框架","如果","还是","drawcontours","类","这样","环境","设置","一点","hsv","之前","y","in","古月","cvtcolor","continue","usr","py","=","框会","0.5","功能","之间","兼容","移植","最大","object","一样","参考","命令","模块化","具备","做到","退出","联系","重点","驱动","先拉","自然","a","找到","ros","搭载","唯一","总体","更","编程语言","env","helloworldnode","面向对象","做","名称","好","等待","retr","python3","cap","网上","人为","启动"," ","b","处理","接口","*","先","职责","识别","请","for","就","ruby","角度","read","正常","模拟","as","更多要","众多","骡子","编程","回到","所以","模块","啦","+","等","只不过","腿","可能","节点","组成","ok","放在","分别","imshow","机器","语言","python","学习","只是","!","指令","任务","周期","两个","8","approx","150","所在","w","至","int","imread","guyuehome","可视","另外","可以","init","这里","地方","处理过程","过来","保持","二","电脑","{","推荐","完整","spin","时","知道","分布式","四个","需要","呢","给","它","桌子","或者","加入","如下","后勤","安装","_","包","理解","变化","看上","class","算是","更为","代码","路径","usb3.1","info","去除","库","步骤","image","1","circle","destroyallwindows","时间","不同","使用","用","成功","90","比喻","读取","—","x","255","numpy","结果","得","https","不是","三","绿色","载体","课程","128","color","依然","日志",">","绿点","中","摇杆","图像","每个","硬件","修改","发布","为","<","nodes","独立","厂房","了","作者","将","思考题","utf","方式","为止","执行","是","文件","此处","一帧","”","溜溜","除此","马","可","然后","大家","纠结","摄像","稍微",",","着急","表示","上限","解析","upper","shutdown","lower","休眠","接下","细胞","熟悉","bin","world","上去","图片","效果","opencv","waitkey","img","看到","humble","sudo","概念","虽然","控制","数值","detect","logger","；","行文","设备","打开","main","既然","范围","比如","name","h","并","移植性","while","显示","发现","进程","四","各不相同","coding","心里","循环","www","合体","time","图像识别","想要"],"title":"**节点**","title_tokens":["*","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_1","text":"机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。","text_tokens":["一些","像","“","取","成为","是","就","。","就是","整体","到","连接","”","那","，","工作","众多","ros","一起","节点","的","给","机器","综合","每一项","细胞","各种","机制","综合体","一项","这些","在","中"," ","机器人","我们","一个","通过","名字","合体","功能","了"],"title":"节点","title_tokens":["节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_2","text":"完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。","text_tokens":["获取","工人","相同","看看","整体","另外","可以","到","那","地方","查询","实现","这","但","完整","得到","时","却","共同","分布式","某些","需要","的","它","桌子","或者","之外","后勤","程序","里","布式","完成","你","分布","后勤部","java","机器人","我们","除此之外","通过","算是","更为","他们","工厂","参数","编译","还","乃至","时候","下来","不同","这座","。","操作系统","就是","具体","接下来","也","左右","比喻","—","计算","部门","后勤部门","结果","不是","操作","载体","这样","环境","摄像头","像头","一台","配置","运动","中","摇杆","每个","轮子","还有","硬件","推动","速度","该","功能","还会","独立","厂房","了","想到","c++","可执行文件","不","执行","是","文件","：","认识","连接","每","来","”","除此","来看","某","前后","多","这款","自然","a","找到","搭载","摄像","唯一","更","编程语言","一线","位于","命名","上","身体","去","复杂","做","名称","接下","细胞","都","这些","物理","人为","有","让"," ","b","这个","职责","眼睛","信息","“","当","看到","移动","运行","就","设计","ruby","角度","算机","，","保障","虽然","控制","工作","互相","系统","根据","；","行文","编程","叫做","监控","既然","等","腿","一起","可能","节点","比如","提供","组成","放在","分别","从","机器","语言","python","和","并","、","前后左右","状态","如何","在","远程","进程","生成","各不相同","任务","一个","云端","到底","计算机","想要","外界"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world","text":"ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。","text_tokens":["开始","“","不","是","。","就是","”","到","例程","来","，","字符","实现","打印","最为","编写程序","节点","ros2","当然","复杂","需要","的","从","hello","终端","编写","并","程序","字符串","简单","中"," ","我们","一个","循环","world","功能","先","了"],"title":"案例一：Hello World节点（面向过程）","title_tokens":["（","节点","hello"," ","面向","过程","world","：","）","案例","一"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_3","text":"大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["效果","编译","“","再","看到","执行","是","运行","。","命令","成功","溜溜","可以","来","做到","，","也","”","实现","看","马","打印","字符","然后","不要","先拉","大家","骡子","node","所以然","helloworld","所以","课程","着急","节点","ros2","分析","$","知其然","的","learning","hello","终端","先","好","后","_","字符串","知其所以然","如何","在","中"," ","我们","过程","通过","代码","这个","循环","出来","world","run","下"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_4","text":"这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ],","text_tokens":["com",".","guyuehome","init","实现","'","node","面向","{","说明","进行","知道","需要","呢","import","的","主","加入","编写","如下","后","程序","_","是否","完成","包","我们","销毁","代码","points","初始化","info","库","-","编译","时间","。","使用","from","入口","args","/","ros2","居","类","设置","日志","？","rclpy","[","\"","古月","配置","创建","]","usr","=","初始","py","发布","0.5","功能","作者","点","utf","方式","def",":","是","文件","#","destroy","：","”","来看","console","函数","选项","env",",","entry","learning","hello","shutdown","休眠","none","python3","bin","让"," ","scripts","这个","world","setup","接口","*","下","信息","“","运行",")","对象","，","sleep","控制","正常","系统","logger","helloworld","main","输出","打开","节点","ok","(","get","python","并","关闭","如何","while","@","!","coding","8","过程","循环","www","示例","time"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_5","text":"代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。","text_tokens":["初始化","c++","会","方式","是","。","就","使用","：","方法","可以","未来","具体","模块化","做到","，","这里","实现","虽然","流程","面向","总结","大家","纠结","重要","编程","系统","难","更","模块","函数","稍微","如果","节点","的话","功能","复杂","做","这样","的","一点","机器","或者","经常","过","并","编码","学习","pyhton","关闭","很","应该","对于","出现","中","理解","发现","创建","有","简单"," ","初始","销毁","一下","一个","我们","代码","过程","但是","这种","机器人","不用","接口","想要","先","用到"],"title":"创建节点流程","title_tokens":["流程","创建","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world_1","text":"所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。","text_tokens":["移植","一些","会","方式","方便","调试","开发","就","更好","使用","。","可以","具备","对象","，","也","虽然","可移植性","面向","大家","编程","推荐","更","所以","面向对象","比如","ros2","可读","改成","复杂","这样","的","和","起来","更加","看上去","移植性","在","中","看上"," ","我们","刚才","可移植","代码","上去","但是","可读性","了"],"title":"案例二：Hello World节点（面向对象）","title_tokens":["面向对象","（","hello"," ","二","面向","对象","world","：","）","案例","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_6","text":"下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["效果","“","看到","下来","运行","。","：","成功","可以","”","，","字符","打印","node","helloworld","$","还是","节点","ros2","的","learning","hello","终端","后","_","字符串","在","中","class","调整"," ","一下","循环","world","run"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_7","text":"功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ],","text_tokens":["com","结构",".","guyuehome","__","init","实现","看","'","node","面向","{","说明","spin","进行","时","知道","需要","import","的","主","加入","编写","如下","后","程序","_","是否","完成","包","变化","class","self","我们","销毁","一下","代码","points","初始化","info","库","父类","-","编译","这份","时间","。","使用","具体","from","入口","args","/","ros2","居","类","设置","日志","rclpy","[","\"","古月","配置","发生","创建","]","usr","py","初始","发布","=","0.5","功能","作者","了","点","utf","一样","方式","def",":","文件","#","destroy","：","”","退出","console","函数","选项","env",",","helloworldnode","面向对象","entry","learning","hello","shutdown","休眠","等待","none","python3","bin","让"," ","scripts","super","world","但是","setup","接口","*","信息","“","运行","，",")","对象","虽然","sleep","控制","正常","系统","logger","helloworld","main","输出","打开","节点","ok","(","get","name","python","并","关闭","while","@","!","coding","一个","8","循环","www","示例","time"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_8","text":"所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。","text_tokens":["初始化","一些","而已","方式","为止","不能","是","。","总体而言","到","具体","，","这里","实现","打印","这","得","总体","大家","不是","编程","了","编码方式","所以","只不过","吧","节点","四个","做","依然","的","机器","hello","并","编码","关闭","完成","中","只是","创建","改变","而言"," ","还有","疑惑","初始","销毁","是不是","心里","不过","一个","机器人","world","任务","功能","接口","步骤"],"title":"创建节点流程","title_tokens":["流程","创建","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_9","text":"没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。","text_tokens":["视觉","下来","就","。","为例","接下来","来","，","实现","模拟","找到","节点","没错","以","的","从","机器","实际","编写","接下","一张","网上","中"," ","任务","我们","机器人","一个","过程","通过","图片","识别","先","苹果"],"title":"案例三：物体识别节点","title_tokens":["物体","三","：","识别","案例","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_10","text":"在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。","text_tokens":["会弹","imread",".","可视","可以","例程","'","node","home","重新","需要","的","dev","如下","安装","后","_","中心","注意","我们","代码","路径","run","库","用到","-","编译","image","。","使用","成功","中心点","前","—","绿色","/","$","ros2","install","apt","绿点","被","中","图像","修改","py","=","框会","为","将","苹果","object","窗口","勾勒","#","：","中间","然后","src","jpg","表示","apple","learning","python3","出"," ","轮廓","这个","处理","图片","识别","opencv","cv2","请","看到","运行","sudo","就","hcx","，",")","21","可视化","啦","tutorials","(","实际","把","在","即可","ws","指令","一个","出来","图像处理"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_11","text":"在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ],","text_tokens":["red","w","com","hierarchy","int","imread",".","guyuehome","红色","init","例程","实现","左上角","contours","处理过程","'","阈值","关于","node","if","chain","{","说明","理过","得到","spin","进行","二值化","知道","home","需要","import","的","主","上角","dev","加入","编写","如下","后","程序","_","中心","检测","完成","包","下限","bgr2hsv","class","像素","我们","机器人","点画","销毁","通过","代码","points","初始化","info","去除","库","-","array","image","1","一些","circle","编译","bgr","destroyallwindows","。","使用","boundingrect","90","具体","from","读取","计算","x","255","太小","入口","numpy","不是","np","args","/","findcontours","128","ros2","drawcontours","居","color","类","左上","面积","hsv","设置","rclpy","[","shape","y","xy","in","\"","及","古月","配置","cvtcolor","continue","出现","中","]","创建","cnt","图像","usr","py","=","初始","为","功能","<","作者","了","苹果","mask","将","点","object","utf","模型","def",":","此处","是","勾勒","文件","#","宽","：","destroy","来","退出","重点","console","list","大家","更多","src","函数","选项","env",",","jpg","上限","apple","entry","upper","learning","shutdown","lower","180","等待","retr","none","python3","bin","让","转换"," ","scripts","轮廓","这个","处理","setup","图片","*","识别","接口","效果","opencv","cv2","waitkey","img","0","高","2","关注","for","hcx","坐标","，",")","噪声","概念","数值","对象","模拟","detect","as","21","系统","更多要","颜色","inrange","logger","打开","main","helloworld","+","节点","范围","tutorials","从","(","机器","imshow","python","h","和","get","并","关闭","显示","如何","@","在","!","ws","coding","5","一个","过程","8","approx","www","示例","150","出来","所在","图像识别","循环","图像处理"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_12","text":"用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。","text_tokens":["眼睛","还","其中","下来","不","。","用","没","接下来","类似","，","读取","物体","就让","颜色","摄像","呀","进行","节点","太","问题","好像","的","摄像头","机器","或者","动态","接下","合理","像头","应该","有","图像","机器人","我们","图片","识别","苹果"],"title":"案例四：机器视觉识别节点","title_tokens":["视觉","四","机器","：","识别","案例","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_13","text":"启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 注意：如果是在虚拟机中操作，需要进行以下设置： 把虚拟机设置为兼容USB3.1； 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。","text_tokens":["虚拟机","至","object","移动","是","运行","。","webcam","#","：","就","虚拟","成功","可以","连接","红色","，","物体","中将","驱动","可","node","摄像","；","设备","操作","啦","实时","如果","进行","$","节点","ros2","需要","设置","的","摄像头","learning","终端","并且","如下","把","像头","后","_","注意","在","中","启动"," ","一个","以下","为","该","usb3.1","识别","run","兼容"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_14","text":"相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ],","text_tokens":["red","w","com","hierarchy","int",".","guyuehome","50","红色","init","这里","左上角","contours","'","阈值","node","if","chain","{","说明","得到","进行","二值化","ret","知道","需要","import","的","主","上角","并且","加入","编写","如下","后","程序","_","中心","检测","完成","包","变化","下限","bgr2hsv","class","像素","销毁","点画","通过","代码","points","初始化","info","去除","库","-","array","image","1","一些","circle","编译","bgr","。","使用","boundingrect","90","from","读取","计算","x","255","太小","入口","numpy","np","args","/","findcontours","128","ros2","drawcontours","来源","居","类","color","面积","之前","摄像头","hsv","左上","设置","rclpy","[","shape","y","像头","in","\"","xy","videocapture","古月","及","配置","cvtcolor","continue","出现","中","]","创建","cnt","usr","修改","图像","py","=","初始","为","功能","<","作者","苹果","了","最大","mask","将","点","object","utf","模型","def",":","是","勾勒","文件","#","宽","：","一帧","destroy","来","驱动","console","list","摄像","相比","函数","选项","env",",","上限","entry","upper","learning","shutdown","lower","180","相机","retr","none","python3","cap","bin","让","转换"," ","scripts","轮廓","true","处理","setup","接口","*","图片","识别","效果","opencv","信息","cv2","img","waitkey","0","高","2","for","webcam","坐标",")","，","噪声","read","数值","对象","detect","as","系统","颜色","inrange","logger","打开","main","helloworld","+","节点","范围","ok","从","(","imshow","get","python","h","和","并","关闭","显示","while","@","!","coding","周期","5","8","approx","150","www","示例","出来","所在","图像处理"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_15","text":"节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息","text_tokens":["信息","#","：","<","常用","命令","列表","查看","list","node","操作","$","节点","ros2","的","name",">","如下","_"," ","info"],"title":"节点命令行操作","title_tokens":["命令","命令行","操作","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_16","text":"现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。","text_tokens":["会","要","另外","实现","现在","这","过来","保持","电脑","岂","没错","的","给","后","负责","应该","保持联系","一节","多种","机器人","我们","他们","参数","。","某种","得","不是","框架","如果","摄像头","很","像头","介绍","配置","运动","中","摇杆","图像","速度","之间","还会","将","了","开始","收到","常用","连接","联系","大家","a","摄像","ros","同理","细胞","机制","熟悉","这些","有","改变"," ","b","这个","下","看到","一种","就","，","概念","工作","控制","孤立","系统","最为","发送","回到","节点","比如","问题","机器","和","并","把","显示","发现","在","框架图","指令","两个","一个","方法","想要"],"title":"思考题","title_tokens":["思考","思考题","考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_17","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["-","en","html","tutorials",".","https","humble",":","ros","/","docs","org","understanding","nodes","ros2"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/","text":"话题 节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。 通信模型 以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。 发布/订阅模型 从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为发布者，接收数据的对象称之为订阅者，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。 多对多通信 大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。 异步通信 话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。 消息接口 最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过.msg后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。 案例一：Hello World话题通信 了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 运行效果 启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。 发布者代码解析 我们来看下发布者的实现方法。 程序实现 learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口 订阅者代码解析 我们再来看下订阅者的实现方法。 程序实现 learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。 案例二：机器视觉识别 在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。 运行效果 这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。 发布者代码解析 learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], }, 订阅者代码解析 learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], }, 案例三：机器视觉识别优化 通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub 话题命令行操作 话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息 思考题 关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？ 参考链接 https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["获取","msgs","com","hierarchy","同样","接收数据","更好","__","echo","传输","数据结构","复用","那","单位","感觉","实现","看","create","阈值","可移植性","但","联系方式","区分","chain","org","说明","原本","集成","bw","二值化","dds","（","格式","主","并且","能够","自己","后","已","检测","是否","完成","一般","我们","一下","通过","heard","参数","父类","-","编译","还","一些","其中","像","bgr","下来","成为","描述","就是","进一步","没","callback","定时","单向","间","入口","焕然一新","提高","/","感器","findcontours","说干就干","率","$","ros2","接口协议","左上","发送数据","apt","终端","人","？","rclpy","想","[","shape","更换","\"","subscription","么","创建","]","cnt","据传","初始","刚才","名字","发出","几乎","）","链接","苹果","mask","收到","模型","再","值","勾勒","#","常用","过瘾","来","某","来看","字符","多","list","换","函数","选项","关系","的话","复杂","receiving","hello","精简","publishernode","任何","不太","都","这些","随处","文章","cv","true","这个","super","不过","setup","i","原理","cv2","高","一种","docs","设计","webcam","为例","坐标","，",")","互相","系统","根本","可视化","订阅","发送","消息","inrange","叫做","无论","输出","监控","优先级","0.1","考题","通信","太","当然","问题","tutorials","不然","从","说","get","publisher","和","把","视频","字符串","如何","在","即可","存在","一份","是不是","一个","5","讲","示例","html","图像处理","组织","成","排版",".","要","感兴","开发","所有","红色","sub","video","左上角","标准","感兴趣","现在","'","只要","关于","多个","此时","从而","进行","后缀","命令行","没错","好像","上角","特性","思想","换成","各种","应该","中心","注意","转化","你","像素","self","听说","机器人","销毁","点画","run","en","视觉","发布者","时候","打","不能","采集","10","优化","string","查看","接下来","控制指令","自行","直接","列表","同学","计算","随处可见","重要","args","在生活中","实时","挺","千丝万缕","分析","很多","居","install","面积","需求","及","内","xy","被","配置","放入","案例","运动","raw","videocapture","一步","异步","还有","该","点","几个","通信模型","开始","定时器","def","不",":","msg","destroy","：","宽","每","频率","console","传感","不行","不变","个","一","上","想象","cam","耦","entry","以","称之为","learning","定义","180","无关","思考","相机","none","中是","有","让","转换","scripts","小编","来讲","轮廓","但是","这种","下","举","信息","“","0","2","谁","运行","hz","报社","逻辑","对象","噪声","积木","颜色","呀","type","helloworld","基本原理","阅读","渲染","解","似乎","建议","(","中文","关闭","、","必然","frame","@","不知","基本","固定","sensor","可移植","过程","以下","焕然","出来","red","数据","结构","会","秒","可见","understanding","到","未来","例程","者","想下","contours","这","流程","千丝","本身","node","if","带宽","得到","一新","ret","imagepublisher","某些","import","的","知识","publish","最","编写","程序","imagesubscriber","里","听","对于","之后","对应","下限","bgr2hsv","传递","肯定","公众","bridge","第一","points","等等","初始化","数据传输","usb","传递数据","array","适合","。","某种","boundingrect","方法","类似","from","也","满足","物体","data","哪里","太小","号","总结","没有","np","留","操作","符合","如果","还是","数量","drawcontours","类","这样","设置","之前","完全","hsv","！","出去","y","in","古月","要求","cvtcolor","continue","topic","usr","\\","一行","py","=","与","0.5","功能","逻辑性","之间","移植","已经","object","用于","叫","数据类型","一样","拼接","所谓","参考","模块化","又","命令","联系","退出","做到","s","对","驱动","自然","a","ros","唯一","更","编程语言","env","做","一篇","平时","名称","好","较强","合适","等待","retr","python3","cap","兴趣","启动"," ","b","稍后","处理","接口","*","识别","先","一句","讲解","for","就","每换","一次","角度","化成","包含","长宽","read","as","timer","编程","只","啦","模块","队列","+","可能","节点","listener","topics","组成","分别","std","cvbridge","imshow","机器","报纸","语言","python","目标","各样","另","!","指令","两个","周期","8","approx","150","所在","w","int","对劲","guyuehome","可视","另外","可以","init","这里","进入","作为","无法","接收","保持","名","二","程序实现","imgmsg","{","桥梁","spin","以上","软件","知道","需要","呢","它","给","用户","加入","如下","安装","exe","_","理解","包","继续","二个","第二个","画面","class","变化","pub","rgb","第二","代码","subscribernode","info","去除","库","块","image","1","circle","使用","3","用","成功","90","}","读取","x","255","numpy","什么样","写","得","保证","不是","三","https","提示","接口定义","128","color","基于","类型","日志",">","中","摇杆","之为","图像","每个","硬件","修改","回调","发布","为","<","独立","将","拍摄","了","作者","思考题","utf","方式","执行","是","文件","做成","仔细","一帧","”","英文","传感器","统一","大家","本原",",","上限","东西","解析","万缕","第一次","才能","upper","例子","什么","shutdown","比方","lower","指","接下","长度","publishing","了解","bin","to","第一个","world","是从","通用","效果","bgr8","opencv","waitkey","协议","img","看到","humble","sudo","生活","因为","概念","虽然","控制","数值","detect","微信","魔性","话题","logger","优先","设备","打开","main","转换成","既然","范围","比如","填充","%","最后","name","h","就要","并","转化成","方向","词","各种各样","显示","移植性","周期性","杂志","chatter","coding","循环","www","一定","他会","想要","并不知道"],"title":"**话题**","title_tokens":["*","话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_1","text":"节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。","text_tokens":["传递数据","数据","其中","会","方式","一种","是","。","就是","联系","，","实现","间","千丝","但","不是","话题","重要","联系方式","桥梁","节点","千丝万缕","的","万缕","它","机器","最","并","各种","各种各样","这些","各样","有","传递"," ","机器人","功能","之间","独立","了"],"title":"话题","title_tokens":["话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_2","text":"以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。","text_tokens":["获取","数据","要","传输","可视","可以","到","实现","作为","这","此时","得到","桥梁","没错","的","给","它","用户","传递","机器人","我们","一下","数据传输","。","某种","查看","不是","实时","这样","？","想","中","之为","图像","硬件","据传","功能","之间","将","了","拍摄","方式","是","某","驱动","a","大家","ros","关系","上","做","以","称之为","才能","相机","有"," ","b","这个","信息","就","为例","，","话题","可视化","设备","监控","渲染","节点","从","机器","方向","视频","显示","必然","在","两个","存在","是不是","一个"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_3","text":"从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为发布者，接收数据的对象称之为订阅者，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。","text_tokens":["组织","成","数据","排版","会","接收数据","可见","感兴","传输","另外","可以","到","实现","者","看","感兴趣","无法","接收","本身","dds","需要","呢","的","它","知识","格式","特性","应该","之后","公众","机器人","等等","数据传输","发布者","打","成为","。","使用","就是","类似","也","随处可见","号","没有","/","在生活中","如果","居","这样","发送数据","基于","类型","出去","？","古月","要求","之为","据传","发布","名字","了","收到","模型","叫","数据类型","是","”","每","来看","对","自然","大家","的话","称之为","什么","平时","比方","名称","好","都","随处","文章","有","兴趣"," ","小编","这个","是从","“","就","生活","角度","，","对象","微信","话题","订阅","发送","叫做","节点","比如","从","机器","报纸","和","把","、","固定","杂志","一个","他会"],"title":"发布/订阅模型","title_tokens":["模型","/","订阅","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_4","text":"大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。","text_tokens":["要","可以","者","想下","多个","区分","知道","没错","的","里","听","注意","画面","公众","我们","机器人","一下","1","发布者","。","3","控制指令","也","号","不是","如果","还是","挺","数量","很多","人","被","摇杆","之为","每个","发布","该","了","通信模型","再","模型","一样","不","是","仔细","对","多","大家","ros","唯一","个","想象","东西","称之为","这些","有"," ","这个","2","谁","，","因为","控制","魔性","话题","订阅","发送","优先","优先级","似乎","可能","节点","通信","不然","建议","报纸","机器","和","并","、","杂志","指令","存在","是不是","一个"],"title":"多对多通信","title_tokens":["多","对","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_5","text":"话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。","text_tokens":["数据","传输","可以","那","者","这","只要","知道","某些","的","特性","后","你","公众","听说","第一","等等","参数","发布者","一些","时候","适合","。","就是","用","类似","也","同学","号","感器","如果","居","？","古月","运动","异步","还有","修改","发布","发出","逻辑性","了","收到","用于","不","是","所谓","传感器","某","传感","更","第一次","一篇","什么","指","较强","合适","文章","有","让"," ","这个","就","一次","报社","逻辑","，","控制","根本","话题","订阅","叫做","阅读","可能","通信","比如","太","报纸","词","不知","指令","一份","周期","一个","并不知道"],"title":"异步通信","title_tokens":["异步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_6","text":"最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过.msg后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。","text_tokens":["成","数据","结构","会",".","传输","数据结构","可以","这里","者","标准","进行","后缀","的","格式","各种","对应","理解","像素","rgb","我们","机器人","通过","等等","数据传输","块","发布者","像","不能","描述","。","自行","也","得","接口定义","这样","中","之为","图像","每个","据传","发布","与","了","值","一样","方式","是","文件","拼接","msg","英文","统一","ros","编程语言","复杂","称之为","定义","无关","都","有"," ","接口","一种","就","，","包含","概念","长宽","积木","系统","话题","订阅","消息","编程","既然","节点","通信","比如","组成","最后","说","语言","机器","和","中文","、","各种各样","在","各样","一个"],"title":"消息接口","title_tokens":["消息","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#hello-world","text":"了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。","text_tokens":["原理","发布者","开始","“","再","下来","是","。","string","”","接下来","例程","来","，","到","字符","者","标准","接收","话题","本原","ros","发送","消息","订阅","基本原理","啦","从而","还是","的","从","hello","类型","就要","定义","编写","接下","字符串","中","基本","了解","创建"," ","chatter","我们","发布","一个","周期","这个","代码","world","了"],"title":"案例一：Hello World话题通信","title_tokens":["hello"," ","话题","world","：","案例","一","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_7","text":"启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。","text_tokens":["数据","发布者","“","收到","看到","同样","运行","。","：","可以","”","，","也","sub","者","字符","频率","话题","订阅","消息","helloworld","$","节点","ros2","的","以","learning","hello","终端","_","字符串","二个","第二个","启动","topic"," ","pub","第二","发布","第一","一个","第一个","循环","world","该","几乎","run"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_8","text":"我们来看下发布者的实现方法。","text_tokens":["来看","实现","发布者","的","我们","发布","。","方法","下"],"title":"发布者代码解析","title_tokens":["代码","发布者","解析","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_9","text":"learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], },","text_tokens":["msgs","com","数据",".","guyuehome","秒","__","init","单位","create","'","node","名","{","说明","spin","进行","知道","（","需要","import","的","publish","主","加入","编写","如下","后","程序","_","完成","包","class","self","pub","销毁","代码","points","初始化","info","库","父类","-","编译","发布者","10","string","}","from","callback","定时","data","入口","args","/","提示","ros2","居","类","设置","日志","类型","rclpy","[","\"","古月","配置","中","创建","]","topic","usr","回调","=","初始","py","发布","为","0.5","功能","）","作者","点","已经","utf","定时器","def",":","执行","文件","msg","#","destroy","：","”","退出","字符","s","console","函数","选项","env",",","entry","learning","hello","shutdown","publishernode","等待","none","长度","python3","publishing","bin","让"," ","scripts","super","world","setup","接口","*","信息","“",")","对象","，","系统","话题","timer","logger","消息","helloworld","main","输出","队列","打开","节点","填充","%","std","(","get","name","python","publisher","并","关闭","、","字符串","@","!","chatter","coding","周期","8","一个","循环","www","示例"],"title":"程序实现","title_tokens":["实现","程序实现","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_10","text":"对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口","text_tokens":["初始化","发布者","：","，","对象","实现","对","流程","话题","编程","消息","以上","如果","进行","节点","分析","填充","并","如下","关闭","程序","创建"," ","我们","发布","一个","初始","销毁","接口","想要"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_11","text":"我们再来看下订阅者的实现方法。","text_tokens":["来看","者","实现","再","的","我们","订阅","。","方法","下"],"title":"订阅者代码解析","title_tokens":["者","代码","解析","订阅"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_12","text":"learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], },","text_tokens":["msgs","com","数据",".","guyuehome","__","init","sub","者","标准","create","'","node","名","{","说明","spin","进行","知道","（","需要","import","的","主","加入","编写","如下","后","程序","_","完成","包","class","self","pub","销毁","代码","points","heard","subscribernode","初始化","info","库","父类","-","编译","10","string","}","from","callback","data","入口","args","/","提示","ros2","居","类","设置","日志","类型","rclpy","[","\"","古月","subscription","配置","创建","]","topic","\\","usr","回调","=","py","初始","功能","）","作者","点","收到","utf","def",":","执行","文件","msg","#","destroy","：","”","退出","s","对","console","函数","选项","env",",","entry","learning","hello","shutdown","定义","等待","none","长度","python3","bin","让"," ","scripts","super","world","处理","setup","接口","*","i","信息","“",")","对象","，","系统","话题","logger","订阅","消息","helloworld","main","输出","队列","打开","listener","节点","%","std","(","get","name","python","并","关闭","、","@","!","chatter","coding","8","一个","循环","www","示例"],"title":"程序实现","title_tokens":["实现","程序实现","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_13","text":"对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。","text_tokens":["初始化","数据","还","视觉","下来","不","。","：","优化","过瘾","接下来","例程","，","对象","实现","对","者","流程","话题","大家","订阅","编程","啦","函数","以上","如果","进行","节点","通信","分析","的","之前","hello","机器","基于","并","如下","关闭","好","程序","接下","继续","创建"," ","回调","我们","初始","一个","销毁","world","处理","一定","接口","想要","下"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_14","text":"在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。","text_tokens":["数据","视觉","方式","讲解","是","开发","。","更好","做成","传输","就是","模块化","没","红色","做到","，","联系","物体","概念","实现","驱动","对","虽然","间","话题","没有","模块","节点","问题","的","机器","并且","和","并","程序","相机","对于","在","中","即可","图像","来讲","我们","机器人","一个","过程","通过","两个","这个","但是","周期","功能","识别","将","了"],"title":"案例二：机器视觉识别","title_tokens":["视觉","机器","二","：","识别","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_15","text":"这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。","text_tokens":["要","更好","可以","未来","红色","sub","实现","标准","保持","可移植性","软件","需要","的","思想","_","二个","第二个","pub","第二","我们","第一","run","视觉","。","物体","保证","说干就干","如果","$","ros2","完全","终端","？","内","更换","放入","topic","图像","修改","发布","功能","将","了","移植","是","模块化","来看","驱动","不变","ros","learning","定义","好","相机","中是","启动"," ","第一个","这个","这种","识别","先","下","效果","看到","就","运行","设计","webcam","，","话题","订阅","消息","只","模块","啦","节点","范围","分别","并","移植性","如何","在","另","即可","两个","一个","可移植","以下"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_16","text":"learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], },","text_tokens":["msgs","com",".","guyuehome","秒","__","init","单位","sub","video","create","'","node","名","imgmsg","if","{","说明","spin","进行","ret","imagepublisher","知道","（","需要","import","的","publish","主","加入","编写","如下","换成","后","程序","_","完成","包","class","self","pub","销毁","bridge","代码","points","初始化","info","库","父类","-","image","编译","发布者","采集","10","成功","}","from","callback","定时","读取","入口","号","args","/","提示","如果","ros2","居","类","设置","日志","类型","rclpy","[","\"","古月","videocapture","配置","raw","创建","]","topic","usr","图像","回调","py","初始","发布","=","与","为","功能","）","作者","将","点","已经","用于","utf","定时器","def",":","执行","文件","msg","#","destroy","一帧","：","退出","驱动","console","ros","函数","选项","env",",","entry","learning","shutdown","等待","相机","none","长度","python3","cap","publishing","cv","bin","让","转换"," ","scripts","to","稍后","true","super","处理","setup","接口","*","bgr8","opencv","cv2","信息","0","webcam",")","对象","，","read","系统","话题","timer","logger","消息","设备","打开","转换成","输出","队列","0.1","main","helloworld","节点","cvbridge","(","get","name","python","publisher","并","关闭","、","视频","frame","@","!","coding","sensor","周期","8","一个","循环","www","示例","图像处理"],"title":"发布者代码解析","title_tokens":["代码","发布者","解析","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_17","text":"learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], },","text_tokens":["red","msgs","com","w","hierarchy","int",".","guyuehome","__","红色","init","进入","sub","者","左上角","video","create","contours","'","阈值","node","名","imgmsg","if","chain","{","说明","得到","spin","进行","二值化","知道","（","需要","import","的","主","上角","加入","编写","如下","后","imagesubscriber","程序","_","中心","已","检测","转化","完成","包","下限","bgr2hsv","class","像素","self","pub","销毁","bridge","点画","代码","points","初始化","info","去除","库","父类","-","image","array","1","一些","circle","编译","bgr","使用","10","boundingrect","90","}","from","callback","data","计算","x","255","太小","入口","numpy","np","args","/","findcontours","提示","128","ros2","drawcontours","居","color","类","左上","面积","hsv","设置","日志","类型","rclpy","[","shape","y","xy","in","\"","及","古月","subscription","配置","raw","cvtcolor","continue","中","]","创建","topic","usr","图像","cnt","回调","py","=","初始","与","为","功能","<","）","作者","苹果","将","mask","点","object","用于","utf","模型","def",":","勾勒","文件","msg","#","宽","destroy","：","退出","console","list","ros","函数","选项","env",",","上限","receiving","entry","upper","learning","shutdown","lower","180","等待","retr","none","长度","python3","cv","bin","让","转换"," ","scripts","轮廓","to","super","处理","setup","接口","*","效果","bgr8","opencv","cv2","waitkey","img","信息","0","高","2","for","webcam","化成","坐标",")","对象","，","噪声","数值","detect","互相","as","系统","话题","颜色","订阅","消息","inrange","logger","打开","main","输出","队列","+","helloworld","listener","节点","范围","从","cvbridge","(","imshow","name","python","h","和","get","并","转化成","关闭","、","显示","frame","@","!","coding","sensor","5","8","一个","approx","150","www","示例","出来","循环","所在","图像处理"],"title":"订阅者代码解析","title_tokens":["者","代码","解析","订阅"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_18","text":"通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub","text_tokens":["对劲","可以","到","复用","例程","感觉","sub","标准","现在","这","只要","node","集成","原本","得到","一新","软件","好像","需要","的","换成","安装","自己","exe","_","变化","你","一般","我们","通过","代码","run","usb","-","视觉","。","使用","用","进一步","直接","也","哪里","什么样","写","焕然一新","得","不是","提高","率","符合","$","ros2","接口协议","install","这样","！","apt","？","一步","中","么","一行","图像","topic","还有","刚才","发布","功能","了","不","是","常用","又","对","驱动","不行","大家","ros","换","cam","耦","做","learning","什么","精简","任何","不太","好","相机","都","有","让"," ","不过","接口","识别","一句","通用","协议","humble","就","每换","sudo","webcam","，","话题","呀","只","无论","解","似乎","可能","节点","当然","目标","指令","一个","焕然","是不是"],"title":"案例三：机器视觉识别优化","title_tokens":["视觉","机器","三","：","优化","识别","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_19","text":"话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息","text_tokens":["数据","信息","echo","msg","#","：","<","hz","常用","命令","传输","列表","查看","频率","data","list","话题","消息","type","带宽","操作","bw","$","ros2","的","name",">","如下","_","topic"," ","pub","发布","info"],"title":"话题命令行操作","title_tokens":["命令","命令行","话题","操作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_20","text":"关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？","text_tokens":["思考题","举","数据","原理","几个","适合","是","就","传输","：","所有","到","，","这里","单向","实现","满足","无法","关于","系统","话题","大家","留","考题","通信","复杂","呢","的","给","需求","机器","例子","和","特性","？","能够","思考","对于","是否","完成","周期性","传递","肯定","来讲","我们","周期","一个","机器人","据传","讲","这种","方法","数据传输"],"title":"思考题","title_tokens":["思考","思考题","考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_21","text":"https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["topics","en","-","html","tutorials",".","https","humble",":","ros","/","docs","org","understanding","ros2"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/","text":"服务 话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。 通信模型 在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。 客户端/服务器模型 从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。 同步通信 这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。 一对多通信 比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。 服务接口 和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。 案例一：加法求解器 大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 运行效果 我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3 客户端代码解析 我们来看下客户端的实现方法。 程序实现 learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口 服务端代码解析 至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。 程序实现 learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_server = learning_service.service_adder_server:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口 案例二：机器视觉识别 好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。 运行效果 此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client 客户端代码解析 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], }, 服务端代码解析 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], }, 服务命令行操作 服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求 思考题 话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["获取","msgs","com","hierarchy","一问一答","同样","__","传输","实现","查询","官方","看","create","阈值","但","求和","chain","org","说明","集成","大部","岂","二值化","（","主","并且","后","是否","检测","已","完成","一般","我们","同步性","通过","服务器端","用到","父类","-","编译","一些","其中","bgr","下来","成为","就是","callback","单向","随时","入口","/","findcontours","感器","$","ros2","应用","左上","return","客户端","终端","人","rclpy","很","[","shape","合理","\"","subscription","出现","圈圈","创建","]","cnt","初始","刚才","按照","e","）","链接","苹果","mask","那有","收到","模型","拿到","勾勒","#","常用","来看","多","服务","list","简称","提到","不好","相比","server","函数","选项","雷达","receiving","后续","都","这些","cv","else","once","true","形式","这个","答","super","不过","setup","原理","跟踪","cv2","高","waiting","一种","docs","设计","自定义","坐标","，",")","互相","一直","系统","最为","根据","订阅","消息","发送","inrange","叫做","输出","考题","本","务器","提供","通信","tutorials","从","get","和","not","有所","部分","在","绝大","存在","5","一个","讲","示例","求解","html","图像处理","成",".","要","50","开发","红色","position","sub","video","左上角","标准","打印","现在","'","并不需要","多个","objecty","此时","进行","命令行","好像","上角","有点","各种","应该","中心","转化","你","像素","self","机器人","销毁","点画","run","应答","en","视觉","发布者","界面","时候","10","接下来","查看","列表","两种","控制指令","希望","计算","args","位置","在生活中","分析","至于","很多","居","宕机","面积","软硬件","需求","转圈","经常","及","xy","介绍","timeout","更加","配置","案例","运动","raw","准确","异步","还有","call","future","点","通信模型","开始","而是","def","不",":","msg","destroy","：","宽","每","频率","console","传感","available","一","上","cam","服务端","entry","称之为","learning","定义","展现","180","发","机制","思考","相机","服务器发送","none","三个","service","有","让","转换","scripts","轮廓","回想","同步","但是","这种","传入","处","下","sys","判断","信息","封装","加法器","“","当","2","0","运行","对象","噪声","sum","绝大部分","1.0","颜色","type","async","exception","一起","准备","adderclient","(","放到","关闭","、","状态","frame","@","简单","基本","不知","services","sensor","接口类","过程","adder","服务器","出来","result","red","数据","会","understanding","到","例程","者","contours","流程","大部分","node","if","软硬","得到","里程","页面","...","某些","import","的","打印输出","编写","程序","imagesubscriber","之后","某个","网页","一对","下限","bgr2hsv","传递","加数","针对","bridge","第一","points","等等","初始化","break","usb","我","传递数据","array","适合","。","boundingrect","具体","类似","from","也","满足","物体","data","上层","太小","总结","没有","np","wait","incoming","操作","d","如果","还是","send","drawcontours","invalid","类","这样","设置","之前","完全","hsv","出去","里程计","y","反馈","in","古月","要求","cvtcolor","continue","usr","\\","py","=","附近","与","功能","之间","two","数据通","addtwoints","r","已经","object","用于","add","一样","返回","数据类型","参考","命令","退出","对","驱动","a","ros","唯一","更","env","跟随","反应","核心","等待","好","retr","python3","半天","client","启动"," ","b","后者","处理","接口","识别","*","客户","访问","for","接口类型","就","adderserver","一次","化成","cs","越快","正常","as","发给","编程","interface","所以","啦","+","n","队列","等","可能","节点","listener","ok","分别","有所不同","cvbridge","imshow","机器","python","学习","目标","请求","!","指令","两个","周期","8","转圈圈","approx","150","try","所在","w","int","of","guyuehome","当前","另外","可以","done","init","ints","进入","无法","接收","上述","名","二","电脑","程序实现","{","imgmsg","spin","failed","以上","时","知道","需要","给","或者","这么","加入","如下","exe","越好","比比皆是","_","浏览","通信接口","包","继续","二个","第二个","法器","class","第二","代码","request","info","去除","数据通信","库","image","1","circle","时间","不同","使用","3","成功","90","}","—","x","255","numpy","结果","https","不是","提示","域名","课程","128","objectclient","color","日志","类型",">","最新","中","之为","图像","硬件","回调","发布","为","尽快","<","command","将","了","作者","思考题","utf","方式","执行","是","文件","”","越快越好","传感器","argv","然后","大家","变成","网站",",","上限","解析","upper","假设","问","shutdown","什么","lower","繁杂","接下","长度","了解","bin","to","场景","第一个","except","target","向","效果","通用","加法","opencv","waitkey","器","自定","img","bgr8","看到","humble","浏览器","生活","前者","数值","控制","常见","detect","话题","logger","相对","；","打开","main","范围","比如","%","srv","name","h","就要","并","转化成","网络","比比","response","sec","while","显示","周期性","getobjectposition","coding","again","objectx","认为","循环","www","方法","图像识别","想要","并不知道"],"title":"**服务**","title_tokens":["服务","*"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_1","text":"话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。","text_tokens":["我","效果","数据","发布者","收到","一种","。","使用","传输","另外","可以","常用","类似","，","单向","实现","者","—","无法","服务","话题","多个","ros","订阅","消息","本","一起","节点","通信","知道","的","问","学习","机制","是否","你","准确","异步"," ","我们","发布","讲","答","同步","这种","方法","之间","将"],"title":"服务","title_tokens":["服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_2","text":"在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。","text_tokens":["数据","传输","另外","可以","红色","到","实现","查询","并不需要","此时","得到","好像","需要","的","或者","这么","继续","你","我们","机器人","通过","应答","我","其中","时候","不同","成为","。","使用","单向","物体","希望","上层","位置","课程","应用","这样","之前","最新","反馈","运动","中","图像","发布","附近","按照","尽快","了","通信模型","模型","而是","一样","是","频率","对","驱动","服务","然后","ros","变成","更","跟随","问","发","机制","相机","service"," ","形式","这个","答","这种","识别","信息","高","，","一直","话题","发给","订阅","发送","节点","比如","通信","有所不同","机器","和","并","有所","目标","请求","在","周期","一个","图像识别"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_3","text":"从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。","text_tokens":["我","客户","应答","数据","信息","收到","模型","时候","会","返回","浏览器","就","。","生活","就是","具体","，","也","来看","实现","cs","常见","服务","简称","电脑","发送","/","叫做","此时","域名","操作","在生活中","网站","进行","务器","通信","上","比如","页面","某些","需要","从","的","或者","客户端","问","经常","并","展现","很","机制","反馈","各种","浏览","服务器发送","之后","请求","在","某个","你","网页"," ","针对","我们","形式","服务器端","答","通过","服务器","这种","为","处理","向"],"title":"客户端/服务器模型","title_tokens":["客户","模型","服务","客户端","/","服务器","务器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_4","text":"这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。","text_tokens":["应答","客户","判断","那有","信息","是","浏览器","。","可以","到","越快越好","，","也","越快","接收","服务","一直","话题","没有","不好","相比","所以","务器","可能","通信","的","宕机","反应","称之为","假设","转圈","或者","客户端","越好","网络","浏览","状态","要求","半天","在","你","圈圈","中","之为","一般","我们","过程","这个","转圈圈","通过","服务器","服务器端","同步","了"],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_5","text":"比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。","text_tokens":["客户","通信模型","界面","模型","一样","看到","访问","不","同样","是","。","可以","每","，","服务","但","大家","没有","多个","唯一","所以","网站","务器","比如","通信","居","的","完全","客户端","人","并","古月","都","中","存在","一个","这个","服务器端","服务器","但是"],"title":"一对多通信","title_tokens":["多","一对","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_6","text":"和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。","text_tokens":["传递数据","数据","苹果","会",".","一样","要","是","文件","。","使用","msg","命令","坐标","类似","，","也","标准","服务","话题","大家","ros","消息","变成","位置","还是","通信","比如","的","后续","srv","给","和","定义","核心","介绍","反馈","部分","这些","请求","在","中","传递","还有"," ","两个","我们","一个","方法","了"],"title":"服务接口","title_tokens":["服务","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_7","text":"大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。","text_tokens":["成","数据","可以","例程","ints","官方","实现","现在","求和","得到","进行","时","需要","的","给","编写","后","应该","_","之后","加数","针对","我们","通过","代码","服务器端","应答","下来","。","接下来","也","计算","结果","还是","客户端","出去","反馈","功能","two","将","了","开始","收到","add","是","”","对","服务","大家","ros","接下","有","了解"," ","这个","客户","加法","封装","器","“","当","就","，","相对","发送","啦","提供","节点","通信","务器","从","就要","并","请求","简单","基本","两个","一个","服务器","求解","想要"],"title":"案例一：加法求解器","title_tokens":["加法","器","：","求解","案例","一"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_8","text":"我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3","text_tokens":["客户","数据","原理","2","是","。","运行","3","例程","，","实现","看","服务","结果","求和","发送","操作","server","一起","$","提供","节点","ros2","服务端","的","learning","客户端","终端","并且","并","如下","等待","_","请求","service","client","二个","第二个","启动","加数"," ","两个","我们","第二","第一","一个","这个","代码","第一个","adder","传入","功能","run","下"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_9","text":"我们来看下客户端的实现方法。","text_tokens":["来看","客户","实现","的","客户端","我们","。","方法","下"],"title":"客户端代码解析","title_tokens":["客户","代码","客户端","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_10","text":"learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], },","text_tokens":["com","数据","int","of",".","guyuehome","__","done","init","ints","create","打印","接收","'","node","名","if","{","说明","spin","failed","进行","知道","（","...","需要","import","的","打印输出","加入","编写","如下","后","程序","_","是否","完成","包","法器","class","加数","self","销毁","服务器端","request","代码","points","初始化","info","break","库","父类","-","编译","1","成功","}","from","计算","入口","args","/","wait","d","ros2","send","居","类","设置","客户端","类型","rclpy","[","timeout","反馈","\"","古月","配置","创建","]","usr","call","异步","=","py","初始","future","e","功能","）","two","作者","将","addtwoints","点","r","收到","utf","add","def","方式",":","执行","文件","#","destroy","：","argv","console","服务","a","available","函数","选项","env",",","entry","learning","shutdown","定义","等待","none","python3","service","client","启动","bin","else","让"," ","scripts","b","once","except","super","处理","setup","接口","*","sys","客户","加法","加法器","信息","自定","waiting","2","for","接口类型","运行","一次","自定义",")","，","对象","正常","as","系统","sum","1.0","logger","发送","interface","打开","async","main","exception","输出","+","务器","节点","%","ok","adderclient","(","srv","name","python","get","并","not","关闭","response","sec","while","@","请求","!","coding","两个","接口类","8","again","循环","一个","adder","www","示例","服务器","try","result"],"title":"程序实现","title_tokens":["实现","程序实现","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_11","text":"对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口","text_tokens":["应答","客户","初始化","数据","：","，","对象","实现","对","流程","服务","编程","发送","以上","如果","进行","务器","节点","分析","客户端","并","如下","关闭","等待","程序","请求","创建"," ","我们","初始","一个","销毁","服务器端","服务器","接口","想要"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_12","text":"至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。","text_tokens":["数据","时间","。","类似","，","也","实现","者","服务","话题","订阅","了","函数","务器","通信","至于","知道","的","什么","有点","机制","请求","出现","中","不知","回调","服务器端","服务器","并不知道","用到"],"title":"服务端代码解析","title_tokens":["服务","服务端","代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_13","text":"learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_server = learning_service.service_adder_server:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], },","text_tokens":["com","数据",".","guyuehome","__","init","ints","create","'","node","求和","名","{","说明","spin","进行","知道","（","需要","import","的","主","加入","编写","如下","后","程序","_","完成","包","法器","class","self","销毁","request","代码","points","初始化","info","库","父类","-","应答","编译","}","from","callback","计算","入口","结果","args","/","incoming","提示","d","ros2","居","类","设置","return","日志","类型","rclpy","[","反馈","\"","古月","配置","中","创建","]","usr","\\","回调","py","初始","=","功能","）","two","作者","将","addtwoints","点","已经","收到","utf","add","def",":","执行","文件","#","destroy","：","退出","对","console","服务","a","server","函数","选项","env",",","entry","learning","shutdown","定义","等待","none","python3","service","bin","让"," ","scripts","b","super","处理","setup","接口","*","加法","加法器","信息","自定","接口类型","adderserver","自定义",")","对象","，","系统","sum","logger","interface","打开","n","输出","+","main","提供","务器","节点","%","(","srv","name","python","get","并","放到","关闭","、","response","@","请求","!","coding","接口类","8","循环","adder","www","示例","服务器"],"title":"程序实现","title_tokens":["实现","程序实现","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_14","text":"对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口","text_tokens":["应答","初始化","客户","：","，","对象","实现","对","流程","服务","结果","编程","函数","以上","如果","进行","务器","节点","分析","服务端","客户端","并","如下","关闭","程序","反馈","创建"," ","回调","我们","初始","一个","销毁","服务器端","通过","服务器","接口","想要","处","向"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_15","text":"好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。","text_tokens":["加法","已经","视觉","器","当","时候","。","，","物体","实现","流程","服务","不是","提到","了","啦","位置","岂","通信","知道","需要","的","好","机制","更加","合理","目标","回想","刚才","我们","通过","求解","识别","下"],"title":"案例二：机器视觉识别","title_tokens":["视觉","机器","二","：","识别","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_16","text":"此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client","text_tokens":["客户","数据","视觉","跟踪","object","拿到","会","当","当前","是","就","。","一次","运行","：","可以","，","对象","随时","驱动","服务","然后","上述","node","根据","；","订阅","发送","此时","集成","位置","server","时","$","务器","节点","准备","提供","ros2","cam","需要","分别","的","机器","learning","客户端","终端","并且","exe","_","相机","三个","目标","运动","请求","出现","service","client","有","启动","图像"," ","我们","发布","一个","认为","服务器端","机器人","服务器","识别","run","usb","了"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_17","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], },","text_tokens":["com","of",".","guyuehome","__","done","init","position","create","'","node","if","{","说明","spin","failed","进行","知道","...","需要","import","的","加入","编写","如下","后","程序","_","完成","包","class","self","销毁","request","代码","points","初始化","info","break","库","应答","-","父类","编译","}","from","x","入口","args","/","wait","位置","d","ros2","send","objectclient","居","类","设置","rclpy","[","y","timeout","\"","古月","配置","创建","]","usr","call","\\","py","初始","=","future","e","功能","作者","点","r","object","utf","def",":","文件","#","destroy","：","console","服务","available","选项","server","env",",","entry","learning","shutdown","定义","等待","none","python3","service","client","bin","else","让"," ","scripts","once","true","except","target","super","setup","接口","识别","*","自定","waiting","for","自定义",")","，","对象","as","系统","1.0","logger","interface","打开","async","main","exception","n","节点","%","ok","(","srv","name","python","get","并","not","关闭","response","sec","while","目标","@","请求","!","getobjectposition","coding","again","8","www","示例","adder","try","result"],"title":"客户端代码解析","title_tokens":["客户","代码","客户端","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_18","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], },","text_tokens":["red","msgs","com","w","hierarchy","int","数据",".","guyuehome","50","__","红色","init","position","进入","sub","者","左上角","video","create","contours","'","阈值","node","名","imgmsg","if","objecty","chain","{","说明","得到","spin","进行","二值化","知道","（","需要","import","的","主","上角","加入","编写","如下","后","imagesubscriber","程序","_","中心","已","检测","转化","完成","包","下限","bgr2hsv","class","像素","self","销毁","bridge","点画","request","代码","points","初始化","info","去除","库","父类","-","image","array","1","一些","circle","编译","bgr","使用","10","boundingrect","90","}","from","callback","物体","data","计算","x","255","太小","入口","numpy","np","args","/","findcontours","提示","d","128","ros2","drawcontours","invalid","居","color","类","左上","面积","hsv","return","设置","日志","类型","rclpy","[","shape","y","xy","in","\"","及","古月","subscription","反馈","配置","raw","cvtcolor","continue","中","]","创建","cnt","usr","图像","\\","回调","py","=","初始","与","为","功能","<","）","command","作者","苹果","将","mask","点","已经","object","用于","utf","模型","收到","def",":","勾勒","执行","文件","msg","#","宽","destroy","：","退出","对","console","list","服务","ros","server","函数","选项","env",",","上限","receiving","entry","upper","learning","shutdown","lower","定义","180","等待","retr","none","长度","python3","service","client","cv","bin","else","转换"," ","让","轮廓","to","scripts","true","target","super","处理","setup","接口","识别","*","5","效果","bgr8","opencv","cv2","自定","img","waitkey","0","高","2","信息","for","接口类型","自定义","化成","坐标",")","对象","，","噪声","数值","detect","互相","as","系统","话题","颜色","订阅","消息","inrange","interface","logger","打开","n","输出","队列","+","main","提供","节点","listener","务器","范围","%","从","cvbridge","(","srv","name","python","get","h","和","imshow","并","转化成","关闭","、","response","显示","frame","目标","@","请求","!","getobjectposition","coding","sensor","接口类","8","一个","objectx","approx","www","示例","服务器","150","所在","出来","循环","图像处理","adder"],"title":"服务端代码解析","title_tokens":["服务","服务端","代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_19","text":"服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求","text_tokens":["数据","数据类型","#","：","常用","命令","列表","查看","data","list","服务","发送","type","操作","$","ros2","的","name",">","类型","如下","_","请求","service","call"," ","<"],"title":"服务命令行操作","title_tokens":["命令","服务","命令行","操作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_20","text":"话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。","text_tokens":["获取","数据","一问一答","开发","传输","到","标准","无法","大部分","大部","软硬","里程","的","比比皆是","通信接口","针对","机器人","同步性","我们","等等","数据通信","视觉","时候","适合","。","类似","两种","控制指令","单向","也","满足","感器","位置","应用","很多","软硬件","需求","类型","里程计","要求","中","图像","硬件","了","数据通","数据类型","是","常用","传感器","传感","服务","ros","更","雷达","繁杂","定义","都","这些"," ","场景","后者","同步","不过","这个","接口","识别","通用","自定","高","设计","自定义","前者","，","控制","最为","话题","绝大部分","等","通信","比如","机器","和","就要","、","比比","部分","目标","周期性","在","绝大","指令","周期","过程","方法"],"title":"思考题","title_tokens":["思考","思考题","考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_21","text":"https://docs.ros.org/en/ humble /Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["-","en","html","tutorials",".","https"," ","humble",":","ros","services","/","docs","org","understanding","ros2"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/","text":"通信接口 在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。 接口的定义 接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。 ROS通信接口 接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。 语言无关 为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。 标准接口 大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。 案例一：服务接口的定义与使用 了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。 接口定义 在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ... 程序调用 我们在代码中再来重点看下接口的使用方法。 客户端接口调用 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 服务端接口调用 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 案例二：话题接口的定义与使用 话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。 运行效果 现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub 接口定义 在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ... 程序调用 我们在代码中再来重点看下接口的使用方法。 发布者接口调用 learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 订阅者接口调用 learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 接口命令行操作 接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义 参考链接 https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["获取","msgs","com","hierarchy","看看","__","传输","数据结构","那","实现","查询","看","create","插座","阈值","但","有机","求和","chain","区分","org","说明","二值化","（","涵盖","主","包装","并且","自己","后","是否","检测","已","完成","我们","一下","通过","他们","体","参数","用到","三种","-","编译","还","父类","一些","bgr","下来","use","描述","就是","callback","单向","入口","/","findcontours","package","小海","$","坐标值","single","ros2","应用","左上","return","客户端","终端","人","？","程序模块","很","rclpy","[","反正","shape","\"","想","subscription","相互","创建","]","cnt","初始","e","）","链接","苹果","mask","值","再","收到","模型","约束","勾勒","#","常用","来","内容","字符","bool","多","服务","list","就行","回顾","函数","选项","server","中有","关系","的话","receiving","整型","后续","主要","自动","txt","图形","都","随处","这些","为了","cv","else","插头","once","true","这个","super","别人","cv2","高","waiting","一种","方便","甚至","docs","find","设计","编译器","自定义","webcam","坐标","，",")","互相","系统","最为","根据","depend","发送","消息","订阅","inrange","无论","输出","编写程序","提供","务器","通信","tutorials","从","interfaces","get","publisher","和","not","micro","把","default","字符串","部分","如何","在","领域","5","一个","讲","到底","exec","示例","html","不用","旋转","图像处理","研究","成","加",".","要","代码生成","50","开发","上边","xml","红色","position","sub","video","左上角","标准","packages","现在","打印","'","只要","关于","typec","objecty","此时","进行","命令行","上角","换成","各种","看上去","中心","转化","像素","self","机器人","销毁","点画","run","应答","en","视觉","发布者","时候","10","string","直接","接下来","查看","列表","希望","计算","随处可见","重要","args","位置","居","详细","面积","摄像头","及","xy","像头","timeout","配置","形象化","运动","案例","raw","准确","call","轮子","还有","线速度","位","future","速度","标值","int32","几个","开始","c++","而是","def","define",":","原色","msg","：","destroy","宽","连接","每","中间","member","你来我往","available","像是","一","上","布尔值","服务端","cam","称之为","广泛","learning","定义","180","分成","机制","无关","相机","none","举个","三个","service","有","让","转换","轮廓","下","信息","封装","图形化","角速度","“","0","话","关注","2","谁","运行","无论是","对象","噪声","工作","便于","sum","1.0","颜色","async","exception","share","一起","(","由于","件夹","包中","关闭","、","状态","frame","@","软件开发","重复","生成","固定","sensor","接口类","过程","服务器","出来","result","red","数据","结构","会","减少","可见","到","例程","像素点","者","contours","这","20","高效","node","show","if","得到","...","import","的","publish","编写","程序","imagesubscriber","中来","里","对应","各个","某个","下限","bgr2hsv","传递","形象","肯定","匹配","只有","第一","bridge","等等","初始化","break","usb","array","int64","。","boundingrect","具体","类似","from","也","物体","data","太小","没有","np","wait","操作","符合","d","数组","还是","send","drawcontours","invalid","三原色","这样","建立","完全","之前","1s","类","hsv","出去","度","y","反馈","in","古月","cvtcolor","continue","topic","usr","\\","concepts","py","=","与","功能","之间","衍生","r","已经","generate","object","用于","参考","64","命令","联系","退出","重点","驱动","对","a","找到","ros","调用","required","更","输入","env","将要","标准接口","核心","好","等待","cmakelists","retr","python3","client","启动"," ","group","b","处理","接口","一句","识别","*","键盘","客户","布尔","讲解","for","接口类型","就","一次","角度","化成","以及","包含","调用函数","正常","as","众多","转","编程","回到","只","interface","模块","所以","n","队列","等","+","可能","节点","listener","组成","ok","分别","std","cvbridge","imshow","机器","语言","python","学习","关心","造","目标","请求","!","文件夹","指令","两个","海龟","周期","两","8","approx","主程序","彼此","150","所在","try","第三个","w","int","of","guyuehome","当前","最终","另外","可以","32","init","done","这里","进入","个人","名","imgmsg","电脑","二","{","添加","spin","failed","以上","时","软件","知道","需要","呢","给","它","各个领域","或者","自语","如下","传输数据","动作","安装","exe","_","通信接口","形状","理解","包","精髓","二个","第二个","继续","看上","class","pub","第二","更为","代码","路径","request","objectposition","自言自语","数","info","subscribernode","去除","库","image","1","circle","三原","不同","转到第","使用","90","进度","}","输入输出","—","x","255","什么样","结果","numpy","得","保证","不是","https","降低","提示","接口定义","课程","128","objectclient","有没有","color",">","类型","日志","转到","中","之为","图像","每个","硬件","两者","build","回调","发布","为","必须","<","command","将","了","交流","作者","由","project","utf","执行","是","做成","文件","一帧","”","依赖","大家","摄像","二维","却是",",","上限","表示","解析","例子","才能","upper","什么","shutdown","lower","好奇","接下","哪些","action","长度","了解","bin","to","第一个","except","target","上去","g","效果","---","手机","加法","opencv","诞生","rosidl","自定","img","看到","waitkey","bgr8","humble","runtime","生活","种","概念","数值","控制","常见","一边","detect","话题","logger","；","用来","打开","main","and","不管","范围","比如","每隔","%","目的","srv","name","h","第三","并","转化成","小海龟","30","response","sec","while","显示","generators","getobjectposition","coding","again","objectx","about","循环","www","方法"],"title":"**通信接口**","title_tokens":["接口","*","通信接口","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_1","text":"在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。","text_tokens":["交流","数据","结构","会","而是","甚至","是","。","就是","可以","，","内容","概念","—","个人","标准","这","多","服务","系统","话题","不是","ros","重要","你来我往","大家","更","无论","将要","还是","通信","呢","后续","的","给","或者","自语","什么","人","并","？","学习","定义","动作","好","通信接口","都","在","中","为了","理解","传递","让"," ","两个","我们","一个","自言自语","接口","用到"],"title":"通信接口","title_tokens":["接口","通信接口","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_2","text":"接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。","text_tokens":["数据","结构","加","要","可见","开发","传输","可以","到","那","像素点","实现","标准","这","插座","关于","高效","但","只要","电脑","typec","进行","时","软件","知道","呢","的","它","给","各个领域","包装","并且","编写","传输数据","自己","安装","程序","通信接口","看上去","形状","各个","包","精髓","肯定","形象","像素","看上","我们","匹配","只有","更为","通过","代码","机器人","等等","他们","usb","参数","-","一些","时候","三原","。","使用","就是","具体","输入输出","类似","也","直接","随处可见","什么样","结果","得","符合","还是","应用","三原色","建立","摄像头","完全","程序模块","？","很","像头","反馈","反正","相互","配置","形象化","运动","中","准确","之为","图像","每个","硬件","两者","发布","线速度","速度","必须","了","r","开始","值","由","是","约束","原色","常用","连接","每","内容","驱动","多","服务","大家","调用","ros","摄像","更","输入","却是","函数","像是","关系","上","解析","例子","称之为","广泛","才能","主要","什么","定义","好","机制","图形","相机","都","随处","这些","举个","有","让"," ","插头","b","这个","上去","g","接口","一句","键盘","手机","诞生","图形化","角速度","话","一种","关注","就","运行","一次","生活","无论是","，","概念","调用函数","工作","控制","常见","正常","系统","最为","话题","编程","；","回到","无论","模块","输出","所以","等","编写程序","一起","提供","节点","比如","通信","组成","目的","机器","和","micro","把","、","关心","如何","在","领域","软件开发","固定","不用","指令","两个","一个","主程序","讲","彼此","出来","所在"],"title":"接口的定义","title_tokens":["的","接口","定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#ros","text":"接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。","text_tokens":["三种","减少","方便","一种","是","。","使用","就是","可以","常用","到","每","依赖","也","，","种","联系","便于","这","服务","有机","话题","ros","降低","一起","节点","通信","分别","的","才能","定义","核心","动作","、","程序","机制","造","各种","目标","重复","有","让","轮子"," ","我们","通过","代码","别人","接口","之间"],"title":"ROS通信接口","title_tokens":["通信","通信接口","接口","ros"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_3","text":"为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。","text_tokens":["数据","结构","会",".","当前","数据结构","传输","最终","另外","可以","32","到","这里","20","求和","区分","此时","知道","需要","的","动作","里","通信接口","是否","对应","完成","我们","机器人","一下","通过","数","体","应答","编译","还","int64","不同","转到第","。","描述","使用","10","90","进度","单向","x","结果","保证","小海","数组","还是","之前","1s","度","y","转到","反馈","运动","中","还有","位","功能","int32","将","了","c++","开始","做成","是","文件","msg","64","一帧","”","每","中间","bool","服务","a","ros","二维","就行","表示","布尔值","整型","自动","什么","定义","分成","机制","无关","action","这些","三个","为了","让"," ","b","这个","接口","---","加法","“","布尔","看到","一种","设计","坐标","，","包含","数值","一边","sum","话题","转","编程","只","用来","等","节点","比如","通信","每隔","分别","srv","语言","机器","python","和","由于","学习","小海龟","、","30","部分","状态","目标","请求","在","生成","两个","海龟","周期","一个","过程","两","旋转"],"title":"语言无关","title_tokens":["无关","语言"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_4","text":"大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。","text_tokens":["几个","看看","文件","。","可以","，","标准","系统","大家","找到","ros","众多","打开","share","可能","涵盖","呢","给","的","定义","？","件夹","好奇","安装","哪些","在","中","文件夹","我们","到底","路径","接口","了"],"title":"标准接口","title_tokens":["标准接口","接口","标准"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_5","text":"了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。","text_tokens":["研究","视觉","封装","收到","再","时候","下来","讲解","是","。","就","使用","下","可以","角度","接下来","例程","来","，","以及","对象","概念","实现","驱动","查询","服务","话题","发送","回顾","位置","进行","课程","提供","节点","通信","服务端","需要","这样","的","从","之前","机器","第三","定义","编写","接下","通信接口","相机","如何","三个","目标","请求","在","中","二个","了解","有","第二个","图像"," ","第二","我们","发布","一个","第一","第一个","代码","接口","识别","第三个","了"],"title":"案例一：服务接口的定义与使用","title_tokens":["的","服务","定义","使用","：","与","接口","案例","一"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_6","text":"在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ...","text_tokens":["获取","of","会",".","代码生成","上边","xml","例程","packages","{","添加","...","需要","的","后","_","完成","包","我们","代码","编译","还","不同","。","使用","}","也","x","/","package","位置","接口定义","$",">","y","反馈","\"","配置","中","build","为","功能","<","int32","了","generate","project","是","文件","#","：","依赖","member","bool","服务","required","选项","中有","的话","表示","服务端","learning","自动","定义","txt","cmakelists","让"," ","group","true","这个","接口","---","rosidl","就","find","一次","编译器","runtime","坐标","，",")","根据","depend","interface","通信","srv","get","语言","(","interfaces","name","、","default","部分","目标","在","generators","生成","指令","getobjectposition","两个","过程","exec"],"title":"接口定义","title_tokens":["定义","接口","接口定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_7","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["在","中","重点","看","再","的","我们","。","代码","使用","方法","接口","来","下"],"title":"程序调用","title_tokens":["调用","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_8","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["com","of",".","guyuehome","__","done","init","position","create","'","node","if","说明","spin","failed","进行","...","import","的","_","class","self","销毁","request","初始化","info","break","库","应答","-","父类","from","x","args","/","wait","位置","d","ros2","send","objectclient","居","类","rclpy","y","timeout","\"","古月","创建","usr","call","\\","py","初始","=","future","e","作者","r","object","utf","def",":","#","destroy","服务","available","env",",","learning","shutdown","定义","等待","none","python3","service","client","bin","else"," ","once","true","except","target","super","接口","识别","*","自定","waiting","for","自定义",")","，","对象","as","1.0","logger","interface","async","main","exception","n","节点","%","ok","(","srv","name","python","get","并","not","关闭","response","sec","while","目标","@","请求","!","getobjectposition","coding","again","8","www","示例","try","result"],"title":"客户端接口调用","title_tokens":["客户","客户端","接口","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_9","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["red","msgs","com","w","hierarchy","int","数据",".","guyuehome","50","__","红色","init","position","进入","sub","者","左上角","video","create","contours","'","阈值","node","名","imgmsg","if","objecty","chain","说明","得到","spin","进行","二值化","（","import","的","主","上角","后","imagesubscriber","_","中心","已","检测","转化","下限","bgr2hsv","class","像素","self","销毁","bridge","点画","request","初始化","info","去除","库","父类","-","image","array","1","一些","circle","bgr","使用","10","boundingrect","90","from","callback","物体","data","计算","x","255","太小","入口","numpy","np","args","/","findcontours","提示","d","128","ros2","drawcontours","invalid","居","color","类","左上","面积","hsv","return","日志","类型","rclpy","[","shape","y","xy","in","\"","及","古月","subscription","反馈","raw","cvtcolor","continue","中","]","创建","cnt","usr","图像","\\","回调","py","=","初始","与","为","<","）","command","作者","苹果","将","mask","已经","object","用于","utf","模型","收到","def",":","勾勒","执行","msg","#","宽","destroy","退出","对","list","服务","ros","server","函数","env",",","上限","receiving","upper","learning","shutdown","lower","定义","180","等待","retr","none","长度","python3","service","cv","bin","else","转换"," ","轮廓","to","true","target","super","处理","接口","识别","*","5","效果","bgr8","opencv","cv2","自定","img","waitkey","0","高","2","信息","for","接口类型","自定义","化成","坐标",")","对象","，","噪声","数值","detect","互相","as","话题","颜色","订阅","消息","inrange","interface","logger","n","输出","队列","+","main","提供","节点","listener","务器","范围","%","从","cvbridge","(","srv","name","python","get","h","和","imshow","并","转化成","关闭","、","response","显示","frame","目标","@","请求","!","getobjectposition","coding","sensor","接口类","8","一个","objectx","approx","www","示例","服务器","150","所在","出来","循环","图像处理"],"title":"服务端接口调用","title_tokens":["服务","服务端","接口","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_10","text":"话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。","text_tokens":["视觉","是","。","类似","，","也","服务","话题","没有","位置","不管","通信","有没有","需要","的","从","之前","机器","定义","人","想","把","换成","中来","通信接口","案例","目标","继续","我们","周期","发布","接口","识别","衍生"],"title":"案例二：话题接口的定义与使用","title_tokens":["的","二","话题","定义","使用","：","与","接口","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_11","text":"现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub","text_tokens":["image","成","数据","视觉","封装","object","会","谁","是","运行","就","使用","。","：","到","来","，","sub","希望","驱动","标准","现在","打印","node","话题","ros","消息","；","订阅","interface","此时","位置","以上","$","节点","ros2","cam","需要","分别","的","learning","出去","第三","定义","并","终端","exe","_","相机","三个","目标","中","二个","第二个","第三个","启动","图像","topic"," ","pub","第二","我们","发布","第一","一个","第一个","这个","功能","识别","run","usb","将"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_12","text":"在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ...","text_tokens":[".","例程","{","进行","...","需要","的","后","_","完成","包","我们","代码","objectposition","编译","还","不同","描述","。","使用","}","x","/","package","位置","接口定义","坐标值","$","y","\"","配置","中","功能","标值","int32","了","generate","project","是","msg","#","：","内容","服务","required","选项","表示","learning","自动","定义","txt","cmakelists","让"," ","这个","接口","rosidl","find","编译器","坐标","，",")","话题","根据","消息","interface","通信","(","语言","interfaces","name","、","default","目标","在","generators","生成","一个","过程"],"title":"接口定义","title_tokens":["定义","接口","接口定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_13","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["在","中","重点","看","再","的","我们","。","代码","使用","方法","接口","来","下"],"title":"程序调用","title_tokens":["调用","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_14","text":"learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["red","msgs","com","w","hierarchy","int",".","guyuehome","50","__","红色","init","position","进入","sub","者","左上角","video","create","contours","'","阈值","node","名","imgmsg","if","objecty","chain","说明","得到","spin","进行","二值化","（","import","的","publish","主","上角","后","imagesubscriber","_","中心","已","检测","转化","下限","bgr2hsv","class","像素","self","pub","销毁","bridge","点画","objectposition","初始化","info","去除","库","父类","-","image","array","1","发布者","一些","circle","bgr","使用","10","boundingrect","90","from","callback","data","计算","x","255","太小","入口","numpy","np","args","/","findcontours","提示","位置","128","ros2","drawcontours","居","color","类","左上","面积","hsv","日志","类型","rclpy","[","shape","y","xy","in","\"","及","古月","subscription","raw","cvtcolor","continue","中","]","创建","topic","图像","usr","cnt","回调","=","py","发布","初始","与","为","<","）","作者","苹果","将","mask","object","用于","utf","模型","def",":","勾勒","msg","#","宽","destroy","退出","list","ros","函数","env",",","上限","receiving","upper","learning","shutdown","lower","定义","180","等待","retr","none","长度","python3","cv","bin","转换"," ","轮廓","to","super","处理","接口","*","效果","bgr8","opencv","cv2","自定","img","waitkey","0","高","2","信息","for","webcam","自定义","化成","坐标",")","对象","，","噪声","数值","detect","互相","as","话题","颜色","订阅","消息","inrange","interface","logger","main","输出","队列","+","listener","节点","范围","从","cvbridge","(","imshow","name","python","publisher","h","和","get","并","转化成","关闭","、","显示","frame","目标","@","!","objectx","coding","sensor","5","8","一个","approx","150","www","示例","出来","循环","所在","图像处理"],"title":"发布者接口调用","title_tokens":["接口","调用","发布者","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_15","text":"learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["msgs","com","数据",".","guyuehome","__","init","position","sub","者","create","'","node","名","说明","spin","进行","（","import","的","主","后","_","class","self","销毁","objectposition","subscribernode","初始化","info","库","父类","-","10","string","from","callback","x","入口","args","/","提示","位置","d","ros2","居","类","日志","类型","rclpy","y","\"","古月","subscription","创建","topic","usr","\\","回调","=","py","初始","作者","object","收到","utf","def",":","执行","msg","#","destroy","退出","字符","对","函数","env",",","learning","shutdown","定义","等待","none","长度","python3","bin"," ","target","super","处理","接口","*","信息","自定","自定义",")","对象","，","话题","logger","订阅","消息","interface","main","输出","队列","listener","节点","%","std","(","get","name","python","并","关闭","、","字符串","目标","@","!","coding","8","一个","循环","www","示例"],"title":"订阅者接口调用","title_tokens":["者","调用","接口","订阅"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_16","text":"接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义","text_tokens":["#","：","<","常用","命令","列表","查看","list","系统","show","interface","package","操作","接口定义","$","ros2","详细","的","name",">","定义","包中","如下","_","某个"," ","功能","接口"],"title":"接口命令行操作","title_tokens":["命令","接口","命令行","操作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_17","text":"https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["-","en",".","humble","define","use",":","docs","https","ros","/","interface","org","package","and","single","tutorials","interfaces","concepts"," ","about","html"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/","text":"动作 机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。 通信模型 举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。 客户端/服务器模型 动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。 一对多通信 和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。 同步通信 既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。 由服务和话题合成 大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。 案例一：小海龟的动作 我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback 案例二：机器人画圆 如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。 运行效果 启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。 接口定义 例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是动作的目标，enable为true时，表示开始运动； 第二块是动作的执行结果，finish为true，表示动作执行完成； 第三块是动作的周期反馈，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ... 通信模型 通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。 服务端代码解析 learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], }, 客户端代码解析 learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], }, 动作命令行操作 动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["获取","com","__","就此结束","那","二块","实现","看","但","org","说明","动图","（","主","后","是否","应用层","完成","我们","一下","服务器端","通过","用到","指定","-","编译","还","父类","像","下来","就是","enable","管理","callback","发送给","随时","入口","rotateabsolute","一套","/","第二块","package","小海","movecircle","$","ros2","应用","return","客户端","终端","？","rclpy","很","想","[","\"","time","整个","创建","]","初始","含义","名字","按照","发出","）","链接","进度条","收到","模型","再","finish","key","#","常用","来","多少","姿态","某","bool","多","服务","list","turtle1","相比","server","选项","函数","直到","复杂","自动","txt","都","这些","succeed","true","这个","super","setup","actionclient","i","原理","一种","docs","常常","编译器","自定义","find","坐标","accepted","，",")","sleep","圆周运动","系统","根本","根据","订阅","发送","加深","消息","teleop","输出","务器","通信","拒绝","tutorials","从","interfaces","get","和","not","把","default","部分","如何","一块","圆周","在","一个","是不是","到底","示例","html","旋转","试一试","转个",".","思路","上边","眼前","标准","1.57","现在","'","多个","进行","命令行","秘密","没错","state","过","特性","负责","抓取","其","导航","self","机器人","销毁","告诉","干什么","run","en","发布者","竟然","10","接下来","直接","查看","列表","希望","合成","rejected","args","位置","实时","处理函数","智能","分析","居","需求","转圈","动","介绍","被","配置","案例","运动","move","不会","异步","future","还会","int32","点","某一","通信模型","开始","而是","def","不",":","feedback","当中","msg","destroy","：","每","console","第三块","--","一","上","服务端","仿真","entry","learning","定义","turtle","机制","none","举个","三个","有","送货","让","movecircleactionserver","scripts","同步","但是","这种","下","信息","封装","当","0","隐藏","运行","圈","对象","便于","type","async","一起","(","实际","360","关闭","、","起来","状态","@","简单","真器","生成","接口类","过程","以下","服务器","result","数据","会","理","understanding","actionserver","到","例程","者","流程","这","20","node","if","取消","...","import","的","publish","编写","程序","段时间","之后","某个","一对","肯定","针对","只有","第一","points","初始化","。","具体","类似","from","也","满足","结束","哪里","data","theta","没有","wait","操作","毕竟","d","如果","send","类","这样","设置","之前","一点","1s","度","反馈","in","古月","再用","rotate","usr","actions","py","=","movecircleactionclient","0.5","功能","turtlesim","generate","add","一样","数据类型","不仅仅","参考","命令","又","退出","对","送餐","ros","调用","required","送给","env","应带","好","合适","cmakelists","等待","python3","client","背后","启动"," ","处理","接口","识别","先","*","键盘","客户","请","第一块","for","接口类型","就","一次","角度","包含","模拟","goal","转","编程","interface","模块","等","可能","节点","ok","分别","机器","语言","python","目标","请求","能","装","一段","!","指令","两个","周期","海龟","8","臂","一段时间","遥控","分拣","清楚","guyuehome","当前","控","另外","可以","最终","init","done","接收","二","名","{","完整","只能","spin","时","知道","需要","呢","execute","这么","加入","如下","动作","_","通信接口","理解","包","class","同时","第二","更为","range","代码","info","库","circle","画圆","时间","不同","使用","较长","进度","成功","}","读取","—","三块","仅仅","底层","结果","写","得","https","不是","接口定义","拒绝执行","有没有","基于","类型","日志",">","顺利","中","回调","发布","为","<","一点一点","作者","了","使","多少度","其实","由","project","utf","方式","执行","是","文件","仔细","大家","达到","就此",",","表示","moving","解析","例子","才能","假设","什么","shutdown","接下","handle","action","publishing","absolute","bin","场景","效果","---","仿真器","自定","rosidl","看到","humble","received","所处","概念","虽然","控制","一边","机械","行为","话题","logger","；","相对","打开","main","既然","比如","每隔","%","目的","name","第三","并","小海龟","30","response","发现","generators","coding","循环","www","方法","不仅"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_1","text":"机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。","text_tokens":["某一","会","一种","是","不仅仅","。","常常","就","就是","另外","可以","具体","那","键盘","，","满足","也","实现","—","概念","便于","对","流程","仅仅","送餐","系统","行为","ros","完整","等","进行","智能","通信","应用","上","复杂","需要","的","需求","从","机器","这么","目的","并","很","动作","、","机制","好","管理","被","这些","运动","目标","某个","简单","分拣","在","中","送货","理解"," ","机器人","我们","一个","场景","这个","名字","含义","这种","功能","识别","不仅","遥控","用到"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_2","text":"举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。","text_tokens":["转个","当前","控","可以","到","眼前","这","现在","20","取消","知道","需要","的","动作","后","段时间","之后","完成","肯定","我们","机器人","一下","更为","告诉","还","像","时间","。","使用","10","进度","结束","哪里","随时","得","不是","没有","如果","有没有","这样","一点","1s","转圈","？","想","度","反馈","运动","发出","一点一点","了","进度条","开始","多少度","再","不","执行","是","当中","命令","多少","表示","直到","例子","才能","假设","机制","合适","举个","让"," ","信息","就","圈","，","根本","行为","转","发送","比如","通信","每隔","ok","机器","并","360","把","、","30","在","装","一段","指令","一个","过程","到底","一段时间","旋转"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_3","text":"动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。","text_tokens":["客户","信息","开始","收到","模型","当","再","当前","执行","是","。","就","使用","就此结束","又","坐标","类似","也","，","所处","姿态","结束","控制","一边","机械","服务","发送","达到","就此","实时","如果","务器","可能","通信","的","机器","客户端","什么","和","动","想","动作","后","反馈","起来","抓取","导航","状态","目标","运动","之后","中","整个","让"," ","同时","机器人","周期","一个","过程","服务器端","这个","臂","服务器","干什么"],"title":"客户端/服务器模型","title_tokens":["客户","模型","服务","客户端","/","服务器","务器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_4","text":"和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。","text_tokens":["客户","一样","执行","。","命令","可以","，","服务","大家","多个","发送","毕竟","只能","务器","通信","的","才能","机器","客户端","和","动作","都","运动","完成","中","有","机器人","只有","一个","服务器端","但是","服务器","先","下"],"title":"一对多通信","title_tokens":["多","一对","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_5","text":"既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。","text_tokens":["数据",".","一种","是","文件","。","使用","那","也","，","既然","进行","通信","的","之前","过","定义","动作","介绍","机制","反馈","通信接口","action","中","有","我们","过程","同步","接口"],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_6","text":"大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。","text_tokens":["客户","发布者","收到","再","竟然","当","会","隐藏","其实","一种","是","上边","。","使用","仔细","就是","命令","来","，","也","者","看","实现","底层","服务","大家","不是","话题","发送","调用","订阅","模块","时","务器","表示","通信","应带","动图","应用","秘密","没错","的","客户端","基于","和","动作","反馈","机制","其","三个","运动","目标","请求","发现","应用层","有"," ","两个","周期","发布","是不是","一个","服务器端","过程","服务器","还会","下"],"title":"由服务和话题合成","title_tokens":["由","服务","合成","话题","和"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_7","text":"我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback","text_tokens":["-","仿真器","下来",":","feedback","。","使用","key","：","命令","可以","到","接下来","}","，","某","概念","对","控制","姿态","1.57","goal","theta","node","rotateabsolute","加深","/","turtle1","{","小海","teleop","--","$","一","ros2","send","仿真","的","turtle","小海龟","动作","接下","\"","_","action","案例","运动","理解","再用","absolute","真器","rotate","启动","让"," ","海龟","我们","以下","按照","info","run","turtlesim","指定"],"title":"案例一：小海龟的动作","title_tokens":["的","海龟","小海","：","小海龟","动作","案例","一"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_8","text":"如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。","text_tokens":["转个","客户","封装","请","而是","下来","是","就","。","使用","直接","来","接下来","，","圈","实现","虽然","希望","服务","但","话题","一套","编程","一起","务器","通信","呢","的","实际","假设","基于","机器","和","特性","？","并","客户端","动作","好","接下","如何","在","中","有","让","不会"," ","针对","我们","机器人","一个","过程","通过","代码","服务器端","服务器","方法","接口","试一试"],"title":"案例二：机器人画圆","title_tokens":["机器","画圆","二","机器人","：","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_9","text":"启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。","text_tokens":["客户","信息","原理","开始","看到","下来","运行","。","一次","就","：","最终","命令","可以","接下来","每","例程","，","结束","实现","模拟","服务","发送","server","$","务器","ros2","分析","服务端","分别","的","learning","机器","客户端","终端","和","并","度","动作","接下","反馈","30","_","action","目标","之后","运动","完成","client","中","背后","启动","move"," ","两个","我们","机器人","一下","服务器端","这个","示例","服务器","run","下"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_10","text":"例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是动作的目标，enable为true时，表示开始运动； 第二块是动作的执行结果，finish为true，表示动作执行完成； 第三块是动作的周期反馈，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ...","text_tokens":[".","当前","到","例程","二块","标准","{","进行","时","...","需要","的","state","动作","后","_","是否","完成","包","第二","我们","机器人","第一","通过","代码","编译","还","不同","。","使用","enable","成功","}","三块","结果","不是","/","第二块","package","位置","movecircle","接口定义","$","反馈","\"","配置","运动","中","为","功能","int32","开始","generate","project","finish","执行","是","#","：","bool","ros","required","第三块","选项","表示","learning","自动","定义","txt","cmakelists","action","三个","让"," ","true","接口","---","自定","rosidl","第一块","find","编译器","自定义","角度","，",")","包含","根据","；","interface","(","机器","语言","interfaces","name","第三","并","default","部分","目标","一块","在","generators","生成","指令","周期","过程","旋转"],"title":"接口定义","title_tokens":["定义","接口","接口定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_11","text":"通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。","text_tokens":["客户","信息","通信模型","开始","模型","思路","下来","。","运行","较长","就是","理","接下来","例程","，","发送给","结束","控制","写","服务","话题","相对","发送","相比","送给","务器","一","通信","分析","这样","的","之前","机器","客户端","和","并","动作","后","反馈","接下","程序","起来","目标","运动"," ","机器人","周期","一个","我们","一下","代码","服务器","清楚"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_12","text":"learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["com",".","guyuehome","当前","__","最终","actionserver","init","到","'","node","名","{","说明","spin","进行","知道","（","...","需要","import","的","execute","state","publish","主","加入","编写","如下","动作","后","负责","程序","_","之后","完成","包","class","self","销毁","range","代码","points","初始化","info","库","父类","-","编译","circle","成功","}","from","callback","入口","结果","args","/","d","movecircle","处理函数","ros2","居","类","设置","return","类型","rclpy","度","[","反馈","\"","in","古月","配置","运动","创建","]","move","usr","回调","=","py","初始","发布","0.5","功能","）","作者","点","收到","utf","def","finish",":","执行","feedback","文件","msg","#","destroy","：","退出","console","服务","server","函数","选项","env",",","表示","服务端","moving","entry","learning","shutdown","定义","等待","handle","action","none","python3","publishing","succeed","bin","让"," ","movecircleactionserver","scripts","true","super","处理","setup","接口","*","i","信息","自定","0","for","接口类型","自定义","角度",")","，","对象","sleep","圆周运动","goal","系统","logger","消息","interface","打开","main","务器","节点","%","从","(","get","name","python","并","360","关闭","、","30","圆周","目标","@","!","coding","周期","接口类","8","一个","循环","www","示例","服务器","time","result"],"title":"服务端代码解析","title_tokens":["服务","服务端","代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_13","text":"learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["获取","com","数据",".","guyuehome","__","最终","done","init","接收","'","node","名","if","{","说明","spin","进行","时","知道","（","需要","import","的","state","主","加入","编写","如下","动作","后","程序","_","之后","完成","包","class","self","机器人","销毁","服务器端","代码","points","初始化","info","库","父类","-","编译","circle","enable","}","from","callback","读取","希望","入口","结果","rejected","args","/","wait","d","movecircle","如果","ros2","send","拒绝执行","居","类","设置","return","客户端","类型","日志","rclpy","[","反馈","\"","古月","被","顺利","配置","运动","创建","]","move","usr","异步","回调","py","初始","=","future","movecircleactionclient","为","功能","）","作者","使","点","开始","收到","utf","add","def","方式","finish",":","执行","feedback","文件","msg","#","destroy","：","退出","console","服务","server","函数","选项","env",",","entry","learning","shutdown","定义","等待","handle","action","none","python3","client","启动","bin","让"," ","scripts","true","super","处理","setup","接口","*","actionclient","客户","自定","for","接口类型","自定义","received","accepted",")","，","对象","圆周运动","goal","系统","logger","发送","消息","interface","打开","async","输出","main","务器","节点","%","拒绝","(","机器","name","python","get","并","not","关闭","、","response","圆周","目标","@","请求","能","!","coding","周期","接口类","8","一个","循环","www","示例","服务器","result"],"title":"客户端代码解析","title_tokens":["客户","代码","客户端","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_14","text":"动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求","text_tokens":["数据","数据类型","#","：","<","常用","命令","列表","查看","data","list","服务","goal","发送","type","操作","$","ros2","send","的","name",">","类型","如下","动作","_","action","请求"," ","info"],"title":"动作命令行操作","title_tokens":["命令","命令行","动作","操作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["-","en","html","tutorials","actions",".","https","humble",":","ros","/","docs","org","understanding","ros2"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/","text":"参数 话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。 通信模型 比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。 全局字典 在ROS系统中，参数是以全局字典的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。 可动态监控 在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。 案例一：小海龟例程中的参数 在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 参数列表 参数查询与修改 $ ros2 param describe turtlesim background_b $ ros2 param get turtlesim background_b $ ros2 param set turtlesim background_b 10 参数文件保存与加载 $ ros2 param dump turtlesim >> turtlesim.yaml $ ros2 param load turtlesim turtlesim.yaml 案例二：参数编程 接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。 运行效果 $ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle 代码解析 learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], }, 案例三：机器视觉应用 参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。 运行效果 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180 代码解析 learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["节","获取","com","msgs","hierarchy","丰富","__","传输","单位","实现","查询","看","create","阈值","chain","org","比较","说明","二值化","set","（","麻烦","格式","主","配置文件","敏感","all","后","是否","检测","已","完成","我们","一下","通过","参数","用到","三种","-","父类","指定","编译","一些","还","像","bgr","下来","分辨","就是","后边","callback","定时","nodea","发送给","入口","提高","/","findcontours","小海","说干就干","提炼","$","ros2","应用","左上","？","rclpy","[","shape","\"","subscription","参数设置","整个","创建","]","么","cnt","初始","含义","）","链接","苹果","mask","值","再","模型","勾勒","key","#","常用","来","其他","多少","某","来看","robot","list","服务","函数","选项","光线","receiving","影响","hello","都","这些","变量","cv","改变","这个","super","setup","cv2","真实","高","一种","docs","两句","坐标","，",")","互相","系统","端口","订阅","发送","消息","inrange","叫做","teleop","输出","监控","本","提供","通信","问题","tutorials","从","get","和","把","部分","如何","在","即可","存在","5","一个","示例","html","图像处理","成",".","50","红色","sub","video","左上角","打印","'","多个","从而","作用","进行","命令行","辨率","nodeb","重新","字典","上角","特性","parameter","中心","转化","像素","self","机器人","默认值","销毁","点画","run","en","视觉","时候","一两句","10","优化","string","共享","列表","接下来","describe","计算","不如","合成","args","挺","很多","居","dump","面积","动态","条","编码","及","xy","介绍","配置","案例","raw","体验","大大提高","传输方式","点","几个","c++","通信模型","开始","定时器","def","不",":","msg","destroy","：","宽","连接","console","区域","键和值","一","cam","仿真","entry","以","learning","180","turtle","机制","相机","none","有","滑动","让","转换","scripts","轮廓","declare","下","信息","0","2","关注","运行","对象","噪声","便于","易用性","输入框","颜色","type","保存","(","关闭","、","起来","frame","@","简单","真器","sensor","过程","出来","red","数据","会","秒","param","不少","understanding","到","例程","者","contours","这","node","if","得到","某些","import","的","编写","程序","imagesubscriber","跟","下限","bgr2hsv","bridge","points","等等","初始化","usb","array","。","parameters","boundingrect","类似","from","也","大大","物体","data","太小","号","np","每次","d","如果","drawcontours","类","设置","环境","hsv","度","y","in","古月","默认","cvtcolor","continue","立刻","usr","py","=","value","与","功能","turtlesim","已经","object","用于","叫","一样","非常","参考","命令","形态","退出","s","对","驱动","ros","输入","送给","env","键值","核心","名称","等待","retr","python3"," ","b","处理","接口","识别","先","*","访问","for","就","分辨率","mbot","化成","比较简单","as","timer","编程","队列","+","等","可能","节点","listener","integer","组成","分别","高级","cvbridge","imshow","机器","考虑","python","目标","一两","!","加载","海龟","周期","8","approx","150","所在","清楚","w","int","guyuehome","parameternode","可以","init","进入","名","二","imgmsg","{","spin","知道","需要","呢","或者","加入","美颜","如下","exe","动作","办法","那个","_","理解","包","继续","变化","class","代码","info","去除","库","image","1","circle","不同","使用","90","}","读取","—","load","x","255","哪个","曝光","写","numpy","https","三","不是","提示","background","128","color",">","日志","类型","最新","中","易用","图像","修改","回调","为","<","作者","了","将","utf","由","方式","执行","是","文件","可","然后","大家","new",",","上限","表示","解析","upper","什么","shutdown","lower","接下","熟悉","长度","了解","bin","to","效果","全局变量","bgr8","仿真器","opencv","waitkey","img","humble","数值","detect","参数值","话题","logger","yaml","打开","main","范围","比如","%","name","h","就要","全局","并","转化成","小海龟","显示","coding","循环","www","方法","图像识别","很大"],"title":"**参数**","title_tokens":["*","参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_1","text":"话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。","text_tokens":["三种","节","全局变量","数据","已经","c++","再","方式","不","一种","是","。","运行","传输","常用","可以","共享","来","类似","，","—","便于","这","服务","系统","话题","大家","ros","编程","多个","参数","本","节点","通信","知道","某些","的","传输方式","机器","字典","全局","动作","、","机制","介绍","程序","是否","在","中","变量","了解"," ","我们","机器人","清楚"],"title":"参数","title_tokens":["参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_2","text":"比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。","text_tokens":["会","可以","到","这","阈值","作用","进行","辨率","nodeb","需要","的","格式","或者","配置文件","美颜","后","程序","那个","是否","我们","通过","等等","usb","参数","视觉","一些","像","时候","不同","。","分辨","使用","就是","也","nodea","哪个","曝光","很多","设置","面积","条","编码","度","参数设置","配置","中","整个","图像","功能","一样","执行","是","文件","连接","多少","驱动","区域","输入","影响","什么","核心","相机","都","这些","有","滑动","改变"," ","识别","效果","关注","就","分辨率","，","端口","输入框","节点","比如","问题","分别","机器","考虑","和","部分","在","过程","图像识别","很大"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_3","text":"在ROS系统中，参数是以全局字典的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。","text_tokens":["像","真实","叫","一样","由","时候","访问","是","就","。","使用","就是","可以","后边","形态","，","也","数值","参数值","号","然后","系统","合成","名","ros","编程","叫做","键和值","等","组成","键值","以","的","字典","或者","什么","和","全局","？","名称","跟","在","中","理解","有","即可"," ","存在","我们","一个","这个","为","参数","了"],"title":"全局字典","title_tokens":["全局","字典"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_4","text":"在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。","text_tokens":["获取","丰富","会","访问","非常","。","可以","共享","其他","，","也","某","对","数值","这","大家","编程","从而","如果","进行","可能","节点","比如","ros2","用到","知道","高级","的","特性","最新","办法","都","在","中","有","立刻","修改"," ","一个","参数","了"],"title":"可动态监控","title_tokens":["动态","可","监控"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_5","text":"在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["仿真器","不少","。","使用","key","下","命令","例程","也","，","node","小海","teleop","$","提供","一","ros2","命令行","仿真","的","和","turtle","小海龟","起来","熟悉","_","在","中","真器"," ","海龟","我们","含义","通过","这个","方法","run","turtlesim","参数","了"],"title":"案例一：小海龟例程中的参数","title_tokens":["中","的","海龟","小海","：","小海龟","参数","例程","案例","一"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_6","text":"","text_tokens":[],"title":"参数列表","title_tokens":["列表","参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_7","text":"$ ros2 param describe turtlesim background_b $ ros2 param get turtlesim background_b $ ros2 param set turtlesim background_b 10","text_tokens":["set","ros2"," ","get","param","b","turtlesim","10","background","_","$","describe"],"title":"参数查询与修改","title_tokens":["与","查询","参数","修改"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_8","text":"$ ros2 param dump turtlesim >> turtlesim.yaml $ ros2 param load turtlesim turtlesim.yaml","text_tokens":["load","dump","."," ","param",">","yaml","turtlesim","$","ros2"],"title":"参数文件保存与加载","title_tokens":["加载","文件","保存","与","参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_9","text":"接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。","text_tokens":["几个","开始","一两句","下来","就","。","使用","两句","可以","接下来","来","，","读取","比较简单","实现","这","写","比较","函数","设置","的","就要","和","接下","程序","都","一两","在","中","简单","体验","我们","一下","方法","先","参数","了"],"title":"案例二：参数编程","title_tokens":["案例","二","编程","：","参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_10","text":"$ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle","text_tokens":["set","robot","learning"," ","param","name","turtle","parameter","_","run","$","declare","ros2"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_11","text":"learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], },","text_tokens":["com",".","guyuehome","秒","param","__","parameternode","init","到","单位","create","打印","'","node","{","说明","spin","进行","set","知道","（","重新","需要","import","的","主","加入","编写","all","如下","parameter","后","程序","_","完成","包","class","self","默认值","销毁","代码","points","初始化","info","参数","库","指定","父类","-","编译","parameters","string","列表","from","}","callback","定时","读取","发送给","入口","args","/","ros2","居","类","设置","日志","rclpy","[","\"","古月","配置","默认","中","创建","]","usr","修改","回调","py","初始","=","value","为","功能","）","作者","将","点","值","utf","定时器","def",":","执行","文件","#","destroy","：","退出","s","console","robot","函数","送给","new","env",",","选项","entry","learning","hello","shutdown","等待","none","python3","bin","让"," ","scripts","super","setup","接口","*","declare","信息","2","mbot",")","，","对象","数值","参数值","系统","timer","logger","发送","type","打开","main","输出","节点","%","从","(","get","name","python","并","关闭","、","@","!","coding","周期","8","一个","循环","www","示例"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_12","text":"参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。","text_tokens":["效果","成","还","已经","视觉","会","再","不同","是","就","运行","使用","。","优化","可以","下","大大","，","也","物体","来看","对","看","不如","易用性","阈值","大家","不是","提高","每次","比较","说干就干","光线","提炼","挺","应用","麻烦","呢","环境","的","设置","机器","动态","敏感","？","把","程序","如何","在","中","继续","么","变化","易用","修改"," ","机器人","我们","过程","代码","示例","大大提高","识别","先","参数","了"],"title":"案例三：机器视觉应用","title_tokens":["应用","视觉","机器","三","：","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_13","text":"$ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180","text_tokens":["red","object","param","detect","node","$","ros2","cam","set","upper","learning","h","180","exe","parameter","_"," ","run","usb"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_14","text":"learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], },","text_tokens":["red","msgs","com","w","hierarchy","int",".","guyuehome","param","50","__","红色","init","到","进入","sub","者","左上角","video","create","打印","contours","'","阈值","node","名","imgmsg","if","chain","{","说明","得到","spin","进行","二值化","知道","（","需要","import","的","主","上角","加入","编写","如下","parameter","imagesubscriber","后","_","程序","中心","已","检测","转化","完成","包","下限","bgr2hsv","class","像素","self","销毁","bridge","点画","通过","代码","points","初始化","info","去除","参数","库","父类","-","image","array","1","一些","circle","编译","bgr","使用","10","boundingrect","90","}","from","callback","读取","data","计算","x","255","太小","入口","numpy","np","args","/","findcontours","提示","d","128","ros2","drawcontours","居","color","类","设置","面积","hsv","左上","日志","类型","rclpy","[","shape","y","xy","in","\"","及","古月","subscription","配置","raw","cvtcolor","continue","中","]","创建","cnt","usr","图像","回调","py","=","初始","value","与","为","功能","<","）","作者","苹果","将","mask","点","object","用于","utf","模型","def",":","勾勒","文件","msg","#","宽","destroy","：","退出","console","list","ros","函数","选项","env",",","上限","表示","receiving","entry","upper","learning","shutdown","lower","180","等待","retr","none","长度","python3","cv","bin","让","转换"," ","scripts","轮廓","to","super","处理","setup","接口","识别","*","declare","效果","bgr8","opencv","cv2","waitkey","img","信息","0","高","2","for","化成","坐标",")","对象","，","噪声","数值","detect","互相","as","参数值","系统","话题","颜色","订阅","消息","logger","inrange","打开","main","输出","队列","+","listener","节点","integer","范围","%","从","cvbridge","(","get","name","python","h","和","imshow","并","转化成","关闭","、","显示","frame","目标","@","!","coding","sensor","5","8","一个","approx","150","www","示例","出来","循环","所在","图像处理"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["-","en","html","tutorials",".","https","humble",":","ros","/","docs","org","parameters","understanding","ros2"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/","text":"分布式通信 智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统，可以实现多计算平台上的任务分配。 分布式通信 什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。 分布式网络搭建 除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。 树莓派配置 在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。 装系统 我们先要给树莓派装系统，这里我们选择的是Ubuntu Mate针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/ 装ROS2 在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。 编译代码 将我们课程的代码也下载到树莓派中，进行编译。 远程桌面 如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728 分布式数据传输 树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 * 如使用虚拟机，请将虚拟机网络修改为桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。 分布式网络分组 没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。 案例一：小海龟分布式控制 分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动。 $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端 案例二：话题分布式通信 我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串。 $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端 案例三：服务分布式通信 话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能。 案例四：机器视觉分布式应用 以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体。 $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。 参考链接 https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["则","笔记","传输","典型","感觉","实现","求和","org","比较","原本","岂","并且","后","是否","完成","而言","我们","一下","通过","他们","一致","反过来","用到","-","编译","还","一些","像","客户端程序","下来","分组","就是","demo","没","消耗","/","感器","小海","mate","$","ros2","应用","客户端","？","想","繁多","相互","出现","显示器","据传","流畅","几乎","电机","链接","再","分布式应用","#","key","来","字符","多","服务","放置","感受","中有","的话","复杂","派装","hello","主要","卡顿","任何","局域","都","这些","不过","虚拟机","小组","方便","不够","docs","设计","webcam","，","先要","带来","系统","订阅","teleop","监控","提供","务器","通信","问题","和","端","字符串","在","远程","即可","资料","一个","讲","html","计算机","派","id",".","上边","开发","整体","红色","122599728","sub","只要","多个","端的","全都","进行","net","命令行","互通","过","之外","有点","csdn","各种","选择","看上去","你","分布","机器人","qq","基本一致","run","en","视觉","发布者","采集","虚拟","接下来","直接","希望","计算","实时","智能","遇到","挺","talker","很多","details","摄像头","经常","像头","配置","案例","运动","分布式系统","发生","模式","一切","放","而是","不","sd",":","：","连接","每","一系列","传感","顺利实现","个","位于","下载","一","上","cam","仿真","拆解","learning","平台","turtle","机制","有","这种","能力","下","魅力","信息","运行","确保","算机","真有","helloworld","cpp","似乎","所","实际","download","、","此外","起来","基本","真器","频繁","服务器","数据","小型","结构","会","到","带领","例程","者","笔记本","这","流程","分配","node","更强","卡中","互联","试试","的","编写","程序","里","之后","布式","远程桌面","计算能力","处于","针对","数据传输","ubuntu","usb","我","适合","。","your","具体","类似","也","物体","事情","没有","框架","毕竟","操作","如果","减轻","还是","局域网络","环境","这样","之前","完全","建立","支持","topic","一系","笔记本电脑","domain","concepts","py","=","功能","之间","turtlesim","已经","叫","一样","非常","参考","命令","驱动","ros","轻松","export","做","好","网上","启动"," ","处理","*","先","一句","派里","键盘","识别","客户","采用","请","访问","如","就","派端","款","资源","模拟","小","发给","只","啦","等","不在话下","可能","节点","listener","组成","放在","机器","学习","装","之一","打通","任务","两个","海龟","讲过","压力","可以","另外","article","这里","作为","无法","52785580","过来","二","电脑","以上","分布式","需要","呢","给","这么","或者","加入","如下","安装","动作","exe","_","变化","继续","看上","pub","任务分配","代码","控制器","于是","同一","步骤","不同","使用","桥接","用","成功","—","https","不是","三","bashrc","简而言之","除了","课程","依然",">","体积","顺利","pc","中","反过","图像","修改","两者","较","发布","为","nodes","<","将","了","由","是","性能","测试","服务器程序","传感器","然后","大家","摄像","鼠标","才能","什么","同一个","接下","上去","world","效果","加法","仿真器","humble","经典","控制","镜像","话题","如此","局域网","搭建","不在","树莓","系列","比如","友好","并","小海龟","网络","情况","显示","安排","神奇","烧写","四","blog","about","方法","变得","桌面"],"title":"**分布式通信**","title_tokens":["布式","分布式","分布","*","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_1","text":"智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统，可以实现多计算平台上的任务分配。","text_tokens":["会","不够","运行","。","就是","压力","可以","到","算机","，","实现","计算","这","多","分配","系统","不是","多个","等","全都","如果","智能","遇到","岂","减轻","上","分布式","放在","拆解","的","机器","经常","平台","？","卡顿","、","情况","里","繁多","这些","布式","出现","中","分布式系统","分布","计算能力"," ","任务","机器人","一个","任务分配","处理","功能","计算机","能力","将"],"title":"分布式通信","title_tokens":["布式","分布式","分布","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_2","text":"什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。","text_tokens":["数据","结构","上边","开发","笔记","传输","压力","可以","另外","到","典型","带领","实现","笔记本","这","作为","分配","电脑","更强","比较","原本","分布式","需要","的","过","并且","有点","各种","看上去","布式","变化","分布","看上","我们","机器人","控制器","于是","还","视觉","适合","下来","不同","。","就是","接下来","也","计算","消耗","感器","框架","毕竟","减轻","挺","应用","环境","之前","完全","？","体积","相互","配置","运动","分布式系统","中","笔记本电脑","较","为","放","功能","之间","电机","将","了","已经","由","叫","不","是","性能","非常","每","传感器","驱动","传感","多","大家","ros","感受","位于","一","上","复杂","做","主要","什么","平台","任何","接下","好","都","这些","有"," ","不过","上去","处理","这种","派里","下","魅力","信息","采用","方便","就","运行","设计","款","算机","，","资源","控制","小","系统","只","监控","等","树莓","可能","节点","通信","比如","组成","放在","机器","和","此外","起来","在","远程","之一","任务","两个","一个","讲","计算机","派"],"title":"分布式通信","title_tokens":["布式","分布式","分布","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_3","text":"除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。","text_tokens":["我","。","笔记","使用","另外","，","计算","控制","笔记本","模拟","放置","电脑","除了","树莓","上","的","机器","之外","平台","选择","在","笔记本电脑","我们","机器人","一个","控制器","派","了"],"title":"分布式网络搭建","title_tokens":["布式","分布式","分布","搭建","网络"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_4","text":"在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。","text_tokens":["开发","。","参考","可以","也","，","大家","树莓","很多","需要","环境","的","之前","好","配置","都","网上","在","有","资料","我们","先","派"],"title":"树莓派配置","title_tokens":["树莓","派","配置"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_5","text":"我们先要给树莓派装系统，这里我们选择的是Ubuntu Mate针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/","text_tokens":["-",".","sd",":","是","就","。","：","可以","到","，","这里","先要","镜像","系统","https","/","org","卡中","mate","树莓","下载","链接","派装","给","的","download","选择","ubuntu","之后","烧写","启动"," ","针对","我们","派","了"],"title":"装系统","title_tokens":["装","系统"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#ros2","text":"在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。","text_tokens":["在","中","，","流程","的","一样"," ","系统","和","电脑","。","安装","好","mate","端","ubuntu","ros2"],"title":"装ROS2","title_tokens":["装","ros2"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_6","text":"将我们课程的代码也下载到树莓派中，进行编译。","text_tokens":["中","，","编译","树莓","下载","派","的","我们","。","代码","进行","到","也","课程","将"],"title":"编译代码","title_tokens":["编译","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_7","text":"如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728","text_tokens":[".","不","方便","访问",":","就","。","使用","参考","：","整体","article","可以","连接","直接","，","也","122599728","流程","52785580","系统","https","大家","电脑","鼠标","/","操作","桌面","以上","如果","树莓","net","的话","链接","上","的","details","和","如下","csdn","好","网络","端","_","配置","显示","在","远程桌面","远程","基本","有"," ","显示器","步骤","基本一致","blog","通过","qq","一致","键盘","派","了"],"title":"远程桌面","title_tokens":["远程桌面","远程","桌面"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_8","text":"树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 * 如使用虚拟机，请将虚拟机网络修改为桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。","text_tokens":["会","讲过","可以","到","感觉","者","实现","这","无法","只要","电脑","互联","命令行","需要","呢","互通","的","并且","如下","安装","动作","后","_","里","完成","你","而言","处于","我们","一下","他们","run","同一","发布者","像","下来","分组","。","使用","桥接","用","虚拟","demo","接下来","具体","直接","也","希望","计算","事情","简而言之","如果","$","talker","ros2","局域网络","很多","这样","之前","？","配置","pc","发生","中","模式","修改","py","发布","为","nodes","之间","将","了","已经","一样","而是","不","是","测试","#","：","命令","连接","服务","个","中有","做","什么","同一个","平台","局域","接下","好","都","启动"," ","不过","*","能力","效果","虚拟机","小组","请","如","就","派端","确保","算机","，","带来","话题","订阅","局域网","cpp","等","树莓","listener","所","通信","节点","问题","和","并","网络","、","端","神奇","在","打通","两个","一个","计算机","派"],"title":"分布式数据传输","title_tokens":["布式","分布式","数据","分布","据传","传输","数据传输"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_9","text":"没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。","text_tokens":["id","小组",".","一样","分组","不同","就","your","则","。","：","<","可以","没","到","类似","算机","，","实现","计算","无法","分配","电脑","bashrc","ros","端的","export","如果","树莓","提供","ros2","通信","问题","这样","的","才能",">","同一个","和","加入","机制","_","配置","在","中","即可","处于","domain","两者"," ","我们","将","一个","=","计算机","一句","同一","派","了"],"title":"分布式网络分组","title_tokens":["布式","分布式","分布","分组","网络"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_10","text":"分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动。 $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端","text_tokens":["已经","一些","仿真器","。","测试","#","key","派端","成功","经典","可以","例程","来","，","也","—","控制","过来","node","ros","电脑","真有","小海","teleop","树莓","似乎","$","节点","通信","上","ros2","试试","分布式","仿真","依然","run","建立","的","之前","这么","或者","过","想","学习","小海龟","网络","反过来","turtle","端","_","是否","案例","运动","pc","布式","神奇","中","继续","在","分布","真器","启动","反过"," ","海龟","我们","流畅","先","turtlesim","键盘","派","了"],"title":"案例一：小海龟分布式控制","title_tokens":["布式","分布式","控制","分布","海龟","小海","：","小海龟","案例","一"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_11","text":"我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串。 $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端","text_tokens":["发布者","不","。","使用","#","派端","可以","直接","例程","，","字符","者","sub","作为","话题","电脑","订阅","helloworld","树莓","$","run","通信","ros2","试试","呢","的","之前","hello","learning","编写","？","任何","情况","_","字符串","端","是否","pc","在","topic","修改"," ","pub","我们","发布","代码","world","先","派","下"],"title":"案例二：话题分布式通信","title_tokens":["布式","分布式","分布","二","话题","：","案例","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_12","text":"话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能。","text_tokens":["客户","加法","客户端程序","。","运行","派端","服务器程序","可以","也","，","实现","顺利实现","服务","求和","话题","没有","电脑","不在","不在话下","树莓","务器","还是","问题","客户端","程序","端","顺利"," ","我们","服务器","功能"],"title":"案例三：服务分布式通信","title_tokens":["布式","分布式","分布","服务","三","：","案例","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_13","text":"以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体。 $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。","text_tokens":["小型","会","开发","可以","红色","例程","sub","只要","node","电脑","端的","以上","分布式","需要","的","exe","_","布式","分布","我们","机器人","通过","代码","run","usb","用到","还","视觉","下来","采集","。","使用","没","接下来","类似","也","物体","没有","实时","$","ros2","摄像头","？","像头","配置","pc","支持","中","topic","图像","一系","修改","一切","为","几乎","功能","将","了","再","不","非常","测试","#","连接","一系列","然后","摄像","ros","轻松","上","cam","复杂","做","learning","任何","接下","好","都","这些"," ","处理","识别","不够","webcam","派端","，","模拟","系统","发给","如此","啦","搭建","树莓","系列","提供","节点","问题","友好","机器","实际","网络","端","安排","在","频繁","一个","方法","变得","派"],"title":"案例四：机器视觉分布式应用","title_tokens":["布式","应用","分布式","视觉","四","分布","机器","分布式应用","：","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_14","text":"https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["-","en","id",".","https","humble","concepts",":","ros","domain","/","docs","org","about","html"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2_%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/","text":"从本节开始，我们将进入第二个篇章，以ROS2的核心概念为线索，详细讲解ROS2的应用开发方法。","text_tokens":["开始","讲解","开发","。","，","进入","概念","本节","线索","从本节","ros2","应用","详细","以","的","核心","篇章","二个","第二个","第二","我们","开发方法","为","方法","将"],"title":"2 核心概念","title_tokens":["概念","核心","2"," "]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/","text":"Launch：多节点启动与配置脚本 到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是Launch启动文件。 它是ROS系统中多节点启动与配置的一种脚本。 Launch文件 这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。 多节点启动 运行效果 文件解析 learning_launch/simple.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'learning_topic' , executable = 'topic_helloworld_pub' , ), Node ( package = 'learning_topic' , executable = 'topic_helloworld_sub' , ), ]) 命令行参数配置 运行效果 文件解析 learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): rviz_config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ Node ( package = 'rviz2' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' , rviz_config ] ) ]) 资源重映射 运行效果 文件解析 learning_launch/remapping.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , namespace = 'turtlesim2' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , executable = 'mimic' , name = 'mimic' , remappings = [ ( '/input/pose' , '/turtlesim1/turtle1/pose' ), ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), ] ) ]) ROS参数设置 运行效果 文件解析 learning_launch/parameters.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node def generate_launch_description (): background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) ) return LaunchDescription ([ background_r_launch_arg , background_g_launch_arg , background_b_launch_arg , Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [{ 'background_r' : LaunchConfiguration ( 'background_r' ), 'background_g' : LaunchConfiguration ( 'background_g' ), 'background_b' : LaunchConfiguration ( 'background_b' ), }] ), ]) learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , namespace = 'turtlesim2' , name = 'sim' , parameters = [ config ] ) ]) Launch文件包含 运行效果 文件解析 learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction from launch_ros.actions import PushRosNamespace def generate_launch_description (): parameter_yaml = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ parameter_yaml_with_namespace ]) learning_launch/parameters_nonamespace.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [ config ] ) ]) 功能包编译配置 ... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ... 参考链接 https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docsros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["合剂","丰富",".","text","xml","glob","rviz","launchconfiguration","可以","所有","到","mimic","那","例程","带领","config","sub","remapping","packages","'","目前","84","node","{","files","org","substitutions","完整","进行","arg","命令行","path","麻烦","好像","需要","呢","没错","的","它","import","...","或者","编写","parameter","各种","_","看上去","各个","包","肯定","看上","组装","sim","pub","vel","我们","机器人","remappings","通过","代码","with","参数","-","编译","还","en","多样化","像","这是","。","描述","使用","就是","parameters","using","}","类似","大大","也","from","data","https","没有","turtlesim2","/","每次","package","join","cmd","d","background","ros2","很多","有没有","粘合","这样","return","ament","设置","频次","基于","终端","index","？","新","[","乍","配置","arguments","参数设置","出现","中","]","topic","一系","actions","每当","py","=","value","答案","与","input","功能","turtlesim","链接","了","r","includelaunchdescription","generate","resource","一样","方式","为止","def",":","是","文件","output","参考","：","命令","textsubstitution","来","多样","一系列","多","大家","ros","turtle1","输入","之高","映射","sources",",","projects","重","解析","learning","核心","turtle","好","都","了解","启动"," ","b","上去","g","*","效果","groupaction","docsros","模版","0","humble","一种","for","甚至","nonamespace","运行","就","一次","相当","os","前为","launchdescription","docs","large","pythonlaunchdescriptionsource","，",")","资源","turtlesim1","包含","rviz2","系统","编程","呀","yaml","打开","launch","helloworld","阅读","declarelaunchargument","+","share","main","系列","executable","节点","原有","当然","目前为止","粘合剂","tutorials","目的","(","机器","get","python","脚本","和","simple","name","namespaces","pushrosnamespace","directory","default","如何","一次性","在","自由","description","122","一个","过程","中多","namespace","html","pose"],"title":"**Launch：多节点启动与配置脚本**","title_tokens":["启动","多","脚本","：","launch","与","*","配置","节点"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch","text":"到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是Launch启动文件。 它是ROS系统中多节点启动与配置的一种脚本。","text_tokens":["方式","为止","一种","是","文件","运行","。","一次","就是","前为","命令","可以","到","所有","那","，","目前","系统","没有","ros","呀","每次","打开","launch","节点","当然","很多","目前为止","需要","麻烦","这样","的","有没有","呢","机器","它","终端","脚本","？","新","好","配置","都","一次性","中","肯定","启动","每当"," ","我们","机器人","一个","答案","中多","与"],"title":"Launch：多节点启动与配置脚本","title_tokens":["启动","多","脚本","：","launch","与","配置","节点"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_1","text":"这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。","text_tokens":["合剂","丰富","可以","那","例程","带领","完整","进行","命令行","好像","没错","呢","的","它","或者","编写","各种","看上去","各个","组装","看上","我们","通过","代码","参数","还","多样化","像","这是","描述","。","使用","就是","类似","大大","也","ros2","很多","粘合","这样","频次","基于","乍","配置","出现","中","一系","功能","了","一样","是","文件","命令","来","多样","一系列","大家","ros","输入","之高","核心","了解","启动"," ","上去","模版","甚至","就","相当","，","系统","编程","呀","launch","阅读","系列","节点","原有","粘合剂","目的","python","和","如何","在","自由","一个","过程"],"title":"Launch文件","title_tokens":["文件","launch"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_1","text":"","text_tokens":[],"title":"多节点启动","title_tokens":["多","节点","启动"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_2","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_3","text":"learning_launch/simple.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'learning_topic' , executable = 'topic_helloworld_pub' , ), Node ( package = 'learning_topic' , executable = 'topic_helloworld_sub' , ), ])","text_tokens":["generate",".","def",":","launchdescription","from",")","sub","'","node","ros","/","package","helloworld","launch",",","executable","import","return","(","learning","simple","[","_","]","topic","actions"," ","pub","py","description","="],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_4","text":"","text_tokens":[],"title":"命令行参数配置","title_tokens":["命令","命令行","参数","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_5","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_6","text":"learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): rviz_config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ Node ( package = 'rviz2' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' , rviz_config ] ) ])","text_tokens":["-","generate",".","def",":","os","rviz","launchdescription","from","config",")","packages","rviz2","'","node","ros","/","package","join","launch","d","share",",","executable","path","import","ament","return","(","learning","get","python","name","index","[","turtle","directory","_","arguments","]","actions"," ","py","description","="],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_7","text":"","text_tokens":[],"title":"资源重映射","title_tokens":["映射","重","资源"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_8","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_9","text":"learning_launch/remapping.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , namespace = 'turtlesim2' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , executable = 'mimic' , name = 'mimic' , remappings = [ ( '/input/pose' , '/turtlesim1/turtle1/pose' ), ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), ] ) ])","text_tokens":["generate",".","def",":","output","launchdescription","mimic","from",")","remapping","turtlesim1","'","node","ros","turtlesim2","/","turtle1","package","cmd","launch",",","executable","import","return","(","learning","name","[","_","]","actions","sim"," ","vel","py","description","=","namespace","remappings","input","turtlesim","pose"],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#ros","text":"","text_tokens":[],"title":"ROS参数设置","title_tokens":["设置","参数设置","参数","ros"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_10","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_11","text":"learning_launch/parameters.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node def generate_launch_description (): background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) ) return LaunchDescription ([ background_r_launch_arg , background_g_launch_arg , background_b_launch_arg , Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [{ 'background_r' : LaunchConfiguration ( 'background_r' ), 'background_g' : LaunchConfiguration ( 'background_g' ), 'background_b' : LaunchConfiguration ( 'background_b' ), }] ), ]) learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , namespace = 'turtlesim2' , name = 'sim' , parameters = [ config ] ) ])","text_tokens":["r","generate",".","0","def","text",":","os","launchconfiguration","parameters","launchdescription","textsubstitution","}","from","config",")","packages","'","84","node","ros","turtlesim2","/","{","package","declarelaunchargument","launch","substitutions","background","yaml","join",",","arg","executable","share","path","import","return","ament","(","learning","name","python","get","index","[","directory","default","_","]","actions","sim"," ","py","description","=","value","b","122","namespace","g","turtlesim"],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_2","text":"","text_tokens":[],"title":"Launch文件包含","title_tokens":["文件","launch","包含"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_12","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_13","text":"learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction from launch_ros.actions import PushRosNamespace def generate_launch_description (): parameter_yaml = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ parameter_yaml_with_namespace ]) learning_launch/parameters_nonamespace.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [ config ] ) ])","text_tokens":["groupaction","includelaunchdescription","generate",".","def",":","nonamespace","os","parameters","launchdescription","pythonlaunchdescriptionsource","from","config",")","packages","'","node","ros","turtlesim2","/","yaml","package","join","launch","sources","share",",","executable","path","import","ament","return","(","learning","namespaces","python","get","name","index","pushrosnamespace","[","directory","parameter","_","]","actions","sim"," ","py","description","=","namespace","with","turtlesim"],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_14","text":"... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ...","text_tokens":["resource",".","xml","os","glob","rviz","config",")","data","packages","'","/","files","package","join","launch","+","share",",","path","...","ament","(","name","index","[","_","]"," ","=","py","*"],"title":"功能包编译配置","title_tokens":["功能","包","编译","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docsros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["-","en","docsros",".","humble",":","for","docs","using","large","https","ros","/","org","launch","main","projects","ros2","tutorials"," ","html"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/","text":"TF：机器人坐标系管理神器 坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器——TF。 机器人中的坐标系 机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做基坐标系Base Frame，机器人安装位置在外部环境下的参考系叫做世界坐标系World Frame，机器人末端夹爪的位置叫做工具坐标系，外部被操作物体的位置叫做工件坐标系，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是基坐标系Base Link，雷达所在的位置叫做雷达坐标系laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做里程计坐标系odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做地图坐标系map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为平移和旋转两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实向量的数学描述。 ROS中TF功能的底层原理，其实就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。 TF命令行操作 ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。 小海龟跟随例程 这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 查看TF树 $ ros2 run tf2_tools view_frames 查询坐标变换信息 $ ros2 run tf2_ros tf2_echo turtle2 turtle1 坐标系可视化 $ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。 静态TF广播 我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为静态TF变换，我们来看看在程序中该如何实现？ 运行效果 $ ros2 run learning_tf static_tf_broadcaster 代码解析 learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？ TF监听 我们再来学习下如何查询两个坐标系之间的位置关系。 运行效果 $ ros2 run learning_tf tf_listener 代码解析 learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。 海龟跟随功能解析 运行效果 $ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 原理解析 在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？这两个向量我们可以根据海龟的位置话题计算出来，那这个位置向量不就容易得到了么。 我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心是这个向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。 Launch文件解析 learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ]) 坐标系动态广播 learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 海龟跟随 learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":["获取","msgs","com","看看","sqrt","广播","echo","turtle2","__","激光","那","发生变化","末端","查询","实现","缓冲","create","看",".__","5.0","神器","不要","pitch","房子","org","说明","quaternion","（","false","后","是否","拆","容易","完成","vel","跟随运动","我们","通过","参数","link","-","父类","编译","还","一些","其中","finished","描述","f","就是","demo","没","管理","now","定时","callback","入口","爪","转变成","/","package","小海","相应","$","ros2","夹","return","apt","客户端","roll","？","rclpy","很","[","base","\"","time","欧拉角","subscription","么","创建","]","看似","初始","距离","按照","）","链接","rotation","再","解决","frames","key","#","左边","准备就绪","来","内容","某","姿态","一本","服务","turtle1","选项","函数","雷达","关系","计算出来","复杂","主要","自动","buffer","都","这些","源","else","出","true","这个","super","setup","原理","一种","translation","docs","管理系","坐标","绝对","，",")","工具","rviz2","系统","最为","可视化","根据","消息","四元","trans","叫做","teleop","declarelaunchargument","turtlename","订阅","发送","提供","clock","child","务器","tutorials","说","get","publisher","float","和","not","default","有所","漂移","部分","如何","header","在","标志","prefix","存在","管理系统","一个","戳","是不是","description","5","示例","html","呗","旋转","试一试","id","quat","动机","0.0","产生",".","加","要","statictfbroadcaster","launchconfiguration","箭头","static","现在","'","只要","关于","树","successfully","turtlefollowing","substitutions","监听","作用","进行","命令行","could","map","理论知识","有点","parameter","抓取","应该","中心","sim","self","laser","两只","机器人","销毁","默认值","tf","run","en","及时","时候","监听器","string","查看","计算","重要","args","格外","位置","lookup","连线","很多","居","详细","install","动","动态","内","xy","时刻","被","配置","案例","运动","发生","否则","不会","call","线速度","位","该","速度","还会","算法","点","angular","定时器","def","不",":","broadcaster2","转变","外部环境","msg","destroy","：","显得","每","中间","console","基础","不变","--","transformstamped","上","仿真","同理","entry","称之为","learning","定义","turtle","none","空间","三个","service","有","让","转换","scripts","就绪","这种","缓冲区","turtletfbroadcaster","declare","下","信息","封装","角速度","0","2","移动","rel","运行","launchdescription","对象","慢慢","便于","怎样","1.0","基","欧拉","保存","async","share","一起","executable","准备","(","良好","关闭","、","起来","分解","frame","@","简单","基本","真器","生成","固定","10.0","过程","服务器","出来","一层","result","更新","数据","会","到","例程","sendtransform","挑战","者","这","至关","node","q","if","4","得到","世界","里程","一只","ex","试试","import","的","知识","publish","随便","编写","程序","之后","broadcaster1","存储","平移","view","points","两者之间","z","yaw","the","初始化","生变","。","parameters","中心点","具体","from","移动机器人","也","物体","中画","theta","参考系","没有","cmd","外部","操作","d","如果","send","tools","speed","类","环境","设置","transformlistener","这样","里程计","linear","y","古月","默认","工件","usr","actions","py","=","value","与","功能","之间","turtlesim","已经","generate","一样","statictransformbroadcaster","rate","非常","参考","命令","又","形态","退出","s","对","transformexception","累积","ros","math","env","跟随","做","激光雷达","核心","名称","好","等待","理论","python3","怎么样","client","背后","启动"," ","中该","euler","stamp","处理","误差","接口","*","先","意思","客户","讲解","就","报告","角度","house","想起","as","transformations","timer","spawning","怎么","launch","啦","所以","+","spawned","listener","节点","机器","python","向量","odom","学习","目标","请求","!","失败","指令","两个","海龟","周期","8","transformation","臂","所在","try","清楚","器类","又会有","geometry","w","段","地图","guyuehome","四乘","当前","twist","rviz","可视","transform","另外","可以","forward","init","done","进入","保持","包括","名","{","完整","spin","时","知道","需要","呢","给","加入","ready","如下","安装","tflistener","_","包","变化","理解","继续","broadcaster","class","is","代码","request","数","pkg","on","info","库","至关重要","1","tf2","时间","使用","3","用","成功","}","—","x","底层","哪个","following","得","不是","https","提示","atan2","你家","依然","基于",">","中","教材","之为","两者","回调","发布","算出","矩阵","为","scale","变得复杂","作者","了","将","经过","其实","utf","是","文件","然后","大家","变成",",","着急","表示","解析","shutdown","pos","熟悉","哪些","长度","了解","bin","to","except","target","world","底盘","向","人学","效果","仿真器","器","humble","sudo","变换","source","transformbroadcaster","概念","数值","控制","不断","机器人学","常见","机械","参数值","话题","logger","相对","优先","打开","main","静态","范围","比如","%","异常","srv","数学","name","坐标系","spawner","全局","并","小海龟","情况","方向","高中","spawn","四","coding","循环","www","方法","变得","pose"],"title":"**TF：机器人坐标系管理神器**","title_tokens":["神器","机器","坐标系","机器人","坐标","：","*","tf","管理"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf","text":"坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器——TF。","text_tokens":["人学","会","是","非常","。","坐标","管理","也","，","概念","—","机器人学","基础","神器","系统","重要","ros","完整","位置","提供","关系","很多","的","给","机器","坐标系","？","熟悉","这些","如何","在","中"," ","我们","机器人","一个","存在","该","之间","tf","了"],"title":"TF：机器人坐标系管理神器","title_tokens":["神器","机器","坐标系","机器人","坐标","：","tf","管理"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_1","text":"机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做基坐标系Base Frame，机器人安装位置在外部环境下的参考系叫做世界坐标系World Frame，机器人末端夹爪的位置叫做工具坐标系，外部被操作物体的位置叫做工件坐标系，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是基坐标系Base Link，雷达所在的位置叫做雷达坐标系laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做里程计坐标系odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做地图坐标系map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为平移和旋转两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实向量的数学描述。 ROS中TF功能的底层原理，其实就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。","text_tokens":["又会有","动机","会","地图","要","四乘","可以","那","末端","至关","关于","进行","世界","里程","呢","的","知识","map","理论知识","安装","抓取","中心","变化","laser","机器人","平移","我们","通过","两者之间","tf","link","至关重要","一些","。","描述","使用","就是","方法","中心点","移动机器人","也","管理","物体","中画","爪","底层","参考系","重要","格外","外部","位置","操作","夹","详细","环境","里程计","？","内","base","被","工件","中","教材","两者","看似","矩阵","为","功能","之间","变得复杂","了","其实","一样","是","外部环境","参考","显得","形态","每","一本","对","累积","大家","ros","雷达","关系","跟随","复杂","主要","哪些","都","这些","空间","理论","有"," ","出","这个","world","误差","下","人学","原理","封装","移动","讲解","就","管理系","变换","坐标","绝对","，","工具","不断","机器人学","机械","系统","相对","叫做","基","范围","比如","机器","数学","坐标系","良好","和","向量","odom","漂移","分解","frame","部分","在","简单","基本","四","固定","旋转","两个","管理系统","一个","过程","臂","所在","一层","变得"],"title":"机器人中的坐标系","title_tokens":["中","的","机器","坐标系","机器人","坐标"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_1","text":"ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。","text_tokens":["算法","一种","。","使用","坐标","，","ros","小海","tf","跟随","呢","的","机器","基于","坐标系","？","小海龟","如何","中","了解","两只","我们","海龟","机器人","通过","示例","该","先","下"],"title":"TF命令行操作","title_tokens":["命令","tf","命令行","操作"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_2","text":"这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key","text_tokens":["效果","-","其中","tf2","会",".","humble","文件","就","。","sudo","运行","key","另外","可以","demo","具体","来","，","控制","然后","ros","小海","相应","launch","teleop","run","$","一只","跟随","ros2","tools","需要","install","的","自动","apt","？","turtle","安装","小海龟","_","如何","运动","之后","包","启动"," ","跟随运动","海龟","我们","py","一个","这个","通过","示例","功能","试一试","先","turtlesim"],"title":"小海龟跟随例程","title_tokens":["海龟","小海","小海龟","例程","跟随"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_2","text":"$ ros2 run tf2_tools view_frames","text_tokens":["tools","tf2","frames"," ","view","_","run","$","ros2"],"title":"查看TF树","title_tokens":["树","查看","tf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_3","text":"$ ros2 run tf2_ros tf2_echo turtle2 turtle1","text_tokens":["tf2"," ","ros","turtle1","echo","turtle2","_","run","$","ros2"],"title":"查询坐标变换信息","title_tokens":["变换","查询","坐标","信息"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_4","text":"$ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。","text_tokens":["-","原理","tf2",".","是","。","rviz","使用","方法","来",")","，","慢慢","便于","这","rviz2","怎样","不要","大家","/","小海","d","--","share","tf","$","着急","跟随","ros2","呢","的","(","？","turtle","有点","小海龟","先","_","案例","理解","背后","了解"," ","prefix","py","海龟","我们","pkg","run","意思","下"],"title":"坐标系可视化","title_tokens":["坐标","可视","坐标系","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_3","text":"我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为静态TF变换，我们来看看在程序中该如何实现？","text_tokens":["生变","看看","不","是","就","。","激光","变换","坐标","那","管理","，","发生变化","也","来","对","实现","常见","哪个","只要","系统","最为","相对","房子","位置","作用","进行","雷达","静态","关系","比如","你家","试试","的","说","激光雷达","机器","主要","坐标系","称之为","和","？","很","安装","好","程序","应该","情况","拆","如何","之后","简单","中","发生","变化","在","基本","之为","不会"," ","中该","我们","机器人","一个","这个","这种","呗","之间","tf","底盘"],"title":"静态TF广播","title_tokens":["广播","静态","tf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_5","text":"$ ros2 run learning_tf static_tf_broadcaster","text_tokens":["broadcaster","learning"," ","tf","_","run","$","static","ros2"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_6","text":"learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？","text_tokens":["geometry","com","msgs","id","quat","w","0.0","段",".","guyuehome","statictfbroadcaster","广播","__","transform","init","到","sendtransform","static","查询","这","'","5.0","保持","node","pitch","{","说明","spin","进行","知道","quaternion","（","需要","呢","import","的","加入","编写","如下","后","程序","_","完成","包","变化","broadcaster","class","self","销毁","平移","我们","代码","points","z","数","yaw","初始化","tf","库","父类","-","编译","1","tf2","时候","时间","描述","使用","3","}","from","now","x","入口","args","/","位置","ros2","居","类","设置","roll","？","rclpy","[","y","\"","古月","欧拉角","配置","中","创建","]","usr","py","初始","=","为","该","功能","）","作者","将","经过","了","点","rotation","utf","statictransformbroadcaster","def",":","是","文件","msg","#","destroy","：","又","退出","console","不变","ros","选项","env",",","关系","transformstamped","entry","learning","shutdown","等待","none","python3","源","bin","让","转换"," ","scripts","to","super","world","stamp","euler","setup","接口","*","向","器","0","2","translation","变换","坐标",")","对象","house","，","系统","transformations","消息","四元","打开","欧拉","main","静态","child","节点","clock","(","get","name","python","坐标系","并","、","frame","如何","目标","@","header","!","10.0","coding","两个","8","一个","戳","循环","www","示例","旋转","清楚","器类"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_4","text":"我们再来学习下如何查询两个坐标系之间的位置关系。","text_tokens":["查询","再","的","两个","我们","坐标系","。","学习","位置","之间","坐标","来","如何","关系","下"],"title":"TF监听","title_tokens":["tf","监听"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_7","text":"$ ros2 run learning_tf tf_listener","text_tokens":["learning"," ","tf","_","run","$","listener","ros2"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_8","text":"learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。","text_tokens":["获取","quat","com","w",".","guyuehome","当前","__","transform","init","到","static","进入","挑战","缓冲","create","现在","'","node","名","{","说明","监听","spin","进行","ex","知道","（","quaternion","需要","import","的","could","加入","编写","如下","tflistener","parameter","后","_","程序","完成","包","继续","存储","broadcaster","class","self","两只","默认值","销毁","我们","代码","points","z","on","数","初始化","info","tf","参数","库","父类","-","编译","1","tf2","时间","监听器","f","。","使用","用","string","}","from","now","定时","x","入口","args","/","外部","位置","如果","lookup","ros2","居","类","transformlistener","设置","return",">","rclpy","[","y","时刻","\"","time","古月","配置","案例","默认","创建","否则","]","usr","py","初始","=","value","功能","之间","）","作者","了","点","rotation","utf","定时器","def",":","文件","#","destroy","：","左边","退出","某","姿态","s","对","console","transformexception","大家","ros","选项","--","env",",","跟随","entry","learning","shutdown","pos","等待","好","buffer","none","python3","源","了解","bin","让"," ","scripts","to","except","target","super","world","处理","euler","setup","接口","*","缓冲区","declare","信息","0","2","translation","报告","变换","source","坐标",")","，","house","对象","数值","参数值","as","系统","transformations","timer","1.0","logger","优先","trans","四元","保存","main","打开","啦","listener","节点","%","异常","(","get","name","坐标系","python","并","not","关闭","有所","frame","目标","@","基本","!","固定","失败","coding","两个","周期","8","一个","循环","海龟","www","示例","try"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_9","text":"","text_tokens":[],"title":"海龟跟随功能解析","title_tokens":["功能","海龟","跟随","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_10","text":"$ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key","text_tokens":["demo",".","learning"," ","following","py","turtle","turtlesim","launch","teleop","key","_","tf","$","run","ros2"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_11","text":"在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？这两个向量我们可以根据海龟的位置话题计算出来，那这个位置向量不就容易得到了么。 我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心是这个向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。","text_tokens":["加","要","广播","turtle2","可以","箭头","那","例程","实现","看","这","监听","得到","时","的","随便","中心","容易","两只","我们","代码","tf","1","时间","。","描述","就是","用","中心点","也","计算","参考系","得","不是","位置","连线","这样","设置","动","动态","？","很","运动","中","么","两者","发布","算出","距离","速度","按照","与","该","还会","了","再","解决","不","是","参考","中间","某","然后","turtle1","表示","计算出来","跟随","上","仿真","同理","做","定义","核心","好","三个","长度","怎么样","有"," ","这个","world","向","下","仿真器","封装","2","就","变换","角度","坐标","，","想起","不断","话题","根据","相对","怎么","叫做","所以","一起","比如","说","坐标系","和","全局","向量","学习","起来","方向","高中","如何","在","真器","海龟","两个","周期","一个","是不是","出来","方法"],"title":"原理解析","title_tokens":["原理","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#launch","text":"learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ])","text_tokens":["generate",".","def",":","broadcaster2","turtle2","launchconfiguration","parameters","launchdescription","demo","}","from",")","'","following","node","ros","/","{","package","declarelaunchargument","launch","substitutions","turtlename","turtle1",",","executable","listener","import","return","(","learning","name","[","turtle","default","_","frame","broadcaster1","]","broadcaster","actions","sim"," ","py","description","=","value","target","tf","turtlesim"],"title":"Launch文件解析","title_tokens":["文件","launch","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_12","text":"learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], },","text_tokens":["获取","geometry","com","msgs","id","w","更新","0.0",".","guyuehome","广播","__","transform","init","到","sendtransform","static","者","create","'","node","pitch","q","{","说明","spin","进行","知道","quaternion","（","需要","import","的","加入","编写","如下","parameter","后","程序","_","完成","包","变化","broadcaster","class","self","默认值","平移","销毁","代码","the","points","z","数","yaw","初始化","tf","参数","库","父类","-","编译","1","及时","tf2","时间","f","使用","用","3","string","}","from","now","callback","x","入口","转变成","theta","args","/","小海","外部","位置","ros2","send","居","类","设置","动态","roll","rclpy","[","y","\"","古月","subscription","欧拉角","配置","默认","中","创建","否则","]","usr","回调","py","初始","=","value","为","功能","）","turtlesim","作者","将","点","rotation","utf","def",":","转变","文件","msg","#","destroy","：","退出","console","ros","变成","函数","选项","env",",","transformstamped","entry","learning","shutdown","名称","turtle","等待","none","python3","源","bin","让","转换"," ","scripts","to","super","world","处理","stamp","euler","setup","接口","*","turtletfbroadcaster","declare","向","信息","器","0","2","translation","变换","坐标",")","transformbroadcaster","，","对象","数值","参数值","系统","transformations","订阅","消息","优先","四元","打开","欧拉","turtlename","main","child","节点","clock","listener","(","get","name","python","坐标系","并","小海龟","、","关闭","frame","目标","@","header","!","coding","海龟","transformation","8","一个","戳","循环","www","示例","旋转","pose"],"title":"坐标系动态广播","title_tokens":["动态","广播","坐标","坐标系"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_13","text":"learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], },","text_tokens":["获取","geometry","com","msgs","数据","产生",".","guyuehome","sqrt","当前","twist","__","turtle2","transform","forward","done","init","到","static","进入","实现","缓冲","create",".__","'","包括","node","名","if","{","successfully","turtlefollowing","说明","监听","4","spin","进行","ex","知道","需要","import","的","publish","could","ready","编写","加入","如下","false","parameter","后","程序","_","是否","完成","包","变化","存储","broadcaster","class","self","vel","跟随运动","is","默认值","销毁","通过","request","代码","points","z","on","初始化","info","tf","参数","库","父类","-","编译","1","还","tf2","finished","时间","监听器","f","使用","用","string","成功","没","}","from","now","定时","查看","计算","x","入口","theta","following","没有","args","/","cmd","外部","位置","atan2","提示","如果","lookup","ros2","speed","居","依然","类","transformlistener","设置","return","客户端","linear","rclpy","[","xy","y","时刻","\"","time","古月","配置","默认","运动","创建","否则","]","usr","call","py","初始","=","value","线速度","位","发布","距离","速度","scale","功能","turtlesim","作者","点","rotation","已经","angular","utf","定时器","def",":","rate","文件","msg","#","destroy","：","左边","准备就绪","内容","退出","姿态","console","transformexception","服务","ros","turtle1","math","选项","env",",","跟随","表示","entry","learning","shutdown","turtle","等待","buffer","none","python3","service","client","源","bin","else","让"," ","scripts","to","就绪","true","except","super","setup","接口","*","缓冲区","declare","客户","信息","角速度","0","2","translation","rel","报告","变换","角度","source","坐标",")","，","对象","数值","控制","参数值","as","系统","transformations","spawning","话题","timer","消息","优先","trans","logger","保存","根据","async","+","发送","main","打开","spawned","listener","节点","务器","准备","异常","(","srv","name","python","坐标系","get","spawner","publisher","not","float","并","关闭","、","frame","spawn","@","请求","目标","!","生成","标志","固定","失败","指令","coding","海龟","周期","8","一个","5","循环","www","示例","服务器","try","result"],"title":"海龟跟随","title_tokens":["海龟","跟随"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_14","text":"https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":["-","en","tutorials","tf2",".","https","humble",":","ros","/","docs","org","main","html"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/","text":"URDF：机器人建模方法 ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法——URDF，用来描述机器人外观、性能等各方面属性。 机器人的组成 建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由硬件结构、驱动系统、传感器系统、控制系统四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备，驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等，传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境，控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。 URDF ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是XML格式，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为连杆Link，手肘就类似于机器人电机驱动部分，称为关节joint。 所以在URDF建模过程中，关键任务就是通过这里的 和 ，理清楚每一个连杆和关节的描述信息。 连杆Link的描述 标签用来描述机器人某个刚体部分的外观和物理属性，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。Link里边的 部分用来描述机器人的外观，比如 表示几何形状，里边使用 调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的。 表示坐标系相对初始位置的偏移，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分 ，描述碰撞参数，里边的内容似乎和 一样，也有 和 ，看似相同，其实区别还是比较大的。 部分重在描述机器人看上去的状态，也就是视觉效果， 部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过 来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是 里边 描述的形状。 坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。 关节Joint描述 机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 第一种continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 第二种revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 第三种prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 第四种是fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 第五种Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 既然是运动，就是相对的，parent标签描述父连杆，child标签描述子连杆，子连杆会相对父连杆发生运动。 这里的origin表示两个连杆坐标系之间的关系，也就是这个向量，可以理解为这两个连杆该如何安装到一起。 Axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的。 Limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等，大家注意单位，ROS中关于平移的默认单位都是m，旋转是弧度，不是度，所以这里3.14就表示可以在-180度到180度之间运动，速度也是m/s，或者rad/s。 完整机器人模型 最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。 创建机器人模型 好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。 功能包结构 urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件 查看URDF模型结构 $ urdf_to_graphiz mbot_base.urdf # 在模型文件夹下 模型可视化效果 模型文件解析 learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot> 参考链接 https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":["形成","则","三维","圆柱体","单位","right","看","sphere","pitch","org","比较","stl","编码器","引用","格式","重在","配置文件","自己","检测","提前","完成","一般","车体","我们","通过","他们","一致","自身","参数","码器","link","三种","-","还","全为","一些","其中","material","0.20","模型简化","描述","允许","操作系统","就是","简化","六种","管理","第五种","parent","小臂","/","感器","$","m","应用","平面","roll","？","rad","base","\"","找","创建","看似","初始","名字","单位向量","meshes","按照","urdf","电机","链接","再","模型","#","认识","来","连杆","里边","内容","某","black","robot","多","放置","最小","雷达","的话","关系","0.4","复杂","主要","子","外壳","都","这些","为了","沿某","物理","控制系统","圆柱","不过","这个","为此","真实","尺寸","高","一种","碰撞检测","docs","设计","自定义","为例","管理系","坐标","0.05","，","imu","系统","手肘","可视化","极限","叫做","无论","提供","child","当然","tutorials","和","把","称为","部分","如何","一块","在","有点像","管理系统","一个","讲","示例","html","旋转","外界","派","建模","动机","相同","产生",".","要","思路","转关","开发","xml","所有","caster","floating","关于","此时","进行","全都","区别","碰撞","有点","看上去","第六种","注意","源代码","机器人","相关","version","先来","第三种","en","视觉","fixed","时候","3.14","不能","关节","查看","组合而成","两种","属于","计算","joint","旋转关节","位置","在于","手","摄像头","手臂","编码","介绍","像头","存放","配置","运动","raw","发生","不会","轮子","该","速度","yellow","0.19","而是","0.025","不",":","外部环境","惯性","：","连接","每","radius","一系列","传感","这款","上","以","learning","平台","定义","180","相机","有","滑动","让","市面","这种","下","于","第四种","信息","0","移动","实打实","建模语言","无论是","便于","颜色","细节","1.0","type","保存","视觉效果","渲染","一起","似乎","wheel","板载","实际","件夹","、","起来","分解","back","状态","频繁","固定","origin","蓝色","过程","围绕","限制","标签","驱动器","结构","会","带有","理","未来","到","独自","这","第四","第一种","感知","算力","看下","的","revolute","市面上","之后","网页","肌肉","某个","属性","或","1.5707","平移","第一","等等","z","度到","。","四大","类似","移动机器人","也","操作","外部","0.9","如果","还是","0.015","环境","这样","之前","完全","度","乍","y","关键","默认","要求","第二种","一系","=","装置","与","大臂","功能","之间","无限","最大","叫","一样","参考","包围","0.95","s","对","驱动","rgba","ros","调用","唯一","white","graphiz","名称","好","启动"," ","先","面上","质心","0.16","就","括号","mbot","角度","尖括号","以及","?","正常","啦","所以","launch","等","二种","组成","直线","分别","放在","length","机器","语言","相对运动","向量","正","外观","一段","刚体","文件夹","任务","两个","臂","清楚","geometry","xyz","四种","哪","0.06","front","rviz","可视","最终","可以","这里","无法","包括","电脑","完整","时","轴","软件","需要","呢","柱体","给","桌子","它","或者","这么","各","如下","安装","left","_","方面","形状","理解","变化","包","二个","第二个","看上","弧度","第二","代码","五种","浮动","1","清晰","使用","用","算作","框","应用软件","—","x","得","https","不是","绿色","载体","planar","color","局",">","类型","小车","电源","中","接触","rpy","每个","硬件","较","limit","矩阵","为","必须","xacro","<","独立","将","了","由","其实","组成部分","prismatic","方式","是","文件","性能","等于","质量","传感器","右侧","0.095","统一","大家","摄像","着急","表示","驱使","解析","才能","什么","熟悉","哪些","了解","第五","to","上去","大","axis","全称","底盘","效果","几何","0.18","自定","看到","humble","少","控制","常见","机械","相对","父","cylinder","设备","用来","组合","main","既然","树莓","系列","比如","偏移","name","专门","坐标系","第三","方向","第六","visual","continuous","肘关节","方法","不仅"],"title":"**URDF：机器人建模方法**","title_tokens":["建模","机器","机器人","：","方法","*","urdf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf","text":"ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法——URDF，用来描述机器人外观、性能等各方面属性。","text_tokens":["为此","还","建模","要","一种","是","描述","性能","使用","操作系统","。","认识","，","—","系统","得","ros","了","用来","操作","啦","等","提供","当然","呢","给","之前","的","机器","专门","各","？","把","介绍","、","方面","如何","在","外观","属性","让"," ","机器人","我们","一个","不过","方法","urdf","下"],"title":"URDF：机器人建模方法","title_tokens":["建模","机器","机器人","：","方法","urdf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_1","text":"建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由硬件结构、驱动系统、传感器系统、控制系统四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备，驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等，传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境，控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。","text_tokens":["建模","动机","结构","驱动器","思路","开发","可以","这","包括","电脑","感知","进行","编码器","软件","需要","的","安装","自己","市面上","一般","机器人","我们","通过","等等","参数","码器","一些","描述","四大","。","使用","就是","操作系统","应用软件","类似","移动机器人","管理","计算","感器","外部","操作","载体","还是","应用","环境","摄像头","编码","电源","像头","中","硬件","装置","按照","电机","了","由","其实","再","组成部分","是","每","里边","传感器","驱动","传感","摄像","雷达","上","驱使","主要","外壳","平台","熟悉","都","这些","控制系统","市面"," ","先","底盘","面上","看到","移动","实打实","管理系","建模语言","无论是","，","以及","控制","imu","常见","正常","便于","机械","系统","设备","无论","组合","等","树莓","比如","组成","板载","机器","语言","和","把","、","起来","分解","部分","状态","管理系统","一个","过程","臂","清楚","派"],"title":"机器人的组成","title_tokens":["的","组成","机器","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_1","text":"ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是XML格式，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为连杆Link，手肘就类似于机器人电机驱动部分，称为关节joint。 所以在URDF建模过程中，关键任务就是通过这里的 和 ，理清楚每一个连杆和关节的描述信息。","text_tokens":["标签","建模","产生","开发","xml","理","可以","独自","这里","看","无法","呢","的","格式","桌子","有点","自己","看上去","之后","网页","肌肉","属性","看上","源代码","机器人","我们","通过","代码","他们","自身","link","还","其中","清晰","描述","。","使用","就是","算作","关节","组合而成","类似","也","小臂","joint","外部","手","环境","这样","手臂","？","乍","关键","运动","中","一系","大臂","必须","urdf","电机","独立","模型","由","是","文件","外部环境","包围","连接","每","连杆","驱动","右侧","一系列","统一","大家","ros","才能","都","这些"," ","这个","上去","全称","下","于","信息","就","括号","尖括号","，","机械","手肘","相对","叫做","组合","所以","系列","比如","组成","机器","相对运动","和","称为","部分","如何","在","有点像","刚体","任务","一个","过程","臂","肘关节","方法","不仅","清楚"],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#link","text":"标签用来描述机器人某个刚体部分的外观和物理属性，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。Link里边的 部分用来描述机器人的外观，比如 表示几何形状，里边使用 调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的。 表示坐标系相对初始位置的偏移，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分 ，描述碰撞参数，里边的内容似乎和 一样，也有 和 ，看似相同，其实区别还是比较大的。 部分重在描述机器人看上去的状态，也就是视觉效果， 部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过 来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是 里边 描述的形状。 坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。","text_tokens":["标签","相同","动机","会","则","三维","圆柱体","可以","未来","到","包括","pitch","比较","stl","时","软件","区别","算力","碰撞","需要","柱体","的","它","重在","如下","看上去","形状","检测","提前","某个","二个","第二个","属性","看上","车体","第二","机器人","我们","平移","通过","z","一致","参数","link","全为","视觉","时候","模型简化","描述","。","使用","就是","用","算作","简化","框","类似","移动机器人","也","计算","x","joint","绿色","位置","如果","还是","这样","roll","小车","y","raw","运动","要求","中","接触","轮子","看似","初始","较","矩阵","与","该","将","了","其实","模型","一样","不","是","文件","惯性","：","连接","质量","连杆","里边","内容","来","调用","表示","的话","上","复杂","以","定义","名称","好","为了","物理","有"," ","圆柱","这个","上去","大","效果","几何","自定","真实","尺寸","0","高","质心","移动","就","碰撞检测","设计","自定义","为例","坐标","，","控制","机械","颜色","相对","用来","视觉效果","等","似乎","比如","分别","偏移","机器","name","坐标系","实际","和","、","方向","部分","状态","如何","在","外观","刚体","蓝色","一个","过程","臂","旋转","外界"],"title":"连杆Link的描述","title_tokens":["link","描述","的","连杆"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#joint","text":"机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 第一种continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 第二种revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 第三种prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 第四种是fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 第五种Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 既然是运动，就是相对的，parent标签描述父连杆，child标签描述子连杆，子连杆会相对父连杆发生运动。 这里的origin表示两个连杆坐标系之间的关系，也就是这个向量，可以理解为这两个连杆该如何安装到一起。 Axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的。 Limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等，大家注意单位，ROS中关于平移的默认单位都是m，旋转是弧度，不是度，所以这里3.14就表示可以在-180度到180度之间运动，速度也是m/s，或者rad/s。","text_tokens":["标签","产生","会","四种","要","转关","带有","哪","xml","最终","可以","到","单位","这里","这","floating","关于","第四","此时","第一种","比较","进行","轴","区别","的","revolute","或者","安装","第六种","注意","之后","理解","变化","一般","弧度","第二","机器人","平移","第一","通过","z","度到","五种","浮动","三种","link","第三种","1","-","一些","fixed","3.14","不能","。","描述","允许","使用","就是","关节","六种","两种","属于","也","第五种","parent","不是","joint","/","旋转关节","位置","还是","m","平面","在于","planar","这样","类型","小车","度","rad","运动","默认","第二种","发生","中","不会","轮子","较","limit","名字","单位向量","为","该","速度","之间","urdf","电机","了","无限","最大","模型","叫","而是","方式","prismatic","不","是","等于","连接","每","连杆","内容","某","s","大家","ros","唯一","最小","表示","关系","上","才能","围绕","什么","子","180","相机","都","沿某","有","滑动","第五"," ","不过","这个","这种","axis","第四种","一种","就","角度","坐标","，","少","机械","相对","极限","父","所以","既然","等","二种","一起","child","比如","直线","机器","相对运动","坐标系","和","第三","向量","正","方向","如何","在","一段","刚体","频繁","固定","第六","origin","两个","continuous","一个","臂","旋转","限制"],"title":"关节Joint描述","title_tokens":["关节","描述","joint"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_2","text":"最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。","text_tokens":["link","标签","形成","模型","由","再","不","是","描述","就","。","最终","下","所有","每","，","某","对","看","robot","大家","joint","细节","组合","完整","所以","全都","时","着急","组成","放在","的","完全","机器","局","和","先","哪些","部分","找","一块","之后","完成","在","中","了解","每个"," ","机器人","一个","这个","代码","urdf","先来","了"],"title":"完整机器人模型","title_tokens":["模型","机器人","机器","完整"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_3","text":"好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。","text_tokens":["建模","动机","模型","要","移动","。","为例","移动机器人","，","看","多","这款","啦","完整","一起","还是","看下","的","以","它","机器","这么","好"," ","我们","机器人","一个","过程","讲","示例","urdf","了"],"title":"创建机器人模型","title_tokens":["模型","机器","创建","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_4","text":"urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件","text_tokens":["模型","文件","rviz","：","放置","保存","launch","渲染","引用","的","机器","配置文件","存放","配置","中","或","启动"," ","机器人","相关","meshes","xacro","urdf"],"title":"功能包结构","title_tokens":["功能","包","结构"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_2","text":"$ urdf_to_graphiz mbot_base.urdf # 在模型文件夹下","text_tokens":["在","graphiz","模型",".","文件夹"," ","to","文件","件夹","#","base","mbot","_","urdf","$","下"],"title":"查看URDF模型结构","title_tokens":["模型","查看","结构","urdf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_5","text":"","text_tokens":[],"title":"模型可视化效果","title_tokens":["模型","可视","效果","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_6","text":"learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot>","text_tokens":["link","geometry","material","xyz","1","-","0.18","yellow",".","0","0.20","0.16","0.19","0.06","0.025","front","xml","mbot","0.05","0.95","caster","black","parent","right","radius","0.095","?","robot","sphere","rgba","1.0","joint","cylinder","/","white","type","0.9","child","wheel","0.4","color","0.015","length","learning","name",">","base","\"","_","left","back","rpy","1.5707","origin"," ","=","visual","continuous","version","axis","<","urdf"],"title":"模型文件解析","title_tokens":["模型","文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_7","text":"https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":["-","en","tutorials",".","https","humble",":","ros","/","docs","org","main","html","urdf"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/","text":"Gazebo：三维物理仿真平台 ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台Gazebo，了解一下。 Gazebo仿真平台 介绍 Gazebo是ROS系统中最为常用的三维物理仿真平台，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。 安装 Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-* 运行 通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py 注意：为保证模型顺利加载，请将离线模型文件库下载并放置到~/.gazebo/models路径下， https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。 XACRO机器人模型优化 我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本——XACRO文件。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro 常量定义 一些常用的XACRO文件语法，大家了解下。 标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。 数学计算 如果需要做数学计算，同样是在$加大括号中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 注意：所有数学运算都会转换成浮点数进行，以保证运算精度 宏定义 机器人的轮子我们也做成宏定义，定义方式是通过这个 标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。 文件包含 宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。 机器人仿真模型配置 完善物理参数 第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。 添加Gazebo标签 第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。 配置传动装置 第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。 添加控制器插件 第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。 构建仿真环境 接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ]) 机器人运动仿真 万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard 注意：虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。 Ignition：下一代Gazebo 随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为Ignition，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/ 附录：机器人完整模型 learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["com","丰富","同样","见证","三维","echo","第一步","差速","构建","那","附录","right","实现","官方","想不起","sphere","升级","区分","org","原本","make","set","格式","all","false","化","完成","spwan","vel","上来","想不起来","我们","一下","通过","file","参数","用到","link","-","material","还","文件格式","一些","12","像","0.20","下来","use","限飞","correctly","描述","就是","params","火星","没","精度","parent","actuator","http","/","感器","package","join","小海","$","必备","m","ros2","应用","数学计算","single","随着","return","apt","？","[","很","have","实验","base","time","\"","参数设置","找","出现","么","创建","]","整个","screen","名字","流畅","urdf","电机","c语言","entity","再","模型","万事","可编程","#","wiki","常用","认识","来","own","里边","black","版本","某","引擎","robot","多","list","放置","函数","命名","关系","0.4","去","复杂","较大","主要","图形","都","这些","为了","变量","物理","iyy","include","true","这个","不过","虚拟机","尺寸","方便","甚至","find","设计","两句","provided","0.05","iyz","，",")","camera","无人","互相","系统","最为","根本","trans","teleop","提供","child","完善","当然","问题","浮点","从","get","publisher","和","把","新一代","如何","在","万事俱备","有点像","prefix","description","5","一个","是不是","blue","建模","动机","0.0",".","0.001","要","开发","xml","官方网站","them","所有","caster","第二步","packages","'","hardwareinterface","our","此时","only","进行","改成","碰撞","第四步","izz","ixy","state","3.14159","换成","有点","注意","by","你","joints","sim","ixz","机器人","相关","version","run","tf","separation","you","fixed","时候","表面","不能","优化","关节","虚拟","直接","接下来","切分","计算","必要","joint","diff","位置","很多","install","torque","跑","摄像头","及","介绍","像头","时刻","配置","一步","运动","不会","轮子","该","速度","传动","~","算法","几个","includelaunchdescription","0.19","0.025","yellow","def","不","demos",":","惯性","：","ign","每","刚好","radius","传感","个","sources","高质","--","下载","系数","上","技术","仿真","c","以","turngravityoff","learning","mass","平台","定义","pi","可编","有","让","转换","matrix","max","这种","认识一下","怎么办","下","名为","信息","“","当","enabled","0","2","移动","运行","os","确保","launchdescription","velocityjointinterface","无人机","mechanicalreduction","val","t","transmission","颜色","1.0","controller","type","渲染","share","一起","executable","wheel","官方网","(","第一句","放到","还要","关闭","、","起来","back","frame","0.75","简单","基本","重复","频繁","真器","origin","过程","keyboard","常量","标签","三步","力学","数据","会","used","二句","插件","到","未来","这","流程","drive","20","分配","node","第四","if","3.1415926","4","得到","续航","path","试试","某些","传动装置","的","import","publish","macro","迭代","加大","diameter","属性","传递","针对","bridge","第一","the","z","yaw","传递数据","语句","不多","公式","。","四步","导致","动力","类似","移动机器人","弹性","也","结束","from","硬件加速","奇迹","没有","点数","reference","0.2","二步","cmd","如果","周边环境","0.015","环境","这样","之前","设置","不妨","ignition","下一代","新","度","y","动力学","change","in","arguments","支持","再用","一行","actions","topic","py","=","装置","value","inertia","功能","worlds","me","已经","r","generate","ixx","差不多","叫","一样","simpletransmission","rate","output","参考","命令","0.95","对","手边","rgba","总体","a","ros","调用","更","输入","export","嵌套","弹性系数","做","matter","名称","交给","reflect","好","启动","比","值为"," ","b","火星车","rgbd","接口","*","主角","先","一句","键盘","differential","colors","update","请","property","0.16","models","for","就","括号","mbot","条件","相识","角度","inertial","osrf","包含","语法","?","模拟","编程","怎么","ignitionrobotics","interface","所以","啦","launch","模块","等","want","+","可能","节点","motor","除法","length","机器","语言","考虑","python","odom","directory","记得","冗余","!","box","加载","两个","海龟","浮点数","geometry","xyz","0.06","front","twist","很长","odometry","另外","可以","验证","plugin","这里","acceleration","collision","{","items","添加","完整","be","以上","部署","装上","时","really","需要","呢","它","给","加入","安装","办法","_","left","into","包","变化","理解","is","同时","第二","更为","代码","路径","pkg","控制器","于是","svga","库","实物","force","gray","1","宏","vgpu10","不同","使用","用","neighborhood","3","一代","}","doesn","—","load","x","写","结果","gazebo","https","保证","不是","得","bashrc","第三步","important","课程","摩擦","color","ament",">","index","小车","this","顺利","进步","中","俱备","重复使用","rpy","每个","修改","硬件","摩擦力","加速","为","xacro","<","command","将","了","帮助","we","方式","为止","是","高质量","文件","测试","做成","hardware","”","质量","传感器","试一下","尽量","可","xmlns","然后","size","大家","摄像","似曾相识","libgazebo","网站",",","so","defining","接下","了解","to","场景","world","axis","github","似曾","底盘","效果","---","加法","仿真器","0.18","humble","sudo","source","pythonlaunchdescriptionsource","因为","数值","控制","不断","第二句","镜像","相对","cylinder","离线","用来","转换成","and","这句","比如","footprint","友好","filename","数学","name","h","where","第三","spawner","并","小海龟","30","spawn","周边","visual","continuous","尝试","运算","一定","sure","www","方法","人机","不仅","pose"],"title":"**Gazebo：三维物理仿真平台**","title_tokens":["物理","仿真","gazebo","平台","三维","：","*"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo","text":"ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台Gazebo，了解一下。","text_tokens":["怎么办","是","开发","。","三维","没","，","手边","gazebo","没有","ros","怎么","如果","当然","问题","仿真","呢","机器","平台","？","物理","了解","机器人","我们","一下","主角","实物"],"title":"Gazebo：三维物理仿真平台","title_tokens":["仿真","物理","gazebo","平台","三维","："]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_1","text":"","text_tokens":[],"title":"Gazebo仿真平台","title_tokens":["gazebo","仿真","平台"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_1","text":"Gazebo是ROS系统中最为常用的三维物理仿真平台，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。","text_tokens":["力学","要","开发","三维","可以","验证","到","那","实现","此时","续航","部署","的","加入","办法","属性","上来","机器人","我们","实物","还","表面","不多","限飞","。","使用","用","导致","优化","火星","动力","类似","弹性","gazebo","没有","摩擦","应用","周边环境","环境","这样","不妨","及","实验","动力学","支持","中","摩擦力","为","了","算法","帮助","再","差不多","是","高质量","测试","常用","质量","引擎","多","ros","更","高质","弹性系数","系数","仿真","做","平台","图形","都","物理"," ","场景","火星车","先","就","运行","设计","无人机","，","模拟","无人","系统","最为","所以","渲染","等","提供","可能","比如","机器","和","、","在","频繁","周边","一个","人机","不仅"],"title":"介绍","title_tokens":["介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_2","text":"Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-*","text_tokens":["-","已经","humble","。","sudo","使用","确保","：","可以","命令","认识","直接","，","互相","gazebo","系统","大家","ros","了","完整","装上","$","呢","这样","它","给","跑","不妨","的","apt","install","和","？","把","安装","起来","都","如何","为了","中","包","简单"," ","我们","一下","相关","通过","一个","功能","*","先","认识一下"],"title":"安装","title_tokens":["安装"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_3","text":"通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py 注意：为保证模型顺利加载，请将离线模型文件库下载并放置到~/.gazebo/models路径下， https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。","text_tokens":["com","动机",".","可以","到","试试","的","它","_","注意","机器人","我们","通过","路径","库","还","下来","。","接下来","移动机器人","gazebo","https","保证","不是","/","$","课程","ros2","环境","之前","？","顺利","运动","中","么","py","为","该","~","将","了","模型",":","文件","：","命令","认识","大家","放置","ros","下载","仿真","接下","启动"," ","github","下","请","models","移动","就","设计","，","osrf","控制","离线","啦","launch","这句","一起","机器","并","放到","还要","把","记得","在","加载","是不是","尝试"],"title":"运行","title_tokens":["运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#xacro","text":"我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本——XACRO文件。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro","text_tokens":["建模","数据","动机","会","丰富","同样","要","很长","可以","这里","实现","升级","此时","4","需要","的","给","格式","加入","安装","化","包","你","传递","我们","机器人","一下","更为","通过","代码","link","传递数据","-","还","文件格式","一些","宏","像","语句","时候","下来","不能","不同","。","描述","使用","优化","没","直接","接下来","移动机器人","也","—","切分","计算","写","gazebo","必要","没有","感器","如果","$","install","之前","摄像头","apt","小车","介绍","像头","中","再用","创建","重复使用","每个","轮子","xacro","功能","urdf","了","模型","叫","一样","是","文件","可编程","：","命令","传感器","版本","对","可","传感","多","然后","总体","大家","放置","调用","a","摄像","个","更","ros","函数","复杂","做","定义","接下","好","都","为了","变量","可编","有","让"," ","b","接口","先","底盘","尺寸","humble","移动","甚至","就","sudo","设计","条件","，","包含","编程","模块","这句","可能","比如","友好","机器","放到","把","、","在","重复","一个","过程","方法","常量"],"title":"XACRO机器人模型优化","title_tokens":["模型","机器","机器人","xacro","优化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_4","text":"一些常用的XACRO文件语法，大家了解下。 标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。","text_tokens":["标签","名为","数据","一些","动机","“","模型","时候","尺寸","方便","不","移动","文件","。","就","使用","括号","常用","可以","”","未来","质量","移动机器人","，","里边","语法","也","大家","调用","了","用来","原本","位置","$","m","比如","需要","这样","的","机器","定义","3.14159","很","把","安装","好","、","_","都","这些","找","pi","加大","在","变化","中","了解","一行","不会","值为"," ","轮子","针对","机器人","我们","一个","修改","通过","xacro","urdf","常量","底盘","下"],"title":"常量定义","title_tokens":["定义","常量"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_5","text":"如果需要做数学计算，同样是在$加大括号中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 注意：所有数学运算都会转换成浮点数进行，以保证运算精度","text_tokens":["浮点数","数据","动机","会","同样","可以","所有","未来","这","想不起","得到","进行","改成","需要","的","加入","换成","注意","加大","想不起来","我们","机器人","通过","时候","公式","。","直接","移动机器人","精度","计算","写","结果","保证","点数","位置","如果","$","数学计算","很多","中","修改","了","模型","是","：","来","某","尽量","关系","做","以","都","有","转换"," ","这个","加法","移动","就","括号","，","数值","根本","相对","怎么","转换成","可能","比如","浮点","除法","数学","机器","和","起来","在","两个","一个","运算","常量"],"title":"数学计算","title_tokens":["计算","数学","数学计算"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_6","text":"机器人的轮子我们也做成宏定义，定义方式是通过这个 标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。","text_tokens":["标签","link","-","还","几个","宏","一些","像","会","当","一样","方式","时候","要","模型","做成","是","描述","。","使用","就","两句","可以","关节","来","，","也","里边","这里","包含","刚好","这","镜像","1","a","joint","调用","区分","了","输入","位置","函数","关系","比如","c","需要","设置","的","这样","机器","和","定义","名称","把","、","记得","好","参数设置","在","中","出现","轮子"," ","同时","b","机器人","我们","两个","一个","通过","这个","名字","参数","用到"],"title":"宏定义","title_tokens":["定义","宏"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_7","text":"宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。","text_tokens":["c语言","还","宏","一些","像","模型","再","下来","为止","是","做成","文件","。","使用","另外","可以","相识","到","优化","接下来","也","，","包含","里边","对","这里","结束","流程","然后","得","不是","没有","调用","似曾相识","模块","函数","嵌套","必备","去","仿真","做","某些","的","机器","语言","和","定义","加入","很","把","接下","中"," ","include","我们","机器人","一个","是不是","这种","于是","似曾","参数","底盘","了"],"title":"文件包含","title_tokens":["文件","包含"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_8","text":"","text_tokens":[],"title":"机器人仿真模型配置","title_tokens":["仿真","模型","机器","机器人","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_9","text":"第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。","text_tokens":["link","是","。","惯性","第一步","确保","每","，","因为","gazebo","必要","碰撞","仿真","需要","的","和","平台","都","一步","物理","有","属性","第一","一个","一定","参数"],"title":"完善物理参数","title_tokens":["完善","物理","参数"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_2","text":"第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。","text_tokens":["link","标签","不同","是","。","可以","每","，","第二步","因为","gazebo","系统","得","颜色","二步","添加","所以","渲染","做","这样","的","主要","和","配置","一步","冗余","为了","在","中","第二","一个","为","urdf"],"title":"添加Gazebo标签","title_tokens":["标签","gazebo","添加"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_10","text":"第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。","text_tokens":["三步","要","是","。","可以","，","joint","第三步","仿真","传动装置","给","的","第三","配置","运动","理解","装置","一个","为","传动","电机","了"],"title":"配置传动装置","title_tokens":["传动","配置","传动装置","装置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_11","text":"第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。","text_tokens":["要","不同","是","就","四步","。","插件","可以","差速","角度","那","来","，","控制","分配","gazebo","第四","了","添加","第四步","这样","的","小车","交给","完成","在","两个","一个","速度","控制器","电机","下"],"title":"添加控制器插件","title_tokens":["控制器","控制","添加","插件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_12","text":"接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ])","text_tokens":["0.0",".","them","到","packages","'","node","if","our","{","items","only","be","make","really","set","path","需要","import","的","state","all","_","by","into","spwan","sim","the","z","yaw","pkg","file","run","用到","force","-","you","下来","use","correctly","。","neighborhood","接下来","from","}","doesn","load","x","gazebo","/","package","join","single","ament","return","index","[","have","y","change","arguments","中","]","topic","actions","py","=","screen","功能","<","worlds","urdf","了","me","we","entity","includelaunchdescription","generate","模型","def",":","output","#","own","robot","a","ros","sources",",","learning","matter","接下"," ","include","to","true","world","---","enabled","就","os","mbot","launchdescription","provided","pythonlaunchdescriptionsource","，",")","val","t","launch","want","share","executable","提供","节点","(","get","name","考虑","python","publisher","where","spawner","把","directory","如何","spawn","!","加载","description","一个","sure","time","pose"],"title":"构建仿真环境","title_tokens":["仿真","构建","环境"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_13","text":"万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard 注意：虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。","text_tokens":[".","二句","twist","见证","echo","流程","此时","以上","时","需要","的","有点","_","注意","into","第二","我们","机器人","第一","run","svga","下来","vgpu10","。","就是","虚拟","接下来","硬件加速","load","奇迹","gazebo","bashrc","/","小海","$","ros2","很多","环境",">","时刻","\"","中","整个","俱备","硬件","py","=","urdf","~","了","已经","万事","：","命令","export","仿真","复杂","learning","接下","启动","比"," ","不过","一句","键盘","虚拟机","0","运行","两句","，","控制","第二句","teleop","launch","节点","机器","第一句","和","关闭","小海龟","万事俱备","基本","有点像","海龟","过程","keyboard","加速"],"title":"机器人运动仿真","title_tokens":["仿真","机器","运动","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#ignitiongazebo","text":"随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为Ignition，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/","text_tokens":["效果","-","仿真器","信息",".","humble","demos",":","。","sudo","参考","官方网站","ign","一代","可以","来","也","，","试一下","camera","版本","官方","不断","多","gazebo","大家","ros","/","ignitionrobotics","更","org","launch","网站","渲染","$","命名","随着","上","ros2","技术","仿真","官方网","install","的","从","较大","不妨","ignition","apt","平台","和","新","度","新一代","_","迭代","都","进步","在","变化","有","真器"," ","py","我们","bridge","一下","www","为","流畅","rgbd"],"title":"Ignition：下一代Gazebo","title_tokens":["gazebo","ignition","下一代","：","一代"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_14","text":"learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["geometry","xyz","used",".","0.001","0.06","front","xml","odometry","plugin","caster","right","sphere","drive","20","hardwareinterface","acceleration","collision","{","org","3.1415926","izz","ixy","publish","macro","false","left","_","diameter","joints","is","vel","ixz","version","the","z","tf","separation","material","-","gray","1","12","link","fixed","0.20","3","params","}","parent","x","actuator","gazebo","http","joint","reference","/","0.2","diff","cmd","important","$","m","color","0.015","torque",">","base","y","in","\"","this","rpy","topic","=","value","xacro","inertia","<","command","urdf","r","ixx","yellow","0.19","0.025","simpletransmission",":","rate","wiki","hardware","0.95","black","radius","robot","list","xmlns","rgba","size","ros","libgazebo","--","0.4","so","defining","turngravityoff","learning","mass","reflect","pi","iyy"," ","include","to","true","matrix","max","axis","*","differential","colors","0.18","update","0","2","property","0.16","for","find","mbot","inertial","velocityjointinterface","0.05","source","iyz",")","mechanicalreduction","?","transmission","1.0","controller","cylinder","trans","interface","type","and","+","child","wheel","motor","footprint","filename","(","length","name","h","odom","30","back","frame","0.75","!","box","origin","prefix","visual","5","continuous","www","blue"],"title":"附录：机器人完整模型","title_tokens":["模型","机器","机器人","：","完整","附录"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/","text":"Rviz：三维可视化显示平台 大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾——Rviz，一款三维可视化显示的神器。 Rviz三维可视化平台 机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。 Rviz介绍 一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。 运行方法 $ ros2 run rviz2 rviz2 彩色相机仿真与可视化 摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。 仿真插件配置 关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 主要配置项如下： 标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 标签：加载摄像头仿真插件 运行仿真环境 模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py 图像数据可视化 $ ros2 run rviz2 rviz2 三维相机仿真与可视化 二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。 仿真插件配置 运行仿真环境 $ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py 点云数据可视化 $ ros2 run rviz2 rviz2 激光雷达仿真与可视化 除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。 仿真插件配置 运行仿真环境 $ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py 点云数据可视化 $ ros2 run rviz2 rviz2 Rviz vs Gazebo 好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下，Gazebo是仿真平台，核心功能是创造数据，我们没有机器人或者传感器，它可以帮我们做一个虚拟的，Rviz是可视化平台，核心功能是显示数据，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。 参考链接 https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":["获取","com","项","数字","三维","混淆","激光","官方","看","神器","但","说明","岂","格式","并且","能够","自己","我们","通过","巧妇难为无米之炊","参数","汽车","一些","描述","分辨","就是","提高","/","感器","$","ros2","一堆","人","？","想","么","分钱","按照","内部","链接","模型","再","常用","过瘾","来","内容","量级","多","拭目","一款","雷达","玩起来","命名","的话","去","主要","自动","图形","都","这些","一分钱","很难","这个","不过","qt","自主","真实","方便","一种","docs","设计","坐标","，","camera","工具","上位","rviz2","最为","可视化","消息","叫做","本","提供","当然","问题","从","价格比","和","把","如何","在","想不到","以待","开放","一个","是不是","讲","不用","眼中","试一试","自带","动机",".","开发","只要","关于","层面","全都","辨率","相信","过","各种","导航","拭目以待","你","intel","laser","机器人","run","先来","时候","不能","虚拟","希望","计算","一目","帮","位置","分析","很多","摄像头","编码","像头","介绍","配置","打造","案例","运动","还有","kinect","大大提高","几个","不",":","外部环境","：","效率","可贵","传感","stereolabs","上","仿真","learning","平台","会用","相机","有","这种","下","vs","信息","图形化","0","话","移动","运行","颜色","realsense","type","渲染","开放式","涉及","、","起来","畅想","自由","重量级","过程","出来","强调","对照","标签","巧妇","数据","会","不少","插件","到","啥","这","懵","流程","世界","试试","某些","的","对应","搞定","肯定","只有","等等","usb","。","具体","类似","移动机器人","大大","也","手上","没有","点云","长","框架","外部","如果","还是","环境","这样","设置","新","彩色","不到","py","与","功能","已经","非常","参考","对","ros","更","一位","做","激光雷达","核心","好","驾驶","启动"," ","rgbd","一句","就","分辨率","mbot","众多","所以","啦","launch","等","机器","常备","规划","各样","只是","装","能","加载","两个","臂","一脸","这幅","噪音","了然","rviz","可视","可以","这里","包括","样","添加","软件","知道","需要","呢","满意","给","它","或者","一分","体感","如下","_","into","理解","代码","路径","玩起","使用","用","才","创造","成功","—","load","255","什么样","gazebo","https","不是","价格","除了","有没有","嘉宾","基于","类型","难为","机","中","图像","发布","了","拍摄","是","快速","传感器","大家","摄像","二维","libgazebo","so","什么","问","熟悉","哪些","出厂","重量","了解","场景","github","效果","看到","不想","范畴","机械","话题","用来","范围","比如","name","坐标系","显示","各种各样","周边","www","一目了然","方法"],"title":"**Rviz：三维可视化显示平台**","title_tokens":["可视化","平台","三维","rviz","可视","：","*","显示"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz","text":"大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾——Rviz，一款三维可视化显示的神器。","text_tokens":["看到","是","就","三维","rviz","可视","。","到","，","范畴","—","量级","这","什么样","神器","大家","没有","摄像","可视化","ros","了","一款","本","世界","一位","问题","有没有","涉及","呢","的","摄像头","嘉宾","机器","过","什么","？","能够","像头","介绍","畅想","显示","如何","中","重量","图像"," ","机器人","我们","一个","重量级","讲","眼中","拍摄"],"title":"Rviz：三维可视化显示平台","title_tokens":["可视化","平台","三维","rviz","可视","：","显示"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_1","text":"机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。","text_tokens":["数据","这幅","动机","数字","了然","开发","三维","rviz","可视","激光","可以","到","啥","这里","看","懵","但","样","层面","岂","全都","软件","知道","需要","的","给","自己","各种","导航","理解","你","搞定","肯定","机器人","我们","通过","路径","等等","描述","。","就是","才","类似","移动机器人","大大","希望","计算","一目","255","提高","感器","长","位置","如果","分析","很多","环境","这样","一堆","摄像头","人","？","像头","运动","中","么","图像","还有","功能","大大提高","内部","模型","再","不","是","快速","效率","内容","传感器","传感","摄像","一款","雷达","去","做","激光雷达","问","什么","哪些","相机","都","这些","很难"," ","场景","效果","信息","自主","0","看到","移动","就","设计","坐标","，","机械","众多","颜色","可视化","用来","所以","渲染","比如","当然","从","机器","坐标系","和","把","、","规划","各种各样","在","各样","只是","周边","过程","臂","一目了然","出来","一脸"],"title":"Rviz三维可视化平台","title_tokens":["可视化","平台","三维","rviz","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_2","text":"一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。","text_tokens":["效果","自带","数据","项","图形化","看到","话","不","方便","是","开发","就","。","rviz","可视","插件","可以","常用","，","也","工具","官方","对","上位","多","只要","话题","可视化","没有","ros","消息","了","添加","说明","框架","更","如果","开放式","很多","做","满意","某些","的","它","机器","或者","基于","平台","核心","新","想","自己","图形","出厂","打造","显示","机","对应","在","中","有","不到","想不到"," ","我们","只有","一个","开放","机器人","发布","这个","按照","功能","一句","qt"],"title":"Rviz介绍","title_tokens":["rviz","介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_1","text":"$ ros2 run rviz2 rviz2","text_tokens":["rviz2"," ","run","$","ros2"],"title":"运行方法","title_tokens":["方法","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_2","text":"摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。","text_tokens":["一种","是","。","常用","，","传感器","传感","最为","摄像","感器","上","的","摄像头","给","机器","像头","装","肯定","我们","机器人","先来","了"],"title":"彩色相机仿真与可视化","title_tokens":["仿真","可视化","可视","与","彩色","相机"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_3","text":"关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 主要配置项如下： 标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 标签：加载摄像头仿真插件","text_tokens":["标签","项","噪音","模型",".","。","描述","使用","分辨","插件","：","分辨率","，","传感器","camera","传感","关于","gazebo","大家","摄像","ros","感器","叫做","type","libgazebo","等","提供","命名","范围","so","辨率","仿真","需要","设置","的","摄像头","给","格式","主要","name","类型","如下","编码","像头","介绍","_","配置","都","对应","加载","图像","自由"," ","我们","这个","代码","方法","参数","对照"],"title":"仿真插件配置","title_tokens":["仿真","插件","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_4","text":"模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py","text_tokens":["已经","信息","模型",".","看到","不能","。","rviz","mbot","成功","，","camera","load","gazebo","摄像","啦","拭目","launch","$","ros2","仿真","摄像头","learning","并且","把","好","像头","_","拭目以待","配置","into","在","能","中","图像","以待"," ","py","我们","出来"],"title":"运行仿真环境","title_tokens":["运行","仿真","环境"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_5","text":"$ ros2 run rviz2 rviz2","text_tokens":["rviz2"," ","run","$","ros2"],"title":"图像数据可视化","title_tokens":["图像","数据","可视","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_6","text":"二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。","text_tokens":["获取","数据","玩起","不","不少","。","三维","外部环境","就","常用","过瘾","可以","可贵","不想","，","传感器","也","传感","摄像","realsense","点云","二维","感器","价格","外部","玩起来","比如","试试","仿真","环境","的","摄像头","或者","价格比","一分","体感","想","像头","起来","相机","一分钱","intel","我们","不过","通过","kinect","分钱","这种","不用","usb"],"title":"三维相机仿真与可视化","title_tokens":["仿真","可视化","三维","可视","与","相机"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_7","text":"","text_tokens":[],"title":"仿真插件配置","title_tokens":["仿真","插件","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_8","text":"$ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py","text_tokens":["into","load",".","gazebo","learning"," ","py","launch","mbot","rgbd","_","$","ros2"],"title":"运行仿真环境","title_tokens":["运行","仿真","环境"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_9","text":"$ ros2 run rviz2 rviz2","text_tokens":["rviz2"," ","run","$","ros2"],"title":"点云数据可视化","title_tokens":["点云","数据","可视","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_10","text":"除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。","text_tokens":["汽车","动机","移动","是","。","三维","激光","来","移动机器人","也","，","传感器","传感","包括","摄像","感器","除了","雷达","很多","激光雷达","摄像头","的","机器","自动","和","常备","像头","驾驶","相机","机器人","我们","试一试"],"title":"激光雷达仿真与可视化","title_tokens":["仿真","激光雷达","可视化","可视","与","激光","雷达"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_11","text":"","text_tokens":[],"title":"仿真插件配置","title_tokens":["仿真","插件","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_12","text":"$ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py","text_tokens":["into","load",".","gazebo","learning"," ","laser","py","launch","mbot","_","$","ros2"],"title":"运行仿真环境","title_tokens":["运行","仿真","环境"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_13","text":"$ ros2 run rviz2 rviz2","text_tokens":["rviz2"," ","run","$","ros2"],"title":"点云数据可视化","title_tokens":["点云","数据","可视","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz-vs-gazebo","text":"好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下，Gazebo是仿真平台，核心功能是创造数据，我们没有机器人或者传感器，它可以帮我们做一个虚拟的，Rviz是可视化平台，核心功能是显示数据，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。","text_tokens":["巧妇","数据","会","rviz","可视","混淆","可以","到","这里","这","流程","软件","相信","的","它","或者","自己","我们","机器人","通过","巧妇难为无米之炊","一些","时候","。","使用","用","创造","虚拟","具体","也","手上","帮","gazebo","不是","没有","感器","如果","还是","很多","环境","难为","案例","不到","功能","了","几个","已经","再","是","非常","常用","来","传感器","对","传感","大家","的话","仿真","做","平台","核心","好","会用","熟悉","了解","有","启动"," ","不过","下","信息","真实","就","，","可视化","啦","所以","机器","和","显示","在","两个","是不是","一个","讲","方法","强调"],"title":"Rviz vs Gazebo","title_tokens":["vs","gazebo","rviz"," "]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_14","text":"https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":["com","rviz2",".","https"," ",":","/","docs","rviz","www","stereolabs","github","ros2"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/","text":"RQT：模块化可视化工具 ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具——rqt。 rqt介绍 正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，接下来，大家就可以跟随我的思路，我们一起来试一试。 日志显示 图像显示 接口控制 数据曲线 数据包管理 节点可视化 参考资料 https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":["数据","参考资料","会",".","思路","开发","rviz","可视","另外","可以","实现","org","此时","进行","麻烦","需要","的","它","觉得","有点","安装","数据包","rqt","我们","通过","用到","我","-","en","一些","界面","下来","。","使用","曲线","using","具体","前","类似","也","接下来","管理","—","https","/","操作","强大","$","很多","install","这样","摄像头","有些","基于","apt","日志","很","像头","介绍","中","图像","每个","concepts","功能","了","已经","一样",":","是","参考","：","模块化","命令","来","里边","console","然后","大家","ros","摄像","更","正如","命名","的话","跟随","一","接下","都","html","启动"," ","难免","场景","不过","这个","接口","一句","而","qt","下","humble","一种","就","sudo","docs","，","工具","控制","小","可视化","只","模块","可能","提供","比如","节点","tutorials","和","起来","显示","简单","在","加载","指令","资料","一个","about","难免会","试一试"],"title":"**RQT：模块化可视化工具**","title_tokens":["工具","rqt","可视化","可视","：","模块","模块化","*"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt","text":"ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具——rqt。","text_tokens":["已经","一些","会","一种","。","就","rviz","可视","使用","另外","模块化","，","工具","—","可视化","ros","摄像","只","更","了","模块","强大","操作","此时","可能","的话","比如","用到","提供","麻烦","需要","的","摄像头","有些","觉得","很","有点","像头","显示","简单","中","图像"," ","rqt","我们","场景","一个","难免","不过","难免会","功能","下"],"title":"RQT：模块化可视化工具","title_tokens":["工具","rqt","可视化","可视","：","模块","模块化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt_1","text":"正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，接下来，大家就可以跟随我的思路，我们一起来试一试。","text_tokens":["我","-","界面","一样","humble","下来","思路","是","开发","就","。","rviz","可视","使用","sudo","可以","命令","具体","来","前","也","，","工具","类似","里边","实现","接下来","小","然后","大家","可视化","ros","试一试","了","模块","正如","进行","$","命名","跟随","一","很多","需要","install","这样","的","它","基于","apt","和","安装","接下","起来","都","在","启动","加载","每个","指令"," ","rqt","我们","一个","通过","这个","功能","一句","而","qt"],"title":"rqt介绍","title_tokens":["rqt","介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_1","text":"","text_tokens":[],"title":"日志显示","title_tokens":["显示","日志"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_2","text":"","text_tokens":[],"title":"图像显示","title_tokens":["图像","显示"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_3","text":"","text_tokens":[],"title":"接口控制","title_tokens":["接口","控制"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_4","text":"","text_tokens":[],"title":"数据曲线","title_tokens":["数据","曲线"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_5","text":"","text_tokens":[],"title":"数据包管理","title_tokens":["数据","数据包","管理"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_6","text":"","text_tokens":[],"title":"节点可视化","title_tokens":["可视","可视化","节点"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_7","text":"https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":["-","en"," ","console","tutorials",".","https","humble","concepts",":","ros","rqt","/","docs","org","about","using","html"],"title":"参考资料","title_tokens":["参考","资料","参考资料"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/","text":"资源汇总 常用框架 自主导航 比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/ 自动驾驶 自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/ 路径规划 此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/ 机器人学 ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。 视频课程 斯坦福大学公开课 —— 机器人学 台大机器人学之运动学 Self-Driving Cars with ROS2 & Autoware 古月学院 常用链接 ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":["com","动机","福大","会",".","丰富","要","guyuehome","感兴","开发","可以","典型","实现","感兴趣","这","本书","运动学","推荐","cn","org","完整","感知","书籍","进行","实操","碰撞","每一","的","知识","重在","之外","理论知识","自己","商业","各种","技能","导论","导航","选择","检测","对应","documentation","self","机器人","我们","相关","除此之外","代码","路径","仔细阅读","robots","with","自身","ubuntu","-","en","视觉","经典著作","汇总","autoware","。","使用","移动机器人","也","—","gazebo","即便","https","得","http","/","框架","如果","必备","课程","ros2","应用","至于","很多","居","index","公开","被","古月","运动","中","社区","autowarefoundation","还有","工程","导航系统","学院","功能","gitlab","链接","了","算法","几个","》","不",":","是","快速","参考","非常","wiki","：","工程师","仔细","具备","常用","《","内容","除此","版本","对","修炼","一本","auto","多","台大","&","大家","找到","ros","更","cars","商业化","斯坦福","人手","driving","上","自动","热门","任何","好","内功","驾驶","都","理论","这些","斯坦福大学","有","兴趣","基本功"," ","基本功能","roscon","这个","这套","github","人学","自主","2","humble","一种","移动","碰撞检测","就","开课","docs","经典","资源","，","包含","工具","之","控制","机器人学","机械","系统","当今","最为","行业","模块","阅读","autowareauto","等","著名","提供","比如","moveit","机器","和","结合","公开课","学习","中文","、","规划","此外","称为","情况","视频","著作","在","io","基本","navigation","之一","classic","一个","www","臂","html","gazebosim","大学","分拣"],"title":"**资源汇总**","title_tokens":["*","资源","汇总"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_1","text":"","text_tokens":[],"title":"资源汇总","title_tokens":["资源","汇总"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_2","text":"","text_tokens":[],"title":"常用框架","title_tokens":["常用","框架"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_3","text":"比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/","text_tokens":["算法","自主","动机","会",".","要","不","移动",":","开发","快速","。","使用","参考","：","具备","可以","移动机器人","，","也","内容","实现","系统","即便","大家","https","ros","/","org","框架","完整","如果","进行","提供","ros2","比如","上","应用","的","机器","和","任何","自己","好","各种","导航","都","在","中","基本","navigation","基本功"," ","导航系统","基本功能","机器人","我们","相关","这个","代码","功能","这套","链接","了"],"title":"自主导航","title_tokens":["导航","自主"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_4","text":"自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/","text_tokens":["几个","丰富",".","一种",":","是","autoware","。","非常","参考","感兴","：","可以","典型","也","，","包含","—","实现","控制","对","感兴趣","这","auto","当今","最为","系统","大家","ros","https","/","org","行业","框架","模块","感知","商业化","等","如果","著名","autowareauto","应用","很多","的","机器","自动","热门","和","gitlab","商业","、","规划","驾驶","在","中","io","之一","社区","有","兴趣","autowarefoundation"," ","机器人","一个","这个","www","功能","链接","了"],"title":"自动驾驶","title_tokens":["驾驶","自动"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_5","text":"此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/","text_tokens":["视觉",".",":","是","碰撞检测","。","使用","非常","可以","经典","，","也","内容","这","机械","多","https","大家","找到","ros","/","更","org","框架","等","moveit","碰撞","的","、","规划","此外","都","检测","运动","在","中","还有"," ","相关","这个","臂","功能","分拣","链接"],"title":"路径规划","title_tokens":["路径","规划"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_6","text":"ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。","text_tokens":["人学","》","经典著作","是","开发","。","就","仔细","工程师","经典","可以","《","，","工具","除此","修炼","一本","版本","机器人学","本书","得","大家","ros","推荐","书籍","阅读","人手","必备","比如","实操","至于","每一","的","知识","机器","重在","之外","结合","学习","理论知识","导论","中文","内功","技能","称为","被","情况","都","理论","这些","对应","著作","选择","有","工程"," ","机器人","相关","除此之外","仔细阅读","自身"],"title":"机器人学","title_tokens":["人学","机器","机器人学","机器人"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_7","text":"斯坦福大学公开课 —— 机器人学 台大机器人学之运动学 Self-Driving Cars with ROS2 & Autoware 古月学院","text_tokens":["人学","-","福大","autoware","开课","之","—","机器人学","台大","&","运动学","cars","斯坦福","driving","ros2","机器","公开课","公开","古月","运动","斯坦福大学","self"," ","机器人","学院","with","大学"],"title":"视频课程","title_tokens":["视频","课程"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_8","text":"ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":["en","com",".","2","guyuehome","humble",":","docs","wiki","：","gazebo","https","http","ros","cn","/","org","ros2","居","robots","index","古月","documentation"," ","classic","roscon","www","html","gazebosim","github","ubuntu"],"title":"常用链接","title_tokens":["常用","链接"]}]}