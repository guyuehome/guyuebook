{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"引言 机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的 电气时代 。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的 数字时代 ，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发， 智能机器人时代 正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。 教程链接汇总 课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/90 博客泡圈： https://www.guyuehome.com/","text_tokens":["汇总","ros2","设备","出现","伺服电机","agv","服务","年前","21","90","robot","_","系统","太","环境","的","更","感器","动力","年","之后","，","了","缺少","释放","操控","人类","八十年","提出","github","教器","机器","book","ai","就是","人工智能",".","俗称","多","最为","对","工厂","时代","和","序幕","www","、","主角","泡圈","。","博客","只能","主要","仿生","传感","必将","是","减速","随着","正式","不断","经历","命令","2015","视频","劳动","我们","数字","此时","智能化","思考","完全"," ","operating","链接","人工","源码","驱动器","七八","动作","执行","system","gitee","不过","计算机","四足","井喷","局部","拉开","机器人","横跨","视觉","最佳","由示","tutorials","没有","业生","八十","检测",":","狗","控制","2000","电机","劳动力","关注","算机","并","更加","快速","但是","—","十年","帮助","不断丰富","于","应用","载体","重要","七八十年","技术","class","电气","之一","问答","工业生产","工业","开发","呈","而言","爆发","https","自动","要求","丰富","高","circledetail","状","com","guyuehome","大","引言","教程","：","操作系统","这是","生产","拉开序幕","依然","家庭","减速机","软件","自主","类型","图文","bubble","时期","过程","控制器","有限","层面","后","成为","热点","/","感知","也","id","伺服","汽车","智能","课程","送餐","计算","这","操作","驾驶","七八十","驱动","等","逐渐","三个","发展","按照","前夜","传感器"],"title":"引言","title_tokens":["引言"]},{"location":"#_1","text":"机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的 电气时代 。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的 数字时代 ，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发， 智能机器人时代 正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。","text_tokens":["设备","出现","伺服电机","agv","服务","年前","robot","系统","太","环境","的","更","感器","动力","年","之后","，","了","缺少","释放","操控","人类","八十年","提出","教器","机器","ai","就是","人工智能","俗称","多","最为","对","工厂","时代","和","序幕","、","主角","。","只能","主要","仿生","传感","必将","是","减速","随着","正式","不断","经历","命令","2015","劳动","我们","数字","此时","智能化","思考","完全"," ","operating","人工","驱动器","七八","动作","执行","system","不过","计算机","四足","井喷","局部","拉开","机器人","横跨","视觉","最佳","由示","没有","业生","八十","检测","狗","控制","2000","电机","劳动力","关注","算机","并","更加","快速","但是","—","十年","帮助","不断丰富","于","应用","载体","重要","七八十年","技术","电气","之一","工业生产","工业","开发","呈","而言","爆发","自动","要求","丰富","高","状","大","操作系统","这是","生产","拉开序幕","依然","家庭","减速机","软件","自主","类型","时期","过程","控制器","有限","层面","后","成为","热点","感知","也","伺服","汽车","智能","课程","送餐","计算","这","操作","驾驶","七八十","驱动","等","逐渐","三个","发展","按照","前夜","传感器"],"title":"引言","title_tokens":["引言"]},{"location":"#_2","text":"课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/90 博客泡圈： https://www.guyuehome.com/","text_tokens":["ros2","图文","bubble","21","90","_","视频","/","class","id","问答"," ","https","源码","课程","github","circledetail","book","gitee",".","com","guyuehome","tutorials",":","www","教程","泡圈","：","博客"],"title":"教程链接汇总","title_tokens":["教程","链接","汇总"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["致力","学习者","交流学习","出版","企业","传播","赋能","武汉","单位","面向","创新","人才培养","提供","未经","的","ros","年","声明","，","责任","建立","精锋","销售","机器","ai",".","1000","微控","模式","社区","学习","追究其","和","www","、","高质","。","被","请","万人","追究","上","是","与","brand","居","（","学","作品","《","视频","知名","抄录","有权","集"," ","用户","网站","线上","》","源码","复制","包括","究其","平台","120","众多","构建","机器人","古月","面向未来","实践","法律","超过","版权","将","科技","仅限","地区","授权","校企","质量","许可","高校","违反","任何","不得","产品","图书","一体","个人","优质","人才","万字","开发","如需","限于","至今","交流","进行","均","com","上述","guyuehome","修改","华语","2011","努力","畅销","联系","创建","内容","拥有","通过","有限","明者","+","声明者","对本","公司","依法","本","为","合作","捆绑","不","生态","@","累积","有限公司","致力于","培养","未来","课程","小时","或","课件","）","使用","合法","镜像","高质量","等","法律责任","所有","但","其它","及","书面"],"title":"关于我们","title_tokens":["我们","关于"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["致力","学习者","交流学习","出版","企业","赋能","面向","创新","人才培养","提供","的","ros","年","，","建立","机器","ai",".","1000","模式","社区","学习","www","、","高质","。","万人","是","与","居","（","《","视频","知名","集"," ","用户","线上","》","平台","120","众多","构建","机器人","古月","面向未来","实践","超过","地区","校企","质量","高校","图书","一体","优质","人才","万字","开发","至今","交流","com","guyuehome","华语","2011","努力","畅销","创建","内容","通过","+","为","合作","生态","累积","致力于","培养","未来","课程","小时","）","高质量","等","及"],"title":"学机器人，上古月居","title_tokens":["居","机器人","古月","学","上","机器","，"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["传播","武汉","单位","未经","的","声明","，","责任","精锋","销售",".","微控","学习","追究其","和","、","。","被","请","追究","与","brand","居","作品","视频","抄录","有权"," ","网站","用户","源码","复制","包括","究其","古月","法律","版权","将","科技","仅限","授权","许可","违反","任何","不得","产品","个人","如需","限于","进行","均","com","上述","guyuehome","修改","联系","拥有","有限","明者","声明者","对本","公司","依法","本","为","捆绑","不","@","有限公司","课程","或","课件","使用","合法","镜像","等","法律责任","所有","但","其它","书面"],"title":"版权声明","title_tokens":["版权","声明"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/","text":"ROS/ROS2是什么 智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。 ROS的诞生 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人—— PR2 ，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS的发展 ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称 ROSCon ，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。 ROS的特点 ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。 参考资料 关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["下来","想到","大步","研发","多媒体系统","来到","访问量","价格","其次","robot","全新","系统","一堂","肩膀","本身","领域","深知","更","ros","感器","humble","年","100","linux","迭代","做","增长速度","那","曲线","简单","万左右","支持","浏览量","迅猛",".","ros1","整理","学习","长期","因为","、","一段","怀揣","干","或者","找到","结晶","是","木头","四项","却步","开发者","详细","第一个","巨人","快","美妙","提问","核心","b","剪头发","一起","局限","做成","更为","视频","呢","为例","版本","选择","更好","巨大","苹果","2022","跑","index","其实","operating","轰动","明智","网站","此","参考","直接","重量级","引擎","这样","大量","望而却步","答案","在","120","远","促使","机器人","得以","大部","进步","绝大部分","只","没有","今日","日常","页面","不多","不到","有人","电路","全","控制","关键","系列","许可","可为","下载","之内","联合","推进","研究","机制","笔记本","；","介于","造","产品","索引","针对","做到","重要","个人","分钟","类似","一届","人才","肯定","很","疫情","收拾","工具","人数","通信","标志","嘉宾","具备","限于","至今","离不开","还","进行","陪","处理","而","圈","大会","高效","加","认识","操作系统","月","场景","已经","这是","40","同时","神兵","努力","大学","效率","大有可为","低","看到","沉淀","光靠","维基","长远","该","第一次","同理","涉及","投了","资料","步伐","生态","智慧","入门","发布","这群","万万","无论","什么","c","微软","？","逐渐","框架","不断更新","聊天","直到","量级","零","ros2","不要","组成","算是","局限性","服务","没想","统统","熨烫","柔性","身影","底盘","不下","臂","数据库","风险","扩展","要","趋势","数据","而且","查看","，","给出","零部件","说明","物体","而生","专业","别人","适用","第一","条","起","对","时代","简称","社区","制造","和","访问","希望","很快","xbox","软件系统","windows","整合","主要","packages","功能","基本","月底","模块","随着","作为","如何","率","一大笔钱","intel","居","同样","一定","正式版","上去","商业化","嵌入式","甚至","推动","广泛","棒","讲解","轮子","智能化","五年","确定","时候","围绕","全球化","源码","好","世界","嵌入","都","代","首先","20","据库","特点","亚马","总体","青年","为了","来自","配合","将","野蛮","次数","完成","总称","基本上","但是","使命","缩短","正如","帮助","越来","斯坦福大学","集合","任何","一款","用","pr2","向","应用","由","每年","齐聚一堂","提高","乐意","2","来看","头发","叫做","起点","a","又","绝大","商业","全球","托管","做出","向前走","资金","把","搜索","张图","单独","不是","提取","实验","所以","roscon","推荐","投资","大","想法","不同","看中","无聊","接下","利器","多项","给","创意","上图","版","泡泡","一下","稳定","之","过程","通过","不乏","回答","公司","成果","不","大家","图","入门教程","一大笔","汽车","后续","开源","课程","加上","普及","亚马逊","所有人","虽好","目标","等","不想","应用软件","你","体系","标准","面纱","传感器","无论是","频繁","全人类","answers","很多","了解","一些","绝对","起来","一步","时间轴","原本","不仅","大大","garage","提供","非常","动力","得到","15","google","人类","github","模块化","这个","近两年","同学","所学","变为","维基百科","真正","”","多","价格便宜","最为","中","百科","四大","做饭","左右","传感","解决","万人","几百","上","浏览","2012","正式","清晰","新","不断","排名","实现","时间","存储","当时","一家","成本","爆款","我们","此时","家","一系","上边","完全","效果"," ","移动","为什么","真的","动机","几百万","可以","水下","情况","平台","system","2014","已有","80","以上","全书","电脑","此后","容易","跟随","没想到","最佳","一样","重新","全人","无疑","做法","设计","包","自己","因","早期","生态系统","自身","事情","快速","—","站","前","新鲜事","年轻人","机械","来讲","正在","衣服","几乎","每","能够","比如","革命","技术","现在","会","部件","大部分","有没有","工业","工程","改为","掌握","同一","采用","有","挑战","万","接下来","ubuntu","后期","willow","诞生","各样","特性","福大","活跃度","还有","论坛","这些","助推","问题","进化","：","方向","以叠","知识","却","板块","2007","复用","跨平台","便宜","软件","几个","其他","250","内容","如果","可能","代码","一套","虽然","人形","团队","斯坦福","同年","也","游戏","每个","记录","百科全书","智能","发表","操作","“","成功","项目","速度","浪潮","游戏机","这位","使用","org","掀起","所有","出来","world","新鲜","方法","生态系","精致","代表","资本","肩负着","手机","各种各样","主阵地","最后","一个","举办","各种","活跃","开始","conference","这款","多万","的","从","独立","之王","普遍","了","欢迎","国家","款","原型","就","注意","提出","受限于","案例","基于","回到","机器","笔记本电脑","繁荣","就是","多年","进入","他们","大笔","等等","通常","。","啦","下","人","着","参考资料","被","两个","叠","时至今日","近几年","官方","一系列","让","这里","限性","体感","turtlebot","宽松","经历","成熟","工程师","开发工具","2015","方式","增长","地域","几年","一切","迎来","名称","终于","用户","居高不下","线上","2010","肩负","来","讨论","一大步","以","神秘","毛巾","分享","总而言之","部分","友好","推出","一大","更新","古月","当初","从中","横跨","越来越","到","尝试","熟悉","强悍","加快","只要","暴露","相关","根据","其中","学术","重量","移动机器人","这一波","并","差不多","风险投资","才","笔记","带领","年轻","于","程度","向前","personal","两年","最高","问答","维基百","开发","而言","关于","原因","阵地","打","不开","kinect","玩耍","百万","媒体","认识一下","一群","外观","之上","初期","许可证","然后","discourse","扫地","25","踏上","用于","历经","台球","统计","对于","教程","度","有志","性能","高度","实验室","2017","只想","上市","2011","一次","资源","图中","创始","还是","年底","充足","层面","各项","之旅","成为","本","为","元素","/","既然","5","受限","复杂","尽量","wiki","洗衣","这","说干就干","新增","复合","采购","150","活动","发展","多媒体","个"],"title":"ROS和ROS2是什么","title_tokens":["ros2","是","和","ros","什么"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#rosros2","text":"智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。","text_tokens":["全","ros2","下来","接下","量级","操作系统","场景","重量","一下","是","。","带领","系统","向","正在","应用","一起","大家","的","呢","ros","巨大","我们","智能化","又","，","那"," ","了","开发","智能","挑战","神秘","就","重量级","提出","嘉宾","这","操作","而生","机器","什么","接下来","认识一下","这位","？","机器人","对","掀起","时代","认识","高度","中","进化","面纱","方向"],"title":"ROS/ROS2是什么","title_tokens":["ros2","是","/","ros","什么"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人—— PR2 ，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。","text_tokens":["大步","很多","精致","一些","组成","手机","最后","一个","服务","熨烫","柔性","robot","系统","这款","的","非常","深知","ros","更","年","要","100","而且","做","独立","，","给出","那","了","零部件","款","原型","物体","就","这个","而生","基于","机器","专业","别人","就是","第一","他们","多","条","整理","和","因为","、","中","很快","软件系统","。","做饭","人","叠","干","功能","或者","找到","上","是","木头","一系列","如何","同样","实现","甚至","推动","剪头发","一起","当时","呢","为例","我们","一切","苹果","此时","家","一系"," ","轰动","为什么","真的","时候","一大步","毛巾","分享","这样","都","可以","代","答案","在","平台","一大","机器人","容易","得以","从中","横跨","越来越","尝试","只","没有","强悍","只要","青年","不到","有人","电路","设计","其中","自己","系列","学术","因","完成","并","事情","但是","—","联合","之内","研究","帮助","越来","斯坦福大学","才","一款","机械","用","pr2","向前","针对","应用","personal","衣服","重要","个人","技术","2","类似","头发","分钟","肯定","部件","很","有没有","开发","收拾","同一","有","打","玩耍","做出","向前走","资金","一群","外观","还","初期","陪","后期","处理","诞生","圈","不是","实验","高效","所以","福大","用于","台球","对于","想法","有志","问题","：","性能","操作系统","实验室","以叠","无聊","却","2007","已经","一次","图中","软件","大学","效率","如果","低","可能","充足","一套","层面","光靠","看到","虽然","成为","团队","不","大家","斯坦福","涉及","既然","也","图","第一次","5","复杂","智能","洗衣","操作","这","说干就干","什么","所有人","？","等","不想","框架","所有","出来","应用软件","你","聊天","标准","个"],"title":"ROS的诞生","title_tokens":["诞生","的","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_1","text":"ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称 ROSCon ，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。","text_tokens":["ros2","想到","了解","资本","肩负着","各种各样","局限性","举办","一个","服务","价格","各种","时间轴","没想","原本","不仅","身影","robot","底盘","garage","系统","大大","开始","一堂","conference","不下","全新","的","更","ros","风险","感器","humble","年","从","迭代","做","，","了","款","原型","支持","就","注意","受限于","提出","这个","近两年","回到","机器","笔记本电脑","变为","多年","真正","适用","进入","第一","他们","多","价格便宜","起","大笔","时代","简称","和","长期","因为","很快","xbox","中","、","。","下","人","着","被","传感","功能","几百","是","官方","却步","开发者","2012","随着","让","正式","月底","第一个","一大笔钱","体感","turtlebot","intel","限性","经历","正式版","成熟","推动","时间","局限","2015","增长","这里","一家","几年","成本","版本","我们","迎来","2022","讲解","名称","五年"," ","operating","终于","确定","居高不下","线上","2010","肩负","直接","分享","部分","几百万","可以","望而却步","在","system","2014","推出","一大","电脑","此后","机器人","跟随","没想到","当初","大部","越来越","到","亚马","绝大部分","熟悉","一样","加快","暴露","为了","来自","控制","关键","野蛮","设计","其中","自己","早期","快速","但是","使命","—","风险投资","斯坦福大学","笔记本","越来","前","笔记","介于","pr2","年轻","于","年轻人","一款","应用","重要","每","每年","齐聚一堂","两年","个人","能够","类似","现在","叫做","一届","会","大部分","起点","绝大","开发","疫情","改为","商业","全球","采用","原因","标志","kinect","百万","限于","ubuntu","之上","把","进行","后期","扫地","willow","诞生","圈","大会","而","单独","提取","所以","roscon","福大","历经","各样","投资","大","教程","助推","问题","看中","操作系统","2017","只想","2011","2007","给","已经","这是","版","便宜","软件","创始","稳定","大学","年底","过程","不乏","公司","成为","本","为","该","团队","斯坦福","同年","投了","也","游戏","步伐","一大笔","5","受限","发布","每个","开源","加上","这群","操作","这","成功","普及","万万","亚马逊","项目","微软","游戏机","使用","虽好","等","逐渐","所有","world","出来","发展","直到","爆款","传感器"],"title":"ROS的发展","title_tokens":["的","ros","发展"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_2","text":"ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["无论是","零","ros2","不要","下来","全人类","很多","生态系","代表","组成","各种各样","多媒体系统","最后","一个","一步","各种","统统","身影","系统","肩膀","本身","臂","领域","的","更","ros","非常","从","linux","做","，","那","普遍","了","简单","人类","支持","就","模块化","这个","案例","机器","别人","繁荣","就是","”","ros1","他们","多","对","社区","制造","和","通常","、","中","windows","。","整合","四大","着","被","怀揣","功能","上","是","时至今日","结晶","模块","这里","率","巨人","宽松","新","上去","实现","核心","商业化","嵌入式","b","做成","一起","开发工具","时间","一家","广泛","我们","跑","轮子","家","智能化","完全"," ","移动","明智","来","围绕","全球化","此","以","动机","直接","引擎","分享","嵌入","这样","部分","都","可以","水下","在","友好","平台","已有","远","促使","机器人","特点","到","越来越","进步","今日","重新","全人","做法","将","设计","自己","移动机器人","生态系统","并","自身","快速","总称","许可","缩短","推进","站","正如","机制","；","越来","集合","造","机械","来讲","产品","向前","应用","做到","由","提高","比如","技术","a","会","人才","工业","开发","工具","商业","全球","有","通信","具备","向前走","至今","媒体","把","还","许可证","各样","不是","特性","用于","这些","：","上市","复用","已经","创意","给","多项","同时","跨平台","软件","还是","之","看到","沉淀","人形","长远","公司","成为","成果","同理","大家","也","生态","智慧","汽车","尽量","智能","开源","这","“","无论","c","新增","复合","采购","使用","目标","体系","发展","多媒体","标准"],"title":"ROS的特点","title_tokens":["的","ros","特点"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_3","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。","text_tokens":["频繁","answers","研发","很多","代表","绝对","起来","算是","一个","访问量","各种","活跃","数据库","多万","的","非常","ros","动力","趋势","数据","从","查看","增长速度","，","曲线","得到","了","国家","15","说明","万左右","就","提出","浏览量","机器","维基百科","就是",".","最为","多","社区","等等","希望","学习","和","访问","中","、","。","百科","整合","左右","人","两个","packages","万人","功能","上","是","基本","近几年","浏览","开发者","四项","这里","作为","清晰","快","新","排名","核心","更为","存储","方式","增长","地域","呢","几年","棒","选择","我们","上边","index","其实"," ","网站","用户","讨论","源码","参考","总而言之","部分","都","可以","在","情况","以上","80","20","机器人","据库","大部","最佳","越来越","到","总体","绝大部分","不多","日常","页面","相关","无疑","根据","包","其中","次数","这一波","快速","基本上","可为","下载","差不多","；","越来","任何","新鲜事","程度","索引","应用","正在","重要","每","乐意","比如","革命","来看","最高","问答","现在","会","大部分","很","维基百","绝大","开发","而言","关于","全球","人数","有","万","discourse","张图","25","加","活跃度","论坛","这些","度","教程","统计","不同","问题","：","助推","大","月","利器","已经","给","这是","上图","40","资源","神兵","几个","大有可为","其他","250","如果","通过","看到","维基","回答","各项","成为","本","不","大家","元素","也","发布","每个","记录","wiki","发表","这","什么","速度","浪潮","使用","？","150","等","活动","org","你","发展","迅猛","新鲜"],"title":"ROS的社区","title_tokens":["社区","的","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#_1","text":"关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["方法","ros2","主阵地","最后","来到","一个","其次","开始","提供","的","扩展","ros","要","从","，","之王","欢迎","google","github","同学","这个","所学","机器","最为","社区","学习","和","中","。","百科","啦","一段","参考资料","主要","解决","万人","找到","是","详细","这里","作为","美妙","居","不断","一定","提问","工程师","一起","视频","更好","我们","效果"," ","网站","参考","好","世界","分享","部分","都","可以","大量","在","然后","120","全书","首先","机器人","古月","更新","大部","绝大部分","配合","将","—","几乎","重要","技术","会","大部分","绝大","开发","工程","关于","掌握","工具","有","阵地","托管","不开","离不开","还","搜索","推荐","踏上","还有","教程","问题","知识","板块","努力","泡泡","几个","内容","代码","之旅","成为","本","大家","入门教程","资料","也","入门","百科全书","后续","开源","课程","这","项目","使用","所有","不断更新","你"],"title":"参考资料","title_tokens":["参考资料","资料","参考"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/","text":"ROS2对比ROS1 在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。 ROS1的局限性 首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。 全新的ROS2 ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。 ROS2 vs ROS1 系统架构 在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。 DDS通信 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。 核心概念 ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。 编码方式 再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。 命令行 最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随教程，你就会慢慢理解这些特性。","text_tokens":["消费市场","运动学","中间层","设备","研发","适配","通信接口","大幅","保障","编码方式","听说","无法","左侧","航天","全新","系统","足够","指定","更","ros","陌生","linux","做","那","作战","阶段","简单","建立","实力","电脑系统","行为","支持","另外","完整性","一本","安全性","面向对象","稍安","单兵","ros1","售价","相对","建筑","干掉","二代","学习","信息","因为","主角","、","加入","常用","架构","除此之外","灵活","怀揣","最新","提","某","找到","或者","时","是","开发者","纠结","与","第一个","1ms","（","两者","概念","最终","细节","切换","核心","当然","命令","局限","做成","解密","更好","高昂","呢","动力学","版本","选择","巨大","运算","一代","适合","房子","只是","其实","难度","不用","接口","直接","写","这样","大量","在","答案","里","机器人","python3","接收","先","大幅度","大部","下要","绝大部分","借助","没有","具体","只有","编程","控制","雷达","全","算力","编码","更加","搭载","集成","软件开发","研究","机制","；","进程","小伙","更换","完","产品","定义","针对","做到","二种","重要","性","类似","基本保障","肯定","省略","成","得","安全","工具","python","很大","自动","通信","catkin","丰富","交道","高","具备","不爽","语言","还","进行","翻地","处理","成功经验","运行","android","编译器","而","存在","加密","勿躁","macos","整体","级别","需求","丢","操作系统","导致","已经","场景","第二","生产","同时","依然","家庭","体验","除此","属性","复杂度","推倒","有限","开发成本","千差万别","只不过","长远","彼此","该","么","广泛应用","升级","wifi","发布","翻新","轻松","二个","vs","计算","无论","现有","什么","）","消失","？","框架","听","why","驱动","面临","ros2","不要","一行","企业","出现","大致","局限性","调试","服务","强","地方","历史使命","分布式","可读","宕机","风险","而已","discovery","实时性","要","数据","新版","常","名字","，","单兵作战","运动","右侧","至关","总之","说明","图片","强壮","周期","会成","适用","rosbuild","第一","对","专注","时代","简称","社区","和","自家","windows","软件系统","基础","只能","主要","ceo","分散","请","能力","功能","重来","天翻地覆","基本","随着","看看","如何","率","编译系统","一定","客户端","担心","稳定性","除了","同样","嵌入式","甚至","面对","广泛","讲解","减少","开发方式","还会","依赖","走","时候","好","策略","看","嵌入","选项","共享内存","都","交付","批量生产","编译","首先","完整","协作","接入","推倒重来","总体","为了","完善","将","发成","这台","完成","但是","受制于","使命","协议","总体而言","主","越来","任何","rosrun","一款","pr2","用","自","例子","应用","提高","不断涌现","来看","标准化","叫做","应该","绝大","更具","商业","小","全球","移植性","格局","安装","经验","把","尽力","rmw","角色","张图","所示","不能","内部","不是","所以","项目管理","信号","接近","大","不同","一种","以及","给","致使","一页","一下","搬","类型","稳定","入侵","理解","改","走向","图像","学术研究","道坎","过程","通过","出错","公司","一团乱","不","大家","汽车","走向市场","后续","开源","课程","内存","话题","普及","理器","目标","怎样","等","大部头","你","先进","按照","一团","标准","下边","毛坯房","频繁","很多","以下几点","了解","一些","opensplice","一步","最大","原本","不仅","由于","能","慢慢","环境","共享","提供","另","非常","动力","之后","精力","工作","保证","管理","批量","系统工程","是因为","可靠性","这个","tcp","master","解算","需要","真正","多","最为","最早","不好","微控制器","对比","中","结合","举","解决","几百","上","之初","变得","角度","变革","不断","实现","c++","100ms","时间","指挥","从而","一家","成本","我们","接触","行人"," ","为什么","一旦","客户","启动","良好","方便","然后","可以","几百万","平台","以上","电脑","至关重要","厂商","跟随","历史","想要","不够","最佳","颠覆性","一一","间层","发布者","重新","调用","一样","可读性","设计","伙伴","可移植","自己","上升","—","应用层","几点","连接","他","通信协议","来讲","物","装修","似乎","全部","几乎","分布","每","比如","能够","明显","是否","会","udp","大部分","工程","移植","它","有","挑战","新一代","第二代","放在","产品开发","消费","部署","含义","诞生","各样","特性","还有","确实","这些","布式","问题","：","即可","小伙伴","修改","定性","内","第二个","分解","不太","复用","跨平台","dds","软件","不难","国际","其他","控制器","如果","优化","可能","涌现","代码","虽然","之前","一套","后","如","也","mcu","生活","程序","打成","每个","智能","未来","发","操作","或","成功","没","个体","项目","切记","使用","管理器","run","迁移","所有","再","多个","要求","也许","最","乱麻","延迟","方法","初次","表示","干扰","各种各样","手机","唯一","最后","网络","一个","可选","面向","各种","不会","有线","之间","开始","方案","的","经常","rostopic","诟病","较","从","符合","独立","topic","了","力学","款","诸多","考虑","是从","就","注意","过","基于","机器","迈过","配置","就是","用到","可选项","他们","不再","过来","当","发现","封装","对象","一边","以下","。","国际标准","节点","啦","下","两个","担忧","对系统","可靠","工作站","网络连接","差异","让","这里","限性","前方","毛坯","颠覆","学","方式","意义","中间","过去","发送","名称","比","产品化","借鉴","用户","来","链接","深入","各位","保留","实时","部分","市场","远比","命令行","收","不过","api","突然","满足","揭秘","一致","多功能","越来越","到","底层","熟悉","只要","相关","总结","到底","其中","学术","一团乱麻","条件","并","层","之外","体现","带领","于","带来","哪些","编程语言","5g","colcon","打交道","开发","尤其","而言","ament","库会","百万","之上","相比","变化","用于","暂且","通用","幅度","对于","教程","amr","性能","厂家","黑客","去","不难理解","流程","部头","联网","第二种","有且","换成","资源","更接","fastrtps","盖","可移植性","middleware","充足","层面","测试","本","为","/","上手","复杂","尽量","交给","课时","印象","受制","简单明了","便于","这","rtos","驾驶","通用性","原有","陆续","继续","三个","但","发展","真实","编写"],"title":"ROS2对比ROS1","title_tokens":["ros2","ros1","对比"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2ros1","text":"在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。","text_tokens":["ros2","到底","其中","第二","上","一个","听说","看看","能","之前","不","么","的","ros","来看","我们","名称","从","做","，"," ","有","就","过","这","或","第二代","在","就是","使用","？","ros1","多","变化","二代","学习","和","你","对比","大","也许","。"],"title":"ROS2对比ROS1","title_tokens":["ros2","ros1","对比"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros1","text":"首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。","text_tokens":["ros2","设备","干扰","出现","一些","网络","一个","服务","各种","地方","原本","由于","有线","航天","系统","足够","的","风险","ros","要","数据","从","工作","，","独立","单兵作战","了","那","作战","保证","款","实力","批量","支持","就","是因为","可靠性","机器","就是","单兵","ros1","第一","售价","最早","和","因为","中","主角","。","只能","担忧","能力","可靠","找到","或者","上","是","工作站","网络连接","天翻地覆","让","随着","第一个","不断","最终","嵌入式","当然","甚至","时间","做成","高昂","呢","成本","我们","运算","一代","适合"," ","为什么","不用","良好","实时","嵌入","这样","部分","市场","都","可以","批量生产","答案","平台","在","首先","机器人","历史","大部","不够","绝大部分","没有","具体","为了","设计","算力","自己","学术","这台","条件","完成","并","更加","搭载","但是","—","研究","连接","他","；","一款","pr2","用","产品","似乎","应用","针对","比如","不断涌现","来看","类似","会","大部分","绝大","开发","它","小","有","自动","通信","新一代","具备","翻地","处理","运行","诞生","内部","用于","级别","问题","：","丢","黑客","已经","致使","生产","资源","家庭","软件","类型","入侵","走向","学术研究","有限","充足","涌现","虽然","不","也","复杂","汽车","走向市场","课程","计算","这","普及","什么","驾驶","？","目标","框架","先进","why","发展"],"title":"ROS1的局限性","title_tokens":["ros1","局限","局限性","的","限性"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2","text":"ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。","text_tokens":["消费市场","运动学","研发","保障","无法","全新","系统","更","ros","linux","那","阶段","简单","电脑系统","行为","完整性","安全性","ros1","建筑","相对","、","架构","怀揣","最新","提","或者","是","开发者","纠结","与","第一个","1ms","（","最终","细节","解密","动力学","呢","选择","巨大","适合","房子","只是","不用","接口","直接","这样","大量","在","机器人","python3","下要","借助","没有","具体","控制","全","算力","更加","搭载","机制","产品","针对","做到","二种","性","类似","基本保障","肯定","得","安全","工具","python","很大","自动","通信","catkin","具备","语言","还","进行","成功经验","运行","android","编译器","加密","macos","需求","操作系统","导致","场景","已经","第二","同时","体验","推倒","千差万别","长远","升级","wifi","翻新","无论","）","？","框架","面临","ros2","出现","调试","强","历史使命","分布式","宕机","风险","实时性","要","数据","新版","，","运动","说明","强壮","周期","rosbuild","第一","对","时代","和","windows","基础","重来","基本","如何","编译系统","一定","稳定性","除了","甚至","面对","还会","时候","好","策略","都","编译","完整","协作","推倒重来","为了","完成","但是","受制于","使命","越来","任何","用","一款","应用","来看","标准化","叫做","更具","格局","经验","把","尽力","角色","不能","不是","所以","项目管理","信号","不同","大","一种","以及","给","一下","稳定","入侵","走向","出错","不","大家","汽车","后续","课程","理器","怎样","等","标准","毛坯房","很多","以下几点","原本","不仅","能","环境","提供","动力","工作","管理","系统工程","这个","master","解算","需要","真正","多","不好","微控制器","中","结合","上","之初","变革","实现","c++","100ms","我们","行人"," ","一旦","方便","可以","平台","电脑","历史","最佳","颠覆性","重新","设计","自己","几点","连接","装修","全部","分布","比如","能够","明显","会","工程","移植","它","有","挑战","消费","部署","各样","特性","这些","布式","问题","：","修改","定性","内","分解","跨平台","dds","软件","控制器","优化","可能","代码","虽然","后","也","mcu","生活","打成","智能","未来","操作","成功","个体","项目","使用","管理器","所有","要求","方法","各种各样","手机","网络","一个","各种","不会","之间","方案","的","经常","较","独立","了","力学","诸多","考虑","就","机器","就是","他们","不再","发现","以下","。","节点","下","两个","对系统","可靠","网络连接","差异","让","前方","颠覆","毛坯","过去","发送","比","产品化","借鉴","链接","保留","实时","市场","远比","api","满足","越来越","到","并","体现","于","colcon","开发","尤其","ament","之上","相比","变化","用于","通用","amr","性能","黑客","去","流程","第二种","盖","层面","测试","为","复杂","尽量","课时","受制","这","rtos","驾驶","通用性","原有","继续","但","编写"],"title":"全新的ROS2","title_tokens":["ros2","的","全新"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2-vs-ros1","text":"","text_tokens":[],"title":"ROS2 vs ROS1","title_tokens":["vs"," ","ros2","ros1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_1","text":"在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。","text_tokens":["方法","ros2","中间层","下边","频繁","很多","了解","通信接口","大致","可选","一个","左侧","开始","系统","共享","提供","的","ros","而已","discovery","数据","linux","名字","，","右侧","那","管理","至关","了","建立","简单","是从","另外","就","注意","过","这个","基于","tcp","master","会成","就是","需要","ros1","可选项","学习","发现","封装","和","信息","对比","中","、","windows","。","架构","节点","主要","ceo","请","找到","上","是","变得","让","客户端","两者","从而","指挥","方式","中间","我们","接触"," ","依赖","走","接口","时候","客户","深入","好","看","选项","写","共享内存","这样","都","可以","大量","在","里","不过","至关重要","接收","先","突然","底层","间层","一样","调用","只有","完善","雷达","将","一团乱麻","层","并","更加","协议","—","应用层","机制","连接","通信协议","进程","自","更换","应用","哪些","重要","比如","明显","应该","类似","会","肯定","udp","打交道","成","开发","得","它","有","通信","交道","库会","安装","把","进行","而","角色","张图","变化","macos","整体","这些","操作系统","不难理解","内","不太","有且","dds","不难","稳定","理解","图像","如果","通过","一套","只不过","公司","一团乱","彼此","不","大家","也","程序","发布","复杂","印象","后续","简单明了","内存","这","操作","理器","rtos","消失","管理器","框架","所有","但","再","听","驱动","一团","最","标准","乱麻"],"title":"系统架构","title_tokens":["系统","架构"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#dds","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。","text_tokens":["ros2","频繁","一行","适配","一些","opensplice","唯一","一个","听说","无法","各种","最大","系统","提供","指定","的","更","ros","诟病","另","要","数据","常","符合","做","，","精力","了","简单","总之","就","这个","基于","tcp","机器","master","配置","就是","适用","ros1","多","过来","专注","社区","简称","自家","、","中","软件系统","国际标准","。","加入","灵活","举","解决","功能","某","时","是","基本","纠结","这里","让","如何","率","实现","除了","切换","当然","一家","版本","选择","广泛","我们","成本","减少","其实"," ","用户","接口","不用","好","写","这样","部分","都","可以","然后","在","交付","收","不过","机器人","厂商","先","接入","想要","满足","底层","熟悉","一样","重新","只要","为了","发成","设计","并","更加","之外","协议","通信协议","用","于","带来","物","完","定义","应用","来讲","更换","例子","产品","每","提高","能够","比如","应该","类似","5g","会","是否","udp","省略","肯定","开发","得","移植","商业","通信","丰富","高","安装","不爽","放在","产品开发","rmw","把","部署","相比","变化","不是","加密","所以","还有","需求","这些","对于","不同","问题","性能","厂家","丢","一种","联网","场景","复用","给","dds","软件","国际","fastrtps","稳定","其他","属性","改","如果","复杂度","优化","middleware","代码","开发成本","层面","该","为","不","么","/","也","广泛应用","程序","每个","复杂","交给","轻松","开源","发","这","？","目标","等","三个","再","多个","按照","最","标准","延迟"],"title":"DDS通信","title_tokens":["通信","dds"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_2","text":"ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。","text_tokens":["方法","ros2","第二个","伙伴","其中","已经","以及","很多","并","第二","几百","依然","开发者","这里","如果","小伙","担心","概念","应用","本","几乎","方式","大家","不","的","非常","意义","广泛","应该","也","陌生","我们","会","从","讲解","ros","，"," ","了","开发","开发方式","尽量","全球","各位","不用","有","二个","课程","就","保留","便于","过","部分","百万","几百万","在","使用","含义","ros1","迁移","一致","存在","到","学习","一一","熟悉","和","没有","这些","中","。","小伙伴"],"title":"核心概念","title_tokens":["核心","概念"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_3","text":"再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。","text_tokens":["方法","ros2","不要","企业","一些","一个","一步","面向","可读","的","更","之后","从","，","图片","就","一本","机器","面向对象","迈过","稍安","ros1","用到","多","当","学习","发现","对象","和","一边","中","。","两个","是","角度","看看","如何","同样","实现","学","更好","方式","版本","我们"," ","难度","来","写","在","不过","机器人","大部","总体","发布者","可读性","具体","编程","可移植","编码","软件开发","总体而言","带领","用","来讲","提高","编程语言","会","开发","而言","移植","移植性","具备","语言","所示","特性","勿躁","暂且","确实","接近","教程","部头","一页","更接","软件","搬","道坎","过程","可移植性","大家","如","也","程序","发布","后续","课程","这","操作","项目","切记","大部头","再","真实"],"title":"编码方式","title_tokens":["方式","编码","编码方式"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_4","text":"最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随教程，你就会慢慢理解这些特性。","text_tokens":["ros2","初次","表示","大致","大幅","最后","一个","慢慢","的","rostopic","ros","更","做","，","独立","topic","了","就","master","就是","ros1","最为","相对","对","干掉","和","对比","中","常用","啦","。","节点","下","除此之外","分散","功能","某","是","概念","命令","核心","选择","我们"," ","难度","好","启动","都","命令行","在","以上","跟随","大幅度","揭秘","多功能","编程","相关","控制","总结","上升","集成","主","之外","—","rosrun","每","比如","会","开发","而言","工具","有","通信","把","特性","变化","幅度","这些","教程","即可","：","一种","换成","dds","除此","理解","如果","大家","也","上手","印象","后续","话题","没","现有","陆续","run","所有","再","你"],"title":"命令行","title_tokens":["命令行","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/","text":"ROS2安装方法 本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。 Linux系统简介 时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。 Ubuntu系统简介 我们后续课程使用到的Linux发行版就是 ubuntu系统 。 Ubuntu诞生于2004年10月份， 每六个月发布一个新版本 ，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。 Ubuntu虚拟机安装 虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下： 1. 下载系统镜像 下载链接： https://ubuntu.com/download/desktop 2. 在虚拟机中创建系统 3. 设置虚拟机硬盘大小 4. 设置Ubuntu镜像路径 5. 启动虚拟机 6. 设置用户名和密码 7. 等待系统安装 8. 完成安装 Ubuntu系统安装好后，大家可以先随意使用熟悉一下。 ROS2系统安装 接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下： 1. 设置编码 $ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8 2. 添加源 $ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844 3. 安装ROS2 $ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop 4. 设置环境变量 $ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。 ROS2示例测试 为了验证ROS2安装成功，我们可以通过以下示例进行测试。 示例一：命令行示例 先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。 示例二：小海龟仿真示例 再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["raw","个人爱好","下来","install","多用","可","多任务","系统","领域","指标","更","ros","en","2004","humble","年","互联网","linux","探索","做","download","密码","实力","支持","另外","print","lc","37844","二","俱全","基本相同",".","dpkg","长期","因为","、","常用","加入","&&","除此之外","一般","一直","一应俱全","或者","时","是","量","开发者","与","第一个","提交","快","locales","概念","命令","核心","小海","好者","etc","一起","呢","为例","版本","选择","2022","适合","仿真器","人工","放到","参考","发行版","直接","centos","按键","这样","大量","在","可视","经典","计算机","尚","机器人","先","实践","evaluation","只","没有","deb","ssl","upgrade","控制","opt","8","编码","下载","软件开发","之内","决定","何人","重要","个人","介绍","成","很","https","tee","通信","还","进行","命名","运行","macos","guyuehome","hello","环境变","操作系统","兼容","华丽","发扬","月","真器","已经","场景","同时","第二","依然","试一试","除此","环境变量","大学","teleop","创建","任务","gpg","有限","看到","字符串","该","地址","第一次","sources","资料","目前","硬件","发布","升级","lts","keyring","[","正常","二个","计算","无论","爱好","什么","大小","？","failed","户名","先要","ros2","蓝色","企业","动手做","出现","传播","html","服务","界面","其他软件","试试",">","数据","名字","，","运动","说明","fedora","demo","ubuntu20.04","光大","如遇","to","适用","第一","激发","对","和","www","windows","务器","等待","主要","packages","请","功能","位置","分别","基本","如何","一定","除了","甚至","signed","上下","讲解","热情","依赖","时候","好","6","都","订阅","步骤","占据","为了","看出","普通","芬兰","将","04","完成","o","路径","但是","动手","其","比较","越来","月份","任何","应用","外衣","每年","点击","2","应该","null","叫做","操作方法","收费","商业","添加","turtle","~","安装","影响","编号","把","发挥","简介","com","原理","行列","所以","变量","六个","不同","大","准备","接下","一种","给","合适","ubuntu22.04","版","一下","稳定","gen","过程","通过","desktop","一句","公司","]","一位","不","大家","建议","http","后续","开源","课程","加上","=","叫","等","设置","workstation","cpp","nodes","互联","应用软件","你","(","标准","无论是","很多","了解","一些","绝对","起来","至此","listener","locale","最大","原本","不仅","并且","_","环境","通讯","当中",")","之后","工作","好后","保证","管理","学生","lang","这个","master","需要","redhat","”","多","最为","中","左右","虚拟机","指令","上","相同","浏览","talker","新","实现","bash","时间","$","source","我们","一","此时","接触","效果"," ","服务器","擦掌","验证","bashrc","启动","bug","可以","情况","已有","上层","电脑","持续","出于","想要","connect","发布者","重新","吸引","一样","usr","精神","文件","设计","自己","本相","|","all","爱好者","快速","多用户","1991","—","pro","他","main","开放","来讲","免费","上下左右","22","前先要","每","by","比如","技术","是否","现在","会","share","仿真","奥义","移植","采用","有","紧随其后","os","products","--","接下来","ubuntu","vmware","真理","诞生","各样","setup","3","顺序","7","问题","：","archive","第二个","任何人","提到","不太","dds","软件","节","虚拟","其他","如果","乐于","林纳斯","代码","可能","一套","虽然","之前","后","也","程序","维护","update","激起","小海龟","技术实力","智能","未来","操作","“","或","成功","unix","编辑","1","使用","run","多人","org","应用程序","伴随","sudo","再","world","keyrings","多个","反馈","最","py","方法","rosdistro","千层浪","表示","如下","摩拳擦掌","代表","各种各样","唯一","网络","一个","4","衡量","各种","热爱","开始","gnupg","随意","的","并用","从","这套","编辑器","用户名","了","每隔","考虑","就","示例","node","回到","机器","其后","\"","就是","六个月","人工智能","模式","一应","会加","背景","等等","吧","turtlesim","curl","者","二句","以下","。","啦","节点","下","两个","内核","us","让","这里","检验","githubusercontent","key","一石激起千层浪","紧随","成熟","终端","字符","arch","数字","海龟","源","用户","来","优先","链接","浏览器","以","源代码","分享","唯一标准","命令行","操作界面","构建","更新","中将","越来越","底层","到","熟悉",":","发行","修复","其中","算机","关注","dev","并","自行","之外","最好","echo","硬盘","于","10","打包","export","第二句","两年","准确","之一","第一句","传输","出","开发","关于","后缀","apt","大学生","之上","键盘","变动","通用","-","教程","性能","architecture","联网","lsb","一次","强大","绑定","还是","发扬光大","测试","成为","本","蕴藏","utf","/","5","d","18","说干就干","这","release","报错","codename","可视化","原有","镜像","list","但","发展","各个","迅猛","千层","个"],"title":"ROS2安装方法","title_tokens":["方法","ros2","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2","text":"本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。","text_tokens":["ros2","一种","先要","了解","一下","节","—","系统","本","一起","前先要","重要","的","我们","linux","，","操作","安装","底层","最","。","操作系统"],"title":"ROS2安装方法","title_tokens":["方法","ros2","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#linux","text":"时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。","text_tokens":["方法","个人爱好","ros2","多用","千层浪","很多","企业","动手做","出现","一些","传播","唯一","起来","各种各样","一个","服务","界面","衡量","各种","热爱","原本","不仅","多任务","并且","系统","指标","当中","的","更","并用","年","互联网","linux","之后","这套","，","名字","做","了","管理","实力","学生","支持","另外","就","fedora","这个","光大","回到","就是","迅猛","需要","基本相同","redhat","适用","多","模式","激发","对","等等","和","、","中","加入","windows","。","常用","务器","下","主要","一般","内核","功能","或者","上","是","量","相同","基本","开发者","与","检验","提交","一石激起千层浪","实现","概念","成熟","核心","甚至","好者","时间","一起","呢","版本","我们","讲解","此时","适合"," ","用户","热情","服务器","依赖","放到","参考","发行版","源代码","分享","唯一标准","centos","bug","都","可以","大量","在","操作界面","可视","已有","情况","计算机","尚","先","实践","出于","越来越","到","底层","熟悉","没有","重新","吸引","一样","精神","发行","芬兰","设计","修复","其中","自己","本相","算机","并","爱好者","快速","多用户","动手","1991","最好","—","其","他","越来","任何","决定","开放","何人","来讲","免费","应用","打包","重要","外衣","每年","个人","准确","比如","技术","应该","每","现在","之一","会","叫做","操作方法","收费","成","开发","商业","有","安装","ubuntu","大学生","把","还","之上","真理","命名","各样","原理","行列","所以","macos","通用","不同","大","教程","问题","性能","兼容","操作系统","华丽","发扬","任何人","提到","不太","联网","已经","给","场景","强大","绑定","软件","稳定","大学","发扬光大","其他","过程","任务","通过","有限","乐于","林纳斯","看到","代码","一套","虽然","之前","公司","后","成为","本","一位","不","也","程序","维护","目前","硬件","激起","技术实力","开源","加上","计算","操作","说干就干","这","或","爱好","什么","unix","使用","叫","？","原有","可视化","镜像","等","多人","应用程序","伴随","但","互联","应用软件","发展","反馈","最","标准","千层"],"title":"Linux系统简介","title_tokens":["系统","简介","linux"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu","text":"我们后续课程使用到的Linux发行版就是 ubuntu系统 。 Ubuntu诞生于2004年10月份， 每六个月发布一个新版本 ，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。","text_tokens":["无论是","方法","表示","很多","摩拳擦掌","代表","出现","绝对","网络","一个","4","各种","最大","系统","环境","通讯","领域","的","更","2004","年","互联网","linux","从","编辑器","，","之后","保证","了","每隔","考虑","支持","就","ubuntu20.04","机器","其后","俱全","就是","六个月","人工智能","第一","多","会加","一应","长期","因为","、","常用","中","windows","。","除此之外","虚拟机","主要","一直","一应俱全","位置","时","上","是","浏览","开发者","让","这里","如何","快","新","一定","紧随","除了","为例","版本","选择","我们","2022","数字","讲解","接触","效果"," ","用户","擦掌","优先","人工","浏览器","时候","以","发行版","好","直接","参考","这样","都","可以","在","上层","已有","电脑","机器人","占据","持续","更新","想要","到","熟悉","只","为了","看出","发行","文件","普通","其中","自己","关注","04","自行","但是","软件开发","之外","之内","比较","硬盘","月份","于","10","免费","应用","22","重要","每","两年","比如","会","介绍","很","出","开发","移植","有","后缀","紧随其后","安装","影响","ubuntu","编号","还","发挥","进行","诞生","变动","所以","顺序","六个","不同","教程","性能","月","联网","已经","合适","ubuntu22.04","一次","版","一下","软件","依然","除此","试一试","还是","稳定","虚拟","其他","如果","通过","可能","之前","本","大家","建议","第一次","资料","也","5","维护","硬件","发布","升级","lts","智能","后续","未来","课程","18","或","无论","编辑","使用","等","再","互联","你","各个","个"],"title":"Ubuntu系统简介","title_tokens":["系统","简介","ubuntu"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu_1","text":"虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下：","text_tokens":["虚拟机","如下","请","并","同时","自行","完成","-","软件","虚拟","是","下载","相同","html","一个","：","让","这里","其他","pro","其他软件","开始","系统","后","环境","地址","大家","的","/","我们","叫做","工作","，"," ","采用","https","另外","就","操作","安装","products","可以","在","已有","之上","啦","步骤",".","vmware","构建","运行","workstation","com","evaluation","和","多个",":","www","。","准备"],"title":"Ubuntu虚拟机安装","title_tokens":["虚拟","安装","虚拟机","ubuntu"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1","text":"下载链接： https://ubuntu.com/download/desktop","text_tokens":["download"," ","desktop",".","链接","https","com","下载","/",":","：","ubuntu"],"title":"1. 下载系统镜像","title_tokens":[" ",".","镜像","系统","下载","1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2","text":"","text_tokens":[],"title":"2. 在虚拟机中创建系统","title_tokens":[" ",".","虚拟机","系统","虚拟","2","中","创建","在"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3","text":"","text_tokens":[],"title":"3. 设置虚拟机硬盘大小","title_tokens":[" ","大小",".","虚拟机","设置","3","虚拟","硬盘"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4-ubuntu","text":"","text_tokens":[],"title":"4. 设置Ubuntu镜像路径","title_tokens":[" ",".","镜像","设置","路径","4","ubuntu"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#5","text":"","text_tokens":[],"title":"5. 启动虚拟机","title_tokens":[" ",".","虚拟机","启动","虚拟","5"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#6","text":"","text_tokens":[],"title":"6. 设置用户名和密码","title_tokens":[" ","用户",".","密码","设置","6","和","户名","用户名"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#7","text":"","text_tokens":[],"title":"7. 等待系统安装","title_tokens":[" ",".","系统","7","安装","等待"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#8","text":"Ubuntu系统安装好后，大家可以先随意使用熟悉一下。","text_tokens":["使用","ubuntu","系统","先","随意","一下","大家","熟悉","安装","可以","。","好后","，"],"title":"8. 完成安装","title_tokens":[" ","8",".","完成","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_1","text":"接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下：","text_tokens":["下来","ros2","接下","如下","：","系统","我们","，","了","就","安装","可以","接下来","ubuntu","把","步骤","到","中","。"],"title":"ROS2系统安装","title_tokens":["系统","ros2","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1_1","text":"$ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8","text_tokens":["8","install","all","us","gen","locale","locales","_","export","utf","$","en","update"," ","apt","lang","lc","=",".","sudo","-","&&"],"title":"1. 设置编码","title_tokens":[" ",".","设置","编码","1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2_1","text":"$ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844","text_tokens":["raw","ros2","install","rosdistro","可","_","gnupg","ros",">",")","，","print","37844","master","\"","如遇","to",".","”","dpkg","curl","www","&&","packages","githubusercontent","key","etc","signed","$","source","arch"," ","参考","connect",":","usr","deb","ssl","|","dev","o","echo","main","by","null","share","https","tee","apt","os","--","ubuntu","com","guyuehome","-","archive","architecture","lsb","gpg","]","/","sources","http","update","keyring","[","d","release","报错","“","codename","=","list","org","sudo","keyrings","failed","("],"title":"2. 添加源","title_tokens":["源"," ",".","添加","2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3-ros2","text":"$ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop","text_tokens":[" ","install","desktop","sudo","apt","$","ros","humble","-","upgrade","update"],"title":"3. 安装ROS2","title_tokens":[" ","ros2",".","3","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4","text":"$ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。","text_tokens":["opt","ros2","已经","至此","echo","系统","bash","$","/","ros","source",">","humble","，"," ","了","bashrc","好","~","就","安装","\"","在",".","setup","中","。"],"title":"4. 设置环境变量","title_tokens":[" ",".","设置","环境","变量","环境变量","4","环境变"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_2","text":"为了验证ROS2安装成功，我们可以通过以下示例进行测试。","text_tokens":["ros2","以下","进行","通过","测试","验证","示例","安装","成功","可以","为了","。","我们","，"],"title":"ROS2示例测试","title_tokens":["ros2","示例","测试"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_1","text":"先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。","text_tokens":["py","ros2","第二个","两个","第二","dds","listener","问题","一个","：","第一个","如果","通过","talker","命令","系统","_","终端","字符串","重要","试试","的","$","字符","是否","数据","中","传输","，"," ","发布","来","正常","说明","二个","通信","demo","启动","“","在","订阅","”","第一","最为","先","run","cpp","底层","吧","nodes","world","发布者","没有","hello","者","以下","。","节点"],"title":"示例一：命令行示例","title_tokens":["命令","示例","一","命令行","："]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_2","text":"再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["真器","ros2","将","左右","两个","如下","蓝色","第二","指令","试一试","上","至此","分别","教程","—","一个","：","teleop","key","一句","小海","_","上下左右","终端","该","第二句","蕴藏","的","$","ros","点击","仿真","第一句","海龟","上下","我们","奥义","探索","小海龟","仿真器"," ","，","运动","来","turtle","关于","后续","启动","就","按键","示例","node","“","安装","可以","成功","在","经典","啦","”","第一","中将","run","运行","背景","键盘","节点","持续","再","turtlesim","中","二句","。","控制"],"title":"示例二：小海龟仿真示例","title_tokens":["小海","示例","仿真","海龟","：","二","小海龟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/","text":"ROS2命令行操作 在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。 Linux中的命令行 类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。 启动方式 回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。 常用命令操作 我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。 ROS2中的命令行 ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。 运行节点程序 想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看节点信息 当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim 查看话题信息 当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose 发布话题消息 想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 发送服务请求 一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\" 发送动作目标 想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\" 录制控制命令 系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["令人","下来","孤单","逛来逛去","系统","goal","指定","更","ros","linux","子目录","x",".","学习","信息","因为","、","常用","便捷","保持","具体操作","不变","灵活","一直","某","或者","是","详细","与","第一个","件夹","概念","命令","小海","核心","spawn","17","action","一起","转","呢","为例","选择","rosbag2","2022","只是","rate","仿真器","有点","不用","此","复制到","商家","直接","这样","目","很少","在","1.8","可视","cd","语法","先","受","动","没有","具体","不到","控制","背","不可","系列","看不到","集成","机制","0.0","快捷键","笔记本","mv","深色","rotate","11","重要","总","麻烦","源文件","类似","vel","theta","成","很","工具","想象","查","则","至今","还","进行","均","运行","目录","从来","需求","手","真器","专门","场景","已经","40","试一试","体验","teleop","创建","删除","t","看到","新建","该","第一次","一点","子目","并不一定","发布","正常","[","'","轻松","感兴","呀","无论","现有","什么","度高","？","bag","每次","alt","<","ros2","大致","调试","服务","窗口","鼠标","pwd","{",">","要","数据","查看","，","msgs","当前工作","必不可少","参数","而是","0.2","第一","拷贝到","对","和","record","移入","z","死记","pose","主要","功能","段","随着","看看","如何","及其","一定","0","call","体操","ctrl","快捷","时候","geometry","录制","好","精心","选项","都","异常","改名","改变","想","将","约束","04","完成","路径","但是","不一","用","列表","应用","感受","由","ls","呈现出","2","叫做","db3","又","turtle","小","name","枯燥","详细信息","魅力","把","搜索","不是","管理员","后边","总有","所以","rotateabsolute","实验","play","不同","当前","看中","接下","一种","什么样","一下","怎么","跟","通过","]","布料","不","大家","令人发指","列出","炫酷","片段","加上","话题","随身","看似","目标","等","你","y","科幻","多到","多种","很多","输入","一些","绝对","了解","起来","…","一步","turtle1","产生","款式","_","慢慢","太","提供","另","逛来","呈现","rm","工作","这种","至于","管理","进一步","系统管理员","文件夹","这个","二十个","需要","”","多","pub","一件","中","买","感觉","例如","结合","难以","解决","一二十","找","指令","上","相同","角度","体会","mkdir","实现","$","定制","我们","一","2.0","此时","一系","接触","服装","完全"," ","为什么","硬","地","目标目录","复制","写字","所在","启动","十个","可以","动作","以上","电脑","容易","想要","材料","一样","调用","本节","文件","设计","自己","主目录","兴趣","cp","—","感兴趣","知道","来讲","衣服","每","比如","能够","仿真","会","逛去","适应","它","若","有","权限","商场","--","接下来","消息","3","还有","确实","这些","问题","：","即可","service","不太","软件","目的","其他","info","内容","如果","可能","虽然","之前","后","既定","也","程序","小海龟","未来","操作","“","cmd","或","子","规则","编辑","1","使用","数量","run","文件名称","所有","sudo","电影","再","播放","多个","terminal","初次","表示","如下","一个","标目","精心设计","各种","一二十个","gedit","的","某个","编辑器","topic","了","忙","就","案例","node","回到","笔记本电脑","\"","就是",",","用到","请求","背景","帮上","科幻电影","里边","turtlesim","一边","。","啦","节点","下","被","常用命令","现出","一系列","这里","让","二十","key","终端","方式","字符","右键","海龟","发送","名称","用户","来","死记硬背","链接","深入","以","统管","保留","觉得","打开","命令行","显示","执行","推出","不过","某段","满足","到","尝试","发指","熟悉",":","rosbag","根据","并","twist","echo","笔记","带领","于","死机","srv","文件名","哪些","35","一二","出","absolute","msg","原因","既","随身带","linear","send","键盘","对于","-","复现","黑客","去","实验室","一次","自主","还是","一只","其上","+","}","本","为","绝对路径","/","angular","改了","拷贝","做好","这","这项","可视化","原有","记忆","list","继续","干什么","但","及","哪"],"title":"ROS2命令行操作","title_tokens":["命令行","ros2","操作","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2","text":"在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。","text_tokens":["将","ros2","一种","不太","一次","—","调试","一步","随着","如果","。","带领","可能","一定","小海","之前","命令","感受","重要","大家","第一次","的","更","我们","会","海龟","接触","，","小海龟"," ","了","进一步","工具","适应","时候","有点","深入","案例","命令行","可以","在","魅力","使用","第一","多","运行","到","学习","中","本节"],"title":"ROS2命令行操作","title_tokens":["命令行","ros2","操作","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#linux","text":"类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。","text_tokens":["很多","一些","起来","一个","服务","精心设计","各种","款式","逛来逛去","的","ros","逛来","呈现","linux","这种","，","了","就","必不可少","就是","多","一件","科幻电影","里边","和","中","、","便捷","买","。","结合","灵活","被","一直","解决","现出","某","功能","是","这里","一定","命令","方式","呢","定制","我们","此时","服装","完全"," ","为什么","来","科幻","时候","精心","商家","保留","这样","都","命令行","可以","在","异常","推出","可视","容易","先","满足","想要","受","没有","材料","一样","根据","不可","设计","自己","约束","并","但是","不一","于","来讲","衣服","比如","呈现出","能够","麻烦","类似","会","成","逛去","工具","想象","小","商场","至今","不是","总有","需求","这些","对于","手","问题","看中","去","一种","场景","什么样","已经","软件","自主","还是","其他","看到","其上","虽然","既定","为","布料","不","大家","一点","并不一定","炫酷","做好","片段","操作","呀","无论","规则","现有","什么","度高","使用","看似","？","可视化","等","所有","但","电影","你","每次","哪"],"title":"Linux中的命令行","title_tokens":["命令","的","中","命令行","linux"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_1","text":"回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。","text_tokens":["令人","多种","初次","输入","窗口","鼠标","一二十个","慢慢","的","，","至于","就","这个","回到","参数","而是","笔记本电脑","二十个","就是","需要","用到","背景","对","科幻电影","因为","中","常用","。","难以","一二十","功能","指令","上","是","一系列","随着","体会","二十","一定","命令","终端","方式","呢","字符","右键","选择","我们","一系","ctrl","快捷"," ","为什么","硬","来","不用","时候","写字","所在","启动","觉得","十个","打开","都","命令行","很少","在","可以","不过","电脑","terminal","到","发指","熟悉","不到","背","系列","看不到","并","但是","快捷键","笔记本","笔记","用","列表","深色","应用","死机","叫做","会","又","一二","很","工具","原因","有","既","随身带","枯燥","魅力","搜索","不是","所以","从来","确实","手","即可","：","黑客","专门","一下","软件","其他","怎么","t","通过","看到","+","后","本","大家","也","令人发指","正常","这","操作","这项","随身","什么","使用","数量","记忆","电影","及","科幻","多到","alt"],"title":"启动方式","title_tokens":["方式","启动"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_2","text":"我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。","text_tokens":["<","绝对","…","一个","标目","gedit","pwd","系统","指定","的","另",">","rm","某个","linux","工作","编辑器","，","子目录","了","管理","系统管理员","当前工作","就","文件夹","回到","需要","”","多","拷贝到","一边","中","常用","保持","移入","感觉","。","死记","下","不变","常用命令","找","功能","或者","指令","mkdir","及其","件夹","命令","我们","一","名称","只是"," ","用户","来","地","死记硬背","链接","目标目录","此","复制","复制到","以","统管","选项","打开","目","显示","可以","执行","改名","cd","语法","先","改变","熟悉","没有","文件","将","主目录","路径","cp","用","列表","mv","文件名","由","ls","源文件","会","出","它","若","查","则","权限","把","均","目录","管理员","这些","对于","当前","：","一下","体验","目的","创建","删除","新建","]","该","为","绝对路径","大家","不","/","也","列出","拷贝","子目","[","未来","“","或","编辑","原有","目标","文件名称","所有","sudo","多个","及"],"title":"常用命令操作","title_tokens":["常用","常用命令","操作","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2_1","text":"ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。","text_tokens":["下","ros2","下来","接下","系列","表示","主要","了解","功能","集成","大致","相同","目的","一个","一系列","与","机制","第一个","跟","内容","概念","命令","小海","核心","感受","一起","总","比如","的","不同","体操","为例","也","我们","仿真","海龟","一系","linux","，","topic"," ","小海龟","有","以","就","操作","话题","node","都","命令行","参数","在","什么","可以","接下来","不过","还","第一","继续","干什么","后边","对","所有","中","具体","具体操作","。","节点"],"title":"ROS2中的命令行","title_tokens":["ros2","命令","的","中","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_3","text":"想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["ros2","teleop","key","命令","_","$","仿真","我们","海龟","要","某个","控制","，"," ","turtle","操作","node","可以","使用","进行","run","运行","想要","键盘","turtlesim","和","中","：","例如","节点"],"title":"运行节点程序","title_tokens":["程序","运行","节点"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_4","text":"当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim","text_tokens":["ros2","某","兴趣","详细","一个","info","如果","感兴趣","知道","命令","系统","哪些","的","呢","ros","$","/","查看","，"," ","来","它","有","感兴","加上","就","这样","node","子","都","可以","详细信息","啦","？","list","运行","对","turtlesim","信息","中","当前","：","节点"],"title":"查看节点信息","title_tokens":["信息","查看","节点"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_5","text":"当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose","text_tokens":["pose","ros2","如下","某","试一试","一个","echo","turtle1","看到","命令","系统","呢","$","的","/","数据","查看","topic","，"," ","有","加上","话题","子","都","还","使用","消息","list","想","中","当前","即可","："],"title":"查看话题信息","title_tokens":["信息","查看","话题"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_6","text":"想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":["z","ros2","twist","指令","起来","0.0","turtle1","通过","命令","_","}","$","/","{","vel","angular","我们","2.0","海龟","，","topic","发布"," ","rate","msgs","msg","geometry","直接","x","话题","cmd","可以","命令行","--","\"","1.8","1","还",",","linear","pub","想要","动",":","y","：","控制"],"title":"发布话题消息","title_tokens":["发布","消息","话题"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_7","text":"一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\"","text_tokens":["真器","ros2","试一试","一只","—","一个","孤单","服务","产生","spawn","太","}","call","srv","提供","$","/","{","改了","2","仿真","我们","海龟","y","，","仿真器"," ","theta","来","'","x","name","\"","还",",","0.2","再","turtlesim",":","调用","：","service"],"title":"发送服务请求","title_tokens":["服务","发送","请求"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_8","text":"想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\"","text_tokens":["真器","ros2","完成","一个","角度","让","turtle1","通过","命令","_","goal","action","rotate","指定","提供","转","比如","的","$","/","仿真","海龟","发送","，","仿真器"," ","忙","theta","absolute","这个","这样","可以","命令行","动作","\"","send","目标","帮上","想要","rotateabsolute","到","turtlesim","3",":","中","具体","："],"title":"发送动作目标","title_tokens":["发送","动作","目标"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_9","text":"系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["rosbag","下来","ros2","自己","很多","04","40","功能","段","-","还是","一个","：","与","看看","如何","如果","turtle1","常用","。","用","17","实现","_","系统","0","命令","11","每","35","大家","的","$","/","vel","rosbag2","db3","我们","2022","数据","，","很"," ","轻松","有","录制","好","这","cmd","子","回到","可以","以上","啦","把","就是","？","bag",".","某段","运行","想要","播放","实验","再","尝试","record","还有","play","中","复现","实验室"],"title":"录制控制命令","title_tokens":["录制","控制","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","text":"ROS2开发环境配置 ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。 Git git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git 下载教程源码 《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。 VSCode Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download VSCode插件配置 为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。 中文语言包 Python插件 C++插件 CMake插件 vscode-icons ROS插件 Msg Language Support Visual Studio IntelliCode URDF Markdown All in One VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["方法","ros2","install","一行","很多","一些","两款","判断","有些","一个","调试","最","不会","21","国内","之间","系统","_","环境","提供","这款","的","非常","ros","更","扩展","年","之后","linux","查看","做","，","码云","编辑器","管理","了","download","简单","另外","支持","就","文件夹","github","示例","而生","几千万","机器","插件","配置","需要",".","功能强大","多","记事本","等等","里边","管理软件","简称","和","迅速","、","中","windows","。","官方网","人","几千","被","vscode","功能","是","浏览","官方","开发者","一系列","让","这里","与","如何","提交","作为","新","件夹","成千上万","千万","命令","切换","c++","终端","喜欢","开发工具","《","方式","2015","呢","$","版本","广泛","行","我们","一系"," ","网站","千上万","》","人工","源码","哪里","clone","好","浏览器","链接","直接","源代码","in","这样","bug","搭建","大量","都","可以","在","编译","gitee","已有","众多","推出","以上","机器人","中会","先","变更","tutorials",":","上万","成千","只","具体","为了","无限","文件","中文","设计","修复","听到","系列","linus","自己","因","记事","完成","并","快速","集成","官方网站","下载","support","all","—","理工","studio","一款","用","管理工具","应用","重要","比如","个人","合并","会","肯定","icons","出","开发","工具","msg","python","https","有","自动","自带","丰富","冲突","apt","markdown","不开","安装","离不开","非常简单","语言","还","进行","审核","贡献","搜索","特性","com","推荐","language","高效","所以","macos","guyuehome","这些","-","不同","教程","下载方式","one","：","准备","操作系统","利器","给","以及","神兵","强大","软件","略显","内容","如果","visualstudio","intellicode","代码","可能","看到","成为","讲","不","大家","组件","/","git","也","广泛应用","cmake","硬件","入门","复杂","语言包","轻量","后续","开源","课程","便于","网上","这","增加","操作","visual","urdf","项目","微软","之父","编辑","使用","？","code","所有","sudo","但","多个","发展","驱动","每次","常听到","编写"],"title":"ROS2开发环境配置","title_tokens":["配置","ros2","开发","环境"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros2","text":"ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。","text_tokens":["给","vscode","完成","一些","两款","—","准备","如何","代码","环境","开发工具","提供","重要","大家","呢","的","ros","git","我们","肯定","查看","做","，","开发","工具","源码","课程","不开","示例","大量","机器","离不开","编译","配置","需要","？","机器人","中会","先","推荐","和","这些","、","。","编写"],"title":"ROS2开发环境配置","title_tokens":["配置","ros2","开发","环境"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#git","text":"git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git","text_tokens":["方法","install","一行","判断","有些","一个","不会","国内","之间","系统","这款","的","非常","之后","linux","码云","，","管理","了","简单","就","github","而生","几千万","需要","等等","管理软件","和","迅速","中","。","人","几千","被","功能","是","开发者","让","提交","新","成千上万","千万","命令","切换","终端","$","版本","广泛","行","我们"," ","网站","千上万","人工","哪里","直接","bug","都","可以","在","gitee","已有","众多","变更","上万","成千","具体","设计","修复","听到","linus","因","并","完成","—","理工","一款","管理工具","应用","比如","合并","会","肯定","开发","工具","有","自动","冲突","apt","安装","非常简单","进行","审核","贡献","特性","高效","所以","这些","不同","以及","软件","内容","代码","可能","看到","不","大家","git","也","广泛应用","硬件","开源","这","增加","项目","之父","使用","所有","sudo","多个","发展","驱动","每次","常听到"],"title":"Git","title_tokens":["git"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_1","text":"《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。","text_tokens":["文件","ros2","很多","vscode","记事","集成","下载","是","浏览","—","一个","这里","略显","如果","。","代码","21","件夹","用","_","系统","讲","环境","《","方式","的","$","/","git","更","会","查看","入门","，"," ","复杂","开发","》","源码","clone","https","好","课程","有","自带","浏览器","文件夹","就","另外","这样","gitee","还",".","多","com","记事本","推荐","里边","guyuehome","tutorials",":","和","中","下载方式","："],"title":"下载教程源码","title_tokens":["下载","源码","教程"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode","text":"Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download","text_tokens":["利器","vscode","神兵","官方网站","功能","强大","快速","下载","是","官方","一个","studio","：","visualstudio","代码","系统","成为","2015","组件","的","扩展","非常","/","年","linux","编辑器","，","download"," ","开发","网站","链接","轻量","https","支持","丰富","源代码","操作","搭建","visual","可以","在","项目","推出","微软","编辑","功能强大",".","com","code","但","简称","macos","和",":","、","windows","。","官方网","操作系统"],"title":"VSCode","title_tokens":["vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode_1","text":"为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。","text_tokens":["ros2","系列","vscode","功能","调试","一系列","与","的","扩展","我们","一系","，","开发","后续","便于","安装","可以","插件","还","为了","。","无限"],"title":"VSCode插件配置","title_tokens":["vscode","插件","配置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_2","text":"","text_tokens":[],"title":"中文语言包","title_tokens":["语言","中文","语言包"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#python","text":"","text_tokens":[],"title":"Python插件","title_tokens":["python","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#c","text":"","text_tokens":[],"title":"C++插件","title_tokens":["插件","c++"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#cmake","text":"","text_tokens":[],"title":"CMake插件","title_tokens":["cmake","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode-icons","text":"","text_tokens":[],"title":"vscode-icons","title_tokens":["vscode","icons","-"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros","text":"","text_tokens":[],"title":"ROS插件","title_tokens":["插件","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#msg-language-support","text":"","text_tokens":[],"title":"Msg Language Support","title_tokens":["msg","support"," ","language"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#visual-studio-intellicode","text":"","text_tokens":[],"title":"Visual Studio IntelliCode","title_tokens":["visual"," ","studio","intellicode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#urdf","text":"","text_tokens":[],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#markdown-all-in-one","text":"VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["自己","vscode","作为","喜欢","环境","大家","个人","的","也","，","出","开发","支持","网上","可以","在","插件","以上","众多","配置","搜索","推荐","只","最","。"],"title":"Markdown All in One","title_tokens":[" ","all","markdown","in","one"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/","text":"DDS Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。 通信模型 DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。 DDS DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。 什么是DDS 好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是 Data Distribution Service ，也就是 数据分发服务 ，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。 DDS在ROS2中的应用 DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。 质量服务策略QoS DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是 Domain ，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为 数据提供者和接收者之间的合约 。 具体会有哪些策略？比如： DEADLINE 策略，表示通信数据必须要在每次截止时间内完成一次通信； HISTORY 策略，表示针对历史数据的一个缓存大小； RELIABILITY 策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式； DURABILITY 策略，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。 案例一：在命令行中配置DDS 我们先来试一试在命令行中配置DDS的参数。 启动第一个终端，我们使用best_effort创建一个发布者节点，循环发布任意数据，在另外一个终端中，如果我们使用reliable模型订阅同一话题，无法实现数据通信，如果修改为同样的best_effort，才能实现数据传输。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort 如何去查看ROS2系统中每一个发布者或者订阅者的QoS策略呢，在topic命令后边跟一个\"--verbose\"参数就行了。 $ ros2 topic info /chatter --verbose 案例二：DDS编程示例 接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。 运行效果 启动两个终端，分别运行发布者和订阅者节点： $ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub 可以看到两个终端中的通信效果如下，和之前貌似并没有太大区别。 看效果确实差不多，不过底层通信机理上可是有所不同的。 发布者代码解析 我们看下在代码中，如果加入QoS的配置。 learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , }, 订阅者代码解析 订阅者中的QoS配置和发布者类似。 learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], }, DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们主要带领大家认识DDS，更多使用方法和相关内容，大家也可以参考下边的链接进行学习。 参考链接 https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["半天","下来","合约","构图","来到","通道","保障","遥控","可","听说","无法","就行了","21","系统","组织","海军","作者","本身","发生变化","领域","指定","更","ros","en","2004","humble","年","best","做","publisher","那","三种","建立","bin","行为","黑入","另外","完整性","二","点对点",".","ros1","占用","学习","信息","接收者","常用","、","瓶颈","讲到","加入","架构","第一种","不变","入个","灵活","effort","提","时","找到","或者","非常复杂","是","相当于","articles","纠结","与","技术标准","差别","第一个","sub","（","命令","核心","当然","一起","视频","更好","呢","distribution","能源","选择","版本","为例","spin","只是","其实","》","包含","不用","broker","有点","接口","回忆","参考","直接","这样","送给","大量","在","super","整个","销毁","机器人","接收","先","python3","guides","multiple","deadline","借助","只","没有","不多","样","具体","编程","只有","有人","控制","8","保证数据","区别","更加","刚才","；","定义","env","针对","二种","重要","个人","麻烦","性","类似","肯定","介绍","很","成","on","得","__","python","get","https","自动","通信","丰富","顺利","数据通信","某一","learning","语言","类","进行","价值","处理","运行","存在","加密","高效","航空","截止","专利","guyuehome","需求","keep","hello","像是","认识","输出","导致","兼容","处于","受到","heard","专门","组成部分","已经","必须","场景","第二","试一试","效率","创建","旋转","points","看到","字符串","讲","就行","地址","bilibili","logger","广泛应用","生态","默认","入门","发布","不感兴趣","升级","兼容性","i","正常","[","'","的话","感兴","发生","无论","双方","什么","无用","）","大小","？","美国","当于","决策","框架","驱动","每次","ros2","预测","转移","蓝色","console","企业","出现","广播","组成","互相","主讲人","sysml","html","服务","分布式","传送","{","要","数据","而且","查看","，","秒","运动","至关","def","msgs","说明","周期","参数","omg","to","华为","第一","depth","对","和","www","定时器","前边","务器","等待","主要","能力","功能","位置","发送给","string","模型","基本","分别","门","模块","作为","如何","居","同样","客户端","一定","第三种","交通","《","体","coding","广泛","行","架构图","可信赖","貌似","qos","中心","选用","时候","好","策略","看","选项","焕然一新","都","定时","编译","异常","订阅","众多","四种","完整","from","历史数据","想","scripts","为了","将","完成","但是","数以千计","使命","主","吃","信赖","用","办法","向","例子","应用","由","提高","应该","来看","这么","容性","商业","name","影响","把","尽力","rmw","角色","单独","不是","成立","具体地址","所以","同一个","缓存","后边","com","所","不同","大","能响","接下","一种","它们","给","丢失","合适","一下","类型","机理","理解","之","0.5","过程","图像","跟","通过","第三","reliable","]","强制","不","大家","图","几种","通信模型","感知","列出","相当","有所不同","about","一角","医疗","尽可能","how","开源","课程","话题","避免","=","所有人","才能","等","设置","对应","任","忽略","我","冰山","42","先进","你","with","按照","(","中间件","标准","chatter","好吃","垂直","在于","下边","频繁","video","很多","初始","一些","callback","qosreliabilitypolicy","建模语言","第四","边","单位","有些","listener","一步","大大提高","由于","并且","并行","大大","通路","_","太","环境","create","提供","分组","非常","综合","意思",")","这种","保证","管理","进一步","concepts","靠","这个","提供者","看下","需要","真正","”","冰山一角","最为","多","pub","最早","不好","中","可见","兼容性问题","父类","四大","举","reliability","解决","延时","publish","火锅","指令","上","结构","服务质量","domain","一新","corba","新","实现","docs","时间","第四种","$","填充","我们","一","此时","据传","上边","神经网络","效果"," ","服务器","一旦","地","self","客户","启动","qosprofile","可以","publishernode","动作","情况","上层","电脑","至关重要","厂商","bv12z4y167w2","历史","subscription","初始化","发布者","一样","usr","数据通","该用","课","文件","一条","设计","包","增多","自己","派","different","授权","兴趣","质量","快速","交换","有所","design","—","\\","连接","感兴趣","history","掉","main","知道","收到","qoshistorypolicy","循环","分布","每","能够","明显","比如","技术","尽可","class","现在","会","工业","profile","它","同一","适应","高速","有","航拍","解析","关闭","%","无人机","关心","--","接下来","放在","消息","生变","import","特性","setup","还有","确实","这些","none","布式","问题","：","service","4g","修改","内","提到","复用","无人","建模","原则","dds","软件","库","主讲","#","timer","数据传输","其他","info","内容","如果","分发","优化","可能","代码","一套","之前","处理速度","后","entry","!","也","id","程序","维护","@","可是","last","强调","每个","遥控器","“","或","没","速度","implementations","1","使用","run","全局","流畅性","org","应用程序","所有","world","多个","要求","py","方法","表示","如下","像","帧","网络","一个","verbose","各种","之间","提示","的","集中","说了半天","符合","欢迎","任意","topic","了","destroy","就","过","不管","示例","案例","node","机器","\"","配置","就是",",","进入","请求","他们","模式","当","关系","对象","通常","者","。","啦","节点","下","神经网","可信","两个","规模","统一","这里","让","终端","拿","方式","增长","宗旨","中间","字符","接口标准","过去","发送","data","终于","用户","全称","来","链接","以","s","晚","实时","打开","部分","高通","命令行","执行","std","不过","古月","working","满足","底层","到","尝试","处",":","太多","空间","那个","建设","相关","根据","到底","subscribernode","并","退出","1989","uml","差不多","echo","带领","程度","于","哪些","helloworld","5g","舰船","日志","定位","传输","开发","而言","msg","shutdown","init","神经","那该","函数","流畅","之上","重大","变化","*","-","国防","rclpy","性能","databus","黑客","去","第二种","回调","一次","资源","绑定","人机","入口","还是","vendors","每条","运转","middleware","许多","集中处理","成为","}","为","utf","/","既然","行业","供者","红色","优势","啥意思","复杂","int32","服务端","尽量","名","便于","publishing","这","无论如何","驾驶","带","durability","连接数","小组","args","点","但","树莓","焕然","各个","哪","真实","编写"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds","text":"Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。","text_tokens":["ros2","神经网","完成","dds","主讲人","是","主讲","来到","—","相当于","网络","服务","过程","21","实现","系统","讲","前边","《","大家","的","ros","我们","相当","入门","，"," ","欢迎","终于","神经网络","来","》","它","好","课程","通信","靠","话题","神经","都","机器","在","、","动作","重大","机器人","古月","最为","他们","当于","变化","我","底层","学习","hello","中","具体","讲到","。"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_1","text":"DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。","text_tokens":["在于","很多","广播","第四","通道","有些","一个","服务","一步","无法","各种","并且","并行","系统","通路","传送","提供","发生变化","的","非常","集中","更","数据","而且","这种","，","三种","了","进一步","建立","就","这个","就是","点对点","需要","真正","ros1","第一","多","请求","当","关系","和","常用","瓶颈","中","可见","务器","。","节点","第一种","架构","解决","规模","时","找到","火锅","上","是","模型","这里","与","作为","客户端","一定","实现","核心","第三种","拿","第四种","增长","行","我们","其实"," ","服务器","一旦","中心","包含","客户","broker","不用","有点","以","这样","都","可以","在","异常","订阅","不过","整个","四种","到","处","没有","太多","只","想","具体","有人","一条","增多","自己","并","更加","兴趣","但是","吃","连接","感兴趣","知道","程度","收到","针对","由","二种","能够","明显","麻烦","应该","类似","会","很","它","通信","关心","影响","消息","进行","生变","处理","角色","单独","变化","具体地址","所","像是","问题","性能","databus","导致","受到","能响","一种","必须","第二种","第二","dds","软件","效率","之","其他","旋转","如果","每条","优化","运转","第三","可能","许多","之前","处理速度","集中处理","成为","为","地址","几种","通信模型","也","列出","发布","不感兴趣","每个","优势","服务端","正常","感兴","发生","这","双方","速度","所有人","使用","连接数","忽略","框架","所有","但","先进","每次","好吃"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_1","text":"DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。","text_tokens":["ros2","预测","频繁","它们","已经","很多","并","通常","dds","交换","一个","模块","新","之前","应用","交通","领域","方式","比如","的","非常","能源","广泛","广泛应用","感知","会","数据","定位","，","很"," ","地","医疗","高速","自动","通信","好","都","可以","在","驾驶","需要","等","满足","不是","存在","决策","航空","借助","和","需求","这些","国防","。"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_2","text":"好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是 Data Distribution Service ，也就是 数据分发服务 ，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。","text_tokens":["半天","垂直","sysml","建模语言","网络","一个","保障","服务","可","听说","各种","分布式","系统","组织","海军","环境","提供","的","2004","说了半天","意思","数据","年","做","，","管理","过","omg","就是","最早","对象","和","中","、","兼容性问题","。","啦","灵活","解决","提","统一","是","服务质量","这里","技术标准","corba","当然","呢","distribution","中间","我们","data"," ","全称","来","中心","地","好","以","策略","实时","大量","可以","订阅","完整","满足","课","设计","到底","质量","数以千计","1989","使命","uml","于","应用","由","分布","比如","技术","现在","舰船","介绍","开发","容性","它","通信","丰富","语言","进行","价值","成立","高效","还有","需求","布式","问题","service","兼容","专门","已经","建模","dds","一下","软件","分发","可能","一套","成为","强制","为","大家","/","也","行业","维护","强调","啥意思","发布","复杂","升级","兼容性","？","美国","等","中间件","标准","真实"],"title":"什么是DDS","title_tokens":["是","什么","dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#ddsros2","text":"DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。","text_tokens":["ros2","下边","转移","蓝色","很多","企业","构图","组成","像","边","一个","可","大大提高","分布式","由于","大大","系统","组织","的","更","ros","要","综合","符合","，","那","保证","至关","了","建立","就","不管","这个","机器","就是","需要","进入","华为","多","他们","对","和","、","中","加入","。","架构","四大","不变","统一","功能","位置","能力","上","是","基本","模块","纠结","这里","差别","让","如何","实现","时间","呢","版本","选择","中间","我们","架构图","接口标准","此时","宗旨","上边"," ","用户","来","选用","接口","部分","这样","高通","都","可以","在","上层","至关重要","厂商","机器人","想","一样","那个","具体","建设","为了","该用","编程","根据","设计","自己","中间件","授权","刚才","用","应用","重要","每","提高","能够","比如","个人","技术","5g","性","分布","会","肯定","工业","开发","这么","而言","得","商业","容性","有","通信","某一","函数","影响","放在","之上","把","所以","专利","布式","问题","性能","4g","兼容","提到","组成部分","一种","场景","给","复用","原则","dds","软件","还是","其他","过程","如果","middleware","可能","代码","就行","不","大家","既然","也","生态","红色","兼容性","尽量","开源","或","无论","无论如何","没","使用","？","驱动","对应","任","所有","但","多个","你","按照","哪","标准"],"title":"DDS在ROS2中的应用","title_tokens":["ros2","应用","dds","的","中","在"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#qos","text":"DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是 Domain ，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为 数据提供者和接收者之间的合约 。 具体会有哪些策略？比如： DEADLINE 策略，表示通信数据必须要在每次截止时间内完成一次通信； HISTORY 策略，表示针对历史数据的一个缓存大小； RELIABILITY 策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式； DURABILITY 策略，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。","text_tokens":["ros2","给","表示","合约","出现","一些","互相","帧","网络","一个","遥控","服务","之间","系统","_","提供","指定","分组","的","ros","要","best","数据","这种","，","保证","了","运动","行为","黑入","另外","完整性","这个","提供者","参数","机器","配置","就是","需要","占用","多","模式","对","不好","关系","和","接收者","中","加入","。","啦","节点","下","入个","可信","effort","举","reliability","延时","发送给","功能","指令","是","结构","模型","基本","门","让","domain","如何","一新","新","一定","实现","命令","时间","一起","视频","更好","呢","体","选择","我们","过去","此时","发送","可信赖"," ","qos","地","回忆","时候","客户","好","策略","直接","晚","这样","送给","焕然一新","都","可以","在","情况","众多","电脑","完整","接收","机器人","历史数据","历史","满足","先","deadline","没有","空间","那个","具体","只有","数据通","样","控制","将","根据","保证数据","派","完成","快速","质量","但是","；","信赖","history","掉","用","办法","定义","例子","应用","针对","向","哪些","重要","每","尽可","比如","来看","类似","会","传输","成","这么","适应","同一","航拍","有","要求","通信","顺利","数据通信","无人机","那该","流畅","尽力","进行","特性","缓存","同一个","加密","截止","需求","这些","所","不同","：","黑客","导致","处于","内","一种","丢失","必须","场景","合适","一次","资源","dds","绑定","无人","人机","理解","过程","图像","如果","通过","reliable","可能","之前","为","不","大家","图","通信模型","也","id","程序","供者","默认","遥控器","尽量","尽可能","的话","便于","避免","带","无用","大小","使用","？","才能","durability","小组","全局","流畅性","应用程序","所有","树莓","焕然","各个","每次"],"title":"质量服务策略QoS","title_tokens":["服务","qos","质量","策略"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_3","text":"我们先来试一试在命令行中配置DDS的参数。 启动第一个终端，我们使用best_effort创建一个发布者节点，循环发布任意数据，在另外一个终端中，如果我们使用reliable模型订阅同一话题，无法实现数据通信，如果修改为同样的best_effort，才能实现数据传输。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort 如何去查看ROS2系统中每一个发布者或者订阅者的QoS策略呢，在topic命令后边跟一个\"--verbose\"参数就行了。 $ ros2 topic info /chatter --verbose","text_tokens":["ros2","一个","verbose","无法","就行了","_","系统","的","best","数据","查看","，","任意","topic","msgs","另外","参数","\"","配置","第一","pub","者","中","。","节点","effort","reliability","或者","模型","第一个","如何","同样","实现","命令","终端","$","呢","我们","据传","data"," ","qos","来","策略","启动","命令行","在","订阅","std","先","发布者",":","数据通","echo","循环","每","传输","同一","msg","通信","数据通信","--","后边","-","去","修改","dds","试一试","数据传输","创建","info","跟","如果","reliable","为","/","发布","int32","话题","使用","才能","42","chatter"],"title":"案例一：在命令行中配置DDS","title_tokens":["中","配置","命令","dds","：","案例","一","命令行","在"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_4","text":"接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。","text_tokens":["下来","接下","dds","代码","之前","为例","我们","，"," ","以","通信","话题","在","接下来","配置","world","尝试","hello","中","。"],"title":"案例二：DDS编程示例","title_tokens":["dds","示例","案例","编程","：","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_2","text":"启动两个终端，分别运行发布者和订阅者节点： $ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub 可以看到两个终端中的通信效果如下，和之前貌似并没有太大区别。 看效果确实差不多，不过底层通信机理上可是有所不同的。","text_tokens":["ros2","两个","如下","并","区别","上","有所","分别","差不多","机理","。","sub","看到","_","之前","太","终端","helloworld","$","的","大","不同","中","可是","，","效果","发布"," ","qos","貌似","有所不同","通信","看","启动","learning","可以","订阅","不过","pub","run","运行","底层","和","发布者","没有","确实","者","不多","：","节点"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_3","text":"我们看下在代码中，如果加入QoS的配置。 learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , },","text_tokens":["py","ros2","如下","console","初始","callback","qosreliabilitypolicy","单位","一个","create","_","系统","提示","作者","的","{",")","best","数据","，","publisher","秒","destroy","def","bin","msgs","说明","示例","node","周期","\"","看下","配置",",","需要",".","”","pub","depth","对象","信息","www","定时器","中","父类","加入","、","。","等待","节点","effort","reliability","publish","功能","string","让","居","（","coding","字符","填充","我们","spin","data"," ","qos","self","接口","s","qosprofile","选项","打开","publishernode","定时","在","执行","std","编译","super","from","python3","古月","销毁","初始化",":","发布者","usr","scripts","文件","8","包","完成","并","退出","主","history","main","知道","qoshistorypolicy","循环","env","helloworld","class","日志","profile","__","msg","python","get","shutdown","关闭","init","%","name","learning","函数","类","消息","进行","import","com","setup","guyuehome","*","-","hello","keep","none","rclpy","输出","：","已经","回调","原则","入口","库","#","类型","timer","创建","0.5","info","如果","reliable","points","代码","字符串","后","为","entry","}","utf","/","logger","!","程序","@","last","发布","[","'","名","publishing","“","话题","=","1","）","args","设置","点","world","(","chatter","编写"],"title":"发布者代码解析","title_tokens":["发布","代码","解析","发布者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_4","text":"订阅者中的QoS配置和发布者类似。 learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], }, DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们主要带领大家认识DDS，更多使用方法和相关内容，大家也可以参考下边的链接进行学习。","text_tokens":["py","方法","ros2","下边","如下","console","初始","callback","qosreliabilitypolicy","listener","一个","create","_","系统","提示","作者","本身","的","{","非常","更",")","best","数据","，","destroy","def","bin","msgs","说明","示例","node","\"","配置",",","需要",".","”","冰山一角","pub","depth","多","对","学习","对象","和","信息","www","中","者","父类","、","。","等待","节点","加入","effort","主要","reliability","功能","非常复杂","string","是","让","sub","居","（","coding","我们","spin","只是","data"," ","qos","self","链接","接口","参考","s","qosprofile","选项","打开","可以","执行","订阅","std","编译","super","from","python3","古月","销毁","subscription","初始化","发布者",":","usr","scripts","相关","文件","8","包","subscribernode","并","完成","退出","主","\\","history","main","带领","知道","收到","qoshistorypolicy","定义","env","循环","helloworld","class","类似","日志","profile","__","msg","python","get","shutdown","关闭","init","%","name","learning","函数","消息","类","进行","import","处理","com","setup","guyuehome","认识","*","-","hello","keep","none","rclpy","输出","：","heard","回调","原则","入口","dds","库","#","类型","创建","info","内容","reliable","points","代码","]","后","entry","}","utf","大家","/","logger","!","也","程序","@","last","发布","复杂","i","一角","[","'","名","“","话题","=","1","）","使用","args","设置","点","world","冰山","(","chatter","标准","编写"],"title":"订阅者代码解析","title_tokens":["者","代码","解析","订阅"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_5","text":"https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["ros2","video","different","dds","html","design","articles","vendors","middleware","_","docs","/","ros","en","humble"," ","on","about","https","concepts","how","implementations","rmw","to",".","guides","bv12z4y167w2","working","org","multiple","com","with",":","www","-","bilibili"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/","text":"工作空间：开发过程的大本营 大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是 工程 。 工作空间是什么 类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做 工作空间 。 所以工作空间是一个存放项目开发相关文件的文件夹，也是 开发过程中存放所有资料的大本营 。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。 创建工作空间 了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 自动安装依赖 我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init $ rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y 编译工作空间 依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。 设置环境变量 编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["下来","install","ros2","多少","rosdistro","如下","rosdep","了解","一些","出现","唯一","至此","html","一个","存放","各种","产生","不会","21","开始","_","系统","并且","环境","creator","path","生效","典型","的","ros","humble",">","en","要","从","工作","子目录","，","得到","可执行文件","管理","了","缺少","另外","就","过","文件夹","p","这个","参数","机器","空间结构","\"","配置","就是","需要","”",".","当","里边","学习","社区","信息","和","人为","关系","、","中","。","啦","仅","local","两个","功能","时","某","或者","是","结构","b2","找到","ws","这里","mkdir","让","允许","新","件夹","概念","命令","行文","终端","根目录","b","docs","$","中间","source","我们","此时","结果","接触","名称","完全"," ","依赖","链接","clone","bashrc","参考","build","creating","选项","部分","都","很少","可以","在","编译","执行","里","如图所示","编写程序","以上","情况","gitee","from","机器人","cd","python3","中会","想要","大部","手动","到","总体","绝大部分",":","tutorials","空间","一样","四个","相关","为了","文件","包","..","自己","放置","工具栏","一部分","dev","并","完成","sh","集成","下载","否则","studio","eclipse","echo","；","任何","用","来讲","大本营","定义","针对","qt","自动生产","比如","能够","点击","2","应该","类似","叫做","会","a","日志","大部分","colcon","警告","绝大","开发","工程","workspace","工具","setup","https","有","自动","~","apt","rosdepc","init","安装","--","接下来","还","进行","均","所示","运行","com","目录","不是","存在","所以","用于","3","guyuehome","log","变量","某些","这些","像是","教程","-","pip","：","一部","pip3","环境变","当前","接下","以及","生产","环境变量","#","创建","过程","内容","w","如果","代码","看到","大本","之前","后","大家","/","资料","也","一点","git","程序","错误","update","强调","子目","i","后续","未来","这","“","操作","visual","子","成功","报错","什么","项目","脚本","1","数量","使用","等","设置","org","保存","并列","所有","sudo","多个","y","src","编写"],"title":"工作空间","title_tokens":["工作","空间"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_1","text":"大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是 工程 。","text_tokens":["文件","放置","工具栏","以及","集成","是","一个","studio","eclipse","创建","内容","产生","新","件夹","之前","环境","creator","qt","大家","比如","的","点击","应该","我们","程序","会","此时","叫做","接触","工作","，"," ","开发","工程","工具","有","后续","就","过","选项","文件夹","“","这个","visual","都","在","、","编写程序","”","等","想要","当","所有","里边","学习","和","某些","这些","中","。","编写"],"title":"工作空间：开发过程的大本营","title_tokens":["开发","大本","大本营","的","空间","过程","：","工作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_2","text":"类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做 工作空间 。 所以工作空间是一个存放项目开发相关文件的文件夹，也是 开发过程中存放所有资料的大本营 。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。","text_tokens":["install","一些","唯一","一个","存放","各种","产生","开始","_","系统","环境","典型","的","ros","要","工作","子目录","，","得到","可执行文件","管理","了","另外","就","文件夹","这个","参数","机器","空间结构","就是","需要","里边","信息","人为","和","关系","、","中","。","两个","功能","时","某","或者","是","结构","b2","ws","这里","允许","新","件夹","行文","根目录","b","中间","我们","结果","名称","完全"," ","build","部分","都","很少","可以","在","编译","执行","里","如图所示","以上","情况","机器人","大部","到","总体","绝大部分","空间","一样","四个","相关","文件","自己","放置","一部分","dev","并","集成","；","用","来讲","大本营","定义","针对","比如","2","类似","叫做","会","a","日志","大部分","警告","绝大","开发","工程","有","安装","进行","所示","运行","目录","不是","存在","所以","用于","3","log","某些","像是","：","一部","创建","过程","w","代码","大本","后","资料","也","一点","错误","强调","子目","未来","这","操作","子","成功","项目","脚本","1","数量","等","保存","并列","所有","多个","src","编写"],"title":"工作空间是什么","title_tokens":["是","什么","工作","空间"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_3","text":"了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git","text_tokens":["下来","ros2","接下","如下","dev","了解","-","下载","一个","ws","创建","mkdir","代码","21","概念","命令","并且","_","的","$","/","git","我们","结果","工作","，"," ","了","https","clone","~","p","可以","接下来","gitee","使用",".","cd","com","guyuehome","和",":","tutorials","空间","教程","src","："],"title":"创建工作空间","title_tokens":["创建","工作","空间"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_4","text":"我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init $ rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y","text_tokens":["多少","install","..","rosdistro","rosdep","一些","下载","一个","各种","代码","path","的","$","humble","也","我们","会","y","从","，","update"," ","i","依赖","工具","有","自动","apt","rosdepc","init","安装","都","可以","--","使用","from","python3","cd","手动","社区","sudo","pip","-","中","src","：","pip3"],"title":"自动安装依赖","title_tokens":["依赖","自动","安装"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_5","text":"依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。","text_tokens":["文件","install","如下","dev","完成","出现","生产","或者","-","否则","：","ws","过程","如果","不会","。","任何","代码","看到","件夹","命令","_","后","自动生产","的","$","ros","应该","/","错误","colcon","工作","，"," ","了","依赖","缺少","有","自动","~","就","apt","build","文件夹","报错","安装","成功","可以","在","编译","、","使用","中会","python3","cd","sudo","log","空间","中","啦"],"title":"编译工作空间","title_tokens":["工作","编译","空间"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_6","text":"编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。","text_tokens":["文件","local","install","包","dev","sh","完成","功能","找到","至此","环境变量","#","ws","让","创建","echo","。","_","系统","行文","后","环境","终端","生效","能够","的","$","/","source",">","我们","工作","可执行文件","，"," ","了","bashrc","~","就","成功","在","执行","编译","\"","配置","还","需要",".","均","设置","setup","所有","变量","和","空间","、","当前","为了","：","环境变","仅"],"title":"设置环境变量","title_tokens":["设置","环境","变量","环境变量","环境变"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_7","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":[" ",".","workspace","https","docs","org","-","html","creating","/","tutorials",":","ros","en","humble","a"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/","text":"功能包：开发过程的大本营 在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做 功能包 。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。 创建功能包 如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python 编译功能包 在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash 功能包的结构 功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。 C++功能包 首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。 Python功能包 C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["<","方法","ros2","install","py","表示","很多","如下","判断","一些","起来","立刻","豆子","html","一个","拿出","各种","first","举个","create","之间","_","环境","的","ros","en",">","humble","要","之后","工作","名字","，","那","声明","了","是否是","可执行文件","说明","就","红豆","文件夹","your","一颗","这个","机器","而是","包中","别人","配置","就是","需要","黄豆",".","”","多","他们","当","社区","拆分","发现","关系","package","和","里边","信息","、","中","很快","必然","。","降低","下","local","除此之外","很难","两个","手上","划分","找","主要","功能","时","指令","或者","是","结构","分别","ws","这里","如何","率","件夹","导航","命令","c++","行文","当然","拿","终端","一起","bash","编译成","docs","呢","$","版本","source","cmakerlists","我们","讲解","名称"," ","移动","某种","类型","来","依赖","包含","时候","源码","放到","型","好","看","build","参考","链接","分享","描述","creating","都","可以","在","编译","执行","里","首先","机器人","cd","语法","视觉","到","xml","越","版权","想","只",":","空间","一样","tutorials","编程","相关","控制","普通","文件","将","包","其中","dev","并","耦合","完成","但是","下载","之外","刚才","机制","；","五颜六色","用","大本营","例子","重要","提高","比如","是否","叫做","会","颜色","之一","colcon","a","介绍","开发","得","workspace","python","https","有","解析","ament","~","name","learning","--","译成","放在","pkg","把","语言","混合","运行","分析","setup","不是","原理","存在","所以","变量","还有","这些","某些","教程","不同","袋子","-","：","环境变","新创","只想","cmakelists","复用","给","必须","包是","包并","入口","软件","除此","自主","还是","包该","type","#","环境变量","创建","过程","是不是","跟","如果","内容","points","代码","看到","大本","可能","新建","entry","该","不","大家","么","/","感知","也","程序","cmake","txt","每个","尽量","正常","后续","这","“","假设","规则","c","数量","绿豆","使用","？","才能","等","设置","新创建","继续","org","三个","出来","所有","但","你","头疼","src","编写"],"title":"功能包","title_tokens":["包","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_1","text":"在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做 功能包 。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。","text_tokens":["方法","ros2","很多","起来","立刻","豆子","一个","拿出","举个","之间","的","ros","，","了","说明","就","红豆","文件夹","一颗","这个","机器","而是","包中","别人","就是","需要","黄豆","多","他们","当","社区","拆分","发现","关系","、","中","很快","。","降低","很难","手上","划分","找","功能","时","是","如何","率","件夹","导航","当然","拿","一起","我们","名称"," ","移动","某种","时候","源码","放到","分享","都","可以","在","里","机器人","视觉","到","越","想","只","控制","普通","文件","包","其中","并","耦合","但是","下载","机制","；","五颜六色","用","例子","重要","提高","比如","叫做","会","颜色","之一","得","有","放在","把","混合","不是","原理","所以","这些","某些","教程","不同","袋子","只想","复用","给","软件","自主","包该","是不是","如果","代码","看到","可能","不","大家","么","感知","也","每个","尽量","假设","数量","绿豆","使用","等","三个","出来","你","头疼"],"title":"功能包：开发过程的大本营","title_tokens":["开发","包","大本","大本营","功能","的","过程","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_2","text":"如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python","text_tokens":["<","新创","ros2","包","表示","dev","包是","功能","或者","指令","分别","还是","#","type","一个","ws","创建","这里","如何","；","如果","跟","。","create","_","命令","c++","新建","终端","比如","呢","$","的","版本",">","我们","/","cmake","名字","，","那"," ","python","ament","build","就","~","这个","name","learning","可以","--","在","c","pkg","使用","？","相关","cd","新创建","package","和","-","中","src","："],"title":"创建功能包","title_tokens":["创建","包","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_3","text":"在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash","text_tokens":["local","install","包","dev","完成","功能","环境变量","#","ws","创建","代码","_","环境","bash","的","$","/","source","我们","之后","colcon","工作","，"," ","正常","好","~","build","可以","在","编译","包中","配置","需要",".","才能","cd","继续","运行","setup","所有","变量","和","空间","src","：","环境变","编写"],"title":"编译功能包","title_tokens":["包","编译","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_4","text":"功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。","text_tokens":["普通","文件","下","新创","包","两个","功能","包并","判断","结构","刚才","一个","创建","如何","件夹","的","呢","是否","我们","，","那","是否是","来","文件夹","？","新创建","分析","不是","。"],"title":"功能包的结构","title_tokens":["结构","的","包","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#c","text":"首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。","text_tokens":["下","文件","cmakelists","包","其中","两个","主要","如下","必须","功能","是","类型","内容","如何","各种","。","代码","c++","该","的","cmakerlists","要","cmake","txt","声明","，"," ","依赖","包含","看","描述","规则","在","编译","首先","需要",".","才能","使用","设置","语法","运行","存在","xml","package","版权","所以","和","中","必然","："],"title":"C++功能包","title_tokens":["包","功能","c++"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#python","text":"C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。","text_tokens":["py","将","文件","除此之外","包","两个","主要","给","功能","一些","但是","入口","是","除此","之外","内容","如何","各种","。","points","c++","_","行文","entry","编译成","不","大家","的","版本","也","我们","会","程序","讲解","中","声明","，","可执行文件"," ","介绍","依赖","包含","python","源码","解析","型","有","后续","描述","这","“","在","执行","编译","译成","语言","配置","需要",".","”","使用","编程","setup","所以","但","package","xml","和","版权","里边","一样","不同","信息","还有","："],"title":"Python功能包","title_tokens":["python","包","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_5","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["ros2","html","first","docs","/","ros","en","humble","a"," ","workspace","https","creating","your",".","org","package","tutorials",":","-"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/","text":"节点 机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。 通信模型 完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。 案例一：Hello World节点（面向过程） ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。 运行效果 大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ], 创建节点流程 代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。 案例二：Hello World节点（面向对象） 所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。 运行效果 接下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ], 创建节点流程 所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。 案例三：物体识别节点 没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。 运行效果 在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 Attention 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。 代码解析 在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ], 案例四：机器视觉识别节点 用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。 运行效果 启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 Attention 如果是在虚拟机中操作，需要进行以下设置： 1. 把虚拟机设置为兼容USB3.1； 2. 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。 代码解析 相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ], 节点命令行操作 节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息 思考题 现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["下来","install","想到","设备","inrange","打印","下限","保障","编码方式","可","java","21","太小","系统","溜溜","作者","xy","更","ros","en","骡子","上限","humble","做","那","心里","简单","bin","jpg","另外","x","来源","面向对象","外界","二",".","看上","学习","信息","understanding","、","常用","加入","保持","至","除此之外","color","某","或者","找到","时","是","bgr","框架图","纠结","（","概念","命令","位于","当然","b","更为","一起","会弹","更好","阈值","for","呢","为例","一项","苹果","spin","只是","动态","接口","不用","参考","in","这样","在","难","可视","里","super","计算机","销毁","机器人","python3","先","bgr2hsv","ret","检测","具体","编程","控制","8","绿色","编码","更加","搭载","马","刚才","机制","这座","进程","；","前后","env","做到","重要","类似","中心点","介绍","很","得","__","状态","python","get","https","通信","高","具备","learning","语言","还","类","进行","眼睛","处理","boundingrect","运行","命名","分析","调整","整体","guyuehome","认识","hello","drawcontours","疑惑","输出","操作系统","宽","兼容","范围","相机","去除","依然","image","除此","创建","任务","points","看到","只不过","字符串","该","同理","logger","一点","硬件","发布","128","正常","[","'","的话","发生","计算","呀","）","腿","？","destroyallwindows","框架","摄像头","远程","驱动","<","一张","ros2","不要","hcx","console","出现","组成","互相","算是","html","像素","调试","窗口","opencv","地方","获取","综合体","分布式","90","可读","更多","{","而已",">","circle","要","findcontours","稍微","名字","，","查看","运动","def","各不相同","说明","岂","部门","图片","物体","三","坐标","周期","参数","ruby","cnt","webcam","和","人为","www","等待","改成","h","180","请","功能","模型","分别","hierarchy","模块","看看","如何","身体","居","0","上去","行文","推动","转换","coding","轮子","结果","helloworldnode","细胞","还会","中心","时候","好","看","选项","都","一节","编译","众多","步骤","完整","from","改变","视觉","ok","总体","scripts","四个","自然","将","完成","例程","路径","但是","主","总体而言","imread","读取","contours","左上角","用","列表","载体","retr","2","来看","应该","a","叫做","生成","就让","移植性","chain","休眠","name","安装","处理过程","while","工人","把","共同","com","不是","推荐","不能","所以","不同","apple","object","接下","一种","给","一下","理解","0.5","过程","图像","通过","]","取","不","大家","通信模型","一台","as","课程","=","监控","乃至","等","设置","nodes","你","videocapture","y","(","多种","初始","一些","轮廓","true","起来","hsv","点画","最大","并且","_","没错","太","环境","提供","50","综合",")","工作","得到","可执行文件","这种","upper","二值化","看上去","模块化","这个","需要","”","多","最为","中","父类","cvtcolor","左右","每一项","合体","虚拟机","四","指令","上","结构","相同","角度","ws","前后左右","好像","实现","c++","docs","时间","255","$","我们","一","思考","效果"," ","移动","理过","某种","后勤","self","所在","启动","云端","if","方便","然后","可以","编写程序","电脑","想要","桌子","初始化","usr","一样","可读性","重新","文件","设计","包","可移植","—","连接","array","前","main","知道","收到","循环","分布","每","比如","lower","class","是否","现在","会","查询","绿点","孤立","移植","它","关闭","pyhton","有","解析","思考题","此处","接下来","放在","摇杆","import","setup","框会","还有","这些","某些","none","布式","即可","：","上角","问题","一帧","修改","home","却","这份","后勤部门","库","attention","#","虚拟","usb3.1","info","detect","w","如果","可能","代码","虽然","之前","sleep","后","entry","!","也","模拟","识别","程序","@","每个","实际","未来","比喻","操作","“","成功","没","速度","1","使用","run","org","world","出来","再","sudo","py","方法","如下","表示","numpy","唯一","像","为止","一个","面向","各种","开始","之间","这款","的","经常","cap","先拉","从","左上","独立","destroy","了","就","注意","过","示例","案例","node","回到","机器","\"","图像处理","配置","就是",",","continue","用到","他们","过来","当","工厂","吧","发现","对象","cv2","勾勒","以下","。","啦","节点","下","int","被","两个","approx","考题","让","这里","图像识别","终端","方式","像头","字符","中间","发送","名称","来","链接","以","打开","实时","物理","显示","命令行","执行","不过","古月","中将","到","熟悉","tutorials",":","一线","imshow","面积","根据","总结","到底","其中","算机","关注","摄像","并","dev","退出","之外","所以然","waitkey","helloworld","编程语言","颜色","日志","出","开发","而言","关于","职责","shutdown","red","apt","init","函数","后勤部","相比","变化","合理","*","-","对于","time","rclpy","重点","去","厂房","流程","负责","更多要","知其所以然","入口","还是","联系","img","是不是","read","可移植性","+","成为","着急","为","utf","既然","/","np","5","红色","复杂","网上","这","保持联系","数值","噪声","可视化","150","args","list","点","但","shape","及","src","mask","知其然","编写"],"title":"节点","title_tokens":["节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_1","text":"机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。","text_tokens":["每一项","合体","给","功能","一些","是","像","一个","机制","连接","通过","各种","综合体","成为","取","一起","的","ros","一项","我们","综合","工作","名字","，","那"," ","了","细胞","就","“","机器","在","众多","就是","”","机器人","到","整体","这些","中","。","节点"],"title":"节点","title_tokens":["节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_2","text":"完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。","text_tokens":["下来","想到","组成","唯一","互相","算是","保障","一个","java","地方","获取","分布式","系统","环境","提供","这款","的","更","从","工作","得到","，","独立","运动","了","可执行文件","那","做","各不相同","部门","另外","就","这个","参数","机器","外界","配置","就是","ruby","需要","”","他们","多","当","工厂","信息","和","人为","中","、","。","节点","除此之外","左右","功能","某","或者","上","是","找到","相同","时","分别","角度","让","看看","前后左右","如何","身体","实现","c++","位于","行文","b","推动","一起","更为","像头","我们","轮子","结果","名称"," ","移动","细胞","还会","来","后勤","时候","云端","这样","物理","可以","都","在","执行","编译","里","计算机","完整","机器人","想要","到","桌子","一线","具体","编程","控制","自然","文件","根据","设计","到底","算机","摄像","并","完成","搭载","之外","—","连接","这座","进程","；","前后","载体","分布","每","比如","编程语言","来看","a","叫做","查询","生成","它","状态","python","职责","有","接下来","摇杆","放在","语言","还","工人","共同","眼睛","运行","命名","后勤部","不是","整体","还有","认识","某些","这些","不同","布式","：","去","操作系统","厂房","却","接下","后勤部门","除此","任务","通过","可能","看到","虽然","该","不","既然","也","程序","一台","硬件","每个","复杂","比喻","计算","操作","这","“","速度","监控","腿","乃至","等","但","摄像头","你","远程"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world","text":"ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。","text_tokens":["ros2","例程","并","功能","打印","是","一个","实现","开始","循环","当然","字符串","终端","不","的","字符","我们","程序","从","，"," ","了","复杂","来","简单","“","编写程序","就是","需要","”","最为","先","world","到","hello","中","。","节点","编写"],"title":"案例一：Hello World节点（面向过程）","title_tokens":["）"," ","（","案例","world","hello","一","过程","：","面向","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_3","text":"大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["下","ros2","不要","知其所以然","打印","马","是","所以然","过程","如何","通过","。","代码","看到","实现","命令","_","循环","后","着急","溜溜","做到","helloworld","终端","大家","字符串","的","$","字符","也","先拉","骡子","我们","，","效果"," ","来","好","看","课程","这个","node","成功","然后","learning","可以","在","编译","执行","“","”","先","run","运行","分析","出来","再","所以","world","hello","中","知其然","节点"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_4","text":"这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ],","text_tokens":["py","ros2","如下","console","初始","面向","_","系统","作者","的","{",")","destroy","，","def","bin","说明","这个","node","示例","\"","配置",",","需要",".","”","信息","对象","www","加入","。","节点","下","功能","是","让","如何","居","实现","时间","方式","呢","coding","我们"," ","接口","选项","打开","编译","from","python3","古月","销毁","ok","初始化",":","scripts","usr","控制","文件","8","包","并","完成","主","main","知道","循环","env","helloworld","来看","是否","日志","python","get","shutdown","关闭","休眠","init","learning","函数","while","类","进行","import","运行","com","setup","guyuehome","*","-","hello","none","time","rclpy","输出","：","入口","库","#","创建","过程","info","0.5","points","代码","sleep","]","后","entry","utf","/","logger","!","程序","@","发布","正常","[","'","“","=","使用","？","args","设置","点","world","(","编写"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_5","text":"代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。","text_tokens":["方法","流程","总结","编码","初始","出现","并","功能","一下","或者","是","但是","理解","纠结","一个","：","创建","这里","如果","面向","过程","模块","代码","实现","c++","虽然","系统","做到","重要","方式","大家","的","经常","更","应该","一点","我们","会","稍微","做","，","这种"," ","很","复杂","简单","不用","接口","关闭","未来","有","pyhton","的话","就","过","模块化","这样","可以","函数","机器","难","使用","用到","销毁","机器人","先","编程","想要","学习","发现","初始化","对于","中","具体","。","节点"],"title":"创建节点流程","title_tokens":["创建","流程","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world_1","text":"所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。","text_tokens":["ros2","可移植","一些","更加","但是","起来","刚才","调试","面向","可移植性","代码","虽然","上去","可读","方式","大家","比如","的","更","更好","也","我们","会","，"," ","了","开发","复杂","移植","移植性","看上去","就","这样","具备","方便","可以","面向对象","在","使用","看上","推荐","所以","对象","和","中","可读性","编程","。","改成"],"title":"案例二：Hello World节点（面向对象）","title_tokens":["）"," ","（","案例","面向对象","world","面向","对象","hello","：","二","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_6","text":"接下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["下来","ros2","接下","打印","一下","还是","。","看到","_","循环","后","终端","字符串","helloworld","的","$","字符","class","，","效果"," ","“","node","成功","learning","可以","接下来","在","”","run","运行","调整","world","hello","中","：","节点"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_7","text":"功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ],","text_tokens":["py","ros2","如下","console","初始","一个","面向","_","系统","作者","的","{",")","，","destroy","了","def","bin","说明","示例","node","\"","面向对象","配置",",","需要",".","”","信息","对象","www","父类","加入","。","等待","节点","功能","时","结构","让","居","实现","时间","方式","coding","我们","spin","helloworldnode"," ","self","接口","看","选项","打开","编译","super","from","python3","古月","销毁","ok","初始化",":","scripts","usr","一样","具体","控制","文件","8","包","并","完成","但是","退出","主","main","知道","循环","env","helloworld","class","是否","日志","__","python","get","shutdown","关闭","休眠","init","name","learning","函数","while","类","进行","import","运行","com","变化","setup","guyuehome","*","-","hello","none","time","rclpy","输出","：","这份","入口","一下","库","#","创建","info","0.5","points","代码","虽然","sleep","]","后","entry","utf","/","logger","!","程序","@","发布","正常","[","'","发生","“","=","使用","args","设置","点","world","(","编写"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_8","text":"所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。","text_tokens":["编码","初始","并","一些","功能","依然","打印","是","总体而言","完成","编码方式","为止","一个","创建","这里","是不是","任务","只不过","实现","方式","大家","的","而已","做","，","只是"," ","了","心里","而言","得","接口","关闭","这","机器","不过","步骤","销毁","机器人","改变","具体","不能","不是","所以","到","world","总体","初始化","还有","吧","hello","中","疑惑","编程","四个","。","节点"],"title":"创建节点流程","title_tokens":["创建","流程","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_9","text":"没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。","text_tokens":["一张","下来","接下","找到","一个","过程","任务","通过","实现","没错","的","为例","模拟","我们","苹果","识别","从","，"," ","来","实际","图片","以","就","网上","机器","接下来","机器人","先","视觉","中","。","节点","编写"],"title":"案例三：物体识别节点","title_tokens":["物体","三","案例","识别","：","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_10","text":"在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 Attention 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。","text_tokens":["py","ros2","install","hcx","如下","表示","轮廓","一个","窗口","opencv","21","_","的",")","，","图片","jpg","就","注意","这个","node","图像处理","需要",".","用到","cv2","中","勾勒","啦","。","被","请","指令","ws","会弹","$","中间","我们","苹果"," ","中心","然后","可以","在","编译","可视","python3","tutorials","重新","将","绿色","dev","例程","路径","—","imread","前","中心点","绿点","出","apt","安装","learning","把","处理","运行","框会","-","即可","apple","：","object","修改","home","image","库","attention","#","图像","代码","看到","后","为","/","识别","(","实际","'","成功","=","使用","可视化","run","sudo","出来","src"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_11","text":"在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ],","text_tokens":["py","<","ros2","hcx","inrange","numpy","如下","console","初始","出现","轮廓","下限","一些","像素","hsv","一个","点画","opencv","21","90","太小","_","系统","作者","xy","更多","的","{","上限",")","circle","从","得到","左上","，","destroy","了","def","bin","upper","说明","图片","二值化","jpg","x","这个","node","示例","坐标","机器","图像处理","\"","配置",",","需要",".","continue","cnt","编写","对象","和","cv2","www","中","加入","cvtcolor","。","勾勒","节点","等待","h","180","int","color","approx","功能","是","bgr","模型","hierarchy","ws","让","如何","图像识别","居","0","实现","概念","阈值","255","for","转换","coding","我们","苹果","spin","效果"," ","理过","来","中心","接口","所在","in","选项","if","打开","显示","在","编译","from","机器人","python3","古月","销毁","bgr2hsv","初始化","tutorials",":","检测","usr","scripts","imshow","具体","面积","将","8","文件","包","关注","dev","例程","并","完成","退出","主","imread","读取","array","contours","左上角","waitkey","main","知道","循环","env","helloworld","retr","lower","2","class","颜色","关于","python","red","get","shutdown","关闭","chain","高","init","此处","处理过程","learning","函数","类","src","进行","处理","import","boundingrect","com","不是","setup","guyuehome","*","-","drawcontours","none","重点","rclpy","上角","：","宽","object","apple","home","更多要","范围","入口","去除","image","库","#","img","创建","过程","图像","detect","w","info","通过","points","代码","+","]","后","entry","为","大家","utf","/","logger","!","模拟","np","识别","程序","5","@","红色","as","128","[","'","计算","=","1","数值","噪声","使用","150","destroyallwindows","args","list","设置","点","出来","shape","y","及","(","mask","findcontours"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_12","text":"用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。","text_tokens":["下来","接下","其中","摄像","或者","读取","图像","好像","用","太","不","像头","的","应该","类似","识别","我们","苹果","颜色","，","动态","就让","图片","有","物体","呀","没","机器","接下来","还","进行","眼睛","机器人","合理","摄像头","问题","。","节点"],"title":"案例四：机器视觉识别节点","title_tokens":["四","视觉","案例","识别","机器","：","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_13","text":"启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 Attention 如果是在虚拟机中操作，需要进行以下设置： 1. 把虚拟机设置为兼容USB3.1； 2. 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。","text_tokens":["object","ros2","设备","虚拟机","如下","摄像","是","attention","#","虚拟","usb3.1","一个","可","连接","如果","；","。","并且","_","终端","后","为","该","$","像头","2","的","识别","红色","，"," ","移动","物体","启动","注意","就","实时","操作","node","成功","learning","可以","在","1","啦","把","需要","进行",".","设置","run","运行","中将","驱动","webcam","摄像头","中","以下","：","至","节点","兼容"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_14","text":"相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ],","text_tokens":["py","<","ros2","inrange","numpy","如下","console","初始","出现","轮廓","下限","一些","true","像素","hsv","点画","opencv","最大","90","并且","_","太小","系统","作者","50","xy","的","{","cap","上限",")","circle","从","得到","左上","，","destroy","了","def","bin","upper","说明","图片","二值化","x","示例","node","周期","坐标","来源","\"","图像处理","配置",",","需要",".","continue","cnt","编写","webcam","信息","和","cv2","www","对象","中","勾勒","cvtcolor","。","加入","节点","h","180","int","color","approx","功能","是","bgr","模型","hierarchy","这里","让","居","0","阈值","255","for","转换","像头","coding","苹果","效果"," ","来","中心","接口","所在","in","选项","if","打开","显示","编译","from","python3","古月","销毁","bgr2hsv","ret","ok","初始化",":","检测","usr","scripts","imshow","面积","将","8","文件","包","摄像","并","完成","主","读取","array","contours","左上角","waitkey","main","知道","env","helloworld","retr","lower","2","class","颜色","python","red","get","shutdown","关闭","chain","高","init","learning","函数","while","类","进行","import","处理","boundingrect","相比","com","变化","setup","guyuehome","*","-","drawcontours","none","rclpy","上角","：","宽","修改","object","一帧","相机","范围","去除","image","入口","库","#","img","创建","info","图像","detect","w","read","通过","points","代码","+","之前","]","后","entry","为","utf","/","logger","!","np","识别","程序","y","@","5","红色","as","128","[","'","计算","=","1","数值","使用","噪声","150","args","list","设置","点","出来","摄像头","shape","videocapture","驱动","及","(","mask","findcontours"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_15","text":"节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息","text_tokens":["<","ros2","如下","#","info","列表","命令","_","的","$",">","查看"," ","操作","name","node","list","信息","常用","：","节点"],"title":"节点命令行操作","title_tokens":["命令行","操作","节点","命令"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_16","text":"现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。","text_tokens":["方法","多种","一个","开始","没错","系统","之间","的","ros","要","工作","，","运动","了","岂","另外","就","这个","回到","参数","机器","配置","他们","最为","过来","发现","和","中","保持","常用","。","节点","下","两个","指令","框架图","概念","实现","b","像头","我们","发送"," ","细胞","某种","还会","显示","一节","在","电脑","机器人","改变","想要","熟悉","控制","将","摄像","并","机制","连接","收到","比如","应该","现在","a","会","孤立","介绍","很","得","有","摇杆","把","不是","这些","问题","负责","一种","给","联系","图像","如果","看到","后","大家","同理","这","保持联系","速度","框架","摄像头"],"title":"思考题","title_tokens":["考题","思考题","思考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_17","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["ros2",".","https","docs","org","-","nodes","html","/","tutorials",":","ros","en","humble","understanding"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/","text":"话题 节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。 通信模型 以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。 发布/订阅模型 从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。 多对多通信 大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。 异步通信 话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。 消息接口 最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。 案例一：Hello World话题通信 了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 运行效果 启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。 发布者代码解析 我们来看下发布者的实现方法。 程序实现 learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口 订阅者代码解析 我们再来看下订阅者的实现方法。 程序实现 learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。 案例二：机器视觉识别 在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。 运行效果 这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。 发布者代码解析 learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], }, 订阅者代码解析 learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], }, 案例三：机器视觉识别优化 通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub 话题命令行操作 话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息 思考题 关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？ 参考链接 https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["raw","下来","设备","就要","install","inrange","下限","听说","无法","太小","系统","组织","作者","本身","xy","更","ros","感器","humble","上限","en","做","publisher","那","bin","另外","x","二","当然",".","信息","understanding","因为","东西","、","保持","加入","报社","数据类型","常用","逻辑性","不变","color","一般","某","是","bgr","与","每换","第一个","sub","（","概念","命令","随处可见","b","做成","阈值","for","视频","更好","换","呢","为例","苹果","spin","适合","包含","接口","参考","in","直接","长度","写","这样","在","可视","里","super","销毁","机器人","接收","python3","先","bgr2hsv","ret","只","没有","检测","编程","传递数据","控制","8","集成","刚才","值","随处","更换","异步","定义","env","谁","做到","重要","魔性","频率","类似","肯定","成","得","__","桥梁","想象","python","get","https","通信","高","learning","语言","类","还","进行","处理","boundingrect","运行","分析","留","存在","不行","guyuehome","需求","hello","drawcontours","输出","宽","heard","已经","渲染","相机","第二","范围","image","去除","精简","创建","千丝万缕","points","看到","bridge","字符串","该","imagesubscriber","讲","第一次","么","logger","硬件","发布","128","i","[","'","二个","的话","感兴","计算","呀","无论","什么","）","？","听","驱动","本原","<","ros2","一行","逻辑","console","组成","互相","html","像素","opencv","获取","化成","90","bw","平时","{","拍摄","英文",">","要","circle","数据","findcontours","查看","名字","，","秒","运动","def","msgs","说明","一份","物体","已","坐标","三","周期","参数","区分","to","cnt","第一","转化成","称之为","对","webcam","格式","和","www","定时器","必然","等待","h","180","功能","采集","string","模型","基本","分别","hierarchy","他会","模块","作为","如何","率","居","同样","一定","0","转换","coding","讲解","中心","时候","好","看","sensor","选项","焕然一新","都","定时","编译","订阅","frame","from","仔细","不然","视觉","想","scripts","公众","自然","将","程序实现","例程","完成","但是","主","协议","积木","读取","contours","左上角","任何","用","列表","例子","文章","队列","retr","提高","2","来看","应该","a","叫做","联系方式","又","之为","移植性","控制指令","chain","name","安装","把","bgr8","不能","不是","阅读","原理","com","画面","object","接下","一种","给","什么样","合适","一下","类型","type","理解","0.5","过程","图像","通过","万缕","一句","解","]","不","大家","建议","通信模型","微信","as","hz","话题","较强","=","监控","叫","才能","目标","设置","比方","对应","你","拼接","videocapture","y","(","长宽","标准","chatter","传感器","过瘾","video","很多","初始","了解","一些","callback","true","轮廓","单位","listener","hsv","一步","点画","说","原本","create","没错","_","并且","太","转换成","usb","另","发出",")","之后","得到","想下","这种","保证","topics","进一步","upper","二值化","模块化","这个","同学","cam","号","需要","”","imagepublisher","多","pub","中","可见","父类","cvtcolor","感觉","带宽","举","传感","publish","指令","上","结构","角度","一新","单向","好像","实现","docs","从而","255","$","填充","我们","一","基本原理","此时","据传","思考","效果","块"," ","完全","某种","self","所在","启动","描述","接口协议","if","千丝","可以","publishernode","cvbridge","以上","subscription","想要","初始化","发布者","一样","usr","间","文件","设计","包","可移植","自己","兴趣","优先级","\\","array","感兴趣","main","知道","收到","来讲","循环","似乎","几乎","每","比如","能够","lower","class","出去","现在","会","是否","固定","放入","移植","它","数据结构","关闭","有","解析","思考题","%","不知","接下来","摇杆","转化","消息","import","exe","各样","特性","setup","3","杂志","周期性","还有","这些","某些","一篇","none","问题","：","即可","上角","方向","修改","知识","第二个","内","一帧","不太","复用","dds","软件","库","几个","#","timer","数据传输","info","detect","w","接收数据","如果","优化","可能","代码","虽然","之前","后","排版","entry","!","也","生活","识别","程序","@","无关","每个","未来","操作","“","成功","没","1","使用","数量","run","org","所有","world","再","稍后","根本","rgb","多个","出来","sudo","要求","最","中是","词","方法","py","如下","numpy","各种各样","唯一","像","最后","一个","各种","开始","之间","提示","思想","cv","的","cap","从","左上","符合","独立","topic","destroy","了","是从","就","注意","示例","案例","基于","node","机器","\"","图像处理","配置","就是",",","发送数据","continue","进入","小编","等等","关系","对象","cv2","imgmsg","者","勾勒","以下","。","啦","节点","下","人","指","int","两个","被","approx","统一","考题","让","这里","终端","方式","字符","发送","名称","data","挺","用户","来","优先","链接","哪里","以","s","实时","打开","显示","命令行","执行","std","不过","古月","满足","到","tutorials",":","imshow","只要","面积","0.1","在生活中","中文","总结","其中","subscribernode","并","自行","退出","传递","echo","waitkey","10","并不知道","helloworld","编程语言","颜色","日志","传输","开发","对劲","关于","报纸","msg","red","shutdown","后缀","打","apt","init","！","函数","所谓","变化","用于","通用","*","-","对于","rclpy","流程","回调","一次","入口","换成","还是","联系","img","是不是","read","可移植性","+","成为","}","为","receiving","耦","utf","/","既然","np","接口定义","5","红色","复杂","名","publishing","这","说干就干","数值","噪声","可视化","150","args","list","点","继续","但","shape","焕然","及","mask","个","编写"],"title":"话题","title_tokens":["话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_1","text":"节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。","text_tokens":["其中","一种","并","功能","各种各样","是","联系","传递","千丝万缕","各种","万缕","实现","之间","重要","方式","的","会","联系方式","数据","，","独立"," ","了","它","桥梁","有","话题","千丝","机器","就是","机器人","各样","不是","但","这些","间","最","。","传递数据","节点"],"title":"话题","title_tokens":["话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_2","text":"以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。","text_tokens":["设备","一个","获取","没错","之间","的","拍摄","ros","要","数据","从","得到","查看","，","做","了","就","这个","机器","称之为","信息","关系","中","必然","。","节点","两个","功能","某","上","是","作为","实现","b","视频","方式","为例","我们","此时","据传"," ","用户","某种","以","实时","这样","显示","可以","在","可视","机器人","到","想","将","传递","a","传输","之为","它","桥梁","有","不是","存在","方向","给","渲染","相机","一下","数据传输","图像","是不是","大家","硬件","这","话题","监控","？","才能","可视化","驱动"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_3","text":"从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。","text_tokens":["一个","无法","组织","平时","本身","的","数据","从","之后","名字","，","了","是从","另外","就","这个","基于","机器","号","就是","需要","发送数据","”","称之为","小编","对","等等","格式","对象","和","者","可见","、","。","数据类型","节点","是","模型","角度","他会","居","实现","随处可见","呢","发送","名称","据传"," ","好","看","这样","都","可以","订阅","接收","古月","机器人","到","发布者","没有","公众","自然","在生活中","兴趣","感兴趣","随处","收到","文章","每","比如","来看","应该","叫做","会","出去","类似","传输","之为","固定","成","它","报纸","有","打","把","特性","杂志","知识","dds","类型","数据传输","接收数据","如果","成为","排版","大家","/","也","生活","微信","发布","的话","感兴","话题","“","什么","使用","叫","？","比方","要求"],"title":"发布/订阅模型","title_tokens":["发布","/","模型","订阅"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_4","text":"大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。","text_tokens":["很多","唯一","一个","没错","的","ros","要","想下","，","了","注意","这个","机器","区分","号","多","称之为","对","和","因为","东西","者","、","。","节点","人","被","指令","是","模型","我们","发送"," ","挺","优先","可以","订阅","里","机器人","仔细","不然","发布者","一样","公众","控制","并","优先级","知道","似乎","谁","魔性","2","之为","报纸","想象","有","通信","控制指令","摇杆","不是","存在","3","杂志","画面","这些","一下","还是","是不是","如果","可能","该","不","大家","建议","通信模型","也","发布","每个","话题","1","数量","再","听","多个","个"],"title":"多对多通信","title_tokens":["多","通信","对"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_5","text":"话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。","text_tokens":["词","逻辑","一些","一个","听说","太","的","更","感器","发出","数据","，","那","运动","了","一份","就","这个","同学","周期","参数","号","就是","第一","等等","者","报社","。","逻辑性","指","传感","某","指令","是","让","居","适合"," ","时候","可以","订阅","古月","发布者","公众","只要","控制","用","知道","收到","异步","并不知道","文章","比如","类似","叫做","传输","报纸","有","通信","不知","所谓","特性","阅读","用于","还有","某些","一篇","修改","合适","一次","如果","可能","后","不","第一次","也","发布","这","话题","较强","什么","？","根本","你","传感器"],"title":"异步通信","title_tokens":["异步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_6","text":"最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。","text_tokens":["各种各样","组成","像","最后","像素","一个","说","各种","系统","的","英文","ros","数据","，","了","就","机器",".","称之为","等等","格式","和","中","、","者","。","节点","统一","是","结构","这里","与","概念","方式","我们","据传","块"," ","包含","接口","描述","这样","都","可以","在","订阅","机器人","发布者","一样","编程","文件","中文","自行","积木","值","定义","比如","编程语言","会","传输","之为","成","得","数据结构","msg","有","后缀","通信","语言","消息","进行","不能","各样","一种","数据传输","理解","图像","通过","既然","也","接口定义","无关","发布","每个","复杂","话题","对应","rgb","拼接","长宽","标准"],"title":"消息接口","title_tokens":["接口","消息"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#hello-world","text":"了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。","text_tokens":["下来","就要","接下","例程","了解","是","string","基本","还是","类型","一个","创建","。","代码","开始","定义","字符串","从而","的","字符","ros","我们","基本原理","发送","从","，"," ","了","发布","来","标准","者","话题","“","周期","这个","接下来","订阅","消息","”","接收","原理","world","再","到","发布者","hello","中","本原","chatter","啦","编写"],"title":"案例一：Hello World话题通信","title_tokens":[" ","案例","通信","world","话题","hello","一","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_7","text":"启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。","text_tokens":["ros2","第二个","第二","一个","第一个","。","sub","看到","同样","收到","_","循环","终端","字符串","几乎","该","helloworld","的","$","字符","也","频率","数据","，","topic","发布"," ","二个","以","启动","话题","“","learning","可以","订阅","消息","”","第一","pub","run","运行","world","发布者","hello","者","：","节点"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_8","text":"我们来看下发布者的实现方法。","text_tokens":["下","发布","方法","实现","的","发布者","来看","我们","。"],"title":"发布者代码解析","title_tokens":["发布","代码","解析","发布者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_9","text":"learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], },","text_tokens":["py","ros2","如下","console","初始","callback","单位","一个","create","_","系统","提示","作者","的","{",")","数据","topic","publisher","秒","，","destroy","def","bin","msgs","说明","示例","node","周期","\"","配置",",","需要",".","”","pub","对象","信息","www","定时器","、","父类","中","加入","等待","节点","publish","功能","string","让","居","（","coding","字符","填充","spin","data"," ","self","接口","s","长度","选项","打开","publishernode","定时","执行","std","编译","super","from","python3","古月","销毁","初始化",":","发布者","usr","scripts","文件","8","包","完成","并","退出","主","main","知道","10","env","循环","helloworld","队列","class","日志","__","msg","python","get","shutdown","关闭","init","%","name","learning","函数","类","消息","进行","import","com","setup","guyuehome","*","hello","-","none","rclpy","输出","：","已经","回调","入口","库","#","类型","timer","创建","0.5","info","points","代码","]","字符串","后","为","entry","}","utf","/","logger","!","程序","@","发布","[","'","名","publishing","话题","“","=","）","args","设置","点","world","(","chatter","编写"],"title":"程序实现","title_tokens":["程序","程序实现","实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_10","text":"对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口","text_tokens":["流程","如下","初始","并","一个","创建","如果","实现","填充","我们","程序","，","发布"," ","接口","关闭","话题","以上","消息","进行","销毁","分析","想要","对","初始化","对象","发布者","编程","：","节点"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_11","text":"我们再来看下订阅者的实现方法。","text_tokens":["下","方法","实现","者","再","的","来看","我们","。","订阅"],"title":"订阅者代码解析","title_tokens":["者","代码","解析","订阅"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_12","text":"learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], },","text_tokens":["py","ros2","如下","console","初始","callback","listener","一个","create","_","系统","提示","作者","的","{",")","数据","topic","，","destroy","def","bin","msgs","说明","示例","node","\"","配置",",","需要",".","”","pub","对","对象","信息","www","者","父类","、","加入","等待","节点","功能","string","让","sub","居","（","coding","spin","data"," ","self","接口","s","长度","选项","打开","执行","订阅","std","编译","super","from","python3","古月","销毁","subscription","初始化",":","scripts","usr","文件","8","包","subscribernode","并","完成","退出","主","\\","main","知道","收到","定义","env","10","循环","helloworld","队列","class","日志","__","msg","python","get","shutdown","关闭","init","%","name","learning","函数","消息","类","进行","import","处理","com","setup","guyuehome","*","hello","-","none","rclpy","输出","：","heard","回调","入口","库","#","类型","创建","info","points","代码","]","后","entry","}","utf","/","logger","!","程序","@","i","[","'","名","话题","“","=","）","args","设置","点","world","(","chatter","标准","编写"],"title":"程序实现","title_tokens":["程序","程序实现","实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_13","text":"对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。","text_tokens":["下","流程","下来","接下","过瘾","如下","初始","并","回调","例程","一个","创建","如果","优化","。","一定","实现","之前","不","大家","的","我们","程序","数据","，"," ","接口","关闭","好","通信","话题","基于","函数","接下来","机器","订阅","以上","啦","还","进行","销毁","处理","继续","分析","想要","对","视觉","world","初始化","对象","hello","者","编程","：","节点"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_14","text":"在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。","text_tokens":["将","两个","并","相机","功能","但是","是","联系","一个","模块","过程","图像","通过","概念","并且","实现","虽然","来讲","做到","做成","更好","方式","的","我们","识别","讲解","程序","中","数据","红色","，","传输","了","开发","物体","即可","模块化","这个","话题","周期","没","机器","在","就是","机器人","对","视觉","和","没有","对于","驱动","间","问题","。","节点"],"title":"案例二：机器视觉识别","title_tokens":["视觉","案例","识别","机器","：","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_15","text":"这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。","text_tokens":["ros2","一个","_","思想","的","另","ros","要","这种","，","topic","保证","了","物体","就","模块化","这个","需要","第一","pub","webcam","保持","以下","。","啦","节点","不变","下","两个","功能","是","分别","模块","第一个","如何","sub","实现","终端","更好","$","我们","完全","效果"," ","好","启动","可以","在","订阅","先","视觉","只","将","设计","可移植","并","更换","定义","来看","放入","移植","移植性","learning","消息","运行","即可","修改","第二个","内","相机","第二","范围","软件","图像","如果","可移植性","看到","识别","红色","发布","二个","未来","说干就干","话题","？","run","驱动","标准","中是"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_16","text":"learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], },","text_tokens":["py","raw","ros2","设备","video","如下","console","初始","callback","true","单位","一个","opencv","create","_","系统","提示","作者","转换成","cv","的","{","ros","cap",")","topic","publisher","秒","，","destroy","def","bin","msgs","说明","示例","node","周期","\"","图像处理","号","配置",",","to",".","imagepublisher","需要","pub","webcam","对象","信息","cv2","www","定时器","、","父类","imgmsg","加入","等待","节点","publish","功能","采集","与","让","sub","居","（","0","转换","视频","coding","spin"," ","self","接口","sensor","长度","选项","if","打开","定时","cvbridge","执行","frame","编译","super","from","python3","古月","销毁","ret","初始化",":","发布者","usr","scripts","0.1","将","8","文件","包","完成","并","退出","主","读取","main","知道","10","env","循环","helloworld","队列","class","日志","__","msg","python","get","shutdown","关闭","init","name","learning","函数","类","消息","bgr8","进行","import","处理","com","setup","用于","guyuehome","*","-","none","rclpy","输出","：","一帧","已经","回调","相机","换成","入口","image","库","#","类型","timer","创建","info","图像","如果","read","points","bridge","代码","]","后","entry","为","}","utf","/","logger","!","程序","@","发布","[","'","名","publishing","话题","成功","=","）","args","设置","点","稍后","videocapture","驱动","(","编写"],"title":"发布者代码解析","title_tokens":["发布","代码","解析","发布者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_17","text":"learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], },","text_tokens":["py","raw","ros2","<","inrange","numpy","video","如下","初始","console","轮廓","下限","callback","互相","一些","listener","像素","hsv","一个","点画","opencv","化成","90","create","_","太小","系统","提示","作者","xy","cv","的","{","ros","上限",")","circle","从","得到","左上","topic","，","destroy","def","bin","upper","msgs","说明","二值化","已","x","示例","node","坐标","\"","图像处理","配置",",","to",".","continue","cnt","进入","转化成","编写","需要","pub","webcam","对象","和","cv2","www","信息","者","父类","、","cvtcolor","中","勾勒","节点","等待","加入","h","180","int","color","approx","功能","bgr","模型","hierarchy","与","让","sub","居","（","0","阈值","255","for","转换","coding","苹果","spin","效果","data"," ","中心","self","接口","所在","sensor","in","长度","选项","if","打开","显示","cvbridge","frame","订阅","编译","super","from","python3","古月","销毁","subscription","bgr2hsv","初始化",":","检测","usr","scripts","imshow","面积","将","8","文件","包","并","完成","退出","主","array","contours","左上角","waitkey","main","知道","10","env","循环","helloworld","队列","retr","lower","class","2","颜色","日志","__","msg","python","red","get","shutdown","关闭","chain","高","init","name","learning","函数","转化","类","消息","bgr8","进行","import","处理","boundingrect","com","setup","用于","guyuehome","*","-","drawcontours","none","rclpy","上角","输出","：","宽","object","回调","范围","入口","去除","image","库","#","类型","img","创建","info","图像","detect","w","points","bridge","代码","+","]","后","imagesubscriber","为","entry","receiving","}","utf","/","logger","!","np","程序","5","@","红色","as","128","[","'","名","计算","话题","=","1","）","数值","噪声","使用","150","args","list","设置","点","出来","shape","y","及","(","mask","imgmsg","findcontours"],"title":"订阅者代码解析","title_tokens":["者","代码","解析","订阅"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_18","text":"通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub","text_tokens":["ros2","install","一行","一个","一步","原本","_","usb","的","ros","humble","符合","得到","做","，","topic","了","进一步","就","cam","node","需要","对","webcam","常用","中","感觉","。","节点","一般","功能","指令","是","让","每换","率","一新","sub","好像","当然","换","$","我们"," ","接口","哪里","好","直接","接口协议","写","这样","焕然一新","都","可以","不过","视觉","到","只","只要","自己","例程","集成","协议","刚才","任何","用","似乎","提高","现在","又","对劲","得","有","apt","！","安装","learning","exe","不是","不行","变化","通用","还有","-","不太","复用","什么样","换成","相机","软件","精简","是不是","图像","通过","可能","代码","一句","解","耦","不","大家","么","也","识别","发布","呀","话题","这","无论","什么","使用","？","目标","run","sudo","你","焕然","驱动","标准"],"title":"案例三：机器视觉识别优化","title_tokens":["优化","视觉","三","案例","识别","机器","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_19","text":"话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息","text_tokens":["<","ros2","如下","#","type","info","echo","列表","命令","_","bw","的","$","频率",">","数据","查看","传输","topic","data"," ","发布","msg","hz","操作","话题","name","消息","list","pub","信息","常用","：","带宽"],"title":"话题命令行操作","title_tokens":["命令行","操作","话题","命令"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_20","text":"关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？","text_tokens":["方法","举","给","完成","几个","是","传递","一个","考题","这里","数据传输","无法","单向","实现","来讲","系统","例子","讲","大家","能够","的","呢","是否","我们","数据","肯定","据传","思考","，","传输","适合","这种","复杂","关于","通信","就","思考题","话题","周期","机器","？","机器人","留","满足","特性","原理","所有","到","周期性","和","需求","对于","："],"title":"思考题","title_tokens":["考题","思考题","思考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_21","text":"https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["topics","ros2",".","https","docs","org","-","html","/","tutorials",":","ros","en","humble","understanding"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/","text":"服务 话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。 通信模型 在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。 客户端/服务器模型 从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。 同步通信 这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。 一对多通信 比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。 服务接口 和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。 案例一：加法求解器 大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 运行效果 我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3 客户端代码解析 我们来看下客户端的实现方法。 程序实现 learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口 服务端代码解析 至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。 程序实现 learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_server = learning_service.service_adder_server:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口 案例二：机器视觉识别 好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。 运行效果 此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client 客户端代码解析 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], }, 服务端代码解析 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], }, 服务命令行操作 服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求 思考题 话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["半天","下来","raw","就要","inrange","打印","判断","下限","通信接口","sec","objectx","无法","太小","系统","作者","xy","更","ros","感器","en","上限","humble","简单","bin","另外","x","二",".","相对","adder","学习","信息","understanding","常用","、","加入","数据类型","打印输出","最新","一直","一般","color","时","或者","1.0","里程计","是","bgr","adderserver","与","第一个","形式","two","sub","（","命令","核心","except","b","阈值","一起","for","services","苹果","spin","器","适合","网站","接口","有点","放到","cs","参考","那有","in","长度","这样","在","super","add","销毁","机器人","接收","python3","bgr2hsv","大部","绝大部分","没有","检测","页面","具体","编程","传递数据","控制","雷达","8","更加","集成","刚才","机制","；","异步","定义","env","针对","同步性","后者","常见","频率","类似","接口类","介绍","很","成","越快越好","once","__","状态","python","get","r","https","通信","高","数据通信","learning","繁杂","类","进行","处理","加法器","运行","wait","分析","boundingrect","存在","available","guyuehome","需求","drawcontours","break","输出","宽","已经","场景","里程","相机","第二","去除","image","范围","创建","points","看到","result","bridge","position","讲","imagesubscriber","logger","硬件","发布","128","反应","[","正常","'","二个","计算","什么","）","一问一答","自定","驱动","failed","getobjectposition","<","ros2","console","出现","e","互相","html","像素","服务","request","界面","opencv","接口类型","获取","化成","90","加数","宕机","client","{",">","要","circle","数据","findcontours","查看","，","运动","同步","def","msgs","说明","岂","物体","两种","已","坐标","周期","sys","而是","to","cnt","第一","转化成","称之为","对","希望","简称","和","访问","www","服务器发送","务器","等待","h","180","功能","位置","模型","基本","分别","hierarchy","居","同样","客户端","0","call","else","转换","coding","结果","中心","时候","圈圈","好","看","sensor","选项","问","都","比比","编译","订阅","frame","from","视觉","ok","scripts","command","将","again","程序实现","例程","完成","但是","主","contours","左上角","列表","向","应用","队列","retr","2","应该","来看","叫做","a","比比皆是","变成","之为","绝大","这么","控制指令","chain","return","name","while","bgr8","回想","com","不是","原理","所以","不同","当前","拿到","准备","object","接下","一种","给","软硬","类型","type","过程","图像","通过","]","前者","不","大家","通信模型","有所不同","as","后续","课程","waiting","话题","of","假设","附近","=","软硬件","目标","设置","等","域名","我","你","按照","y","(","标准","传感器","video","很多","初始","了解","轮廓","callback","true","一些","listener","hsv","try","点画","target","并且","_","create","提供","usb","50",")","之后","得到","这种","至于","upper","二值化","cam","这个","需要","”","多","最为","不好","中","父类","cvtcolor","求解","传感","指令","上","浏览","单向","好像","实现","docs","时间","255","$","我们","一","此时","思考","效果","完全"," ","服务器","加法","认为","invalid","一对","self","客户","所在","启动","if","然后","可以","cvbridge","以上","上层","电脑","objecty","跟随","subscription","想要","初始化","发布者","一样","usr","数据通","not","文件","设计","包","adderclient","有所","—","\\","array","future","main","知道","收到","循环","每","...","比如","objectclient","返回","class","出去","是否","会","现在","查询","lower","大部分","关闭","有","解析","思考题","%","不知","接下来","转化","消息","import","exe","网页","setup","转圈","3","周期性","还有","某些","这些","none","上角","：","service","第二个","提到","发给","库","#","info","detect","w","如果","可能","代码","之前","后","entry","!","也","生活","识别","程序","@","n","发","操作","“","成功","1","使用","run","org","出来","ints","多个","要求","反馈","py","方法","如下","numpy","唯一","网络","一个","response","各种","服务器端","开始","之间","提示","cv","的","经常","某个","从","左上","destroy","了","server","就","示例","答","案例","node","机器","\"","图像处理","配置","就是",",","continue","进入","用到","请求","当","等等","封装","对象","越快","cv2","imgmsg","者","勾勒","。","啦","节点","下","人","int","两个","approx","尽快","官方","考题","让","图像识别","终端","方式","发送","exception","data","链接","浏览器","打开","部分","显示","转圈圈","命令行","执行","不过","古月","满足","到","处",":","tutorials","imshow","面积","在生活中","根据","总结","其中","并","退出","argv","传递","waitkey","10","展现","srv","并不知道","准确","颜色","随时","日志","跟踪","传输","开发","msg","red","shutdown","addtwoints","sum","init","函数","自定义","send","相比","合理","求和","用于","上述","通用","*","-","rclpy","越好","流程","done","回调","一次","入口","incoming","还是","interface","img","+","timeout","成为","本","为","}","receiving","utf","/","np","5","红色","应答","法器","服务端","名","d","数值","噪声","150","args","list","点","继续","并不需要","async","三个","但","shape","传入","及","mask","编写"],"title":"服务","title_tokens":["服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_1","text":"话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。","text_tokens":["将","方法","一种","—","服务","机制","常用","无法","单向","知道","实现","之间","异步","收到","本","讲","一起","的","准确","ros","是否","我们","类似","数据","传输","这种","，","发布"," ","效果","同步","通信","另外","问","话题","答","可以","订阅","消息","使用","我","学习","多个","发布者","你","者","。","节点"],"title":"服务","title_tokens":["服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_2","text":"在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。","text_tokens":["一个","服务","的","更","ros","数据","得到","这种","，","运动","了","另外","物体","这个","答","周期","机器","而是","需要","请求","对","希望","信息","和","中","。","节点","最新","一直","尽快","位置","或者","是","模型","形式","图像识别","单向","好像","实现","我们","此时","发送"," ","时候","问","这样","然后","可以","在","订阅","上层","机器人","跟随","到","一样","其中","并","有所","机制","应用","比如","频率","查询","变成","传输","这么","通信","高","不同","service","相机","发给","图像","通过","之前","成为","通信模型","识别","红色","应答","发布","有所不同","课程","发","话题","附近","使用","目标","驱动","继续","并不需要","我","你","按照","反馈"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_3","text":"从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。","text_tokens":["在生活中","并","此时","或者","上","反馈","模型","常见","浏览","经常","服务","机制","形式","各种","。","通过","客户端","服务器端","实现","收到","向","针对","展现","为","比如","的","/","也","来看","生活","叫做","会","某个","数据","从","发送","这种","，","之后"," ","应答","服务器","很","我们","网站","客户","时候","浏览器","cs","通信","就","问","操作","答","在","页面","就是","需要","进行","电脑","请求","处理","网页","域名","我","简称","信息","你","某些","返回","服务器发送","具体","务器"],"title":"客户端/服务器模型","title_tokens":["服务器","客户端","客户","/","模型","服务","务器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_4","text":"这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。","text_tokens":["半天","越好","一般","一直","判断","或者","是","浏览","网络","服务","过程","通过","。","可能","客户端","服务器端","宕机","的","也","我们","，","应答","之为","了","越快越好","服务器","同步","反应","状态","客户","浏览器","圈圈","通信","那有","这个","话题","假设","可以","转圈圈","在","接收","相比","称之为","转圈","不好","所以","到","信息","越快","没有","你","中","要求","务器"],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_5","text":"比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。","text_tokens":["人","并","唯一","但是","是","模型","一个","服务","界面","。","居","看到","客户端","同样","服务器端","不","大家","比如","的","每","通信模型","中","完全","，","网站","服务器","客户","通信","这个","都","可以","古月","存在","所以","但","没有","多个","一样","访问","务器"],"title":"一对多通信","title_tokens":["多","通信","一对"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_6","text":"和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。","text_tokens":["文件","方法","两个","给","位置","是","还是","传递","一个","服务","。","命令","核心","定义","srv","大家","比如","的","ros","也","类似","我们","要","苹果","变成","数据","会","，","介绍"," ","了","msg","后续","通信","话题","部分","坐标","在","消息","使用",".","请求","和","还有","这些","一样","中","反馈","标准","传递数据"],"title":"服务接口","title_tokens":["服务","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_7","text":"大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。","text_tokens":["下来","就要","了解","一个","服务","服务器端","开始","_","加数","提供","的","ros","数据","从","之后","得到","，","了","简单","就","这个","需要","”","请求","相对","对","当","封装","。","务器","啦","节点","两个","求解","功能","时","是","基本","官方","two","客户端","实现","我们","发送","结果","器"," ","加法","服务器","客户","可以","add","想要","将","例程","并","收到","针对","应该","出去","现在","成","有","通信","接下来","进行","求和","接下","给","还是","通过","代码","后","大家","也","应答","计算","“","ints","反馈","编写"],"title":"案例一：加法求解器","title_tokens":["加法","求解","案例","一","：","器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_8","text":"我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3","text_tokens":["下","第二个","ros2","两个","如下","例程","并","功能","第二","是","一个","服务","第一个","service","代码","客户端","并且","实现","_","加数","终端","一起","提供","client","的","$","2","我们","数据","发送","结果","，"," ","服务端","客户","二个","server","看","启动","操作","这个","learning","第一","请求","run","运行","原理","求和","adder","3","传入","。","等待","节点"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_9","text":"我们来看下客户端的实现方法。","text_tokens":["下","方法","客户端","实现","客户","的","来看","我们","。"],"title":"客户端代码解析","title_tokens":["客户","代码","客户端","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_10","text":"learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], },","text_tokens":["py","ros2","如下","console","初始","打印","e","response","sec","一个","服务","request","try","接口类型","服务器端","create","_","系统","加数","作者","client","的","{",")","数据","，","destroy","def","bin","说明","示例","node","sys","\"","配置",",","需要",".","请求","adder","对象","信息","www","父类","加入","务器","等待","节点","int","两个","打印输出","1.0","功能","让","two","居","客户端","（","except","b","call","for","else","方式","coding","发送","spin","exception"," ","加法","服务器","self","接口","客户","启动","选项","if","打开","执行","编译","super","add","from","python3","古月","接收","销毁","ok","初始化",":","scripts","usr","not","将","8","again","包","文件","并","完成","adderclient","反馈","argv","future","main","知道","收到","异步","定义","env","循环","srv","...","2","class","是否","a","接口类","once","__","python","get","r","shutdown","关闭","addtwoints","sum","init","%","name","learning","函数","自定义","while","类","send","进行","import","加法器","wait","运行","com","处理","setup","available","guyuehome","*","-","none","break","rclpy","输出","：","service","done","一次","入口","库","#","interface","类型","创建","info","points","代码","result","+","timeout","]","后","entry","}","utf","/","logger","!","程序","@","法器","as","[","正常","'","名","d","计算","waiting","of","成功","=","1","）","args","设置","点","async","自定","ints","failed","(","编写"],"title":"程序实现","title_tokens":["程序","程序实现","实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_11","text":"对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口","text_tokens":["流程","如下","初始","并","一个","创建","服务","如果","客户端","服务器端","实现","我们","程序","发送","数据","，","务器"," ","应答","服务器","客户","接口","关闭","以上","进行","销毁","请求","分析","想要","对","初始化","对象","编程","：","等待","节点"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_12","text":"至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。","text_tokens":["回调","出现","服务","机制","。","服务器端","实现","知道","并不知道","时间","的","也","类似","数据","中","，","至于","了","服务器","有点","通信","话题","不知","什么","函数","订阅","用到","请求","者","务器"],"title":"服务端代码解析","title_tokens":["服务","代码","解析","服务端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_13","text":"learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_server = learning_service.service_adder_server:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], },","text_tokens":["py","ros2","如下","console","初始","callback","response","服务","request","接口类型","create","_","系统","提示","作者","提供","的","{",")","数据","，","destroy","def","bin","说明","server","示例","node","\"","配置",",","需要",".","请求","adder","对","对象","信息","www","、","父类","中","加入","务器","等待","节点","功能","adderserver","让","two","居","（","b","coding","结果","spin"," ","加法","服务器","self","接口","放到","选项","打开","执行","编译","super","add","from","python3","古月","销毁","初始化",":","scripts","usr","将","8","文件","包","完成","并","退出","反馈","主","\\","main","知道","收到","定义","env","循环","srv","class","a","接口类","日志","__","python","get","shutdown","关闭","addtwoints","sum","init","%","name","return","learning","函数","自定义","类","进行","处理","加法器","import","com","setup","求和","guyuehome","*","-","none","rclpy","输出","：","service","已经","回调","incoming","入口","库","#","interface","类型","创建","info","points","代码","+","]","后","entry","}","utf","/","logger","!","程序","@","法器","应答","n","[","'","名","d","计算","=","）","args","设置","点","自定","ints","(","编写"],"title":"程序实现","title_tokens":["程序","程序实现","实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_14","text":"对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口","text_tokens":["流程","如下","初始","并","回调","反馈","一个","服务","创建","如果","通过","客户端","服务器端","实现","向","我们","程序","结果","，","务器"," ","应答","服务器","服务端","接口","客户","关闭","函数","以上","进行","销毁","分析","想要","对","初始化","对象","处","编程","：","节点"],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_15","text":"好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。","text_tokens":["下","流程","提到","求解","已经","更加","位置","刚才","服务","机制","通过","。","知道","实现","的","识别","我们","器","，","了","加法","岂","时候","好","通信","物体","回想","需要","目标","不是","当","视觉","合理","啦"],"title":"案例二：机器视觉识别","title_tokens":["视觉","案例","识别","机器","：","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_16","text":"此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client","text_tokens":["object","根据","ros2","出现","相机","集成","位置","时","是","一次","分别","一个","服务","图像","；","。","service","客户端","服务器端","并且","_","终端","提供","usb","client","的","$","识别","会","随时","数据","此时","我们","跟踪","，","务器"," ","发布","了","服务器","认为","运动","客户","有","server","就","拿到","启动","cam","node","然后","可以","机器","learning","发送","订阅","需要","目标","机器人","请求","运行","run","exe","当","三个","视觉","上述","对象","驱动","当前","：","节点","准备"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_17","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], },","text_tokens":["py","ros2","如下","console","初始","e","true","response","sec","服务","request","try","target","create","_","系统","作者","client","的","{",")","，","destroy","def","bin","说明","server","x","示例","node","\"","配置",",","需要",".","请求","adder","对象","www","父类","加入","等待","节点","1.0","位置","功能","让","居","except","call","for","else","coding","spin","exception"," ","self","接口","选项","if","打开","编译","super","from","python3","古月","销毁","ok","初始化",":","scripts","usr","not","文件","8","again","包","并","完成","\\","future","main","知道","定义","env","srv","objectclient","...","class","once","__","python","get","r","shutdown","关闭","init","%","name","learning","自定义","while","类","send","进行","import","wait","com","setup","available","guyuehome","*","-","none","break","rclpy","：","service","object","done","入口","库","#","interface","创建","info","points","代码","result","position","timeout","]","后","entry","}","utf","/","logger","!","识别","y","程序","@","应答","as","n","[","'","d","waiting","of","=","目标","args","设置","点","async","自定","failed","(","getobjectposition","编写"],"title":"客户端代码解析","title_tokens":["客户","代码","客户端","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_18","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], },","text_tokens":["py","raw","ros2","<","inrange","numpy","video","如下","初始","console","轮廓","下限","callback","互相","一些","true","listener","像素","hsv","一个","response","服务","objectx","request","点画","opencv","接口类型","target","化成","90","create","_","太小","系统","提示","作者","提供","xy","50","cv","的","{","ros","client","上限",")","circle","数据","从","得到","左上","，","destroy","def","bin","upper","msgs","说明","server","二值化","物体","已","x","示例","node","坐标","\"","图像处理","配置",",","to",".","continue","cnt","进入","转化成","请求","编写","需要","对","adder","对象","和","cv2","www","信息","者","父类","、","cvtcolor","务器","中","节点","勾勒","等待","加入","h","180","int","color","approx","功能","bgr","模型","hierarchy","与","让","sub","居","（","0","阈值","255","for","else","转换","coding","苹果","spin","效果","data"," ","服务器","invalid","中心","self","接口","所在","sensor","in","长度","选项","if","打开","显示","cvbridge","frame","订阅","执行","编译","super","from","python3","古月","objecty","subscription","bgr2hsv","销毁","初始化",":","检测","usr","scripts","imshow","command","面积","将","8","文件","包","并","完成","退出","反馈","主","\\","array","contours","左上角","waitkey","main","知道","收到","定义","env","10","srv","循环","队列","retr","lower","class","2","颜色","接口类","日志","__","msg","python","red","get","shutdown","关闭","chain","高","init","%","name","return","learning","函数","自定义","转化","类","消息","bgr8","进行","import","处理","boundingrect","com","setup","用于","guyuehome","*","-","drawcontours","none","rclpy","上角","输出","service","宽","object","：","已经","回调","范围","入口","去除","image","库","#","类型","interface","img","创建","info","图像","detect","w","points","bridge","代码","+","position","]","后","imagesubscriber","为","entry","receiving","}","utf","/","logger","!","np","识别","程序","5","@","红色","as","128","n","[","'","名","d","计算","话题","=","1","）","数值","噪声","使用","150","目标","list","args","设置","点","出来","自定","shape","y","及","(","mask","getobjectposition","imgmsg","findcontours"],"title":"服务端代码解析","title_tokens":["服务","代码","解析","服务端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_19","text":"服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求","text_tokens":["<","ros2","如下","#","类型","type","服务","列表","命令","_","call","数据类型","的","$",">","数据","发送","查看","data"," ","操作","name","请求","list","常用","：","service"],"title":"服务命令行操作","title_tokens":["服务","命令行","操作","命令"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_20","text":"话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。","text_tokens":["方法","就要","很多","通信接口","服务","无法","获取","的","更","ros","感器","数据","，","了","同步","两种","这个","周期","机器","最为","等等","和","常用","、","中","数据类型","。","传感","里程计","位置","指令","是","单向","我们","适合"," ","时候","接口","部分","都","比比","在","不过","机器人","满足","大部","视觉","到","绝大部分","数据通","控制","雷达","设计","定义","应用","针对","同步性","后者","比如","类似","比比皆是","大部分","传输","绝大","开发","通信","控制指令","数据通信","高","繁杂","自定义","周期性","通用","需求","这些","场景","里程","软硬","类型","过程","图像","前者","也","识别","硬件","话题","软硬件","目标","等","一问一答","自定","要求","标准","传感器"],"title":"思考题","title_tokens":["考题","思考题","思考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_21","text":"https://docs.ros.org/en/ humble /Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":[" ","ros2",".","https","docs","org","-","html","/","tutorials",":","ros","en","humble","services","understanding"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/","text":"通信接口 在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。 接口的定义 接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。 ROS通信接口 接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。 语言无关 为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。 标准接口 大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。 案例一：服务接口的定义与使用 了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。 接口定义 在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ... 程序调用 我们在代码中再来重点看下接口的使用方法。 客户端接口调用 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 服务端接口调用 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 案例二：话题接口的定义与使用 话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。 运行效果 现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub 接口定义 在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ... 程序调用 我们在代码中再来重点看下接口的使用方法。 发布者接口调用 learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 订阅者接口调用 learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 接口命令行操作 接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义 参考链接 https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["raw","下来","inrange","打印","通信接口","下限","布尔值","sec","objectx","太小","系统","作者","领域","xy","更","ros","en","humble","上限","自言自语","publisher","那","三种","建立","bin","另外","x","二",".","看上","学习","信息","、","匹配","常用","define","color","generate","时","或者","找到","1.0","是","bgr","详细","与","第一个","sub","（","两者","概念","小海","核心","最终","件夹","随处可见","更为","b","一起","做成","action","转","for","呢","except","阈值","苹果","bool","spin","插座","包含","接口","不用","参考","in","直接","长度","find","这样","在","里","super","销毁","机器人","python3","bgr2hsv","default","只","检测","没有","具体","编程","只有","原色","控制","8","软件开发","研究","机制","值","；","随处","造","定义","env","谁","重要","输入输出","个人","常见","类似","肯定","接口类","很","成","once","得","__","状态","r","python","像素点","自动","通信","get","命令","https","高","learning","中来","语言","还","类","进行","wait","处理","运行","boundingrect","编译器","高效","加","available","guyuehome","像是","drawcontours","break","输出","宽","g","已经","必须","single","相机","第二","去除","image","范围","创建","旋转","看到","result","程序模块","bridge","position","分成","标准接口","字符串","讲","彼此","就行","imagesubscriber","logger","形象化","硬件","发布","涵盖","128","正常","[","'","二个","形状","数","的话","计算","无论","什么","）","？","generators","话","中有","自定","摄像头","驱动","failed","getobjectposition","<","却是","ros2","形象","组成","e","互相","html","三原","像素","服务","request","opencv","接口类型","获取","化成","90","整型","client","{",">","要","circle","数据","findcontours","查看","，","运动","def","msgs","说明","物体","已","坐标","周期","参数","区分","而是","别人","to","cnt","第一","转化成","称之为","对","希望","webcam","和","www","务器","等待","h","主要","180","packages","功能","位置","将要","interfaces","string","分别","模型","hierarchy","模块","看看","如何","居","客户端","0","上去","甚至","call","else","转换","体","coding","广泛","轮子","讲解","结果","减少","runtime","反正","中心","依赖","时候","好","看","sensor","选项","插头","都","编译","订阅","众多","frame","20","from","视觉","xml","ok","想","衍生","command","为了","用来","use","将","again","约束","完成","例程","路径","主","contours","左上角","depend","列表","例子","应用","由","队列","retr","2","a","之为","生成","添加","图形","micro","chain","return","安装","name","while","把","bgr8","30","com","不是","图形化","所以","不同","当前","object","接下","一种","给","什么样","以及","一下","类型","理解","过程","图像","通过","第三","第三个","包装","一句","]","大家","and","as","about","后续","课程","of","话题","waiting","=","才能","目标","等","exec","对应","y","(","required","标准","无论是","video","初始","输入","一些","两","了解","true","callback","轮廓","listener","hsv","try","点画","rosidl","target","由于","并且","_","create","提供","usb","50",")","工作","得到","保证","upper","concepts","二值化","看上去","文件夹","cam","这个","包中","需要","”","多","最为","pub","可见","中","父类","cvtcolor","降低","数组","publish","指令","上","结构","角度","自语","单向","实现","c++","docs","255","$","我们","一","此时","上边","完全","效果"," ","加法","服务器","invalid","self","客户","所在","build","启动","描述","if","方便","可以","动作","调用函数","cvbridge","以上","编写程序","电脑","objecty","subscription","初始化","发布者","usr","调用","not","文件","设计","包","自己","—","位","\\","连接","array","future","main","知道","收到","循环","每","...","比如","objectclient","lower","class","是否","现在","会","share","查询","出去","固定","有没有","它","数据结构","重复","关闭","有","解析","%","关心","接下来","转化","消息","import","exe","诞生","精髓","还有","这些","进度","none","上角","：","service","一帧","第二个","cmakelists","软件","几个","库","#","目的","代码生成","info","detect","内容","w","代码","可能","之前","后","!","也","生活","识别","程序","@","无关","txt","小海龟","每个","n","相互","操作","主程序","“","种","速度","及","1","使用","线速度","run","org","64","出来","再","反馈","py","方法","表示","numpy","如下","回顾","转到第","手机","32","response","一个","各种","举个","开始","之间","提示","三原色","cv","的","某个","符合","从","左上","destroy","topic","了","int64","每隔","server","就","不管","示例","案例","node","回到","机器","\"","图像处理","配置","就是",",","continue","进入","用到","请求","他们","等等","package","封装","关系","对象","一边","cv2","imgmsg","者","勾勒","。","节点","下","人","标值","int","两个","approx","让","这里","终端","各个领域","像头","角速度","中间","字符","海龟","二维","发送","exception","data","来","链接","打开","部分","显示","命令行","执行","std","member","古月","到","tutorials",":","imshow","只要","面积","typec","根据","到底","有机","subscribernode","关注","摄像","并","退出","传递","你来我往","waitkey","1s","10","srv","哪些","准确","颜色","日志","好奇","传输","开发","关于","转到","msg","red","---","shutdown","sum","init","布尔","函数","自定义","show","交流","send","键盘","求和","用于","*","-","度","坐标值","重点","rclpy","done","回调","一次","入口","换成","还是","联系","interface","img","+","timeout","project","}","为","receiving","utf","/","objectposition","np","传输数据","接口定义","5","红色","应答","int32","服务端","d","名","便于","这","group","数值","噪声","150","args","list","继续","async","三个","但","shape","各个","mask","编写"],"title":"通信接口","title_tokens":["接口","通信","通信接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_1","text":"在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。","text_tokens":["人","两个","给","并","或者","将要","通信接口","是","结构","还是","—","传递","一个","理解","服务","自语","你来我往","内容","让","概念","系统","定义","甚至","重要","大家","个人","的","更","ros","呢","我们","会","自言自语","数据","，"," ","接口","标准","后续","通信","好","这","话题","无论","都","可以","动作","在","而是","交流","什么","就是","？","用到","多","不是","学习","中","为了","。"],"title":"通信接口","title_tokens":["接口","通信","通信接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_2","text":"接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。","text_tokens":["无论是","却是","输入","形象","通信接口","手机","组成","一些","三原","像素","一个","服务","举个","并且","开始","系统","领域","usb","三原色","提供","的","更","ros","要","数据","符合","工作","，","那","运动","了","建立","看上去","就","这个","回到","参数","机器","配置","就是","最为","多","他们","看上","称之为","等等","关系","和","中","、","匹配","可见","。","常用","节点","两个","主要","时","指令","上","是","结构","模块","让","如何","两者","概念","上去","实现","随处可见","更为","b","一起","各个领域","像头","角速度","广泛","呢","我们","结果","完全","反正"," ","插座","接口","时候","不用","好","所在","直接","插头","都","可以","在","调用函数","编写程序","电脑","机器人","到","调用","具体","编程","只有","typec","原色","控制","只要","包","自己","约束","关注","摄像","软件开发","机制","连接","值","；","随处","知道","定义","例子","应用","由","输入输出","每","比如","准确","常见","类似","肯定","传输","之为","固定","很","开发","得","关于","它","r","图形","有","解析","通信","micro","像素点","安装","关心","函数","把","进行","诞生","运行","键盘","图形化","精髓","所以","高效","加","这些","-","像是","输出","一种","g","必须","给","什么样","一次","相机","软件","还是","目的","图像","内容","通过","代码","包装","程序模块","一句","讲","彼此","大家","也","生活","传输数据","程序","形象化","硬件","发布","每个","正常","相互","形状","这","主程序","话题","无论","什么","速度","使用","线速度","才能","？","等","话","但","出来","摄像头","驱动","各个","反馈","标准","编写"],"title":"接口的定义","title_tokens":["定义","接口","的"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#ros","text":"接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。","text_tokens":["有机","一种","是","分别","联系","让","机制","服务","通过","各种","代码","造","之间","核心","定义","一起","每","的","ros","也","我们","程序","轮子","减少","，"," ","三种","依赖","接口","重复","有","通信","便于","这","方便","话题","可以","种","、","动作","别人","就是","使用","才能","目标","节点","到","常用","。","降低"],"title":"ROS通信接口","title_tokens":["接口","ros","通信","通信接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_3","text":"为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。","text_tokens":["表示","两","通信接口","转到第","32","布尔值","一个","服务","由于","90","开始","整型","的","ros","数据","，","保证","了","运动","int64","每隔","另外","x","这个","坐标","周期","区分","机器","需要",".","”","请求","学习","和","一边","中","、","。","节点","数组","两个","功能","是","结构","分别","这里","让","单向","c++","小海","最终","b","做成","action","转","体","中间","我们","海龟","bool","二维","结果","此时"," ","加法","包含","接口","描述","部分","可以","在","编译","动作","里","20","机器人","到","只","编程","为了","用来","将","文件","设计","完成","位","机制","知道","1s","定义","10","srv","每","比如","是否","a","会","传输","生成","转到","数据结构","python","msg","---","自动","通信","状态","sum","布尔","语言","还","30","求和","还有","这些","度","不同","当前","进度","一帧","一种","一下","还是","过程","旋转","通过","看到","之前","分成","就行","无关","应答","小海龟","int32","数","话题","“","什么","数值","使用","目标","等","对应","64","三个","y","反馈"],"title":"语言无关","title_tokens":["语言","无关"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_4","text":"大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。","text_tokens":["文件","到底","给","路径","找到","几个","看看","。","可能","件夹","系统","定义","哪些","大家","呢","的","ros","我们","share","好奇","，","了","涵盖","接口","文件夹","打开","安装","可以","在","众多","？","中","标准"],"title":"标准接口","title_tokens":["标准接口","接口","标准"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_5","text":"了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。","text_tokens":["下","下来","第二个","接下","以及","回顾","例程","了解","相机","通信接口","第二","位置","是","角度","一个","研究","服务","第一个","如何","图像","第三","第三个","代码","概念","实现","之前","定义","收到","提供","的","我们","识别","讲解","查询","从","发送","，"," ","了","发布","来","服务端","接口","时候","有","二个","通信","课程","就","这样","话题","可以","机器","接下来","在","使用","需要","进行","第一","驱动","目标","请求","三个","视觉","再","封装","对象","中","。","节点","编写"],"title":"案例一：服务接口的定义与使用","title_tokens":["与","使用","定义","接口","的","案例","一","服务","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_6","text":"在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ...","text_tokens":["<","表示","true","服务","rosidl","获取","_","的","{",">",")","，","了","就","x","这个","坐标","\"","配置","需要",".","package","、","中","。","两个","packages","generate","功能","位置","指令","interfaces","是","让","$","我们","runtime","bool","上边"," ","依赖","接口","build","选项","find","部分","在","编译","member","default","xml","根据","文件","包","例程","完成","反馈","depend","定义","srv","...","会","生成","添加","get","---","自动","通信","name","learning","语言","还","编译器","不同","：","cmakelists","一次","#","interface","代码生成","过程","代码","project","后","}","为","/","也","接口定义","txt","int32","服务端","的话","of","group","使用","目标","generators","exec","中有","y","(","getobjectposition","required"],"title":"接口定义","title_tokens":["接口定义","定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_7","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["中","下","方法","代码","使用","。","来","接口","看","再","的","我们","重点","在"],"title":"程序调用","title_tokens":["调用","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_8","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["py","ros2","初始","e","true","response","sec","服务","request","try","target","create","_","作者","client","的",")","，","destroy","def","bin","说明","x","示例","node","\"",",",".","请求","对象","www","父类","等待","节点","1.0","位置","居","except","call","for","else","coding","spin","exception"," ","self","接口","if","super","from","python3","古月","销毁","ok","初始化",":","usr","not","8","again","并","\\","future","main","定义","env","srv","objectclient","...","class","once","__","python","get","r","shutdown","关闭","init","%","name","learning","自定义","while","类","send","进行","import","wait","com","available","guyuehome","*","-","none","break","rclpy","service","object","done","库","#","interface","创建","info","result","position","timeout","utf","/","logger","!","识别","y","@","应答","as","n","'","d","waiting","of","=","目标","args","async","自定","failed","(","getobjectposition"],"title":"客户端接口调用","title_tokens":["调用","接口","客户","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_9","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["py","raw","ros2","<","inrange","numpy","video","初始","轮廓","下限","callback","互相","一些","true","listener","像素","hsv","一个","response","服务","objectx","request","点画","opencv","接口类型","target","化成","90","create","_","太小","提示","作者","提供","xy","50","cv","的","ros","上限",")","circle","数据","从","得到","左上","，","destroy","def","bin","upper","msgs","说明","server","二值化","物体","已","x","示例","node","坐标","\"","图像处理",",","to",".","continue","cnt","进入","转化成","请求","对","对象","和","cv2","www","信息","者","父类","、","cvtcolor","务器","中","节点","勾勒","等待","h","180","int","color","approx","bgr","模型","hierarchy","与","sub","居","（","0","阈值","255","for","else","转换","coding","苹果","spin","效果","data"," ","服务器","invalid","中心","self","接口","所在","sensor","in","长度","if","显示","cvbridge","frame","订阅","执行","super","from","python3","古月","objecty","subscription","bgr2hsv","销毁","初始化",":","检测","usr","imshow","command","面积","将","8","并","退出","反馈","主","\\","array","contours","左上角","waitkey","main","收到","定义","env","10","srv","循环","队列","retr","lower","class","2","颜色","接口类","日志","__","msg","python","red","get","shutdown","关闭","chain","高","init","%","name","return","learning","函数","自定义","转化","类","消息","bgr8","进行","import","处理","boundingrect","com","用于","guyuehome","*","-","drawcontours","none","rclpy","上角","输出","service","宽","object","已经","回调","范围","入口","去除","image","库","#","类型","interface","img","创建","info","图像","detect","w","bridge","+","position","]","后","imagesubscriber","为","receiving","utf","/","logger","!","np","识别","5","@","红色","as","128","n","[","'","名","d","计算","话题","=","1","）","数值","噪声","使用","150","目标","list","args","出来","自定","shape","y","及","(","mask","getobjectposition","imgmsg","findcontours"],"title":"服务端接口调用","title_tokens":["调用","服务","接口","服务端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_10","text":"话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。","text_tokens":["人","换成","通信接口","位置","是","服务","之前","定义","的","也","类似","我们","识别","从","，","发布","有没有","接口","通信","不管","话题","案例","周期","中来","机器","把","需要","目标","继续","视觉","想","没有","衍生","。"],"title":"案例二：话题接口的定义与使用","title_tokens":["使用","定义","接口","的","话题","案例","与","：","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_11","text":"现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub","text_tokens":["object","将","第二个","ros2","并","相机","第二","功能","image","位置","是","打印","分别","interface","一个","图像","第一个","；","第三","第三个","。","sub","_","定义","谁","终端","usb","的","$","ros","出去","现在","会","我们","此时","数据","中","识别","，","成"," ","发布","topic","来","标准","二个","就","启动","cam","话题","这个","node","learning","订阅","以上","消息","使用","需要","第一","目标","run","运行","exe","pub","三个","视觉","希望","封装","到","驱动","：","节点"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_12","text":"在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ...","text_tokens":["表示","一个","服务","rosidl","_","的","{",")","，","了","x","这个","坐标","\"","配置","需要",".","package","、","中","。","标值","generate","功能","位置","interfaces","是","让","$","我们"," ","接口","描述","选项","find","在","编译","default","根据","包","例程","完成","定义","...","生成","msg","自动","通信","name","learning","语言","消息","还","进行","编译器","不同","坐标值","：","cmakelists","#","interface","过程","内容","代码","project","后","}","objectposition","/","接口定义","txt","int32","话题","使用","目标","generators","y","(","required"],"title":"接口定义","title_tokens":["接口定义","定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_13","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["中","下","方法","代码","使用","。","来","接口","看","再","的","我们","重点","在"],"title":"程序调用","title_tokens":["调用","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_14","text":"learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["py","raw","ros2","<","inrange","numpy","video","初始","轮廓","下限","callback","互相","一些","listener","像素","hsv","一个","objectx","点画","opencv","化成","90","create","_","太小","提示","作者","50","xy","cv","的","ros","上限",")","circle","从","得到","左上","topic","publisher","，","destroy","def","bin","upper","msgs","说明","二值化","已","x","示例","node","坐标","\"","图像处理",",","to",".","continue","cnt","进入","pub","转化成","webcam","对象","和","cv2","www","信息","者","父类","、","cvtcolor","中","勾勒","节点","等待","h","180","int","color","approx","publish","位置","bgr","模型","hierarchy","与","sub","居","（","0","阈值","255","for","转换","coding","苹果","spin","效果","data"," ","中心","self","接口","所在","sensor","in","长度","if","显示","cvbridge","frame","订阅","super","from","python3","古月","objecty","subscription","bgr2hsv","销毁","初始化",":","发布者","usr","检测","imshow","面积","将","8","并","退出","主","array","contours","左上角","waitkey","main","定义","env","10","循环","队列","retr","lower","class","2","颜色","日志","__","msg","python","red","get","shutdown","关闭","chain","高","init","name","learning","函数","自定义","转化","类","消息","bgr8","进行","import","处理","boundingrect","com","用于","guyuehome","*","-","drawcontours","none","rclpy","上角","输出","宽","object","回调","范围","入口","去除","image","库","#","interface","类型","img","创建","info","图像","detect","w","bridge","+","position","]","后","imagesubscriber","为","receiving","utf","/","objectposition","!","np","logger","5","@","红色","发布","as","128","[","'","名","计算","话题","=","1","）","数值","噪声","使用","150","目标","list","args","出来","自定","shape","y","及","(","mask","imgmsg","findcontours"],"title":"发布者接口调用","title_tokens":["调用","发布","接口","发布者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_15","text":"learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["py","ros2","初始","callback","listener","一个","target","create","_","提示","作者","的",")","数据","topic","，","destroy","def","bin","msgs","说明","x","示例","node","\"",",",".","对","对象","信息","www","者","父类","、","等待","节点","位置","string","sub","居","（","coding","字符","spin"," ","self","接口","长度","执行","订阅","std","super","from","python3","古月","销毁","subscription","初始化",":","usr","8","subscribernode","并","退出","主","\\","main","收到","定义","env","10","循环","队列","class","日志","__","msg","python","get","shutdown","关闭","init","%","name","learning","函数","自定义","类","消息","进行","import","处理","com","guyuehome","*","-","none","rclpy","输出","object","回调","入口","库","#","interface","类型","创建","info","position","字符串","后","utf","/","objectposition","!","logger","@","'","名","d","话题","=","目标","args","自定","y","("],"title":"订阅者接口调用","title_tokens":["者","接口","调用","订阅"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_16","text":"接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义","text_tokens":["<","ros2","如下","功能","#","interface","详细","列表","命令","系统","_","定义","的","$",">","某个","接口定义","查看"," ","接口","操作","name","包中","show","list","package","常用","："],"title":"接口命令行操作","title_tokens":["命令行","接口","操作","命令"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_17","text":"https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["define","single","interfaces","html","interface","docs","/","and","ros","en","humble"," ","about","https","concepts",".","org","package","tutorials",":","-","use"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/","text":"动作 机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。 通信模型 举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。 客户端/服务器模型 动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。 一对多通信 和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。 同步通信 既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。 由服务和话题合成 大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。 案例一：小海龟的动作 我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback 案例二：机器人画圆 如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。 运行效果 启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。 接口定义 例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是 动作的目标 ，enable为true时，表示开始运动； 第二块是 动作的执行结果 ，finish为true，表示动作执行完成； 第三块是 动作的周期反馈 ，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ... 通信模型 通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。 服务端代码解析 learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], }, 客户端代码解析 learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], }, 动作命令行操作 动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["下来","通信接口","遥控","系统","goal","作者","指定","ros","en","humble","那","简单","bin","行为","另外","二","多少度",".","相对","信息","understanding","movecircleactionclient","、","秘密","加入","常用","数据类型","一段","generate","时","某","是","（","概念","命令","导航","小海","最终","更为","action","一起","for","转","呢","bool","spin","其实","仿真器","包含","接口","三块","参考","in","直接","find","写","这样","送给","在","super","整个","add","销毁","机器人","python3","先","接收","default","动","没有","具体","只有","编程","控制","8","actionserver","机制","；","异步","定义","env","针对","rotate","类似","肯定","接口类","介绍","很","theta","得","__","状态","python","get","https","自动","通信","顺利","某一","learning","rejected","语言","还","类","进行","处理","wait","动图","圈","运行","分析","编译器","guyuehome","需求","输出","真器","送货","场景","分拣","同时","第二","试一试","teleop","创建","旋转","points","看到","result","logger","一点","发布","i","[","'","处理函数","什么","）","？","generators","背后","自定","第二块","直到","<","ros2","console","html","服务","接口类型","获取","臂","client","{",">","circle","数据","查看","名字","，","运动","同步","def","说明","坐标","进度条","周期","而是","第一","毕竟","对","希望","和","www","装","务器","等待","只能","较长","请","应带","发送给","功能","位置","interfaces","就此结束","模型","分别","模块","如何","居","客户端","0","第三块","姿态","coding","结果","还会","好","段时间","看","选项","都","编译","订阅","圆周","完整","20","from","眼前","仔细","ok","想","scripts","enable","完成","例程","但是","其","主","读取","清楚","列表","例子","应用","由","思路","第一块","又","拒绝","这么","生成","turtle","succeed","return","name","把","30","com","不是","rotateabsolute","原理","不同","当前","接下","一种","moving","合适","一下","加深","类型","转个","type","理解","0.5","过程","通过","第三","理","所处","]","不","大家","通信模型","送餐","actions","话题","假设","=","控","才能","目标","等","设置","按照","(","标准","多少","初始","true","callback","起来","turtle1","rosidl","不仅","能","没错","_","当中","发出",")","之后","这种","管理","feedback","这个","隐藏","需要","多","中","父类","state","publish","指令","上","角度","合成","实现","docs","时间","$","我们","一","received","上边","效果"," ","服务器","一对","self","客户","启动","if","可以","动作","初始化","发布者","常常","一样","调用","usr","movecircleactionserver","not","文件","包","—","应用层","future","main","知道","收到","机械","循环","每","...","比如","class","是否","现在","会","仿真","360","有没有","关闭","竟然","有","解析","%","--","接下来","消息","含义","import","特性","转圈","setup","这些","一段时间","进度","none","：","cmakelists","圆周运动","库","#","目的","画圆","info","如果","可能","代码","一套","虽然","之前","sleep","后","entry","不仅仅","!","也","模拟","识别","程序","execute","@","告诉","txt","小海龟","智能","实际","actionclient","操作","成功","使用","run","二块","org","再","根本","多个","反馈","py","方法","表示","如下","像","move","response","一个","不会","举个","开始","服务器端","accepted","使","结束","的","某个","从","destroy","了","每隔","server","就","过","示例","案例","基于","node","机器","\"","配置","就是",",","用到","请求","当","turtlesim","发现","封装","package","一边","对象","者","以下","。","节点","下","1.57","被","两个","handle","让","key","终端","方式","海龟","发送","data","来","链接","哪里","实时","打开","部分","命令行","执行","古月","满足","到","底层","拒绝执行","tutorials",":","仅仅","根据","到底","并","退出","取消","1s","10","movecircle","随时","日志","一点一点","absolute","msg","---","shutdown","init","函数","自定义","send","range","相比","键盘","*","度","-","达到","finish","一块","time","rclpy","流程","负责","done","回调","一次","入口","interface","是不是","project","}","为","utf","/","既然","就此","接口定义","复杂","int32","服务端","名","d","便于","publishing","这","再用","args","list","点","干什么","抓取","async","三个","但","编写","required"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_1","text":"机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。","text_tokens":["流程","送货","被","一种","场景","分拣","并","功能","上","是","目的","—","遥控","一个","理解","机制","不仅","实现","概念","系统","应用","不仅仅","的","ros","也","识别","我们","某个","会","中","从","名字","，","那","运动"," ","复杂","这么","很","简单","这种","管理","智能","行为","通信","另外","好","就","送餐","便于","这个","某一","可以","机器","在","动作","就是","需要","完整","含义","用到","机器人","目标","等","进行","满足","键盘","对","需求","这些","常常","、","具体","。","仅仅"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_2","text":"举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。","text_tokens":["多少","表示","像","一个","举个","开始","结束","当中","的","发出","之后","，","运动","了","每隔","行为","就","进度条","机器","多少度","需要","信息","、","装","。","一段","指令","是","让","命令","更为","时间","转","我们","发送"," ","哪里","段时间","这样","可以","在","动作","执行","20","机器人","眼前","到","ok","想","没有","到底","完成","并","机制","取消","知道","1s","10","例子","比如","现在","随时","肯定","一点一点","360","有没有","得","通信","把","还","30","圈","不是","转圈","度","一段时间","当前","进度","合适","一下","转个","过程","旋转","如果","后","不","一点","告诉","这","假设","控","使用","？","才能","再","根本","反馈","直到"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_3","text":"动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。","text_tokens":["同时","起来","是","就此结束","模型","一个","让","服务","过程","如果","。","可能","客户端","服务器端","收到","开始","导航","机械","所处","后","臂","姿态","结束","的","也","类似","当前","就此","发送","之后","又","，"," ","运动","服务器","状态","客户","通信","就","实时","这个","坐标","周期","机器","动作","什么","执行","整个","使用","目标","机器人","干什么","抓取","当","再","动","和","想","一边","信息","中","达到","反馈","务器","控制"],"title":"客户端/服务器模型","title_tokens":["服务器","客户端","客户","/","模型","服务","务器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_4","text":"和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。","text_tokens":["下","只能","完成","但是","一个","服务","。","客户端","服务器端","命令","大家","的","发送","，","运动","服务器","客户","有","通信","都","可以","机器","动作","执行","才能","机器人","先","毕竟","和","多个","一样","中","只有","务器"],"title":"一对多通信","title_tokens":["多","通信","一对"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_5","text":"既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。","text_tokens":["文件","一种","通信接口","是","机制","过程","之前","定义","action","既然","的","也","我们","数据","介绍","那","，","同步","接口","有","通信","过","动作","使用",".","进行","中","反馈","。"],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_6","text":"大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。","text_tokens":["下","两个","表示","一种","应带","时","是","其","一个","模块","服务","过程","是不是","应用层","机制","客户端","服务器端","收到","命令","没错","实现","应用","大家","的","也","会","发送","上边","，","务器"," ","运动","服务器","其实","发布","还会","来","客户","竟然","有","者","通信","看","隐藏","话题","周期","基于","动作","订阅","就是","使用","目标","请求","动图","仔细","不是","当","三个","底层","再","发现","和","发布者","调用","秘密","反馈","。"],"title":"由服务和话题合成","title_tokens":["由","和","话题","服务","合成"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_7","text":"我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback","text_tokens":["真器","下来","ros2","1.57","接下","某","加深","理解","：","让","teleop","info","turtle1","key","概念","小海","命令","_","goal","}","action","rotate","指定","姿态","的","$","/","{","仿真","我们","海龟","一","小海龟","仿真器"," ","，","运动","theta","turtle","absolute","feedback","启动","案例","再用","node","可以","--","动作","接下来","\"","使用","send","run","对","rotateabsolute","到","turtlesim",":","-","按照","以下","。","控制"],"title":"案例一：小海龟的动作","title_tokens":["小海","的","动作","案例","一","海龟","：","小海龟"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_8","text":"如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。","text_tokens":["方法","下来","接下","请","并","试一试","是","转个","一个","服务","让","过程","如何","通过","不会","代码","客户端","一套","实现","虽然","服务器端","针对","一起","的","呢","我们","，","务器"," ","服务器","来","实际","接口","有","客户","好","通信","直接","就","话题","基于","假设","机器","动作","在","而是","接下来","使用","？","机器人","圈","特性","但","希望","封装","和","中","编程","。"],"title":"案例二：机器人画圆","title_tokens":["机器人","案例","画圆","机器","：","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_9","text":"启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。","text_tokens":["下","ros2","下来","接下","两个","完成","一次","并","例程","一下","move","分别","服务","。","看到","客户端","服务器端","开始","命令","_","最终","实现","终端","action","client","每","结束","的","$","模拟","我们","发送","之后","，","务器"," ","运动","服务器","服务端","客户","server","启动","就","示例","这个","learning","可以","机器","动作","接下来","目标","机器人","run","运行","30","分析","背后","原理","信息","和","度","中","反馈","："],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_10","text":"例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是 动作的目标 ，enable为true时，表示开始运动； 第二块是 动作的执行结果 ，finish为true，表示动作执行完成； 第三块是 动作的周期反馈 ，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ...","text_tokens":["表示","true","rosidl","开始","_","的","{","ros",")","，","运动","周期","机器","\"","配置","需要",".","第一","package","中","。","state","generate","时","位置","指令","功能","是","interfaces","角度","让","第三块","action","$","我们","bool","结果"," ","包含","接口","三块","选项","find","部分","动作","执行","在","编译","机器人","default","到","enable","根据","包","并","例程","完成","；","定义","...","movecircle","第一块","是否","生成","---","自动","name","learning","自定义","语言","还","进行","编译器","不是","finish","一块","当前","不同","：","cmakelists","第二","#","interface","过程","旋转","通过","第三","代码","project","后","}","为","/","接口定义","txt","(","int32","成功","使用","目标","generators","二块","三个","自定","第二块","反馈","标准","required"],"title":"接口定义","title_tokens":["接口定义","定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_11","text":"通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。","text_tokens":["下来","接下","较长","并","发送给","例程","一下","起来","模型","一个","服务","。","清楚","代码","客户端","理","开始","之前","后","结束","思路","的","通信模型","我们","程序","一","发送","，","运动"," ","服务器","客户","通信","写","这样","送给","周期","话题","机器","动作","接下来","就是","目标","机器人","相对","运行","相比","分析","信息","和","反馈","务器","控制"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_12","text":"learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["py","ros2","表示","如下","console","初始","callback","true","move","一个","服务","接口类型","_","系统","goal","作者","的","{",")","circle","之后","从","，","destroy","运动","def","bin","说明","server","feedback","示例","node","周期","\"","配置",",","需要",".","信息","对象","www","、","父类","加入","务器","等待","节点","state","publish","功能","handle","角度","让","居","（","0","最终","action","for","coding","结果","spin"," ","服务器","self","接口","in","选项","打开","动作","执行","编译","圆周","super","from","python3","古月","销毁","到","初始化",":","scripts","usr","movecircleactionserver","文件","8","actionserver","包","并","完成","退出","反馈","主","main","知道","收到","定义","env","循环","...","movecircle","class","接口类","360","__","msg","python","get","succeed","shutdown","关闭","return","init","%","name","learning","函数","自定义","类","消息","进行","30","import","处理","range","com","setup","guyuehome","*","-","度","当前","time","rclpy","finish","none","：","负责","moving","回调","入口","圆周运动","库","#","interface","类型","创建","info","0.5","points","代码","result","sleep","]","后","entry","}","utf","/","logger","!","execute","程序","@","发布","i","服务端","[","'","名","d","处理函数","publishing","成功","=","）","目标","args","设置","点","自定","(","编写"],"title":"服务端代码解析","title_tokens":["服务","代码","解析","服务端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_13","text":"learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["py","ros2","如下","console","初始","callback","true","move","response","一个","服务","接口类型","获取","服务器端","能","_","开始","accepted","goal","系统","作者","client","使","的","{",")","circle","之后","数据","，","destroy","运动","def","bin","说明","server","feedback","示例","node","周期","机器","\"","配置",",","需要",".","请求","希望","对象","www","movecircleactionclient","、","父类","加入","务器","等待","节点","state","被","时","功能","handle","让","居","客户端","（","最终","action","for","方式","coding","received","发送","结果","spin"," ","服务器","self","客户","接口","启动","选项","if","打开","动作","执行","编译","圆周","super","add","from","python3","古月","机器人","接收","销毁","拒绝执行","初始化",":","scripts","usr","enable","not","文件","8","包","并","完成","退出","反馈","主","读取","future","main","知道","收到","异步","定义","env","循环","movecircle","class","接口类","拒绝","日志","__","msg","python","get","shutdown","关闭","顺利","return","init","%","name","learning","函数","rejected","自定义","类","消息","send","进行","import","wait","处理","com","setup","guyuehome","*","-","finish","none","rclpy","输出","：","done","回调","入口","圆周运动","库","#","interface","类型","创建","info","如果","points","代码","result","]","}","后","为","entry","utf","/","logger","!","程序","@","[","actionclient","'","名","d","=","）","目标","设置","args","点","async","自定","(","编写"],"title":"客户端代码解析","title_tokens":["客户","代码","客户端","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_14","text":"动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求","text_tokens":["<","ros2","如下","#","类型","type","服务","info","列表","命令","_","goal","action","数据类型","的","$",">","数据","发送","查看","data"," ","操作","name","动作","send","请求","list","常用","："],"title":"动作命令行操作","title_tokens":["命令行","动作","操作","命令"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["ros2",".","https","docs","org","-","html","/","tutorials",":","ros","en","humble","understanding","actions"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/","text":"参数 话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。 通信模型 比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。 全局字典 在ROS系统中，参数是以 全局字典 的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。 可动态监控 在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。 案例一：小海龟例程中的参数 在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 启动两个终端，分别运行小海龟仿真器和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看参数列表 当前系统中有哪些参数呢？我们可以启动一个终端，并使用如下命令查询： $ ros2 param list 参数查询与修改 如果想要查询或者修改某个参数的值，可以在param命令后边跟get或者set子命令： $ ros2 param describe turtlesim background_b # 查看某个参数的描述信息 $ ros2 param get turtlesim background_b # 查询某个参数的值 $ ros2 param set turtlesim background_b 10 # 修改某个参数的值 参数文件保存与加载 一个一个查询/修改参数太麻烦了，不如试一试参数文件，ROS中的参数文件使用yaml格式，可以在param命令后边跟dump子命令，将某个节点的参数都保存到文件中，或者通过load命令一次性加载某个参数文件中的所有内容： $ ros2 param dump turtlesim >> turtlesim.yaml # 将某个节点的参数保存到参数文件中 $ ros2 param load turtlesim turtlesim.yaml # 一次性加载某一个文件中的所有参数 案例二：参数编程 接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。 运行效果 启动一个终端，先运行第一句指令，启动param_declare节点，终端中可以看到循环打印的日志信息，其中的“mbot”就是我们设置的一个参数值，参数名称是“robot_name”，通过命令行修改这个参数，看下终端中会发生什么？ $ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle 代码解析 我们来看下在代码中，如何声明、创建、修改一个参数的值。 learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], }, 案例三：机器视觉应用 参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。 运行效果 启动三个终端，分别运行： 相机驱动节点 视觉识别节点 修改红色阈值 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180 在启动的视觉识别节点中，我们故意将视觉识别中红色阈值的上限设置为0，如果不修改参数，将无法实现目标识别。 为了便于调整阈值，我们在节点中将红色阈值的限位修改为了ROS参数，通过命令行修改该参数的值，就可以实现视觉识别啦。 代码解析 我们来看下在视觉识别的代码中，是如何通过参数来设置阈值的。 learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["raw","下来","就要","inrange","打印","下限","可","无法","全局变量","robot","太小","系统","作者","指定","xy","ros","en","humble","上限","三种","简单","bin","param","x","mbot","二",".","信息","understanding","常用","、","加入","最新","color","某","或者","是","bgr","与","sub","（","小海","核心","命令","阈值","b","for","参数值","呢","苹果","spin","仿真器","动态","一次性","接口","参考","in","长度","写","送给","在","super","整个","销毁","机器人","python3","先","parameter","bgr2hsv","检测","比较简单","编程","控制","8","编码","describe","机制","值","env","麻烦","类似","介绍","成","__","get","python","很大","https","通信","丰富","高","learning","类","还","进行","处理","boundingrect","运行","调整","存在","guyuehome","hello","drawcontours","输出","宽","真器","已经","不少","相机","范围","滑动","image","试一试","体验","去除","teleop","创建","points","看到","bridge","该","imagesubscriber","参数设置","么","logger","默认","128","[","'","发生","计算","什么","）","？","中有","驱动","每次","<","ros2","console","组成","互相","html","像素","服务","分辨率","declare","opencv","获取","化成","90","{",">","circle","数据","findcontours","查看","区域","，","秒","def","msgs","说明","物体","已","三","坐标","周期","参数","to","cnt","第一","转化成","条","对","格式","和","访问","www","定时器","实现目标","等待","h","180","加载","发送给","功能","string","模型","分别","hierarchy","敏感","如何","居","0","转换","coding","value","中心","时候","看","sensor","选项","都","定时","integer","编译","订阅","frame","from","改变","视觉","键值","scripts","为了","将","例程","完成","主","键和值","nodea","读取","比较","contours","左上角","清楚","列表","办法","应用","由","队列","提高","retr","2","来看","叫做","turtle","字典","chain","name","影响","把","bgr8","com","后边","不是","变量","不同","当前","object","接下","一种","一下","类型","type","理解","过程","图像","跟","通过","一句","]","不","大家","通信模型","as","美颜","话题","=","监控","叫","目标","设置","等","y","(","多少","video","很多","初始","了解","输入","一些","callback","起来","立刻","轮廓","单位","listener","hsv","易用性","大大提高","点画","nodeb","create","_","大大","太","共享","环境","提供","usb","50","非常",")","光线","得到","声明","upper","二值化","cam","这个","号","需要","”","中","父类","cvtcolor","指令","故意","提炼","传输方式","合成","辨率","实现","c++","docs","从而","255","$","我们","一","效果"," ","端口","self","所在","启动","描述","if","然后","可以","动作","cvbridge","不如","subscription","想要","初始化","一样","哪个","usr","重新","文件","包","all","—","连接","array","main","知道","默认值","background","循环","限位","比如","lower","class","是否","仿真","会","查询","关闭","有","解析","%","接下来","转化","消息","含义","import","exe","特性","setup","某些","这些","none","问题","即可","：","上角","修改","yaml","几个","节","形态","#","库","timer","其他","info","detect","内容","如果","w","优化","可能","代码","后","entry","!","也","识别","程序","@","小海龟","易用","“","子","1","使用","输入框","作用","全局","run","org","保存","所有","出来","再","多个","py","方法","如下","numpy","表示","像","一个","parameters","开始","提示","cv","的","某个","从","左上","destroy","了","考虑","就","示例","案例","node","机器","\"","图像处理","配置","就是",",","高级","continue","进入","用到","load","等等","turtlesim","对象","cv2","imgmsg","者","勾勒","。","啦","节点","下","int","两个","approx","让","key","图像识别","终端","方式","new","海龟","发送","名称","parameternode","data","挺","来","曝光","链接","以","s","打开","部分","命令行","显示","执行","古月","中将","到","熟悉","tutorials",":","那个","imshow","面积","其中","配置文件","关注","并","退出","waitkey","10","分辨","哪些","第一句","颜色","日志","传输","一两","msg","red","shutdown","init","函数","键盘","变化","用于","*","度","-","rclpy","set","两句","回调","一次","一两句","入口","img","+","}","本","为","receiving","utf","/","np","5","红色","名","d","便于","这","说干就干","dump","数值","噪声","150","args","list","点","继续","三个","shape","及","mask","真实","编写"],"title":"参数","title_tokens":["参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_1","text":"话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。","text_tokens":["一种","已经","了解","节","是","—","传输方式","服务","机制","常用","清楚","全局变量","知道","c++","系统","本","共享","不","大家","方式","的","ros","是否","我们","类似","程序","数据","中","传输","，","介绍","三种"," ","来","字典","通信","便于","这","话题","参数","可以","动作","在","机器","机器人","全局","运行","再","变量","多个","某些","、","编程","。","节点"],"title":"参数","title_tokens":["参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_2","text":"比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。","text_tokens":["多少","很多","输入","一些","像","分辨率","nodeb","usb","的","区域","，","考虑","就","参数","机器","配置","就是","需要","条","等等","格式","和","中","。","节点","功能","或者","是","分别","辨率","图像识别","核心","阈值","我们","效果"," ","端口","曝光","时候","部分","都","可以","在","执行","整个","改变","视觉","到","一样","哪个","那个","面积","文件","配置文件","关注","编码","nodea","连接","分辨","比如","是否","会","有","很大","影响","进行","这些","度","不同","问题","相机","滑动","过程","图像","通过","后","参数设置","也","识别","程序","美颜","这","什么","使用","设置","输入框","作用","驱动"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_3","text":"在ROS系统中，参数是以 全局字典 的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。","text_tokens":["组成","或者","是","形态","像","理解","键和值","一个","合成","跟","系统","为","由","参数值","的","ros","也","叫做","我们","名称","，"," ","了","时候","字典","有","以","名","就","这个","然后","参数","可以","什么","在","号","数值","就是","使用","叫","？","等","全局","后边","存在","和","键值","访问","一样","中","编程","即可","。","真实"],"title":"全局字典","title_tokens":["全局","字典"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_4","text":"在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。","text_tokens":["修改","ros2","最新","某","立刻","一个","其他","如果","获取","可能","知道","办法","共享","从而","大家","比如","的","非常","也","会","，"," ","了","有","丰富","这","都","可以","参数","在","数值","高级","进行","用到","特性","对","访问","中","编程","。","节点"],"title":"可动态监控","title_tokens":["可","动态","监控"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_5","text":"在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 启动两个终端，分别运行小海龟仿真器和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["下","真器","方法","ros2","两个","不少","例程","起来","分别","：","teleop","通过","key","小海","命令","_","终端","提供","的","$","也","仿真","一","海龟","我们","，","仿真器","小海龟","了"," ","turtle","启动","这个","node","参数","命令行","在","使用","含义","run","运行","节点","键盘","turtlesim","熟悉","和","中","。","控制"],"title":"案例一：小海龟例程中的参数","title_tokens":["中","小海","例程","的","参数","案例","一","海龟","：","小海龟"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_6","text":"当前系统中有哪些参数呢？我们可以启动一个终端，并使用如下命令查询： $ ros2 param list","text_tokens":["ros2","如下","并","一个","命令","系统","终端","哪些","呢","$","我们","查询","，"," ","param","启动","可以","参数","使用","？","list","中有","当前","："],"title":"查看参数列表","title_tokens":["参数","查看","列表"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_7","text":"如果想要查询或者修改某个参数的值，可以在param命令后边跟get或者set子命令： $ ros2 param describe turtlesim background_b # 查看某个参数的描述信息 $ ros2 param get turtlesim background_b # 查询某个参数的值 $ ros2 param set turtlesim background_b 10 # 修改某个参数的值","text_tokens":["修改","ros2","set","或者","#","describe","跟","值","如果","命令","background","_","10","b","的","$","某个","查询","查看","，"," ","param","get","描述","子","可以","参数","在","想要","后边","turtlesim","信息","："],"title":"参数查询与修改","title_tokens":["修改","与","参数","查询"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_8","text":"一个一个查询/修改参数太麻烦了，不如试一试参数文件，ROS中的参数文件使用yaml格式，可以在param命令后边跟dump子命令，将某个节点的参数都保存到文件中，或者通过load命令一次性加载某个参数文件中的所有内容： $ ros2 param dump turtlesim >> turtlesim.yaml # 将某个节点的参数保存到参数文件中 $ ros2 param load turtlesim turtlesim.yaml # 一次性加载某一个文件中的所有参数","text_tokens":["修改","文件","将","ros2","加载","yaml","一次","某","或者","试一试","#","一个","跟","内容","通过","命令","太","/","的","麻烦","ros","$",">","某个","查询","，"," ","了","一次性","param","子","都","可以","参数","在","dump","不如","使用",".","load","后边","保存","所有","到","turtlesim","格式","中","：","节点"],"title":"参数文件保存与加载","title_tokens":["文件","加载","保存","与","参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_9","text":"接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。","text_tokens":["方法","下来","就要","接下","两句","一两句","一下","几个","体验","比较","读取","开始","实现","的","我们","程序","一两","，","了","简单","来","就","写","这","都","参数","函数","在","接下来","可以","使用","设置","先","和","比较简单","中","。"],"title":"案例二：参数编程","title_tokens":["参数","案例","编程","：","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_10","text":"启动一个终端，先运行第一句指令，启动param_declare节点，终端中可以看到循环打印的日志信息，其中的“mbot”就是我们设置的一个参数值，参数名称是“robot_name”，通过命令行修改这个参数，看下终端中会发生什么？ $ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle","text_tokens":["修改","下","ros2","其中","set","打印","指令","是","一个","declare","通过","看到","一句","robot","_","命令","循环","终端","参数值","的","$","我们","第一句","会","日志","名称","，"," ","turtle","param","看","启动","发生","“","name","这个","learning","可以","mbot","参数","命令行","什么","就是","数值","”","？","第一","设置","先","运行","run","parameter","信息","中","节点"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_11","text":"我们来看下在代码中，如何声明、创建、修改一个参数的值。 learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], },","text_tokens":["py","ros2","如下","console","初始","打印","callback","单位","一个","declare","parameters","create","_","robot","系统","作者","指定","的","{",")","从","声明","，","秒","destroy","def","bin","说明","param","示例","node","周期","参数","mbot","\"","配置",",","需要",".","信息","对象","www","定时器","、","父类","中","加入","。","等待","节点","下","发送给","功能","string","让","如何","居","（","参数值","coding","new","我们","发送","parameternode","spin"," ","value","self","接口","s","选项","打开","送给","定时","在","执行","编译","super","from","python3","古月","销毁","parameter","到","初始化",":","scripts","usr","重新","将","8","文件","包","all","并","完成","退出","主","读取","值","main","知道","默认值","列表","循环","env","2","来看","class","日志","__","python","get","shutdown","关闭","init","%","name","learning","函数","类","进行","import","com","setup","guyuehome","*","-","hello","none","rclpy","输出","：","修改","set","回调","入口","库","#","timer","type","创建","info","points","代码","]","后","entry","为","}","utf","/","logger","!","程序","默认","@","[","'","=","）","数值","args","设置","点","(","编写"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_12","text":"参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。","text_tokens":["修改","下","已经","么","是","提炼","易用性","敏感","比较","如何","过程","大大提高","优化","代码","大大","应用","环境","阈值","大家","提高","呢","的","不同","也","麻烦","识别","会","光线","我们","程序","来看","，","成"," ","了","挺","动态","效果","易用","看","物体","就","说干就干","示例","参数","机器","在","可以","把","还","使用","？","不如","机器人","设置","先","继续","运行","不是","对","视觉","变化","再","中","每次","。"],"title":"案例三：机器视觉应用","title_tokens":["应用","视觉","三","案例","机器","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_13","text":"启动三个终端，分别运行： 相机驱动节点 视觉识别节点 修改红色阈值 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180 在启动的视觉识别节点中，我们故意将视觉识别中红色阈值的上限设置为0，如果不修改参数，将无法实现目标识别。 为了便于调整阈值，我们在节点中将红色阈值的限位修改为了ROS参数，通过命令行修改该参数的值，就可以实现视觉识别啦。","text_tokens":["修改","object","ros2","将","h","180","set","相机","故意","分别","detect","如果","无法","通过","。","值","0","实现","_","命令","终端","阈值","为","限位","该","usb","不","$","的","ros","识别","我们","上限","中","红色","，"," ","upper","param","red","启动","就","便于","cam","node","learning","参数","命令行","在","可以","啦","目标","exe","run","运行","parameter","设置","调整","中将","三个","视觉","实现目标","驱动","为了","：","节点"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_14","text":"我们来看下在视觉识别的代码中，是如何通过参数来设置阈值的。 learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], },","text_tokens":["py","raw","ros2","<","表示","numpy","inrange","video","初始","打印","轮廓","下限","callback","互相","一些","listener","像素","hsv","一个","点画","declare","opencv","化成","90","create","_","太小","系统","提示","作者","50","xy","cv","的","{","ros","上限",")","circle","console","从","得到","左上","，","destroy","def","bin","upper","msgs","说明","param","二值化","已","x","示例","node","坐标","参数","\"","图像处理","配置",",","to",".","continue","cnt","进入","转化成","编写","需要","对象","和","cv2","www","信息","中","者","父类","、","。","cvtcolor","节点","勾勒","下","等待","加入","h","180","int","color","approx","功能","是","bgr","模型","hierarchy","与","让","如何","sub","居","（","0","阈值","255","for","参数值","转换","coding","我们","苹果","spin","效果","data"," ","value","来","中心","self","接口","所在","sensor","in","长度","选项","if","打开","integer","显示","在","cvbridge","订阅","frame","编译","super","from","python3","古月","销毁","parameter","subscription","bgr2hsv","视觉","到","初始化",":","检测","usr","scripts","imshow","面积","将","8","文件","包","并","完成","退出","主","读取","array","contours","左上角","waitkey","main","知道","10","env","循环","队列","retr","lower","来看","class","2","颜色","日志","__","msg","python","red","get","shutdown","关闭","chain","高","init","%","name","learning","函数","转化","类","消息","bgr8","进行","import","处理","boundingrect","com","setup","用于","guyuehome","*","-","drawcontours","none","rclpy","上角","输出","：","宽","object","回调","范围","入口","去除","image","库","#","类型","如下","img","创建","info","detect","图像","w","通过","points","代码","bridge","+","]","后","imagesubscriber","为","entry","receiving","}","utf","/","logger","!","np","识别","程序","5","@","红色","as","128","[","'","名","d","计算","话题","=","1","）","数值","噪声","使用","150","目标","设置","list","args","点","出来","shape","y","及","(","mask","imgmsg","findcontours"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["ros2",".","https","docs","org","-","html","/","tutorials",":","ros","en","humble","understanding","parameters"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/","text":"分布式通信 智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。 分布式通信 什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。 分布式网络搭建 除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。 树莓派配置 在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。 装系统 我们先要给树莓派装系统，这里我们选择的是 Ubuntu Mate 针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/ 安装ROS2 在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。 编译代码 将我们课程的代码也下载到树莓派中，进行编译。 远程桌面 如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728 分布式数据传输 树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。 分布式网络分组 没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。 案例一：小海龟分布式控制 分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动： $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端 案例二：话题分布式通信 我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串： $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端 案例三：服务分布式通信 话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能： $ ros2 run learning_service service_adder_server # PC端 $ ros2 run learning_service service_adder_client 2 3 # 树莓派端 案例四：机器视觉分布式应用 以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体： $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 没有任何问题，视觉识别的效果如下。 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。 参考链接 https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["下来","无法","系统","ros","感器","en","humble","做","download","建立","另外","支持","二","端",".","看上","adder","局域","学习","信息","、","加入","122599728","或者","是","sub","两者","命令","小海","位于","确保","呢","选择","适合","仿真器","有点","参考","直接","这样","在","经典","里","计算机","机器人","先","只","没有","具体","控制","系列","下载","机制","笔记本","针对","类似","远程桌面","https","通信","顺利","分布式应用","则","learning","还","进行","处理","运行","整体","hello","不在","处于","真器","服务器程序","已经","依然","teleop","任务","pc","details","局域网络","字符串","讲","资料","局域网","发布","article","放","轻松","的话","不在话下","发生","计算","什么","？","中有","框架","摄像头","远程","驱动","先要","<","ros2","出现","组成","html","服务","鼠标","分布式","client","试试",">","数据","，","运动","岂","demo","物体","压力","三","真有","而是","毕竟","希望","webcam","和","访问","装","分配","务器","主要","体积","请","能力","功能","采集","基本","作为","客户端","上去","除了","桌面","计算能力","拆解","派端","好","都","编译","订阅","步骤","简而言之","视觉","想","桥接","将","电机","遇到","完成","例程","52785580","比较","任何","用","应用","感受","由","2","这么","turtle","小","安装","更强","魅力","不是","同一个","不同","所","接下","给","任务分配","一下","图像","通过","互通","一句","不","大家","about","课程","打通","话题","=","监控","叫","才能","等","我","cpp","nodes","互联","卡顿","你","传感器","频繁","很多","一些","起来","listener","原本","并且","_","环境","提供","usb","此外","分组","非常","之后","这种","concepts","看上去","your","cam","需要","讲过","多","pub","中","感觉","消耗","虚拟机","传感","四","上","结构","变得","domain","talker","实现","docs","$","我们","一","一系","据传","上边","完全","效果"," ","服务器","加法","客户","bashrc","启动","于是","方便","然后","可以","动作","情况","平台","以上","电脑","不够","发布者","一样","设计","派","放置","事情","—","连接","似乎","几乎","分布","每","比如","是否","仿真","会","如此","同一","采用","有","分布式系统","接下来","放在","ubuntu","exe","3","派装","这些","客户端程序","布式","问题","：","即可","service","修改","发给","虚拟","attention","#","数据传输","如果","控制器","可能","代码","之前","后","如","也","模拟","id","程序","识别","小海龟","智能","实际","繁多","相互","mate","操作","成功","没","使用","run","org","world","再","基本一致","多个","py","方法","sd","如下","神奇","像","网络","一个","各种","卡中","之间","典型","的","经常","net","较","topic","了","款","server","就","过","案例","node","机器","笔记本电脑","配置","就是","用到","他们","模式","过来","减轻","端的","turtlesim","者","反过","。","啦","节点","下","qq","显示器","两个","一系列","这里","key","像头","反过来","字符","一切","海龟","挺","来","链接","实时","搭建","blog","显示","命令行","友好","不过","顺利实现","一致","到",":","只要","算机","摄像","并","之外","笔记","带领","带来","export","helloworld","之一","传输","开发","而言","安排","流畅","键盘","变化","求和","-","性能","流程","csdn","资源","还是","测试","小型","为","/","全都","红色","复杂","烧写","网上","这","镜像","小组","继续","派里","树莓","个","编写"],"title":"分布式通信","title_tokens":["分布","布式","分布式","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_1","text":"智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。","text_tokens":["将","遇到","算机","能力","功能","出现","任务分配","上","一个","如果","任务","分布式","实现","系统","分布","的","经常","会","全都","中","计算能力","，","拆解"," ","岂","智能","繁多","压力","计算","这","可以","机器","情况","分布式系统","平台","里","放在","就是","计算机","？","机器人","处理","等","运行","多","不是","不够","减轻","到","卡顿","这些","多个","、","布式","分配","。"],"title":"分布式通信","title_tokens":["分布","布式","分布式","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_2","text":"什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。","text_tokens":["下来","组成","起来","一个","各种","原本","分布式","并且","之间","系统","环境","典型","的","此外","ros","感器","非常","较","数据","这种","，","做","运动","了","款","另外","看上去","就","过","压力","机器","笔记本电脑","配置","就是","需要","多","看上","毕竟","减轻","信息","和","中","分配","。","消耗","节点","下","两个","体积","主要","传感","功能","上","是","结构","作为","实现","上去","位于","我们","一","上边","适合","完全"," ","挺","有点","好","于是","方便","都","可以","在","平台","不过","计算机","电脑","机器人","视觉","到","只","控制","将","设计","电机","派","算机","比较","笔记本","笔记","任何","带领","应用","感受","由","分布","每","比如","之一","传输","开发","小","采用","有","通信","更强","分布式系统","接下来","放在","魅力","还","处理","运行","变化","这些","不同","布式","性能","接下","已经","资源","任务","控制器","可能","之前","讲","为","不","大家","也","复杂","放","相互","计算","这","什么","监控","叫","？","等","框架","派里","树莓","远程","驱动","传感器"],"title":"分布式通信","title_tokens":["分布","布式","分布式","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_3","text":"除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。","text_tokens":["派","放置","上","之外","一个","笔记本","控制器","笔记","除了","的","选择","模拟","我们","，","了","另外","计算","机器","笔记本电脑","平台","在","使用","电脑","机器人","我","树莓","。","控制"],"title":"分布式网络搭建","title_tokens":["分布式","分布","网络","搭建","布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_4","text":"在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。","text_tokens":["派","很多","之前","环境","大家","的","资料","也","我们","，","开发","有","好","参考","网上","都","可以","在","配置","需要","先","树莓","。"],"title":"树莓派配置","title_tokens":["配置","树莓","派"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_5","text":"我们先要给树莓派装系统，这里我们选择的是 Ubuntu Mate 针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/","text_tokens":["sd","派","给","下载","是","：","这里","卡中","系统","针对","的","/","选择","我们","之后","，","download"," ","了","链接","https","烧写","mate","就","启动","可以","ubuntu",".","镜像","org","到","派装","树莓",":","-","。","先要"],"title":"装系统","title_tokens":["系统","装"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#ros2","text":"在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。","text_tokens":["。"," ","ros2","端","电脑","流程","系统","，","好","mate","的","和","安装","中","一样","在","ubuntu"],"title":"安装ROS2","title_tokens":["ros2","安装"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_6","text":"将我们课程的代码也下载到树莓派中，进行编译。","text_tokens":["。","将","代码","进行","派","课程","下载","到","的","树莓","也","我们","中","编译","，"],"title":"编译代码","title_tokens":["代码","编译"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_7","text":"如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728","text_tokens":["qq","流程","显示器","派","如下","csdn","122599728","52785580","上","基本","网络","：","连接","鼠标","如果","通过","details","_","系统","不","大家","的","桌面","/","也","远程桌面","net","，"," ","了","article","链接","https","有","好","的话","参考","直接","就","操作","方便","blog","可以","显示","在","以上","配置","步骤","使用","电脑","端",".","键盘","一致","整体","树莓","和","远程","访问","基本一致",":","。"],"title":"远程桌面","title_tokens":["远程桌面","桌面","远程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_8","text":"树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。","text_tokens":["py","下来","ros2","如下","很多","神奇","像","listener","网络","一个","服务","无法","并且","_","之间","分组","的","做","，","了","demo","就","而是","配置","端","需要","讲过","他们","模式","局域","希望","和","中","者","、","。","感觉","节点","两个","虚拟机","请","能力","是","talker","实现","命令","确保","呢","$","我们","效果"," ","派端","好","直接","启动","这样","都","命令行","可以","在","平台","订阅","动作","里","不过","计算机","电脑","简而言之","到","发布者","一样","桥接","具体","只要","将","派","算机","完成","并","事情","连接","用","带来","会","而言","同一","通信","安装","接下来","同一个","所","问题","：","修改","处于","接下","已经","一下","虚拟","attention","#","如果","pc","互通","局域网络","测试","之前","后","为","不","如","局域网","也","发布","发生","打通","计算","这","话题","什么","使用","？","等","run","小组","中有","cpp","nodes","互联","树莓","你","个"],"title":"分布式数据传输","title_tokens":["分布式","分布","数据传输","布式","数据","据传","传输"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_9","text":"没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。","text_tokens":["<","处于","ros2","将","派","算机","一个","机制","domain","如果","无法","。","一句","两者","实现","_","export","提供","分组","的","$","ros","不同","类似","我们","id",">","分配","，"," ","了","同一","bashrc","通信","就","your","即可","计算","这样","则","没","可以","在","=","配置","计算机","电脑","才能",".","小组","同一个","端的","到","树莓","和","一样","中","加入","问题","："],"title":"分布式网络分组","title_tokens":["分布式","分布","分组","网络","布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_10","text":"分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动： $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端","text_tokens":["真器","ros2","派","已经","例程","一些","或者","依然","上","神奇","#","—","网络","：","teleop","pc","key","分布式","测试","之前","小海","_","似乎","分布","试试","的","反过来","ros","也","是否","我们","仿真","海龟","$","，","小海龟"," ","了","仿真器","这么","运动","建立","来","turtle","派端","通信","启动","过","案例","成功","真有","可以","node","在","经典","流畅","端","电脑","先","继续","节点","键盘","过来","run","学习","turtlesim","树莓","想","中","布式","反过","。","控制"],"title":"案例一：小海龟分布式控制","title_tokens":["分布式","小海","布式","分布","案例","一","海龟","：","控制","小海龟"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_11","text":"我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串： $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端","text_tokens":["修改","下","ros2","派","例程","#","作为","pc","任何","sub","代码","之前","_","字符串","helloworld","不","试试","的","呢","字符","$","是否","我们","，","topic"," ","发布","派端","通信","直接","话题","learning","可以","情况","在","订阅","端","使用","？","电脑","pub","先","run","world","树莓","发布者","hello","者","：","编写"],"title":"案例二：话题分布式通信","title_tokens":["分布式","通信","分布","话题","案例","布式","：","二"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_12","text":"话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能： $ ros2 run learning_service service_adder_server # PC端 $ ros2 run learning_service service_adder_client 2 3 # 树莓派端","text_tokens":["ros2","服务器程序","功能","#","还是","：","服务","。","pc","客户端","实现","_","client","$","2","也","我们","程序","，"," ","服务器","加法","客户","派端","server","顺利","不在话下","话题","learning","可以","顺利实现","端","电脑","run","运行","求和","adder","3","树莓","没有","客户端程序","问题","务器","不在","service"],"title":"案例三：服务分布式通信","title_tokens":["分布式","通信","分布","三","案例","服务","布式","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_13","text":"以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体： $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 没有任何问题，视觉识别的效果如下。 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。","text_tokens":["方法","下来","ros2","频繁","如下","网络","一个","分布式","_","系统","提供","usb","的","非常","ros","做","，","topic","了","支持","物体","cam","node","机器","配置","端","需要","用到","端的","webcam","中","啦","。","节点","功能","采集","上","变得","一系列","sub","像头","$","我们","一切","一系","效果"," ","派端","好","实时","搭建","然后","可以","都","在","友好","以上","电脑","机器人","不够","视觉","没有","只要","将","派","系列","摄像","例程","连接","任何","几乎","分布","类似","会","如此","开发","安排","learning","接下来","还","处理","exe","这些","布式","问题","：","修改","接下","发给","#","图像","通过","pc","代码","测试","小型","为","不","模拟","也","识别","红色","复杂","实际","轻松","没","使用","？","run","再","树莓","摄像头"],"title":"案例四：机器视觉分布式应用","title_tokens":["分布式","四","应用","视觉","分布","分布式应用","案例","布式","机器","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_14","text":"https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["about",".","id","https","docs","org","concepts","-","html","/",":","ros","en","humble","domain"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2_%E6%A6%82%E5%BF%B5%E6%80%BB%E8%A7%88/","text":"从本节开始，我们将进入第二个篇章，以ROS2的核心概念为线索，详细讲解ROS2的应用开发方法。","text_tokens":["将","第二个","ros2","方法","线索","第二","详细","。","开始","概念","核心","应用","为","的","开发方法","我们","讲解","，","开发","从本节","二个","以","进入","篇章","本节"],"title":"核心概念","title_tokens":["核心","概念"]}]}