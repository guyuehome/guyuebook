{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的电气时代。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的数字时代，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发，智能机器人时代正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。 教程链接 课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 博客泡泡： https://www.guyuehome.com/ 教程问答： https://www.guyuehome.com/bubble/index 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 参考资料： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["传感","之后","有限","class","时代","的","更","2015","快速","减速机","码","www","操作系统","于","不断丰富","俗称","关注","后","教程","ros2","年","机器人","主要","不过","这","工业","开发","按照","人工智能","gitee","1dvxugmhxlxnsnfdezuxw0g","环境","热点","成为","资料"," ","软件",":","爆发","七八","计算","呈","家庭","图文","智能","七八十","不断","。","工厂","最为","等","要求","问答","教器","此时","/","之一","检测","重要","最佳","三个","guyuehome","驱动","和","年前","完全","tutorials","应用","robot","book","参考","八十年","操控","自动","驱动器","思考","自主","服务","机器","类型","index","时期","提取","2000","感器","八十","伺服","命令","载体","更加","驾驶","横跨","状","课程","减速","、","操作","了","丰富","对","仿生","多","博客","人工","高","bubble","21","随着","劳动","控制器","ai","也","动力","释放","设备","_","提出","依然","并",".","链接","视觉","逐渐","局部","泡泡","，","operating","s","agv","十年","baidu","拉开序幕","视频","井喷","送餐","帮助","这是","感知","是","工业生产","但是","业生","数字","劳动力","前夜","正式","层面","参考资料","狗","伺服电机","只能","序幕","传感器","com","由示","exc6","生产","电机","七八十年","控制","算机","出现","经历","四足","过程","大","系统","pan","：","拉开","主角","人类","缺少","发展","技术","汽车","system","https","我们","没有","就是","电气","源码","github","而言","计算机","动作","执行","太","必将","—","智能化"],"title":"引言","title_tokens":["引言"]},{"location":"#_1","text":"课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 博客泡泡： https://www.guyuehome.com/ 教程问答： https://www.guyuehome.com/bubble/index 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 参考资料： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["exc6","问答","博客","class","bubble","/","21","_","：","pan","guyuehome",".","码","www","链接","泡泡","ros2","教程","s","tutorials","book","参考","视频","baidu","gitee","https","1dvxugmhxlxnsnfdezuxw0g","资料","提取"," ","index","源码",":","github","参考资料","图文","课程","com"],"title":"教程链接","title_tokens":["链接","教程"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["传播","镜像","》","提供","法律","有限","复制","抄录","面向未来","的","个人","建立","单位","）","未来","华语","联系","社区","www","万字","年","机器人","开发","创建","创新","2011"," ","拥有","企业","与","微控","声明者","销售","。","等","致力于","未经","进行","使用","作品","有权","通过","高校","限于","法律责任","guyuehome","和","畅销","本","责任","合法","地区","用户","人才","万人","校企","均","任何","被","修改","捆绑","超过","精锋","或","许可","追究其","交流学习","机器","致力","公司","如需","学习","生态","小时","+","武汉","课程","图书","、","高质量","模式","面向","但","课件","（","古月","出版","学","ai","努力","实践",".","对本","包括","书面","高质","，","知名","明者","请","视频","网站","及","是","累积","合作","众多","不得","构建","声明","com","120","《","上述","有限公司","授权","ros","产品","居","仅限","科技","内容","为","学习者","1000","将","平台","@","违反","版权","集","一体","线上","源码","究其","培养","人才培养","优质","至今","依法","追究","质量","所有","不","赋能","brand","交流","上","其它"],"title":"关于教程","title_tokens":["关于","教程"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["》","提供","面向未来","的","建立","）","未来","华语","社区","www","万字","年","机器人","开发","创建","创新","2011"," ","企业","与","。","等","致力于","通过","高校","guyuehome","畅销","地区","用户","人才","万人","校企","超过","交流学习","机器","致力","学习","生态","小时","+","课程","图书","、","高质量","模式","面向","（","古月","出版","ai","努力","实践",".","高质","，","知名","视频","及","是","累积","合作","众多","构建","com","120","《","ros","居","内容","为","学习者","1000","平台","集","一体","线上","培养","人才培养","优质","至今","质量","赋能","交流"],"title":"学机器人，上古月居","title_tokens":["，","机器人","居","上","机器","古月","学"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["传播","镜像","法律","有限","复制","抄录","的","个人","单位","联系","拥有"," ","与","微控","声明者","销售","。","等","未经","进行","使用","作品","有权","限于","法律责任","guyuehome","和","本","责任","合法","用户","均","任何","修改","捆绑","被","精锋","或","许可","追究其","公司","如需","学习","武汉","课程","、","但","课件","古月",".","对本","包括","书面","，","明者","请","视频","网站","不得","声明","com","上述","有限公司","授权","产品","居","仅限","科技","为","将","@","违反","版权","源码","究其","brand","依法","追究","不","所有","其它"],"title":"版权声明","title_tokens":["声明","版权"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/","text":"ROS/ROS2是什么 智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。 ROS的诞生 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS的发展 ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称ROSCon，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。 ROS的特点 ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的应用案例在社区中沉淀下来； ROS本身也是完全开源的，商业许可证非常宽松； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品，缩短了产品的上市时间； ROS也可以跨平台使用，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多支持工业应用的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。 参考资料 关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["肩负","价格便宜","着","15","一步","打","的","个","主阵地","个人","组成","投资","问题","绝大部分","2","简单","真的","集合","人","同样","150","效果","roscon","玩耍","不同","收拾","尽量","由","讲解","零","近两年","说干就干","迅猛","机器人","名称","欢迎","新鲜","关键","张图","资料","几百万","提问","2011","数据库","这群","软件","开始","来","学术","全球化","做法","成本","全人","这样","步伐","智能","家","之","2010","智慧","上边","神兵","。","最为","详细","问答","不下","turtlebot","进行","此时","熟悉","然后","5","度","“","访问","完成","嘉宾","深知","浏览","已经","肩膀","高效","框架","完全","用","c","光靠","友好","不想","排名","叫做","标志","之内","以上","大有可为","生态","还","当时","同一","多项","既然","限性","总称","应用软件","、","认识一下","柔性","而且","answers","越来越","后续","中","看中","单独","嵌入式","总体","推荐","普遍","动力","努力","今日","站","并","商业","很多","亚马","重新","复用","让","新","访问量","四大","网站","org","这是","次数","是","来看","笔记本","差不多","核心","世界","personal","希望","回到","正式","进步","从中","能够","历经","轮子","25","每","传感器","开发工具","加快","有人","百万","案例","爆款","基本上","发布","资金","入门","齐聚一堂","过程","大","内容","低","局限性","论坛","一下","时候","将","技术","繁荣","造","2007","四项","”","扩展","工程","工具","willow","每年","我们","这里","剪头发","微软","全新","诞生","该","而言","所有","回答","索引","外观","万万","讨论","大笔","40","强悍","一大笔","一个","推动","熨烫","会","首先","一大笔钱","年轻","向前走","虽然","宽松","工程师","代","叠","长期","社区","下来","分钟","操作系统","统计","适用","做成","变为","代码","推出","搜索","直到","利器","年","轰动","开发","这","ubuntu","处理","图中","相关","青年","频繁","越来","每个","为了"," ","加","成熟","价格","80","远","斯坦福","速度","身影","通信","充足","有","他们","肯定","地域","月底","活跃","想到","向","认识","重要","一家","时间","通过","离不开","这个","全人类","和","手机","其中","world","整理","得以","实验室","而生","终于","整合","人才","万人","有志","不开","啦","斯坦福大学","近几年","系列","托管","感器","资本","据库","程度","事情","横跨","功能","水下","给出","已有","一些","课程","到","领域","对","百科","随着","福大","软件系统","为例","说明","稳定","不到","也","同年","而","清晰","下载","不要","答案","windows","统统","泡泡","类似","万","普及","原本","此后","介于","一群","笔记本电脑","帮助","维基百科","复杂","实验","得到","都","迎来","风险投资","巨大","？","研发","望而却步","物体","了解","多万","正式版","没想到","如何","这些","精致","下","台球","xbox","所学","场景","神秘","大大","conference","全书","挑战","无论","那","沉淀","早期","经历","具备","同学","简称","基本","系统","别人","全","为","板块","发展","创意","正在","美妙","跨平台","乐意","维基百","之旅","大家","圈","一样","洗衣","举办","线上","量级","出来","以叠","促使","快","至今","投了","年底","模块化","体系","革命","浪潮","同理","智能化","多年","疫情","记录","时代","无疑","起点","上图","2015","数据","制造","快速","一堂","没想","各样","一定","增长","很快","成果","独立","陪","discourse","教程","工业","条","居高不下","使命","还是","移动","版本","月","把","humble","迭代","2022","知识","配合","浏览量","原型","给","移动机器人","结晶","通常","2012","木头","使用","成功","活动","最佳","掀起","日常","限于","标准","一系列","自身","图","设计","扫地","选择","同时","用户","任何","几个","做出","注意","无聊","参考","全球","复合","明智","引擎","index","两个","面纱","所以","公司","大会","起来","学习","一段","维基","一次","100","确定","媒体","国家","最后","基于","这一波","一套","可能","20","几年","这位","大学","动机","方式","自己","什么","生态系统","只要","古月","可为","不是","一系","提出","大部","版","入门教程","现在","只想","你","干","前","更新","几乎","来讲","实现","对于","发表","真正","缩短","原因","以","采用","找到","包","商业化","进入","容易","用于","wiki","模块","但是","掌握","接下来","年轻人","a","率","嵌入","接下","当初","加上","更为","效率","人形","b","120","笔记","后期","或者","产品","两年","带领","居","跟随","2014","比如","很","却","不断更新","有没有","起","：","人类","尝试","阵地","汽车","system","围绕","各项","专业","只","总而言之","来到","就是","体感","臂","不仅","方法","各种","情况","packages","采购","高度","局限","代表","传感","提供","聊天","大步","才","几百","底盘","棒","人数","大部分","更","intel","多媒体","曲线","款","活跃度","页面","百科全书","向前","时间轴","看到","助推","于","要","ros2","风险","主要","头发","呢","分享","其实","关于","成为","毛巾","重量","因","等等","重量级","一大","ros1","零部件","此","初期","特性","不断","创始","等","一大步","针对","却步","电脑","/","可以","部分","元素","项目","非常","根据","又","本","生态系","增长速度","被","做饭","应用","robot","衣服","在","许可","电路","改为","第一次","来自","新增","服务","所有人","这款","机器","提取","怀揣","存储","上去","团队","好","250","时至今日","garage","受限","查看","操作","了","不乏","一切","多","解决","做到","便宜","特点","之王","资源","正如","万左右","多媒体系统","长远","最高","亚马逊","上市","五年","；",".","涉及","游戏机","就","从","虽好","开源","逐渐","趋势","，","为什么","operating","许可证","广泛","视频","不多","新鲜事","一起","linux","推进","性能","苹果","受限于","肩负着","本身","其他","层面","参考资料","联合","暴露","绝对","机制","研究","ros","第一","机械","pr2","想法","第一个","做","跑","之上","目标","算是","踏上","作为","支持","大量","平台","如果","其次","开发者","野蛮","还有","甚至","kinect","一届","无论是","一款","没有","绝大","游戏","源码","左右","直接","巨人","github","更好","不","提高","各种各样","google","官方","因为","部件","2017","方向","控制","上","—","进化"],"title":"ROS和ROS2是什么","title_tokens":["什么","ros","和","是","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#rosros2","text":"智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。","text_tokens":["操作","。","对","了","认识一下","这位","什么","ros","场景","神秘","时代","带领","中","的","挑战","向","那","认识","掀起","系统","提出","全","又","下来","一下","操作系统","嘉宾","就","正在","ros2","而生","，","应用","机器人","开发","这","呢","大家","我们","一起","是","机器"," ","重量","量级","面纱","重量级","巨大","？","接下来","接下","智能","高度","方向","智能化","进化"],"title":"ROS/ROS2是什么","title_tokens":["什么","ros","/","是","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。","text_tokens":["聊天","强悍","大步","才","一个","打","推动","的","个","熨烫","更","个人","组成","问题","2","向前走","真的","虽然","款","代","叠","向前","人","同样","很快","看到","分钟","操作系统","独立","玩耍","收拾","陪","要","年","说干就干","机器人","开发","轰动","这","头发","呢","处理","图中","分享","青年","条","越来","成为","毛巾"," ","软件","因","一大","学术","零部件","这样","智能","初期","斯坦福","家","。","原型","充足","等","有","针对","一大步","他们","肯定","此时","可以","木头","重要","这个","标准","一系列","5","非常","和","手机","其中","图","完成","深知","设计","已经","整理","得以","实验室","而生","高效","框架","做饭","应用","做出","用","光靠","无聊","有志","robot","衣服","在","斯坦福大学","电路","不想","第一次","服务","所有人","这款","机器","系列","之内","所以","还","团队","一次","100","事情","当时","最后","横跨","给出","基于","既然","同一","一些","功能","应用软件","一套","可能","、","操作","柔性","了","大学","一切","多","自己","什么","而且","越来越","中","福大","只要","为例","软件系统","不到","也","不是","一系","并","答案","你","干","涉及","就","类似","实现","对于","，","很多","为什么","一群","找到","帮助","一起","是","容易","复杂","实验","用于","都","苹果","性能","但是","personal","？","层面","物体","联合","从中","效率","如何","精致","台球","有人","研究","后期","ros","第一","或者","机械","那","很","却","资金","有没有","pr2","想法","做","系统","别人","：","低","尝试","时候","平台","如果","技术","2007","甚至","专业","只","大家","圈","一款","洗衣","我们","没有","就是","出来","剪头发","以叠","诞生","不","所有","因为","部件","外观","上","—"],"title":"ROS的诞生","title_tokens":["ros","诞生","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_1","text":"ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称ROSCon，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。","text_tokens":["肩负","大笔","传感","价格便宜","着","疫情","多年","几百","一大笔","底盘","推动","一个","时代","大部分","的","更","起点","会","intel","个人","投资","一大笔钱","年轻","绝大部分","问题","一堂","快速","没想","款","各样","长期","增长","很快","人","时间轴","roscon","助推","操作系统","于","适用","变为","ros2","推出","教程","直到","讲解","近两年","风险","年","机器人","开发","名称","这","ubuntu","居高不下","分享","使命","关键","越来","几百万","成为","每个","2011"," ","这群","软件","开始","为了","一大","版本","把","成本","成熟","价格","步伐","迭代","humble","斯坦福","2022","身影","2010","创始","原型","。","给","电脑","等","却步","他们","不下","turtlebot","月底","2012","想到","进行","可以","使用","熟悉","一家","成功","部分","时间","重要","限于","这个","5","项目","和","本","其中","扫地","world","设计","已经","终于","被","应用","robot","注意","在","全球","斯坦福大学","改为","来自","叫做","标志","服务","机器","提取","公司","所以","感器","资本","大会","2015","确定","团队","功能","garage","受限","限性","到","、","操作","几年","了","不乏","大学","多","自己","便宜","越来越","中","看中","随着","单独","福大","稳定","而","也","同年","大部","亚马逊","提出","版","五年","现在","只想","前","游戏机","就","从","虽好","开源","逐渐","商业","类似","，","operating","普及","原本","亚马","原因","真正","让","此后","介于","采用","笔记本电脑","这是","进入","是","笔记本","迎来","但是","受限于","肩负着","风险投资","正式","回到","年轻人","望而却步","了解","能够","正式版","当初","加上","历经","没想到","每","传感器","暴露","笔记","下","加快","xbox","后期","ros","第一","百万","爆款","大大","两年","conference","跟随","2014","发布","早期","经历","pr2","简称","齐聚一堂","大","系统","起","做","第一个","过程","之上","为","局限性","支持","发展","2007","开发者","system","野蛮","kinect","willow","一届","圈","一样","一款","每年","我们","绝大","举办","这里","体感","线上","出来","游戏","微软","直接","诞生","全新","不仅","该","各种","投了","年底","所有","各种各样","官方","因为","2017","控制","—","万万","局限"],"title":"ROS的发展","title_tokens":["ros","发展","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_2","text":"ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的应用案例在社区中沉淀下来； ROS本身也是完全开源的，商业许可证非常宽松； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品，缩短了产品的上市时间； ROS也可以跨平台使用，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多支持工业应用的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["着","一步","一个","的","更","会","多媒体","组成","简单","制造","快速","向前走","各样","宽松","集合","向前","成果","社区","看到","下来","做成","尽量","由","ros2","零","机器人","开发","这","工业","分享","还是","越来","移动","成为"," ","软件","来","全球化","做法","把","ros1","全人","这样","此","智能","远","特性","身影","家","之","通信","智慧","。","给","有","移动机器人","他们","结晶","通常","可以","使用","一家","部分","时间","标准","这个","全人类","自身","非常","和","“","生态系","设计","同时","已经","人才","肩膀","整合","完全","被","应用","c","在","全球","复合","许可","友好","新增","明智","怀揣","机器","引擎","公司","生态","还","上去","媒体","水下","时至今日","最后","功能","已有","多项","总称","领域","到","、","了","对","动机","多","自己","生态系统","做到","特点","越来越","中","正如","多媒体系统","长远","嵌入式","也","普遍","不是","今日","上市","站","；","不要","并","windows","统统","就","从","开源","来讲","实现","商业","，","很多","许可证","缩短","以","重新","复用","广泛","新","四大","一起","商业化","linux","是","用于","推进","模块","都","核心","本身","进步","a","率","嵌入","轮子","人形","b","这些","开发工具","机制","ros","案例","机械","产品","无论","比如","那","沉淀","具备","跑","做","系统","别人","目标","：","人类","发展","创意","支持","将","平台","繁荣","技术","造","汽车","围绕","”","跨平台","工具","无论是","大家","我们","就是","这里","臂","促使","直接","巨人","各种","至今","提高","各种各样","采购","模块化","体系","上","同理","智能化","代表"],"title":"ROS的特点","title_tokens":["ros","特点","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_3","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。","text_tokens":["40","记录","15","棒","人数","一个","大部分","的","无疑","会","上图","数据","问题","曲线","快速","绝大部分","页面","活跃度","增长","150","人","社区","看到","助推","统计","不同","discourse","教程","利器","迅猛","开发","机器人","这","呢","频繁","相关","其实","新鲜","张图","关于","越来","每个","成为","数据库"," ","等等","月","加","80","速度","浏览量","上边","神兵","。","给","最为","等","有","问答","地域","活跃","可以","使用","活动","重要","部分","最佳","通过","日常","元素","度","非常","和","根据","本","其中","访问","增长速度","浏览","选择","已经","用户","任何","整合","几个","万人","应用","参考","在","全球","近几年","排名","存储","机器","index","两个","以上","大有可为","起来","据库","学习","维基","程度","250","国家","功能","查看","这一波","20","到","、","几年","了","方式","多","什么","百科","answers","越来越","中","资源","说明","万左右","可为","最高","总体","也","动力","大部","提出","清晰","下载","；","现在",".","你","就","从","发表","万","很多","，","趋势","新","访问量","不多","网站","新鲜事","org","这是","包","维基百科","次数","是","wiki","来看","得到","都","差不多","核心","希望","？","其他","研发","多万","更为","25","每","这些","绝对","ros","比如","基本上","很","发布","基本","算是","大","：","作为","发展","论坛","如果","正在","四项","开发者","各项","乐意","维基百","总而言之","大家","我们","绝大","就是","这里","源码","左右","快","各种","情况","而言","packages","不","回答","索引","革命","上","浪潮","代表","讨论"],"title":"ROS的社区","title_tokens":["社区","ros","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#_1","text":"关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["提供","一个","大部分","的","主阵地","首先","会","问题","绝大部分","工程师","一定","百科全书","效果","社区","代码","要","ros2","教程","搜索","主要","开发","机器人","这","欢迎","分享","提问","关于","资料","成为"," ","开始","不断","知识","配合","。","最为","有","详细","可以","使用","重要","部分","离不开","这个","然后","项目","和","本","万人","几个","参考","在","不开","啦","机器","托管","学习","还","一段","好","课程","最后","解决","百科","之王","后续","中","古月","推荐","也","努力","大部","入门教程","你","更新","几乎","从","开源","泡泡","，","视频","网站","找到","一起","是","都","世界","掌握","参考资料","120","所学","ros","居","全书","不断更新","入门","同学","内容","踏上","作为","板块","大量","将","技术","其次","阵地","美妙","还有","扩展","工程","工具","之旅","大家","来到","我们","绝大","这里","方法","github","更好","所有","google","—"],"title":"参考资料","title_tokens":["参考","参考资料","资料"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/","text":"ROS2对比ROS1 在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。 ROS1的局限性 首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。 全新的ROS2 ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。 ROS2 vs ROS1 系统架构 在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。 DDS通信 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。 核心概念 ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。 编码方式 再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。 命令行 最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随课程，你就会慢慢理解这些特性。","text_tokens":["实力","上升","通信接口","一步","消费","的","意义","问题","绝大部分","简单","共享内存","一致","对系统","会成","未来","客户","历史","级别","同样","android","不断涌现","交道","不同","尽量","明显","似乎","讲解","不用","例子","致使","总之","机器人","名称","良好","按照","基础","走","慢慢","更具","张图","用到","几百万","结合","软件","开始","来","学术","成本","这样","5g","智能","稳定性","原有","。","最为","主","无法","进行","灵活","熟悉","面向对象","部署","最早","升级","广泛应用","一一","然后","去","接入","完成","右侧","已经","接口","面临","具体","框架","ceo","用","概念","满足","叫做","只是","以上","历史使命","命令","还","减少","便于","限性","、","通用","最新","不再","opensplice","过","越来越","但","中","后续","翻新","面向","上手","它","电脑系统","嵌入式","总体","动力","依然","并","节点","再","之外","链接","有且","不爽","复杂度","商业","很多","体现","请","解密","重新","让","诸多","复用","除此","精力","编码","middleware","当","担忧","编译","是","来看","核心","哪些","能够","性","经常","不难理解","确实","命令行","每","之初","python3","运行","标准化","以下几点","api","百万","大部头","微控制器","实时","通信协议","发布","更接","自","过程","大","唯一","受制于","主角","局限性","下要","配置","管理","一下","时候","将","如","colcon","颠覆性","分布","联网","管理器","也许","工程","工具","先","诟病","rosrun","我们","这里","一旦","布式","之前","内","全新","诞生","mcu","该","对比","航天","而言","所有","想要","完善","不会","搭载","内存","二代","变化","有限","物","一个","总体而言","首先","会","考虑","策略","一团乱","可读","建立","虽然","阶段","产品化","导致","社区","可读性","二种","强","操作系统","做成","代码","接收","discovery","适用","后","开发","走向","不过","这","即可","处理","频繁","相关","揭秘","单兵","图片","越来","为了","安全","每个","属性"," ","企业","走向市场","相比","角色","消费市场","印象","国际标准","安全性","通信","实时性","充足","有","过去","写","换成","他们","安装","肯定","小伙","一本","装修","另外","经验","重要","一家","时间","通过","移植性","这个","三个","受制","和","手机","建筑","驱动","其中","相对","更换","网络","批量生产","啦","自动","干扰","类型","软件开发","保证","间层","工作站","先进","担心","协议","尤其","rosbuild","课程","层","变革","功能","一些","以下","到","第二代","几点","没","对","除了","选项","听说","随着","控制器","说明","软件系统","稳定","这台","而","也","看看","不要","需求","答案","是从","windows","底层","轻松","类似","细节","编译器","分解","tcp","普及","原本","到底","依赖","定性","复杂","都","rtos","延迟","听","巨大","？","优化","研发","语言","ament","了解","amr","毛坯","个体","如何","这些","c++","下","总结","生产","场景","小","一团乱麻","无论","挑战","出现","那","时","具备","分散","基本","简称","系统","信号","所示","全","编程语言","为","多功能","发展","程序","发布者","跨平台","比","较","学术研究","最","由于","很大","大家","一样","定义","可靠性","只不过","强壮","专注","行人","不好","前方","共享","足够","进程","之后","乱麻","时代","工作","不能","他","部头","表示","运算","数据","各样","一定","）","现有","课时","发成","测试","适配","独立","过来","改","教程","小伙伴","使命","客户端","环境","厂商","算力","rmw","产品开发","run","运动","版本","把","第二","可移植性","初次","适合","差异","编译系统","新版","成","给","干掉","完整","运动学","python","理解","搬","远比","使用","成功","最佳","黑客","标准","不太","可靠","全部","连接","盖","可选","设计","选择","接近","同时","用户","启动","任何","毛坯房","注意","集成","udp","全球","或","rostopic","封装","应该","角度","两个","信息","能","所以","公司","千差万别","学习","更加","之间","解算","完","最后","基于","售价","第二个","项目管理","一套","可能","编写","丰富","方式","自己","什么","vs","接触","加密","（","只要","大幅","真实","重来","大部","设备","不是","大致","你","格局","地方","几乎","天翻地覆","来讲","实现","对于","名字","真正","中间","是否","新一代","why","里","最大","含义","可移植","借助","找到","dds","应用层","用于","带来","但是","需要","嵌入","率","简单明了","不难","交给","推倒重来","指挥","方案","或者","调用","macos","产品","编码方式","行为","带领","比如","跟随","打成","协作","幅度","：","成功经验","下边","常用","100ms","周期","另","图像","移植","彼此","汽车","体验","两者","就是","存在","topic","么","突然","发","不仅","方法","各种","至关","勿躁","尽力","至关重要","迁移","局限","继续","打交道","提供","编程","几百","架构","提","大部分","流程","更","理器","市场","款","于","只有","要","指定","ros2","从而","怎样","风险","保障","网络连接","主要","加入","暂且","呢","力学","生活","其实","条件","调试","举","计算","内部","与","master","ros1","家庭","交付","不断","推倒","特性","颠覆","稍安","要求","等","针对","电脑","当然","借鉴","不够","/","fastrtps","可以","对象","catkin","部分","发现","保留","项目","非常","发送","本","一行","修改","还会","1ms","应用","在","左侧","陆续","服务","中间层","怀揣","机器","放在","伙伴","国际","除此之外","作战","驾驶","好","wifi","多个","厂家","操作","纠结","了","难度","多","一页","丢","做到","解决","高","一种","切换","资源","常","长远","学","是因为","符合","而已","；","自家","就","从","开源","房子","切记","方便","，","为什么","雷达","翻地","广泛","单兵作战","深入","出错","大幅度","省略","一团","整体","各位","linux","看","性能","道坎","第二种","有线","其他","层面","动力学","话题","只能","涌现","陌生","机制","以及","研究","一边","ros","第一","能力","二个","某","开发成本","批量","面对","第一个","pr2","入侵","做","之上","目标","可选项","得","完整性","支持","大量","通用性","平台","如果","分布式","开发者","库会","变得","还有","收","开发方式","最终","甚至","宕机","一款","基本保障","绝大","没有","消失","直接","更好","一代","不","提高","各种各样","迈过","因为","系统工程","控制","上","—","高昂"],"title":"ROS2对比ROS1","title_tokens":["ros1","ros2","对比"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2ros1","text":"在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。","text_tokens":["。","二代","有","多","ros","变化","过","听说","一个","的","使用","大","做","看看","和","你","其中","就","从","ros2","，","也许","名称","这","在","或","到底","我们","就是","么","来看"," ","能","之前","学习","对比","不","？","ros1","第二","上","第二代"],"title":"ROS2对比ROS1","title_tokens":["ros1","ros2","对比"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros1","text":"首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。","text_tokens":["实力","足够","有限","一个","工作","他","大部分","的","运算","会","首先","市场","数据","问题","绝大部分","款","虽然","历史","级别","不断涌现","独立","做成","要","ros2","似乎","不用","风险","致使","网络连接","开发","机器人","走向","这","良好","呢","处理","单兵","为了"," ","算力","软件","条件","学术","计算","走向市场","内部","ros1","家庭","成本","这样","适合","不断","通信","。","充足","有","针对","当然","不够","可以","最早","部分","时间","黑客","可靠","和","完成","连接","设计","已经","具体","框架","用","网络","应用","批量生产","在","自动","干扰","服务","机器","类型","保证","工作站","先进","作战","驾驶","更加","课程","一些","售价","了","自己","什么","丢","中","资源","随着","它","这台","嵌入式","也","大部","设备","是因为","；","并","答案","地方","就","从","天翻地覆","类似","，","为什么","普及","原本","新一代","why","让","翻地","单兵作战","找到","担忧","是","来看","复杂","用于","都","但是","有线","？","嵌入","只能","涌现","运行","生产","研究","ros","第一","能力","或者","小","产品","实时","比如","出现","那","具备","批量","第一个","pr2","入侵","系统","：","目标","主角","发展","支持","平台","汽车","最终","甚至","学术研究","由于","一款","我们","绝大","就是","没有","可靠性","诞生","各种","航天","一代","不","因为","上","—","高昂","搭载"],"title":"ROS1的局限性","title_tokens":["局限性","ros1","的","限性","局限"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2","text":"ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。","text_tokens":["消费","的","简单","问题","对系统","未来","历史","android","不同","尽量","明显","不用","机器人","基础","更具","结合","软件","这样","智能","稳定性","原有","。","无法","进行","部署","升级","去","完成","已经","接口","面临","框架","具体","用","满足","叫做","只是","历史使命","还","、","通用","最新","不再","越来越","但","中","后续","翻新","它","电脑系统","动力","并","节点","链接","很多","体现","解密","重新","让","诸多","编译","是","来看","能够","性","经常","之初","python3","运行","标准化","以下几点","api","微控制器","实时","大","受制于","下要","管理","一下","时候","colcon","颠覆性","分布","管理器","工程","工具","我们","一旦","布式","内","全新","mcu","所有","搭载","不会","变化","一个","会","考虑","策略","阶段","虽然","产品化","导致","二种","强","操作系统","代码","后","走向","开发","这","越来","为了","安全"," ","相比","角色","消费市场","安全性","通信","实时性","有","过去","他们","肯定","装修","经验","这个","受制","和","手机","建筑","相对","网络","自动","尤其","rosbuild","课程","变革","以下","到","几点","对","除了","控制器","说明","稳定","也","需求","windows","类似","细节","编译器","分解","原本","定性","复杂","都","rtos","巨大","优化","语言","研发","ament","？","amr","毛坯","个体","如何","这些","c++","下","场景","无论","挑战","出现","那","具备","基本","系统","信号","全","为","跨平台","比","较","很大","大家","强壮","行人","不好","前方","时代","不能","工作","数据","各样","一定","）","课时","测试","独立","使命","环境","算力","运动","把","第二","适合","差异","编译系统","新版","给","完整","运动学","python","远比","使用","成功","最佳","黑客","标准","可靠","全部","连接","盖","设计","选择","同时","任何","毛坯房","两个","能","所以","千差万别","之间","更加","解算","项目管理","可能","编写","自己","加密","（","重来","不是","格局","实现","真正","借助","dds","用于","但是","需要","推倒重来","方案","或者","macos","产品","行为","比如","打成","协作","成功经验","：","100ms","周期","移植","汽车","体验","就是","不仅","方法","各种","尽力","继续","提供","架构","提","流程","更","理器","市场","于","要","ros2","怎样","保障","风险","网络连接","力学","生活","呢","调试","与","master","ros1","特性","推倒","颠覆","要求","等","电脑","针对","借鉴","可以","catkin","发现","保留","项目","发送","修改","还会","1ms","应用","在","怀揣","机器","驾驶","好","wifi","操作","纠结","了","多","做到","一种","长远","就","房子","方便","，","出错","linux","性能","第二种","层面","动力学","机制","以及","ros","第一","面对","第一个","入侵","之上","得","完整性","大量","通用性","平台","分布式","开发者","甚至","最终","宕机","基本保障","一款","没有","直接","不","各种各样","系统工程","控制","上"],"title":"全新的ROS2","title_tokens":["全新","ros2","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2-vs-ros1","text":"","text_tokens":[],"title":"ROS2 vs ROS1","title_tokens":["vs"," ","ros1","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_1","text":"在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。","text_tokens":["共享","打交道","进程","提供","变化","乱麻","通信接口","一个","架构","的","会","理器","数据","一团乱","简单","建立","共享内存","客户","交道","操作系统","明显","只有","接收","discovery","ros2","从而","开发","不过","主要","这","频繁","走","客户端","张图"," ","开始","角色","master","ros1","把","这样","印象","通信","成","。","写","有","安装","肯定","理解","进行","可以","另外","重要","通过","发现","这个","标准","不太","和","驱动","连接","右侧","可选","接口","更换","框架","ceo","应用","注意","在","udp","左侧","封装","应该","中间层","信息","公司","间层","学习","更加","协议","好","层","基于","一套","、","操作","了","方式","接触","选项","过","但","中","后续","它","稳定","而","也","而已","大致","节点","并","再","是从","windows","有且","就","底层","类似","tcp","很多","，","雷达","名字","请","中间","里","让","深入","找到","依赖","一团","整体","dds","是","应用层","看","复杂","linux","都","rtos","听","哪些","了解","需要","不难理解","简单明了","不难","这些","机制","指挥","ros","调用","macos","一团乱麻","通信协议","比如","那","发布","自","系统","下边","可选项","得","大量","图像","管理","程序","时候","如果","彼此","将","库会","变得","两者","管理器","最","大家","一样","先","我们","就是","突然","消失","内","方法","只不过","至关","对比","不","所有","至关重要","完善","上","—","会成","内存"],"title":"系统架构","title_tokens":["架构","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#dds","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。","text_tokens":["提供","变化","物","一个","的","更","会","数据","问题","简单","发成","社区","适配","于","不同","适用","要","代码","指定","ros2","过来","不用","改","例子","加入","总之","不过","开发","机器人","这","频繁","按照","其实","每个","为了","属性","厂商"," ","软件","rmw","产品开发","举","版本","相比","master","ros1","把","成本","这样","5g","国际标准","交付","通信","。","给","写","等","安装","当然","肯定","无法","/","fastrtps","可以","灵活","熟悉","一家","部署","广泛应用","部分","标准","这个","然后","三个","接入","一行","选择","设计","用户","接口","更换","应用","用","在","udp","应该","满足","机器","放在","所以","国际","更加","协议","好","完","减少","功能","基于","一些","多个","厂家","、","纠结","了","丰富","多","除了","丢","opensplice","解决","一种","高","切换","听说","中","常","加密","软件系统","只要","稳定","也","不是","符合","之外","并","自家","需求","再","就","不爽","轻松","底层","开源","复杂度","tcp","类似","实现","，","对于","来讲","商业","是否","重新","复用","让","最大","广泛","精力","middleware","省略","dds","是","复杂","带来","性能","都","延迟","优化","？","其他","层面","能够","率","每","如何","这些","交给","ros","场景","产品","通信协议","比如","某","开发成本","时","简称","基本","唯一","系统","做","目标","为","得","另","配置","移植","程序","如果","还有","收","联网","最","一样","先","诟病","我们","就是","这里","么","定义","发","该","各种","不","提高","想要","专注"],"title":"DDS通信","title_tokens":["dds","通信"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_2","text":"ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。","text_tokens":["。","了","有","方式","以及","ros","百万","小伙","几百","过","中","的","二个","迁移","熟悉","会","意义","部分","使用","也","一致","一一","保留","依然","非常","和","并","本","其中","如果","尽量","从","几乎","已经","开发者","ros2","就","很多","，","开发方式","讲解","不用","应用","开发","概念","含义","广泛","在","大家","全球","小伙伴","各位","应该","几百万","这里","存在","我们"," ","没有","伙伴","陌生","方法","学习","担心","不","ros1","第二","课程","便于","第二个","这些","到"],"title":"核心概念","title_tokens":["核心","概念"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_3","text":"再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。","text_tokens":["之后","编程","一步","一个","部头","总体而言","的","更","会","可读","同样","可读性","ros2","教程","不过","机器人","开发","这","暂且","图片","用到"," ","软件","来","企业","版本","ros1","可移植性","特性","。","稍安","写","搬","一本","对象","面向对象","移植性","发现","项目","和","接近","具体","用","在","角度","机器","两个","软件开发","学习","课程","一些","操作","难度","方式","多","一页","面向","中","后续","学","真实","总体","也","大部","看看","不要","再","就","从","切记","来讲","实现","，","可移植","编码","当","是","道坎","语言","确实","如何","一边","大部头","带领","发布","更接","具备","过程","所示","编程语言","移植","如","程序","发布者","大家","我们","方法","而言","更好","提高","迈过","勿躁"],"title":"编码方式","title_tokens":["编码","编码方式","方式"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_4","text":"最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随课程，你就会慢慢理解这些特性。","text_tokens":["上升","变化","编程","一个","的","表示","更","会","现有","独立","ros2","教程","开发","即可","相关","揭秘","慢慢"," ","run","master","ros1","把","初次","印象","特性","通信","。","干掉","最为","有","换成","主","理解","和","选择","启动","相对","概念","集成","在","rostopic","啦","陆续","以上","命令","除此之外","好","课程","最后","功能","没","对","了","难度","一种","后续","中","大幅","上手","也","大致","节点","之外","再","你","就","，","除此","大幅度","dds","是","都","核心","命令行","话题","每","这些","下","总结","ros","比如","某","跟随","分散","做","幅度","：","多功能","常用","如果","工具","大家","rosrun","我们","就是","topic","对比","而言","所有","控制","—"],"title":"命令行","title_tokens":["命令行","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/","text":"ROS2安装方法 本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。 Linux系统简介 时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。 Ubuntu系统简介 我们后续课程使用到的Linux发行版就是ubuntu系统。 Ubuntu诞生于2004年10月份，每六个月发布一个新版本，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。 Ubuntu虚拟机安装 虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下： 1. 下载系统镜像 下载链接： https://ubuntu.com/download/desktop 2. 在虚拟机中创建系统 3. 设置虚拟机硬盘大小 4. 设置Ubuntu镜像路径 5. 启动虚拟机 6. 设置用户名和密码 7. 等待系统安装 8. 完成安装 Ubuntu系统安装好后，大家可以先随意使用熟悉一下。 ROS2系统安装 接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下： 1. 设置编码 $ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8 2. 添加源 $ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844 3. 安装ROS2 $ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop 4. 设置环境变量 $ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。 ROS2示例测试 为了验证ROS2安装成功，我们可以通过以下示例进行测试。 示例一：命令行示例 先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。 示例二：小海龟仿真示例 再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。 附：虚拟机镜像 为了方便大家入门学习，我们也提供了预装好ROS2软件和教程代码的虚拟机镜像，有需要的小伙伴可以通过以下链接下载： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["量","传播","实力","2004","的","个","个人","问题","2","自行","订阅","未来","效果","影响","不同","先要","讲解","乐于","说干就干","迅猛","机器人","1","echo","hello","变量","资料","软件","开始","随意","来","务器","pro","维护","这样","智能","附","原有","。","最为","兼容","nodes","18","出于","进行","此时","熟悉","curl","升级","技术实力","py","发行版","变动","5","“","完成","界面","浏览","密码","已经","fedora","upgrade","概念","内核","光大","叫做","之内","命令","还","desktop","us","bash","应用软件","、","通用","终端","(","connect","可视","setup","多用","越来越","伴随","中","但","后续","其","key","dpkg","第一句","依然","等待","并","之外","再","节点","locale","链接","准确","商业","很多","试一试","请","重新","让","除此","新","编码","好者","org","--","是","反馈","虚拟机","核心","数字","回到","share","centos","命令行","每","月份","添加","运行","opt","好后","发布","中将","入门","过程","唯一","大","管理","一下","时候","将","技术","占据","”","联网","何人","lang","准备","sudo","by","先","每年","failed","我们","这里","一石激起千层浪","之前","诞生","该","计算机","想要","至此","原理","上下左右","镜像","绑定","keyring","有限","强大","tee","爱好者","一个","会","每隔","普通","考虑","林纳斯","虽然","download","长期","千层","小海","码","下来","操作系统","代码","适用","$","命名","后","redhat","年","开发","这","ubuntu","创建","一句","出","越来","为了"," ","企业",":","\"","raw","成熟","evaluation","字符","源","上层","turtlesim","d","通信","蕴藏","奥义","精神","有","提交","安装","小伙","示例","另外","重要","时间","通过","这个","可视化","和","摩拳擦掌","其中","尚","动手做","任何人","按键","world","vmware","print","小海龟","网络","外衣","大小","并用","啦","比较","软件开发","保证","本相","多任务","建议","路径","真器","http","六个","修复","课程","功能","已有","update","一些","正常","以下","吸引","发挥","到","领域","对","擦掌","除了","6","仿真器","服务器","顺序","其后","[","说明","为例","稳定","也","发行","下载","products","一","打包","并且","windows","22","底层","s","原本","开放","依赖","null","验证","都","二句","？","了解","构建","&&","如何","architecture","下","exc6","archive","环境变","学生","蓝色","all","激发","场景","bashrc","signed","各个","无论","算机","出现","teleop","时","gnupg","基本","系统","pan","传输","发展","程序","发布者","应用程序","紧随","二","最","大家","一样","者","en","快","编辑","持续","爱好","文件","最好","keyrings","10","之后","工作","他","表示","unix","gpg","数据","一位","快速","各样","一定","背景","1991","www","测试","关注","教程","户名","小伙伴","还是","1dvxugmhxlxnsnfdezuxw0g","千层浪","环境","run","操作方法","运动","版本","|","介绍","月","把","字符串","第二","海龟","humble","适合","2022","成","ssl","给","大学生","多人","之一","使用","当中","成功","上下","基本相同","usr","8","talker","标准","不太","os","guyuehome","设计","选择","3","同时","用户","启动","任何","to","参考","或","应该","~","两个","公司","所以","环境变量","叫","起来","学习","一次","六个月","04","通讯","第二个","=","一套","可能","dev","大学","自己","模式","什么","接触","html","设置","codename","o","浏览器","放到","_","apt","版","实践","现在","你","更新","来讲","实现","名字","是否","优先","以","release","最大","动手","采用","baidu","listener","dds","但是","可","接下来","node","需要","接下","加上","com","或者","免费","macos","lc","两年","看出","比如","很","指标","：","指令","常用","步骤","workstation","cpp","源代码","移植","一应俱全","只","分别","位置","后缀","地址","就是","一应","turtle","不仅","方法","各种","情况","deb","packages","-",">","代表","吧","行列","提供","前先要","]","更","arch","经典","看到","于","ros2","第二句","目前","加入","主要","热情","呢","分享","人工智能","locales","关于","成为","export","等等","计算","与","一直","master","bug","这套","等","电脑","ubuntu20.04","/","可以","多用户","衡量","互联网","发扬光大","ubuntu22.04","rosdistro","本","应用","sources","键盘","在","编号","第一次","服务","提取","机器","lts","伙伴","硬件","install","如下","除此之外","合适","好","任务","多个","操作","了","多","报错","7","人工","一种","相同","点击","utf","main","lsb","用户名","试试",".","如遇","就","从","开源","真理","方便","，","华丽","硬盘","紧随其后","芬兰","4","简介","编辑器","一起","linux","性能","俱全","收费","虚拟","其他","其他软件","个人爱好","绝对","互联",")","demo","ros","第一","检验","gen","二个","激起","决定","发扬","第一个","一般","操作界面","做","之上","大量","支持","37844","如果","热爱","开发者","唯一标准","甚至","仿真","无论是","https","githubusercontent","没有","预装","节","左右","直接","探索","会加","不","各种各样","因为","source","etc","提到","控制","上","—","list"],"title":"ROS2安装方法","title_tokens":["安装","方法","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2","text":"本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。","text_tokens":["操作","。","安装","一种","前先要","的","重要","系统","本","一下","操作系统","底层","先要","ros2","，","最","一起","我们","linux","节","了解","—"],"title":"ROS2安装方法","title_tokens":["安装","方法","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#linux","text":"时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。","text_tokens":["量","传播","行列","绑定","实力","最好","镜像","之后","有限","强大","爱好者","一个","他","的","更","unix","个人","会","林纳斯","问题","一位","快速","虽然","各样","千层","1991","看到","操作系统","代码","不同","适用","命名","ros2","乐于","后","教程","讲解","redhat","目前","年","说干就干","加入","开发","迅猛","热情","这","主要","呢","ubuntu","分享","另外","越来","千层浪","成为"," ","软件","企业","等等","务器","操作方法","版本","计算","与","把","维护","成熟","适合","bug","成","这套","原有","。","给","精神","有","等","兼容","提交","大学生","安装","多人","出于","此时","可以","之一","熟悉","使用","多用户","重要","当中","时间","通过","衡量","互联网","技术实力","基本相同","发行版","标准","发扬光大","这个","可视化","不太","和","本","其中","尚","动手做","任何人","界面","设计","用户","已经","fedora","任何","应用","概念","参考","外衣","在","内核","并用","或","光大","应该","叫做","服务","公司","硬件","所以","本相","多任务","叫","起来","还","修复","功能","已有","任务","一些","吸引","应用软件","到","一套","、","操作","通用","了","对","大学","多","自己","模式","什么","可视","服务器","多用","越来越","伴随","中","但","相同","其","放到","稳定","也","发行","实践","现在","并","打包","并且","windows","就","底层","开源","准确","真理","来讲","实现","很多","，","名字","原本","商业","重新","华丽","芬兰","动手","开放","依赖","好者","一起","linux","是","反馈","都","性能","收费","核心","回到","？","其他","需要","centos","加上","每","个人爱好","下","互联","学生","激发","或者","免费","macos","检验","场景","算机","比如","出现","激起","决定","发扬","指标","基本","过程","唯一","系统","做","大","之上","操作界面","一般","常用","源代码","大量","管理","发展","程序","支持","技术","热爱","开发者","唯一标准","应用程序","联网","何人","甚至","最","一样","先","每年","我们","没有","就是","一石激起千层浪","之前","不仅","方法","各种","情况","爱好","计算机","不","各种各样","提到","原理","上","—"],"title":"Linux系统简介","title_tokens":["linux","简介","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu","text":"我们后续课程使用到的Linux发行版就是ubuntu系统。 Ubuntu诞生于2004年10月份，每六个月发布一个新版本，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。","text_tokens":["10","之后","2004","一个","的","表示","更","个","会","每隔","普通","考虑","自行","一定","长期","未来","效果","影响","于","不同","关注","教程","讲解","年","开发","机器人","主要","ubuntu","人工智能","还是","出","环境","为了","资料"," ","软件","版本","介绍","月","一直","维护","这样","智能","上层","2022","。","等","有","电脑","安装","ubuntu20.04","18","进行","可以","使用","熟悉","升级","重要","通过","互联网","发行版","变动","5","ubuntu22.04","摩拳擦掌","本","其中","浏览","选择","用户","已经","应用","网络","参考","在","编号","或","比较","第一次","机器","lts","之内","软件开发","所以","保证","硬件","建议","除此之外","合适","还","六个","六个月","一次","04","好","课程","通讯","已有","发挥","领域","到","可能","、","了","多","自己","除了","人工","擦掌","接触","顺序","后续","其后","中","浏览器","为例","稳定","也","发行","依然","版","之外","你","再","windows","22","更新","就","从","很多","，","试一试","优先","以","让","硬盘","除此","新","紧随其后","4","最大","编辑器","linux","是","虚拟机","都","俱全","但是","性能","数字","虚拟","其他","每","如何","月份","绝对","互联","第一","免费","两年","各个","看出","无论","比如","出现","很","发布","时","系统","常用","支持","移植","一下","一应俱全","时候","如果","占据","开发者","紧随","联网","只","无论是","大家","位置","后缀","我们","就是","这里","一应","之前","快","诞生","直接","编辑","方法","各种","会加","持续","文件","想要","因为","上","代表"],"title":"Ubuntu系统简介","title_tokens":["简介","ubuntu","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu_1","text":"虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下：","text_tokens":["操作","。","运行","安装","html","一个","工作","/","的","可以","相同","另外","自行","系统","之上","：","下载","products","和","步骤","并",".","workstation","www","完成","就","同时","vmware","后","，","请","准备","让","采用","在","大家","啦","https","地址","环境","我们","这里","是","叫做"," ","软件","虚拟机","开始",":","虚拟","如下","pro","其他","构建","-","evaluation","已有","多个","其他软件","com"],"title":"Ubuntu虚拟机安装","title_tokens":["虚拟","ubuntu","虚拟机","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1","text":"下载链接： https://ubuntu.com/download/desktop","text_tokens":[":","download","：","desktop","下载","ubuntu",".","https","链接","/"," ","com"],"title":"1. 下载系统镜像","title_tokens":["镜像","系统","下载",".","1"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2","text":"","text_tokens":[],"title":"2. 在虚拟机中创建系统","title_tokens":["虚拟","系统","创建","在",".","中"," ","虚拟机","2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3","text":"","text_tokens":[],"title":"3. 设置虚拟机硬盘大小","title_tokens":["虚拟","硬盘","大小","设置",".","3"," ","虚拟机"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4-ubuntu","text":"","text_tokens":[],"title":"4. 设置Ubuntu镜像路径","title_tokens":["镜像","路径","ubuntu","4","设置","."," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#5","text":"","text_tokens":[],"title":"5. 启动虚拟机","title_tokens":["虚拟","5","."," ","启动","虚拟机"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#6","text":"","text_tokens":[],"title":"6. 设置用户名和密码","title_tokens":["6","用户名","户名","设置",".","和","密码"," ","用户"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#7","text":"","text_tokens":[],"title":"7. 等待系统安装","title_tokens":["系统","7","等待","安装","."," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#8","text":"Ubuntu系统安装好后，大家可以先随意使用熟悉一下。","text_tokens":["。","，","系统","安装","ubuntu","大家","好后","先","一下","可以","熟悉","使用","随意"],"title":"8. 完成安装","title_tokens":["8","安装",".","完成"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_1","text":"接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下：","text_tokens":["。","了","安装","中","可以","系统","：","步骤","下来","就","ros2","，","ubuntu","我们","如下","接下来","把","接下","到"],"title":"ROS2系统安装","title_tokens":["安装","ros2","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1_1","text":"$ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8","text_tokens":["all","lc","gen","8","_","utf","apt",".","locale","$","lang","sudo","locales","export"," ","en","install","-","update","&&","us","="],"title":"1. 设置编码","title_tokens":["设置","1","编码","."," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2_1","text":"$ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844","text_tokens":["keyring","keyrings","tee","]","arch","gpg","www","$","ros2","ubuntu","echo"," ",":","|","master","\"","raw","d","ssl","/","curl","usr","os","guyuehome","rosdistro","“","print","to","sources","参考","install","http","update","=","dev","(","connect","报错","codename","[","o","key","dpkg","_","apt","main","lsb",".","如遇","，","release","null","org","--","可","share","&&","com","architecture",")","archive","ros","signed","gnupg","37844","”","sudo","by","https","githubusercontent","failed","deb","packages","-","source","etc","list",">"],"title":"2. 添加源","title_tokens":["添加",".","源"," ","2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3-ros2","text":"$ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop","text_tokens":["upgrade","install","sudo","desktop","apt","ros","-","humble","update","$"," "],"title":"3. 安装ROS2","title_tokens":["安装",".","3"," ","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4","text":"$ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。","text_tokens":["。","了","setup","ros","安装","opt","bashrc","/","中","系统",".","$","就","已经","ros2","，","在","echo","~"," ","\"","至此","好","humble","source","bash",">"],"title":"4. 设置环境变量","title_tokens":["环境变","4","设置",".","变量","环境"," ","环境变量"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_2","text":"为了验证ROS2安装成功，我们可以通过以下示例进行测试。","text_tokens":["。","，","示例","安装","以下","进行","测试","我们","为了","可以","成功","验证","ros2","通过"],"title":"ROS2示例测试","title_tokens":["测试","ros2","示例"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_1","text":"先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。","text_tokens":["。","吧","终端","最为","demo","nodes","第一","一个","中","的","二个","发布","重要","数据","py","通过","说明","问题","第一个","订阅","系统","_","：","talker","传输","试试","节点","cpp","“","$","如果","world","底层","第二个","启动","ros2","发布者","”","，","是否","在","先","listener","hello","没有","dds"," ","者","两个","来","run","命令","字符串","第二","字符","正常","以下","通信"],"title":"示例一：命令行示例","title_tokens":["命令","：","一","命令行","示例"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_2","text":"再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["。","终端","运行","奥义","蓝色","仿真器","ros","第一","安装","一个","控制","中","的","可以","示例","上下","teleop","后续","key","中将","成功","点击","第一句","_","：","指令","小海","背景","经典","节点","再","“","$","将","按键","就","启动","ros2","第二句","”","试一试","，","教程","小海龟","仿真","键盘","分别","一句","在","啦","关于","我们","两个"," ","turtle","来","run","左右","运动","如下","真器","二句","该","探索","node","持续","海龟","第二","至此","turtlesim","上","—","上下左右","蕴藏"],"title":"示例二：小海龟仿真示例","title_tokens":["二","小海龟","仿真","：","小海","海龟","示例"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_3","text":"为了方便大家入门学习，我们也提供了预装好ROS2软件和教程代码的虚拟机镜像，有需要的小伙伴可以通过以下链接下载： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["镜像","了","exc6","有","提供","小伙","/","的","可以","入门","通过","也","pan","：","下载","和",".","码","链接","代码","ros2","教程","方便","，","s","baidu","小伙伴","大家","https","1dvxugmhxlxnsnfdezuxw0g","我们","为了","预装","提取"," ","伙伴","软件","虚拟机",":","虚拟","学习","好","需要","以下","com"],"title":"附：虚拟机镜像","title_tokens":["镜像","虚拟","：","附","虚拟机"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/","text":"ROS2命令行操作 在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。 Linux中的命令行 类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。 启动方式 回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。 常用命令操作 我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。 ROS2中的命令行 ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。 运行节点程序 想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看节点信息 当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim 查看话题信息 当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose 发布话题消息 想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 发送服务请求 一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\" 发送动作目标 想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\" 录制控制命令 系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["record","呈现","件夹","本节","一步","的","问题","2","详细信息","感兴趣","文件夹","未来","写字","一二十","不同","列表","由","魅力","不用","至于","rosbag2","想","名称","慢慢","echo","1","用到","死记硬背","terminal","结合","软件","来","体操","逛来逛去","这样","拷贝","进一步","令人发指","原有","。","帮上","详细","专门","…","进行","此时","灵活","熟悉","twist","必不可少","11","逛去","去","t","0","“","完成","已经","pub","具体","完全","srv","用","概念","0.2","款式","满足","叫做","只是","以上","命令","还","有点","买","里边","多种","spawn","删除","、","终端","可视","记忆","17","但","中","看中","key","地","它","并","节点","再","链接","令人","右键","呀","很多","试一试","段","让","--","炫酷","是","笔记本","多到","感兴","核心","便捷","回到","pwd","权限","哪些","service","能够","命令行","确实","每","十个","随身带","theta","运行","播放","info","案例","约束","发布","硬","内容","不可","目","管理","一下","时候","将","规则","”","请求","找","sudo","工具","先","我们","复现","这里","既","之前","该","所有","目标目录","想要","执行","turtle1","材料","子目","40","gedit","cp","一个","快捷键","会","虽然","显示","觉得","当前","小海","下来","$","推出","后","搜索","打开","不过","即可","这","创建","发指","出","这种","查","rotateabsolute"," ",":","name","\"","rosbag","字符","turtlesim","geometry","有","片段","异常","某个","重要","通过","这个","2.0","可视化","和","呈现出","若","实验室","小海龟","啦","1.8","系列","哪","商家","既定","路径","真器","改名","功能","一些","精心设计","感受","正常","到","}","对","仿真器","选项","[","随着","为例","一点","复制到","不到","也","一","看看","需求","轻松","类似","新建","笔记本电脑","及","实验","都","定制","？","了解","'","数量","知道","msgs","如何","这些","下","alt","场景","小","体会","无论","teleop","cmd","系统","这项","为","具体操作","程序",",","输入","一二","大家","一样","db3","编辑","至今","想象","背","absolute","文件","子目录","看不到","服装","做好","随身","很少","目的","cd","子","二十个","工作","表示","数据","一定","现有","背景","z","0.0","还是","精心","绝对路径","现出","run","二十","linear","把","海龟","bag","初次","y","2022","成","使用","难以","黑客","列出","不太","一系列","参数","布料","主目录","设计","选择","兴趣","3","启动","用户","均","及其","死记","科幻","集成","拷贝到","或","角度","信息","所以","起来","学习","逛来","不一","一次","+","04","rate","移入","可能","方式","自己","什么","接触","快捷","所在","不是","一系","ctrl","一二十个","_","大致","你","来讲","实现","对于","原因","以","vel","容易","但是","node","接下来","需要","接下","加上","笔记","send","或者","改变","调用","带领","并不一定","比如","很","rm","录制","：","指令","常用","尝试","死机","另","鼠标","体验","适应","标目","某段","就是","topic","turtle","看似","各种","受","从来","动作","-","太","动",">","而是","继续","提供","复制","]","更","后边","msg","<","系统管理员","度高","看到","总有","于","保持","指定","要","ros2","主要","呢","不变","改了","调试","与","一直","x","此","管理员","goal","等","电脑","窗口","/","可以","mkdir","孤单","mv","忙","保留","则","每次","call","根据","又","本","发送","消息","play","感觉","rotate","被","应用","衣服","ls","键盘","在","第一次","什么样","服务","自主","如下","好","商场","查看","多个","操作","总","了","35","多","{","解决","一种","源文件","相同","转","枯燥",".","产生","就","一只","，","为什么","一件","怎么","手","action","深入","跟","编辑器","一起","linux","电影","科幻电影","其他","常用命令","例如","话题","统管","绝对","机制","一边","ros","第一","某","第一个","语法","当前工作","目标","如果","麻烦","还有","文件名称","pose","仿真","目录","angular","干什么","深色","没有","文件名","直接","其上","不","因为","控制","上","—","list"],"title":"ROS2命令行操作","title_tokens":["操作","命令","命令行","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2","text":"在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。","text_tokens":["。","了","运行","多","第一","接触","一种","案例","本节","一步","带领","中","的","更","随着","使用","会","可以","重要","不太","一定","小海","时候","将","如果","ros2","魅力","，","小海龟","适应","工具","在","大家","深入","第一次","我们"," ","之前","调试","命令","学习","一次","有点","海龟","命令行","感受","—","进一步","到","可能"],"title":"ROS2命令行操作","title_tokens":["操作","命令","命令行","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#linux","text":"类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。","text_tokens":["呈现","一个","的","会","问题","虽然","一定","现有","度高","看到","总有","于","推出","呢","还是","这种","精心","结合"," ","现出","软件","来","一直","逛来逛去","这样","成","。","等","片段","异常","此时","可以","灵活","使用","必不可少","逛去","保留","去","每次","可视化","和","根据","布料","呈现出","设计","已经","被","完全","衣服","科幻","在","款式","满足","什么样","服务","自主","哪","商家","既定","命令","逛来","起来","不一","买","商场","里边","功能","一些","精心设计","、","操作","了","方式","多","自己","什么","可视","解决","一种","但","中","看中","一点","不是","并","需求","你","呀","就","类似","来讲","对于","，","为什么","一件","很多","手","炫酷","linux","是","电影","容易","都","但是","科幻电影","定制","便捷","？","其他","能够","命令行","这些","ros","场景","小","约束","无论","比如","某","并不一定","为","不可","时候","麻烦","规则","工具","大家","一样","先","我们","没有","就是","这里","看似","各种","其上","至今","想象","不","所有","受","想要","材料","服装","做好"],"title":"Linux中的命令行","title_tokens":["命令","命令行","中","的","linux"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_1","text":"回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。","text_tokens":["随身","很少","二十个","快捷键","的","会","一定","觉得","写字","一二十","背景","看到","列表","后","魅力","不用","搜索","至于","打开","不过","即可","这","呢","发指","慢慢","用到","terminal"," ","软件","来","二十","字符","初次","令人发指","。","专门","有","电脑","窗口","可以","使用","熟悉","通过","难以","黑客","这个","一系列","t","又","本","参数","选择","启动","应用","用","科幻","在","叫做","系列","所以","命令","+","功能","多种","正常","到","终端","操作","对","方式","记忆","什么","快捷","中","随着","所在","不到","也","枯燥","不是","一系","ctrl","一二十个","并","令人","右键","就","，","为什么","原因","怎么","手","笔记本电脑","及","是","电影","笔记本","多到","都","但是","科幻电影","回到","其他","需要","命令行","确实","数量","十个","随身带","笔记","alt","体会","很","硬","：","指令","这项","常用","死机","一下","时候","鼠标","输入","一二","工具","大家","深色","我们","就是","既","背","从来","因为","上","看不到","而是"],"title":"启动方式","title_tokens":["启动","方式"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_2","text":"我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。","text_tokens":["子目","目的","cd","gedit","cp","件夹","]","复制","工作","一个","的","会","<","显示","文件夹","当前","未来","系统管理员","保持","指定","列表","由","打开","名称","创建","不变","出","绝对路径","查","死记硬背"," ","来","把","此","拷贝","管理员","原有","。","某个","…","/","可以","熟悉","mkdir","列出","mv","则","“","主目录","若","用户","感觉","均","及其","用","死记","ls","拷贝到","或","只是","路径","命令","改名","功能","移入","多个","删除","了","多","选项","源文件","[","中","地","复制到","它","也","一","链接","就","对于","，","以","新建","及","编辑器","linux","pwd","回到","权限","常用命令","需要","这些","统管","绝对","下","一边","或者","改变","rm","系统","语法","：","当前工作","目标","指令","为","常用","目","另","管理","一下","将","”","体验","找","文件名称","sudo","目录","大家","标目","先","我们","没有","文件名","编辑","该","不","所有","目标目录","文件","执行","子目录",">"],"title":"常用命令操作","title_tokens":["操作","常用","命令","常用命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2_1","text":"ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。","text_tokens":["操作","总","对","机制","继续","。","下","有","目的","什么","第一","一个","中","的","相同","后边","表示","比如","可以","为例","第一个","内容","也","一系","一系列","小海","大致","节点","具体操作","参数","下来","不同","就","ros2","，","具体","以","小海龟","不过","仿真","主要","概念","集成","在","干什么","跟","我们","一起","linux","topic","系列"," ","都","核心","命令","还","与","node","接下来","所有","体操","海龟","了解","接下","功能","命令行","话题","感受"],"title":"ROS2中的命令行","title_tokens":["命令","命令行","的","中","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_3","text":"想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["操作","运行","某个","中","进行","可以","使用","teleop","key","_","：","turtlesim","和","节点","$","要","ros2","，","仿真","键盘","我们"," ","turtle","run","命令","node","海龟","想要","例如","控制"],"title":"运行节点程序","title_tokens":["运行","程序","节点"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_4","text":"当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim","text_tokens":["对","运行","有","详细","info","ros","子","一个","中","的","可以","某","/","它","系统","详细信息","：","感兴趣","当前","节点","$","如果","兴趣","就","ros2","，","呢","啦"," ","信息","感兴","来","都","命令","node","哪些","？","这样","加上","查看","知道","turtlesim","list"],"title":"查看节点信息","title_tokens":["信息","查看","节点"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_5","text":"当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose","text_tokens":["有","子","一个","中","的","某","/","使用","数据","系统","：","当前","看到","$","消息","ros2","试一试","，","pose","即可","想","呢","echo","topic"," ","都","如下","命令","还","加上","话题","查看","turtle1","list"],"title":"查看话题信息","title_tokens":["信息","查看","话题"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_6","text":"想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":["}","geometry","{","/","可以","msg","发布","twist","通过","cmd","_","：","指令","2.0","$",",","ros2","pub","，","z","vel","angular","0.0","1","1.8","--","我们","topic"," ",":","直接","起来","命令","还","linear","\"","海龟","想要","rate","x","y","命令行","话题","turtle1","控制","msgs","动"],"title":"发布话题消息","title_tokens":["发布","话题","消息"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_7","text":"一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\"","text_tokens":["theta","}","{","仿真器","提供","调用","一个","/","孤单","2","：","turtlesim","call","产生","再","$","一只",",","ros2","试一试","，","srv","仿真","0.2","我们","服务"," ","来",":","改了","真器","还","name","\"","海龟","service","x","spawn","y","'","太","—"],"title":"发送服务请求","title_tokens":["请求","服务","发送"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_8","text":"想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\"","text_tokens":["theta","帮上","send","仿真器","提供","一个","中","的","比如","可以","/","通过","转","goal","这个","忙","目标","：","_","发送","完成","$","3","指定","ros2","rotate","，","具体","仿真","让","action","rotateabsolute","角度"," ",":","真器","命令","absolute","\"","海龟","想要","动作","这样","命令行","turtle1","turtlesim","到"],"title":"发送动作目标","title_tokens":["目标","动作","发送"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_9","text":"系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["。","record","运行","有","播放","35","40","自己","子","17","一个","中","的","/","可以","很","数据","cmd","11","录制","系统","_","：","看看","0","常用","尝试",".","再","下来","$","play","如果","轻松","ros2","实验室","很多","，","实现","段","rosbag2","还有","用","vel","这","大家","啦","某段","还是","db3","我们","复现","就是"," ","实验","以上","命令","回到","与","？","rosbag","把","想要","好","bag","04","功能","-","turtle1","2022","每","如何"],"title":"录制控制命令","title_tokens":["录制","命令","控制"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","text":"ROS2开发环境配置 ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。 Git git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git 下载教程源码 《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。 VSCode Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download VSCode插件配置 为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。 中文语言包 Python插件 C++插件 CMake插件 vscode-icons ROS插件 Msg Language Support Visual Studio IntelliCode URDF Markdown All in One VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["》","中文","提供","之后","强大","件夹","一个","的","更","msg","语言包","会","个人","2015","简单","快速","常听到","download","文件夹","人","看到","两款","$","代码","不同","操作系统","ros2","教程","推出","搜索","利器","中会","年","开发","机器人","这","呢","gitee","成千上万","记事","出","环境","为了","成为"," ","讲","软件","因",":","等等","调试","版本","与","这样","特性","bug","神兵","。","给","合并","有","提交","安装","肯定","变更","python","intellicode","进行","/","迅速","示例","可以","使用","另外","重要","广泛应用","离不开","一系列","每次","项目","和","驱动","贡献","听到","非常","一行","完成","guyuehome","管理工具","设计","浏览","而生","高效","具体","被","tutorials","应用","下载方式","用","冲突","不开","在","集成","in","自动","系列","这款","机器","以上","增加","所以","硬件","自带","记事本","install","visualstudio","插件","命令","studio","还","之间","visual","好","修复","官方网","课程","功能","之父","已有","查看","一些","多个","里边","略显","轻量","便于","编写","可能","、","终端","操作","了","丰富","方式","support","千上万","多","自己","人工","切换","但","国内","中","21","浏览器","后续","非常简单","推荐","language","也","_","一系","apt","下载","千万","并",".","windows","链接","成千","linus","就","开源","很多","，","码云","urdf","让","广泛","新","网站","编译","编辑器","linux","是","icons","复杂","都","理工","众多","语言","？","需要","如何","这些","com","开发工具","c++","《","以及","all","ros","code","macos","功能强大","喜欢","上万","几千","比如","vscode","审核","入门","git","哪里","管理软件","内容","做","系统","简称","：","作为","有些","几千万","大量","配置","管理","发展","源代码","支持","如果","判断","搭建","one","开发者","无限","扩展","准备","sudo","工具","只","最","大家","官方网站","一款","先","行","https","我们","这里","组件","微软","源码","直接","方法","编辑","github","clone","cmake","不","所有","markdown","文件","官方","网上","-","—","不会"],"title":"ROS2开发环境配置","title_tokens":["配置","ros2","环境","开发"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros2","text":"ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。","text_tokens":["。","给","提供","ros","肯定","的","示例","vscode","重要","git","推荐","—","做","离不开","和","大量","完成","配置","两款","代码","，","中会","准备","开发","机器人","工具","呢","不开","大家","先","编译","我们","环境","机器","源码","开发工具","？","需要","课程","查看","一些","如何","这些","编写","、"],"title":"ROS2开发环境配置","title_tokens":["配置","ros2","环境","开发"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#git","text":"git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git","text_tokens":["之后","一个","的","会","简单","常听到","人","看到","$","代码","不同","开发","这","gitee","成千上万"," ","因","软件","等等","版本","特性","bug","。","合并","有","提交","安装","肯定","变更","进行","迅速","可以","使用","广泛应用","每次","项目","驱动","听到","贡献","和","非常","一行","完成","管理工具","设计","而生","高效","具体","被","应用","冲突","在","自动","这款","增加","所以","硬件","install","命令","之间","修复","功能","之父","已有","多个","可能","终端","了","千上万","人工","切换","国内","中","非常简单","也","apt","千万","并","成千","linus","就","开源","，","码云","让","广泛","新","网站","linux","是","都","理工","众多","需要","这些","以及","上万","几千","比如","审核","git","哪里","管理软件","内容","系统","有些","几千万","发展","管理","判断","开发者","sudo","工具","大家","一款","行","我们","直接","方法","github","不","所有","—","不会"],"title":"Git","title_tokens":["git"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_1","text":"《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。","text_tokens":["。","《","》","方式","有","多","件夹","一个","21","的","/","中","更","会","浏览器","另外","vscode","入门","git","推荐","系统","_","：","文件夹","下载","guyuehome","和",".","$","代码","如果","浏览","就","ros2","很多","，","tutorials","用","下载方式","开发","集成","gitee","记事","https","环境","这里","是"," ","讲","复杂","自带","源码",":","记事本","还","clone","文件","好","这样","课程","里边","查看","略显","—","com"],"title":"下载教程源码","title_tokens":["下载","教程","源码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode","text":"Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download","text_tokens":["操作","。","丰富","强大","code","macos","功能强大","一个","但","/","的","可以","vscode","2015","快速","简称","系统","download","：","下载","项目","非常","和",".","源代码","支持","windows","链接","操作系统","代码","搭建","推出","，","扩展","利器","年","开发","在","官方网站","网站","https","编辑器","linux","是","组件"," ","成为","微软","visualstudio",":","编辑","studio","visual","官方","官方网","轻量","功能","com","神兵","、"],"title":"VSCode","title_tokens":["vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode_1","text":"为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。","text_tokens":["。","安装","后续","的","可以","vscode","一系","一系列","插件","ros2","无限","，","扩展","开发","我们","为了","系列","调试","还","与","功能","便于"],"title":"VSCode插件配置","title_tokens":["vscode","插件","配置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_2","text":"","text_tokens":[],"title":"中文语言包","title_tokens":["语言包","语言","中文"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#python","text":"","text_tokens":[],"title":"Python插件","title_tokens":["python","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#c","text":"","text_tokens":[],"title":"C++插件","title_tokens":["插件","c++"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#cmake","text":"","text_tokens":[],"title":"CMake插件","title_tokens":["cmake","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode-icons","text":"","text_tokens":[],"title":"vscode-icons","title_tokens":["vscode","icons","-"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros","text":"","text_tokens":[],"title":"ROS插件","title_tokens":["ros","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#msg-language-support","text":"","text_tokens":[],"title":"Msg Language Support","title_tokens":["support","language"," ","msg"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#visual-studio-intellicode","text":"","text_tokens":[],"title":"Visual Studio IntelliCode","title_tokens":[" ","visual","intellicode","studio"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#urdf","text":"","text_tokens":[],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#markdown-all-in-one","text":"VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["。","自己","喜欢","的","可以","vscode","个人","推荐","也","作为","插件","支持","配置","搜索","，","开发","只","最","在","大家","出","环境","以上","众多","网上"],"title":"Markdown All in One","title_tokens":["all","markdown","in","one"," "]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/","text":"DDS Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。 通信模型 DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。 DDS DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。 什么是DDS 好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是Data Distribution Service，也就是数据分发服务，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。 DDS在ROS2中的应用 DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。 质量服务策略QoS DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是Domain，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为数据提供者和接收者之间的合约。 具体会有哪些策略？比如这个列表中描述的DEADLINE策略，表示通信数据必须要在每次截止时间内完成一次通信，HISTORY策略，表示针对历史数据的一个缓存大小，RELIABILITY策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式。 还有这个DURABILITY，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。 案例一：在命令行中配置DDS 我们先来试一试在命令行中配置DDS的参数。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort $ ros2 topic info /chatter --verbose 案例二：DDS编程示例 接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。 运行效果 $ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub 发布者代码解析 learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , }, 订阅者代码解析 learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], }, 参考链接 DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们课上主要带领大家认识DDS，更多使用方法和相关内容，课程配套的教程中会有介绍，大家也可以参考这里的链接进行学习。 https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["同一个","服务质量","2004","一步","的","个人","组成","问题","广播","订阅","感兴趣","客户","历史","video","效果","影响","垂直","选用","明显","由","尽量","接口标准","列表","不同","不用","例子","机器人","想","欢迎","按照","echo","父类","1","hello","退出","rclpy","i","软件","像","来","务器","维护","讲到","这样","0.5","5g","之","进一步","上边","。","遥控器","implementations","最为","专门","兼容","主","双方","无法","进行","灵活","此时","最早","广泛应用","升级","不管","py","string","entry","作者","broker","派","“","几种","发送给","完成","保证数据","已经","接口","pub","高效","具体","框架","用","库","domain","满足","只是","当于","timer","命令","生态","像是","运转","有点","同一","黑入","点","便于","既然","1989","、","(","setup","而且","过","但","中","单独","它","第三种","地","美国","优势","那该","depth","from","等待","节点","并","初始化","输出","链接","第一种","商业","很多","试一试","复用","让","任","瓶颈","新","create","四大","middleware","当","org","--","编译","非常复杂","是","来看","感兴","核心","哪些","service","能够","性","callback","命令行","那个","每","about","python3","有人","qos","运行","授权","info","publishing","强调","案例","实时","helloworld","发布","入门","logger","过程","送给","内容","重大","配置","管理","一下","将","时候","技术","第四","effort","请求","分布","”","第四种","通信模型","chatter","成立","关系","先","行","主讲人","我们","这里","一旦","可信","布式","之前","内","articles","门","不感兴趣","旋转","而言","所有","init","预测","执行","红色","绑定","通道","变化","决策","一个","会","策略","建立","连接数","相当","导致","构图","无人","缓存","keep","兼容性","二种","下来","$","代码","接收","points","后","年","打开","不过","开发","def","这","中会","创建","处理","频繁","办法","相关","包含","这种","每个","为了"," ","企业",":","每条","循环","name","角色","\"","字符","集中处理","速度","上层","通信","有","过去","他们","异常","肯定","结构","提供者","默认","示例","向","另外","认识","重要","how","转移","时间","通过","一条","这个","和","驱动","小组","env","#","world","终于","网络","课","无论如何","宗旨","大小","啦","描述","自动","heard","哪","类型","交通","保证","先进","程度","边","课程","功能","一些","正常","处于","到","领域","没","数据通","}","shutdown","建模","对","\\","发生","bilibili","选项","服务器","听说","different","[","处","说明","为例","华为","也","尽可能","一","需求","并且","data","神经网","底层","配套","类似","s","技术标准","定时","航空","到底","publish","感知","复杂","都","优化","？","语言","刚才","'","知道","import","msgs","如何","这些","提示","下","组织","蓝色","它们","场景","吃","中间件","函数","大大","各个","无论","出现","那","时","历史数据","掉","guides","该用","none","基本","系统","传输","为","半天","意思","learning","程序","verbose",",","初始","发布者","定位","应用程序","帧","sub","二","通路","args","说了半天","由于","大家","一样","定义","者","en","history","omg","海军","质量","国防","文件","建设","不好","4g","类","收到","丢失","》","表示","关心","uml","这么","数据","全局","行业","快速","焕然一新","差别","vendors","一定","）","增长","大大提高","distribution","publisher","必须","我","www","交换","__","教程","分发","拿","corba","工业","高速","sysml","客户端","使命","还是","无用","环境","厂商","讲","rmw","%","run","第三","运动","版本","介绍","把","字符串","第二","publishernode","humble","成","给","回调","完整","subscription","理解","通常","python","价值","使用","usr","可信赖","qosprofile","8","黑客","列出","标准","spin","数以千计","原则","guyuehome","参数","图","流畅性","连接","设计","选择","兴趣","qosreliabilitypolicy","发生变化","用户","日志","to","参考","能源","所","或","截止","应该","信息","所以","self","延时","综合","学习","更加","之间","一次","强制","尽可","best","带","=","前边","一套","可能","编写","reliable","on","丰富","方式","自己","什么","模式","reliability","html","设置","点对点","21","deadline","加密","（","古月","主讲","真实","树莓","不是","_","回忆","现在","你","实现","冰山","真正","中间","以","处理速度","借助","找到","get","listener","全称","包","dds","进入","模块","但是","才能","可","接下来","node","working","需要","接下","效率","com","行为","对应","组成部分","控制","焕然","比如","某一","居","很","带领","bin","体","下边","指令","：","常用","尝试","神经网络","高通","周期","图像","整个","忽略","适应","只","位置","地址","火锅","来到","就是","存在","topic","啥意思","架构图","方法","各种","至关","情况","关闭","动作","尽力","-","至关重要","docs","提供","在于","定时器","编程","一角","class","]","神经","架构","提","coding","更","msg","空间","with","bv12z4y167w2","std","单位","于","只有","要","可见","指定","ros2","传送","许多","保障","加入","主要","呢","靠","中心","不变","其实","profile","成为","举","与","一新","四种","ros1","的话","占用","遥控","qoshistorypolicy","特性","太多","等","电脑","针对","要求","!","航拍","当然","接收者","对象","/","可以","统一","部分","每次","非常","根据","发送","建模语言","消息","人机","规模","应用","在","multiple","super","服务","所有人","机器","解析","放在","concepts","如下","合适","durability","驾驶","供者","42","名","好","具体地址","last","秒","冰山一角","多个","流畅","受到","id","纠结","了","避免","多","{","解决","一种","资源","填充","destroy","顺利","好吃","相当于","utf","医疗","符合","main","容性",".","int32","就","开源","，","console","subscribernode","无人机","广泛","视频","合约","晚","信赖","一起","性能","入口","就行","第二种","众多","本身","互相","其他","兼容性问题","话题","生变","《",")","销毁","ros","第一","能力","并行","做","之上","集中","得","作为","完整性","有些","databus","服务端","大量","@","分组","麻烦","如果","样","增多","分布式","入个","还有","舰船","https","专利","没有","课上","模型","*","直接","数据通信","更好","提高","不","design","能响","三种","提到","上","—","scripts"],"title":"**DDS**","title_tokens":["dds","*"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds","text":"Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。","text_tokens":["。","《","最为","》","他们","ros","变化","神经","21","中","的","古月","入门","它","主讲","过程","相当于","系统","重大","相当","神经网络","完成","我","神经网","底层","ros2","终于","实现","，","具体","网络","机器人","欢迎","在","大家","靠","hello","来到","主讲人","我们","dds","是","服务"," ","讲","机器","都","来","当于","学习","好","讲到","动作","课程","话题","—","前边","通信","、"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_1","text":"DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。","text_tokens":["提供","通道","变化","在于","一步","一个","架构","的","更","关心","会","数据","问题","建立","连接数","广播","订阅","一定","客户","增长","导致","感兴趣","影响","必须","二种","明显","由","可见","传送","不用","许多","拿","不过","想","这","处理","中心","客户端","其实","这种","包含","每个","成为"," ","软件","第三","务器","每条","角色","与","四种","ros1","第二","这样","集中处理","速度","之","进一步","通信","太多","。","针对","异常","双方","无法","进行","可以","使用","一条","列出","这个","每次","非常","和","broker","几种","连接","消息","兴趣","发生变化","框架","具体","规模","所","在","应该","服务","所有人","先进","像是","更加","运转","程度","有点","具体地址","正常","到","受到","可能","了","发生","多","自己","解决","一种","而且","点对点","服务器","但","中","单独","处","它","第三种","好吃","也","优势","节点","并","并且","就","第一种","类似","实现","很多","，","真正","以","处理速度","瓶颈","找到","当","dds","是","感兴","都","性能","但是","核心","第二种","优化","其他","能够","需要","知道","效率","生变","有人","第一","吃","并行","很","时","发布","系统","集中","常用","作为","为","有些","databus","服务端","麻烦","如果","整个","增多","第四","请求","忽略","第四种","通路","通信模型","只","关系","地址","火锅","行","我们","没有","这里","一旦","就是","模型","之前","不感兴趣","各种","旋转","所有","能响","三种","上","收到"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_1","text":"DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。","text_tokens":["。","方式","等","它们","决策","通常","一个","的","比如","可以","会","很","广泛应用","数据","地","不是","医疗","非常","和","并","需求","交换","已经","ros2","定位","很多","，","通信","应用","广泛","新","航空","在","能源","高速","频繁","借助","自动","满足","感知","dds","存在"," ","交通","之前","模块","都","驾驶","国防","好","预测","需要","这些","领域"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_2","text":"好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是Data Distribution Service，也就是数据分发服务，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。","text_tokens":["提供","服务质量","2004","一个","提","的","uml","策略","数据","问题","行业","订阅","distribution","兼容性","垂直","于","由","分发","年","保障","开发","corba","呢","中心","sysml","使命","环境","成为"," ","软件","来","介绍","维护","通信","。","专门","等","兼容","完整","当然","对象","/","可以","进行","灵活","价值","最早","升级","统一","标准","数以千计","和","建模语言","设计","已经","高效","应用","网络","课","啦","满足","服务","好","强制","1989","一套","可能","、","丰富","建模","解决","过","听说","中","地","它","真实","美国","也","现在","需求","容性","data","，","技术标准","中间","以","到底","全称","dds","是","复杂","可","语言","？","兼容性问题","service","组织","强调","中间件","实时","比如","发布","做","系统","半天","意思","为","大量","管理","一下","技术","分布式","还有","舰船","分布","说了半天","成立","大家","我们","就是","这里","啥意思","布式","omg","海军","各种","质量"],"title":"什么是DDS","title_tokens":["什么","是","dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#ddsros2","text":"DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。","text_tokens":["编程","架构","一个","的","更","会","个人","这么","组成","问题","建立","差别","构图","大大提高","兼容性","影响","选用","代码","尽量","接口标准","要","ros2","加入","开发","想","机器人","工业","呢","按照","不变","还是","为了","厂商"," ","软件","来","企业","版本","把","这样","5g","上层","通信","上边","。","给","有","兼容","他们","肯定","此时","可以","使用","重要","部分","上","统一","不管","转移","时间","这个","标准","原则","和","根据","驱动","选择","设计","用户","接口","具体","应用","用","无论如何","宗旨","在","或","哪","机器","放在","所以","保证","综合","生态","边","功能","既然","多个","没","可能","、","纠结","了","对","多","自己","一种","但","中","华为","也","符合","容性","你","就","开源","商业","实现","很多","，","中间","复用","让","任","四大","middleware","dds","是","进入","模块","都","性能","就行","可","？","其他","刚才","能够","性","需要","那个","每","如何","组织","蓝色","授权","ros","场景","能力","函数","中间件","大大","对应","组成部分","无论","比如","某一","那","该用","基本","过程","系统","之上","下边","得","高通","如果","技术","分布式","分布","由于","大家","位置","一样","我们","专利","就是","这里","架构图","布式","至关","而言","提高","所有","不","建设","至关重要","4g","红色","像","提到"],"title":"DDS在ROS2中的应用","title_tokens":["应用","在","中","的","dds","ros2"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#qos","text":"DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是Domain，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为数据提供者和接收者之间的合约。 具体会有哪些策略？比如这个列表中描述的DEADLINE策略，表示通信数据必须要在每次截止时间内完成一次通信，HISTORY策略，表示针对历史数据的一个缓存大小，RELIABILITY策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式。 还有这个DURABILITY，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。","text_tokens":["丢失","绑定","同一个","提供","一个","的","表示","空间","会","策略","这么","数据","全局","焕然一新","快速","一定","客户","无人","导致","历史","缓存","必须","接收","只有","指定","列表","要","尽量","ros2","不同","例子","加入","机器人","呢","办法","无用","这种"," ","运动","举","一新","的话","这样","占用","遥控","特性","通信","成","。","遥控器","给","电脑","要求","有","针对","过去","航拍","完整","接收者","理解","结构","进行","可以","提供者","此时","另外","使用","重要","默认","时间","通过","可信赖","向","黑客","这个","每次","派","和","小组","根据","图","发送","完成","参数","发送给","保证数据","选择","流畅性","人机","具体","应用","网络","用","大小","在","所","啦","domain","描述","截止","满足","服务","机器","保证","延时","命令","合适","durability","之间","供者","一次","好","同一","功能","黑入","尽可","best","便于","一些","流畅","处于","带","可能","数据通","reliable","id","了","对","避免","多","模式","一种","reliability","中","资源","deadline","加密","顺利","地","树莓","也","_","那该","尽可能","回忆","节点","需求","类似","实现","，","无人机","让","新","视频","合约","晚","信赖","一起","dds","是","来看","都","但是","众多","才能","哪些","？","互相","需要","那个","每","如何","这些","下","qos","ros","场景","行为","各个","焕然","比如","出现","历史数据","掉","基本","过程","送给","系统","体","指令","传输","为","完整性","配置","图像","将","程序","时候","分组","如果","样","入个","应用程序","effort","还有","帧","通信模型","适应","大家","关系","先","我们","没有","就是","定义","模型","可信","之前","内","history","直接","门","数据通信","情况","更好","质量","所有","不","尽力","不好","控制"],"title":"质量服务策略QoS","title_tokens":["质量","策略","qos","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_3","text":"我们先来试一试在命令行中配置DDS的参数。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort $ ros2 topic info /chatter --verbose","text_tokens":["。","qos","info","reliability","中","的","/","msg","std","_","参数","data","配置","$","int32","verbose","ros2","pub","试一试","effort","chatter","在","echo","先","--","我们","dds","topic"," ","来",":","命令","\"","42","-","命令行","best","msgs","reliable"],"title":"案例一：在命令行中配置DDS","title_tokens":["命令","：","一","案例","在","配置","命令行","中","dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_4","text":"接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。","text_tokens":["。","中","为例","尝试","配置","下来","代码","world","，","以","在","hello","我们","dds"," ","之前","接下来","接下","话题","通信"],"title":"案例二：DDS编程示例","title_tokens":["二","：","编程","案例","示例","dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_2","text":"$ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub","text_tokens":["sub","pub","qos","_","learning","$","helloworld"," ","ros2","run"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_3","text":"learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , },","text_tokens":["定时器","class","一个","coding","msg","的","std","数据","单位","）","keep","publisher","www","代码","points","ros2","__","后","加入","打开","def","创建","父类","1","退出","hello","profile","rclpy"," ","%",":","循环","name","\"","字符串","publishernode","字符","0.5","qoshistorypolicy","回调","主","!","python","/","对象","进行","示例","entry","py","usr","string","qosprofile","8","作者","spin","原则","guyuehome","“","env","#","完成","消息","world","qosreliabilitypolicy","日志","已经","接口","pub","库","super","类型","信息","self","timer","如下","名","last","秒","点","功能","best","=","编写","reliable","、","shutdown","}","(","setup","{","选项","reliability","设置","中","[","填充","destroy","说明","古月","（","_","utf","depth","from","main","等待","节点",".","初始化","data","输出","并","，","s","console","定时","让","create","包","publish","编译","入口","node","callback","需要","'","话题","import","知道","msgs","com","提示","python3",")","qos","销毁","info","publishing","函数","居","helloworld","发布","none","logger","bin","系统","：","为","learning","周期","配置","@","程序",",","初始","发布者","args","”","effort","chatter","*","history","关闭","init","文件","执行","-","get","类","scripts"],"title":"发布者代码解析","title_tokens":["解析","发布","发布者","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_4","text":"learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], },","text_tokens":["class","]","一个","coding","msg","的","std","数据","订阅","）","keep","www","代码","points","ros2","__","后","加入","打开","def","创建","处理","父类","1","退出","hello","profile","rclpy","i"," ","%",":","循环","name","\"","qoshistorypolicy","回调","主","!","subscription","python","/","对象","进行","示例","entry","py","usr","string","qosprofile","8","作者","标准","spin","原则","guyuehome","“","env","#","完成","消息","world","qosreliabilitypolicy","日志","接口","pub","库","super","heard","类型","信息","self","如下","名","last","点","功能","best","=","编写","reliable","\\","、","对","(","shutdown","}","setup","{","选项","reliability","设置","[","destroy","说明","古月","（","_","utf","depth","from","main","等待","节点",".","初始化","data","输出","并","，","subscribernode","s","console","让","create","listener","包","编译","入口","node","callback","需要","'","话题","import","知道","msgs","com","提示","python3",")","qos","销毁","info","函数","居","helloworld","none","logger","bin","系统","：","learning","配置","@","程序",",","初始","args","”","sub","effort","chatter","定义","*","者","history","关闭","init","文件","执行","-","get","类","收到","scripts"],"title":"订阅者代码解析","title_tokens":["解析","者","订阅","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_5","text":"DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们课上主要带领大家认识DDS，更多使用方法和相关内容，课程配套的教程中会有介绍，大家也可以参考这里的链接进行学习。 https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["。","implementations","有","多","bilibili","ros","一角","html","different","一个","带领","进行","的","更","可以","使用","/","认识","how","with","bv12z4y167w2","guides","vendors","也","内容","系统","_","video","非常","和",".","链接","www","配套","ros2","教程","，","冰山","to","中会","主要","参考","大家","相关","multiple","https","org","middleware","我们","课上","非常复杂","dds","是","只是","复杂","这里"," ","en",":","articles","concepts","方法","rmw","学习","本身","介绍","working","design","冰山一角","课程","humble","-","docs","about","com","on"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/","text":"工作空间：开发过程的大本营 大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是工程。 工作空间是什么 类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做工作空间。 所以工作空间是一个存放项目开发相关文件的文件夹，也是开发过程中存放所有资料的大本营。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。 创建工作空间 了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 自动安装依赖 我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init & rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y 编译工作空间 依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。 设置环境变量 编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["某些","src","子目","很少","cd","子","creating","件夹","&","工作","一个","qt","大部分","的","空间","会","人为","绝大部分","2","文件夹","未来","当前","社区","看到","下来","$","代码","要","多少","手动","ros2","教程","后","中会","开发","机器人","名称","这","w","创建","相关","1","gitee","自动生产","b2","echo","变量","环境","资料","行文","i","为了"," ","开始",":","根目录","\"","结果","y","humble","编写程序","。","有","等","放置","针对","空间结构","安装","workspace","进行","此时","结构","可以","使用","另外","成功","部分","mkdir","/","rosdepc","creator","这个","错误","项目","guyuehome","和","“","rosdistro","参数","#","完成","3","日志","均","任何","完全","tutorials","rosdep","用","概念","参考","在","集成","build","啦","自动","应该","~","叫做","存放","允许","机器","信息","两个","以上","所以","典型","环境变量","local","install","如下","命令","学习","studio","还","像是","visual","里边","功能","update","一些","多个","并列","dev","编写","到","、","操作","终端","了","报错","自己","什么","log","setup","接触","选项","四个","过","一部分","设置","html","后续","中","21","p","点击","一点","总体","也","_","大部","不是","apt","下载","from","；","并",".","产生","并且","sh","链接","eclipse","就","从","类似","来讲","，","中间","生效","里","让","大本营","新","找到","大本","当","依赖","编译","保存","--","包","是","org","用于","得到","都","如图所示","接下来","a","了解","需要","能够","一部","接下","数量","ws","b","这些","com","python3","运行","pip","以及","生产","环境变","ros","pip3","或者","强调","bashrc","比如","某","出现","时","git","工具栏","过程","内容","系统","唯一","：","所示","警告","..","缺少","配置","管理","程序","如果","colcon","”","否则","sudo","工程","工具","脚本","目录","大家","一样","关系","https","我们","绝大","就是","这里","存在","定义","path","en","之前","各种","情况","clone","所有","init","文件","想要","仅","执行","-","至此","source","子目录","docs",">","不会","可执行文件"],"title":"**工作空间：开发过程的大本营**","title_tokens":["过程","开发","：","大本营","工作","大本","的","空间","*"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_1","text":"大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是工程。","text_tokens":["。","某些","有","等","放置","以及","接触","选项","件夹","过","一个","工作","qt","中","的","比如","此时","后续","会","点击","creator","工具栏","内容","这个","文件夹","和","“","产生","程序","eclipse","就","”","，","开发","工程","工具","新","创建","在","大家","集成","当","应该","环境","我们","叫做","是"," ","之前","都","学习","studio","所有","visual","文件","想要","里边","这些","编写程序","编写","、"],"title":"工作空间：开发过程的大本营","title_tokens":["过程","开发","：","大本营","工作","大本","的","空间"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_2","text":"类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做工作空间。 所以工作空间是一个存放项目开发相关文件的文件夹，也是开发过程中存放所有资料的大本营。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。","text_tokens":["某些","src","子目","很少","子","件夹","一个","工作","大部分","的","空间","会","人为","绝大部分","2","文件夹","未来","代码","要","后","机器人","开发","名称","这","w","创建","相关","1","b2","资料","行文","环境"," ","开始","根目录","结果","。","等","放置","针对","有","空间结构","安装","进行","结构","可以","另外","成功","部分","这个","错误","项目","和","参数","3","日志","完全","用","在","build","集成","叫做","存放","允许","机器","信息","两个","以上","所以","典型","install","像是","里边","功能","一些","多个","并列","到","dev","编写","、","操作","了","自己","log","四个","一部分","中","一点","总体","也","_","大部","不是","；","并","产生","就","类似","来讲","，","中间","里","大本营","新","大本","编译","保存","是","用于","得到","如图所示","都","a","需要","一部","数量","ws","b","运行","ros","或者","强调","某","比如","时","过程","唯一","系统","：","所示","警告","管理","脚本","目录","工程","一样","关系","我们","绝大","这里","就是","存在","定义","各种","情况","所有","文件","执行","子目录","可执行文件"],"title":"工作空间是什么","title_tokens":["空间","工作","什么","是"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_3","text":"了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git","text_tokens":["了","src","cd","工作","一个","/","的","可以","21","空间","使用","mkdir","p","com","git","_","：","下载","guyuehome","和",".","并且","下来","$","代码","ros2","教程","，","tutorials","概念","创建","gitee","https","~","我们"," ",":","如下","命令","clone","接下来","了解","结果","接下","-","ws","dev"],"title":"创建工作空间","title_tokens":["空间","工作","创建"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_4","text":"我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init & rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y","text_tokens":["python3","src","有","pip","pip3","安装","cd","&","一个","中","的","可以","rosdepc","使用","会","也","..","：","apt","下载","from","rosdistro","社区","$","代码","从","手动","多少","，","rosdep","sudo","工具","依赖","自动","--","我们","i"," ","path","都","install","各种","init","-","y","update","humble","一些"],"title":"自动安装依赖","title_tokens":["安装","自动","依赖"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_5","text":"依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。","text_tokens":["python3","。","了","有","生产","报错","ros","安装","或者","cd","log","件夹","工作","/","的","可以","中","空间","使用","出现","成功","过程","错误","：","_","apt","文件夹","缺少","看到","完成","$","代码","如果","就","colcon","后","任何","，","中会","否则","sudo","build","在","啦","自动生产","依赖","自动","编译","应该","~"," ","install","如下","命令","文件","-","ws","dev","不会","、"],"title":"编译工作空间","title_tokens":["空间","工作","编译"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_6","text":"编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。","text_tokens":["终端","。","了","、","环境变","setup","bashrc","设置","~","工作","/","的","空间","成功","系统","_","：","当前","和",".","#","sh","完成","配置","$","就","均","后","，","生效","让","创建","在","找到","echo","编译","我们","为了","包","行文","环境","变量"," ","local","环境变量","install","还","\"","所有","文件","仅","能够","执行","需要","功能","至此","source","ws","dev",">","可执行文件"],"title":"设置环境变量","title_tokens":["环境变","设置","变量","环境","环境变量"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_7","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":[":","tutorials","ros","creating","a","html",".","workspace","-","https","org","/","humble","docs"," ","en"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/","text":"功能包：开发过程的大本营 在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做功能包。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。 创建功能包 如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python 编译功能包 在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash 功能包的结构 功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。 C++功能包 首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。 Python功能包 C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["某些","src","继续","your","之后","cd","creating","举个","编程","件夹","一个","工作","的","表示","空间","普通","会","首先","<","文件夹","很快","拆分","看到","社区","必须","$","代码","不同","尽量","要","points","ros2","教程","讲解","例子","必然","拿","开发","机器人","名称","想","头疼","创建","呢","包并","分享","相关","这","还是","包含","变量","环境","每个","移动","行文"," ","耦合","软件","导航","来",":","是不是","版本","name","介绍","把","humble","。","给","绿豆","有","等","txt","他们","当然","workspace","python","/","结构","可以","之一","某种","使用","新创","重要","译成","py","entry","发现","包该","type","三个","这个","是否是","和","“","其中","越","#","完成","cmakerlists","包是","docs","tutorials","用","五颜六色","c","参考","在","build","描述","~","叫做","自主","机器","两个","放在","local","所以","环境变量","类型","解析","install","如下","信息","起来","命令","除此之外","之间","好","里边","功能","bash","正常","一些","到","可能","红豆","、","降低","终端","了","dev","编写","多","setup","立刻","型","html","设置","first","但","中","package","后续","放到","说明","手上","也","不是","_","混合","下载","包中","；","并","只想","你","很难",".","之外","链接","拿出","就","视觉","可执行文件","编译成","很多","，","一颗","名字","是否","复用","里","新创建","除此","大本营","新建","create","大本","当","跟","包","一起","感知","--","是","黄豆","编译","看","cmakelists","都","入口","但是","分析","才能","语言","？","ament","a","刚才","需要","率","假设","xml","声明","依赖","数量","ws","如何","这些","pkg","c++","下","机制","环境变","运行","ros","或者","比如","主要","那","时","过程","原理","别人","内容","：","指令","语法","org","得","learning","配置","时候","将","如果","判断","程序","colcon","豆子","颜色","规则","还有","找","”","版权","只","分别","大家","关系","一样","划分","https","我们","就是","这里","存在","么","出来","en","源码","方法","袋子","该","各种","cmake","不","提高","所有","文件","执行","-","source","控制",">","而是"],"title":"**功能包：开发过程的大本营**","title_tokens":["过程","开发","：","大本营","功能","大本","包","的","*"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_1","text":"在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做功能包。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。","text_tokens":["某些","举个","件夹","一个","的","普通","会","文件夹","很快","拆分","看到","社区","代码","不同","尽量","ros2","教程","例子","拿","机器人","想","名称","头疼","分享","每个","移动"," ","耦合","软件","导航","是不是","把","。","给","绿豆","有","等","他们","当然","可以","之一","某种","使用","重要","发现","包该","三个","这个","其中","越","用","五颜六色","在","叫做","自主","机器","放在","所以","起来","之间","功能","红豆","到","可能","、","降低","了","多","立刻","中","放到","说明","手上","也","不是","混合","下载","包中","；","并","只想","你","很难","拿出","就","视觉","很多","，","一颗","复用","里","当","包","一起","感知","黄豆","是","都","但是","需要","率","假设","数量","如何","这些","机制","ros","比如","时","原理","别人","得","时候","如果","豆子","颜色","找","只","大家","关系","划分","我们","就是","么","出来","源码","方法","袋子","不","提高","文件","控制","而是"],"title":"功能包：开发过程的大本营","title_tokens":["过程","开发","：","大本营","功能","大本","包","的"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_2","text":"如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python","text_tokens":["。","终端","src","cd","或者","python","一个","中","package","可以","表示","使用","的","新创","那","比如","/","<","type","这个","：","指令","_","；","和","learning","#","分别","$","如果","就","ros2","包是","，","名字","c","新创建","创建","呢","在","create","build","相关","还是","跟","新建","包","我们","--","这里","~"," ","版本","命令","name","cmake","？","ament","-","功能","ws","如何","pkg","dev",">","c++"],"title":"创建功能包","title_tokens":["功能","创建","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_3","text":"在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash","text_tokens":["运行","继续","环境变","src","setup","之后","cd","ws","工作","/","的","可以","空间","_","：","包中","和",".","#","完成","配置","$","代码","colcon","，","创建","在","build","编译","我们","环境","变量","~","包"," ","local","环境变量","install","才能","所有","好","需要","功能","source","bash","正常","dev","编写"],"title":"编译功能包","title_tokens":["功能","包","编译"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_4","text":"功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。","text_tokens":["。","下","件夹","一个","结构","的","普通","那","新创","不是","文件夹","是否是","判断","，","是否","新创建","呢","创建","包并","包","我们","两个","来","分析","？","文件","刚才","功能","如何"],"title":"功能包的结构","title_tokens":["的","功能","结构","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#c","text":"首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。","text_tokens":["。","下","运行","txt","设置","中","的","package","使用","首先","内容","语法","：","和",".","其中","必须","代码","要","规则","cmakerlists","，","必然","版权","主要","在","包含","描述","依赖","包","编译","存在","cmakelists","两个"," ","看","类型","是","所以","如下","该","各种","才能","cmake","文件","需要","xml","功能","声明","如何","c++"],"title":"C++功能包","title_tokens":["功能","包","c++"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#python","text":"C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。","text_tokens":["。","给","有","setup","型","编程","python","但","译成","的","package","后续","中","会","使用","entry","py","也","内容","_","：","和","之外",".","“","配置","将","程序","不同","points","编译成","讲解","还有","”","，","版权","主要","这","除此","在","大家","一样","包含","描述","依赖","包","编译","行文","c++","是","解析","两个"," ","信息","所以","源码","入口","但是","版本","除此之外","各种","介绍","语言","不","文件","需要","执行","xml","功能","声明","里边","一些","如何","我们","可执行文件"],"title":"Python功能包","title_tokens":["python","功能","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_5","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["your","ros","creating","html","workspace","first","/","package",".","ros2","tutorials","https","org"," ","en",":","a","-","humble","docs"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/","text":"节点 机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。 通信模型 完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。 案例一：Hello World节点（面向过程） ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。 运行效果 大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ], 创建节点流程 代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。 案例二：Hello World节点（面向对象） 所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。 运行效果 下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ], 创建节点流程 所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。 案例三：物体识别节点 没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。 运行效果 在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。 代码解析 在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ], 案例四：机器视觉识别节点 用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。 运行效果 启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 注意：如果是在虚拟机中操作，需要进行以下设置： 把虚拟机设置为兼容USB3.1； 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。 代码解析 相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ], 节点命令行操作 节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息 思考题 现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["webcam","共同","左上角","的","相机","合体","组成","难","一节","简单","问题","2","未来","150","java","孤立","效果","ruby","这座","不同","列表","不用","职责","img","机器人","名称","父类","退出","1","hello","用到","rclpy","行文","opencv","开始","来","ret","这样","结果","0.5","upper","至","。","最为","drawcontours","主","兼容","图像识别","nodes","框会","true","进行","面向对象","检测","熟悉","entry","py","上","某种","作者","然后","去","5","0","“","完成","部门","读取","接口","具体","框架","概念","用","库","叫做","只是","命令","还","点","180","多种","既然","休眠","外界","就让","、","终端","(","contours","setup","可视","过","但","中","面向","它","知其然","推荐","总体","from","等待","依然","节点","并","之外","再","初始化","输出","识别","链接","呀","动态","乃至","视觉","请","重新","让","除此","先拉","numpy","框架图","编码","当","org","编译","是","来看","虚拟机","身体","回到","一帧","经常","上限","命令行","轮子","状态","每","python3","运行","云端","info","保持联系","案例","中心点","实时","helloworld","发布","中将","logger","过程","唯一","各不相同","配置","一下","时候","将","摄像","颜色","”","所以然","分布","通信模型","sudo","数值","先","我们","这里","布式","之前","该","而言","计算机","init","想要","执行","50","红色","apple","考题","90","搭载","src","变化","一个","推动","总体而言","会","可读","人为","左上","虽然","范围","显示","面积","ok","scripts","一线","联系","255","可读性","下来","操作系统","代码","$","命名","points","pyhton","red","后","调整","continue","下限","打开","开发","def","不过","这","即可","创建","处理","w","图片","出","这种","每个","detect"," ","厂房",":","噪声","是不是","循环","name","相比","\"","字符","速度","通信","编写程序","有","他们","安装","understanding","想到","结构","示例","另外","认识","重要","时间","通过","移植性","查询","这个","hcx","可视化","和","驱动","env","#","其中","world","tutorials","啦","稍微","处理过程","路径","课程","功能","home","一些","正常","以下","到","没","取","shutdown","发生","选项","四个","[","说明","为例","一点","也","看看","一","不要","一张","并且","类似","到底","及","来源","轮廓","改成","复杂","得到","都","细胞","bgr","语言","？","去除","刚才","物体","'","import","知道","如何","这些","c++","下","总结","工人","approx","函数","shape","算机","出现","那","时","具备","三","cvtcolor","none","系统","疑惑","编程语言","为","learning","获取","程序",",","初始","args","二","大家","一样","出来","en","例程","只不过","看上","这份","文件","网上","更多","模块化","read","类","收到","同理","物理","某些","进程","工作","不能","表示","waitkey","）","object","www","过来","独立","综合体","boundingrect","关注","__","xy","inrange","还是","环境","勾勒","移动","hsv","思考题","run","运动","自然","介绍","把","字符串","可移植性","findcontours","绿点","y","humble","给","array","合理","完整","理解","python","使用","helloworldnode","成功","cv2","usr","8","spin","guyuehome","参数","连接","设计","日志","as","启动","hierarchy","注意","参考","应该","角度","思考","信息","两个","所以","self","综合","起来","学习","更加","之间","一项","绿色","+","负责","=","会弹","dev","可能","编写","chain","128","方式","html","设置","摄像头","21","后勤","（","古月","所在","模拟","不是","_","设备","apt","现在","远程","你","image","videocapture","地方","前","jpg","宽","实现","对于","名字","是否","中间","以","可移植","里","最大","找到","get","包","溜溜","模块","但是","一台","node","接下来","可","a","马","需要","color","接下","更为","b","com","circle","或者","编码方式","改变","居","为止","比如","很","却","bin","图像处理","：","指令","常用","步骤","周期","图像","移植","分别","后勤部","二值化","就是","桌子","方法","各种","cnt","关闭","-","太","docs","生成","while",">","吧","sleep","提供","编程","class","]","coding","更","流程","此处","<","上角","看到","没错","imshow","保持","要","ros2","retr","保障","加入","呢","中心","知其所以然","理过","关于","np","成为","destroyallwindows","调试","计算","imread","的话","坐标","x","眼睛","for","工厂","等","电脑","!","当然","窗口","/","对象","可以","发现","点画","前后","根据","发送","四","腿","mask","好像","修改","还会","被","岂","time","在","着急","in","super","这款","机器","解析","放在","硬件","比喻","如下","载体","除此之外","打印","install","上去","重点","list","好","任务","查看","摇杆","后勤部门","操作","纠结","了","多","{","做到","高","一种","if","相同","destroy","cap","看上去","位于","监控","utf","main","而已","；",".","实际","就","从","方便","，","console","前后左右","整体","一起","每一项","看","入口","苹果","分析","虚拟","众多","互相","lower","ws","更多要","bgr2hsv",")","机制","销毁","转换","ros","某","阈值","算是","做","得","心里","@","像素","如果","usb3.1","int","分布式","还有","像头","太小","https","模型","*","左右","更好","不","控制","像","—","骡子","h","可执行文件"],"title":"**节点**","title_tokens":["*","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_1","text":"机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。","text_tokens":["。","取","了","机制","给","ros","一个","工作","中","的","合体","那","通过","“","节点","连接","就","综合体","”","，","名字","机器人","在","整体","一起","我们","每一项","是","机器","成为"," ","就是","综合","细胞","各种","众多","一项","功能","一些","像","这些","到"],"title":"节点","title_tokens":["节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_2","text":"完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。","text_tokens":["物理","某些","进程","提供","共同","编程","一个","工作","推动","的","更","组成","人为","虽然","java","一线","看到","ruby","下来","操作系统","独立","不同","这座","命名","保障","职责","机器人","名称","这","环境","每个","移动","行文"," ","来","厂房","运动","自然","计算","这样","结果","速度","眼睛","。","工厂","有","等","他们","完整","python","想到","可以","另外","认识","通过","前后","查询","这个","去","和","根据","“","参数","腿","完成","连接","部门","设计","还会","具体","在","角度","叫做","这款","机器","信息","放在","硬件","比喻","载体","除此之外","还","功能","任务","既然","到","摇杆","外界","可能","操作","、","了","后勤部门","多","摄像头","但","中","相同","后勤","它","位于","监控","也","不是","看看","；","并","之外","你","远程","节点","地方","就","从","乃至","实现","，","里","让","除此","前后左右","找到","到底","当","整体","编译","一起","是","来看","复杂","得到","都","身体","细胞","一台","语言","互相","接下来","a","需要","接下","更为","轮子","状态","每","b","这些","如何","c++","运行","云端","工人","或者","生成","比如","算机","某","那","时","却","算是","唯一","系统","做","：","各不相同","编程语言","获取","配置","程序","时候","摄像","分布式","还有","”","分布","像头","分别","后勤部","我们","就是","桌子","布式","左右","该","计算机","不","文件","想要","执行","控制","上","—","搭载","可执行文件"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world","text":"ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。","text_tokens":["终端","。","了","最为","到","当然","一个","中","的","简单","节点","并","“","程序","world","从","ros2","实现","”","，","hello","先","我们","就是","是"," ","复杂","开始","来","例程","打印","循环","不","字符串","需要","字符","功能","编写程序","编写"],"title":"案例一：Hello World节点（面向过程）","title_tokens":["过程","：","）","一","案例","节点","hello","面向","world","（"," "]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_3","text":"大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["。","下","终端","运行","做到","中","的","可以","helloworld","成功","通过","知其然","过程","也","这个","然后","_","不要","节点","效果","再","learning","看到","“","$","代码","world","ros2","实现","所以然","，","后","”","先拉","在","大家","着急","知其所以然","先","hello","编译","我们","溜溜","是"," ","出来","看","所以","run","来","分析","打印","命令","循环","node","字符串","马","好","执行","课程","字符","如何","骡子"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_4","text":"这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ],","text_tokens":["sleep","]","的","coding","ok","www","代码","points","ros2","后","加入","打开","def","呢","创建","hello","rclpy"," ",":","循环","\"","0.5","。","主","!","python","/","对象","进行","示例","使用","entry","py","usr","时间","8","这个","作者","guyuehome","“","env","#","完成","world","日志","接口","库","time","信息","如下","点","功能","正常","休眠","=","编写","shutdown","(","方式","setup","{","选项","设置","面向","[","destroy","说明","古月","_","utf","from","main","节点",".","初始化","并","输出","实现","，","console","是否","让","包","编译","是","来看","入口","node","？","需要","'","import","知道","如何","com","python3","下",")","运行","销毁","info","函数","居","控制","helloworld","发布","none","logger","bin","过程","系统","：","learning","配置","@","程序",",","初始","args","”","我们","*","关闭","init","文件","-","get","类","scripts","while"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_5","text":"代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。","text_tokens":["。","纠结","总结","销毁","有","方式","做到","编程","或者","函数","理解","过","一个","面向","中","的","更","流程","出现","会","使用","重要","可以","简单","一点","很","发现","难","过程","做","虽然","系统","：","未来","节点","初始化","并","一下","代码","如果","就","初始","pyhton","接口","不用","实现","，","具体","对于","机器人","创建","大家","编码","用到","先","应该","我们","这种","这里","是","稍微"," ","复杂","机器","模块","但是","方法","学习","关闭","的话","想要","经常","这样","功能","模块化","c++"],"title":"创建节点流程","title_tokens":["创建","流程","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world_1","text":"所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。","text_tokens":["。","了","方式","编程","面向","中","的","更","对象","面向对象","使用","比如","可以","会","具备","可读","移植性","看上去","推荐","也","虽然","和","可读性","移植","代码","就","ros2","方便","，","可移植","开发","在","大家","我们","改成"," ","复杂","所以","但是","调试","起来","看上","更好","上去","更加","刚才","可移植性","这样","一些"],"title":"案例二：Hello World节点（面向对象）","title_tokens":["二","：","）","案例","节点","hello","面向","对象","world","（"," ","面向对象"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_6","text":"下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["终端","。","运行","class","中","的","可以","helloworld","成功","_","：","节点","learning","“","看到","效果","下来","一下","$","world","ros2","调整","后","，","”","在","还是","hello"," ","run","打印","循环","node","字符串","字符"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_7","text":"功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ],","text_tokens":["sleep","变化","class","]","一个","的","coding","虽然","ok","www","代码","points","ros2","__","后","加入","打开","def","创建","父类","退出","hello","rclpy"," ",":","循环","name","\"","0.5","。","主","!","python","结构","/","对象","示例","使用","面向对象","helloworldnode","进行","py","usr","时间","entry","8","作者","spin","guyuehome","“","env","#","完成","world","日志","接口","具体","库","time","super","信息","self","如下","点","功能","正常","休眠","=","编写","shutdown","了","(","方式","发生","setup","{","选项","设置","面向","[","destroy","说明","古月","_","utf","from","main","等待","节点",".","初始化","输出","并","实现","，","console","是否","让","包","编译","看","入口","但是","node","需要","'","import","知道","com","python3",")","运行","销毁","info","函数","居","控制","helloworld","发布","时","none","logger","bin","系统","：","learning","配置","一下","程序","@",",","初始","args","”","一样","我们","*","关闭","这份","init","文件","-","get","类","scripts","while"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_8","text":"所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。","text_tokens":["。","吧","了","销毁","方式","编程","编码方式","四个","改变","一个","不能","为止","总体而言","的","中","总体","做","不是","疑惑","依然","而已","得","节点","步骤","初始化","并","完成","心里","world","初始","接口","实现","还有","，","具体","不过","机器人","这","创建","大家","编码","hello","这里","是","机器"," ","只是","所以","只不过","是不是","打印","而言","关闭","功能","任务","一些","到"],"title":"创建节点流程","title_tokens":["创建","流程","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_9","text":"没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。","text_tokens":["。","一个","中","的","为例","模拟","通过","过程","节点","实际","没错","一张","下来","识别","就","从","视觉","实现","，","以","机器人","找到","图片","先","我们","机器"," ","来","苹果","接下来","网上","接下","任务","编写"],"title":"案例三：物体识别节点","title_tokens":["：","案例","物体","节点","识别","三"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_10","text":"在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。","text_tokens":["src","一个","的","表示","object","看到","$","代码","ros2","后","即可","处理","中心","图片","出","用到","勾勒"," ","opencv","run","imread","把","绿点","。","安装","框会","窗口","/","可以","使用","cv2","成功","py","这个","然后","hcx","可视化","#","修改","tutorials","被","注意","库","在","啦","install","如下","路径","绿色","home","=","会弹","dev","(","可视","中","21","_","apt",".","image","实际","识别","前","jpg","就","，","请","中间","重新","编译","轮廓","苹果","node","需要","'","ws","python3",")","运行","中心点","图像处理","：","指令","为","learning","图像","将","sudo","我们","出来","例程","-","—","apple"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_11","text":"在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ],","text_tokens":["src","class","]","左上角","一个","的","coding","此处","2","左上","<","范围","显示","面积","waitkey","object","150","scripts","上角","效果","255","www","imshow","代码","points","boundingrect","关注","ros2","red","xy","continue","后","下限","retr","加入","img","机器人","def","w","打开","inrange","创建","处理","中心","理过","图片","1","退出","关于","rclpy","np","hsv","detect","勾勒"," ","opencv","来",":","destroyallwindows","噪声","循环","计算","\"","imread","findcontours","坐标","x","y","upper","for","。","drawcontours","array","!","图像识别","主","python","/","对象","进行","示例","检测","cv2","使用","entry","py","usr","通过","8","点画","这个","作者","hcx","5","spin","guyuehome","0","和","env","#","mask","完成","读取","as","接口","具体","hierarchy","tutorials","概念","库","在","in","机器","处理过程","如下","重点","+","点","功能","180","home","一些","=","dev","编写","chain","了","(","128","contours","shutdown","setup","{","高","选项","if","设置","中","[","21","destroy","说明","古月","所在","模拟","不是","_","utf","from","main","等待","节点","并",".","image","识别","初始化","宽","jpg","从","实现","，","console","让","numpy","及","轮廓","包","编译","是","得到","入口","苹果","node","bgr","去除","color","需要","lower","上限","'","import","ws","知道","如何","com","更多要","circle","python3","bgr2hsv",")","转换","销毁","info","approx","函数","居","shape","helloworld","出现","阈值","cvtcolor","none","logger","过程","图像处理","bin","系统","：","为","learning","h","图像","配置","@","像素","将",",","int","初始","程序","颜色","args","数值","太小","大家","二值化","我们","*","模型","出来","例程","cnt","关闭","init","文件","更多","-","红色","get","类","apple","list","90"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_12","text":"用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。","text_tokens":["。","有","合理","或者","摄像头","进行","的","问题","节点","其中","识别","图像","好像","下来","就让","呀","读取","动态","摄像","颜色","类似","，","用","机器人","像头","图片","应该","我们","机器","苹果","还","接下来","不","物体","接下","太","眼睛","没"],"title":"案例四：机器视觉识别节点","title_tokens":["：","视觉","案例","节点","四","识别","机器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_13","text":"启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 注意：如果是在虚拟机中操作，需要进行以下设置： 把虚拟机设置为兼容USB3.1； 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。","text_tokens":["终端","操作","。","运行","webcam","兼容","设置","一个","摄像头","实时","中","进行","可以","的","成功","中将","_","：","设备","object","为","；","驱动","节点","learning","#","并且","识别","连接","$","usb3.1","如果","就","摄像","启动","ros2","后","，","注意","像头","在","啦","移动","是"," ","虚拟机","run","虚拟","如下","该","node","可","把","物体","需要","红色","以下","至"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_14","text":"相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ],","text_tokens":["webcam","变化","class","]","左上角","的","coding","相机","2","while","左上","<","范围","显示","面积","waitkey","object","150","ok","上角","效果","scripts","255","www","imshow","代码","points","boundingrect","ros2","red","xy","后","continue","下限","retr","加入","img","打开","def","w","inrange","创建","处理","中心","1","图片","rclpy","勾勒","np","hsv","detect"," ","opencv","来",":","ret","噪声","计算","相比","\"","findcontours","坐标","x","y","upper","for","。","drawcontours","array","!","主","python","true","进行","/","对象","示例","使用","检测","cv2","entry","py","usr","通过","8","点画","作者","5","guyuehome","0","驱动","和","env","#","mask","完成","读取","as","接口","修改","hierarchy","库","in","信息","如下","+","点","180","功能","一些","=","编写","chain","了","(","128","contours","shutdown","setup","{","高","选项","if","设置","摄像头","中","[","destroy","cap","说明","古月","所在","_","utf","from","main","并",".","节点","videocapture","并且","识别","image","初始化","宽","从","，","console","让","最大","numpy","来源","及","轮廓","包","编译","是","得到","入口","苹果","node","bgr","去除","color","一帧","需要","lower","上限","'","import","知道","com","circle","python3","bgr2hsv",")","转换","销毁","info","approx","函数","居","shape","helloworld","出现","阈值","cvtcolor","none","logger","bin","图像处理","系统","：","为","learning","周期","h","图像","配置","程序","@","像素",",","摄像","将","int","颜色","args","初始","数值","像头","太小","二值化","这里","*","模型","出来","之前","cnt","关闭","init","文件","-","50","read","红色","get","类","list","90"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_15","text":"节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息","text_tokens":["操作","info","的","<","_","：","常用","节点","#","$","列表","ros2"," ","信息","如下","命令","name","node","查看","list",">"],"title":"节点命令行操作","title_tokens":["操作","命令行","命令","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_16","text":"现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。","text_tokens":["工作","一个","的","会","一节","问题","显示","孤立","联系","看到","没错","过来","保持","要","后","机器人","这"," ","开始","运动","介绍","把","速度","。","给","最为","电脑","有","他们","熟悉","另外","某种","发现","这个","和","发送","参数","连接","框架","还会","岂","概念","在","应该","机器","两个","之间","负责","多种","摇杆","了","一种","摄像头","中","不是","现在","并","节点","就","实现","，","收到","框架图","细胞","回到","a","b","这些","下","机制","ros","保持联系","改变","比如","很","系统","指令","得","常用","配置","图像","将","如果","摄像","像头","大家","我们","方法","想要","控制","同理"],"title":"思考题","title_tokens":["思考题","考题","思考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_17","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":[":","tutorials","nodes","ros","html",".","understanding","https","org","/","humble","-","docs","en","ros2"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/","text":"话题 节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。 通信模型 以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。 发布/订阅模型 从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为发布者，接收数据的对象称之为订阅者，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。 多对多通信 大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。 异步通信 话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。 消息接口 最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过.msg后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。 案例一：Hello World话题通信 了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 运行效果 启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。 发布者代码解析 我们来看下发布者的实现方法。 程序实现 learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口 订阅者代码解析 我们再来看下订阅者的实现方法。 程序实现 learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。 案例二：机器视觉识别 在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。 运行效果 这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。 发布者代码解析 learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], }, 订阅者代码解析 learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], }, 案例三：机器视觉识别优化 通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub 话题命令行操作 话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息 思考题 关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？ 参考链接 https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["webcam","排版","一步","左上角","打","的","个","相机","组成","问题","bw","2","自行","订阅","感兴趣","未来","小编","人","同样","video","效果","150","拼接","列表","似乎","讲解","例子","说干就干","img","机器人","想","名称","之为","1","父类","退出","hello","echo","rclpy","i","数据类型","opencv","开始","软件","来","ret","画面","基本原理","长宽","这样","0.5","中是","upper","进一步","。","drawcontours","主","无法","较强","此时","进行","true","某种","检测","解","entry","挺","上","string","py","转化","作者","5","0","“","完成","读取","已经","接口","换","pub","不行","完全","用","概念","库","已","指","满足","叫做","以上","timer","优先级","命令","还","公众","点","180","既然","、","终端","通用","(","contours","化成","可视","setup","值","但","中","imagepublisher","它","词","from","等待","节点","并","再","初始化","输出","识别","链接","0.1","呀","视觉","他会","很多","复用","让","numpy","create","org","编译","是","来看","感兴","逻辑性","放入","一帧","callback","能够","上限","命令行","每","传感器","python3","运行","info","publishing","hz","案例","exe","实时","helloworld","发布","logger","过程","唯一","配置","一下","将","时候","颜色","”","通信模型","chatter","数值","sudo","关系","先","我们","这里","号","之前","内","该","init","所有","想要","执行","谁","渲染","原理","红色","考题","90","变化","一个","imgmsg","说","会","bgr8","传递","范围","虽然","显示","左上","面积","联系","255","下来","$","代码","接收","做成","points","随处","red","后","continue","下限","cam","打开","开发","def","即可","这","w","创建","处理","不过","！","一句","包含","这种","每个","detect"," ",":","噪声","是不是","循环","name","\"","raw","字符","本原","通信","写","有","在生活中","换成","安装","肯定","understanding","区分","结构","出去","示例","另外","重要","移植性","通过","这个","可视化","驱动","和","env","其中","#","world","传递数据","bridge","更换","仔细","tutorials","啦","描述","heard","类型","频率","感器","保证","建议","协议","功能","一些","以下","到","没","}","shutdown","对","\\","选项","千丝","听说","[","说明","为例","也","一","称之为","采集","需求","是从","data","并且","思想","receiving","类似","s","原本","定时","及","轮廓","publish","复杂","得到","都","听","语言","？","优化","bgr","了解","物体","发出","去除","刚才","'","数量","知道","import","msgs","如何","这些","提示","下","总结","组织","队列","approx","函数","对劲","shape","无论","那","cvtcolor","三","同学","none","哪里","基本","系统","传输","格式","编程语言","为","learning","获取","程序",",","初始","发布者","args","sub","二","rgb","积木","最","大家","一样","者","定义","出来","en","例程","想象","文件","模块化","read","魔性","类","收到","某些","中文","10","之后","不能","数据","焕然一新","各样","拍摄","接口定义","一定","）","waitkey","object","publisher","www","独立","boundingrect","__","xy","必然","inrange","还是","勾勒","hsv","思考题","usb","讲","%","run","运动","自然","把","字符串","就要","第二","publishernode","可移植性","findcontours","异步","y","humble","适合","知识","成","imagesubscriber","给","回调","array","英文","subscription","理解","python","使用","cv2","成功","usr","8","type","标准","spin","不太","guyuehome","参数","3","设计","兴趣","日志","用户","启动","as","任何","几个","hierarchy","to","注意","参考","集成","微信","应该","角度","思考","两个","信息","接收数据","self","叫","之间","一次","+","逻辑","精简","最后","基于","第二个","=","可能","编写","chain","128","方式","自己","什么","html","设置","只要","（","古月","所在","根本","不是","设备","_","apt","控制指令","现在","带宽","你","image","videocapture","所谓","宽","几乎","发送数据","无关","留","来讲","实现","对于","名字","是否","优先","以","可移植","里","get","listener","包","接口协议","dds","进入","用于","模块","但是","联系方式","才能","想下","接下来","node","a","color","需要","率","接下","b","com","circle","topics","对应","居","焕然","比如","数据结构","bin","图像处理","：","指令","常用","周期","阅读","长度","图像","另","移植","随处可见","frame","周期性","只","分别","后缀","二值化","就是","存在","topic","么","万缕","方法","过瘾","各种","稍后","cnt","关闭","-","耦","太","docs",">","继续","传感","定时器","编程","class","]","coding","更","msg","流程","std","单位","<","杂志","上角","看到","没错","imshow","保持","要","可见","ros2","数据传输","从而","retr","加入","据传","呢","生活","中心","不变","东西","关于","np","成为","千丝万缕","等等","举","计算","与","一新","的话","不然","坐标","转换成","x","单向","特性","for","转化成","要求","!","平时","当然","/","对象","可以","统一","点画","报社","发送","又","mask","一行","好像","消息","感觉","修改","被","在","in","super","第一次","什么样","报纸","机器","解析","桥梁","硬件","install","如下","比方","合适","名","list","好","秒","查看","多个","并不知道","摇杆","操作","了","多","{","块","做到","高","一种","if","填充","destroy","cap","cv","监控","utf","符合","main","不知",".","就","从","，","console","subscribernode","视频","看","入口","苹果","分析","本身","互相","一份","cvbridge","lower","话题","转换",")","销毁","bgr2hsv","ros","第一","二个","某","文章","阈值","第一个","一般","做","目标","间","作为","得","sensor","像素","@","如果","int","还有","一篇","固定","太小","程序实现","https","没有","模型","*","每换","直接","更好","不","提高","各种各样","因为","方向","控制","像","scripts","h"],"title":"**话题**","title_tokens":["*","话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_1","text":"节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。","text_tokens":["。","了","有","方式","一种","千丝","但","的","会","重要","数据","它","传递","各样","不是","间","联系","节点","并","其中","独立","传递数据","实现","，","机器人","最","就是","是","机器"," ","万缕","桥梁","千丝万缕","联系方式","各种","之间","各种各样","功能","话题","这些"],"title":"话题","title_tokens":["话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_2","text":"以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。","text_tokens":["一个","的","相机","数据","传递","拍摄","显示","没错","要","数据传输","必然","机器人","想","据传","这","之为"," ","是不是","这样","。","给","有","此时","可以","某种","这个","可视化","驱动","用户","在","机器","两个","信息","硬件","桥梁","之间","功能","查看","到","了","方式","可视","中","为例","它","监控","设备","不是","称之为","节点","就","从","实现","，","以","视频","是","得到","才能","？","a","话题","b","ros","实时","某","做","传输","作为","获取","图像","一下","将","大家","关系","我们","存在","方向","渲染","上"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_3","text":"从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为发布者，接收数据的对象称之为订阅者，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。","text_tokens":["排版","之后","一个","打","的","会","数据","订阅","感兴趣","小编","杂志","接收","可见","随处","数据传输","机器人","据传","名称","之为","呢","生活","成为","数据类型"," ","等等","自然","把","的话","这样","特性","知识","成","。","有","要求","在生活中","平时","无法","/","对象","出去","可以","使用","另外","这个","和","“","发送","兴趣","微信","应该","角度","叫做","报纸","机器","类型","接收数据","叫","比方","公众","好","基于","到","、","了","对","什么","古月","它","也","称之为","节点","是从","就","从","发送数据","类似","实现","他会","，","名字","dds","是","看","来看","感兴","都","本身","？","需要","话题","每","组织","居","比如","发布","文章","传输","格式","随处可见","如果","发布者","”","固定","大家","没有","就是","者","模型","号","收到"],"title":"发布/订阅模型","title_tokens":["发布","模型","/","订阅"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_4","text":"大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。","text_tokens":["一个","的","个","2","订阅","人","杂志","没错","要","似乎","机器人","之为","1","东西","还是","每个"," ","画面","是不是","不然","通信","。","有","区分","可以","挺","这个","和","发送","3","仔细","被","注意","报纸","机器","建议","优先级","公众","多个","摇杆","可能","、","对","了","多","也","不是","称之为","控制指令","并","节点","再","很多","，","优先","里","是","想下","听","话题","数量","知道","这些","ros","发布","唯一","指令","一下","如果","发布者","通信模型","大家","一样","我们","存在","者","模型","号","该","想象","不","因为","谁","控制","魔性"],"title":"多对多通信","title_tokens":["对","通信","多"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_5","text":"话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。","text_tokens":["某些","太","传感","一个","的","更","数据","订阅","后","这"," ","运动","等等","异步","适合","特性","通信","。","有","较强","可以","这个","报社","参数","修改","用","指","第一次","报纸","叫做","感器","合适","公众","一次","逻辑","一些","并不知道","可能","了","什么","听说","只要","古月","词","根本","也","不知","你","所谓","就","类似","，","让","是","用于","逻辑性","？","一份","发出","话题","知道","传感器","第一","居","比如","某","那","发布","文章","同学","指令","传输","周期","阅读","时候","如果","发布者","还有","一篇","就是","者","号","不","控制","收到"],"title":"异步通信","title_tokens":["异步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_6","text":"最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过.msg后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。","text_tokens":["中文","编程","不能","一个","的","msg","说","会","组成","数据","自行","订阅","接口定义","各样","拼接","数据传输","机器人","据传","之为","包含","每个"," ","等等","与","长宽","这样","通信","成","。","有","英文","理解","结构","进行","可以","统一","通过","标准","和","消息","接口","概念","在","描述","机器","最后","既然","、","了","方式","块","值","一种","中","也","称之为","节点",".","就","无关","，","是","复杂","都","语言","话题","ros","对应","比如","发布","数据结构","系统","传输","格式","编程语言","得","图像","像素","发布者","rgb","积木","一样","后缀","我们","这里","者","定义","各种","各种各样","文件","像"],"title":"消息接口","title_tokens":["接口","消息"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#hello-world","text":"了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。","text_tokens":["。","了","ros","一个","中","的","发布","string","基本","订阅","这个","标准","“","发送","周期","再","下来","消息","代码","world","从","接收","发布者","”","，","从而","chatter","创建","啦","还是","hello","我们","是"," ","类型","开始","定义","来","例程","者","基本原理","接下来","了解","就要","字符串","接下","字符","话题","原理","本原","到","编写"],"title":"案例一：Hello World话题通信","title_tokens":["：","一","案例","hello","话题","world"," ","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_7","text":"启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。","text_tokens":["终端","。","运行","第一","一个","的","二个","helloworld","可以","发布","数据","第一个","也","订阅","_","：","同样","节点","learning","“","看到","$","消息","world","几乎","启动","ros2","发布者","pub","sub","，","”","以","hello","topic"," ","者","频率","run","该","循环","字符串","第二","字符","话题","第二个","收到"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_8","text":"我们来看下发布者的实现方法。","text_tokens":["。","下","方法","的","我们","发布","来看","发布者","实现"],"title":"发布者代码解析","title_tokens":["解析","发布","发布者","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_9","text":"learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], },","text_tokens":["10","定时器","class","]","一个","coding","msg","的","std","数据","单位","）","publisher","www","代码","points","ros2","__","后","加入","打开","def","创建","父类","退出","hello","rclpy"," ","%",":","循环","name","\"","字符串","publishernode","字符","0.5","回调","主","!","python","/","对象","进行","示例","entry","py","usr","string","8","作者","spin","guyuehome","“","env","#","完成","消息","world","日志","已经","接口","pub","库","super","类型","信息","self","timer","如下","名","秒","点","功能","=","编写","、","}","shutdown","(","setup","{","选项","设置","中","[","填充","destroy","说明","古月","（","_","utf","from","main","等待","节点",".","初始化","data","输出","并","，","s","console","定时","让","create","包","publish","编译","入口","node","callback","需要","'","话题","import","知道","msgs","com","提示","python3",")","销毁","队列","info","publishing","函数","居","helloworld","发布","none","logger","bin","系统","：","为","learning","周期","长度","配置","@","程序",",","初始","发布者","args","”","chatter","topic","*","关闭","init","文件","执行","-","get","类","scripts"],"title":"程序实现","title_tokens":["程序实现","程序","实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_10","text":"对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口","text_tokens":["对","销毁","编程","一个","进行","流程","对象","填充","发布","：","节点","初始化","并","程序","消息","如果","初始","接口","发布者","实现","，","创建","我们"," ","以上","分析","如下","关闭","想要","话题"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_11","text":"我们再来看下订阅者的实现方法。","text_tokens":["。","下","方法","订阅","再","的","我们","者","来看","实现"],"title":"订阅者代码解析","title_tokens":["解析","者","订阅","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_12","text":"learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], },","text_tokens":["10","class","]","一个","coding","msg","的","std","数据","订阅","）","www","代码","points","ros2","__","后","加入","打开","def","创建","处理","父类","退出","hello","rclpy","i"," ","%",":","循环","name","\"","回调","主","!","subscription","python","/","对象","进行","示例","entry","py","usr","string","8","作者","标准","spin","guyuehome","“","env","#","完成","消息","world","日志","接口","pub","库","super","heard","类型","信息","self","如下","名","点","功能","=","编写","、","\\","shutdown","对","(","}","setup","{","选项","设置","[","destroy","说明","古月","（","_","utf","from","main","等待","节点",".","初始化","data","输出","并","，","subscribernode","s","console","让","create","listener","包","编译","入口","node","callback","需要","'","话题","import","知道","msgs","com","提示","python3",")","销毁","队列","info","函数","居","helloworld","none","logger","bin","系统","：","learning","长度","配置","@","程序",",","初始","args","”","sub","chatter","topic","定义","*","者","关闭","init","文件","执行","-","get","类","收到","scripts"],"title":"程序实现","title_tokens":["程序实现","程序","实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_13","text":"对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。","text_tokens":["。","下","对","回调","销毁","继续","编程","函数","一个","进行","流程","对象","的","数据","订阅","：","一定","节点","初始化","并","下来","程序","如果","world","初始","视觉","接口","实现","，","创建","处理","大家","啦","hello","我们","机器"," ","者","以上","之前","例程","分析","如下","过瘾","还","关闭","不","接下来","优化","想要","好","接下","基于","话题","通信"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_14","text":"在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。","text_tokens":["。","了","对","方式","做到","一个","中","的","相机","数据","问题","通过","过程","虽然","这个","传输","间","驱动","节点","并","和","并且","识别","联系","图像","周期","程序","将","做成","视觉","讲解","来讲","实现","对于","，","概念","机器人","开发","即可","在","我们","没有","就是","是","机器","两个","模块","但是","更好","物体","功能","模块化","话题","红色","没"],"title":"案例二：机器视觉识别","title_tokens":["二","：","视觉","案例","识别","机器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_15","text":"这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。","text_tokens":["webcam","一个","的","相机","范围","订阅","未来","效果","看到","保持","$","要","ros2","说干就干","即可","不变","这种"," ","软件","run","可移植性","第二","中是","。","可以","移植性","这个","标准","驱动","消息","设计","启动","修改","pub","更换","完全","在","啦","两个","保证","好","功能","第二个","以下","终端","了","_","节点","并","识别","就","思想","视觉","实现","，","可移植","是","来看","模块","？","放入","物体","需要","话题","如何","下","运行","ros","第一","二个","发布","第一个","learning","另","图像","移植","将","如果","sub","只","分别","先","我们","topic","定义","内","更好","模块化","红色"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_16","text":"learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], },","text_tokens":["webcam","10","定时器","class","]","一个","coding","msg","的","相机","imgmsg","bgr8","单位","）","video","publisher","www","代码","points","ros2","__","后","加入","打开","def","创建","处理","父类","退出","rclpy"," ","opencv","ret",":","循环","name","与","\"","raw","转换成","回调","换成","主","!","python","true","/","对象","进行","示例","cv2","成功","entry","py","usr","8","作者","spin","guyuehome","0","驱动","env","#","完成","读取","消息","日志","bridge","接口","已经","pub","to","库","super","类型","信息","self","timer","如下","名","秒","点","功能","=","编写","、","}","shutdown","(","setup","{","选项","if","设置","[","destroy","cap","imagepublisher","说明","古月","cv","（","_","utf","设备","from","main","等待","采集","节点",".","image","初始化","videocapture","输出","并","0.1","，","console","定时","让","视频","create","包","publish","编译","用于","入口","node","cvbridge","一帧","callback","需要","'","话题","import","知道","msgs","com","提示","python3","转换",")","销毁","队列","info","ros","publishing","函数","居","helloworld","发布","none","logger","bin","图像处理","系统","：","为","learning","sensor","周期","长度","图像","配置","@","将","frame",",","初始","如果","程序","发布者","args","sub","topic","*","号","稍后","关闭","init","文件","执行","-","read","get","类","scripts"],"title":"发布者代码解析","title_tokens":["解析","发布","发布者","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_17","text":"learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], },","text_tokens":["webcam","10","class","]","左上角","一个","coding","msg","的","imgmsg","bgr8","2","左上","订阅","<","范围","面积","）","显示","object","150","waitkey","上角","效果","video","scripts","255","www","imshow","代码","points","boundingrect","ros2","red","__","xy","continue","后","下限","retr","加入","img","打开","def","w","inrange","创建","处理","中心","父类","1","退出","rclpy","勾勒","np","hsv","detect"," ","opencv",":","噪声","循环","计算","name","与","\"","raw","findcontours","坐标","x","y","upper","for","转化成","imagesubscriber","回调","drawcontours","array","!","主","subscription","python","/","对象","进行","示例","cv2","检测","使用","entry","py","usr","转化","8","点画","作者","spin","5","guyuehome","0","和","env","#","mask","完成","消息","日志","bridge","接口","as","pub","hierarchy","to","已","库","in","super","类型","信息","self","如下","名","+","点","180","功能","一些","=","编写","、","}","chain","128","(","contours","化成","shutdown","setup","{","高","选项","if","设置","[","中","destroy","说明","古月","cv","（","所在","_","utf","from","main","等待","节点",".","image","初始化","data","输出","并","宽","从","receiving","，","console","让","numpy","create","及","listener","轮廓","包","编译","进入","用于","得到","入口","苹果","node","互相","bgr","去除","cvbridge","color","callback","需要","lower","上限","'","话题","import","知道","msgs","com","circle","提示","python3","转换",")","bgr2hsv","销毁","队列","info","ros","approx","函数","居","shape","helloworld","阈值","cvtcolor","none","logger","bin","图像处理","系统","：","为","learning","sensor","h","长度","图像","配置","@","像素","将",",","初始","int","frame","颜色","args","程序","sub","数值","太小","二值化","topic","者","*","模型","出来","cnt","关闭","init","文件","-","红色","get","类","list","90"],"title":"订阅者代码解析","title_tokens":["解析","者","订阅","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_18","text":"通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub","text_tokens":["webcam","变化","一步","一个","的","相机","焕然一新","$","代码","似乎","ros2","cam","！","不过","这","一句"," ","usb","软件","run","是不是","一新","这样","humble","进一步","。","写","有","换成","安装","当然","解","可以","使用","通过","标准","不太","驱动","又","一行","好像","换","接口","感觉","任何","不行","用","集成","什么样","install","协议","好","精简","功能","到","可能","通用","对","了","自己","什么","中","只要","也","不是","_","符合","apt","现在","节点","你","识别","呀","就","视觉","，","原本","复用","让","接口协议","是","得到","都","node","？","刚才","率","需要","话题","ros","exe","对劲","焕然","无论","发布","哪里","一般","做","目标","指令","得","常用","learning","图像","还有","sub","sudo","只","大家","我们","topic","么","例程","每换","直接","提高","不","-","耦"],"title":"案例三：机器视觉识别优化","title_tokens":["：","优化","视觉","案例","识别","机器","三"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_19","text":"话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息","text_tokens":["操作","info","hz","的","msg","发布","数据","bw","<","type","_","：","传输","常用","带宽","#","data","$","消息","列表","ros2","pub","echo","topic"," ","信息","频率","如下","命令","name","话题","查看","list",">"],"title":"话题命令行操作","title_tokens":["操作","命令","命令行","话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_20","text":"关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？","text_tokens":["给","肯定","一个","无法","的","数据","传递","系统","：","传输","和","需求","周期","完成","留","就","周期性","来讲","实现","通信","，","对于","数据传输","是否","几个","例子","特性","机器人","据传","呢","大家","这种","关于","我们","思考","这里","思考题","是","讲","复杂","机器","满足","方法","举","？","所有","能够","话题","单向","原理","适合","考题","到"],"title":"思考题","title_tokens":["思考题","考题","思考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_21","text":"https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":[":","topics","tutorials","ros","html",".","understanding","https","org","/","humble","-","docs","en","ros2"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/","text":"服务 话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。 通信模型 在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。 客户端/服务器模型 从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。 同步通信 这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。 一对多通信 比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。 服务接口 和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。 案例一：加法求解器 大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 运行效果 我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3 客户端代码解析 我们来看下客户端的实现方法。 程序实现 learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口 服务端代码解析 至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。 程序实现 learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_server = learning_service.service_adder_server:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口 案例二：机器视觉识别 好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。 运行效果 此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client 客户端代码解析 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], }, 服务端代码解析 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], }, 服务命令行操作 服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求 思考题 话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["通信接口","左上角","的","相机","打印输出","简单","绝大部分","2","订阅","客户","展现","150","人","同样","video","效果","不同","ints","列表","至于","img","机器人","之为","按照","父类","1","退出","用到","rclpy","数据类型","随时","开始","opencv","务器","这样","结果","反应","upper","。","drawcontours","最为","主","图像识别","无法","进行","此时","true","检测","entry","py","转化","request","once","作者","然后","5","0","“","访问","完成","界面","浏览","已经","接口","里程","具体","完全","srv","答","已","库","转圈圈","满足","叫做","以上","命令","adderclient","比比","有点","点","180","比比皆是","、","终端","最新","通用","(","contours","化成","setup","adderserver","objecty","但","中","后续","except","break","client","from","等待","of","后者","节点","并","初始化","输出","识别","链接","视觉","里程计","准确","很多","让","numpy","create","网站","当","org","编译","是","来看","反馈","核心","希望","service","callback","经常","上限","命令行","状态","每","add","传感器","python3","运行","上述","info","案例","exe","发布","logger","过程","唯一","求和","有所","配置","将","时候","invalid","颜色","”","请求","回想","通信模型","准备","数值","failed","我们","之前","init","想要","软硬","执行","50","红色","原理","考题","90","附近","一个","imgmsg","会","bgr8","传递","左上","范围","显示","面积","当前","ok","255","下来","$","代码","接收","points","red","后","continue","下限","cam","打开","开发","def","w","不过","创建","处理","接口类型","这种","done","detect","加法器"," ",":","那有","噪声","循环","name","相比","\"","raw","interface","上层","通信","d","服务器发送","有","在生活中","某个","understanding","传入","出去","示例","向","另外","时间","通过","同步","这个","查询","三个","驱动","和","env","其中","#","传递数据","bridge","sec","相对","tutorials","网络","啦","类型","频率","感器","常见","available","自定义","课程","功能","一些","正常","到","数据通","}","shutdown","对","\\","r","选项","服务器","response","[","处","说明","try","也","一","称之为","接口类","需求","并且","data","objectclient","receiving","类似","尽快","及","轮廓","得到","都","bgr","去除","了解","物体","刚才","假设","'","知道","import","msgs","这些","wait","提示","下","总结","队列","approx","场景","函数","else","shape","出现","时","cvtcolor","none","简称","基本","系统","传输","为","半天","learning","转圈","获取","程序","并不需要","判断",",","初始","发布者","async","args","sub","二","圈圈","前者","大家","一样","者","定义","出来","en","例程","文件","不好","类","收到","某些","two","10","之后","这么","数据","一对","waitkey","）","发给","object","www","我","boundingrect","__","xy","inrange","客户端","还是","勾勒","hsv","思考题","讲","usb","%","run","运动","介绍","就要","第二","findcontours","异步","y","humble","适合","成","imagesubscriber","给","回调","return","合理","array","subscription","result","python","使用","cv2","成功","usr","target","8","type","标准","spin","guyuehome","繁杂","3","设计","日志","启动","as","position","hierarchy","to","timeout","参考","集成","跟踪","封装","应该","思考","变成","信息","两个","所以","self","加法","学习","之间","域名","越好","一次","+","更加","objectx","第二个","=","可能","编写","chain","128","方式","什么","html","设置","浏览器","（","古月","放到","所在","_","不是","大部","控制指令","现在","你","image","宽","实现","自定","是否","网页","server","listener","包","进入","用于","但是","adder","接下来","node","a","color","需要","接下","b","com","circle","send","或者","居","控制","比如","跟随","很","bin","服务器端","图像处理","：","指令","常用","...","services","周期","长度","图像","frame","周期性","e","有所不同","分别","位置","cs","二值化","就是","存在","发","方法","各种","cnt","关闭","-","软硬件","docs","while",">","而是","问","继续","传感","提供","编程","class","]","大部分","coding","更","msg","流程","两种","页面","<","上角","看到","imshow","要","ros2","retr","加入","生活","中心","np","成为","sys","等等","返回","计算","与","一直","坐标","future","x","单向","for","转化成","电脑","要求","针对","等","!","sum","/","对象","可以","部分","点画","call","1.0","waiting","发送","本","根据","mask","好像","消息","incoming","岂","应用","在","in","super","求解","服务","again","机器","解析","形式","硬件","器","如下","打印","名","list","好","not","查看","多个","并不知道","操作","越快越好","了","多","{","高","一种","if","认为","destroy","cv","一问一答","加数","utf","main","不知","；",".","法器","就","从","command","，","console","雷达","越快","一起","看","入口","苹果","分析","互相","addtwoints","cvbridge","lower","话题","转换",")","机制","销毁","bgr2hsv","ros","第一","同步性","二个","阈值","第一个","一般","目标","sensor","服务端","@","argv","如果","像素","int","还有","宕机","太小","程序实现","https","getobjectposition","没有","绝大","模型","*","应答","拿到","exception","数据通信","不","官方","n","提到","get","上","—","scripts","h"],"title":"**服务**","title_tokens":["*","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_1","text":"话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。","text_tokens":["。","问","机制","ros","一种","无法","的","可以","使用","另外","发布","数据","订阅","同步","传输","常用","节点","效果","本","你","我","消息","将","准确","发布者","类似","实现","，","是否","答","这种","我们","一起","服务","者","讲"," ","方法","学习","之间","异步","话题","单向","多个","知道","—","收到","通信"],"title":"服务","title_tokens":["服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_2","text":"在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。","text_tokens":["问","继续","一个","的","更","相机","这么","数据","订阅","发给","我","不同","机器人","按照","这种","成为"," ","运动","一直","这样","单向","上层","通信","。","图像识别","此时","可以","使用","另外","通过","查询","这个","然后","驱动","和","发送","其中","好像","答","应用","在","服务","变成","机器","信息","形式","频率","课程","到","最新","对","了","高","中","节点","并","你","识别","实现","，","尽快","是","反馈","得到","希望","物体","需要","service","话题","机制","ros","或者","比如","跟随","发布","目标","传输","周期","有所","图像","时候","并不需要","请求","有所不同","通信模型","位置","一样","我们","模型","之前","发","应答","红色","附近","而是"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_3","text":"从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。","text_tokens":["。","问","操作","机制","某些","在生活中","针对","电脑","之后","某个","或者","服务器","/","的","进行","比如","此时","会","很","浏览器","数据","向","通过","简称","也","服务器端","页面","客户","展现","为","并","发送","你","我","时候","浏览","就","从","实现","请求","，","具体","网页","答","处理","在","生活","网站","客户端","这种","cs","我们","服务","叫做","就是"," ","来看","形式","模型","信息","反馈","务器","应答","各种","常见","返回","域名","需要","经常","上","收到","通信","服务器发送"],"title":"客户端/服务器模型","title_tokens":["务器","客户","服务器","客户端","/","服务","模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_4","text":"这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。","text_tokens":["。","越快越好","了","要求","到","或者","服务器","中","的","可以","浏览器","通过","一般","过程","服务器端","也","这个","同步","客户","称之为","半天","转圈","你","浏览","接收","判断","，","圈圈","网络","宕机","越快","转圈圈","之为","在","客户端","我们","没有","服务","是","信息","所以","那有","务器","应答","相比","越好","一直","假设","话题","不好","状态","反应","通信","可能"],"title":"同步通信","title_tokens":["通信","同步"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_5","text":"比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。","text_tokens":["。","服务器","一个","居","中","的","比如","可以","但","古月","唯一","服务器端","这个","客户","人","同样","并","看到","访问","界面","，","完全","通信模型","大家","网站","一样","客户端","没有","服务","存在","是","模型","所以","都","但是","务器","不","多个","每","通信"],"title":"一对多通信","title_tokens":["通信","一对","多"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_6","text":"和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。","text_tokens":["。","了","给","ros","一个","后续","中","的","比如","msg","使用","会","部分","数据","传递","也","标准","和",".","消息","要","传递数据","类似","还有","请求","，","srv","在","大家","位置","一样","还是","我们","服务","变成","是"," ","两个","反馈","定义","苹果","核心","方法","命令","介绍","文件","坐标","话题","这些","通信"],"title":"服务接口","title_tokens":["接口","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_7","text":"大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。","text_tokens":["two","提供","之后","一个","的","数据","简单","客户","下来","代码","ints","后","还是","客户端"," ","开始","务器","计算","就要","结果","成","通信","。","给","有","针对","进行","出去","可以","通过","这个","“","发送","相对","啦","封装","求解","应该","服务","两个","加法","器","功能","编写","对","了","服务器","加数","也","_","现在","节点","并","就","从","实现","，","当","是","反馈","得到","接下来","了解","需要","接下","add","ros","时","基本","服务器端","求和","将","”","请求","大家","我们","例程","应答","想要","官方","收到"],"title":"案例一：加法求解器","title_tokens":["加法","器","：","一","案例","求解"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_8","text":"我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3","text_tokens":["操作","下","。","终端","运行","提供","第一","一个","传入","的","二个","数据","2","加数","第一个","这个","_","客户","client","等待","求和","并","节点","发送","并且","服务端","learning","$","代码","3","第二个","启动","ros2","实现","请求","，","客户端","server","一起","我们","服务","是","两个"," ","看","run","例程","如下","adder","第二","service","结果","功能","原理"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_9","text":"我们来看下客户端的实现方法。","text_tokens":["。","下","方法","客户","客户端","的","我们","来看","实现"],"title":"客户端代码解析","title_tokens":["客户","解析","客户端","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_10","text":"learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], },","text_tokens":["two","class","]","一个","coding","的","打印输出","数据","2","客户","）","ok","www","代码","接收","ints","points","ros2","__","后","加入","打开","def","创建","接口类型","处理","父类","1","客户端","rclpy","done","加法器","sys"," ","%",":","务器","循环","计算","name","\"","future","interface","异步","for","d","!","sum","result","python","/","对象","进行","示例","成功","entry","py","usr","request","8","once","作者","spin","call","guyuehome","1.0","waiting","env","发送","#","完成","启动","接口","sec","as","srv","库","timeout","super","服务","again","两个","类型","信息","self","加法","如下","打印","adderclient","available","名","一次","+","自定义","not","功能","点","正常","=","编写","}","shutdown","(","方式","setup","{","r","选项","if","设置","服务器","response","[","except","destroy","说明","古月","（","try","加数","break","_","utf","client","from","接口类","等待","main","of","节点",".","法器","初始化","并","输出","，","自定","是否","console","让","create","包","编译","反馈","入口","adder","node","addtwoints","a","service","需要","'","import","知道","b","add","com","wait","python3",")","运行","销毁","send","info","函数","else","居","none","logger","bin","服务器端","系统","：","...","learning","配置","@","argv","将",",","初始","int","程序","args","async","e","请求","failed","定义","*","exception","关闭","init","文件","执行","-","get","类","收到","scripts","while"],"title":"程序实现","title_tokens":["程序实现","程序","实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_11","text":"对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口","text_tokens":["对","销毁","编程","服务器","一个","进行","流程","对象","数据","服务器端","：","客户","等待","节点","初始化","并","发送","程序","如果","初始","接口","实现","请求","，","创建","客户端","我们","服务"," ","以上","分析","如下","务器","应答","关闭","想要"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_12","text":"至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。","text_tokens":["。","了","回调","机制","什么","函数","服务器","中","的","出现","数据","时间","也","服务器端","订阅","不知","类似","实现","请求","，","至于","用到","服务","者","务器","有点","话题","知道","并不知道","通信"],"title":"服务端代码解析","title_tokens":["服务端","解析","代码","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_13","text":"learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_server = learning_service.service_adder_server:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], },","text_tokens":["two","提供","class","]","coding","的","数据","）","www","代码","ints","points","ros2","__","后","加入","打开","def","创建","处理","接口类型","父类","退出","rclpy","加法器"," ","%",":","务器","循环","计算","name","\"","结果","interface","d","回调","return","主","!","sum","python","/","对象","进行","示例","entry","py","usr","request","8","作者","spin","guyuehome","env","#","完成","日志","已经","接口","incoming","srv","库","super","服务","类型","信息","self","加法","如下","名","+","自定义","点","功能","=","编写","、","\\","shutdown","对","(","}","setup","{","adderserver","选项","设置","服务器","response","中","[","destroy","说明","古月","（","放到","_","utf","from","接口类","main","等待","节点",".","法器","初始化","输出","并","，","自定","console","让","create","server","包","编译","反馈","入口","adder","node","addtwoints","a","service","callback","需要","'","import","知道","b","add","com","提示","python3",")","销毁","info","函数","居","none","logger","bin","系统","：","求和","learning","配置","@","将","程序",",","初始","args","请求","定义","*","应答","关闭","init","文件","执行","-","n","get","类","收到","scripts"],"title":"程序实现","title_tokens":["程序实现","程序","实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_14","text":"对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口","text_tokens":["对","回调","销毁","编程","函数","服务器","一个","进行","流程","对象","处","向","通过","服务器端","：","客户","节点","初始化","并","服务端","程序","如果","初始","接口","实现","，","创建","客户端","我们","服务"," ","以上","反馈","分析","如下","务器","应答","关闭","想要","结果"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_15","text":"好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。","text_tokens":["。","下","了","机制","合理","的","流程","通过","不是","目标","识别","时候","视觉","已经","实现","，","回想","岂","啦","位置","当","求解","我们","服务","加法","器","更加","好","刚才","需要","物体","提到","知道","通信"],"title":"案例二：机器视觉识别","title_tokens":["二","：","视觉","案例","识别","机器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_16","text":"此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client","text_tokens":["。","终端","了","运行","有","上述","提供","exe","服务器","一个","认为","client","对象","此时","可以","相机","出现","会","发布","的","数据","时","订阅","服务器端","三个","：","目标","客户","然后","当前","；","驱动","节点","根据","发送","并且","识别","图像","learning","$","就","视觉","启动","ros2","请求","，","cam","准备","机器人","集成","分别","位置","客户端","跟踪","当","server","我们","服务","是","机器"," ","随时","usb","run","运动","务器","拿到","node","一次","service","需要","object","_"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_17","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], },","text_tokens":["class","]","coding","的","object","ok","www","代码","points","ros2","__","后","加入","打开","def","创建","父类","rclpy","done"," ","%",":","name","\"","future","interface","x","y","for","d","!","result","python","true","/","对象","进行","示例","entry","py","usr","target","request","8","once","作者","spin","call","guyuehome","1.0","waiting","env","#","完成","as","接口","sec","position","srv","库","timeout","super","服务","again","self","如下","available","自定义","not","功能","点","=","编写","\\","shutdown","}","(","setup","{","r","选项","if","设置","response","[","except","destroy","说明","古月","try","break","_","utf","client","from","等待","main","of","节点",".","初始化","并","识别","objectclient","，","自定","console","让","create","server","包","编译","入口","node","adder","service","需要","'","import","知道","com","wait","python3",")","销毁","send","info","else","居","none","logger","bin","系统","目标","：","...","learning","配置","@","程序",",","初始","args","async","e","请求","位置","getobjectposition","failed","定义","*","应答","exception","关闭","init","文件","n","-","get","类","scripts","while"],"title":"客户端代码解析","title_tokens":["客户","解析","客户端","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_18","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], },","text_tokens":["提供","10","class","]","左上角","一个","coding","msg","的","imgmsg","bgr8","数据","2","左上","订阅","<","范围","面积","）","显示","object","150","waitkey","上角","效果","video","scripts","255","www","imshow","代码","points","boundingrect","ros2","red","__","xy","continue","后","下限","retr","加入","img","打开","def","w","inrange","创建","处理","接口类型","中心","父类","1","退出","rclpy","勾勒","np","hsv","detect"," ","opencv","%",":","务器","噪声","循环","计算","name","与","\"","程序","raw","findcontours","interface","x","y","坐标","upper","for","d","转化成","imagesubscriber","回调","drawcontours","return","array","!","主","subscription","python","true","/","对象","进行","示例","cv2","检测","使用","entry","py","usr","target","转化","8","request","点画","作者","spin","5","guyuehome","0","和","env","#","mask","完成","消息","日志","as","接口","bridge","已经","position","srv","hierarchy","to","已","库","in","super","服务","类型","信息","self","如下","名","+","自定义","点","180","功能","objectx","一些","=","编写","、","\\","chain","128","(","contours","化成","对","shutdown","setup","高","{","选项","if","设置","服务器","objecty","response","[","中","destroy","说明","古月","cv","（","所在","_","utf","client","from","接口类","main","等待","节点",".","image","初始化","识别","data","输出","并","宽","从","receiving","command","，","自定","console","让","numpy","create","及","server","listener","轮廓","包","编译","进入","用于","反馈","得到","入口","苹果","node","互相","bgr","去除","cvbridge","adder","service","callback","color","物体","lower","上限","'","话题","import","需要","msgs","知道","com","circle","提示","python3","转换",")","bgr2hsv","销毁","队列","info","ros","approx","函数","else","居","shape","}","阈值","cvtcolor","none","logger","bin","图像处理","系统","目标","：","为","learning","sensor","h","长度","图像","配置","@","像素","将",",","初始","int","frame","颜色","invalid","args","sub","请求","数值","太小","getobjectposition","二值化","定义","*","者","模型","出来","cnt","关闭","init","文件","执行","-","n","50","红色","get","类","收到","list","90"],"title":"服务端代码解析","title_tokens":["服务端","解析","代码","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_19","text":"服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求","text_tokens":["操作","的","数据","<","type","_","：","call","常用","发送","#","data","$","列表","ros2","请求","服务","数据类型"," ","类型","如下","命令","name","service","查看","list",">"],"title":"服务命令行操作","title_tokens":["操作","命令行","命令","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_20","text":"话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。","text_tokens":["传感","通信接口","大部分","的","更","数据","两种","绝大部分","机器人","开发","不过","数据类型"," ","等等","就要","单向","适合","通信","。","最为","等","要求","针对","无法","部分","同步","标准","这个","和","繁杂","设计","接口","里程","应用","在","满足","服务","机器","类型","感器","硬件","比比","自定义","比比皆是","到","数据通","、","通用","了","高","中","一问一答","也","大部","控制指令","后者","需求","识别","视觉","里程计","类似","很多","，","雷达","自定","是","都","话题","这些","传感器","ros","场景","同步性","比如","过程","目标","指令","传输","常用","获取","周期","图像","时候","周期性","前者","位置","我们","绝大","定义","方法","数据通信","软硬","软硬件","控制"],"title":"思考题","title_tokens":["思考题","考题","思考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_21","text":"https://docs.ros.org/en/ humble /Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":[":","tutorials","ros","html",".","services","understanding","https","org","/","humble","-","docs"," ","en","ros2"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/","text":"通信接口 在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。 接口的定义 接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。 ROS通信接口 接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。 语言无关 为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。 标准接口 大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。 案例一：服务接口的定义与使用 了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。 接口定义 在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ... 程序调用 我们在代码中再来重点看下接口的使用方法。 客户端接口调用 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 服务端接口调用 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 案例二：话题接口的定义与使用 话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。 运行效果 现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub 接口定义 在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ... 程序调用 我们在代码中再来重点看下接口的使用方法。 发布者接口调用 learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 订阅者接口调用 learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 接口命令行操作 接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义 参考链接 https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["webcam","通信接口","件夹","rosidl","左上角","的","相机","个人","组成","2","订阅","文件夹","客户","150","人","video","效果","不同","由","列表","讲解","不用","例子","64","img","机器人","想","之为","父类","1","退出","用到","rclpy","形象化","project","软件","开始","来","opencv","务器","结果","这样","upper","上边","。","最为","drawcontours","详细","txt","主","true","进行","此时","检测","py","不管","转化","相互","request","string","once","作者","5","度","0","“","完成","转到","布尔","已经","接口","pub","1s","高效","具体","完全","srv","概念","已","库","以上","命令","还","像是","程序模块","减少","find","180","便于","原色","、","终端","(","种","contours","包装","化成","值","objecty","后续","中","但","except","它","break","client","from","等待","of","并","节点","再","输出","标准接口","识别","初始化","链接","用来","视觉","主程序","准确","让","numpy","create","org","编译","是","三原色","整型","cmakelists","反馈","核心","希望","---","回到","哪些","share","一帧","service","二维","callback","上限","命令行","轮子","状态","每","about","图形","python3","添加","运行","info","案例","exe","约束","传输数据","发布","logger","内容","过程","求和","配置","回顾","一下","时候","将","invalid","中来","摄像","造","颜色","”","自言自语","请求","第三个","数值","关系","failed","我们","这里","形象","之前","诞生","旋转","init","执行","衍生","50","红色","谁","90","exec","数","一个","imgmsg","会","每隔","bgr8","传递","建立","图形化","左上","范围","显示","面积","当前","小海","联系","ok","255","下来","$","代码","做成","随处","red","后","continue","下限","cam","打开","开发","def","w","这","创建","处理","接口类型","一句","包含","为了","每个","done","detect"," ",":","噪声","循环","name","加","\"","线速度","raw","interface","字符","速度","通信","编写程序","d","有","换成","他们","某个","安装","肯定","区分","结构","出去","示例","另外","重要","通过","进度","查询","这个","三个","和","手机","驱动","env","#","bridge","sec","tutorials","小海龟","描述","自动","类型","软件开发","保证","路径","常见","available","自定义","课程","功能","一些","正常","领域","到","}","\\","shutdown","对","r","选项","服务器","response","use","[","package","说明","try","也","看看","称之为","一","接口类","并且","data","objectclient","receiving","类似","编译器","标值","到底","依赖","及","轮廓","publish","得到","都","bgr","语言","？","去除","了解","物体","'","将要","知道","import","msgs","如何","这些","32","匹配","wait","c++","提示","下","队列","approx","函数","else","typec","各个","shape","无论","那","时","你来我往","cvtcolor","generate","none","系统","别人","传输","为","learning","获取","程序",",","初始","args","async","位","sub","输入","二","发布者","micro","大家","由于","却是","定义","出来","者","en","例程","布尔值","看上","文件","类","收到","各个领域","目的","10","工作","int64","表示","关心","数据","接口定义","waitkey","）","object","publisher","必须","www","boundingrect","关注","__","xy","inrange","required","还是","客户端","勾勒","hsv","usb","讲","%","run","运动","第三","调用函数","把","海龟","第二","findcontours","字符串","y","humble","成","imagesubscriber","给","回调","return","array","subscription","result","理解","python","使用","cv2","usr","target","8","代码生成","标准","spin","分成","guyuehome","参数","30","连接","设计","日志","as","启动","and","几个","position","hierarchy","to","timeout","参考","封装","角度","两个","信息","所以","self","加法","输入输出","学习","之间","一次","+","objectx","第二个","=","形状","编写","降低","转到第","有机","20","可能","128","chain","涵盖","自己","什么","html","摄像头","只要","（","所在","古月","不是","_","包中","现在","image","宽","无关","实现","自定","是否","插头","中间","里","找到","group","get","server","包","interfaces","listener","进入","用于","member","模块","才能","node","接下来","插座","a","color","需要","接下","更为","b","com","circle","send","或者","调用","反正","对应","居","比如","话","很","数组","数据结构","有没有","bin","图像处理","体","：","指令","常用","...","single","周期","长度","图像","随处可见","彼此","frame","e","两者","中有","runtime","只","分别","位置","二值化","就是","topic","方法","各种","cnt","关闭","packages","动作","-","docs","生成",">","while","而是","继续","提供","编程","举个","class","]","coding","更","msg","std","两","<","上角","看到","imshow","只有","要","可见","ros2","retr","主要","呢","生活","中心","关于","np","等等","g","计算","与","的话","坐标","future","x","单向","for","转化成","电脑","等","!","sum","对象","/","可以","bool","部分","点画","call","1.0","根据","发送","waiting","重复","mask","消息","应用","depend","键盘","generators","在","build","in","super","什么样","服务","again","解析","机器","硬件","concepts","如下","打印","上去","重点","名","好","not","查看","精髓","操作","自语","了","多","{","高","一种","if","destroy","cv","转","看上去","show","utf","符合","main","；",".","int32","就","从","objectposition","command","方便","，","subscribernode","好奇","广泛","action","三原","一起","看","入口","苹果","就行","众多","互相","cvbridge","xml","lower","话题","default","转换",")","机制","销毁","以及","bgr2hsv","研究","一边","ros","第一","define","角速度","二个","阈值","第一个","目标","得","像素点","sensor","服务端","像素","@","int","还有","甚至","最终","固定","像头","太小","无论是","https","getobjectposition","没有","*","模型","直接","应答","exception","坐标值","交流","n","三种","控制","上","—","list","h"],"title":"**通信接口**","title_tokens":["通信","通信接口","*","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_1","text":"在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。","text_tokens":["。","自语","给","多","什么","ros","或者","通信接口","理解","一个","后续","中","无论","的","更","可以","会","个人","重要","你来我往","数据","传递","内容","系统","不是","标准","人","并","接口","自言自语","，","甚至","概念","让","这","呢","在","大家","还是","用到","我们","服务","为了","是","就是"," ","两个","定义","都","学习","？","动作","好","交流","话题","将要","结构","—","通信","而是"],"title":"通信接口","title_tokens":["通信接口","通信","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_2","text":"接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。","text_tokens":["各个领域","目的","提供","编程","通信接口","举个","工作","一个","的","更","相机","关心","组成","数据","建立","图形化","必须","代码","只有","要","可见","随处","由","关注","不用","例子","开发","主要","机器人","这","之为","呢","生活","一句","还是","关于","每个"," ","usb","软件","讲","形象化","开始","等等","g","运动","调用函数","加","把","线速度","结果","速度","编写程序","通信","。","给","最为","有","电脑","等","他们","安装","肯定","结构","进行","可以","使用","通过","相互","这个","标准","和","手机","驱动","参数","连接","接口","高效","具体","完全","概念","应用","键盘","在","什么样","服务","解析","两个","机器","软件开发","所以","硬件","输入输出","常见","像是","程序模块","一次","上去","好","一些","正常","精髓","领域","编写","到","、","形状","原色","了","多","包装","什么","r","自己","一种","值","摄像头","但","中","只要","所在","它","看上去","也","符合","称之为","；","节点","输出","并且","就","主程序","准确","类似","实现","，","插头","让","广泛","三原","包","一起","是","三原色","反馈","模块","都","才能","回到","插座","？","更为","话题","知道","每","b","图形","这些","匹配","如何","机制","运行","ros","调用","函数","约束","反正","typec","各个","无论","比如","传输数据","角速度","很","时","那","发布","话","内容","系统","指令","传输","得","常用","像素点","图像","配置","随处可见","程序","时候","彼此","摄像","像素","两者","输入","固定","像头","无论是","micro","大家","关系","我们","却是","就是","形象","定义","出来","直接","诞生","看上","-","控制","上"],"title":"接口的定义","title_tokens":["的","定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#ros","text":"接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。","text_tokens":["。","有机","机制","有","种","到","ros","一种","的","可以","使用","通过","也","别人","目标","常用","联系","节点","重复","程序","代码","造","接口","方便","，","让","这","分别","依赖","我们","服务","就是","是","一起"," ","定义","核心","各种","才能","之间","动作","减少","便于","轮子","三种","话题","每","通信","降低","、"],"title":"ROS通信接口","title_tokens":["ros","通信接口","通信","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_3","text":"为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。","text_tokens":["10","编程","通信接口","数","一个","int64","的","表示","msg","会","每隔","数据","两","当前","小海","看到","做成","不同","64","机器人","包含","还是","为了"," ","开始","运动","海龟","坐标","结果","x","y","单向","通信","。","等","sum","python","区分","结构","此时","可以","使用","bool","另外","部分","通过","进度","这个","三个","分成","度","和","“","完成","转到","30","设计","布尔","接口","1s","srv","小海龟","在","描述","自动","服务","机器","两个","保证","加法","学习","还","功能","到","20","、","转到第","了","什么","一种","中","转","节点",".","int32","用来","无关","，","是否","中间","里","让","action","编译","是","整型","反馈","就行","---","语言","a","一帧","需要","二维","话题","知道","状态","每","b","32","这些","c++","机制","一边","ros","对应","比如","数组","数据结构","过程","体","目标","传输","求和","周期","一下","将","位","请求","”","还有","最终","数值","只","由于","分别","我们","这里","定义","之前","应答","布尔值","旋转","文件","动作","生成","90"],"title":"语言无关","title_tokens":["语言","无关"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_4","text":"大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。","text_tokens":["。","给","了","涵盖","ros","安装","件夹","中","的","可以","系统","标准","文件夹","看看","接口","几个","，","打开","好奇","呢","在","大家","找到","到底","我们","定义","路径","众多","哪些","？","share","文件","可能"],"title":"标准接口","title_tokens":["标准接口","接口","标准"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_5","text":"了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。","text_tokens":["。","下","了","有","以及","研究","提供","第一","通信接口","一个","中","的","二个","相机","使用","对象","发布","可以","进行","第一个","查询","三个","目标","驱动","节点","发送","再","服务端","识别","回顾","下来","图像","时候","代码","就","从","视觉","接口","讲解","实现","请求","，","第三个","概念","在","位置","封装","我们","角度","服务","是","机器","定义"," ","之前","例程","来","第三","接下来","了解","第二","需要","这样","接下","课程","话题","第二个","如何","收到","通信","编写"],"title":"案例一：服务接口的定义与使用","title_tokens":["：","与","一","案例","的","服务","使用","定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_6","text":"在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ...","text_tokens":["exec","rosidl","的","表示","会","接口定义","<","$","代码","不同","后","required"," ","project","name","\"","的话","坐标","interface","x","y","通信","上边","。","txt","true","/","使用","bool","部分","代码生成","这个","根据","#","完成","接口","srv","depend","generators","在","build","自动","服务","两个","还","一次","find","功能","、","}","了","(","{","选项","中","package","也","_","of",".","int32","就","编译器","，","让","group","依赖","包","编译","interfaces","是","cmakelists","反馈","member","---","语言","需要","xml","default",")","添加","generate","过程","：","目标","指令","为","...","learning","获取","服务端","配置","中有","runtime","位置","getobjectposition","我们","定义","例程","packages","文件","get","生成",">"],"title":"接口定义","title_tokens":["定义","接口定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_7","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["。","下","方法","重点","在","再","中","的","我们","代码","使用","看","接口","来"],"title":"程序调用","title_tokens":["调用","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_8","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["class","coding","的","object","ok","www","ros2","__","def","创建","父类","rclpy","done"," ","%",":","name","\"","future","interface","x","y","for","d","!","result","python","true","/","对象","进行","示例","py","usr","target","request","8","once","作者","spin","call","guyuehome","1.0","waiting","env","#","as","接口","sec","position","srv","库","timeout","super","服务","again","self","available","自定义","not","=","\\","shutdown","(","r","if","response","except","destroy","说明","古月","try","break","_","utf","client","from","等待","main","of","节点",".","初始化","并","识别","objectclient","，","自定","create","node","service","'","import","com","wait","python3",")","销毁","send","info","else","居","none","logger","bin","目标","...","learning","@",",","初始","args","async","e","请求","位置","getobjectposition","failed","定义","*","应答","exception","关闭","init","n","-","get","类","while"],"title":"客户端接口调用","title_tokens":["客户","客户端","调用","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_9","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["提供","10","class","]","左上角","一个","coding","msg","的","imgmsg","bgr8","数据","2","左上","订阅","<","范围","面积","）","显示","object","150","waitkey","上角","效果","video","255","www","imshow","boundingrect","ros2","red","__","xy","continue","后","下限","retr","img","def","w","inrange","创建","处理","接口类型","中心","父类","1","退出","rclpy","勾勒","np","hsv","detect"," ","opencv","%",":","务器","噪声","循环","计算","name","与","\"","raw","findcontours","interface","x","y","坐标","upper","for","d","转化成","imagesubscriber","回调","drawcontours","return","array","!","主","subscription","python","true","/","对象","进行","示例","cv2","检测","使用","py","usr","target","转化","8","request","点画","作者","spin","5","guyuehome","0","和","env","#","mask","消息","日志","as","接口","bridge","已经","position","srv","hierarchy","to","已","库","in","super","服务","类型","信息","self","名","+","自定义","180","objectx","一些","=","、","\\","chain","128","(","contours","化成","对","shutdown","高","if","服务器","objecty","response","[","中","destroy","说明","古月","cv","（","所在","_","utf","from","接口类","main","等待","节点",".","image","初始化","识别","data","输出","并","宽","从","receiving","command","，","自定","numpy","create","及","server","listener","轮廓","进入","用于","反馈","得到","入口","苹果","node","互相","bgr","去除","cvbridge","service","callback","color","物体","lower","上限","'","话题","import","msgs","com","circle","提示","python3","转换",")","bgr2hsv","销毁","队列","info","ros","approx","函数","else","居","shape","阈值","cvtcolor","none","logger","bin","图像处理","目标","为","learning","sensor","h","长度","图像","@","像素","将",",","初始","int","frame","颜色","invalid","args","sub","请求","数值","太小","getobjectposition","二值化","定义","*","者","模型","出来","cnt","关闭","init","执行","-","n","50","红色","get","类","收到","list","90"],"title":"服务端接口调用","title_tokens":["服务端","调用","接口","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_10","text":"话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。","text_tokens":["。","继续","换成","通信接口","案例","的","发布","不管","有没有","也","目标","人","周期","识别","中来","从","视觉","接口","类似","，","想","位置","我们","服务","没有","是","机器","定义","之前","把","需要","衍生","话题","通信"],"title":"案例二：话题接口的定义与使用","title_tokens":["二","：","与","案例","话题","的","使用","定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_11","text":"现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub","text_tokens":["终端","。","运行","到","ros","第一","exe","一个","中","此时","的","相机","使用","会","发布","二个","数据","出去","第一个","订阅","三个","：","标准","目标","这个","_","；","现在","节点","驱动","并","image","识别","图像","learning","将","消息","就","$","视觉","启动","ros2","pub","sub","，","第三个","cam","分别","位置","封装","我们","是","topic"," ","定义","以上","usb","来","run","第三","打印","希望","node","第二","需要","interface","功能","object","话题","谁","第二个","成"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_12","text":"在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ...","text_tokens":["rosidl","一个","的","msg","表示","接口定义","$","代码","不同","后","required"," ","project","name","\"","坐标","interface","x","y","通信","。","txt","/","进行","使用","这个","根据","#","完成","消息","接口","generators","在","描述","自动","服务","还","find","功能","、","}","了","(","{","选项","中","package","_",".","int32","objectposition","编译器","，","标值","让","包","编译","interfaces","是","cmakelists","语言","需要","话题","default",")","generate","内容","过程","：","目标","...","learning","配置","位置","我们","定义","例程","坐标值","生成"],"title":"接口定义","title_tokens":["定义","接口定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_13","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["。","下","方法","重点","在","再","中","的","我们","代码","使用","看","接口","来"],"title":"程序调用","title_tokens":["调用","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_14","text":"learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["webcam","10","class","]","左上角","一个","coding","msg","的","imgmsg","bgr8","2","左上","订阅","<","范围","面积","）","显示","object","150","waitkey","上角","效果","publisher","video","255","www","imshow","boundingrect","ros2","red","__","xy","continue","后","下限","retr","img","def","w","inrange","创建","处理","中心","父类","1","退出","rclpy","勾勒","np","hsv","detect"," ","opencv",":","噪声","循环","计算","name","与","\"","raw","findcontours","interface","x","y","坐标","upper","for","转化成","imagesubscriber","回调","drawcontours","array","!","主","subscription","python","/","对象","进行","示例","cv2","检测","使用","py","usr","转化","8","点画","作者","spin","5","guyuehome","0","和","env","#","mask","消息","日志","bridge","接口","as","pub","position","hierarchy","to","已","库","in","super","类型","信息","self","名","+","自定义","180","objectx","一些","=","、","chain","128","(","contours","化成","shutdown","高","if","objecty","[","中","destroy","说明","古月","cv","（","所在","_","utf","from","main","等待","节点",".","image","初始化","data","输出","并","宽","从","objectposition","receiving","，","自定","numpy","create","及","listener","轮廓","publish","进入","用于","得到","入口","苹果","node","互相","bgr","去除","cvbridge","color","callback","lower","上限","'","话题","import","msgs","com","circle","提示","python3","转换",")","bgr2hsv","销毁","队列","info","ros","approx","函数","居","shape","发布","阈值","cvtcolor","none","logger","bin","图像处理","目标","为","learning","sensor","h","长度","图像","@","像素","将",",","初始","int","frame","发布者","颜色","args","sub","数值","太小","位置","二值化","topic","定义","*","者","模型","出来","cnt","关闭","init","-","50","红色","get","类","list","90"],"title":"发布者接口调用","title_tokens":["发布","调用","发布者","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_15","text":"learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["10","class","一个","coding","msg","的","std","数据","订阅","object","www","ros2","__","后","def","创建","处理","父类","退出","rclpy"," ","%",":","循环","name","\"","字符串","interface","字符","x","y","d","回调","主","!","subscription","python","/","对象","进行","示例","py","usr","string","target","8","作者","spin","guyuehome","env","#","消息","日志","接口","position","库","super","类型","信息","self","名","自定义","=","、","\\","shutdown","对","(","destroy","说明","古月","（","_","utf","from","main","等待","节点",".","初始化","输出","并","objectposition","，","自定","subscribernode","create","listener","入口","node","callback","'","话题","import","msgs","com","提示","python3",")","销毁","队列","info","函数","居","none","logger","bin","目标","learning","长度","@",",","初始","args","sub","位置","topic","定义","*","者","关闭","init","执行","-","get","类","收到"],"title":"订阅者接口调用","title_tokens":["者","订阅","接口","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_16","text":"接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义","text_tokens":["操作","详细","某个","的","package","show","系统","<","：","_","接口定义","包中","常用","#","$","列表","ros2","接口"," ","定义","如下","命令","name","interface","功能","查看","list",">"],"title":"接口命令行操作","title_tokens":["操作","命令","命令行","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_17","text":"https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["ros","define","html","use","/","package","single",".","and","tutorials","https","org","interfaces"," ","en","concepts",":","-","interface","humble","docs","about"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/","text":"动作 机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。 通信模型 举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。 客户端/服务器模型 动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。 一对多通信 和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。 同步通信 既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。 由服务和话题合成 大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。 案例一：小海龟的动作 我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback 案例二：机器人画圆 如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。 运行效果 启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。 接口定义 例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是动作的目标，enable为true时，表示开始运动； 第二块是动作的执行结果，finish为true，表示动作执行完成； 第三块是动作的周期反馈，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ... 通信模型 通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。 服务端代码解析 learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], }, 客户端代码解析 learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], }, 动作命令行操作 动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["execute","通信接口","二块","rosidl","的","简单","订阅","客户","效果","不同","由","列表","多少","例子","竟然","机器人","想","按照","父类","退出","用到","rclpy","i","数据类型","project","随时","开始","理","来","务器","这样","结果","0.5","智能","转个","上边","。","txt","主","加深","true","进行","思路","entry","py","上","作者","度","0","发送给","完成","读取","接口","1s","具体","概念","库","画圆","满足","命令","还","第一块","find","点","便于","既然","、","终端","(","setup","过","但","中","其","key","client","from","等待","并","节点","再","初始化","识别","输出","链接","分拣","试一试","actionserver","请","让","当","org","--","编译","是","cmakelists","清楚","反馈","希望","---","callback","命令行","状态","每","received","add","theta","python3","运行","info","publishing","使","案例","实时","发布","logger","过程","送给","配置","管理","一下","处理函数","请求","通信模型","较长","先","我们","之前","旋转","init","执行","turtle1","原理","不会","一个","会","每隔","就此","虽然","当前","ok","小海","所处","下来","$","代码","接收","points","后","直到","圆周运动","打开","def","这","创建","接口类型","处理","range","包含","这种","rotateabsolute","done"," ","导航",":","是不是","循环","name","相比","\"","interface","turtlesim","通信","d","写","有","某个","肯定","understanding","示例","另外","时间","通过","进度","同步","这个","三个","和","env","#","1.57","装","相对","再用","仔细","tutorials","小海龟","自动","actionclient","仅仅","类型","真器","自定义","功能","以下","到","}","shutdown","对","仿真器","选项","多少度","服务器","response","[","package","succeed","说明","一点","也","actions","一","接口类","需求","data","底层","类似","编译器","抓取","到底","publish","复杂","都","语言","？","发出","假设","'","知道","import","动图","如何","这些","wait","下","场景","控","函数","那","时","teleop","generate","哪里","none","系统","为","learning","转圈","告诉","获取","程序",",","初始","发布者","args","async","二","就此结束","圈","大家","一样","finish","定义","者","en","handle","例程","absolute","文件","达到","类","收到","眼前","10","目的","之后","表示","feedback","这么","数据","一对","接口定义","）","rejected","www","__","合成","required","客户端","%","run","运动","第三","介绍","把","海龟","第二","异步","humble","回调","return","完整","result","理解","python","使用","当中","成功","usr","8","type","标准","spin","取消","guyuehome","30","同时","日志","启动","enable","参考","封装","角度","信息","两个","moving","self","能","起来","一段","第三块","一次","负责","基于","=","20","可能","一套","编写","方式","什么","html","设置","背后","（","古月","模拟","根本","不是","_","现在","实现","三块","名字","自定","是否","含义","送餐","server","get","包","interfaces","应用层","模块","但是","才能","node","接下来","需要","接下","更为","com","circle","send","调用","结束","行为","居","比如","某一","很","姿态","有没有","毕竟","bin","服务器端","：","指令","常用","...","圆周","周期","整个","秘密","分别","位置","就是","turtle","臂","不仅","方法","关闭","动作","-","docs","生成","动",">","而是","sleep","举个","编程","class","]","流程","coding","msg","<","movecircleactionserver","看到","没错","只有","指定","ros2","加入","accepted","呢","其实","坐标","future","遥控","特性","段时间","for","goal","进度条","等","针对","隐藏","!","/","对象","可以","一块","bool","部分","发现","拒绝","不仅仅","送货","根据","发送","又","消息","rotate","还会","被","应用","键盘","generators","time","在","in","super","服务","应带","机器","解析","一点一点","如下","合适","一段时间","名","好","list","not","state","查看","movecircleactionclient","多个","操作","了","多","{","一种","if","拒绝执行","destroy","顺利","movecircle","转","utf","main","；",".","实际","int32","就","从","，","console","action","一起","看","入口","分析","话题","只能","default",")","机制","销毁","一边","ros","第一","机械","某","目标","得","服务端","@","如果","常常","最终","仿真","move","干什么","https","没有","模型","第二块","*","直接","不","控制","360","像","—","scripts"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_1","text":"机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。","text_tokens":["。","对","机制","等","目的","某个","ros","场景","一种","完整","理解","一个","行为","中","的","可以","某一","流程","另外","会","这么","那","简单","很","也","系统","这个","目标","不仅仅","送货","并","需求","识别","管理","分拣","就","从","实现","，","具体","被","常常","名字","应用","机器人","概念","含义","键盘","在","送餐","用到","这种","满足","我们","就是","是","机器","仅仅","复杂"," ","不仅","运动","进行","动作","需要","好","功能","遥控","智能","便于","上","—","这些","通信","、"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_2","text":"举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。","text_tokens":["10","之后","举个","一个","的","表示","每隔","当前","ok","多少","后","例子","直到","想","机器人","这"," ","随时","开始","运动","把","这样","段时间","转个","通信","。","进度条","肯定","可以","使用","当中","时间","进度","度","取消","发送","完成","30","装","1s","在","机器","信息","一点一点","命令","一段","合适","还","一段时间","20","到","、","了","多少度","一点","转","根本","不是","现在","并","再","就","，","让","到底","是","反馈","才能","？","发出","需要","假设","更为","知道","机制","控","结束","行为","比如","有没有","哪里","过程","指令","得","转圈","告诉","一下","如果","圈","我们","没有","旋转","不","动作","执行","360","像","眼前"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_3","text":"动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。","text_tokens":["。","什么","之后","一边","结束","机械","服务器","一个","实时","中","的","使用","姿态","状态","就此","也","服务器端","过程","这个","目标","客户","当前","和","发送","周期","又","所处","再","就","如果","同时","整个","类似","后","通信","，","抓取","想","让","机器人","就此结束","干什么","客户端","当","服务","是","机器"," ","模型","反馈","开始","导航","臂","运动","务器","信息","起来","动作","坐标","执行","达到","控制","收到","动","可能"],"title":"客户端/服务器模型","title_tokens":["务器","客户","服务器","客户端","/","服务","模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_4","text":"和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。","text_tokens":["。","下","有","服务器","一个","中","的","可以","毕竟","服务器端","客户","和","发送","完成","只有","，","机器人","大家","一样","客户端","先","服务","机器","都","运动","但是","务器","命令","才能","动作","执行","多个","只能","通信"],"title":"一对多通信","title_tokens":["通信","一对","多"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_5","text":"既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。","text_tokens":["。","机制","有","通信接口","一种","过","中","的","进行","使用","那","数据","也","过程","同步",".","接口","，","action","我们","是","定义","反馈","之前","介绍","文件","动作","既然","通信"],"title":"同步通信","title_tokens":["通信","同步"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_6","text":"大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。","text_tokens":["。","下","机制","有","隐藏","调用","一种","服务器","一个","的","表示","其","使用","会","时","发布","发现","也","服务器端","过程","不是","三个","客户","目标","订阅","和","发送","再","周期","没错","底层","发布者","秘密","请求","，","还会","仔细","竟然","实现","应用","大家","客户端","当","其实","服务","应带","是","就是"," ","看","两个","模块","反馈","者","运动","务器","应用层","是不是","命令","来","动作","基于","话题","动图","收到","通信","上边"],"title":"由服务和话题合成","title_tokens":["合成","和","话题","服务","由"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_7","text":"我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback","text_tokens":["。","theta","对","}","send","仿真器","info","{","案例","加深","理解","/","的","可以","某","使用","teleop","feedback","姿态","key","goal","_","：","turtlesim","一","小海","下来","$","指定","1.57","启动","ros2","rotate","再用","，","小海龟","概念","仿真","让","action","按照","rotateabsolute","我们","--"," ","turtle","run",":","运动","真器","命令","node","接下来","absolute","\"","海龟","动作","接下","-","turtle1","控制","以下","到"],"title":"案例一：小海龟的动作","title_tokens":["小海龟","：","一","小海","海龟","案例","动作","的"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_8","text":"如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。","text_tokens":["。","有","针对","编程","服务器","一个","但","中","的","使用","通过","过程","虽然","服务器端","客户","和","并","实际","下来","代码","就","接口","实现","试一试","，","通信","请","机器人","让","呢","在","圈","客户端","封装","我们","服务","一起","是","机器"," ","来","直接","务器","方法","希望","接下来","？","动作","好","接下","假设","基于","话题","特性","如何","转个","一套","不会","而是"],"title":"案例二：机器人画圆","title_tokens":["二","机器人","：","画圆","案例","机器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_9","text":"启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。","text_tokens":["终端","。","下","运行","之后","结束","服务器","背后","中","的","可以","示例","模拟","服务器端","_","：","客户","client","目标","度","这个","和","learning","发送","并","服务端","看到","30","完成","一下","$","下来","就","启动","ros2","实现","，","最终","move","机器人","action","分别","客户端","server","我们","服务","机器"," ","两个","开始","反馈","run","信息","运动","务器","分析","例程","命令","接下来","一次","动作","接下","原理","每"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_10","text":"例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是动作的目标，enable为true时，表示开始运动； 第二块是动作的执行结果，finish为true，表示动作执行完成； 第三块是动作的周期反馈，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ...","text_tokens":["二块","rosidl","的","表示","接口定义","当前","$","代码","不同","后","机器人","required","包含"," ","project","开始","运动","第三","name","\"","第二","结果","interface","。","txt","true","进行","/","一块","使用","bool","成功","部分","通过","标准","三个","根据","#","完成","接口","enable","generators","在","自动","角度","机器","第三块","第一块","还","自定义","find","功能","state","到","}","(","{","选项","中","package","movecircle","不是","_","；","并",".","int32","三块","编译器","，","自定","是否","让","action","包","编译","interfaces","cmakelists","是","反馈","---","语言","需要","default",")","ros","第一","时","generate","过程","：","目标","指令","为","...","learning","周期","配置","位置","finish","我们","定义","第二块","例程","旋转","动作","执行","生成"],"title":"接口定义","title_tokens":["定义","接口定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_11","text":"通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。","text_tokens":["。","写","运行","结束","服务器","一个","思路","的","送给","目标","客户","一","和","并","发送","发送给","周期","下来","一下","程序","代码","后","相对","，","通信模型","机器人","较长","客户端","我们","服务","就是","机器","信息","模型","开始","反馈"," ","理","运动","务器","清楚","之前","例程","起来","分析","相比","接下来","动作","这样","接下","话题","控制","通信"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_12","text":"learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["execute","sleep","之后","class","]","一个","coding","的","msg","feedback","表示","movecircleactionserver","）","当前","www","代码","points","ros2","__","后","圆周运动","加入","打开","def","创建","接口类型","处理","range","父类","退出","rclpy","i"," ","%",":","运动","务器","循环","name","\"","结果","interface","0.5","for","goal","d","回调","return","主","!","result","python","true","/","对象","进行","示例","成功","entry","py","usr","8","作者","spin","guyuehome","0","度","env","#","30","完成","消息","接口","库","time","in","super","角度","服务","类型","信息","moving","self","如下","名","负责","自定义","点","功能","state","=","到","编写","、","}","shutdown","(","setup","{","选项","设置","服务器","[","destroy","succeed","说明","古月","movecircle","（","_","utf","from","接口类","main","等待","节点",".","初始化","并","从","actionserver","，","自定","console","让","action","server","包","publish","编译","反馈","入口","node","callback","需要","'","import","知道","com","circle","python3",")","销毁","info","publishing","函数","居","发布","none","logger","bin","系统","目标","：","...","learning","圆周","周期","服务端","配置","@","程序",",","初始","处理函数","args","最终","move","finish","定义","*","handle","关闭","init","文件","动作","执行","-","get","360","类","收到","scripts"],"title":"服务端代码解析","title_tokens":["服务端","解析","代码","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_13","text":"learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["之后","class","]","一个","coding","的","msg","feedback","数据","客户","）","rejected","www","代码","接收","points","ros2","__","后","圆周运动","加入","accepted","机器人","def","打开","创建","接口类型","处理","父类","退出","客户端","rclpy","done"," ","开始","%",":","运动","务器","循环","name","\"","future","interface","结果","异步","for","goal","d","回调","return","主","!","result","python","true","/","对象","进行","示例","entry","py","usr","8","拒绝","作者","spin","guyuehome","env","发送","#","完成","读取","消息","日志","启动","接口","enable","被","库","super","actionclient","服务","机器","类型","self","能","如下","名","自定义","not","功能","点","state","movecircleactionclient","=","编写","、","}","shutdown","(","方式","{","setup","选项","if","设置","服务器","拒绝执行","response","[","destroy","说明","古月","movecircle","（","顺利","_","utf","client","from","接口类","等待","main","节点",".","初始化","输出","并","，","自定","console","让","action","server","包","编译","反馈","入口","希望","node","callback","需要","'","import","知道","received","com","circle","wait","add","python3",")","销毁","send","info","使","函数","居","时","none","logger","bin","服务器端","系统","目标","：","为","learning","圆周","周期","获取","配置","@","程序","如果",",","初始","args","async","请求","最终","move","finish","定义","*","handle","关闭","init","文件","动作","执行","-","get","类","收到","scripts"],"title":"客户端代码解析","title_tokens":["客户","解析","客户端","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_14","text":"动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求","text_tokens":["操作","send","info","的","数据","goal","<","type","_","：","常用","发送","#","data","$","列表","ros2","请求","action","服务","数据类型"," ","类型","如下","命令","name","动作","查看","list",">"],"title":"动作命令行操作","title_tokens":["操作","命令行","命令","动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":[":","tutorials","actions","ros","html",".","understanding","https","org","/","humble","-","docs","en","ros2"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/","text":"参数 话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。 通信模型 比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。 全局字典 在ROS系统中，参数是以全局字典的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。 可动态监控 在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。 案例一：小海龟例程中的参数 在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 参数列表 参数查询与修改 $ ros2 param describe turtlesim background_b $ ros2 param get turtlesim background_b $ ros2 param set turtlesim background_b 10 参数文件保存与加载 $ ros2 param dump turtlesim >> turtlesim.yaml $ ros2 param load turtlesim turtlesim.yaml 案例二：参数编程 接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。 运行效果 $ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle 代码解析 learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], }, 案例三：机器视觉应用 参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。 运行效果 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180 代码解析 learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["param","左上角","的","相机","组成","问题","简单","2","订阅","150","video","效果","影响","不同","由","列表","多少","说干就干","img","机器人","名称","父类","退出","1","用到","hello","变量","rclpy","opencv","开始","来","upper","。","drawcontours","主","图像识别","进行","熟悉","检测","entry","py","默认值","string","挺","转化","作者","然后","5","度","形态","0","端口","发送给","访问","完成","读取","已经","接口","已","库","set","叫做","timer","命令","还","点","180","便于","、","最新","提炼","(","contours","化成","setup","值","中","key","一两句","from","等待","节点","初始化","再","并","识别","输出","不如","链接","动态","视觉","哪个","很多","重新","让","numpy","create","编码","org","编译","是","清楚","来看","核心","new","callback","上限","命令行","那个","integer","python3","运行","info","案例","exe","辨率","logger","过程","送给","配置","一下","时候","将","颜色","通信模型","数值","先","我们","号","init","执行","50","红色","90","变化","一个","imgmsg","会","考虑","bgr8","左上","范围","显示","面积","小海","255","下来","$","代码","points","red","后","continue","下限","cam","打开","即可","def","w","这","创建","处理","办法","detect"," ",":","噪声","循环","name","\"","raw","turtlesim","通信","d","写","有","understanding","默认","示例","通过","查询","这个","高级","驱动","和","env","declare","#","bridge","tutorials","小海龟","比较","类型","真器","功能","一些","到","}","全局变量","对","shutdown","仿真器","load","选项","[","说明","也","一","data","分辨","receiving","类似","s","不少","定时","及","轮廓","得到","都","作用","parameters","优化","？","bgr","去除","了解","物体","'","知道","import","msgs","如何","这些","提示","c++","下","队列","all","approx","函数","大大","shape","teleop","三","cvtcolor","none","系统","传输","格式","为","learning","获取","程序",",","初始","args","sub","输入","二","很大","大家","一样","者","出来","en","例程","value","文件","类","共享","某些","10","表示","parameternode","数据","全局","waitkey","）","object","大大提高","www","mbot","boundingrect","关注","__","xy","合成","inrange","条","环境","勾勒","hsv","usb","%","run","介绍","把","海龟","就要","findcontours","y","humble","成","imagesubscriber","回调","array","subscription","理解","python","使用","cv2","usr","8","加载","type","spin","guyuehome","参数","连接","日志","as","几个","background","hierarchy","to","参考","信息","self","两句","区域","叫","起来","+","=","可能","编写","chain","丰富","128","方式","什么","立刻","html","设置","（","古月","所在","易用","真实","_","输入框","不是","image","宽","实现","是否","以","含义","敏感","listener","包","进入","用于","可","node","接下来","color","需要","接下","字典","配置文件","b","com","circle","或者","改变","居","比如","易用性","bin","图像处理","：","常用","周期","长度","图像","frame","整个","体验","分别","二值化","就是","存在","么","turtle","键和值","方法","cnt","关闭","nodeb","动作","-","docs",">","继续","提供","定时器","编程","class","]","yaml","coding","后边","msg","单位","<","nodea","上角","imshow","指定","ros2","从而","retr","加入","呢","中心","np","比较简单","等等","一两","计算","与","坐标","x","参数值","特性","分辨率","曝光","for","转化成","等","!","键值","/","对象","可以","参数设置","部分","点画","每次","非常","发送","本","mask","dump","消息","修改","应用","robot","在","in","super","服务","机器","解析","如下","打印","光线","名","list","秒","美颜","多个","了","{","高","一种","if","destroy","cv","监控","utf","main",".","就","从","，","console","跟","保存","看","入口","苹果","滑动","互相","其他","cvbridge","lower","话题","转换",")","机制","销毁","bgr2hsv","ros","某","阈值","目标","传输方式","sensor","@","像素","如果","麻烦","int","仿真","太小","https","模型","*","节","describe","不","parameter","提高","三种","get","像","—","scripts","h"],"title":"**参数**","title_tokens":["参数","*"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_1","text":"话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。","text_tokens":["。","全局变量","共享","机制","方式","某些","运行","ros","编程","一种","多个","中","的","可以","数据","全局","系统","传输","常用","传输方式","节点","本","再","参数","程序","已经","类似","，","是否","机器人","这","在","大家","变量","我们","服务","c++","是","清楚"," ","机器","节","来","介绍","不","了解","动作","便于","话题","知道","三种","字典","—","通信","、"],"title":"参数","title_tokens":["参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_2","text":"比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。","text_tokens":["的","相机","会","考虑","问题","面积","nodea","效果","影响","不同","多少","关注","后","这","条"," ","usb","等等","曝光","分辨率","。","有","图像识别","进行","可以","使用","参数设置","部分","通过","度","驱动","端口","和","参数","连接","在","机器","区域","美颜","功能","一些","到","什么","设置","中","也","输入框","节点","识别","分辨","就","视觉","哪个","很多","，","是否","编码","是","都","核心","作用","滑动","需要","那个","配置文件","这些","或者","改变","比如","辨率","阈值","过程","格式","图像","配置","时候","程序","整个","输入","分别","很大","一样","我们","就是","nodeb","文件","执行","像"],"title":"通信模型","title_tokens":["模型","通信","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_3","text":"在ROS系统中，参数是以全局字典的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。","text_tokens":["。","了","有","等","什么","ros","或者","编程","键值","理解","一个","中","的","可以","后边","使用","组成","全局","真实","也","系统","这个","然后","为","形态","和","参数","访问","时候","就","由","，","以","数值","合成","即可","名称","在","一样","跟","我们","叫做","就是","存在","是"," ","像","号","键和值","叫","？","名","参数值","字典"],"title":"全局字典","title_tokens":["字典","全局"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_4","text":"在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。","text_tokens":["。","共享","丰富","了","对","有","最新","立刻","编程","一个","中","的","比如","某","可以","进行","会","也","高级","非常","节点","获取","参数","访问","如果","ros2","修改","，","从而","数值","这","在","办法","大家","用到"," ","都","其他","知道","特性","可能"],"title":"可动态监控","title_tokens":["可","动态","监控"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_5","text":"在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["。","下","了","仿真器","提供","中","的","熟悉","使用","teleop","key","通过","也","这个","_","一","小海","和","参数","$","ros2","，","不少","小海龟","仿真","含义","在","我们"," ","turtle","run","例程","方法","真器","起来","命令","node","海龟","命令行","turtlesim"],"title":"案例一：小海龟例程中的参数","title_tokens":["例程","小海龟","：","一","小海","海龟","案例","参数","中","的"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_6","text":"","text_tokens":[],"title":"参数列表","title_tokens":["参数","列表"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_7","text":"$ ros2 param describe turtlesim background_b $ ros2 param get turtlesim background_b $ ros2 param set turtlesim background_b 10","text_tokens":["background","describe","param","_","10","get","set","$","turtlesim","b"," ","ros2"],"title":"参数查询与修改","title_tokens":["参数","与","查询","修改"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_8","text":"$ ros2 param dump turtlesim >> turtlesim.yaml $ ros2 param load turtlesim turtlesim.yaml","text_tokens":[">","param","turtlesim","load",".","yaml","dump","$"," ","ros2"],"title":"参数文件保存与加载","title_tokens":["加载","与","文件","参数","保存"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_9","text":"接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。","text_tokens":["。","了","写","函数","设置","中","的","可以","使用","简单","一两句","和","参数","下来","读取","程序","一下","就","实现","体验","，","几个","这","在","比较","先","我们","比较简单","开始","都","两句","来","一两","方法","接下来","就要","接下"],"title":"案例二：参数编程","title_tokens":["二","：","编程","案例","参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_10","text":"$ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle","text_tokens":["param","_","robot","name","parameter","learning","declare","set","$"," ","turtle","ros2","run"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_11","text":"learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], },","text_tokens":["param","定时器","class","]","一个","coding","parameternode","的","2","单位","）","www","mbot","代码","指定","列表","points","ros2","__","后","加入","打开","def","创建","父类","退出","hello","rclpy"," ","%",":","循环","name","\"","参数值","回调","主","!","python","/","默认","对象","示例","进行","entry","py","usr","默认值","string","8","type","作者","spin","guyuehome","env","参数","declare","#","发送","发送给","读取","完成","日志","接口","修改","robot","库","super","set","信息","self","timer","如下","打印","秒","点","功能","=","到","编写","、","}","shutdown","(","setup","{","值","选项","设置","中","[","destroy","说明","古月","（","_","utf","from","main","等待","节点",".","初始化","并","输出","从","，","s","console","定时","重新","让","create","包","编译","入口","new","node","parameters","callback","需要","'","import","知道","com","python3",")","销毁","all","info","函数","居","none","logger","bin","送给","系统","：","为","learning","周期","配置","@","将","程序",",","初始","args","数值","*","关闭","parameter","init","value","文件","执行","-","get","类","scripts"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_12","text":"参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。","text_tokens":["。","下","了","对","继续","提炼","运行","变化","设置","大大","中","的","可以","示例","使用","会","挺","阈值","易用性","易用","也","过程","不是","每次","不如","大大提高","参数","效果","识别","再","程序","代码","不同","麻烦","视觉","就","已经","动态","修改","，","说干就干","应用","机器人","呢","在","大家","敏感","比较","先","环境","我们","是","机器"," ","么","来看","看","光线","还","优化","？","提高","把","物体","如何","成"],"title":"案例三：机器视觉应用","title_tokens":["应用","：","视觉","案例","机器","三"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_13","text":"$ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180","text_tokens":["param","exe","_","object","learning","$","red","ros2","cam","set","detect"," ","usb","run","node","parameter","180","upper","h"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_14","text":"learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], },","text_tokens":["param","10","class","]","左上角","一个","coding","的","msg","表示","imgmsg","bgr8","2","左上","订阅","<","范围","面积","）","显示","object","150","waitkey","上角","效果","video","scripts","255","www","imshow","代码","points","boundingrect","ros2","red","__","xy","continue","后","下限","retr","加入","img","打开","def","w","inrange","创建","处理","中心","父类","1","退出","rclpy","勾勒","np","detect","hsv"," ","opencv","%",":","噪声","循环","计算","name","与","\"","raw","findcontours","坐标","x","y","参数值","upper","d","for","转化成","imagesubscriber","回调","drawcontours","array","!","主","subscription","python","/","对象","进行","示例","cv2","检测","使用","entry","py","usr","通过","转化","8","点画","作者","spin","5","guyuehome","0","和","env","参数","#","declare","mask","完成","读取","消息","日志","bridge","接口","as","hierarchy","to","已","库","in","super","类型","信息","self","如下","打印","名","+","点","180","功能","一些","=","到","编写","、","}","chain","128","(","contours","化成","shutdown","setup","{","高","选项","if","设置","[","中","destroy","说明","古月","cv","（","所在","_","utf","from","main","等待","节点",".","image","初始化","识别","data","输出","并","宽","从","receiving","，","console","让","numpy","create","及","listener","轮廓","包","编译","进入","用于","得到","入口","苹果","node","互相","bgr","去除","cvbridge","color","callback","需要","lower","上限","'","话题","import","知道","msgs","integer","com","circle","提示","python3","转换",")","bgr2hsv","销毁","队列","info","ros","approx","函数","居","shape","阈值","cvtcolor","none","logger","bin","图像处理","系统","目标","：","为","learning","sensor","h","长度","图像","配置","@","像素","将",",","初始","int","frame","颜色","args","程序","sub","数值","太小","二值化","者","*","模型","出来","cnt","关闭","parameter","init","value","文件","-","50","红色","get","类","list","90"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":[":","tutorials","parameters","ros","html",".","understanding","https","org","/","humble","-","docs","en","ros2"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/","text":"分布式通信 智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统，可以实现多计算平台上的任务分配。 分布式通信 什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。 分布式网络搭建 除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。 树莓派配置 在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。 装系统 我们先要给树莓派装系统，这里我们选择的是Ubuntu Mate针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/ 装ROS2 在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。 编译代码 将我们课程的代码也下载到树莓派中，进行编译。 远程桌面 如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728 分布式数据传输 树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 * 如使用虚拟机，请将虚拟机网络修改为桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。 分布式网络分组 没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。 案例一：小海龟分布式控制 分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动。 $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端 案例二：话题分布式通信 我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串。 $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端 案例三：服务分布式通信 话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能。 案例四：机器视觉分布式应用 以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体。 $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。 参考链接 https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["your","同一个","webcam","端的","的","个","组成","问题","安排","讲过","一致","订阅","客户","效果","不同","由","先要","似乎","魅力","机器人","想","反过来","hello","用到","资料","来","务器","这样","智能","上边","。","nodes","无法","繁多","进行","挺","py","上","相互","然后","派","访问","完成","已经","pub","框架","完全","具体","用","domain","友好","以上","52785580","命令","还","有点","同一","、","过","中","key","依然","分配","节点","之外","并","识别","链接","再","视觉","很多","请","org","编译","是","笔记本","虚拟机","希望","经常","命令行","每","about","传感器","运行","案例","exe","实时","helloworld","发布","csdn","求和","配置","一下","将","如","摄像","分布","客户端程序","先","我们","这里","布式","之前","而言","计算机","红色","镜像","变化","一个","放","会","建立","download","显示","小海","下来","$","代码","后","cam","不过","开发","即可","这","ubuntu","处理","卡中","一句","频繁","这种"," ",":","字符","turtlesim","通信","有","放置","他们","安装","计算能力","结构","另外","通过","驱动","和","小组","#","blog","world","装","小海龟","网络","全都","于是","啦","比较","系列","感器","真器","事情","课程","功能","一些","感受","处于","到","没","发生","仿真器","除了","服务器","远程桌面","控制器","分布式应用","也","一","下载","采集","并且","轻松","类似","原本","笔记本电脑","复杂","都","？","物体","这些","下","小","bashrc","算机","服务器程序","出现","teleop","三","基本","系统","传输","为","qq","learning","程序","发布者","sub","二","较","大家","一样","者","en","例程","看上","确保","网上","122599728","之后","这么","数据","发给","我","测试","过来","压力","不在话下","mate","客户端","还是","环境","讲","usb","run","运动","海龟","字符串","humble","适合","给","任务分配","体积","之一","使用","成功","article","talker","一系列","连接","设计","选择","启动","任何","参考","所","卡顿","两个","信息","打通","派里","加法","叫","起来","学习","net","之间","此外","=","可能","编写","派端","什么","模式","html","摄像头","拆解","只要","模拟","树莓","不是","_","一系","局域网络","顺利实现","远程","你","几乎","实现","是否","里","采用","listener","带来","小型","才能","node","接下来","需要","接下","笔记","或者","带领","比如","毕竟","：","步骤","cpp","图像","鼠标","搭建","桥接","神奇","两者","中有","details","只","就是","topic","turtle","方法","各种","情况","动作","-","docs",">","而是","局域","继续","传感","提供","如此","流程","款","<","分布式系统","经典","ros2","数据传输","加入","主要","据传","呢","显示器","互通","桌面","export","计算","的话","等","电脑","针对","不够","/","可以","遇到","则","消耗","非常","sd","四","感觉","修改","岂","应用","局域网","键盘","在","服务","机器","放在","典型","concepts","如下","上去","好","任务","多个","流畅","操作","id","了","一切","多","更强","烧写","资源","顺利","pc","看上去","位于","监控","端","试试",".","实际","派装","就","基本一致","方便","，","整体","性能","虚拟","话题","demo","互联","机制","不在","ros","电机","能力","简而言之","做","作为","支持","平台","如果","分组","分布式","反过","变得","仿真","像头","真有","https","减轻","没有","*","直接","不","控制","像","—"],"title":"**分布式通信**","title_tokens":["分布","分布式","*","通信","布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_1","text":"智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统，可以实现多计算平台上的任务分配。","text_tokens":["。","运行","等","任务分配","多","能力","计算能力","一个","不够","繁多","的","算机","可以","出现","遇到","会","拆解","中","系统","不是","分布式系统","分配","将","平台","如果","压力","分布式","实现","，","分布","岂","机器人","里","全都","这","处理","减轻","卡顿","就是","机器"," ","放在","布式","计算","情况","计算机","？","经常","功能","智能","任务","多个","上","这些","到","、"],"title":"分布式通信","title_tokens":["通信","分布","分布式","布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_2","text":"什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。","text_tokens":["传感","变化","一个","放","的","组成","数据","款","分布式系统","下来","不同","由","压力","魅力","机器人","主要","不过","这","开发","处理","这种","环境","讲"," ","运动","计算","适合","通信","上边","。","有","电脑","等","体积","结构","可以","之一","另外","挺","相互","消耗","非常","派","驱动","和","设计","已经","任何","框架","完全","应用","于是","在","比较","机器","两个","放在","信息","典型","感器","派里","叫","起来","还","之间","上去","有点","此外","好","功能","任务","感受","到","可能","了","多","更强","什么","过","中","资源","控制器","树莓","看上去","位于","监控","也","一","节点","分配","远程","并且","就","视觉","实现","方便","，","原本","采用","笔记本电脑","是","复杂","笔记本","性能","都","接下来","？","需要","接下","每","这些","传感器","笔记","下","运行","ros","电机","小","带领","算机","比如","毕竟","做","系统","传输","为","作为","配置","将","平台","分布式","分布","较","只","大家","减轻","我们","就是","布式","之前","各种","看上","计算机","不","控制","上"],"title":"分布式通信","title_tokens":["通信","分布","分布式","布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_3","text":"除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。","text_tokens":["笔记","。","了","电脑","放置","除了","一个","的","使用","另外","控制器","模拟","树莓","派","之外","我","选择","平台","，","机器人","笔记本电脑","在","我们","机器","笔记本","计算","控制","上"],"title":"分布式网络搭建","title_tokens":["分布","网络","搭建","分布式","布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_4","text":"在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。","text_tokens":["。","有","的","可以","树莓","也","派","配置","很多","，","开发","参考","在","大家","先","我们","环境","资料","之前","都","好","需要","网上"],"title":"树莓派配置","title_tokens":["配置","派","树莓"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_5","text":"我们先要给树莓派装系统，这里我们选择的是Ubuntu Mate针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/","text_tokens":["。","镜像","给","了","针对","之后","烧写","/","的","可以","树莓","系统","download","：","下载","派","sd",".","链接","派装","选择","就","先要","启动","mate","，","ubuntu","卡中","https","org","我们","这里","是"," ",":","-","到"],"title":"装系统","title_tokens":["系统","装"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#ros2","text":"在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。","text_tokens":["。","，","端","电脑","系统","安装","ubuntu","和","好","在","一样","中","的","流程"," ","ros2","mate"],"title":"装ROS2","title_tokens":["ros2","装"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_6","text":"将我们课程的代码也下载到树莓派中，进行编译。","text_tokens":["。","，","也","代码","下载","派","课程","中","的","我们","将","进行","编译","到","树莓"],"title":"编译代码","title_tokens":["编译","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_7","text":"如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728","text_tokens":["。","操作","了","有","电脑","远程桌面","/","的","可以","流程","使用","通过","树莓","端","基本","也","一致","显示","系统","：","csdn","_","article","派","步骤","远程","和",".","访问","配置","连接","链接","blog","qq","鼠标","如果","就","基本一致","方便","，","网络","键盘","参考","显示器","在","大家","details","https","整体","桌面"," ","以上","52785580",":","直接","如下","net","不","的话","好","上","122599728"],"title":"远程桌面","title_tokens":["远程桌面","桌面","远程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_8","text":"树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 * 如使用虚拟机，请将虚拟机网络修改为桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。","text_tokens":["局域","同一个","一个","的","个","会","问题","讲过","订阅","效果","下来","测试","$","ros2","后","不过","这","呢","互通"," ","run","计算","这样","通信","。","电脑","等","nodes","他们","安装","无法","可以","使用","py","talker","派","和","小组","#","完成","连接","已经","启动","感觉","修改","具体","网络","用","局域网","所","在","服务","两个","打通","如下","命令","之间","好","事情","同一","处于","到","、","了","派端","发生","什么","模式","中","只要","pc","树莓","端","也","_","局域网络","节点","并","你","并且","就","实现","很多","，","请","里","listener","是","虚拟机","都","带来","虚拟","希望","接下来","？","需要","接下","命令行","话题","demo","互联","能力","算机","简而言之","发布","做","：","为","cpp","配置","一下","如","平台","将","桥接","神奇","如果","分组","发布者","中有","一样","我们","者","*","之前","直接","确保","而言","不","计算机","动作","像","而是"],"title":"分布式数据传输","title_tokens":["分布","据传","传输","数据","分布式","布式","数据传输"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_9","text":"没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。","text_tokens":["id","。","了","机制","电脑","到","同一个","提供","your","ros","bashrc","一个","端的","中","的","算机","可以","无法","问题","树莓","<","_","：","则","和","派",".","分配","小组","配置","将","分组","就","如果","不同","ros2","类似","实现","通信","，","两者","加入","=","即可","在","一句","domain","一样","我们","export"," ","计算","才能","计算机","这样","同一","处于","没",">"],"title":"分布式网络分组","title_tokens":["分布","网络","分组","分布式","布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_10","text":"分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动。 $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端","text_tokens":["。","了","派端","继续","电脑","仿真器","ros","或者","案例","过","中","的","可以","teleop","成功","这么","key","pc","建立","树莓","端","也","_","turtlesim","依然","小海","派","试试","经典","节点","#","测试","过来","$","神奇","分布式","已经","似乎","启动","反过","分布","，","是否","ros2","小海龟","网络","想","仿真","键盘","真有","在","反过来","先","我们"," ","turtle","布式","之前","例程","来","运动","run","真器","学习","node","海龟","一些","控制","流畅","上","—","通信"],"title":"案例一：小海龟分布式控制","title_tokens":["分布","小海龟","：","一","小海","海龟","案例","控制","分布式","布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_11","text":"我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串。 $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端","text_tokens":["。","下","派端","电脑","的","可以","helloworld","使用","发布","pc","树莓","端","订阅","_","派","试试","作为","learning","#","$","代码","world","发布者","ros2","任何","修改","，","pub","是否","sub","呢","在","先","hello","我们","topic"," ","者","之前","例程","直接","run","情况","不","？","字符串","字符","话题","通信","编写"],"title":"案例二：话题分布式通信","title_tokens":["通信","分布","二","：","案例","话题","分布式","布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_12","text":"话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能。","text_tokens":["。","派端","运行","不在","电脑","服务器","服务器程序","可以","顺利","问题","树莓","端","也","客户","求和","顺利实现","程序","不在话下","实现","，","客户端程序","客户端","还是","我们","没有","服务"," ","加法","务器","功能","话题"],"title":"案例三：服务分布式通信","title_tokens":["通信","分布","：","案例","服务","分布式","三","布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_13","text":"以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体。 $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。","text_tokens":["webcam","提供","如此","一个","端的","的","会","问题","安排","发给","下来","测试","$","代码","ros2","cam","机器人","开发","处理","频繁","用到"," ","usb","run","。","电脑","不够","可以","使用","通过","然后","一系列","非常","派","#","连接","任何","修改","网络","在","啦","友好","系列","机器","以上","还","好","功能","没","派端","了","一切","摄像头","中","只要","模拟","树莓","pc","端","也","_","一系","采集","节点","再","实际","识别","几乎","视觉","轻松","类似","，","复杂","都","小型","node","接下来","？","物体","需要","接下","这些","ros","exe","实时","做","系统","为","learning","支持","图像","配置","将","搭建","摄像","分布式","变得","sub","分布","像头","我们","没有","topic","布式","例程","方法","不","红色","上"],"title":"案例四：机器视觉分布式应用","title_tokens":["分布","应用","：","视觉","案例","四","机器","分布式应用","分布式","布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_14","text":"https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":[":","id","ros","html",".","-","https","org","/","humble","domain","docs","about","en","concepts"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2_%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/","text":"从本节开始，我们将进入第二个篇章，以ROS2的核心概念为线索，详细讲解ROS2的应用开发方法。","text_tokens":["。","详细","本节","二个","的","从本节","为","篇章","将","ros2","讲解","，","以","概念","应用","开发","开发方法","我们","进入","线索","开始","核心","方法","第二","第二个"],"title":"2 核心概念","title_tokens":["核心"," ","概念","2"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/","text":"Launch：多节点启动与配置脚本 到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是Launch启动文件。 它是ROS系统中多节点启动与配置的一种脚本。 Launch文件 这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。 多节点启动 运行效果 文件解析 learning_launch/simple.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'learning_topic' , executable = 'topic_helloworld_pub' , ), Node ( package = 'learning_topic' , executable = 'topic_helloworld_sub' , ), ]) 命令行参数配置 运行效果 文件解析 learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): rviz_config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ Node ( package = 'rviz2' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' , rviz_config ] ) ]) 资源重映射 运行效果 文件解析 learning_launch/remapping.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , namespace = 'turtlesim2' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , executable = 'mimic' , name = 'mimic' , remappings = [ ( '/input/pose' , '/turtlesim1/turtle1/pose' ), ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), ] ) ]) ROS参数设置 运行效果 文件解析 learning_launch/parameters.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node def generate_launch_description (): background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) ) return LaunchDescription ([ background_r_launch_arg , background_g_launch_arg , background_b_launch_arg , Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [{ 'background_r' : LaunchConfiguration ( 'background_r' ), 'background_g' : LaunchConfiguration ( 'background_g' ), 'background_b' : LaunchConfiguration ( 'background_b' ), }] ), ]) learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , namespace = 'turtlesim2' , name = 'sim' , parameters = [ config ] ) ]) Launch文件包含 运行效果 文件解析 learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction from launch_ros.actions import PushRosNamespace def generate_launch_description (): parameter_yaml = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ parameter_yaml_with_namespace ]) learning_launch/parameters_nonamespace.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [ config ] ) ]) 功能包编译配置 ... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ... 参考链接 https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docsros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["nonamespace","目的","编程","]","一个","textsubstitution","的","yaml","with","namespaces","前为","相当","namespace","效果","中多","没错","executable","代码","ros2","input","目前","打开","机器人","粘合","def","呢","包含","turtlesim2","多样"," ","来",":","g","name","与","这样","humble","turtlesim","pushrosnamespace","output","多样化","d","for","原有","。","return","launchconfiguration","完整","当然","肯定","频次","python","84","进行","/","可以","使用","参数设置","py","通过","glob","自由","substitutions","rviz2","一系列","description","os","每次","0","和","参数","好像","每当","启动","之高","pub","background","docs","tutorials","sources","groupaction","一次性","参考","在","描述","arg","系列","机器","解析","index","命令","还","config","上去","一次","+","好","模版","功能","基于","重","=","launch","到","编写","终端","}","丰富","了","方式","launchdescription","多","(","r","122","{","一种","html","设置","中","[","package","资源","它","映射","看上去","也","actions","_","一系","from","main","using","节点","答案",".","join","data","files","includelaunchdescription","链接","呀","就","类似","很多","，","rviz","remappings","vel","新","declarelaunchargument","org","这是","包","编译","resource","是","乍","mimic","都","核心","sim","node","parameters","？","ament","share","了解","remapping","需要","xml","'","命令行","import","default","如何","b",")","运行","ros","或者","大大","带领","为止","各个","helloworld","出现","那","有没有","cmd","generate","目前为止","过程","系统","：","large","directory","...","learning","阅读","配置","粘合剂","text","麻烦",",","组装","sub","输入","pose","甚至","脚本","大家","合剂","一样","https","我们","没有","就是","topic","simple","path","turtle","*","en","例程","各种","看上","packages","所有","turtlesim1","文件","arguments","value","parameter","-","turtle1","get","像","projects","docsros","pythonlaunchdescriptionsource"],"title":"**Launch：多节点启动与配置脚本**","title_tokens":["多","：","与","脚本","节点","启动","配置","launch","*"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch","text":"到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是Launch启动文件。 它是ROS系统中多节点启动与配置的一种脚本。","text_tokens":["终端","。","运行","方式","ros","当然","一种","肯定","一个","为止","中","的","可以","那","有没有","它","目前为止","系统","前为","每次","节点","答案","中多","配置","呀","麻烦","每当","启动","很多","，","目前","打开","机器人","脚本","新","一次性","呢","我们","没有","就是","是","机器"," ","都","命令","与","？","一次","所有","文件","好","需要","这样","launch","到"],"title":"Launch：多节点启动与配置脚本","title_tokens":["多","：","与","脚本","节点","配置","launch","启动"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_1","text":"这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。","text_tokens":["目的","编程","一个","的","相当","没错","代码","ros2","粘合","呢","多样"," ","来","这样","多样化","原有","。","完整","频次","python","进行","可以","使用","通过","自由","一系列","和","参数","好像","启动","之高","在","描述","系列","命令","还","上去","模版","功能","基于","launch","编写","丰富","了","中","它","看上去","也","一系","节点","呀","就","类似","很多","，","这是","是","乍","核心","了解","命令行","如何","ros","或者","大大","带领","各个","出现","那","过程","系统","阅读","配置","粘合剂","组装","输入","甚至","大家","合剂","一样","我们","就是","例程","各种","看上","文件","像"],"title":"Launch文件","title_tokens":["launch","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_1","text":"","text_tokens":[],"title":"多节点启动","title_tokens":["节点","启动","多"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_2","text":"","text_tokens":[],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_3","text":"learning_launch/simple.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'learning_topic' , executable = 'topic_helloworld_pub' , ), Node ( package = 'learning_topic' , executable = 'topic_helloworld_sub' , ), ])","text_tokens":[")","launchdescription","(","return","ros","]","/","[","package","helloworld","py","generate","actions","_","description","from","learning",".","executable",",","pub","sub","def","topic","simple"," ",":","node","'","import","=","launch"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_4","text":"","text_tokens":[],"title":"命令行参数配置","title_tokens":["参数","配置","命令行","命令"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_5","text":"","text_tokens":[],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_6","text":"learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): rviz_config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ Node ( package = 'rviz2' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' , rviz_config ] ) ])","text_tokens":[")","launchdescription","(","return","ros","]","python","/","package","[","py","generate","actions","_","rviz2","description","from","os","directory","learning",".","join","executable",",","rviz","def","index"," ","path","turtle",":","name","node","config","ament","packages","share","arguments","-","'","import","get","=","launch","d"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_7","text":"","text_tokens":[],"title":"资源重映射","title_tokens":["重","资源","映射"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_8","text":"","text_tokens":[],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_9","text":"learning_launch/remapping.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , namespace = 'turtlesim2' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , executable = 'mimic' , name = 'mimic' , remappings = [ ( '/input/pose' , '/turtlesim1/turtle1/pose' ), ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), ] ) ])","text_tokens":[")","launchdescription","(","return","ros","]","/","[","package","py","cmd","generate","actions","_","description","from","namespace","learning",".","executable",",","input","pose","remappings","def","vel","turtlesim2","output"," ","mimic",":","sim","name","node","turtlesim1","remapping","'","turtle1","import","turtlesim","=","launch"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#ros","text":"","text_tokens":[],"title":"ROS参数设置","title_tokens":["参数","ros","参数设置","设置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_10","text":"","text_tokens":[],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_11","text":"learning_launch/parameters.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node def generate_launch_description (): background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) ) return LaunchDescription ([ background_r_launch_arg , background_g_launch_arg , background_b_launch_arg , Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [{ 'background_r' : LaunchConfiguration ( 'background_r' ), 'background_g' : LaunchConfiguration ( 'background_g' ), 'background_b' : LaunchConfiguration ( 'background_b' ), }] ), ]) learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , namespace = 'turtlesim2' , name = 'sim' , parameters = [ config ] ) ])","text_tokens":["}",")","launchdescription","(","launchconfiguration","122","return","r","ros","{","b","]","84","python","/","textsubstitution","[","package","yaml","py","generate","actions","substitutions","_","description","from","os","directory","0","namespace","learning",".","join","executable","text",",","background","def","declarelaunchargument","get","turtlesim2","arg","default"," ","index","path",":","g","sim","name","parameters","node","ament","value","packages","share","config","'","import","turtlesim","=","launch"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_2","text":"","text_tokens":[],"title":"Launch文件包含","title_tokens":["launch","包含","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_12","text":"","text_tokens":[],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_13","text":"learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction from launch_ros.actions import PushRosNamespace def generate_launch_description (): parameter_yaml = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ parameter_yaml_with_namespace ]) learning_launch/parameters_nonamespace.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [ config ] ) ])","text_tokens":[")","launchdescription","(","return","nonamespace","ros","]","python","/","package","yaml","[","with","namespaces","py","generate","actions","_","pushrosnamespace","description","from","os","directory","namespace","turtlesim","learning",".","join","executable","includelaunchdescription",",","sources","groupaction","def","turtlesim2","index"," ","path",":","sim","name","parameters","node","ament","packages","share","parameter","config","'","import","get","=","launch","pythonlaunchdescriptionsource"],"title":"文件解析","title_tokens":["解析","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_14","text":"... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ...","text_tokens":[")","(","]","[","/","package","py","glob","_","os","...",".","files","data","join",",","rviz","resource","index"," ","path","*","name","config","ament","share","packages","+","xml","'","=","launch"],"title":"功能包编译配置","title_tokens":["功能","配置","编译","包"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docsros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["ros","html","/","large","main","using",".","projects","ros2","tutorials","https","org"," ","en",":","-","humble","docs","launch","for","docsros"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/","text":"TF：机器人坐标系管理神器 坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器——TF。 机器人中的坐标系 机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做基坐标系Base Frame，机器人安装位置在外部环境下的参考系叫做世界坐标系World Frame，机器人末端夹爪的位置叫做工具坐标系，外部被操作物体的位置叫做工件坐标系，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是基坐标系Base Link，雷达所在的位置叫做雷达坐标系laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做里程计坐标系odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做地图坐标系map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为平移和旋转两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实向量的数学描述。 ROS中TF功能的底层原理，其实就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。 TF命令行操作 ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。 小海龟跟随例程 这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 查看TF树 $ ros2 run tf2_tools view_frames 查询坐标变换信息 $ ros2 run tf2_ros tf2_echo turtle2 turtle1 坐标系可视化 $ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。 静态TF广播 我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为静态TF变换，我们来看看在程序中该如何实现？ 运行效果 $ ros2 run learning_tf static_tf_broadcaster 代码解析 learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？ TF监听 我们再来学习下如何查询两个坐标系之间的位置关系。 运行效果 $ ros2 run learning_tf tf_listener 代码解析 learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。 海龟跟随功能解析 运行效果 $ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 原理解析 在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？这两个向量我们可以根据海龟的位置话题计算出来，那这个位置向量不就容易得到了么。 我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心是这个向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。 Launch文件解析 learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ]) 坐标系动态广播 learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 海龟跟随 learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":["clock","呗","q","的","简单","2","广播","订阅","客户","ready","效果","executable","讲解","quaternion","机器人","名称","良好","之为","按照","基础","echo","慢慢","父类","1","退出","rclpy","来","务器","这样","两只","。","详细","最为","launchconfiguration","true","进行","熟悉","entry","py","监听器","turtle2","默认值","string","twist","request","作者","然后","又会有","5","形态","base","0","完成","10.0","已经","接口","时刻","里程","具体","srv","概念","用","库","报告","tf","叫做","标志","timer","外部","命令","还","有点","点","spawn","便于","你家","spawning","、","(","launchdescription","可视","setup","缓冲区","中","except","key","—","client","from","等待","依然","节点","初始化","rotation","并","再","链接","动态","里程计","哪个","很多","试一试","段","让","create","declarelaunchargument","speed","org","--","编译","是","清楚","欧拉角","核心","atan2","连线","哪些","share","失败","service","callback","命令行","could","每","the","python3","theta","运行","中该","info","中心点","案例","教材","基","rel","发布","logger","过程","内容","laser","人学","有所","配置","管理","将","时候","turtlename","请求","sudo","transformexception","数值","工具","准备","关系","先","我们","transformation","内","view","该","旋转","init","turtle1","原理","不会","变化","数","一个","false","说","会","5.0","范围","当前","小海","$","地图","代码","points","后","trans","打开","def","w","这","创建","处理","出","这种","done","神器"," ",":","是不是","循环","name","怎么样","\"","加","线速度","激光雷达","static","源","turtlesim","速度","外部环境","d","矩阵","geometry","有","异常","安装","一本","默认","示例","向","另外","重要","时间","通过","随便","substitutions","查询","这个","三个","可视化","child","和","env","其中","#","declare","world","successfully","相对","显得","transformbroadcaster","tutorials","小海龟","及时","ex","啦","描述","自动","真器","常见","spawner","功能","statictransformbroadcaster","一些","到","没","}","shutdown","对","发生","理论知识","仿真器","选项","服务器","[","理论","package","说明","try","turtletfbroadcaster","也","actions","看看","称之为","不要","pos","就绪","底层","中画","高中","分解","抓取","四乘","s","定时","publish","复杂","得到","都","累积","作用","parameters","？","了解","物体","'","import","知道","msgs","如何","这些","pkg","提示","下","函数","想起","euler","else","挑战","那","teleop","时","cmd","none","generate","基本","prefix","系统","为","意思","learning","link","获取","程序",",","初始","args","async","位","大家","一样","定义","出来","者","en","例程","向量","value","文件","类","同理","戳","following","之后","quat","表示","数据","全局","）","publisher","www","工件","变得复杂","__","xy","z","translation","0.0","客户端","is","环境","移动","%","run","运动","yaw","linear","海龟","humble","broadcaster","y","知识","两者之间","给","return","回调","移动机器人","完整","subscription","broadcaster2","result","理解","python","使用","转变成","成功","usr","target","8","rviz2","spin","f","guyuehome","header","参数","3","发生变化","启动","as","stamp","to","参考","封装","应该","角度","变成","两个","信息","self","欧拉","所以","起来","学习","spawned","之间","+","rate","基于","=","编写","on","动机","html","设置","背后","transformations","只要","（","所在","古月","forward","_","不是","apt","现在","更新","坐标系","实现","transform","是否","优先","中间","vel","scale","get","listener","包","进入","容易","管理系","sim","node","需要","frames","com","send","居","比如","跟随","算法","很",".__","姿态","odom","bin","跟随运动","：","指令","数学","周期","长度","frame","器类","两者","turtlefollowing","位置","就是","存在","么","turtle","监听","臂","看似","方法","至关","情况","关闭","距离","-","至关重要","docs","tf2","生成","动",">","继续","提供","定时器","class","]","底盘","coding","msg","空间","静态","树","保持","要","管理系统","ros2","怎样","平移","加入","主要","呢","中心","不变","其实","关于","变换","sendtransform","计算","与","坐标","x","格外","漂移","不断","参数值","!","tools","四元","/","对象","可以","buffer","部分","house","description","call","非常","1.0","根据","又","发送","四","消息","tflistener","缓冲","还会","被","夹","time","在","着急","super","服务","存储","机器","解析","roll","器","install","如下","statictfbroadcaster","名","好","not","查看","launch","操作","now","了","id","箭头","{","解决","一种","if","destroy","lookup","相应","utf","main","误差","试试",".","产生","包括","就","一只","房子","，","雷达","拆","console","rviz","map","怎么","4","保存","一起","看","入口","左边","话题","爪","末端","default","transformlistener","生变","finished","绝对","demo",")","转换","销毁","ros","机械","参考系","算出","broadcaster1","角速度","某","经过","做","目标","得","一层","计算出来","math","准备就绪","@","如果","变得","pose","否则","仿真","固定","angular","机器人学","sqrt","https","没有","*","transformstamped","转变","float","激光","不","parameter","source","pitch","方向","控制","上","世界","scripts"],"title":"**TF：机器人坐标系管理神器**","title_tokens":["：","机器人","tf","坐标","管理","神器","机器","坐标系","*"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf","text":"坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器——TF。","text_tokens":["。","给","了","提供","ros","完整","一个","中","的","熟悉","会","重要","—","也","系统","非常","人学","管理","坐标系","很多","，","概念","机器人","机器人学","在","基础","位置","关系","tf","我们","是","机器","存在"," ","神器","该","之间","？","坐标","如何","这些"],"title":"TF：机器人坐标系管理神器","title_tokens":["：","机器人","坐标","tf","管理","神器","机器","坐标系"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_1","text":"机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做基坐标系Base Frame，机器人安装位置在外部环境下的参考系叫做世界坐标系World Frame，机器人末端夹爪的位置叫做工具坐标系，外部被操作物体的位置叫做工件坐标系，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是基坐标系Base Link，雷达所在的位置叫做雷达坐标系laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做里程计坐标系odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做地图坐标系map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为平移和旋转两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实向量的数学描述。 ROS中TF功能的底层原理，其实就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。","text_tokens":["变化","一个","的","空间","会","简单","范围","工件","变得复杂","地图","要","管理系统","讲解","平移","机器人","主要","良好","呢","中心","出","其实","关于","环境","变换","移动"," ","坐标","格外","漂移","不断","知识","外部环境","两者之间","。","矩阵","详细","有","移动机器人","安装","一本","进行","可以","使用","重要","部分","通过","这个","又会有","形态","base","和","四","world","相对","里程","显得","被","夹","参考","在","tf","描述","封装","叫做","机器","两个","外部","之间","功能","一些","操作","对","了","动机","理论知识","中","理论","所在","也","误差","就","底层","坐标系","里程计","中画","分解","，","抓取","雷达","四乘","map","是","复杂","都","累积","管理系","哪些","？","物体","爪","末端","每","这些","下","绝对","ros","中心点","机械","教材","参考系","基","比如","跟随","那","odom","过程","基本","系统","laser","为","link","一层","人学","数学","管理","frame","变得","两者","固定","工具","机器人学","大家","位置","关系","一样","我们","就是","臂","看似","内","方法","至关","旋转","向量","至关重要","原理","世界"],"title":"机器人中的坐标系","title_tokens":["机器人","坐标","中","的","机器","坐标系"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_1","text":"ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。","text_tokens":["。","下","ros","一种","中","的","跟随","示例","使用","算法","通过","小海","坐标系","如何","，","小海龟","机器人","呢","tf","先","我们","机器","该","？","海龟","了解","坐标","基于","两只"],"title":"TF命令行操作","title_tokens":["操作","命令行","命令","tf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_2","text":"这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key","text_tokens":["。","demo","运行","之后","ros","安装","tools","一个","的","可以","示例","跟随","另外","会","teleop","py","key","通过","相应","这个","然后","跟随运动","apt","_","turtlesim","小海","效果",".","其中","$","就","一只","启动","ros2","如何","试一试","，","具体","小海龟","sudo","先","自动","包","我们"," ","turtle","来","run","运动","install","？","文件","海龟","需要","-","功能","humble","控制","tf2","launch"],"title":"小海龟跟随例程","title_tokens":["例程","小海龟","小海","海龟","跟随"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_2","text":"$ ros2 run tf2_tools view_frames","text_tokens":["view","_","tools","frames","$","tf2"," ","ros2","run"],"title":"查看TF树","title_tokens":["树","查看","tf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_3","text":"$ ros2 run tf2_ros tf2_echo turtle2 turtle1","text_tokens":["_","ros","echo","turtle1","$","tf2"," ","ros2","turtle2","run"],"title":"查询坐标变换信息","title_tokens":["信息","查询","变换","坐标"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_4","text":"$ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。","text_tokens":["。","下",")","(","案例","理解","背后","/","的","跟随","使用","py","prefix","rviz2","_","意思","小海","不要",".","$","ros2","，","怎样","rviz","小海龟","这","呢","大家","着急","tf","慢慢","先","--","我们","是"," ","turtle","run","来","方法","？","share","有点","海龟","了解","-","便于","原理","tf2","pkg","d"],"title":"坐标系可视化","title_tokens":["可视化","坐标系","可视","坐标"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_3","text":"我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为静态TF变换，我们来看看在程序中该如何实现？","text_tokens":["。","对","最为","发生","中该","之后","变化","安装","底盘","一个","呗","进行","的","中","比如","说","那","只要","很","简单","基本","也","系统","这个","静态","称之为","看看","和","试试","管理","程序","就","坐标系","发生变化","房子","哪个","实现","相对","，","拆","雷达","主要","机器人","之为","在","tf","位置","关系","这种","应该","我们","变换","是","机器"," ","来","作用","激光","常见","情况","？","不","之间","好","坐标","激光雷达","你家","如何","生变","不会"],"title":"静态TF广播","title_tokens":["静态","广播","tf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_5","text":"$ ros2 run learning_tf static_tf_broadcaster","text_tokens":["_","learning","tf","static","broadcaster","$"," ","ros2","run"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_6","text":"learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？","text_tokens":["戳","变化","class","clock","quat","数","一个","]","coding","的","msg","2","广播","5.0","）","静态","www","保持","代码","points","ros2","__","quaternion","后","z","平移","加入","打开","def","w","这","创建","translation","呢","0.0","父类","1","不变","退出","rclpy","变换"," ",":","sendtransform","yaw","循环","name","\"","坐标","x","static","broadcaster","源","y","geometry","!","python","四元","/","对象","进行","示例","向","使用","entry","py","usr","时间","8","house","查询","作者","spin","child","guyuehome","0","env","header","#","又","完成","消息","10.0","world","3","接口","stamp","to","库","tf","描述","super","两个","roll","self","欧拉","器","如下","statictfbroadcaster","点","功能","statictransformbroadcaster","=","到","编写","、","id","now","shutdown","(","}","了","setup","{","选项","设置","transformations","中","[","destroy","说明","古月","（","_","utf","from","main","等待","节点",".","初始化","rotation","并","坐标系","transform","，","console","段","让","包","编译","是","清楚","欧拉角","入口","node","？","需要","'","import","知道","msgs","如何","com","python3","转换",")","销毁","ros","euler","居","经过","none","bin","系统","目标","：","为","learning","配置","@","将","frame",",","初始","程序","时候","器类","args","位置","关系","我们","*","transformstamped","该","旋转","init","文件","-","pitch","get","tf2","类","scripts"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_4","text":"我们再来学习下如何查询两个坐标系之间的位置关系。","text_tokens":["。","下","查询","学习","之间","坐标","再","坐标系","位置","关系","的","我们","如何","两个","来"],"title":"TF监听","title_tokens":["监听","tf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_7","text":"$ ros2 run learning_tf tf_listener","text_tokens":["_","learning","tf","listener","$"," ","ros2","run"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_8","text":"learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。","text_tokens":["继续","定时器","class","]","quat","数","一个","coding","的","2","）","当前","www","代码","points","ros2","__","quaternion","后","z","trans","打开","加入","def","w","创建","处理","translation","父类","1","退出","rclpy","变换"," ","%",":","循环","name","\"","海龟","坐标","x","y","static","源","broadcaster","参数值","两只","。","return","!","异常","python","四元","/","默认","对象","示例","buffer","使用","进行","entry","py","usr","监听器","默认值","8","string","target","house","时间","作者","f","spin","guyuehome","0","1.0","env","参数","#","declare","完成","world","tflistener","as","接口","时刻","缓冲","to","用","库","报告","time","tf","ex","啦","super","存储","两个","信息","self","timer","如下","外部","之间","名","好","not","功能","点","=","到","on","编写","}","now","shutdown","(","对","了","{","setup","选项","设置","transformations","缓冲区","[","except","destroy","说明","古月","try","（","lookup","_","utf","from","main","等待","现在","节点",".","初始化","rotation","并","pos","坐标系","transform","，","s","console","优先","定时","让","create","listener","--","保存","包","进入","编译","入口","左边","node","失败","了解","需要","'","import","could","知道","transformlistener","com","python3",")","销毁","info","ros","案例","euler","居","挑战","某","跟随","姿态","none","logger","基本","bin","系统","目标","：","learning","获取","周期","有所","配置","@","程序","frame",",","初始","如果","args","否则","transformexception","数值","固定","大家","位置","我们","*","监听","关闭","init","parameter","value","文件","-","source","get","tf2","类","scripts",">"],"title":"代码解析","title_tokens":["解析","代码"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_9","text":"","text_tokens":[],"title":"海龟跟随功能解析","title_tokens":["解析","功能","海龟","跟随"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_10","text":"$ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key","text_tokens":["demo","_","following","learning","tf",".","py","key","$","turtlesim","teleop","launch"," ","turtle","ros2","run"],"title":"运行效果","title_tokens":["运行","效果"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_11","text":"在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？这两个向量我们可以根据海龟的位置话题计算出来，那这个位置向量不就容易得到了么。 我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心是这个向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。","text_tokens":["一个","的","表示","说","全局","2","广播","代码","要","这","中心","按照","1","变换"," ","运动","是不是","计算","怎么样","与","加","海龟","坐标","这样","速度","不断","两只","。","有","可以","向","随便","turtle2","时间","三个","这个","然后","和","根据","world","相对","还会","用","参考","在","tf","描述","封装","角度","叫做","两个","所以","真器","起来","学习","好","箭头","了","仿真器","解决","设置","中","也","不是","再","就","动态","坐标系","高中","实现","，","中间","怎么","一起","是","容易","看","得到","核心","连线","？","话题","如何","下","中心点","想起","参考系","算出","比如","跟随","某","那","时","很","发布","做","得","周期","计算出来","长度","两者","仿真","位置","我们","就是","定义","出来","么","监听","例程","方法","该","向量","不","距离","方向","turtle1","上","同理","动"],"title":"原理解析","title_tokens":["解析","原理"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#launch","text":"learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ])","text_tokens":["}","demo",")","launchdescription","(","launchconfiguration","following","return","{","ros","broadcaster2","]","broadcaster1","/","[","package","py","target","turtle2","generate","actions","substitutions","_","description","from","learning",".","executable","frame",",","turtlename","def","tf","declarelaunchargument","listener","default"," ","turtle",":","sim","name","node","parameters","value","'","broadcaster","turtle1","import","turtlesim","=","launch"],"title":"Launch文件解析","title_tokens":["解析","launch","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_12","text":"learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], },","text_tokens":["戳","变化","class","clock","数","]","一个","q","coding","的","msg","2","广播","订阅","）","小海","www","代码","points","ros2","__","quaternion","后","z","平移","加入","打开","def","名称","w","创建","处理","translation","0.0","父类","1","退出","rclpy","变换"," ",":","sendtransform","yaw","循环","name","\"","海龟","坐标","x","y","broadcaster","源","static","turtlesim","参数值","geometry","回调","!","subscription","python","四元","/","默认","对象","示例","使用","转变成","向","进行","py","usr","默认值","string","8","时间","entry","作者","f","spin","child","guyuehome","0","env","参数","#","declare","header","完成","消息","3","world","接口","transformbroadcaster","stamp","to","小海龟","用","及时","库","tf","super","变成","信息","roll","self","欧拉","器","如下","外部","点","功能","=","到","编写","、","}","now","id","(","shutdown","{","setup","选项","设置","transformations","中","[","destroy","说明","古月","turtletfbroadcaster","（","_","utf","from","main","等待","节点",".","初始化","并","rotation","更新","动态","坐标系","transform","，","console","优先","让","create","listener","包","编译","欧拉角","入口","node","callback","需要","'","import","知道","msgs","the","com","python3","theta",")","转换","销毁","send","ros","函数","euler","居","none","bin","系统","目标","：","为","learning","获取","配置","@","将","frame",",","初始","程序","args","turtlename","pose","否则","数值","位置","者","*","turtle","transformstamped","转变","transformation","旋转","关闭","init","parameter","value","文件","-","pitch","get","tf2","类","scripts"],"title":"坐标系动态广播","title_tokens":["动态","坐标系","广播","坐标"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_13","text":"learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], },","text_tokens":["following","变化","定时器","class","]","一个","false","coding","的","msg","表示","数据","2","客户","当前","ready","publisher","www","代码","points","ros2","__","xy","后","z","trans","打开","加入","def","创建","translation","父类","1","客户端","is","退出","rclpy","变换","done"," ",":","运动","务器","循环","计算","name","linear","\"","海龟","线速度","坐标","x","y","static","源","broadcaster","turtlesim","速度","参数值","geometry","return","!","异常","result","python","true","/","默认","对象","示例","buffer","使用","成功","twist","py","usr","通过","监听器","8","默认值","string","turtle2","时间","request","作者","f","spin","5","call","guyuehome","0","根据","env","参数","#","declare","发送","完成","消息","successfully","已经","接口","as","时刻","缓冲","srv","to","用","库","报告","time","tf","ex","super","角度","服务","标志","存储","信息","self","timer","如下","外部","还","spawned","spawner","名","+","rate","not","功能","spawn","点","查看","spawning","=","到","on","没","、","}","now","shutdown","(","编写","{","setup","选项","if","entry","设置","服务器","transformations","缓冲区","[","except","destroy","说明","古月","try","forward","lookup","_","utf","client","from","依然","main","等待","节点",".","初始化","产生","rotation","包括","就绪","并","坐标系","实现","transform","，","console","是否","优先","定时","让","vel","4","create","speed","scale","get","listener","包","保存","publish","进入","编译","入口","左边","atan2","node","失败","service","需要","'","话题","import","could","msgs","知道","transformlistener","finished","com","提示","python3","theta",")","销毁","info","ros","else","生成","居","角速度","跟随",".__","rel","发布","姿态","cmd","none","logger","bin","内容","跟随运动","系统","目标","指令","：","learning","获取","math","周期","准备就绪","配置","@","程序","frame",",","初始","如果","args","async","位","turtlefollowing","请求","否则","transformexception","数值","固定","angular","准备","sqrt","位置","没有","*","turtle","监听","float","进行","关闭","init","parameter","value","距离","文件","-","source","turtle1","控制","tf2","类","scripts"],"title":"海龟跟随","title_tokens":["海龟","跟随"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_14","text":"https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":[":","tutorials","ros","main","html",".","-","https","org","/","humble","docs","tf2","en"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/","text":"URDF：机器人建模方法 ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法——URDF，用来描述机器人外观、性能等各方面属性。 机器人的组成 建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由硬件结构、驱动系统、传感器系统、控制系统四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备，驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等，传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境，控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。 URDF ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是XML格式，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为连杆Link，手肘就类似于机器人电机驱动部分，称为关节joint。 所以在URDF建模过程中，关键任务就是通过这里的 和 ，理清楚每一个连杆和关节的描述信息。 连杆Link的描述 标签用来描述机器人某个刚体部分的外观和物理属性，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。Link里边的 部分用来描述机器人的外观，比如 表示几何形状，里边使用 调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的。 表示坐标系相对初始位置的偏移，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分 ，描述碰撞参数，里边的内容似乎和 一样，也有 和 ，看似相同，其实区别还是比较大的。 部分重在描述机器人看上去的状态，也就是视觉效果， 部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过 来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是 里边 描述的形状。 坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。 关节Joint描述 机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 第一种continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 第二种revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 第三种prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 第四种是fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 第五种Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 既然是运动，就是相对的，parent标签描述父连杆，child标签描述子连杆，子连杆会相对父连杆发生运动。 这里的origin表示两个连杆坐标系之间的关系，也就是这个向量，可以理解为这两个连杆该如何安装到一起。 Axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的。 Limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等，大家注意单位，ROS中关于平移的默认单位都是m，旋转是弧度，不是度，所以这里3.14就表示可以在-180度到180度之间运动，速度也是m/s，或者rad/s。 完整机器人模型 最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。 创建机器人模型 好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。 功能包结构 urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件 查看URDF模型结构 $ urdf_to_graphiz mbot_base.urdf # 在模型文件夹下 模型可视化效果 模型文件解析 learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot> 参考链接 https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":["浮动","转关","件夹","等于","的","0.095","相机","组成","方面","一致","提前","未来","文件夹","效果","由","似乎","back","机器人","名称","按照","1","包围","标签","关键","prismatic","origin","软件","理","来","板载","这样","形成","称为","。","专门","无法","进行","思路","此时","熟悉","检测","planar","度","0","派","肘关节","base","市面","完成","右侧","完全","用","叫做","第六","axis","外部","还","length","有点","里边","180","便于","既然","应用软件","外界","、","0.06","可视","中","它","第三种","0.95","括号","独自","再","链接","用来","第一种","视觉","码器","极限","让","四大","编码","org","手臂","是","清楚","乍","单位向量","continuous","哪些","轮子","状态","每","传感器","xyz","1.5707","rgba","圆柱","电源","过程","内容","大","唯一","少","惯性","管理","尖括号","时候","将","配置","摄像","颜色","第四","找","第四种","关系","先","我们","碰撞","这里","为此","之前","该","旋转","所有","渲染","外观","正","limit","简化","限制","不会","算作","变化","一个","会","二种","操作系统","代码","$","不过","开发","这","创建","频繁","stl","相关","这种","为了","每个","属性"," ","肌肉",":","装置","组合而成","name","\"","最小","white","raw","速度","外部环境","矩阵","geometry","有","放置","他们","某个","安装","结构","默认","示例","认识","通过","这个","可视化","child","和","驱动","其中","#","imu","相对","tutorials","全都","0.20","啦","描述","比较","驱动器","存放","系列","允许","哪","类型","感器","常见","三维","自定义","功能","left","一些","正常","到","建模","对","发生","弧度","为例","也","清晰","区别","分解","类似","细节","0.18","s","旋转关节","感知","复杂","都","带有","语言","？","了解","引用","如何","这些","关节","下","蓝色","碰撞检测","0.4","无论","0.05","时","系统","格式","为","learning","link","度到","初始","局","较","大家","柱体","一样","fixed","重在","定义","en","组合","joint","看上","向量","质量","文件","连杆","cylinder","物理","之后","子","不能","表示","这么","wheel","必须","mbot","独立","caster","面上","z","质心","有点像","还是","环境","手肘","移动","讲","算力","运动","第三","介绍","父","把","第二","y","humble","0.025","black","给","移动机器人","完整","框","理解","yellow","使用","五种","type","一系列","自身","车体","参数","graphiz","连接","设计","启动","to","注意","参考","外壳","或","角度","信息","两个","所以","平面","叫","起来","小车","一段","之间","绿色","沿某","第二个","=","形状","动机","方式","自己","什么","接触","html","摄像头","实打实","树莓","真实","设备","一系","不是","_","市面上","坐标系","m","?","自定","名字","urdf","网页","以","最大","偏移","全称","包","管理系","version","才能","color","需要","小臂","配置文件","大臂","调用","或者","组成部分","比如","相对运动","floating","：","第五","源代码","轴","围绕","无限","尺寸","分别","位置","0.16","就是","桌子","臂","不仅","看似","方法","直线","-","docs",">","而是","传感","提供","在于","编码器","底盘","sphere","rad","两种","单位","<","看到","front","于","要","管理系统","模型简化","平移","主要","呢","其实","刚体","关于","等等","计算","与","圆柱体","四种","的话","0.9","坐标","x","等","电脑","要求","当然","/","可以","一块","部分","统一","则","1.0","建模语言","应用","robot","在","着急","这款","机器","解析","roll","放在","硬件","revolute","如下","载体","上去","visual","好","任务","查看","launch","3.14","0.015","0.19","操作","了","radius","多","高","一种","相同","material","视觉效果","看上去","main",".","产生","实际","包括","right","就","，","雷达","meshes","六种","rviz","属于","手","全为","parent","一起","保存","看","性能","第二种","滑动","xacro","xml","第六种","各","以及","ros","电机","第一","机械","二个","某","一般","rpy","几何","驱使","得","看下","平台","如果","第五种","最终","固定","像头","无论是","https","控制系统","模型","先来","不","方向","pitch","三种","控制","上","—"],"title":"**URDF：机器人建模方法**","title_tokens":["建模","方法","urdf","：","机器人","机器","*"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf","text":"ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法——URDF，用来描述机器人外观、性能等各方面属性。","text_tokens":["操作","下","给","了","专门","建模","等","提供","。","ros","当然","一种","一个","的","使用","认识","方面","—","系统","得","操作系统","用来","要","，","urdf","机器人","不过","让","呢","在","啦","描述","我们","是","机器"," ","属性","为此","之前","性能","方法","还","介绍","？","把","外观","如何","各","、"],"title":"URDF：机器人建模方法","title_tokens":["建模","方法","urdf","机器人","：","机器"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_1","text":"建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由硬件结构、驱动系统、传感器系统、控制系统四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备，驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等，传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境，控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。","text_tokens":["传感","编码器","底盘","一个","的","组成","看到","操作系统","由","管理系统","面上","机器人","开发","主要","这","按照","还是","其实","环境","移动"," ","软件","等等","装置","计算","把","板载","。","等","电脑","移动机器人","安装","结构","进行","可以","思路","熟悉","使用","部分","通过","和","驱动","派","参数","市面","建模语言","imu","应用","外壳","描述","驱动器","机器","硬件","感器","外部","载体","起来","常见","里边","便于","一些","正常","应用软件","、","操作","建模","了","动机","自己","摄像头","中","实打实","树莓","设备","再","包括","市面上","码器","分解","类似","，","雷达","四大","编码","感知","是","清楚","都","管理系","语言","需要","状态","每","这些","传感器","以及","电机","机械","组成部分","电源","无论","比如","一般","过程","系统","驱使","管理","平台","摄像","像头","无论是","先","控制系统","我们","就是","臂","组合","控制","上"],"title":"机器人的组成","title_tokens":["组成","机器","的","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_1","text":"ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是XML格式，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为连杆Link，手肘就类似于机器人电机驱动部分，称为关节joint。 所以在URDF建模过程中，关键任务就是通过这里的 和 ，理清楚每一个连杆和关节的描述信息。","text_tokens":["算作","之后","一个","的","组成","必须","代码","独立","由","于","机器人","开发","呢","有点像","包围","标签","关键","刚体","环境","手肘","属性"," ","肌肉","理","运动","组合而成","这样","外部环境","称为","。","他们","无法","可以","使用","统一","部分","通过","这个","一系列","自身","和","肘关节","驱动","其中","连接","右侧","相对","在","描述","叫做","系列","机器","信息","所以","外部","还","上去","有点","任务","建模","自己","中","看上去","也","一系","括号","清晰","独自","产生","就","类似","，","urdf","网页","手","全称","手臂","是","清楚","看","乍","都","才能","？","xml","小臂","每","如何","这些","关节","下","大臂","ros","电机","机械","比如","相对运动","过程","格式","link","源代码","尖括号","大家","我们","这里","就是","桌子","模型","臂","不仅","方法","组合","joint","看上","文件","连杆"],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#link","text":"标签用来描述机器人某个刚体部分的外观和物理属性，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。Link里边的 部分用来描述机器人的外观，比如 表示几何形状，里边使用 调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的。 表示坐标系相对初始位置的偏移，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分 ，描述碰撞参数，里边的内容似乎和 一样，也有 和 ，看似相同，其实区别还是比较大的。 部分重在描述机器人看上去的状态，也就是视觉效果， 部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过 来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是 里边 描述的形状。 坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。","text_tokens":["物理","算作","一个","的","表示","会","一致","提前","未来","效果","似乎","模型简化","z","平移","机器人","名称","质心","stl","标签","其实","还是","刚体","为了","移动","属性"," ","算力","软件","来","运动","计算","name","与","圆柱体","的话","第二","坐标","raw","这样","x","y","。","矩阵","等","有","要求","移动机器人","某个","框","可以","使用","检测","部分","通过","这个","则","车体","0","和","参数","连接","设计","相对","用","在","描述","比较","机器","roll","如下","小车","三维","上去","绿色","好","自定义","里边","第二个","到","形状","外界","、","了","动机","高","接触","中","相同","为例","它","视觉效果","看上去","真实","也","实际","包括","用来","就","区别","坐标系","视觉","类似","，","自定","以","偏移","全为","是","复杂","需要","轮子","状态","如何","蓝色","调用","机械","圆柱","碰撞检测","二个","比如","时","内容","大","过程","：","几何","link","惯性","时候","将","如果","初始","颜色","较","尺寸","分别","位置","一样","柱体","碰撞","我们","就是","重在","定义","模型","臂","看似","该","joint","看上","旋转","质量","不","文件","连杆","方向","pitch","控制","外观","上","简化"],"title":"连杆Link的描述","title_tokens":["描述","连杆","的","link"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#joint","text":"机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 第一种continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 第二种revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 第三种prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 第四种是fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 第五种Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 既然是运动，就是相对的，parent标签描述父连杆，child标签描述子连杆，子连杆会相对父连杆发生运动。 这里的origin表示两个连杆坐标系之间的关系，也就是这个向量，可以理解为这两个连杆该如何安装到一起。 Axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的。 Limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等，大家注意单位，ROS中关于平移的默认单位都是m，旋转是弧度，不是度，所以这里3.14就表示可以在-180度到180度之间运动，速度也是m/s，或者rad/s。","text_tokens":["浮动","之后","转关","在于","变化","子","一个","不能","等于","的","表示","相机","会","rad","两种","单位","二种","要","z","平移","机器人","不过","这","频繁","1","还是","这种","标签","刚体","prismatic","origin","关于"," ","运动","第三","父","四种","最小","第二","坐标","这样","速度","。","有","等","安装","理解","进行","此时","可以","默认","使用","/","通过","planar","五种","这个","child","度","和","连接","相对","注意","在","描述","比较","角度","允许","机器","类型","两个","哪","所以","第六","revolute","平面","axis","叫","小车","一段","之间","沿某","180","既然","一些","3.14","到","了","方式","发生","什么","一种","弧度","中","第三种","也","不是","产生","limit","就","第一种","区别","坐标系","m","，","名字","s","urdf","六种","极限","属于","旋转关节","最大","parent","一起","是","都","单位向量","continuous","第二种","才能","带有","滑动","xml","轮子","每","如何","第六种","关节","ros","第一","电机","或者","机械","某","比如","相对运动","一般","内容","唯一","floating","少","为","第五","link","度到","轴","第五种","围绕","无限","第四","最终","第四种","固定","较","大家","位置","关系","就是","fixed","这里","模型","臂","直线","该","joint","旋转","向量","不","-","连杆","方向","三种","上","正","限制","不会","而是"],"title":"关节Joint描述","title_tokens":["描述","joint","关节"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_2","text":"最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。","text_tokens":["。","下","了","对","之后","完整","一个","中","的","某","一块","组成","时","部分","这个","和","link","再","完成","代码","就","由","局","细节","，","找","最终","urdf","完全","机器人","robot","全都","在","大家","着急","标签","描述","先","每个","是","机器"," ","放在","模型","所以","看","先来","组合","joint","哪些","不","所有","了解","形成","每"],"title":"完整机器人模型","title_tokens":["机器","完整","模型","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_3","text":"好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。","text_tokens":["。","了","建模","动机","多","移动机器人","完整","一个","的","示例","这么","为例","它","过程","看下","要","，","urdf","以","机器人","啦","还是","我们","一起","移动","这款","机器","看"," ","讲","模型","好"],"title":"创建机器人模型","title_tokens":["机器","模型","创建","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_4","text":"urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件","text_tokens":["放置","中","的","：","配置","启动","meshes","urdf","rviz","机器人","配置文件","相关","或","保存","存放","机器"," ","模型","xacro","文件","引用","渲染","launch"],"title":"功能包结构","title_tokens":["功能","结构","包"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_2","text":"$ urdf_to_graphiz mbot_base.urdf # 在模型文件夹下","text_tokens":["下","to","urdf","_","文件夹","base","在",".","graphiz","#","文件","mbot","件夹","$"," ","模型"],"title":"查看URDF模型结构","title_tokens":["结构","模型","urdf","查看"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_5","text":"","text_tokens":[],"title":"模型可视化效果","title_tokens":["效果","可视化","模型","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_6","text":"learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot>","text_tokens":["xyz","radius","geometry","0.06","black","1.5707","rgba","yellow","0.4","/","sphere","0.095","material","0.05","0.95","<","wheel","_","type","rpy","child","0","base","learning",".","1.0","link","mbot","front","right","caster","?","0.18","back","urdf","robot","0.20","1","parent","0.16","origin"," ","axis","version","continuous","name","length","joint","\"","visual","0.9","color","white","xml","-","left","cylinder","=","0.025","0.015",">","0.19"],"title":"模型文件解析","title_tokens":["解析","模型","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_7","text":"https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":[":","tutorials","urdf","ros","main","html",".","-","https","org","/","humble","docs","en"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/","text":"Gazebo：三维物理仿真平台 ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台Gazebo，了解一下。 Gazebo仿真平台 介绍 Gazebo是ROS系统中最为常用的三维物理仿真平台，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。 安装 Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-* 运行 通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py 注意：为保证模型顺利加载，请将离线模型文件库下载并放置到~/.gazebo/models路径下， https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。 XACRO机器人模型优化 我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本——XACRO文件。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro 常量定义 一些常用的XACRO文件语法，大家了解下。 标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。 数学计算 如果需要做数学计算，同样是在$加大括号中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 注意：所有数学运算都会转换成浮点数进行，以保证运算精度 宏定义 机器人的轮子我们也做成宏定义，定义方式是通过这个 标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。 文件包含 宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。 机器人仿真模型配置 完善物理参数 第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。 添加Gazebo标签 第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。 配置传动装置 第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。 添加控制器插件 第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。 构建仿真环境 接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ]) 机器人运动仿真 万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard 注意：虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。 Ignition：下一代Gazebo 随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为Ignition，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/ 附录：机器人完整模型 learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["our","一步","的","装上","个","问题","简单","2","未来","同样","效果","怎么办","executable","不同","尽量","back","摩擦力","机器人","名称","hardware","1","echo","标签","用到","变量","origin","来","这样","结果","。","最为","传动","true","进行","此时","部署","升级","py","twist","上","然后","去","t","度","0","base","“","5","demos","完成","还要","宏","已经","osrf","接口","pi","时刻","用","c","库","0.2","tf","友好","set","以上","axis","公式","命令","used","还","length","有点","screen","里边","find","spawn","必备","、","0.06","认识一下","launchdescription","(","inertial","很长","into","12","中","第三步","它","总体","0.95","动力","第一句","括号","from","并","分配","再","节点","用来","高质","c语言","很多","请","让","want","新","网站","当","org","--","是","box","entity","虚拟机","差不多","上来","continuous","---","share","进步","where","轮子","每","the","图形","传感器","xyz","添加","运行","include","似曾","rgba","想不起","过程","离线","主角","matrix","配置","惯性","一下","将","时候","技术","摄像","颜色","第四","”","找","sudo","数值","by","velocityjointinterface","可编程","关系","really","先","我们","碰撞","这里","试一下","libgazebo","之前","have","该","所有","acceleration","渲染","完善","不会","pythonlaunchdescriptionsource","名为","镜像","变化","一个","false","3.1415926","会","考虑","传递","无人","导致","小海","file","下来","$","代码","做成","命名","第四步","trans","开发","def","不过","这","创建","频繁","办法","相关","一句","inertia","包含","这种","加大","为了","每个","属性"," ","常量",":","是不是","装置","provided","name","\"","interface","drive","三步","速度","记得","写","有","放置","换成","似曾相识","geometry","安装","区分","续航","认识","另外","嵌套","property","通过","odometry","化","这个","数学计算","child","和","#","world","传递数据","bridge","精度","相对","再用","小海龟","blue","0.20","于是","啦","描述","mass","保证","感器","路径","真器","三维","http","除法","语句","spawner","课程","功能","left","update","一些","没","到","}","对","建模","仿真器","高质量","load","r","系数","use","[","package","随着","控制器","也","actions","下载","differential","join","includelaunchdescription","类似","四步","0.18","不妨","原本","想不起来","hardwareinterface","及","important","帮助","publish","改成","验证","实验","复杂","得到","都","二句","diff","优化","？","语言","ament","了解","torque","构建","'","joints","import","change","如何","这些","pkg","可编","关节","下","all","场景","worlds","函数","bashrc","0.4","camera","0.05","出现","那","correctly","teleop","时","motor","this","generate","cmd","基本","prefix","size","系统","格式","为","learning","link","下一代",",","输入","比","大家","一样","火星","so","fixed","定义","path","3.14159","0.75","joint","确保","质量","value","文件","sure","me","cylinder","物理","某些","ignition","reference","actuator","footprint","不能","弹性","运算","ixy","数据","macro","0.001","force","wheel","一定","publisher","mbot","rgbd","测试","www","max","caster","这句","z","plugin","params","0.0","有点像","is","环境","移动","run","运动","第三","yaw","版本","介绍","把","海龟","第二","colors","humble","y","迭代","transmission","周边环境","0.025","black","给","return","移动机器人","完整","理解","python","yellow","使用","加载","type","文件格式","os","参数","30","差速","设计","3","同时","vgpu10","启动","and","几个","own","to","xmlns","注意","参考","~","角度","引擎","两个","index","所以","两句","加法","信息","叫","起来","小车","turngravityoff","第一步","摩擦","+","官方网","实物","重复使用","rate","=","周边","20","可能","丰富","动机","方式","火星车","附录","设置","摄像头","传动装置","放到","模拟","根本","_","不是","ixx","apt","你","m","实现","?","名字","urdf","以","新一代","vel","限飞","get","包","them","wiki","模块","sim","you","刚好","version","可","接下来","node","a","color","需要","接下","加速","更为","b","com","neighborhood","交给","调用","结束","为止","比如","算法","很","奇迹","odom","：","常用","尝试","single","ignitionrobotics","数学","插件","collision","frame","整个","万事俱备","尺寸","位置","ign","0.16","就是","topic","么","不仅","方法","be","关闭","packages","arguments","-",">","冗余","传感","提供","enabled","编程","]","底盘","iyy","sphere","流程","更","gazebo","<","front","要","ros2","第二句","弹性系数","加入","主要","呢","力学","separation","export","手边","条件","计算","spwan","转换成","x","不断","output","for","diameter","等","defining","针对","!","当然","simpletransmission","/","val","可以","参数设置","doesn","controller","description","1.0","重复","一行","人机","修改","mechanicalreduction","应用","robot","sources","models","键盘","filename","time","在","in","only","机器","硬件","install","make","visual","好","state","流畅","launch","0.015","0.19","keyboard","了","radius","izz","多","{","if","切分","material","reflect","顺利","必要","二步","表面","浮点","试试",".","right","就","从","command","方便","，","无人机","万事","怎么","4","不多","较大","相识","parent","一起","点数","浮点数","虚拟","gray","互相","xacro","xml","动力学","ixz","转换",")","matter","ros","第一","电机","items","见证","值为","iyz","某","跑","做","第二步","语法","we","rpy","directory","得","支持","平台","如果","pose","甚至","仿真","硬件加速","像头","官方网站","https","没有","*","模型","直接","github","一代","不","官方","因为","svga","source","控制","像","—","俱备","list","h"],"title":"**Gazebo：三维物理仿真平台**","title_tokens":["物理","仿真","三维","：","平台","gazebo","*"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo","text":"ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台Gazebo，了解一下。","text_tokens":["。","物理","ros","当然","gazebo","问题","主角","怎么办","一下","平台","如果","，","仿真","开发","机器人","怎么","呢","我们","没有","是","机器","手边","三维","？","了解","实物","没"],"title":"Gazebo：三维物理仿真平台","title_tokens":["物理","仿真","三维","：","平台","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_1","text":"","text_tokens":[],"title":"Gazebo仿真平台","title_tokens":["gazebo","仿真","平台"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_1","text":"Gazebo是ROS系统中最为常用的三维物理仿真平台，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。","text_tokens":["物理","提供","一个","的","更","弹性","gazebo","无人","导致","测试","要","摩擦力","弹性系数","加入","机器人","开发","力学","频繁","办法","环境","属性"," ","这样","周边环境","。","最为","等","此时","可以","使用","续航","部署","和","设计","人机","用","应用","在","机器","引擎","所以","三维","还","摩擦","实物","周边","到","可能","、","了","多","高质量","火星车","系数","中","模拟","动力","表面","再","就","高质","类似","实现","，","不妨","无人机","不多","及","限飞","帮助","是","验证","实验","都","差不多","上来","优化","动力学","图形","运行","ros","场景","比如","算法","那","做","系统","为","常用","支持","平台","仿真","先","火星","我们","没有","不仅","质量","渲染"],"title":"介绍","title_tokens":["介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_2","text":"Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-*","text_tokens":["。","认识一下","给","了","ros","完整","安装","一个","中","的","可以","装上","使用","认识","gazebo","简单","它","通过","跑","系统","：","apt","和","一下","$","已经","，","不妨","sudo","呢","相关","大家","先","包","我们","为了"," ","*","都","直接","install","起来","命令","确保","互相","？","把","这样","-","功能","humble","如何"],"title":"安装","title_tokens":["安装"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_3","text":"通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py 注意：为保证模型顺利加载，请将离线模型文件库下载并放置到~/.gazebo/models路径下， https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。","text_tokens":["的","gazebo","下来","$","ros2","这句","机器人","环境","移动"," ",":","运动","是不是","把","记得","。","放置","移动机器人","/","可以","认识","py","通过","加载","还要","设计","启动","osrf","注意","库","models","在","啦","~","机器","保证","路径","命令","还","课程","launch","到","了","动机","中","放到","顺利","它","_","不是","下载","并",".","试试","就","，","请","一起","接下来","？","接下","com","下","ros","：","离线","为","尝试","将","仿真","大家","https","我们","么","模型","之前","该","github","文件","控制"],"title":"运行","title_tokens":["运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#xacro","text":"我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本——XACRO文件。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro","text_tokens":["传感","编程","底盘","不能","一个","的","更","个","会","gazebo","数据","传递","同样","下来","$","代码","不同","要","这句","加入","机器人","创建","包含","变量","每个","为了","移动"," ","常量","条件","版本","计算","介绍","把","humble","。","给","写","有","放置","移动机器人","安装","此时","可以","使用","升级","通过","化","然后","文件格式","重复","设计","宏","传递数据","接口","再用","在","描述","友好","机器","感器","install","叫","命令","小车","还","语句","好","重复使用","功能","一些","没","可能","、","对","了","建模","丰富","多","动机","很长","摄像头","中","切分","放到","必要","总体","也","apt","你","就","实现","，","urdf","让","4","包","是","复杂","模块","都","可","优化","xacro","接下来","a","需要","接下","更为","轮子","b","传感器","可编","ros","调用","函数","比如","过程","做","：","格式","link","一下","时候","如果","摄像","甚至","sudo","像头","尺寸","大家","可编程","一样","先","我们","没有","这里","定义","模型","之前","直接","方法","文件","-","像","—"],"title":"XACRO机器人模型优化","title_tokens":["机器人","优化","xacro","机器","模型"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_4","text":"一些常用的XACRO文件语法，大家了解下。 标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。","text_tokens":["。","下","名为","了","动机","针对","移动机器人","安装","调用","变化","底盘","一个","值为","中","的","比如","可以","使用","很","数据","通过","也","语法","_","括号","未来","常用","“","一行","时候","$","用来","就","pi","m","”","修改","，","方便","原本","urdf","找","机器人","在","大家","尺寸","位置","标签","加大","我们","移动","机器","定义"," ","常量","模型","都","3.14159","xacro","质量","不","把","文件","了解","好","这样","里边","需要","轮子","一些","这些","不会","、"],"title":"常量定义","title_tokens":["定义","常量"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_5","text":"如果需要做数学计算，同样是在$加大括号中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 注意：所有数学运算都会转换成浮点数进行，以保证运算精度","text_tokens":["一个","的","运算","会","数据","未来","同样","$","尽量","加入","机器人","这","加大","移动"," ","常量","来","计算","结果","转换成","。","写","有","换成","移动机器人","进行","可以","通过","这个","数学计算","和","精度","修改","相对","注意","在","机器","两个","保证","加法","公式","起来","除法","可能","了","动机","中","根本","括号","浮点","就","很多","，","想不起来","以","怎么","改成","是","点数","得到","都","浮点数","需要","转换","想不起","比如","某","做","：","数学","时候","如果","数值","位置","关系","我们","模型","直接","所有"],"title":"数学计算","title_tokens":["数学","数学计算","计算"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_6","text":"机器人的轮子我们也做成宏定义，定义方式是通过这个 标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。","text_tokens":["。","镜像","了","方式","调用","函数","设置","一个","区分","1","中","的","可以","比如","使用","会","参数设置","出现","通过","也","这个","和","link","参数","时候","做成","就","宏","同时","要","几个","，","名字","输入","机器人","c","名称","这","在","位置","一样","标签","描述","用到","当","我们","包含","这里","是","机器"," ","定义","模型","关节","来","两句","两个","关系","刚好","还","joint","把","a","好","需要","这样","里边","记得","-","轮子","一些","像","b","、"],"title":"宏定义","title_tokens":["宏","定义"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_7","text":"宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。","text_tokens":["。","了","对","include","某些","似曾","似曾相识","调用","结束","函数","底盘","一个","为止","中","的","可以","流程","使用","另外","很","嵌套","也","做","必备","不是","然后","去","得","和","再","参数","下来","做成","宏","c语言","，","仿真","加入","机器人","于是","包含","这种","相识","我们","没有","这里","是","机器","定义","模型"," ","模块","是不是","还","语言","优化","接下来","把","文件","里边","接下","一些","像","到"],"title":"文件包含","title_tokens":["包含","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_8","text":"","text_tokens":[],"title":"机器人仿真模型配置","title_tokens":["仿真","机器人","配置","机器","模型"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_9","text":"第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。","text_tokens":["。","物理","有","第一","一步","一个","的","gazebo","必要","一定","和","link","参数","惯性","平台","，","仿真","碰撞","属性","是","都","确保","第一步","需要","因为","每"],"title":"完善物理参数","title_tokens":["完善","物理","参数"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_2","text":"第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。","text_tokens":["。","添加","冗余","一步","一个","中","的","可以","gazebo","二步","做","第二步","系统","为","得","和","link","配置","不同","颜色","，","urdf","主要","在","标签","为了","是","所以","第二","因为","这样","渲染","每"],"title":"添加Gazebo标签","title_tokens":["添加","gazebo","标签"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_10","text":"第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。","text_tokens":["。","给","了","传动","电机","理解","一个","传动装置","的","可以","第三步","为","配置","要","，","仿真","是","第三","运动","装置","joint","三步"],"title":"配置传动装置","title_tokens":["传动装置","配置","装置","传动"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_11","text":"第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。","text_tokens":["。","下","添加","交给","了","电机","一个","的","可以","那","控制器","gazebo","速度","分配","插件","完成","差速","就","不同","要","第四","四步","第四步","，","在","角度","是","两个","来","小车","这样","控制"],"title":"添加控制器插件","title_tokens":["控制器","添加","插件","控制"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_12","text":"接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ])","text_tokens":["提供","enabled","our","]","一个","的","考虑","gazebo","force","<","publisher","file","mbot","下来","executable","z","def","0.0","用到"," ","run",":","yaw","provided","name","把","spwan","x","y","output","。","return","!","python","true","/","val","doesn","py","加载","description","os","t","#","world","own","to","robot","sources","time","set","only","index","make","spawner","screen","功能","spawn","state","=","launch","到","}","了","launchdescription","(","{","load","into","if","use","中","package","[","actions","_","from","节点",".","join","me","includelaunchdescription","就","，","urdf","want","them","entity","sim","you","---","node","接下来","ament","share","a","需要","where","接下","'","import","change","the","如何","pkg","neighborhood",")","include","matter","all","ros","items","worlds","correctly","generate","we","directory","single","learning",",","pose","by","really","topic","path","模型","have","be","packages","arguments","sure","-","get","pythonlaunchdescriptionsource"],"title":"构建仿真环境","title_tokens":["构建","仿真","环境"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_13","text":"万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard 注意：虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。","text_tokens":["的","流程","gazebo","小海","下来","$","第二句","ros2","不过","机器人","一句","echo","有点像","环境","export"," ","run","\"","海龟","第二","。","/","此时","twist","py","0","和","vgpu10","启动","已经","时刻","小海龟","注意","键盘","~","机器","以上","两句","硬件","命令","有点","=","launch","keyboard","了","load","into","中","第一句","_","节点",".","很多","，","urdf","万事","复杂","虚拟机","虚拟","二句","接下来","需要","接下","加速","运行","见证","第一","bashrc","奇迹","teleop","时","基本","过程","：","learning","整个","比","仿真","硬件加速","万事俱备","我们","就是","关闭","svga","控制","俱备",">"],"title":"机器人运动仿真","title_tokens":["运动","机器","仿真","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#ignitiongazebo","text":"随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为Ignition，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/","text_tokens":["。","有","ignition","不断","多","ros","变化","仿真器","/","的","随着","camera","更","可以","gazebo","py","也","_","apt","为","度","和","效果",".","ignitionrobotics","demos","www","rgbd","一下","$","平台","从","技术","命名","bridge","ros2","，","不妨","仿真","新一代","sudo","新","参考","在","大家","网站","较大","官方网站","org","ign","我们","试一下"," ","信息","都","来",":","install","版本","真器","一代","进步","官方","官方网","-","humble","迭代","渲染","流畅","上","launch"],"title":"Ignition：下一代Gazebo","title_tokens":["ignition","：","一代","下一代","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_14","text":"learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["reference","actuator","footprint","iyy","false","sphere","3.1415926","ixy","gazebo","2","macro","0.001","<","wheel","mbot","www","front","$","max","caster","back","z","trans","plugin","hardware","params","1","inertia","is","separation","origin"," ",":","name","\"","interface","x","y","colors","transmission","drive","0.025","for","diameter","black","geometry","defining","!","yellow","simpletransmission","/","true","odometry","property","controller","type","5","child","0","1.0","base","30","3","pi","and","mechanicalreduction","xmlns","to","robot","blue","filename","0.20","0.2","tf","in","mass","axis","used","http","length","turngravityoff","visual","+","rate","find","left","update","=","0.015","20","0.19","0.06","}","radius","(","inertial","izz","{","r","12","material","reflect","0.95","_","ixx","differential",".","right","m","command","?","0.18","urdf","vel","hardwareinterface","important","org","parent","--","publish","wiki","box","version","continuous","diff","gray","xacro","color","torque","xml","joints","the","ixz","xyz",")","include","ros","rgba","0.4","iyz","0.05","motor","this","cmd","prefix","odom","size","rpy","collision","learning","link","matrix","h","frame","velocityjointinterface","0.16","so","fixed","topic","*","libgazebo","0.75","joint","value","acceleration","-","source","cylinder","list",">"],"title":"附录：机器人完整模型","title_tokens":["机器人","：","完整","附录","机器","模型"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/","text":"Rviz：三维可视化显示平台 大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾——Rviz，一款三维可视化显示的神器。 Rviz三维可视化平台 机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。 Rviz介绍 一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。 运行方法 $ ros2 run rviz2 rviz2 彩色相机仿真与可视化 摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。 仿真插件配置 关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 主要配置项如下： 标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 标签：加载摄像头仿真插件 运行仿真环境 模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py 图像数据可视化 $ ros2 run rviz2 rviz2 三维相机仿真与可视化 二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。 仿真插件配置 运行仿真环境 $ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py 点云数据可视化 $ ros2 run rviz2 rviz2 激光雷达仿真与可视化 除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。 仿真插件配置 运行仿真环境 $ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py 点云数据可视化 $ ros2 run rviz2 rviz2 Rviz vs Gazebo 好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下，Gazebo是仿真平台，核心功能是创造数据，我们没有机器人或者传感器，它可以帮我们做一个虚拟的，Rviz是可视化平台，核心功能是显示数据，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。 参考链接 https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":["qt","的","相机","问题","人","效果","噪音","机","不用","机器人","想","按照","标签","畅想","软件","来","价格比","这样","。","最为","拭目","熟悉","py","去","0","嘉宾","已经","框架","具体","难为","用","不想","叫做","只是","巧妇","外部","、","一目了然","可视","into","过","但","中","它","—","再","链接","用来","很多","试一试","新","编码","是","核心","数字","希望","哪些","能够","二维","图形","传感器","添加","运行","强调","案例","想不到","辨率","发布","过程","内容","laser","配置","时候","摄像","颜色","工具","我们","这里","libgazebo","一分钱","渲染","一个","会","图形化","范围","显示","255","项","$","代码","规划","帮","命名","可贵","开发","不过","这","一句","这种","神器"," ","导航",":","是不是","name","出厂","激光雷达","价格","外部环境","有","肯定","通过","这个","可视化","一分","一脸","和","装","全都","啦","描述","自动","类型","自带","感器","路径","三维","功能","一些","到","对","除了","load","说明","手上","不到","也","啥","搞定","并且","分辨","满意","类似","不少","上位","开放","眼中","都","？","了解","知道","如何","这些","下","场景","大大","camera","一目","格式","learning","获取","打造","大家","so","量级","出来","某些","不能","数据","一位","快速","拍摄","各样","大大提高","mbot","rgbd","www","拭目以待","还是","环境","移动","讲","usb","run","运动","常备","介绍","把","给","移动机器人","理解","使用","成功","加载","type","rviz2","参数","设计","启动","点云","几个","创造","玩起来","参考","懵","信息","两个","所以","能","起来","混淆","stereolabs","基于","一堆","周边","动机","自己","什么","vs","设置","摄像头","只要","真实","_","不是","你","很难","开放式","坐标系","巧妇难为无米之炊","彩色","玩起","需要","效率","com","realsense","或者","对应","比如","话","有没有","：","常用","插件","图像","汽车","位置","就是","体感","么","臂","方法","过瘾","各种","docs","问","传感","提供","才","流程","更","intel","gazebo","看到","只有","ros2","了然","主要","呢","关于","分钱","重量","等等","重量级","计算","内部","与","的话","坐标","范畴","对照","分辨率","等","当然","/","可以","自由","非常","本","消息","岂","在","什么样","自主","机器","如下","驾驶","好","launch","了","多","一种","试试",".","包括","相信","涉及","就","从","方便","，","雷达","rviz","看","分析","虚拟","众多","层面","这幅","话题","ros","机械","做","会用","平台","如果","样","还有","kinect","仿真","像头","一款","https","没有","模型","长","先来","github","激光","不","提高","各种各样","以待","官方","上","世界"],"title":"**Rviz：三维可视化显示平台**","title_tokens":["rviz","可视","三维","：","可视化","显示","平台","*"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz","text":"大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾——Rviz，一款三维可视化显示的神器。","text_tokens":["。","了","可视","什么","ros","过","一个","摄像头","中","的","问题","有没有","一位","—","拍摄","显示","可视化","本","看到","图像","涉及","嘉宾","就","摄像","如何","，","rviz","机器人","像头","这","呢","大家","一款","畅想","什么样","眼中","没有","我们","是","机器"," ","讲","重量","量级","神器","重量级","三维","介绍","？","能够","范畴","世界","到"],"title":"Rviz：三维可视化显示平台","title_tokens":["rviz","可视","三维","：","可视化","显示","平台"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_1","text":"机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。","text_tokens":["问","传感","才","的","相机","数据","快速","各样","人","效果","大大提高","255","看到","规划","了然","开发","机器人","环境","移动"," ","软件","导航","运动","等等","计算","内部","把","坐标","激光雷达","这样","。","给","移动机器人","当然","肯定","理解","可以","通过","去","可视化","0","一脸","和","设计","岂","全都","在","懵","描述","自主","只是","机器","信息","所以","感器","路径","三维","功能","一堆","周边","到","、","一目了然","动机","可视","自己","什么","摄像头","但","中","啥","搞定","你","很难","再","就","从","用来","坐标系","类似","很多","，","雷达","rviz","是","看","都","分析","数字","希望","众多","哪些","？","层面","需要","这幅","知道","效率","这些","传感器","场景","机械","大大","比如","过程","做","内容","一目","图像","如果","样","摄像","颜色","还有","像头","位置","一款","我们","就是","这里","么","出来","模型","臂","长","各种","激光","不","提高","各种各样","渲染"],"title":"Rviz三维可视化平台","title_tokens":["rviz","可视","三维","可视化","平台"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_2","text":"一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。","text_tokens":["。","了","对","有","添加","可视","某些","多","ros","自己","或者","一个","想不到","qt","中","的","可以","对应","话","只要","说明","发布","数据","更","它","不到","图形化","做","显示","也","这个","可视化","常用","效果","插件","看到","项","消息","平台","就","只有","开放式","如果","满意","机","很多","，","框架","方便","rviz","打造","机器人","工具","想","新","开放","开发","按照","一句","在","上位","我们","没有","是","机器"," ","自带","核心","出厂","不","官方","功能","基于","话题","图形"],"title":"Rviz介绍","title_tokens":["介绍","rviz"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_1","text":"$ ros2 run rviz2 rviz2","text_tokens":["rviz2","$"," ","ros2","run"],"title":"运行方法","title_tokens":["运行","方法"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_2","text":"摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。","text_tokens":["。","了","最为","给","传感","一种","肯定","摄像头","的","常用","摄像","装","，","机器人","像头","我们","是","机器","感器","先来","上","传感器"],"title":"彩色相机仿真与可视化","title_tokens":["彩色","仿真","可视","与","可视化","相机"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_3","text":"关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 主要配置项如下： 标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 标签：加载摄像头仿真插件","text_tokens":["。","给","等","传感","提供","ros","设置","摄像头","对应","的","camera","辨率","使用","gazebo","自由","范围","加载","type","_","这个","：","格式",".","参数","插件","配置","项","图像","分辨","代码","噪音","摄像","命名","，","仿真","主要","像头","大家","编码","标签","描述","so","关于","我们","叫做"," ","模型","类型","libgazebo","都","感器","方法","如下","name","介绍","需要","对照","分辨率","传感器"],"title":"仿真插件配置","title_tokens":["插件","配置","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_4","text":"模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py","text_tokens":["。","load","into","拭目","不能","摄像头","中","camera","成功","gazebo","py","_","learning",".","并且","看到","配置","图像","mbot","$","摄像","已经","ros2","，","仿真","rviz","像头","拭目以待","在","啦","我们","信息","模型","出来","能"," ","把","好","以待","launch"],"title":"运行仿真环境","title_tokens":["运行","仿真","环境"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_5","text":"$ ros2 run rviz2 rviz2","text_tokens":["rviz2","$"," ","ros2","run"],"title":"图像数据可视化","title_tokens":["可视化","图像","数据","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_6","text":"二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。","text_tokens":["。","realsense","传感","或者","摄像头","的","比如","相机","可以","intel","数据","通过","也","一分","常用","试试","获取","就","摄像","可贵","不用","点云","，","不少","kinect","仿真","想","不过","像头","玩起来","这种","不想","我们","环境","分钱","体感","usb","感器","外部","过瘾","玩起","三维","价格比","起来","不","二维","价格","一分钱","外部环境","传感器"],"title":"三维相机仿真与可视化","title_tokens":["仿真","可视","三维","与","可视化","相机"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_7","text":"","text_tokens":[],"title":"仿真插件配置","title_tokens":["插件","配置","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_8","text":"$ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py","text_tokens":["_","load","into","learning",".","mbot","rgbd","$","gazebo","launch"," ","py","ros2"],"title":"运行仿真环境","title_tokens":["运行","仿真","环境"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_9","text":"$ ros2 run rviz2 rviz2","text_tokens":["rviz2","$"," ","ros2","run"],"title":"点云数据可视化","title_tokens":["点云","可视化","数据","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_10","text":"除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。","text_tokens":["。","动机","传感","除了","移动机器人","摄像头","的","相机","也","和","包括","摄像","汽车","很多","，","雷达","试一试","机器人","像头","自动","我们","移动","是","机器","感器","来","常备","激光","三维","驾驶","激光雷达","传感器"],"title":"激光雷达仿真与可视化","title_tokens":["雷达","仿真","激光","可视","与","可视化","激光雷达"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_11","text":"","text_tokens":[],"title":"仿真插件配置","title_tokens":["插件","配置","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_12","text":"$ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py","text_tokens":["_","load","laser","into","learning",".","mbot","$","gazebo","launch"," ","py","ros2"],"title":"运行仿真环境","title_tokens":["运行","仿真","环境"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_13","text":"$ ros2 run rviz2 rviz2","text_tokens":["rviz2","$"," ","ros2","run"],"title":"点云数据可视化","title_tokens":["点云","可视化","数据","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz-vs-gazebo","text":"好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下，Gazebo是仿真平台，核心功能是创造数据，我们没有机器人或者传感器，它可以帮我们做一个虚拟的，Rviz是可视化平台，核心功能是显示数据，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。","text_tokens":["传感","一个","的","流程","会","gazebo","数据","显示","帮","机器人","不过","这","还是","环境"," ","讲","软件","来","是不是","的话","。","有","可以","使用","熟悉","通过","可视化","非常","和","已经","启动","几个","具体","创造","难为","用","在","啦","机器","两个","巧妇","信息","所以","感器","好","混淆","功能","一些","到","对","了","可视","自己","它","真实","手上","不到","也","不是","再","相信","就","巧妇难为无米之炊","很多","，","rviz","是","核心","虚拟","了解","传感器","下","或者","强调","案例","做","会用","常用","时候","平台","如果","仿真","大家","我们","没有","这里","方法"],"title":"Rviz vs Gazebo","title_tokens":["vs"," ","gazebo","rviz"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_14","text":"https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":[":","github","rviz","rviz2","stereolabs",".","https","www","/","docs"," ","com","ros2"],"title":"参考链接","title_tokens":["链接","参考"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/","text":"RQT：模块化可视化工具 ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具——rqt。 rqt介绍 正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，接下来，大家就可以跟随我的思路，我们一起来试一试。 日志显示 图像显示 接口控制 数据曲线 数据包管理 节点可视化 参考资料 https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":["提供","强大","一个","qt","的","更","会","数据","简单","曲线","显示","觉得","下来","我","$","命名","不过","开发","一句","用到","资料","每个"," ","来",":","介绍","的话","这样","humble","。","数据包","安装","进行","此时","可以","思路","使用","另外","/","通过","加载","这个","然后","可视化","和","界面","日志","已经","启动","接口","具体","docs","tutorials","参考","在","concepts","install","命令","起来","有点","里边","功能","基于","一些","rqt","可能","操作","了","可视","一种","难免","html","摄像头","中","正如","它","而","也","apt","一","using","节点",".","前","就","类似","实现","很多","，","试一试","console","rviz","org","是","模块","都","接下来","参考资料","需要","接下","about","下","ros","场景","小","比如","跟随","很","：","指令","有些","图像","管理","麻烦","摄像","sudo","工具","像头","只","大家","一样","https","我们","难免会","en","-","模块化","控制","—"],"title":"**RQT：模块化可视化工具**","title_tokens":["可视","：","可视化","工具","模块化","rqt","*","模块"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt","text":"ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具——rqt。","text_tokens":["操作","下","了","。","可视","提供","ros","强大","场景","一种","难免","一个","摄像头","中","的","更","比如","使用","很","此时","会","另外","简单","显示","觉得","可视化","有些","图像","麻烦","就","摄像","已经","，","rviz","不过","工具","像头","只","用到","我们","难免会"," ","模块","的话","有点","需要","功能","模块化","一些","rqt","—","可能"],"title":"RQT：模块化可视化工具","title_tokens":["可视","：","可视化","工具","模块化","rqt","模块"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt_1","text":"正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，接下来，大家就可以跟随我的思路，我们一起来试一试。","text_tokens":["。","了","可视","ros","安装","小","一个","qt","进行","的","可以","跟随","使用","思路","正如","它","通过","而","也","加载","这个","然后","指令","可视化","apt","一","和","界面","前","$","下来","就","我","命名","启动","类似","实现","很多","，","具体","试一试","rviz","sudo","开发","工具","在","一句","大家","一样","我们","每个","是"," ","模块","来","都","install","命令","起来","接下来","需要","这样","-","里边","基于","humble","功能","接下","rqt"],"title":"rqt介绍","title_tokens":["介绍","rqt"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_1","text":"","text_tokens":[],"title":"日志显示","title_tokens":["日志","显示"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_2","text":"","text_tokens":[],"title":"图像显示","title_tokens":["图像","显示"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_3","text":"","text_tokens":[],"title":"接口控制","title_tokens":["接口","控制"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_4","text":"","text_tokens":[],"title":"数据曲线","title_tokens":["数据","曲线"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_5","text":"","text_tokens":[],"title":"数据包管理","title_tokens":["数据包","管理","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_6","text":"","text_tokens":[],"title":"节点可视化","title_tokens":["可视化","节点","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_7","text":"https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":[":","console","tutorials","ros","using","html",".","-","https","org","/","humble","docs","about"," ","rqt","en","concepts"],"title":"参考资料","title_tokens":["参考","参考资料","资料"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/","text":"资源汇总 常用框架 自主导航 比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/ 自动驾驶 自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/ 路径规划 此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/ 机器人学 ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。 视频课程 斯坦福大学公开课 —— 机器人学 台大机器人学之运动学 Self-Driving Cars with ROS2 & Autoware 古月学院 常用链接 ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":["》","中文","提供","cars","&","一个","基本功能","的","更","with","会","gazebo","行业","快速","技能","2","工程师","感兴趣","documentation","经典","社区","www","实操","roscon","代码","规划","要","ros2","至于","机器人","开发","这","ubuntu","相关","包含","基本功","内功","移动","结合"," ","本书","导航",":","运动","版本","每一","io","humble","斯坦福","知识","之","称为","这套","。","最为","有","等","移动机器人","完整","运动学","一本","进行","/","可以","之一","使用","检测","修炼","这个","仔细阅读","自身","guyuehome","非常","和","autowarefoundation","auto","选择","兴趣","任何","几个","框架","被","仔细","docs","应用","参考","在","斯坦福大学","学院","自动","自主","机器","index","典型","self","路径","除此之外","学习","http","驾驶","此外","好","课程","功能","classic","必备","、","了","丰富","动机","对","多","自己","理论知识","大学","一种","gitlab","html","中","资源","理论","福大","古月","cn","推荐","也","公开","之外",".","链接","分拣","就","视觉","商业","实现","很多","，","导论","人手","除此","视频","robots","找到","org","商业化","感知","driving","是","wiki","感兴","导航系统","都","模块","navigation","著作","当今","这些","com","汇总","autowareauto","《","台大","著名","ros","机械","经典著作","对应","碰撞检测","公开课","autoware","比如","居","算法","具备","开课","基本","内容","gazebosim","系统","：","常用","得","即便","书籍","人学","阅读","如果","还有","工程","工具","机器人学","大家","https","热门","我们","碰撞","重在","en","臂","github","各种","情况","不","moveit","-","控制","上","—"],"title":"**资源汇总**","title_tokens":["汇总","*","资源"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_1","text":"","text_tokens":[],"title":"资源汇总","title_tokens":["汇总","资源"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_2","text":"","text_tokens":[],"title":"常用框架","title_tokens":["框架","常用"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_3","text":"比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/","text_tokens":["。","了","动机","提供","移动机器人","自己","完整","ros","基本功能","进行","的","比如","可以","算法","会","使用","中","/","具备","快速","基本","也","内容","系统","这个","：","和","即便",".","链接","代码","如果","要","ros2","实现","任何","，","框架","应用","机器人","开发","参考","在","大家","相关","https","org","我们","基本功","自主","移动","机器"," ","导航系统","导航","都",":","各种","navigation","不","好","功能","上","这套"],"title":"自主导航","title_tokens":["自主","导航"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_4","text":"自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/","text_tokens":["。","autowareauto","了","最为","有","等","著名","丰富","对","ros","一种","gitlab","一个","中","的","autoware","之一","可以","/","行业","也","系统","这个","感兴趣","：","非常","和",".","社区","autowarefoundation","链接","www","auto","如果","规划","兴趣","商业","实现","很多","，","框架","几个","应用","机器人","这","参考","在","大家","热门","自动","包含","https","商业化","感知","org","是","机器"," ","感兴","典型","模块",":","驾驶","功能","io","控制","当今","—","、"],"title":"自动驾驶","title_tokens":["驾驶","自动"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_5","text":"此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/","text_tokens":["。","等","多","ros","机械","碰撞检测","中","的","可以","更","检测","使用","/","也","内容","这个","非常","经典",".","链接","分拣","规划","视觉","还有","，","框架","这","在","相关","大家","找到","https","org","碰撞","是"," ","都","臂","运动",":","moveit","此外","功能","、"],"title":"路径规划","title_tokens":["规划","路径"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_6","text":"ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。","text_tokens":["。","《","》","有","理论知识","中文","ros","一本","经典著作","对应","的","理论","比如","可以","技能","推荐","修炼","工程师","仔细阅读","自身","得","书籍","之外","经典","人学","阅读","实操","选择","就","，","导论","至于","被","仔细","开发","机器人","工具","工程","机器人学","人手","除此","相关","大家","内功","是","机器","重在"," ","结合","本书","都","版本","除此之外","学习","每一","情况","著作","知识","必备","这些","称为"],"title":"机器人学","title_tokens":["人学","机器","机器人学","机器人"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_7","text":"斯坦福大学公开课 —— 机器人学 台大机器人学之运动学 Self-Driving Cars with ROS2 & Autoware 古月学院","text_tokens":["台大","大学","cars","&","运动学","公开课","autoware","with","福大","古月","开课","公开","人学","ros2","机器人","机器人学","斯坦福大学","学院","driving","机器"," ","self","运动","-","斯坦福","之","—"],"title":"视频课程","title_tokens":["课程","视频"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_8","text":"ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":["ros","html","居","/","古月","cn","gazebo","2","gazebosim","：","documentation","guyuehome",".","www","roscon","ros2","ubuntu","robots","https","org","index"," ","en","wiki",":","github","http","humble","classic","docs","com"],"title":"常用链接","title_tokens":["链接","常用"]}]}