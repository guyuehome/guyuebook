{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的电气时代。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的数字时代，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发，智能机器人时代正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。 教程链接 课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 博客泡泡： https://www.guyuehome.com/ 教程问答： https://www.guyuehome.com/bubble/index 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 参考资料： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["之后","操控","随着",".","s","教程","技术","类型","教器","开发","了","过程","robot","工业","：","年前","而言","传感","逐渐",":","视频","工厂","泡泡","system","驱动","https","guyuehome","数字","资料","exc6","动作","伺服","人工","发展","此时","控制","依然","控制器","操作系统","提取","图文","思考","不过","四足","参考","。","不断丰富","感器","检测","驱动器","后","拉开","自主","电机","层面","关注","机器人","是","七八十年","家庭","生产","局部","最佳","、","送餐","横跨","年","七八十","传感器","问答","井喷","baidu","主角","com","软件","工业生产","缺少","电气","book","由示","但是","狗","等","21","按照","伺服电机","pan","博客","出现","2015"," ","这","自动","爆发","仿生","1dvxugmhxlxnsnfdezuxw0g","不断","八十","并","十年","八十年","命令","计算","更加","拉开序幕","大","ros2","感知","于","环境","设备","_","智能","提出","index","帮助","tutorials","www","七八","多","operating","释放","只能","的","视觉","太","链接","2000","更","机器","/","完全","成为","序幕","计算机","参考资料","我们","重要","这是","俗称","之一","要求","劳动力","减速机","汽车","码","算机","丰富","就是","服务","主要","agv","ai","劳动","动力","执行","人类","业生","bubble","热点","有限","源码","载体","呈","正式","和","驾驶","必将","时代","—","gitee","课程","快速","，","经历","class","时期","状","减速","高","操作","人工智能","最为","系统","没有","也","三个","前夜","对","应用","github","智能化"],"title":"引言","title_tokens":["引言"]},{"location":"#_1","text":"课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 博客泡泡： https://www.guyuehome.com/ 教程问答： https://www.guyuehome.com/bubble/index 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 参考资料： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["1dvxugmhxlxnsnfdezuxw0g",".","s","教程","码","：",":","视频","bubble","泡泡","ros2","_","问答","https","index","guyuehome","源码","资料","tutorials","www","exc6","baidu","提取","com","gitee","图文","book","课程","链接","21","class","参考","/","pan","参考资料","博客","github"," "],"title":"教程链接","title_tokens":["教程","链接"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["所有","模式","书面","众多","学习","任何","地区",".","万人","社区","面向未来","武汉","赋能","开发","许可","高校","微控","限于","致力","视频","知名","构建","合法","与","累积","超过","guyuehome","精锋","修改","提供","+","为","追究其","被","责任","。","明者","面向","均","法律","不","学习者","《","未来","居","致力于","上述","（","华语","网站","质量","是","机器人","万字","实践","声明者","建立","通过","抄录","高质","、","出版","生态","1000","年","法律责任","公司","镜像","企业","com","人才","拥有","产品","brand","授权","等","畅销","复制","高质量","请","至今","上"," ","交流学习","及","依法","个人","捆绑","仅限","将","线上","用户","未经","版权","如需","作品","平台","合作","学","2011","www","违反","交流","的","追究","创建","其它","集","机器","培养","科技","课件","小时","人才培养","内容","优质","一体","但","声明","校企","本","ai","究其","联系","）","有限","120","源码","使用","销售","进行","@","努力","和","图书","单位","课程","，","包括","传播","对本","古月","》","ros","有限公司","或","不得","创新","有权"],"title":"关于教程","title_tokens":["关于","教程"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["模式","众多","学习","地区",".","万人","社区","面向未来","赋能","开发","高校","致力","视频","知名","构建","与","累积","超过","guyuehome","提供","+","为","。","面向","学习者","《","未来","居","致力于","（","华语","质量","是","机器人","万字","实践","建立","通过","高质","、","出版","生态","1000","年","企业","com","人才","等","畅销","高质量","至今"," ","交流学习","及","线上","用户","平台","合作","2011","www","交流","的","创建","集","机器","培养","小时","人才培养","内容","优质","一体","校企","ai","）","120","努力","图书","课程","，","古月","》","ros","创新"],"title":"学机器人，上古月居","title_tokens":["机器","居","古月","学","机器人","上","，"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["所有","书面","学习","任何",".","武汉","许可","微控","限于","视频","合法","与","guyuehome","精锋","修改","为","追究其","被","责任","。","明者","均","法律","不","居","上述","网站","声明者","抄录","、","法律责任","公司","镜像","com","拥有","产品","brand","授权","等","复制","请"," ","依法","个人","捆绑","仅限","将","用户","未经","版权","如需","作品","违反","的","追究","其它","科技","课件","但","声明","本","究其","联系","有限","销售","源码","使用","进行","@","和","单位","课程","，","包括","传播","对本","古月","有限公司","或","不得","有权"],"title":"版权声明","title_tokens":["版权","声明"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/","text":"ROS/ROS2是什么 智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。 ROS的诞生 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS的发展 ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称ROSCon，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。 ROS的特点 ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的应用案例在社区中沉淀下来； ROS本身也是完全开源的，商业许可证非常宽松； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品，缩短了产品的上市时间； ROS也可以跨平台使用，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多支持工业应用的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。 参考资料 关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["清晰","如何","学习","系列",".","工程","掀起","教程","尝试","已有","代码","微软","就","大家","开发","robot","工业","站","而言","还","多年","直接","conference","版","苹果","？","资料","做","google","快","大大","有没有","时间","一家","利器","参考","推动","投了","wiki","类似","一样","来","多媒体系统","不","20","一个","据库","普遍","上市","稳定","迭代","底盘","找到","网站","层面","同样","整合","既然","神秘","充足","增长速度","电路","提问","青年","虽然","同时","讨论","使命","版本","统计","横跨","personal","活跃度","效率","年","公司","年轻","独立","排名","正在","团队","这群","第一","臂","还有","等","一系列","初期","25","所学","变为","因为","率","笔记本","2015","时候","直到","访问","论坛","等等","下载","万","通信","巨人","离不开","多项","游戏","250","线上","实验","年轻人","生态系统","这里","80","斯坦福","真正","面纱","新增","物体","于","都","world","平台","或者","原型","肩膀","后续","扩展","有人","引擎","跨平台","推荐","operating","投资","两个","一系","神兵","前","疫情","全新","风险","一大笔","基本上","机器","迎来","限性","当初","成为","笔记","起点","频繁","设计","宽松","开始","爆款","外观","内容","斯坦福大学","福大","个","关键","这样","趋势","其实","不断更新","资金","中","元素","搜索","每","着","做到","进行","2022","头发","所以","玩耍","人","做饭","时代","一次","访问量","沉淀","望而却步","商业化","情况","巨大","最为","研发","之","百万","应用","总而言之","智能化","方法","github","包","差不多","今日","作为","知识","制造","随着","万人","看到","技术","2","深知","注意","由","维基百","维基","不开","美妙","逐渐","月","视频","起来","成果","终于","打","介于","了解","system","给出","到","以上","特性","现在","历经","可为","熟悉","存储","很多","嘉宾","实验室","收拾","原因","为","更新","被","做法","机制","roscon","支持","越来越","专业","intel","索引","居","代表","移动","代","2010","机械","才","从","通过","不乏","处理","、","第一个","没想","全","成功","想到","2012","ros1","简称","张图","曲线","起","为了","万万","核心","一步","人才","总称","亚马","进化","电脑","零部件","活跃","各种","相关","解决","大部","容易","“","有志","应用软件","创始","各种各样","b","两年"," ","柔性","能够","居高不下","跟随","浪潮","工程师","本身","并","用户","开发工具","又","然后","几年","最高","答案","其中","智能","肩负","之上","齐聚一堂","聊天","全人类","同理","局限","四大","willow","革命","重量级","软件系统","不同","所有人","多万","一堂","欢迎","而且","同学","这些","确定","台球","适用","一套","一大步","以","五年","日常","不是","重要","联合","一大","速度","总体","一段","；","汽车","数据库","上图","商业","月底","得到","绝大","加快","服务","向前","主要","入门","掌握","复杂","肯定","改为","跑","动力","windows","图中","光靠","熨烫","120","源码","部分","2007","正式","只要","认识一下","扫地","采购","接下来","40","，","学术","linux","当时","增长","系统","缩短","几乎","没有","也","对","板块","大","组成","向","开发者","自己","所有","这一波","首先","亚马逊","此","社区","棒","性能","迅猛","了","过程","给","甚至","：","推出","那","加","世界","高度","整理","不到","活动","此后","暴露","不想","媒体","其他","提供","一些","发展","普及","重量","你","剪头发","远","生态系","强悍","名称","啦","会","对于","一群","下来","详细","之内","乐意","家","条","左右","新鲜事","步伐","只想","挑战","pr2","而","嵌入式","近两年","关于","是","高效","游戏机","方向","最佳","水下","进步","分钟","一定","第一次","回到","怀揣","问答","a","项目","叠","c","浏览","几百","2014","功能","成本","软件","产品","国家","重新","一切","查看","用于","体感","以叠","向前走","踏上","为例","100","款","图","上","至今","广泛","统统","来讲","友好","笔记本电脑","想法","标准","场景","轰动","各样","提高","受限于","正式版","ros2","这个","方式","局限性","上去","看中","帮助","2011","多","复合","通常","资源","零","原本","年底","百科","洗衣","百科全书","更","/","涉及","完全","15","基于","采用","人形","该","推进","毛巾","一下","让","动机","单独","org","只","一届","简单","干","长期","受限","工具","本","大部分","不要","诞生","度","发布","价格便宜","模块","可能","humble","人类","人数","他们","目标","大量","却步","之旅","创意","努力","入门教程","带领","风险投资","经历","2017","绝大部分","ros","长远","智慧","接下","其次","正如","万左右","要","尽量","认识","任何","页面","效果","最后","实现","便宜","促使","领域","有","许可","同一","大学","传感","四项","限于","后期","发表","一款","嵌入","泡泡","问题","无疑","针对","xbox","木头","做出","圈","每个","特点","浏览量","同年","模块化","可以","此时","控制","操作系统","框架","真的","提取","全人","越来","新鲜","无聊","早期","。","呢","感器","上边","各项","几个","陪","几百万","时至今日","算是","叫做","没想到","全球","别人","复用","机器人","希望","事情","因","在","已经","繁荣","体系","不多","packages","却","全书","加上","生态","出来","discourse","很","传感器","衣服","大会","围绕","结晶","大有可为","开源","来看","回答","次数","大步","量级","来到","数据","自身","完成","但是","来自","全球化","好","助推","部件","主阵地","用","一大笔钱","做成","根据","更好","kinect","选择","不仅","这位","这","每年","个人","许可证","不断","从中","进入","而生","具备","150","身影","配合","什么","将","一起","基本","不下","把","低","记录","集合","提出","index","精致","价格","更为","阵地","garage","近几年","地域","这款","举办","的","分享","时间轴","研究","参考资料","多媒体","我们","如果","ubuntu","无论是","托管","这是","成熟","还是","案例","手机","”","就是","answers","新","之王","无论","下","大笔","5","为什么","得以","资本","使用","造","程度","维基百科","官方","轮子","和","说干就干","—","讲解","比如","快速","课程","非常","虽好","肩负着","野蛮","标志","绝对","操作","古月","turtlebot","明智","移动机器人","很快","说明"],"title":"ROS和ROS2是什么","title_tokens":["ros","和","ros2","是","什么"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#rosros2","text":"智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。","text_tokens":["这位","这","一下","认识","掀起","挑战","场景","而生","是","机器人","就","开发","了","神秘","方向","什么","大家","那","一起","高度","又","面纱","中","全","ros2","智能","提出","？","正在","嘉宾","操作系统","认识一下","重量","时代","的","带领","重量级","进化","接下来","量级","，","机器","下来","。","操作","巨大","系统","ros","呢","对","接下","应用","我们","智能化","向"," "],"title":"ROS/ROS2是什么","title_tokens":["/","ros","ros2","是","什么"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。","text_tokens":["所有","如何","要","系列","尝试","技术","2","看到","最后","实现","深知","就","性能","大家","开发","了","robot","有","甚至","：","同一","那","大学","还","整理","不到","后期","一款","不想","打","问题","给出","针对","苹果","木头","？","做出","圈","做","一些","很多","可以","此时","操作系统","实验室","收拾","真的","框架","你","剪头发","越来","强悍","有没有","无聊","对于","一群","。","推动","呢","之内","类似","越来越","专业","家","不","条","一个","陪","找到","代","层面","同样","pr2","别人","是","机器人","高效","事情","机械","电路","既然","青年","充足","才","虽然","因","在","已经","处理","、","却","横跨","分钟","出来","personal","第一次","效率","年","很","叠","衣服","独立","团队","功能","软件","第一","大步","一切","零部件","完成","但是","等","用于","容易","初期","一系列","以叠","部件","向前走","用","因为","有志","应用软件","为例","100","款","图","上"," ","时候","柔性","这","个人","想法","标准","从中","轰动","而生","并","什么","实验","一起","斯坦福","低","物体","这个","答案","都","其中","智能","平台","或者","帮助","原型","精致","有人","多","聊天","这款","的","洗衣","一系","软件系统","所有人","更","机器","分享","而且","涉及","成为","基于","台球","设计","研究","一套","我们","如果","一大步","不是","重要","联合","外观","毛巾","一大","只","斯坦福大学","干","手机","福大","就是","个","服务","向前","这样","诞生","复杂","肯定","可能","资金","中","图中","5","他们","光靠","为什么","得以","熨烫","2007","头发","所以","玩耍","只要","人","做饭","和","说干就干","—","一次","，","非常","学术","当时","操作","系统","ros","没有","也","应用","组成","很快","自己"],"title":"ROS的诞生","title_tokens":["的","诞生","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_1","text":"ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称ROSCon，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。","text_tokens":["所有","随着","亚马逊","教程","微软","注意","就","开发","了","robot","给","便宜","推出","过程","大学","传感","逐渐","限于","后期","直接","多年","conference","暴露","一款","此后","终于","介于","版","了解","system","问题","到","xbox","现在","圈","每个","历经","做","熟悉","同年","可以","发展","控制","普及","操作系统","提取","原因","为","被","越来","名称","大大","会","时间","早期","一家","roscon","。","推动","投了","支持","类似","一样","越来越","感器","intel","一个","几百万","稳定","叫做","迭代","底盘","没想到","步伐","只想","pr2","2010","全球","近两年","而","是","机器人","游戏机","从","在","已经","不乏","使命","、","第一个","版本","没想","加上","出来","成功","回到","想到","2012","年","传感器","项目","简称","公司","年轻","几百","大会","起","为了","万万","2014","开源","成本","功能","团队","软件","亚马","这群","第一","电脑","各种","但是","来自","等","大部","体感","助推","变为","因为","一大笔钱","创始","各种各样","笔记本","款","2015","两年"," ","kinect","不仅","这","直到","每年","居高不下","跟随","个人","能够","笔记本电脑","进入","身影","游戏","线上","年轻人","各样","几年","不下","这里","把","斯坦福","真正","受限于","大","ros2","正式版","于","这个","其中","world","局限性","肩负","提出","看中","原型","之上","价格","2011","齐聚一堂","多","garage","operating","举办","投资","局限","willow","原本","年底","的","前","疫情","全新","风险","一大笔","更","机器","迎来","限性","一堂","分享","当初","时间轴","成为","笔记","起点","采用","确定","设计","适用","开始","我们","该","ubuntu","爆款","五年","这是","一大","重要","让","成熟","单独","一届","斯坦福大学","商业","月底","福大","长期","绝大","受限","关键","加快","大部分","服务","本","诞生","发布","价格便宜","改为","下","中","大笔","humble","5","他们","资本","使用","部分","却步","每","着","进行","2007","正式","2022","官方","所以","人","扫地","和","—","时代","讲解","快速","风险投资","，","望而却步","虽好","经历","肩负着","2017","野蛮","标志","绝大部分","ros","操作","系统","增长","也","百万","turtlebot","应用","很快","开发者","自己"],"title":"ROS的发展","title_tokens":["的","ros","发展"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_2","text":"ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的应用案例在社区中沉淀下来； ROS本身也是完全开源的，商业许可证非常宽松； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品，缩短了产品的上市时间； ROS也可以跨平台使用，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多支持工业应用的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["今日","尽量","制造","已有","此","社区","看到","技术","最后","实现","就","大家","开发","促使","领域","给","有","站","了","由","：","那","还","工业","直接","许可","成果","嵌入","媒体","到","特性","特点","做","模块化","很多","可以","发展","全人","远","生态系","做法","越来","被","会","机制","时间","一家","下来","。","支持","来","越来越","家","多媒体系统","一个","普遍","时至今日","上市","代表","移动","全球","嵌入式","整合","复用","别人","是","机器人","机械","从","同时","水下","繁荣","在","已经","体系","、","进步","生态","怀揣","a","ros1","公司","c","围绕","结晶","核心","功能","开源","一步","软件","人才","总称","产品","重新","臂","各种","自身","用于","全球化","向前走","率","“","做成","各种各样","b","至今","上"," ","这","广泛","统统","来讲","许可证","友好","通信","巨人","标准","具备","多项","身影","本身","并","将","生态系统","各样","一起","开发工具","这里","把","提高","新增","ros2","智能化","这个","都","集合","上去","智能","平台","肩膀","引擎","多","跨平台","复合","通常","全人类","零","同理","四大","的","更","机器","分享","成为","这些","完全","设计","宽松","人形","多媒体","我们","无论是","以","推进","不是","动机","；","还是","汽车","案例","简单","商业","”","就是","工具","向前","新","不要","这样","跑","模块","无论","中","人类","windows","他们","目标","部分","造","做到","着","使用","创意","轮子","和","采购","沉淀","比如","快速","，","非常","linux","商业化","ros","系统","长远","缩短","之","明智","也","移动机器人","智慧","应用","对","正如","组成","自己"],"title":"ROS的特点","title_tokens":["的","特点","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_3","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。","text_tokens":["差不多","清晰","这一波","作为","学习","任何","页面",".","万人","教程","社区","看到","棒","就","迅猛","大家","开发","维基百","了","有","：","维基","加","给","四项","而言","活动","发表","月","起来","其他","问题","无疑","到","以上","？","现在","浏览量","每个","可为","存储","很多","可以","发展","快","你","越来","新鲜","会","利器","参考","。","呢","wiki","乐意","越来越","上边","不","20","索引","一个","左右","新鲜事","据库","各项","几个","算是","代表","网站","全球","关于","整合","是","开发者","机器人","增长速度","希望","从","最佳","通过","不多","在","讨论","已经","packages","、","统计","discourse","活跃度","问答","很","张图","曲线","浏览","大有可为","排名","正在","核心","功能","来看","回答","次数","国家","活跃","查看","各种","相关","数据","等","大部","助推","25","根据","上"," ","选择","这","访问","浪潮","论坛","等等","下载","万","150","250","什么","用户","基本","这里","几年","80","大","记录","说明","方式","都","最高","其中","提出","index","更为","多","近几年","资源","地域","两个","革命","的","百科","神兵","不同","基本上","多万","机器","15","这些","频繁","成为","我们","如果","日常","重要","这是","速度","总体","；","数据库","org","上图","得到","绝大","就是","本","answers","新","大部分","趋势","度","其实","发布","动力","中","人数","元素","源码","使用","部分","每","程度","维基百科","人","和","访问量","比如","快速","40","，","非常","增长","ros","情况","最为","绝大部分","研发","绝对","也","应用","总而言之","万左右","包"],"title":"ROS的社区","title_tokens":["的","ros","社区"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#_1","text":"关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["所有","要","作为","知识","首先","学习","工程","代码","万人","教程","社区","技术","效果","最后","大家","开发","有","世界","不开","还","美妙","视频","泡泡","问题","资料","google","提供","可以","你","更新","啦","会","详细","参考","。","一个","几个","居","网站","找到","关于","是","机器人","提问","从","在","全书","一定","项目","开源","来到","解决","还有","大部","好","所学","主阵地","踏上","更好"," ","这","工程师","离不开","不断","配合","将","一起","然后","这里","方法","ros2","这个","都","扩展","后续","阵地","推荐","的","百科","百科全书","机器","分享","欢迎","同学","成为","开始","参考资料","我们","托管","重要","一段","内容","绝大","工具","本","主要","大部分","入门","掌握","之王","不断更新","中","大量","120","搜索","使用","部分","之旅","努力","入门教程","和","—","课程","，","古月","绝大部分","ros","最为","几乎","也","板块","github","其次"],"title":"参考资料","title_tokens":["资料","参考","参考资料"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/","text":"ROS2对比ROS1 在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。 ROS1的局限性 首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。 全新的ROS2 ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。 ROS2 vs ROS1 系统架构 在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。 DDS通信 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。 核心概念 ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。 编码方式 再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。 命令行 最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随课程，你就会慢慢理解这些特性。","text_tokens":["如何","受制于","中间层","学习","工程","代码","放在","教程","经验","一团乱","就","rosrun","大家","开发","通用","而言","还","除了","rtos","直接","交付","部署","？","做","先进","即可","共享","对系统","一团","运算","控制器","很大","理解","联网","层","时间","算力","提","一家","1ms","确实","以下几点","类似","一样","来","不","继续","一个","更换","未来","之前","稳定","个体","封装","找到","名字","印象","层面","同样","充足","足够","稍安","虽然","升级","同时","深入","网络","存在","完整性","使命","版本","消失","编写","只不过","公司","听说","一一","colcon","独立","两者","命令行","前方","二个","这台","具体","右侧","安全性","第一","当然","是因为","也许","还有","等","千差万别","按照","难度","因为","率","出现","时候","经常","变革","网络连接","自动","至关重要","通信","行人","省略","编译系统","完","主","计算","客户端","这里","真正","角色","于","进程","设备","都","基本保障","慢慢","平台","或者","后续","工作","某","跨平台","解密","所示","只能","系统工程","两个","全新","指定","风险","以下","机器","android","改","限性","频繁","最终","通信协议","颠覆","设计","开始","移植性","库会","广泛应用","面向对象","要求","信号","但","走向市场","丰富","这样","内部","成功经验","其实","加密","级别","不好","概念","中","）","涌现","较","发送","底层","当","整体","做到","tcp","每","进行","真实","话题","所以","批量生产","保证","架构","时代","一致","强壮","么","巨大","最为","研发","例子","理器","百万","打交道","应用","一代","方法","之后","大致","布式","编程语言","随着","不难理解","走向","注意","单兵","图像","策略","了解","与","诸多","消费市场","到","python3","以上","保障","特性","修改","熟悉","很多","属性","依然","为","发现","集成","机制","支持","opensplice","越来越","看看","面向","分布式","简单明了","最早","看","后","ament","安全","对象","部头","家庭","通用性","学术研究","可读","从","生产","fastrtps","通过","处理","、","第一个","毛坯房","可读性","全","第二种","明显","成功","彼此","可选","ros1","张图","简称","比","为了","核心","地方","一步","小","电脑","之间","各种","解决","一旦","相关","大部","诟病","自","无法","请","各种各样","新版","项目管理","wifi"," ","完善","编码","能够","发","跟随","python","最新","并","再","编译器","用户","上手","然后","符合","有线","写","纠结","分布","答案","其中","一团乱麻","智能","迈过","之上","程序","接触","唯一","rmw","走","局限","接近","流程","测试","陆续","软件系统","不同","链接","管理","应该","重来","远比","这些","需求","适用","一套","到底","切换","面对","不是","建筑","重要","总体","毛坯","；","汽车","翻新","接收","第二代","商业","一本","绝大","服务","主要","推倒","内存","阶段","第二","由于","怎样","复杂","市场","肯定","动力","windows","勿躁","他","调试","产品化","部分","天翻地覆","配置","解算","厂商","只要","大幅","厂家","why","驾驶","常","二代","，","学术","课时","linux","细节","不爽","减少","高","系统","几乎","没有","也","对","想要","大","过","性","开发者","自己","所有","首先","master","发成","信息","社区","类型","全部","黑客","性能","表示","了","过程","给","：","甚至","不难","那","实时性","可靠性","之初","其他","100ms","只有","动力学","能","受制","rostopic","提供","一些","分散","用到","发展","优化","普及","相对","得","你","不会","大幅度","名称","编程","会","微控制器","不过","客户","对于","啦","迁移","里","实时","生活","最大","带来","自家","一种","编译","发布者","装修","含义","挑战","pr2","嵌入式","借鉴","而","是","举","搭载","最佳","最","幅度","定性","分解","一定","切记","结合","怀揣","不够","听","项目","盖","适合","翻地","几百","多个","下要","成本","功能","软件","产品","重新","以及","用于","更具","vs","而已","成","topic","电脑系统","款","体现","上","图片","条件","运动学","广泛","5g","来讲","标准","场景","中间","标准化","各样","常用","命令","总之","搬","提高","更加","安装","ros2","环境","这个","方式","局限性","换成","工作站","开发方式","历史使命","多","良好","资源","discovery","过来","原本","加入","选项","更","尽力","伙伴","宕机","干扰","批量","/","能力","交道","强","基于","软件开发","消费","该","体验","先","一下","让","借助","陌生","产品开发","多功能","去","简单","除此之外","轻松","初次","工具","延迟","本","大部分","左侧","变得","考虑","不要","诞生","发布","从而","交给","总结","可能","原有","他们","目标","大量","不再","似乎","运动","航天","推倒重来","共享内存","移植","第二个","过去","只是","带领","复杂度","收","间层","绝大部分","ros","长远","有且","更接","下边","单兵作战","rosbuild","尤其","依赖","编码方式","协作","乱麻","需要","格局","意义","适配","要","尽量","相比","一页","任何","通信接口","售价","启动","实现","最后","有","灵活","致使","便于","哪些","一款","macos","嵌入","调用","问题","国际","针对","驱动","它","指挥","揭秘","每个","dds","可以","节点","不太","控制","框架","操作系统","可靠","不能","另外","语言","上升","越来","ceo","一行","房子","。","对比","呢","接口","可选项","另","开发成本","丢","导致","如","几百万","叫做","精力","（","行为","全球","复用","担心","机器人","打成","协议","大部头","满足","建立","应用层","mcu","在","已经","还会","小伙","至关","连接","udp","基础","企业","主角","开源","是否","突然","来看","现有","middleware","数据","完成","但是","好","不用","用","稳定性","总体而言","除此","做成","run","各位","更好","选择","不仅","是从","这","物","不断","具备","面临","什么","将","干掉","担忧","基本","实力","把","小伙伴","周期","国际标准","方案","管理器","高昂","变化","api","学","差异","几点","之外","amr","的","接入","完整","内","作战","暂且","catkin","研究","运行","我们","方便","如果","出错","定义","专注","c++","道坎","一边","保留","不断涌现","手机","就是","可移植","颠覆性","无论","下","为什么","有限","力学","使用","历史","角度","雷达","和","入侵","新一代","—","会成","讲解","比如","课程","非常","时","操作","或","二种","可移植性","没","三个","说明"],"title":"ROS2对比ROS1","title_tokens":["ros2","对比","ros1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2ros1","text":"在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。","text_tokens":["之前","这","学习","第二代","就","就是","有","从","在","第二","ros2","其中","能","到底","ros1","变化","使用","？","听说","做","多","和","你","来看","的","二代","名称","，","也许","么","。","ros","对比","或","看看","不","大","我们","一个","过","上"," "],"title":"ROS2对比ROS1","title_tokens":["ros2","对比","ros1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros1","text":"首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。","text_tokens":["要","首先","随着","售价","类型","黑客","走向","就","单兵","开发","了","有","：","甚至","那","致使","可靠性","一款","嵌入","问题","针对","它","？","先进","一些","可以","发展","普及","框架","运算","可靠","会","时间","算力","。","呢","支持","类似","实时","不","最早","一个","丢","找到","pr2","嵌入式","是","机器人","家庭","充足","足够","学术研究","虽然","从","搭载","生产","网络","在","已经","处理","第一个","连接","不够","ros1","适合","翻地","为了","独立","主角","这台","成本","具体","地方","来看","小","软件","产品","第一","数据","当然","是因为","各种","完成","但是","大部","用于","不用","用","因为","做成","款","出现","上"," ","这","网络连接","条件","自动","通信","不断","具备","什么","并","担忧","实力","计算","有线","更加","ros2","设备","答案","都","高昂","工作站","平台","或者","工作","良好","资源","只能","原本","的","风险","机器","干扰","批量","能力","作战","最终","设计","研究","运行","我们","让","；","汽车","不断涌现","走向市场","绝大","就是","服务","大部分","这样","内部","诞生","级别","复杂","由于","市场","中","他","涌现","目标","为什么","有限","部分","历史","似乎","天翻地覆","航天","批量生产","保证","why","和","入侵","驾驶","新一代","—","比如","课程","，","学术","绝大部分","ros","系统","没有","也","单兵作战","应用","一代","自己"],"title":"ROS1的局限性","title_tokens":["限性","局限","的","局限性","ros1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2","text":"ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。","text_tokens":["如何","受制于","工程","代码","经验","就","大家","开发","通用","还","除了","rtos","直接","部署","？","对系统","控制器","很大","算力","提","1ms","以下几点","类似","不","继续","一个","未来","稳定","个体","层面","虽然","升级","同时","网络","完整性","使命","编写","colcon","独立","前方","具体","安全性","第一","等","千差万别","出现","时候","经常","变革","网络连接","自动","通信","行人","编译系统","真正","角色","于","基本保障","都","平台","或者","后续","工作","跨平台","解密","系统工程","两个","全新","风险","以下","机器","android","最终","颠覆","设计","要求","信号","但","这样","成功经验","不好","加密","中","）","较","发送","做到","进行","所以","架构","时代","强壮","巨大","研发","理器","应用","方法","布式","走向","策略","与","诸多","消费市场","到","python3","保障","特性","修改","很多","为","发现","机制","越来越","分布式","后","ament","安全","通用性","、","第一个","毛坯房","全","第二种","明显","成功","ros1","比","为了","电脑","之间","各种","一旦","无法","各种各样","新版","项目管理","wifi"," ","能够","python","最新","并","编译器","纠结","分布","智能","之上","流程","测试","不同","链接","管理","重来","远比","这些","需求","面对","不是","建筑","毛坯","汽车","翻新","推倒","阶段","第二","肯定","动力","怎样","市场","复杂","windows","调试","产品化","解算","驾驶","，","课时","linux","细节","系统","没有","也","对","大","性","开发者","自己","所有","master","全部","性能","黑客","了","给","：","甚至","那","实时性","之初","100ms","动力学","能","受制","提供","优化","相对","得","不会","会","微控制器","实时","生活","一种","编译","装修","挑战","借鉴","是","搭载","最佳","定性","分解","一定","结合","怀揣","项目","盖","适合","下要","软件","产品","重新","以及","用于","更具","电脑系统","体现","上","运动学","标准","场景","标准化","各样","更加","ros2","环境","这个","历史使命","多","原本","更","尽力","宕机","强","消费","体验","一下","让","借助","去","简单","工具","考虑","可能","原有","他们","大量","不再","运动","推倒重来","移植","过去","只是","ros","长远","rosbuild","尤其","协作","需要","格局","要","尽量","相比","任何","实现","有","一款","macos","问题","针对","它","dds","可以","节点","控制","操作系统","框架","可靠","不能","语言","越来","房子","。","呢","接口","导致","叫做","（","行为","机器人","打成","满足","mcu","在","已经","还会","连接","基础","来看","数据","完成","但是","好","不用","用","稳定性","选择","不仅","这","具备","面临","基本","把","周期","方案","管理器","变化","api","差异","几点","amr","的","完整","内","catkin","运行","我们","方便","出错","c++","保留","手机","就是","颠覆性","无论","下","力学","使用","历史","和","入侵","比如","课程","操作","二种","说明"],"title":"全新的ROS2","title_tokens":["的","全新","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2-vs-ros1","text":"","text_tokens":[],"title":"ROS2 vs ROS1","title_tokens":["ros2","vs"," ","ros1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_1","text":"在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。","text_tokens":["所有","大致","中间层","学习","master","通信接口","不难理解","信息","一团乱","注意","就","大家","开发","了","图像","有","不难","那","rtos","哪些","macos","了解","调用","只有","驱动","它","指挥","dds","提供","很多","可以","节点","共享","不太","一团","另外","操作系统","框架","得","理解","ceo","发现","机制","会","不过","客户","层","。","里","可选项","接口","类似","一样","对比","不","简单明了","一个","看","更换","稳定","封装","找到","名字","印象","而","是","协议","建立","应用层","最","通过","深入","在","、","至关","明显","消失","彼此","连接","udp","可选","听","ros1","只不过","张图","公司","两者","右侧","突然","数据","好","自","而已","成","请","上"," ","时候","完善","这","至关重要","是从","通信","标准","中间","再","将","并","客户端","把","角色","更加","写","安装","ros2","进程","这个","都","管理器","一团乱麻","方式","变化","后续","程序","接触","走","discovery","的","选项","管理","应该","内","这些","交道","频繁","基于","通信协议","开始","一套","我们","如果","库会","重要","先","让","接收","但","简单","就是","主要","左侧","变得","内存","这样","发布","肯定","从而","复杂","中","windows","底层","大量","整体","tcp","进行","共享内存","雷达","会成","和","—","架构","比如","，","linux","间层","有且","ros","系统","操作","下边","理器","也","打交道","应用","依赖","方法","过","乱麻","需要"],"title":"系统架构","title_tokens":["架构","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#dds","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。","text_tokens":["适配","要","如何","相比","master","代码","发成","放在","社区","实现","性能","就","开发","了","给","灵活","除了","其他","交付","问题","国际","部署","？","每个","dds","做","熟悉","提供","一些","可以","属性","优化","得","为","联网","一行","会","不过","对于","一家","。","另","opensplice","类似","一样","接口","最大","带来","不","自家","开发成本","一种","一个","丢","更换","稳定","精力","层面","复用","是","机器人","举","协议","满足","fastrtps","最","在","、","版本","udp","ros1","简称","听说","多个","为了","开源","功能","成本","是否","软件","产品","重新","middleware","数据","当然","解决","各种","还有","等","好","诟病","不用","无法","按照","用","率","选择"," ","物","这","能够","发","广泛","5g","来讲","通信","标准","场景","省略","完","并","再","用户","然后","基本","总之","这里","符合","把","提高","更加","国际标准","写","安装","ros2","纠结","于","这个","都","变化","程序","多","唯一","某","rmw","之外","加入","过来","的","接入","软件系统","不同","指定","更","机器","应该","改","/","这些","频繁","基于","通信协议","设计","适用","需求","该","我们","如果","切换","定义","不是","广泛应用","先","让","专注","产品开发","简单","商业","丰富","轻松","就是","延迟","这样","其实","加密","肯定","交给","复杂","中","目标","底层","部分","每","tcp","配置","移植","厂商","所以","只要","厂家","常","比如","，","复杂度","收","不爽","么","时","ros","系统","减少","高","例子","也","三个","想要","应用"],"title":"DDS通信","title_tokens":["通信","dds"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_2","text":"ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。","text_tokens":["意义","几百万","尽量","过","含义","广泛","陌生","学习","全球","保留","就","担心","大家","开发","了","有","并","从","本","在","已经","存在","便于","这里","第二","小伙伴","概念","中","小伙","方法","ros2","方式","其中","到","开发方式","ros1","部分","使用","一一","熟悉","几百","很多","第二个"," ","二个","依然","和","讲解","一致","的","课程","，","非常","会","以及","伙伴","应该","迁移","不用","。","ros","这些","几乎","没有","百万","也","不","应用","我们","各位","如果","开发者"],"title":"核心概念","title_tokens":["核心","概念"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_3","text":"再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。","text_tokens":["之后","如何","编程语言","一页","学习","教程","实现","就","大家","开发","过程","而言","特性","一些","用到","语言","发现","编程","会","不过","确实","。","面向","来","看看","一个","发布者","如","部头","对象","同样","是","机器人","稍安","大部头","可读","从","在","版本","可读性","切记","ros1","项目","企业","具体","一步","软件","大部","难度","总体而言","用","图片","更好"," ","这","编码","来讲","具备","再","搬","提高","写","ros2","方式","迈过","学","后续","程序","多","所示","两个","接近","的","更","机器","软件开发","暂且","我们","移植性","面向对象","总体","道坎","一边","一本","不要","发布","可移植","勿躁","中","当","角度","移植","真实","和","带领","课程","，","更接","操作","可移植性","也","方法"],"title":"编码方式","title_tokens":["方式","编码方式","编码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_4","text":"最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随课程，你就会慢慢理解这些特性。","text_tokens":["所有","大致","master","教程","启动","最后","表示","就","rosrun","大家","开发","了","有","：","而言","以上","特性","揭秘","dds","做","rostopic","即可","分散","节点","控制","相对","理解","你","上升","大幅度","集成","编程","啦","会","。","对比","一个","一种","印象","是","在","幅度","ros1","独立","命令行","核心","功能","现有","相关","好","难度","除此","run"," ","选择","跟随","通信","再","干掉","主","上手","常用","命令","把","ros2","都","换成","慢慢","变化","后续","某","之外","的","陆续","更","这些","我们","如果","多功能","除此之外","初次","就是","工具","总结","概念","下","中","每","话题","大幅","和","—","比如","课程","，","ros","最为","也","对","没","topic"],"title":"命令行","title_tokens":["命令行","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/","text":"ROS2安装方法 本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。 Linux系统简介 时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。 Ubuntu系统简介 我们后续课程使用到的Linux发行版就是ubuntu系统。 Ubuntu诞生于2004年10月份，每六个月发布一个新版本，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。 Ubuntu虚拟机安装 虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下： 1. 下载系统镜像 下载链接： https://ubuntu.com/download/desktop 2. 在虚拟机中创建系统 3. 设置虚拟机硬盘大小 4. 设置Ubuntu镜像路径 5. 启动虚拟机 6. 设置用户名和密码 7. 等待系统安装 8. 完成安装 Ubuntu系统安装好后，大家可以先随意使用熟悉一下。 ROS2系统安装 接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下： 1. 设置编码 $ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8 2. 添加源 $ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844 3. 安装ROS2 $ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop 4. 设置环境变量 $ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。 ROS2示例测试 为了验证ROS2安装成功，我们可以通过以下示例进行测试。 示例一：命令行示例 先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。 示例二：小海龟仿真示例 再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。 附：虚拟机镜像 为了方便大家入门学习，我们也提供了预装好ROS2软件和教程代码的虚拟机镜像，有需要的小伙伴可以通过以下链接下载： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["指令","如何","raw","学习","代码",".","已有","教程","就","cpp","前先要","行列","开发","大家","1991","这套","3","通用","小海龟","可视","还","除了","直接","发扬光大","小海","中将","版","https","？","数字","资料","做","字符","相同","快","联网","时间","用户名","参考","订阅","一样","来","不","install","一个","未来","之前","叫","稳定","名字","实践","比较","虽然","升级","同时","网络","版本","多用户","upgrade","年","公司","镜像","py","命令行","终端","二个","utf","第一","文件","介绍","等","紧随","workstation","2004","传输","因为","多任务","opt","建议","出现","示例","时候","如遇","1dvxugmhxlxnsnfdezuxw0g","下载","等等","通信","计算","这里","37844","一石激起千层浪","于","会加","都","摩拳擦掌","world","或者","后续","工作","update","何人","两个","编辑器","其他软件","位置","创建","海龟","以下","机器","看出","成为","设计","开始","setup","一位","外衣","多人","热情","但","keyrings","个","这样","8","node","概念","中","tee",">","底层","~","每","进行","2022","爱好者","所以","保证","turtlesim","一次","bash","大小","情况","上层","最为","应用","方法","vmware","之后","准备","尚","各个","硬件","看到","技术","2","紧随其后","可视化",":","月","sudo","起来","如下","构建","[","ubuntu20.04","了解","与","-","en","到","现在","curl","熟悉","大学生","ssl","很多","依然","=","激发","预装","更新","免费","探索","dev","支持","越来越","lsb","后","互联","互联网","代表","从","指标","通过","字符串","、","第一个","sources","成功","lc","fedora","为了","null","baidu","核心","电脑","伴随","各种","操作方法","乐于","us",")","优先","请","“","应用软件","各种各样","其","两年"," ","界面","编码","多用","并","再","用户","o","locale","其中","智能","决定","之上","程序","接触","按键","唯一","后缀","测试","真理","收费","不同","链接","管理","应该","试试","务器","计算机","turtle","出","适用","一套","以","重要","码","好后","商业","一","目前","第一句","服务","主要","入门","第二","windows","他","当中","编号","export","任务","分别","pro","listener","蕴藏","接下来","每隔","，","linux","系统","没有","也","对","想要","大","环境变量","开发者","并且","自己","第二句","随意","master","s","一应俱全","千层浪","性能","表示","迅猛","了","过程","本相","甚至","给","：","节","7","等待","路径","六个","其他","lang","至此","编辑","guyuehome","步骤","环境变","吸引","激起","提供","一些","密码","发展","你","啦","会","\"","下来","普通","学生","二","之内","正常","最大","一种","发扬","左右","发布者","10","真器","connect","|","nodes","一应","关于","html","是","关注","最","talker","demo","提到","一定","设置","源代码","回到","第一次","变量","适合","浏览","hello","命名","操作界面","多个","一直","功能","软件","print","报错","重新","浏览器","量","githubusercontent","动手","成","为例","pan","keyring","上","兼容","来讲","仿真","archive","to","标准","场景","http","可","各样","附","影响","常用","命令","04","centos","4","安装","ros2","环境","_","这个","技术实力","打包","维护","顺序","精神","多","蓝色","加入","发行","原本","更","虚拟","--","伙伴","/","gpg","软件开发","采用","signed","验证","1","千层","该","source","先","gen","一下","让","org","算机","只","除此之外","先要","长期","简介","户名","share","by","本","考虑","诞生","发布","硬盘","原有","可能","humble","一般","大量","绑定","teleop","运动","奥义","月份","移植","虚拟机","第二个","试一试","个人爱好","(","源","开放","ros","原理","基本相同","点击","接下","key","依赖","需要","衡量","添加","模式","gnupg","准确","任何","芬兰","强大","林纳斯","效果","占据","实现","启动","rosdistro","unix","lts","领域","有","大学","其后","codename","locales","macos","内核","问题","动手做","dds","exc6","可以","bug","人工","不太","此时","节点","操作系统","另外","控制","提取","一句","检验","越来","上下左右","d","]","。","出于","呢","并用","发行版","ubuntu22.04","叫做","arch","机器人","光大","在","已经","bashrc","packages","热爱","加上","华丽","小伙","很","反馈","任何人","download","企业","echo","仿真器","修复","开源","com","是否","服务器","变动","数据","但是","完成","好","除此","run","选择","不仅","这","每年","唯一标准","个人","&&","什么","将","一起","list","基本","实力","apt","把","自行","小伙伴","俱全","redhat","发挥","www","18","持续","os","之外","architecture","六个月","deb","的","failed","地址","擦掌","22","分享","背景","dpkg","应用程序","通讯","运行","我们","键盘","无论是","ubuntu","如果","者","方便","好者","evaluation","之一","products","成熟","还是","最好","”","就是","$","新","经典","无论","下","6","5","release","吧","有限","desktop","使用","etc","二句","上下","main","和","说干就干","—","讲解","比如","快速","课程","合适","放到","all","传播","usr","绝对","操作","时","人工智能","或","提交","说明","爱好"],"title":"ROS2安装方法","title_tokens":["安装","方法","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2","text":"本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。","text_tokens":["重要","一下","先要","前先要","本","最","节","一起","安装","ros2","了解","底层","操作系统","—","的","，","linux","。","操作","系统","我们","一种"],"title":"ROS2安装方法","title_tokens":["安装","方法","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#linux","text":"时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。","text_tokens":["之后","模式","准确","任何","尚","代码","已有","芬兰","看到","林纳斯","强大","千层浪","实现","硬件","技术","unix","就","行列","开发","了","过程","并且","1991","这套","甚至","通用","大学","本相","还","可视","可视化","发扬光大","起来","macos","内核","与","问题","其他","到","动手做","现在","？","做","熟悉","大学生","激起","吸引","一些","相同","很多","可以","bug","发展","此时","不太","操作系统","激发","另外","联网","检验","越来","会","时间","免费","需要","学生","参考","。","出于","呢","支持","给","越来越","并用","一样","不","发行版","一个","发扬","后","互联","之前","互联网","性能","稳定","叫","叫做","名字","是","光大","实践","虽然","指标","最","通过","在","已经","、","热爱","衡量","提到","加上","华丽","版本","源代码","回到","多用户","年","公司","反馈","教程","镜像","适合","命名","操作界面","任何人","fedora","企业","修复","功能","开源","核心","软件","服务器","重新","伴随","各种","等","量","操作方法","乐于","动手","成","多任务","应用软件","各种各样","出现","其","上"," ","不仅","界面","这","每年","唯一标准","兼容","个人","来讲","等等","标准","场景","多用","什么","并","各样","用户","一起","常用","基本","实力","计算","centos","把","一石激起千层浪","安装","大","ros2","这个","其中","都","技术实力","打包","维护","或者","决定","redhat","精神","之上","有","程序","多","唯一","何人","加入","发行","原本","的","真理","收费","不同","更","管理","应该","分享","应用程序","成为","务器","计算机","设计","适用","一套","一位","千层","我们","ubuntu","外衣","重要","好者","先","多人","之一","成熟","热情","最好","算机","但","商业","迅猛","目前","就是","本","主要","服务","原有","中","windows","他","当中","概念","下","一般","底层","爱好","任务","有限","大量","使用","绑定","每","爱好者","所以","和","说干就干","讲解","—","比如","快速","，","放到","传播","linux","个人爱好","开放","操作","系统","情况","或","原理","提交","也","对","基本相同","没有","应用","依赖","方法","开发者","自己"],"title":"Linux系统简介","title_tokens":["linux","系统","简介"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu","text":"我们后续课程使用到的Linux发行版就是ubuntu系统。 Ubuntu诞生于2004年10月份，每六个月发布一个新版本，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。","text_tokens":["之后","如何","各个","教程","硬件","一应俱全","已有","效果","占据","紧随其后","表示","就","性能","大家","开发","lts","领域","有","了","除了","还","其后","直接","月","六个","版","ubuntu20.04","其他","到","编辑","数字","资料","熟悉","很多","可以","人工","快","依然","你","联网","更新","会","免费","普通","参考","。","支持","之内","最大","发行版","一个","10","未来","互联","ubuntu22.04","互联网","稳定","代表","之前","一应","关注","机器人","是","比较","升级","从","通过","网络","在","已经","、","版本","一定","第一次","年","很","浏览","为了","一直","软件","第一","文件","浏览器","电脑","变动","介绍","各种","但是","等","紧随","好","2004","优先","除此","因为","为例","建议","出现","上","两年","选择"," ","时候","再","用户","影响","常用","04","这里","4","自行","安装","环境","于","会加","俱全","都","其中","智能","维护","顺序","摩拳擦掌","后续","发挥","接触","多","后缀","18","持续","之外","发行","六个月","的","编辑器","位置","不同","更","虚拟","机器","擦掌","22","看出","软件开发","通讯","出","我们","无论是","ubuntu","以","如果","重要","一下","让","还是","只","除此之外","长期","就是","个","本","主要","新","这样","考虑","诞生","发布","硬盘","无论","可能","中","编号","windows","5","使用","每","进行","2022","月份","移植","虚拟机","所以","保证","讲解","一次","课程","比如","每隔","，","合适","试一试","linux","绝对","时","系统","人工智能","上层","或","也","想要","应用","方法","开发者","自己"],"title":"Ubuntu系统简介","title_tokens":["ubuntu","系统","简介"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu_1","text":"虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下：","text_tokens":["准备","evaluation","后","让","叫做","products",".","已有","下载","html","是","就","大家","并","：","同时","在",":","这里","自行","如下","构建","安装","vmware","其他","环境","-","https","步骤","之上","工作","www","多个","相同","虚拟机","可以","另外","com","和","软件","pro","的","其他软件","，","啦","虚拟","完成","地址","workstation","/","。","操作","系统","采用","请","运行","开始","我们","一个"," "],"title":"Ubuntu虚拟机安装","title_tokens":["安装","虚拟","ubuntu","虚拟机"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1","text":"下载链接： https://ubuntu.com/download/desktop","text_tokens":[":","ubuntu","download","/",".","下载","com","desktop","https","："," ","链接"],"title":"1. 下载系统镜像","title_tokens":["镜像",".","下载","系统","1"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2","text":"","text_tokens":[],"title":"2. 在虚拟机中创建系统","title_tokens":["创建","虚拟","在",".","虚拟机","中","系统","2"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3","text":"","text_tokens":[],"title":"3. 设置虚拟机硬盘大小","title_tokens":["虚拟","硬盘","大小",".","虚拟机","设置"," ","3"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4-ubuntu","text":"","text_tokens":[],"title":"4. 设置Ubuntu镜像路径","title_tokens":["镜像","4",".","路径","设置","ubuntu"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#5","text":"","text_tokens":[],"title":"5. 启动虚拟机","title_tokens":["虚拟",".","虚拟机","启动","5"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#6","text":"","text_tokens":[],"title":"6. 设置用户名和密码","title_tokens":["用户","用户名","密码",".","6","设置","和","户名"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#7","text":"","text_tokens":[],"title":"7. 等待系统安装","title_tokens":["7","等待",".","系统","安装"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#8","text":"Ubuntu系统安装好后，大家可以先随意使用熟悉一下。","text_tokens":["先","熟悉","随意","一下","可以","。","系统","好后","安装","大家","使用","ubuntu","，"],"title":"8. 完成安装","title_tokens":["8","完成",".","安装"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_1","text":"接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下：","text_tokens":["就","了","：","把","如下","中","安装","ros2","到","步骤","可以","接下来","，","下来","。","系统","接下","我们","ubuntu"],"title":"ROS2系统安装","title_tokens":["安装","ros2","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1_1","text":"$ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8","text_tokens":["gen",".","&&","$","8","apt","sudo","locales","locale","-","lc","en","_","lang","export","update","=","utf","all","us","install"," "],"title":"1. 设置编码","title_tokens":["编码",".","设置","1"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2_1","text":"$ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844","text_tokens":["gnupg","raw","master",".","rosdistro",":","sudo","codename","[","-","https","guyuehome","curl","ssl","=","\"","d","]","参考","dev","lsb","install","connect","arch","|","packages","sources","echo","null","com","print","报错","githubusercontent",")","“","keyring"," ","如遇","archive","to","http","可","&&","list","apt","o","37844","ros2","_","www","update","os","architecture","deb","failed","--","/","dpkg","gpg","signed","ubuntu","source","org","keyrings","share","”","by","$","tee","release",">","etc","main","，","usr","(","ros","key"],"title":"2. 添加源","title_tokens":["添加","源",".","2"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3-ros2","text":"$ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop","text_tokens":["install","apt","desktop","sudo","update","ros","humble","-","upgrade","$"," "],"title":"3. 安装ROS2","title_tokens":[".","安装","ros2"," ","3"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4","text":"$ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。","text_tokens":["source",".","就","了","$","在","bashrc","已经","中","humble","安装","ros2","至此",">","~","echo","，","setup","\"","bash","好","/","。","ros","系统","opt"," "],"title":"4. 设置环境变量","title_tokens":["环境变","变量","4",".","设置","环境","环境变量"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_2","text":"为了验证ROS2安装成功，我们可以通过以下示例进行测试。","text_tokens":["通过","以下","进行","为了","可以","。","安装","成功","验证","ros2","测试","我们","示例","，"],"title":"ROS2示例测试","title_tokens":["测试","示例","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_1","text":"先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。","text_tokens":["重要","先","启动","通信","nodes","cpp","”","$","：","通过","talker","在","命令","发布","第二","字符串","第一个","demo","中","ros2","吧","说明","_","底层","问题","world","dds","py","hello","字符","第二个","节点","终端","二个","是否","两个","的","第一","listener","，","数据","以下","。","订阅","试试","系统","最为","来","者","传输","没有","正常","run","“","一个","如果","发布者"," "],"title":"示例一：命令行示例","title_tokens":["命令","命令行","一","示例","："]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_2","text":"再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["指令","左右","仿真","教程","启动","关于","第二句","就","”","$","再","：","第一句","将","小海龟","在","经典","第二","node","小海","如下","中将","中","安装","ros2","至此","成功","_","teleop","后续","分别","按键","运动","二句","该","奥义","可以","仿真器","节点","上下","终端","蓝色","控制","持续","两个","—","turtlesim","的","我们","第一","一句","蕴藏","，","上下左右","海龟","啦","试一试","探索","一个","背景","。","ros","来","turtle","点击","“","运行","run","key","键盘","示例","上"," ","真器"],"title":"示例二：小海龟仿真示例","title_tokens":["小海龟","海龟","小海","二","仿真","示例","："]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_3","text":"为了方便大家入门学习，我们也提供了预装好ROS2软件和教程代码的虚拟机镜像，有需要的小伙伴可以通过以下链接下载： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["学习","1dvxugmhxlxnsnfdezuxw0g","代码",".","s","教程","下载","码","大家","了","有","：","通过","入门",":","小伙伴","小伙","ros2","https","镜像","提供","exc6","为了","虚拟机","可以"," ","baidu","预装","提取","com","和","软件","的","我们","，","链接","虚拟","以下","伙伴","好","/","也","pan","方便","需要"],"title":"附：虚拟机镜像","title_tokens":["镜像","虚拟","虚拟机","：","附"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/","text":"ROS2命令行操作 在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。 Linux中的命令行 类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。 启动方式 回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。 常用命令操作 我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。 ROS2中的命令行 ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。 运行节点程序 想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看节点信息 当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim 查看话题信息 当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose 发布话题消息 想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 发送服务请求 一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\" 发送动作目标 想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\" 录制控制命令 系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["指令","如何","学习","系列",".","尝试","就","大家","3","小海龟","可视","还","一二十","直接","具体操作","小海","跟","随身带","？","即可","字符","相同","0.2","源文件","pwd","确实","段","类似","来","一样","均","不","继续","一个","未来","之前","y","geometry","虽然","深入","精心设计","快捷","精心","规则","rotate","统管","命令行","终端","具体","linear","第一","文件","theta","既定","还有","等","一系列","11","复制","产生","因为","笔记本","写字","子","时候","及","实验","这里","背","目的","知道","于","都","干什么","慢慢","或者","转","工作","某","管理员","一系","当前工作","编辑器","指定","创建","海龟","难以","srv","笔记","帮上","设计","材料","改名","发指","内容","但","t","逛来逛去","这样","系统管理员","turtle1","node","不可","概念","中",">","发送","搜索","每","进行","2022","话题","一二","所以","令人","0.0","2.0","turtlesim","一次","体会","每次","买","play","terminal","…","应用","}","麻烦","大致","随着","看到","改了","2","rosbag2","由","可视化",":","sudo","起来","如下","枯燥","[","了解","与","-","到","以上","熟悉","msgs","很多","实验室","原因","子目录","为","款式","rm","被","集成","机制","看看","呈现出","这项","适应","多种","后","数量","手","所在","某段","pub","通过","、","第一个","商场","打开","核心","一步","小","现出","电脑","从来","魅力","各种","解决","容易","想象","“","消息"," ","能够","并","再","兴趣","用户","又","服装","程序","接触","ctrl","太","链接","不同","而是","管理","查","这些","度高","turtle","出","动","需求","angular","以","重要","不是","db3","一","gedit","觉得","并不一定","服务","随身","主要","执行","做好","调试","呈现","地","info","请求","复制到","接下来","40","，","看不到","linux","感受","既","spawn","系统","没有","受","也","对","想要","service","忙","自己","所有","此","输入","信息","黑客","表示","了","推出","：","ls","一件","bag","不到","当前","路径","有点","里边","其他","编辑","x","mv","提供","一些","动作","+","用到","权限","你","列出","cp","名称","啦","会","不过","对于","\"","下来","详细","科幻","移入","必不可少","详细信息","正常","{","goal","一种","炫酷","真器","拷贝到","alt","是","录制","深色","看似","一二十个","一定","第一次","结合","回到","死记","删除","多个","一直","主目录","功能","一点","软件","目录","孤单","查看","总","成","为例","'","至今","上","rate","商家","来讲","仿真","逛来","笔记本电脑","场景","若","mkdir","35","0","想","twist","常用","命令","04","ros2","_","方式","这个","z","看中","窗口","多","什么样","电影","便捷","选项","更","--","/","完全","1","该","体验","先","一下","让","vel","不一","去","初次","轻松","目标目录","action","工具","本","鼠标","发布","可能","原有","rosbag","文件夹","新建","目标","定制","不变","teleop","1.8","至于","拷贝","rotateabsolute","只是","播放","带领","试一试","ros","找","接下","key","二十","绝对路径","需要","硬","要","常用命令","启动","进一步","实现","pose","有","文件名称","灵活","布料","后边","感兴趣","哪些","显示","片段","问题","调用","参数","目","它","其上","例如","可以","节点","不太","此时","控制","体操","改变","name","专门","]","某个","死记硬背","msg","。","呢","另","快捷键","很少","record","叫做","怎么","科幻电影","自主","右键","满足","则","在","已经","记忆","加上","二十个","很","衣服","十个","echo","仿真器","感兴","现有","及其","数据","保持","但是","完成","复现","好","不用","用","17","run","根据","总有","选择","这","令人发指","absolute","语法","将","什么","一只","一起","约束","list","逛去","把","本节","标目","哪",",","呀","的","send","子目","背景","死机","列表","call","运行","cmd","我们","键盘","如果","案例","还是","一边","保留","”","就是","$","这种","无论","下","<","为什么","多到","cd","文件名","使用","角度","异常","和","—","比如","感觉","绝对","操作","或","件夹","topic"],"title":"ROS2命令行操作","title_tokens":["命令行","ros2","操作","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2","text":"在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。","text_tokens":["重要","时候","之前","学习","案例","随着","进一步","大家","了","工具","将","深入","小海龟","在","命令","小海","可能","中","有点","一定","调试","ros2","第一次","本节","到","使用","接触","多","命令行","可以","不太","一步","—","一次","的","带领","第一","，","海龟","会","更","魅力","感受","。","运行","我们","一种","如果"," ","适应"],"title":"ROS2命令行操作","title_tokens":["命令行","ros2","操作","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#linux","text":"类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。","text_tokens":["所有","麻烦","看到","就","大家","了","推出","灵活","布料","一件","可视","可视化","起来","里边","其他","片段","问题","其上","？","一些","很多","可以","此时","你","为","款式","被","会","对于","科幻","。","必不可少","呢","类似","来","一样","不","一种","一个","炫酷","呈现出","科幻电影","手","自主","是","虽然","满足","在","看似","已经","精心设计","、","精心","一定","规则","结合","衣服","商场","命令行","一直","功能","一点","软件","小","现出","现有","既定","解决","但是","各种","等","容易","想象","成","根据","至今","总有"," ","时候","商家","能够","来讲","逛来","场景","并","什么","约束","命令","逛去","这里","服装","于","方式","都","看中","哪","多","某","呀","什么样","的","电影","便捷","完全","这些","度高","设计","需求","我们","材料","不是","先","还是","不一","去","保留","但","就是","并不一定","工具","服务","逛来逛去","这样","这种","不可","无论","中","做好","为什么","呈现","定制","使用","异常","和","比如","每次","，","买","linux","操作","ros","没有","受","想要","自己"],"title":"Linux中的命令行","title_tokens":["linux","命令","命令行","中","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_1","text":"回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。","text_tokens":["指令","硬","系列","随着","输入","看到","启动","黑客","就","大家","有","：","一二十","不到","随身带","枯燥","其他","到","参数","熟悉","即可","字符","可以","+","用到","原因","会","不过","专门","确实","科幻","。","呢","来","正常","快捷键","这项","多种","很少","后","叫做","怎么","科幻电影","手","alt","所在","数量","是","右键","通过","在","深色","快捷","记忆","一二十个","一定","回到","二十个","很","十个","命令行","打开","终端","功能","软件","电脑","从来","魅力","但是","一系列","不用","用","因为","笔记本","写字","上","选择"," ","时候","这","令人发指","及","笔记本电脑","并","什么","又","命令","常用","背","方式","都","这个","慢慢","窗口","ctrl","的","一系","电影","而是","难以","背景","死机","列表","笔记","我们","不是","一下","发指","t","初次","觉得","就是","工具","本","随身","鼠标","中","为什么","多到","使用","搜索","至于","一二","所以","令人","体会","，","看不到","既","terminal","操作","也","对","应用","二十","需要"],"title":"启动方式","title_tokens":["启动","方式"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_2","text":"我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。","text_tokens":["所有","指令","常用命令","此","就","大家","由","了","文件名称","：","ls","sudo","显示","路径","当前","[","编辑","目","它","熟悉","mv","可以","权限","cp","列出","为","rm","子目录","改变","源文件","名称","pwd","会","对于","]","某个","移入","死记硬背","。","另","来","均","不","一个","未来","拷贝到","则","回到","死记","删除","统管","多个","主目录","打开","功能","目录","文件","及其","保持","复制","用","“"," ","及","mkdir","若","语法","将","用户","常用","命令","目的","把","标目","或者","工作","多","管理员","的","编辑器","当前工作","子目","指定","选项","创建","链接","管理","/","列表","查","这些","出","我们","改名","该","体验","以","先","一下","一边","一","gedit","目标目录","”","系统管理员","原有","中","下","执行","文件夹",">","新建","<","目标","文件名","cd","地","不变","拷贝","只是","复制到","，","感觉","linux","绝对","…","系统","或","没有","件夹","找","也","绝对路径","需要"],"title":"常用命令操作","title_tokens":["操作","常用","命令","常用命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2_1","text":"ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。","text_tokens":["所有","大致","内容","系列","仿真","表示","就","什么","有","主要","小海龟","后边","一起","在","命令","还","目的","具体操作","第一个","node","跟","小海","中","下","概念","ros2","与","了解","都","参数","干什么","相同","命令行","节点","话题","可以"," ","核心","功能","具体","体操","的","一系","第一","比如","接下来","集成","，","不同","机制","不过","总","linux","海龟","下来","感受","一系列","。","操作","也","对","接下","为例","继续","我们","一个","以","topic"],"title":"ROS2中的命令行","title_tokens":["命令","命令行","中","ros2","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_3","text":"想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["要","仿真","$","：","命令","node","中","ros2","_","例如","使用","teleop","进行","可以","节点","控制","和","turtlesim","键盘","，","海龟","某个","操作","turtle","运行","想要","run","key","我们"," "],"title":"运行节点程序","title_tokens":["节点","运行","程序"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_4","text":"当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim","text_tokens":["信息","就","$","有","：","兴趣","这样","list","感兴趣","命令","哪些","当前","node","中","加上","ros2","知道","都","它","？","某","info","可以","节点","感兴","turtlesim","的","，","啦","查看","详细","/","详细信息","ros","系统","呢","来","子","对","运行","一个","如果"," "],"title":"查看节点信息","title_tokens":["查看","节点","信息"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_5","text":"当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose","text_tokens":["看到","pose","$","有","：","想","list","还","命令","turtle1","当前","如下","中","加上","ros2","都","使用","即可","某","echo","话题"," ","的","，","查看","数据","试一试","/","呢","系统","消息","一个","子","topic"],"title":"查看话题信息","title_tokens":["查看","话题","信息"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_6","text":"想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":["指令","}","vel","y","$","geometry","：","pub","通过","turtle1","还","命令","twist","发布","直接",":","起来","ros2","_","z","1","x","1.8","msgs",",","可以","命令行","话题","0.0","控制","linear","2.0","，","海龟","--","\"","/","msg","动","{","想要","topic","cmd","我们","angular","rate"," "],"title":"发布话题消息","title_tokens":["消息","话题","发布"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_7","text":"一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\"","text_tokens":["service","}","y","仿真","改了","2","一只","再","：","服务","$","还",":","ros2","调用","x","提供",",","仿真器","turtlesim","孤单","—","0.2","太","，","theta","海龟","试一试","\"","name","call","/","spawn","srv","产生","来","{","'","我们","一个"," ","真器"],"title":"发送服务请求","title_tokens":["请求","服务","发送"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_8","text":"想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\"","text_tokens":["忙","让","仿真","absolute","action","$","：","3","通过","这样","turtle1","命令",":","中","ros2","发送","_","这个","到","目标","rotate","转","角度","提供","rotateabsolute","动作","可以","仿真器","命令行","具体","turtlesim","的","send","比如","指定","，","theta","海龟","\"","完成","/","帮上","goal","想要","一个"," ","真器"],"title":"发送动作目标","title_tokens":["目标","动作","发送"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_9","text":"系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["如何","这","record","vel","还是",".","db3","尝试","rosbag2","实现","轻松","大家","就是","$","某段","再","有","实验","：","35","录制","turtle1","bag","04","0","常用","命令","把","rosbag","中","ros2","与","回到","_","-","以上","很","？","每","2022","很多","可以","功能","实验室","播放","的","40","，","啦","数据","复现","还有","下来","好","11","/","play","。","段","系统","子","用","看看","17","运行","想要","cmd","我们","一个","如果"," ","自己"],"title":"录制控制命令","title_tokens":["录制","命令","控制"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","text":"ROS2开发环境配置 ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。 Git git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git 下载教程源码 《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。 VSCode Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download VSCode插件配置 为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。 中文语言包 Python插件 C++插件 CMake插件 vscode-icons ROS插件 Msg Language Support Visual Studio IntelliCode URDF Markdown All in One VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["所有","准备","之后","如何","几千","众多","作为","代码",".","系列","已有","硬件","看到","教程","强大","微软","就","大家","开发","了","语言包","给","有","：","推出","不开","还",":","便于","git","直接","sudo","一款","macos","官方网站","合并","里边","与","-","intellicode","驱动","编辑","https","变更","？","特性","guyuehome","搭建","以上","做","提供","一些","哪里","linus","bug","人工","可以","发展","很多","另外","操作系统","语言","不会","被","集成","一行","之父","会","理工","visual","轻量","利器","记事本","上万","。","msg","呢","支持","网上","不","install","编译","一个","《","冲突","网站","千万","是","机器人","高效","开发者","喜欢","one","icons","最","因","在","自带","听到","、","urdf","版本","千上万","code","源代码","无限","编写","年","项目","简称","浏览","多个","download","有些","为了","终端","管理软件","修复","功能","具体","开源","com","软件","文件","浏览器","vscode","查看","之间","以及","增加","完成","21","markdown","好","一系列","迅速","码云","插件","官方网","用","示例","2015","成千上万"," ","中会","这","自动","广泛","功能强大","python","略显","下载","离不开","等等","studio","个人","而生","判断","常听到","并","开发工具","命令","apt","这里","中文","组件","clone","安装","方法","ros2","环境","_","方式","都","扩展","后续","tutorials","多","非常简单","推荐","这款","support","的","神兵","一系","编辑器","不同","链接","更","机器","管理","行","/","in","这些","成为","管理工具","出","设计","我们","如果","切换","重要","先","广泛应用","visualstudio","让","内容","c++","但","只","简单","丰富","贡献","工具","国内","$","cmake","新","这样","入门","肯定","审核","复杂","可能","中","windows","几千万","成千","文件夹","调试","大量","language","源码","使用","搜索","下载方式","进行","配置","官方","所以","人","和","gitee","—","课程","每次","比如","，","快速","非常","all","linux","两款","》","ros","系统","操作","讲","记事","提交","也","件夹","应用","github","需要","自己"],"title":"ROS2开发环境配置","title_tokens":["配置","开发","ros2","环境"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros2","text":"ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。","text_tokens":["中会","先","如何","准备","重要","编译","代码","离不开","机器人","大家","开发","工具","给","不开","开发工具","git","肯定","、","环境","编写","大量","源码","？","做","提供","一些","配置","推荐","和","—","的","课程","vscode","，","查看","机器","完成","两款","。","ros","这些","呢","我们","示例","需要"],"title":"ROS2开发环境配置","title_tokens":["配置","开发","ros2","环境"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#git","text":"git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git","text_tokens":["所有","之后","几千","众多","代码","已有","硬件","看到","就","大家","开发","了","有","git","直接","sudo","一款","合并","驱动","变更","特性","linus","哪里","bug","人工","可以","发展","不会","被","一行","之父","会","理工","需要","上万","。","不","install","一个","冲突","网站","千万","是","高效","因","在","听到","版本","千上万","项目","多个","有些","终端","管理软件","修复","功能","具体","开源","软件","之间","以及","增加","完成","迅速","码云","成千上万"," ","这","自动","广泛","等等","而生","判断","常听到","并","命令","apt","安装","方法","都","非常简单","这款","的","不同","管理","行","这些","管理工具","设计","我们","切换","广泛应用","让","内容","简单","贡献","工具","国内","$","新","肯定","审核","可能","中","几千万","成千","使用","进行","所以","人","和","gitee","—","每次","比如","，","非常","linux","系统","提交","也","应用","github","开发者"],"title":"Git","title_tokens":["git"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_1","text":"《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。","text_tokens":["《","代码",".","略显","下载","是","就","开发","$","有","：","这样","还","入门",":","自带","git","这里","复杂","clone","中","里边","文件夹","ros2","环境","_","方式","https","源码","guyuehome","下载方式","tutorials","浏览","多","很多","推荐","另外","com","和","gitee","—","的","文件","课程","浏览器","集成","，","vscode","会","更","查看","21","记事本","好","/","》","。","系统","讲","用","记事","件夹","一个","如果"," "],"title":"下载教程源码","title_tokens":["教程","下载","源码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode","text":"Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download","text_tokens":["visualstudio","功能强大","代码","网站",".","下载","studio","但","强大","微软","丰富","是","开发","推出","：","在",":","、","2015","组件","windows","macos","官方网站","code","源代码","搭建","年","编辑","https","项目","简称","扩展","download","可以","官方","功能","操作系统","com","和","的","神兵","编辑器","快速","vscode","，","链接","visual","轻量","非常","linux","利器","/","。","操作","系统","支持","成为","官方网","一个"," "],"title":"VSCode","title_tokens":["vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode_1","text":"为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。","text_tokens":["系列","开发","还","便于","安装","调试","ros2","与","无限","扩展","后续","为了","可以","功能","一系","的","vscode","，","一系列","。","插件","我们"],"title":"VSCode插件配置","title_tokens":["配置","vscode","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_2","text":"","text_tokens":[],"title":"中文语言包","title_tokens":["中文","语言包","语言"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#python","text":"","text_tokens":[],"title":"Python插件","title_tokens":["python","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#c","text":"","text_tokens":[],"title":"C++插件","title_tokens":["c++","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#cmake","text":"","text_tokens":[],"title":"CMake插件","title_tokens":["插件","cmake"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode-icons","text":"","text_tokens":[],"title":"vscode-icons","title_tokens":["icons","-","vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros","text":"","text_tokens":[],"title":"ROS插件","title_tokens":["ros","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#msg-language-support","text":"","text_tokens":[],"title":"Msg Language Support","title_tokens":["msg","language"," ","support"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#visual-studio-intellicode","text":"","text_tokens":[],"title":"Visual Studio IntelliCode","title_tokens":["visual","intellicode"," ","studio"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#urdf","text":"","text_tokens":[],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#markdown-all-in-one","text":"VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["众多","作为","个人","只","大家","喜欢","开发","最","在","环境","以上","搜索","配置","可以","推荐","的","vscode","，","。","插件","支持","网上","也","出","自己"],"title":"Markdown All in One","title_tokens":["all","markdown","in","one"," "]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/","text":"DDS Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。 通信模型 DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。 DDS DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。 什么是DDS 好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是Data Distribution Service，也就是数据分发服务，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。 DDS在ROS2中的应用 DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。 质量服务策略QoS DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是Domain，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为数据提供者和接收者之间的合约。 具体会有哪些策略？比如这个列表中描述的DEADLINE策略，表示通信数据必须要在每次截止时间内完成一次通信，HISTORY策略，表示针对历史数据的一个缓存大小，RELIABILITY策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式。 还有这个DURABILITY，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。 案例一：在命令行中配置DDS 我们先来试一试在命令行中配置DDS的参数。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort $ ros2 topic info /chatter --verbose 案例二：DDS编程示例 接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。 运行效果 $ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub 发布者代码解析 learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , }, 订阅者代码解析 learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], }, 参考链接 DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们课上主要带领大家认识DDS，更多使用方法和相关内容，课程配套的教程中会有介绍，大家也可以参考这里的链接进行学习。 https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["遥控器","指令","如何","uml","学习","代码",".","放在","教程","尝试","__","当于","就","大家","开发","工业","而言","直接","建设","组成部分","发生","1989","晚","类","不管","https","？","行业","先进","做","字符","避免","树莓","理解","重大","大大","提","时间","参考","destroy","订阅","兼容性","来","类似","一样","不","意思","一个","无论如何","how","之前","depth","找到","subscription","中心","既然","升级","网络","存在","完整性","使命","版本","concepts","效率","编写","年","听说","保证数据","py","我","命令行","with","许多","带","具体","解析","bin","第一","utf","文件","介绍","distribution","当然","21","还有","等","2004","传输","按照","callback","出现","示例","提供者","几种","shutdown","时候","至关重要","publisher","自动","通信","样","无人","主","关心","这里","客户端","原则","真正","角色","通道","成立","知道","于","reliability","说明","都","world","helloworld","医疗","\\","deadline","受到","有人","chatter","延时","模型","点","信赖","effort","位置","指定","创建","机器","第三种","门","入口","分组","成为","频繁","设计","setup","尽可","小组","广泛应用","回忆","要求","内容","但","初始化","丰富","这样","8","其实","函数","不好","加密","node","结构","中","）","发送","底层","当","每条","每","进行","真实","话题","所以","保证","单位","架构","一次","每次","供者","》","大小","情况","上层","最为","讲","之","例子","应用","作者","方法","包","learning","}","麻烦","作为","布式","各个","初始","航空","技术","交通","由","图像","策略",":","sysml","视频","第三","如下","流畅","终于","[","顺利","与","-","en","python3","到","about","保障","华为","现在","特性","第四","焕然","msgs","console","很多","相当","可见","转移","=","名","为","定位","一条","人机","丢失","对应","分布式","最早","主讲","适应","后","必须","对象","居","交换","包含","#","pub","冰山一角","通过","处理","字符串","、","就行","args","第二种","明显","三种","ros1","焕然一新","为了","所","有些","42","说了半天","打开","核心","处","一步","回调","电脑","专利","之间","各种","解决","一旦","授权","非常复杂","相关","video","容性","databus",")","无法","无人机","subscribernode","“","消息","高通"," ","能够","python","different","import","本身","bv12z4y167w2","并","兴趣","用户","sub","符合","相当于","0.5","qos","纠结","分布","之上","程序","高速","刚才","rmw","架构图","父类","四大","海军","不同","链接","所有人","管理","应该","欢迎","而且","这些","务器","需求","一新","一套","到底","流畅性","以","一角","不是","重要","速度","那个","综合","接收","关闭","articles","%","收到","商业","一","implementations","服务","主要","入门","通信模型","第二","由于","复杂","肯定","rclpy","执行","四种","best","的话","这么","地","部分","关系","配置","info","厂商","请求","驾驶","能响","listener","接下来","，","服务端","集中处理","def","增长","系统","它们","没有","也","对","点对点","service","过","性","组成","向","自己","所有","并且","s","信息","类型","国防","性能","表示","黑客","guides","讲到","了","过程","吃","给","：","那","等待","生变","有点","其他","只有","publish","guyuehome","提供","一些","动作","建模","入个","create","优化","得","同一个","你","列出","库","编程","啦","会","不过","\"","客户","qosprofile","下来","统一","二","在于","实时","正常","{","一种","编译","发布者","发送给","组织","质量","html","是","高效","举","发生变化","docs","corba","提到","全称","分发","一定","id","设置","预测","火锅","占用","hello","多个","功能","软件","规模","任","优势","边","互相","空间","成","topic","为例","'","并行","图","上","大大提高","on","广播","广泛","兼容","5g","to","旋转","标准","中间","场景","可","domain","init","影响","想","那该","常用","命令","办法","int32","提高","更加","像","ros2","环境","感知","_","神经","这个","方式","维护","才能","多","self","std","通常","蓝色","资源","黑入","加入","verbose","处于","选项","送给","更","--","缓存","尽力","/","能力","神经网络","design","last","omg","1","heard","帧","先","服务质量","一下","让","第一种","借助","单独","秒","接收者","org","data","只","定时","红色","发布","好吃","模块","可能","humble","他们","大量","不变","绑定","冰山","运动","过去","只是","带领","某一","强制","试一试","qoshistorypolicy","(","建模语言","ros","课上","super","profile","下边","舰船","派","接下","coding","需要","可信","半天","尽量","要","模式","众多","认识","配套","效果","进一步","实现","领域","有","灵活","同一","感兴趣","截止","便于","掉","哪些","multiple","靠","问题","针对","broker","驱动","它","参数","每个","dds","啥意思","像是","可以","节点","此时","控制","框架","另外","keep","history","技术标准","语言","价值","传送","退出","增多","name","专门","]","vendors","msg","。","4g","呢","bilibili","接口","上边","*","决策","qosreliabilitypolicy","导致","整个","选用","具体地址","差别","遥控","《","from","太多","spin","（","行为","复用","机器人","第四种","建立","满足","数据通信","在","已经","get","宗旨","至关","连接","生态","entry","可信赖","很","循环","能源","企业","echo","感兴","开源","兼容性问题","com","来看","忽略","服务器","日志","来到","middleware","数据","完成","但是","中间件","好","无用","不用","集中","用","scripts","run","根据","接口标准","垂直","更好","选择","中会","销毁","这","个人","连接数","尽可能","进入","什么","将","reliable","一起","基本","把","周期","拿","输出","主讲人","通路","变化","哪","体","www",",","timer","运转","env","none","的","处理速度","地址","完整","publishing","行","定时器","列表","i","应用程序","内","运行","我们","如果","定义","者","string","构图","还是","案例","该用","神经网","”","就是","$","填充","working","描述","新","这种","全局","points","瓶颈","无论","下","不感兴趣","数据通","美国","durability","使用","课","历史","航拍","程度","!","@","数以千计","合约","异常","main","和","提示","—","课程","比如","快速","前边","合适","非常","publishernode","usr","class","古月","时","强调","二种","或","双方","没","logger","历史数据","默认"],"title":"**DDS**","title_tokens":["dds","*"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds","text":"Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。","text_tokens":["《","学习","通信","实现","神经网","是","当于","大家","讲到","机器人","过程","服务","网络","在","入门","、","相当于","中","终于","ros2","靠","他们","主讲人","底层","都","它","神经","变化","dds","hello","我","动作","话题","相当","具体","—","重大","的","课程","来到","，","前边","21","完成","机器","好","欢迎","》","古月","。","ros","最为","讲","来","系统","神经网络","我们","主讲"," "],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_1","text":"DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。","text_tokens":["所有","麻烦","作为","进一步","实现","性能","就","由","了","吃","感兴趣","第三","生变","发生","有点","其他","与","问题","针对","到","broker","它","每个","dds","第四","先进","像是","提供","很多","可以","节点","优化","框架","可见","列出","为","自己","传送","会","增多","一条","客户","不过","。","订阅","在于","类似","正常","一个","一种","整个","导致","具体地址","必须","之前","太多","找到","中心","包含","是","第四种","建立","发生变化","在","处理","一定","第二种","连接","明显","效率","三种","很","ros1","火锅","所","有些","许多","感兴","核心","处","具体","一步","软件","忽略","规模","第一","服务器","优势","数据","各种","解决","一旦","但是","不用","databus","无法","集中","消息","并行","上"," ","几种","这","能够","广播","连接数","通信","旋转","并","兴趣","影响","想","常用","关心","这里","客户端","真正","角色","通道","更加","拿","知道","这个","都","通路","变化","多","受到","有人","模型","运转","的","处理速度","所有人","更","地址","应该","第三种","行","而且","成为","务器","我们","如果","以","速度","第一种","单独","收到","但","只","就是","服务","这样","这种","通信模型","其实","第二","发布","好吃","瓶颈","可能","中","不感兴趣","四种","当","使用","每条","进行","程度","关系","请求","异常","和","架构","能响","每次","，","服务端","非常","集中处理","时","增长","系统","二种","双方","也","没有","之","点对点","需要","并且"],"title":"通信模型","title_tokens":["通信","模型","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_1","text":"DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。","text_tokens":["不是","广泛应用","之前","自动","交换","广泛","借助","航空","通信","国防","交通","领域","并","满足","新","在","已经","存在","模块","ros2","感知","方式","都","医疗","很","预测","地","dds","高速","决策","能源","很多","可以","通常","驾驶","和","定位","的","比如","，","会","非常","数据","等","需要","好","。","这些","它们","频繁","需求","应用","一个"," "],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_2","text":"好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是Data Distribution Service，也就是数据分发服务，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。","text_tokens":["半天","uml","布式","技术","大家","由","开发","灵活","策略","sysml","1989","问题","它","保障","？","现在","行业","dds","啥意思","做","提供","建模","可以","技术标准","为","价值","语言","啦","提","专门","统一","。","订阅","呢","兼容性","来","实时","分布式","意思","最早","一个","对象","组织","质量","中心","是","高效","满足","升级","网络","已经","corba","、","使命","全称","分发","年","听说","说了半天","兼容性问题","软件","介绍","数据","distribution","解决","各种","还有","等","中间件","好","当然","容性","2004","垂直"," ","兼容","通信","标准","中间","可","这里","成立","环境","于","分布","维护","的","海军","管理","完整","/","成为","omg","设计","需求","一套","到底","我们","以","服务质量","一下","data","丰富","就是","服务","发布","复杂","可能","中","美国","大量","地","课","进行","数以千计","真实","和","比如","，","强制","建模语言","强调","系统","也","舰船","应用","service","过"],"title":"什么是DDS","title_tokens":["dds","什么","是"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#ddsros2","text":"DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。","text_tokens":["所有","尽量","如何","要","布式","代码","放在","技术","实现","性能","就","大家","开发","了","过程","有","工业","给","那","而言","建设","组成部分","其他","问题","不管","驱动","华为","？","dds","很多","可以","此时","转移","得","你","编程","大大","会","时间","统一","。","4g","呢","接口","一样","来","对应","兼容性","上边","不","分布式","一个","一种","选用","差别","无论如何","组织","复用","是","既然","机器人","建立","在","、","就行","提到","版本","宗旨","至关","生态","多个","为了","企业","开源","功能","具体","软件","任","middleware","专利","边","授权","中间件","容性","按照","用","高通","根据","接口标准","上"," ","选择","大大提高","至关重要","能够","5g","兼容","个人","通信","标准","场景","中间","可","进入","用户","想","影响","基本","这里","符合","把","原则","提高","像","ros2","纠结","分布","这个","都","哪","之上","多","刚才","蓝色","架构图","四大","加入","的","位置","更","机器","能力","设计","我们","如果","重要","让","那个","综合","构图","还是","该用","但","商业","红色","就是","这样","函数","由于","肯定","模块","可能","中","无论","他们","这么","部分","每","使用","不变","厂商","所以","保证","和","架构","比如","某一","，","ros","系统","上层","或","下边","也","对","没","应用","组成","性","需要","自己"],"title":"DDS在ROS2中的应用","title_tokens":["dds","在","中","ros2","应用","的"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#qos","text":"DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是Domain，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为数据提供者和接收者之间的合约。 具体会有哪些策略？比如这个列表中描述的DEADLINE策略，表示通信数据必须要在每次截止时间内完成一次通信，HISTORY策略，表示针对历史数据的一个缓存大小，RELIABILITY策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式。 还有这个DURABILITY，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。","text_tokens":["所有","遥控器","指令","要","模式","尽量","众多","如何","各个","实现","表示","黑客","大家","了","图像","有","过程","给","同一","策略","截止","便于","视频","掉","哪些","直接","流畅","顺利","晚","只有","针对","参数","？","特性","dds","焕然","提供","一些","入个","可以","节点","避免","此时","另外","控制","树莓","history","同一个","理解","为","啦","会","时间","客户","人机","丢失","。","呢","类似","不","一种","一个","导致","遥控","适应","之前","必须","发送给","行为","质量","是","机器人","举","满足","通过","网络","在","数据通信","完整性","一定","id","可信赖","焕然一新","占用","保证数据","所","带","功能","具体","来看","电脑","互相","数据","之间","完成","还有","但是","空间","好","无用","无人机","传输","用","成","根据","出现","图","更好"," ","提供者","选择","时候","尽可能","通信","场景","样","domain","将","reliable","无人","一起","那该","命令","基本","办法","qos","ros2","reliability","_","这个","都","体","才能","程序","deadline","多","延时","模型","资源","黑入","加入","处于","信赖","的","effort","指定","不同","送给","机器","缓存","尽力","完整","门","分组","列表","应用程序","内","这些","需求","默认","一新","尽可","我们","流畅性","定义","如果","帧","小组","重要","回忆","先","那个","让","要求","接收","接收者","就是","服务","描述","新","这样","这种","通信模型","全局","可信","不好","加密","结构","下","中","可能","数据通","best","发送","的话","这么","地","绑定","durability","历史","使用","进行","航拍","运动","每","关系","配置","合约","过去","保证","和","一次","比如","每次","快速","，","合适","供者","大小","ros","系统","情况","派","也","对","历史数据","例子","应用","没有","向","需要"],"title":"质量服务策略QoS","title_tokens":["质量","策略","服务","qos"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_3","text":"我们先来试一试在命令行中配置DDS的参数。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort $ ros2 topic info /chatter --verbose","text_tokens":["先","data","$","pub","reliable","在","命令","int32",":","中","ros2","qos","-","_","reliability","best","参数","dds","chatter","msgs","配置","42","info","命令行","std","echo"," ","verbose","的","effort","--","试一试","\"","/","。","msg","来","我们","topic"],"title":"案例一：在命令行中配置DDS","title_tokens":["dds","在","命令","配置","案例","命令行","中","一","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_4","text":"接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。","text_tokens":["之前","代码","尝试","通信","在","中","world","dds","hello","配置","话题","接下来","，","下来","。","接下","为例","我们","以"," "],"title":"案例二：DDS编程示例","title_tokens":["dds","案例","二","示例","：","编程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_2","text":"$ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub","text_tokens":["learning","sub","ros2","run","qos","_","helloworld","$"," ","pub"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_3","text":"learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , },","text_tokens":["learning","}","代码",".","初始","s","信息","__","类型","：",":","等待","如下","[","-","python3","类","publish","guyuehome","字符","msgs","create","console","节点","=","keep","名","history","为","库","退出","\"","name","qosprofile","需要","msg","destroy","接口","*","{","qosreliabilitypolicy","一个","编译","发布者","from","后","spin","对象","居","depth","（","#","pub","已经","字符串","、","get","args","设置","entry","编写","py","循环","hello","打开","功能","com","回调","bin","utf","日志","文件","数据","完成",")","scripts","“","'","消息","callback","示例"," ","shutdown","销毁","publisher","包","python","import","init","并","reliable","主","原则","0.5","周期","qos","ros2","reliability","_","输出","知道","helloworld","world","www","程序","chatter",",","timer","self","std","env","父类","点","加入","none","的","effort","选项","创建","publishing","入口","定时器","/","last","1","setup","string","关闭","让","秒","%","定时","data","初始化","”","填充","8","points","发布","rclpy","函数","node","）","执行","中","best","进行","!","配置","info","@","话题","main","单位","提示","，","qoshistorypolicy","publishernode","usr","(","class","def","古月","系统","super","profile","coding","logger","作者","说明"],"title":"发布者代码解析","title_tokens":["代码","解析","发布者","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_4","text":"learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], },","text_tokens":["learning","}","代码",".","初始","s","信息","__","类型","：",":","等待","如下","[","-","python3","类","guyuehome","msgs","create","console","节点","=","keep","名","history","库","退出","\"","name","qosprofile","需要","]","msg","destroy","订阅","接口","*","{","qosreliabilitypolicy","一个","编译","from","后","spin","对象","居","depth","（","subscription","#","pub","处理","、","get","args","设置","entry","编写","py","循环","hello","打开","功能","com","回调","bin","utf","日志","文件","数据","完成",")","subscribernode","scripts","“","'","消息","callback","示例"," ","shutdown","销毁","包","python","import","标准","init","并","reliable","主","sub","原则","qos","ros2","reliability","_","输出","知道","helloworld","world","www","\\","chatter","程序",",","self","std","env","父类","点","加入","none","的","effort","选项","创建","入口","/","i","last","1","setup","定义","heard","者","string","关闭","让","%","收到","data","初始化","”","8","points","rclpy","函数","node","）","执行","best","进行","!","配置","info","@","话题","main","提示","listener","，","qoshistorypolicy","usr","(","class","def","古月","系统","super","profile","coding","对","logger","作者","说明"],"title":"订阅者代码解析","title_tokens":["代码","解析","订阅","者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_5","text":"DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们课上主要带领大家认识DDS，更多使用方法和相关内容，课程配套的教程中会有介绍，大家也可以参考这里的链接进行学习。 https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["中会","how","内容","认识","学习","articles",".","org","教程","配套","different","to","guides","html","是","本身","大家","working","implementations","有","bv12z4y167w2","冰山一角","主要","docs",":","这里","复杂","concepts","humble","方法","multiple","ros2","about","-","_","en","https","使用","dds","冰山","进行","www","多","可以","with"," ","rmw","只是","com","和","带领","的","课程","介绍","middleware","，","链接","非常","更","非常复杂","相关","video","参考","/","。","vendors","ros","系统","课上","design","bilibili","也","我们","一个","一角","on"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/","text":"工作空间：开发过程的大本营 大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是工程。 工作空间是什么 类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做工作空间。 所以工作空间是一个存放项目开发相关文件的文件夹，也是开发过程中存放所有资料的大本营。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。 创建工作空间 了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 自动安装依赖 我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init & rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y 编译工作空间 依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。 设置环境变量 编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["所有","要","path","学习","任何","工程","代码",".","教程","信息","社区","2","人为","rosdistro","看到","就","w","大家","开发","了","过程","有","：","并且","3","还",":","git","sudo","当前","如下","里边","否则","环境变量","了解","-","至此","en","针对","到","参数","以上","https","python3","guyuehome","环境变","资料","工具栏","像是","一些","可以","creating","pip","此时","另外","qt","子目录","不会","集成","creator","名称","visual","会","b2","啦","\"","下来","结果","参考","。","dev","里","类似","一样","均","&","install","一个","编译","from","很少","后","未来","之前","build","一部分","并列","叫做","数量","y","找到","某些","html","是","机器人","#","eclipse","四个","根目录","从","错误","生产","docs","在","存在","bashrc","、","设置","可执行文件","成功","编写","允许","a","项目","变量","多个","colcon","为了","echo","存放","终端","功能","一点","行文","com","目录","缺少","报错","rosdepc","文件","日志","生效","编写程序","各种","以及","脚本","相关","等","空间","大部","用于","21","完成","local","产生","用","“","出现","大本营","子","b"," ","中会","这","包","自动","能够","来讲","下载","studio","src","大本","中间","mkdir","..","init","什么","并","命令","apt","这里","手动","p","clone","安装","ros2","环境","_","这个","都","或者","后续","tutorials","工作","程序","接触","唯一","某","update","workspace","所示","两个","警告","的","空间结构","子目","选项","创建","sh","--","链接","机器","管理","应该","rosdep","ws","保存","/","i","这些","完全","运行","开始","1","setup","我们","定义","如果","不是","source","放置","让","总体","内容","自动生产","；","org","得到","”","绝大","就是","工具","$","大部分","新","仅","结构","中","执行","log","概念","humble","文件夹",">","当","~","cd","部分","使用","进行","关系","多少","配置","所以","典型","如图所示","和","gitee","比如","接下来","，","一部","强调","时","ros","系统","绝大部分","操作","情况","点击","件夹","也","接下","想要","pip3","依赖","过","需要","自己"],"title":"**工作空间：开发过程的大本营**","title_tokens":["工作","空间","大本营","大本","*","的","开发","过程","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_1","text":"大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是工程。","text_tokens":["所有","之前","放置","内容","学习","叫做","工程","studio","某些","就","是","大家","开发","”","eclipse","有","工具","新","在","、","中","里边","文件夹","环境","当","编写","都","这个","后续","工作","程序","接触","工具栏","此时","qt","和","的","文件","比如","集成","，","creator","visual","编写程序","会","创建","选项","应该","等","以及","。","这些","产生","点击","件夹","“","想要","我们","一个","过"," "],"title":"工作空间：开发过程的大本营","title_tokens":["工作","空间","大本营","大本","的","开发","过程","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_2","text":"类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做工作空间。 所以工作空间是一个存放项目开发相关文件的文件夹，也是开发过程中存放所有资料的大本营。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。","text_tokens":["所有","要","代码","工程","信息","2","人为","就","w","开发","了","过程","有","：","3","里边","针对","到","参数","以上","资料","像是","一些","可以","另外","子目录","集成","名称","b2","会","。","dev","里","类似","一样","install","一个","编译","很少","后","未来","build","并列","一部分","叫做","数量","某些","是","机器人","四个","根目录","错误","在","存在","、","可执行文件","成功","编写","允许","a","项目","多个","存放","功能","一点","行文","目录","文件","日志","各种","相关","脚本","用于","等","空间","大部","产生","用","子","大本营","b"," ","这","来讲","src","大本","中间","并","这里","安装","环境","_","这个","都","或者","工作","唯一","某","所示","两个","警告","的","空间结构","子目","创建","机器","管理","ws","保存","完全","运行","开始","1","我们","定义","不是","放置","总体","；","得到","绝大","就是","大部分","新","结构","中","执行","log","文件夹","部分","进行","关系","所以","典型","如图所示","和","比如","，","一部","强调","时","ros","系统","绝大部分","操作","情况","也","件夹","结果","需要","自己"],"title":"工作空间是什么","title_tokens":["工作","什么","是","空间"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_3","text":"了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git","text_tokens":["代码",".","下载","教程","src","mkdir","了","$","：","命令",":","git","如下","概念","p","clone","了解","-","ros2","_","~","cd","https","使用","guyuehome","tutorials","工作","可以","com","和","gitee","的","接下来","，","创建","21","下来","空间","ws","/","dev","接下","我们","一个","结果"," ","并且"],"title":"创建工作空间","title_tokens":["创建","工作","空间"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_4","text":"我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init & rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y","text_tokens":["path","自动","y","代码","下载","社区","rosdistro","src","..","工具","有","：","从","$","init","apt","sudo","手动","中","humble","安装","-","python3","都","cd","使用","多少","一些","update","可以","pip","的","我们","rosdepc","，","会","各种","install","rosdep","--","from","i","也","pip3","&","依赖","一个"," "],"title":"自动安装依赖","title_tokens":["安装","依赖","自动"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_5","text":"依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。","text_tokens":["后","中会","build","自动","自动生产","任何","代码","看到","就","了","过程","有","：","$","生产","错误","在","命令","apt","sudo","、","出现","如下","中","log","安装","否则","文件夹","成功","-","_","python3","~","cd","或者","使用","工作","colcon","可以","的","缺少","报错","不会","文件","，","啦","install","完成","应该","空间","ws","/","dev","。","ros","件夹","依赖","编译","如果"," "],"title":"编译工作空间","title_tokens":["编译","工作","空间"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_6","text":"编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。","text_tokens":["所有","后","source","让","能够","找到",".","就","#","了","$","：","还","在","bashrc","仅","、","当前","执行","设置","成功","可执行文件","环境","_","~",">","至此","环境变","变量","工作","配置","为了","echo"," ","终端","功能","和","行文","的","文件","，","setup","install","sh","生效","\"","完成","需要","空间","ws","创建","/","dev","local","。","系统","均","环境变量","我们","编译","包"],"title":"设置环境变量","title_tokens":["环境变","变量","设置","环境","环境变量"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_7","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["docs","tutorials",":","/",".","org","ros","workspace","humble","creating","-","html","en","https","a"," "],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/","text":"功能包：开发过程的大本营 在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做功能包。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。 创建功能包 如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python 编译功能包 在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash 功能包的结构 功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。 C++功能包 首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。 Python功能包 C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["之后","指令","learning","尽量","如何","所有","要","首先","代码","新创建","放在","教程",".","看到","社区","信息","类型","分析","表示","就","一颗","大家","开发","了","过程","有","：","给","必然","那",":","起来","跟","如下","里边","环境变量","-","en","到","https","？","环境变","每个","create","一些","很多","可以","编译成","creating","控制","得","你","语言","发现","拿出","名称","耦合","会","豆子","机制","name","编程","需要","某种","普通","参考","是否是","。","dev","里","呢","来","一样","cmakelists","正常","不","继续","install","一个","编译","看","pkg","build","ament","必须","叫做","数量","移动","自主","只想","名字","某些","别人","复用","是","机器人","包中","#","包含","html","是不是","docs","在","存在","、","版本","出来","规则","设置","可执行文件","entry","头疼","编写","a","变量","c","py","colcon","终端","功能","解析","包并","是否","软件","行文","降低","文件","介绍","手上","当然","立刻","但是","之间","等","package","相关","好","完成","空间","包该","local","还有","用","率","除此","“","大本营"," ","时候","假设","这","python","下载","拆分","大本","src","判断","语法","并","将","一起","想","导航","红豆","命令","颜色","这里","把","提高","版权","拿","xml","ros2","感知","说明","_","这个","都","其中","环境","或者","后续","才能","工作","程序","黄豆","多","tutorials","译成","袋子","刚才","之外","混合","两个","的","视觉","绿豆","不同","创建","新创","--","链接","而是","机器","入口","ws","分享","/","这些","your","运行","越","setup","我们","txt","如果","该","不是","重要","source","各种","举个","之一","type","内容","；","还是","c++","型","org","只","但","除此之外","声明","”","就是","$","描述","cmake","主要","包是","points","可能","中","结构","下","执行","humble","文件夹","first",">","他们","当","<","新建","~","cd","源码","使用","分别","划分","关系","配置","五颜六色","cmakerlists","所以","和","讲解","比如","，","放到","bash","么","时","ros","workspace","原理","例子","件夹","也","找","三个","很难","依赖","方法","很快","包"],"title":"**功能包：开发过程的大本营**","title_tokens":["大本营","功能","大本","*","的","开发","过程","：","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_1","text":"在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做功能包。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。","text_tokens":["尽量","如何","代码","放在","教程","看到","社区","就","一颗","大家","了","有","给","起来","到","每个","很多","可以","控制","得","你","发现","拿出","名称","耦合","会","豆子","机制","需要","某种","普通","。","里","不","一个","叫做","数量","移动","自主","只想","某些","别人","复用","是","机器人","包中","是不是","在","、","出来","头疼","功能","软件","降低","文件","手上","当然","立刻","但是","之间","等","包该","用","率"," ","时候","假设","下载","拆分","并","一起","想","导航","红豆","颜色","把","提高","拿","ros2","感知","说明","这个","都","其中","黄豆","多","袋子","混合","的","视觉","绿豆","不同","而是","机器","分享","这些","越","我们","如果","不是","重要","举个","之一","；","只","就是","可能","中","文件夹","他们","当","源码","使用","划分","关系","五颜六色","所以","比如","，","放到","么","时","ros","原理","例子","件夹","也","找","三个","很难","方法","很快","包"],"title":"功能包：开发过程的大本营","title_tokens":["大本营","功能","大本","的","开发","过程","：","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_2","text":"如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python","text_tokens":["pkg","指令","build","如何","ament","learning","包","type","；","还是","新创建","c++","python","名字","src","表示","就","#","$","：","cmake","那","包是","在","命令","这里","跟","版本","中","ros2","-",">","_","这个","<","新建","~","cd","？","使用","或者","c","分别","create","可以","终端","功能","和","的","比如","，","创建","新创","--","相关","name","package","ws","/","。","dev","呢","我们","一个","如果"," "],"title":"创建功能包","title_tokens":["创建","功能","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_3","text":"在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash","text_tokens":["之后","所有","build","source","包","代码",".","src","包中","#","$","：","在","环境","_","编写","~","cd","环境变","变量","才能","工作","配置","colcon","可以"," ","功能","和","的","，","创建","install","setup","完成","空间","好","ws","/","dev","local","bash","正常","运行","环境变量","继续","我们","编译","需要"],"title":"编译功能包","title_tokens":["功能","编译","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_4","text":"功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。","text_tokens":["不是","如何","新创建","分析","判断","那","结构","下","文件夹","？","刚才","功能","包并","是否","两个","的","文件","，","创建","新创","普通","是否是","。","呢","来","件夹","我们","一个","包"],"title":"功能包的结构","title_tokens":["的","功能","结构","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#c","text":"首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。","text_tokens":["必须","要","如何","包","内容","首先","代码","c++",".","类型","包含","是","声明","语法","：","必然","主要","描述","cmake","存在","在","如下","版权","下","中","xml","规则","设置","其中","使用","才能","该","cmakerlists","所以","功能","和","两个","的","文件","，","各种","package","需要","。","cmakelists","运行","txt","依赖","编译"," ","看"],"title":"C++功能包","title_tokens":["功能","c++","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#python","text":"C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。","text_tokens":["如何","这","内容","python","c++","型",".","信息","但","除此之外","包含","是","声明","”","大家","将","有","：","主要","描述","给","在","points","版本","版权","执行","中","里边","xml","可执行文件","entry","_","源码","使用","后续","py","程序","一些","配置","译成","编译成","所以"," ","之外","功能","解析","行文","两个","和","语言","的","讲解","我们","文件","介绍","，","不同","会","各种","编程","但是","package","需要","还有","入口","。","一样","除此","也","“","不","setup","依赖","编译","包"],"title":"Python功能包","title_tokens":["功能","python","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_5","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":[".","org","html","docs",":","first","humble","ros2","-","en","https","a","tutorials","creating","package","/","workspace","ros","your"," "],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/","text":"节点 机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。 通信模型 完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。 案例一：Hello World节点（面向过程） ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。 运行效果 大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ], 创建节点流程 代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。 案例二：Hello World节点（面向对象） 所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。 运行效果 下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ], 创建节点流程 所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。 案例三：物体识别节点 没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。 运行效果 在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。 代码解析 在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ], 案例四：机器视觉识别节点 用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。 运行效果 启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 注意：如果是在虚拟机中操作，需要进行以下设置： 把虚拟机设置为兼容USB3.1； 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。 代码解析 相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ], 节点命令行操作 节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息 思考题 现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["指令","如何","学习","代码",".","放在","后勤部","云端","__","就","大家","开发","而言","可视","还","一台","中将","发生","查询","类","苹果","考题","https","？","做","即可","字符","相同","图像识别","理解","时间","监控","参考","destroy","推动","来","一样","类似","不","例程","一个","install","一线","img","检测","bgr2hsv","未来","之前","y","比喻","找到","名字","java","马","中心","既然","虽然","知其所以然","ruby","as","编写","只不过","更多","py","左上","独立","命令行","终端","mask","具体","解析","bin","utf","文件","介绍","当然","21","还有","等","pyhton","示例","出现","shutdown","时候","经常","识别","及","通信","findcontours","主","综合体","左上角","计算","这里","物体","知道","进程","设备","都","world","helloworld","或者","处理过程","工作","某","模型","点画","推荐","点","两个","waitkey","视觉","改成","前","创建","以下","机器","共同","入口","in","成为","设计","开始","setup","image","移植性","for","面向对象","但","hcx","初始化","一帧","这样","8","联系","函数","node","结构","中","）","概念",">","发送","当","溜溜","lower","videocapture","整体","每","做到","进行","所以","生成","骡子","看上去","h","最为","难","作者","方法","三","包","home","learning","编程语言","布式","初始","硬件","看到","2","destroyallwindows","注意","图像","可视化",":","sudo","摄像","如下","起来","[","工厂","-","cvtcolor","en","python3","到","保障","现在","修改","熟悉","console","依然","=","数值","为","被","发现","机制","思考","厂房","dev","面向","看看","理过","bgr","分布式","看","continue","后","多种","取","对象","腿","居","所在","移动","red","#","可读","retr","从","通过","处理","字符串","、","各不相同","可读性","chain","太小","args","成功","想到","合理","50","打开","外界","地方","电脑","编写程序","之间","各种",")","contours","“","请","b"," ","负责","编码","来源","python","import","中心点","并","再","sleep","然后","颜色","0.5","纠结","分布","其中","程序","唯一","刚才","while","父类","cap","同理","流程","至","绿色","宽","太","不同","链接","实际","应该","ws","这些","计算机","出","到底","以","看上","心里","不是","桌子","重要","速度","关闭","综合","总体","；","阈值","收到","一","没错","object","得到","imread","understanding","通信模型","范围","rclpy","复杂","执行","所以然","调试","上角","的话","任务","分别","一节","配置","info","绿点","去除","cv2","接下来","，","眼睛","def","高","系统","像素","也","想要","组成","过","approx","孤立","并且","这座","工人","信息","表示","了","过程","给","：","那","一项","等待","路径","合体","guyuehome","步骤","x","提供","一些","+","用到","先拉","得","你","库","编程","名称","会","不过","\"","对于","啦","下来","某种","身体","circle","二","里","实时","正常","{","最大","左右","编译","一种","后勤","if","勾勒","某些","关于","nodes","html","是","关注","是不是","搭载","docs","usb3.1","图像处理","二值化","设置","可执行文件","回到","a","90","hello","命名","upper","功能","一点","行文","ret","重新","互相","知其然","查看","相机","255","而已","为例","'","上","图片","np","detect","兼容","摇杆","中间","可","init","0","常用","命令","好像","更加","像","模拟","安装","ros2","环境","_","这个","方式","上去","窗口","tutorials","多","self","numpy","webcam","加入","过来","上限","一张","更多要","面积","选项","读取","更","虚拟","/","int","1","该","转换","休眠","岂","先","一下","让","org","职责","算机","去","除此之外","简单","红色","不要","发布","总结","坐标","模块","可能","humble","框架图","他们","远程","运动","载体","获取","移植","虚拟机","只是","time","(","ros","super","128","coding","接下","180","编码方式","需要","稍微","要","众多","相比","认识","启动","人为","效果","实现","分析","hierarchy","w","有","显示","思考题","问题","参数","它","驱动","helloworldnode","每个","read","细胞","模块化","可以","节点","控制","另外","操作系统","框架","不能","自然","语言","调整","改变","退出","name","]","着急","。","呢","接口","网上","*","from","spin","算是","叫做","（","这份","打印","机器人","inrange","四个","jpg","在","此处","还会","却","get","轮廓","连接","出来","true","entry","为止","ok","像头","很","shape","循环","疑惑","com","是否","来看","日志","apple","保持","完成","但是","drawcontours","好","color","不用","opencv","除此","scripts","总体而言","状态","run","boundingrect","用","根据","更好","销毁","这","后勤部门","imshow","src","具备","150","将","保持联系","部门","一起","list","xy","apt","动态","摄像头","把","框会","周期","hsv","输出","array","变化","更为","www",",","呀","之外","env","这款","none","的","噪声","完整","物理","列表","位于","下限","运行","我们","乃至","如果","每一项","方便","前后左右","重点","案例","c++","还是","”","就是","$","这种","points","可移植","就让","下","5","吧","<","前后","使用","角度","!","cnt","@","四","轮子","main","和","—","比如","课程","会弹","usr","class","古月","时","操作","可移植性","logger","没","结果","说明"],"title":"**节点**","title_tokens":["节点","*"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_1","text":"机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。","text_tokens":["取","众多","综合","名字","是","机器人","就","”","了","就是","给","那","通过","一起","综合体","一项","在","中","像","连接","合体","到","整体","工作","细胞","一些","节点","功能","的","，","机制","各种","机器","。","ros","成为","这些","“","我们","一个","每一项"," "],"title":"节点","title_tokens":["节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_2","text":"完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。","text_tokens":["这座","如何","编程语言","布式","工人","认识","放在","后勤部","信息","看到","云端","人为","硬件","实现","就","了","有","：","那","还","一台","摄像","工厂","查询","到","参数","它","保障","每个","做","细胞","提供","相同","可以","节点","控制","另外","操作系统","自然","你","语言","编程","名称","监控","厂房","结果","身体","下来","。","推动","里","来","看看","不","分布式","左右","一个","编译","一线","后勤","腿","算是","叫做","比喻","移动","找到","java","某些","是","机器人","既然","虽然","从","搭载","通过","在","还会","、","各不相同","却","ruby","连接","可执行文件","想到","像头","a","命名","独立","外界","功能","具体","行文","地方","来看","文件","互相","完成","还有","等","除此","状态","“","根据","b","上"," ","时候","这","后勤部门","python","摇杆","并","部门","一起","计算","摄像头","环境","进程","分布","这个","都","或者","工作","程序","更为","多","唯一","某","之外","这款","的","不同","更","机器","完整","共同","物理","这些","位于","计算机","设计","运行","乃至","我们","到底","该","不是","桌子","前后左右","让","速度","；","c++","职责","算机","去","但","除此之外","得到","”","就是","这样","复杂","可能","中","执行","他们","当","前后","整体","任务","远程","每","运动","载体","分别","角度","配置","获取","轮子","和","—","生成","比如","接下来","，","眼睛","时","操作","系统","也","接下","想要","组成","需要"],"title":"通信模型","title_tokens":["通信","模型","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world","text":"ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。","text_tokens":["先","简单","实现","打印","是","”","了","就是","并","从","字符串","复杂","中","ros2","编写","到","world","程序","hello","循环","字符","节点","终端","功能","的","我们","，","编写程序","当然","需要","。","最为","来","“","开始","不","例程","一个"," "],"title":"案例一：Hello World节点（面向过程）","title_tokens":["hello","案例","（","节点","）","面向","一","world","过程","："," "]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_3","text":"大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["learning","先","如何","后","代码","看到","效果","马","分析","实现","打印","是","大家","”","过程","再","$","不要","通过","然后","命令","在","字符串","node","知其所以然","下","执行","中","出来","所以然","ros2","成功","_","这个","溜溜","helloworld","world","做到","循环","hello","字符","可以","节点","所以","终端","先拉","的","骡子","课程","，","知其然","着急","好","。","来","也","“","run","运行","我们","编译"," ","看"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_4","text":"这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ],","text_tokens":["learning","如何","代码",".","初始","信息","实现","过程","：",":","如下","[","-","python3","类","？","guyuehome","console","节点","控制","=","库","\"","时间","需要","]","destroy","。","呢","面向","接口","正常","*","{","编译","from","后","对象","居","是","#","get","args","设置","entry","ok","编写","py","循环","hello","打开","功能","com","是否","来看","bin","utf","日志","文件","完成",")","scripts","“","'","示例"," ","shutdown","销毁","包","python","import","init","并","主","sleep","0.5","ros2","知道","_","这个","方式","helloworld","world","输出","www","程序",",","env","while","点","加入","none","的","选项","创建","入口","/","运行","setup","我们","休眠","关闭","让","初始化","”","8","points","发布","rclpy","函数","node","下","使用","进行","!","配置","info","@","main","time","，","usr","(","def","古月","系统","coding","logger","作者","说明"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_5","text":"代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。","text_tokens":["重要","未来","先","经常","一下","编码","销毁","关闭","学习","代码","过","初始","c++","简单","实现","初始化","是","机器人","大家","就","过程","并","：","有","虽然","这样","这种","函数","这里","总结","出现","复杂","模块","中","纠结","的话","方式","很","或者","使用","做到","做","模块化","可以","节点","用到","功能","具体","一点","理解","的","流程","发现","，","编程","会","更","创建","但是","对于","一个","应该","pyhton","机器","不用","。","系统","接口","面向","难","想要","我们","方法","如果"," ","稍微"],"title":"创建节点流程","title_tokens":["创建","流程","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world_1","text":"所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。","text_tokens":["对象","面向对象","代码","具备","就","大家","开发","了","方便","可读","虽然","这样","在","可移植","复杂","可读性","起来","中","更加","调试","ros2","方式","上去","使用","一些","移植","可以","所以","推荐","刚才","和","的","改成","比如","编程","，","看上去","更","会","但是","。","面向","可移植性","也","我们","移植性","更好"," ","看上"],"title":"案例二：Hello World节点（面向对象）","title_tokens":["对象","hello","面向对象","案例","二","节点","（","）","面向","world","："," "]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_6","text":"下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["后","learning","一下","还是","看到","效果","打印","”","$","：","在","字符串","node","中","ros2","成功","_","helloworld","world","循环","hello","字符","可以","节点","终端","的","调整","，","下来","class","。","“","运行","run"," "],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_7","text":"功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ],","text_tokens":["learning","代码",".","初始","信息","__","实现","了","：",":","等待","如下","发生","[","-","python3","类","guyuehome","helloworldnode","console","节点","控制","=","库","退出","\"","name","时间","需要","]","destroy","。","面向","一样","接口","正常","*","{","一个","编译","from","看","后","spin","对象","居","这份","#","虽然","get","args","设置","entry","ok","编写","py","循环","hello","打开","功能","具体","com","是否","bin","utf","日志","文件","但是","完成",")","scripts","“","'","示例"," ","shutdown","销毁","包","python","import","init","并","sleep","主","0.5","ros2","知道","_","方式","输出","helloworld","world","变化","程序","www",",","self","env","父类","while","加入","none","点","的","选项","创建","入口","/","运行","setup","我们","休眠","一下","面向对象","关闭","让","初始化","”","8","points","发布","rclpy","函数","node","结构","使用","进行","!","配置","info","@","main","time","，","usr","(","class","def","古月","时","系统","super","coding","logger","作者","说明"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_8","text":"所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。","text_tokens":["不是","销毁","这","关闭","总体","编码","初始","实现","初始化","打印","是","机器人","大家","了","四个","并","是不是","而言","这里","中","吧","为止","方式","到","world","任务","只不过","步骤","做","hello","一些","节点","所以","依然","功能","疑惑","只是","不能","得","具体","的","改变","，","编程","创建","不过","机器","还有","一个","完成","。","而已","接口","总体而言","编码方式"," ","心里"],"title":"创建节点流程","title_tokens":["创建","流程","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_9","text":"没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。","text_tokens":["先","识别","找到","没错","实现","就","机器人","过程","从","通过","中","模拟","编写","苹果","任务","节点","图片","的","视觉","一张","接下来","，","机器","实际","下来","。","来","网上","接下","为例","我们","一个","以"," "],"title":"案例三：物体识别节点","title_tokens":["识别","案例","节点","物体","三","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_10","text":"在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。","text_tokens":["指令","learning","代码",".","看到","表示","注意","就","图像","：","可视","可视化","sudo","如下","路径","-","python3","苹果","修改","即可","可以","用到","=","为","被","库","啦","需要","dev","。","install","编译","例程","一个","后","勾勒","中心","#","jpg","在","处理","图像处理","轮廓","出来","成功","py","重新","apple","21",")","opencv","请","run","'","图片"," ","识别","src","中间","中心点","将","然后","apt","把","框会","安装","ros2","_","这个","窗口","tutorials","的","前","绿色","实际","ws","/","出","运行","image","我们","hcx","object","imread","$","node","中","使用","绿点","—","cv2","，","会弹","(","home"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_11","text":"在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ],","text_tokens":["learning","如何","代码",".","初始","destroyallwindows","2","效果","实现","hierarchy","w","大家","图像","了","过程","：",":","等待","显示","如下","[","-","cvtcolor","python3","苹果","类","guyuehome","x","console","一些","节点","+","图像识别","=","数值","为","库","退出","\"","]","需要","circle","destroy","。","dev","接口","来","理过","bgr","*","{","例程","一个","编译","img","from","检测","bgr2hsv","continue","后","对象","spin","居","y","if","red","所在","勾勒","关于","中心","关注","是","机器人","#","inrange","retr","从","jpg","通过","在","处理","此处","chain","太小","图像处理","二值化","as","轮廓","出来","args","get","设置","编写","entry","更多","90","shape","py","循环","左上","打开","upper","功能","mask","具体","com","bin","utf","文件","apple","21","完成","drawcontours","color",")","opencv","255","contours","scripts","boundingrect","'","出现","示例","图片"," ","np","detect","销毁","shutdown","识别","包","python","及","imshow","import","src","150","init","并","findcontours","将","0","主","list","xy","颜色","计算","左上角","模拟","hsv","ros2","知道","_","这个","helloworld","array","处理过程","tutorials","www","程序",",","模型","numpy","点画","env","点","加入","none","上限","waitkey","的","更多要","噪声","宽","面积","读取","创建","选项","机器","入口","ws","/","in","下限","int","1","image","我们","转换","setup","for","不是","阈值","关闭","让","重点","hcx","初始化","object","红色","得到","imread","8","points","范围","rclpy","函数","坐标","node","概念","中","上角","5","<","lower","使用","进行","!","cnt","home","去除","@","info","配置","main","和","cv2","，","h","usr","(","class","def","古月","高","系统","128","像素","coding","logger","180","作者","approx","说明"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_12","text":"用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。","text_tokens":["识别","机器人","图像","有","还","颜色","动态","摄像头","好像","摄像","就让","物体","问题","合理","其中","苹果","像头","或者","进行","节点","呀","的","接下来","太","，","眼睛","读取","机器","应该","下来","。","类似","用","没","接下","不","我们","图片"],"title":"案例四：机器视觉识别节点","title_tokens":["机器","识别","四","案例","节点","视觉","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_13","text":"启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 注意：如果是在虚拟机中操作，需要进行以下设置： 把虚拟机设置为兼容USB3.1； 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。","text_tokens":["learning","后","识别","兼容","；","移动","启动","object","注意","是","#","可","就","红色","$","：","在","摄像头","node","摄像","如下","把","中","usb3.1","中将","连接","设置","ros2","成功","物体","_","设备","驱动","像头","进行","虚拟机","节点","可以","终端","webcam","为","的","至","，","啦","虚拟","以下","需要","。","操作","实时","运行","run","该","一个","如果"," ","并且"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_14","text":"相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ],","text_tokens":["learning","相比","代码",".","初始","信息","2","效果","hierarchy","w","了","图像","：",":","摄像","显示","如下","[","-","cvtcolor","python3","苹果","驱动","类","guyuehome","x","read","修改","console","一些","节点","+","=","数值","为","库","\"","]","需要","circle","destroy","。","接口","来","bgr","最大","*","{","编译","img","from","检测","bgr2hsv","continue","后","之前","对象","居","y","if","red","所在","勾勒","中心","是","#","inrange","retr","从","通过","处理","chain","太小","图像处理","二值化","as","轮廓","出来","args","get","true","ok","编写","设置","entry","像头","90","shape","py","50","左上","打开","upper","功能","mask","com","ret","bin","utf","文件","完成","相机","drawcontours","color",")","opencv","255","contours","scripts","boundingrect","'","出现","示例","图片"," ","np","detect","销毁","shutdown","识别","包","来源","python","及","imshow","import","150","init","并","findcontours","将","0","主","list","xy","颜色","这里","计算","摄像头","左上角","周期","hsv","ros2","知道","_","helloworld","array","变化","程序","www",",","模型","numpy","点画","env","webcam","cap","while","加入","none","上限","waitkey","的","点","噪声","宽","面积","读取","创建","选项","入口","/","in","下限","int","1","image","转换","setup","for","阈值","关闭","让","初始化","object","红色","一帧","得到","8","points","范围","rclpy","函数","坐标","node","中","上角","5","<","lower","videocapture","使用","进行","!","cnt","配置","去除","@","info","main","和","cv2","，","h","usr","(","class","def","古月","高","系统","128","像素","coding","logger","180","作者","approx","说明","并且"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_15","text":"节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息","text_tokens":["信息","#","$","：","list","常用","命令","node","如下","ros2",">","_","<","info","节点","的","查看","name","列表","操作"," "],"title":"节点命令行操作","title_tokens":["命令行","节点","操作","命令"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_16","text":"现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。","text_tokens":["指令","要","看到","实现","就","大家","了","图像","有","给","显示","摄像","问题","参数","现在","熟悉","细胞","节点","控制","框架","另外","得","发现","改变","会","机制","某种","。","一个","一种","多种","后","机器人","在","还会","连接","回到","像头","a","很","电脑","介绍","之间","保持","b"," ","这","负责","摇杆","并","保持联系","将","常用","摄像头","把","这个","工作","同理","两个","过来","的","机器","应该","这些","开始","我们","如果","岂","不是","速度","收到","没错","联系","概念","中","下","框架图","发送","他们","运动","一节","配置","和","比如","，","ros","系统","最为","想要","方法","孤立"],"title":"思考题","title_tokens":["思考题","思考","考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_17","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["docs","tutorials","understanding",":","/",".","org","ros","humble","nodes","ros2","-","html","en","https"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/","text":"话题 节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。 通信模型 以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。 发布/订阅模型 从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为发布者，接收数据的对象称之为订阅者，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。 多对多通信 大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。 异步通信 话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。 消息接口 最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过.msg后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。 案例一：Hello World话题通信 了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 运行效果 启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。 发布者代码解析 我们来看下发布者的实现方法。 程序实现 learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口 订阅者代码解析 我们再来看下订阅者的实现方法。 程序实现 learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。 案例二：机器视觉识别 在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。 运行效果 这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。 发布者代码解析 learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], }, 订阅者代码解析 learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], }, 案例三：机器视觉识别优化 通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub 话题命令行操作 话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息 思考题 关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？ 参考链接 https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["指令","如何","raw","代码",".","__","就","发送数据","大家","开发","3","通用","可视","还","画面","直接","类","苹果","考题","https","？","已","做","即可","字符","理解","之为","长度","监控","参考","destroy","订阅","类似","一样","来","队列","不","继续","例程","一个","install","img","bgr2hsv","检测","间","未来","叫","之前","更换","y","名字","bgr8","同样","subscription","中心","既然","虽然","存在","精简","as","编写","无关","听说","py","左上","独立","命令行","终端","二个","mask","解析","bin","第一","文件","utf","当然","还有","传输","因为","率","callback","建议","示例","shutdown","时候","识别","publisher","！","及","等等","通信","想下","findcontours","主","指","这里","计算","左上角","物体","知道","说明","设备","都","world","helloworld","\\","chatter","某","模型","点画","点","联系方式","两个","waitkey","sensor","视觉","英文","创建","以下","机器","入口","in","思想","值","成为","设计","开始","setup","image","移植性","for","转化成","要求","数据传输","接口定义","hz","但","bridge","初始化","一帧","个","这样","8","联系","函数","node","结构","中","概念","）","发送",">","lower","videocapture","每","做到","进行","话题","所谓","人","保证","单位","一次","化成","h","么","讲","例子","作者","方法","三","包","之后","learning","频率","}","作为","固定","知识","编程语言","初始","硬件","看到","2","注意","图像","必然","可视化",":","视频","sudo","如下","打","[","了解","与","-","cvtcolor","python3","到","以上","en","异步","特性","现在","修改","焕然","msgs","console","采集","很多","可见","=","名","数值","为","被","集成","思考","对应","bgr","魔性","看","他会","后","continue","对象","居","微信","数量","所在","red","包含","#","retr","从","pub","通过","处理","字符串","、","第一个","chain","太小","args","成功","焕然一新","平时","打开","留","cv","渲染","一步","回调","报纸","之间","各种","video","挺",")","优先","无法","想象","词","subscribernode","contours","“","逻辑性","各种各样","消息","b"," ","能够","python","import","本身","转换成","基本原理","并","再","兴趣","用户","又","sub","颜色","符合","0.5","公众","写","不行","其中","usb","程序","唯一","后缀","刚才","父类","cap","流程","宽","区分","太","链接","imagepublisher","应该","imgmsg","同学","这些","需求","一新","以","每换","过瘾","不是","重要","关闭","阈值","type","接收","%","收到","没错","一","object","得到","拼接","understanding","通信模型","范围","第二","rclpy","复杂","肯定","执行","上角","的话","分别","关系","配置","info","去除","只要","cv2","listener","接下来","，","就要","单向","def","高","系统","像素","没有","也","对","几乎","一篇","想要","组成","approx","并且","自己","传递数据","所有","万缕","s","信息","程序实现","类型","了","过程","给","：","那","等待","publish","较强","guyuehome","x","create","一些","哪里","+","优化","得","你","小编","名称","随处可见","会","编程","啦","\"","库","下来","某种","统一","对于","circle","二","里","实时","生活","{","一份","一种","不知","编译","发布者","10","组织","if","勾勒","不过","某些","关于","html","是","举","是不是","方向","千丝","最","docs","称之为","数据类型","一定","图像处理","二值化","设置","第一次","听","a","90","适合","hello","多个","优先级","upper","功能","耦","软件","ret","互相","查看","杂志","用于","相机","255","成","谁","为例","'","上","文章","排版","np","detect","千丝万缕","阅读","来讲","发出","to","标准","摇杆","init","各样","0","想","常用","命令","比方","提高","好像","像","安装","ros2","_","方式","这个","换成","才能","tutorials","多","self","std","numpy","长宽","webcam","什么样","加入","上限","原本","读取","选项","面积","更","/","完全","基于","接口协议","在生活中","int","1","该","转换","rgb","heard","先","一下","让","秒","org","定时","data","只","红色","发布","从而","总结","模块","坐标","可能","humble","一般","目标","不变","似乎","运动","获取","移植","第二个","格式","中是","(","报社","ros","super","原理","128","coding","接下","180","需要","要","任何","0.1","启动","效果","进一步","实现","最后","分析","hierarchy","w","有","传感","感兴趣","带宽","显示","思考题","问题","仔细","稍后","驱动","它","参数","每个","dds","接收数据","read","imagesubscriber","模块化","可以","节点","不太","此时","控制","另外","不能","自然","语言","一句","一行","退出","name","]","块","msg","。","传递","呢","接口","另","感器","*","from","几个","spin","对劲","叫做","（","复用","机器人","协议","inrange","满足","在","已经","周期性","get","轮廓","出来","true","entry","传感器","并不知道","本原","shape","循环","逻辑","echo","感兴","cvbridge","com","是否","来看","exe","frame","日志","说","数据","保持","完成","但是","drawcontours","好","color","opencv","用","scripts","boundingrect","run","做成","出去","更好","销毁","是从","这","桥梁","imshow","进入","150","将","什么","list","xy","控制指令","基本","apt","把","中文","自行","周期","hsv","输出","array","变化","拍摄","www","放入",",","timer","呀","解","env","none","的","不然","噪声","换","publishing","根本","定时器","随处","i","列表","内","下限","运行","转化","我们","如果","定义","者","string","bw","据传","还是","案例","数据结构","”","就是","$","填充","描述","这种","points","可移植","无论","下","cam","5","topics","<","号","使用","角度","!","cnt","积木","@","receiving","东西","main","和","提示","讲解","说干就干","比如","合适","publishernode","感觉","usr","class","古月","操作","可移植性","logger","没","topic"],"title":"**话题**","title_tokens":["话题","*"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_1","text":"节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。","text_tokens":["不是","重要","万缕","千丝万缕","间","传递数据","桥梁","但","实现","是","机器人","了","就是","有","并","各样","千丝","最","联系","方式","其中","它","独立","节点","话题","功能","联系方式","的","，","之间","各种","会","机器","数据","。","传递","这些","各种各样","一种"," "],"title":"话题","title_tokens":["话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_2","text":"以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。","text_tokens":["要","作为","硬件","信息","实现","就","大家","图像","了","给","必然","有","可视","可视化","视频","显示","到","驱动","它","？","做","可以","节点","此时","之为","监控","某种","。","传递","实时","一个","是","机器人","是不是","方向","从","存在","在","称之为","a","功能","渲染","查看","数据","之间","相机","传输","为例","b","上"," ","这","桥梁","将","用户","想","这个","设备","方式","拍摄","才能","某","两个","的","机器","我们","以","不是","一下","据传","数据传输","没错","得到","这样","中","关系","获取","话题","，","ros"],"title":"通信模型","title_tokens":["通信","模型","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_3","text":"从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为发布者，接收数据的对象称之为订阅者，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。","text_tokens":["之后","固定","知识","类型","实现","就","发送数据","大家","了","有","感兴趣","打","到","它","？","特性","dds","接收数据","可以","节点","另外","可见","自然","之为","小编","名称","随处可见","会","。","订阅","呢","类似","生活","一个","发布者","他会","看","叫","对象","居","叫做","微信","组织","名字","是","机器人","从","称之为","、","数据类型","平时","感兴","来看","报纸","数据","杂志","好","无法","传输","成","“","出去"," ","文章","排版","是从","等等","本身","什么","兴趣","比方","把","公众","这个","都","模型","的","机器","应该","/","随处","成为","基于","在生活中","如果","者","要求","接收","据传","数据传输","收到","”","就是","这样","发布","发送","的话","号","使用","每","角度","话题","和","格式","比如","，","古月","没有","也","对","需要"],"title":"发布/订阅模型","title_tokens":["/","模型","订阅","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_4","text":"大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。","text_tokens":["指令","要","2","注意","大家","了","有","3","画面","仔细","每个","很多","可以","节点","控制","被","之为","。","订阅","里","一样","不","一个","魔性","发布者","数量","是","机器人","是不是","存在","称之为","、","听","多个","优先级","报纸","杂志","挺","优先","想象","因为","谁","建议"," ","通信","摇杆","想下","并","再","控制指令","公众","知道","这个","多","唯一","模型","的","不然","区分","机器","这些","1","我们","该","如果","者","不是","一下","还是","没错","个","通信模型","发布","可能","发送","号","似乎","话题","东西","人","和","，","ros","也","对"],"title":"多对多通信","title_tokens":["通信","对","多"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_5","text":"话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。","text_tokens":["指令","就","了","有","那","传感","参数","异步","特性","？","较强","修改","一些","可以","控制","你","。","订阅","类似","感器","不","一份","不知","一个","发布者","后","居","叫做","某些","是","第一次","传感器","并不知道","听说","适合","逻辑","第一","报纸","数据","用于","还有","词","传输","用","逻辑性"," ","文章","时候","这","阅读","发出","等等","通信","什么","指","公众","周期","知道","这个","某","的","太","更","根本","同学","如果","者","让","收到","就是","发布","可能","号","运动","话题","所谓","只要","一次","比如","，","合适","报社","古月","也","一篇"],"title":"异步通信","title_tokens":["通信","异步"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_6","text":"最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过.msg后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。","text_tokens":["编程语言",".","最后","就","了","图像","有","与","每个","可以","节点","得","不能","理解","语言","之为","编程","会","统一","块","msg","。","订阅","接口","一样","对应","一种","一个","发布者","包含","是","既然","机器人","通过","在","称之为","、","无关","文件","说","数据","各种","传输","成","各种各样","消息"," ","等等","通信","标准","各样","这里","中文","自行","像","方式","都","后缀","长宽","的","英文","机器","值","我们","定义","rgb","者","据传","数据传输","接口定义","数据结构","描述","这样","拼接","发布","复杂","结构","中","概念","进行","积木","话题","和","格式","比如","，","ros","系统","像素","也","组成"],"title":"消息接口","title_tokens":["消息","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#hello-world","text":"了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。","text_tokens":["接收","代码","还是","类型","标准","是","”","了","基本原理","再","从","基本","发布","字符串","从而","周期","中","了解","发送","编写","这个","world","到","本原","hello","chatter","字符","话题","的","接下来","，","啦","例程","就要","创建","下来","。","订阅","ros","者","来","原理","string","“","接下","开始","消息","我们","一个","定义","发布者"," "],"title":"案例一：Hello World话题通信","title_tokens":["hello","案例","话题","通信","一","world","："," "]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_7","text":"启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。","text_tokens":["learning","频率","收到","看到","启动","同样","”","$","：","pub","sub","发布","第二","字符串","第一个","ros2","_","helloworld","world","循环","hello","字符","第二个","话题","节点","可以","终端","二个","的","第一","，","数据","。","订阅","者","几乎","也","“","运行","run","topic","消息","该","一个","以","发布者"," "],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_8","text":"我们来看下发布者的实现方法。","text_tokens":["发布","。","下","实现","来看","的","我们","方法","发布者"],"title":"发布者代码解析","title_tokens":["代码","解析","发布者","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_9","text":"learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], },","text_tokens":["learning","}","代码",".","初始","s","信息","__","类型","：",":","等待","如下","[","-","python3","类","publish","guyuehome","字符","msgs","create","console","节点","=","名","为","长度","库","退出","\"","name","需要","]","msg","destroy","接口","队列","*","{","一个","编译","发布者","10","from","后","spin","对象","居","（","#","pub","已经","字符串","、","get","args","设置","entry","编写","py","循环","hello","打开","功能","com","回调","bin","utf","日志","文件","数据","完成",")","scripts","“","topic","'","消息","callback","示例"," ","shutdown","销毁","publisher","包","python","import","init","并","主","0.5","周期","ros2","知道","_","输出","helloworld","world","www","程序","chatter",",","timer","self","std","env","父类","点","加入","none","的","选项","创建","publishing","入口","定时器","/","setup","string","关闭","让","秒","%","定时","data","初始化","”","填充","8","points","发布","rclpy","函数","node","）","执行","中","进行","!","配置","info","@","话题","main","单位","提示","，","publishernode","usr","(","class","def","古月","系统","super","coding","logger","作者","说明"],"title":"程序实现","title_tokens":["实现","程序","程序实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_10","text":"对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口","text_tokens":["销毁","对象","关闭","初始","分析","实现","初始化","填充","并","：","发布","如下","以上","进行","程序","节点","话题","流程","编程","，","创建","接口","对","想要","消息","我们","一个","如果","发布者"," "],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_11","text":"我们再来看下订阅者的实现方法。","text_tokens":["。","订阅","下","实现","来看","的","我们","方法","再","者"],"title":"订阅者代码解析","title_tokens":["代码","解析","订阅","者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_12","text":"learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], },","text_tokens":["learning","}","代码",".","初始","s","信息","__","类型","：",":","等待","如下","[","-","python3","类","guyuehome","msgs","create","console","节点","=","名","长度","库","退出","\"","name","需要","]","msg","destroy","订阅","接口","队列","*","{","一个","编译","from","10","后","spin","对象","居","（","subscription","#","pub","处理","、","get","args","设置","entry","编写","py","循环","hello","打开","功能","com","回调","bin","utf","日志","文件","数据","完成",")","subscribernode","scripts","“","topic","'","消息","callback","示例"," ","shutdown","销毁","包","python","import","标准","init","并","主","sub","ros2","知道","_","输出","helloworld","world","www","\\","chatter","程序",",","self","std","env","父类","点","加入","none","的","选项","创建","入口","/","i","setup","定义","heard","者","string","关闭","让","%","收到","data","初始化","”","8","points","rclpy","函数","node","）","执行","进行","!","配置","info","@","话题","main","提示","listener","，","usr","(","class","def","古月","系统","super","coding","对","logger","作者","说明"],"title":"程序实现","title_tokens":["实现","程序","程序实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_13","text":"对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。","text_tokens":["销毁","对象","之前","关闭","初始","通信","分析","实现","初始化","大家","并","：","还","处理","函数","如下","下","一定","以上","world","进行","程序","hello","节点","话题","优化","过瘾","回调","流程","的","视觉","接下来","编程","，","创建","数据","啦","例程","机器","下来","好","。","订阅","接口","基于","对","接下","想要","不","继续","我们","一个","如果","者"," "],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_14","text":"在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。","text_tokens":["间","识别","来讲","实现","红色","是","机器人","开发","了","过程","并","虽然","将","就是","图像","通过","在","联系","模块","概念","中","周期","物体","问题","方式","这个","驱动","做到","程序","即可","模块化","节点","话题","功能","和","两个","讲解","的","视觉","，","数据","对于","但是","相机","机器","。","传输","没有","没","对","做成","我们","一个","更好","并且"],"title":"案例二：机器视觉识别","title_tokens":["机器","识别","案例","二","视觉","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_15","text":"这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。","text_tokens":["learning","要","如何","看到","启动","效果","实现","就","图像","了","驱动","？","修改","即可","模块化","可以","节点","啦","。","订阅","另","一个","更换","未来","是","pub","在","第一个","终端","二个","功能","软件","来看","第一","保持","相机","好","run","topic","消息","更好"," ","识别","标准","并","将","sub","物体","ros2","_","这个","放入","webcam","两个","的","视觉","以下","思想","内","完全","设计","运行","我们","移植性","定义","如果","先","只","红色","$","这种","范围","可移植","发布","第二","模块","下","不变","分别","移植","第二个","话题","保证","说干就干","，","中是","ros","可移植性","需要"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_16","text":"learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], },","text_tokens":["learning","}","raw","代码",".","初始","信息","__","0.1","类型","图像","：",":","等待","视频","如下","[","-","与","python3","类","驱动","稍后","publish","guyuehome","read","msgs","create","采集","console","节点","=","名","为","长度","库","退出","\"","name","需要","]","msg","destroy","接口","队列","*","{","一个","编译","发布者","from","10","后","spin","对象","居","if","（","bgr8","#","pub","已经","处理","、","get","图像处理","args","true","成功","设置","entry","编写","py","循环","打开","cv","cvbridge","功能","com","ret","回调","frame","bin","utf","日志","文件","用于","相机","video","完成",")","opencv","scripts","topic","'","消息","callback","示例"," ","shutdown","销毁","publisher","包","python","to","import","转换成","init","将","并","0","主","sub","周期","ros2","知道","_","设备","输出","helloworld","换成","www","程序",",","timer","self","env","webcam","父类","cap","加入","none","点","sensor","的","读取","选项","创建","imagepublisher","publishing","入口","定时器","/","imgmsg","setup","image","转换","如果","关闭","让","秒","定时","bridge","初始化","一帧","8","points","发布","rclpy","函数","node","）","执行","videocapture","号","进行","!","配置","info","@","话题","main","单位","提示","cv2","，","usr","(","class","def","古月","ros","系统","super","coding","logger","作者","说明"],"title":"发布者代码解析","title_tokens":["代码","解析","发布者","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_17","text":"learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], },","text_tokens":["learning","}","raw","代码",".","初始","信息","__","2","效果","类型","hierarchy","w","图像","：",":","等待","显示","如下","[","-","与","cvtcolor","python3","类","苹果","guyuehome","x","已","imagesubscriber","msgs","create","一些","console","节点","+","=","名","数值","为","长度","库","退出","\"","name","]","需要","circle","msg","destroy","订阅","接口","队列","bgr","*","{","一个","编译","img","from","10","bgr2hsv","检测","continue","对象","后","居","spin","y","if","red","（","所在","勾勒","bgr8","subscription","中心","#","inrange","retr","从","pub","处理","、","chain","太小","图像处理","二值化","as","轮廓","出来","get","args","设置","编写","entry","90","shape","py","循环","左上","打开","upper","cv","cvbridge","功能","mask","com","回调","frame","bin","utf","日志","文件","互相","用于","完成","video","drawcontours","color",")","opencv","255","contours","scripts","boundingrect","topic","'","消息","callback","示例"," ","np","detect","销毁","shutdown","包","python","及","imshow","to","import","进入","150","init","findcontours","将","并","0","主","list","xy","sub","颜色","计算","左上角","hsv","ros2","知道","_","输出","helloworld","array","www","程序",",","self","模型","numpy","点画","env","webcam","父类","点","加入","none","上限","waitkey","sensor","的","噪声","宽","面积","选项","创建","入口","imgmsg","/","in","下限","int","1","image","转换","转化","setup","者","for","转化成","阈值","关闭","让","data","bridge","初始化","object","红色","得到","8","points","范围","rclpy","函数","坐标","node","）","中","上角","5","<","lower","使用","进行","!","cnt","receiving","去除","@","info","话题","配置","main","和","提示","cv2","listener","，","h","化成","usr","(","class","def","古月","ros","高","系统","128","super","像素","coding","logger","180","作者","approx","说明"],"title":"订阅者代码解析","title_tokens":["代码","解析","订阅","者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_18","text":"通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub","text_tokens":["指令","learning","任何","代码","进一步","就","大家","了","图像","有","通用","直接","sudo","-","到","驱动","？","现在","做","焕然","哪里","可以","节点","不太","得","你","一句","集成","一行","不过","。","接口","不","例程","一个","install","对劲","复用","是","协议","是不是","通过","精简","焕然一新","功能","耦","一步","软件","exe","当然","还有","相机","好","用","率","run","topic"," ","识别","这","！","标准","什么","常用","又","apt","sub","符合","提高","好像","写","安装","ros2","不行","_","都","换成","变化","usb","呀","解","刚才","webcam","什么样","原本","的","视觉","换","接口协议","一新","我们","每换","不是","让","只","得到","$","这样","发布","node","可能","中","无论","humble","cam","一般","目标","使用","似乎","话题","只要","，","感觉","么","ros","也","对","需要","自己"],"title":"案例三：机器视觉识别优化","title_tokens":["机器","识别","案例","优化","视觉","三","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_19","text":"话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息","text_tokens":["频率","bw","type","信息","hz","data","#","$","：","pub","list","常用","命令","带宽","发布","如下","ros2",">","_","<","info","echo","话题"," ","的","查看","数据","name","msg","列表","操作","传输","消息","topic"],"title":"话题命令行操作","title_tokens":["命令行","话题","操作","命令"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_20","text":"关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？","text_tokens":["所有","几个","能够","来讲","据传","数据传输","通信","关于","实现","就","是","大家","机器人","举","给","：","满足","这种","这里","周期性","复杂","肯定","周期","思考题","方法","到","考题","特性","？","适合","话题","留","和","是否","的","，","数据","思考","对于","单向","机器","完成","传递","系统","传输","讲","原理","无法","例子","呢","需求","我们","一个"],"title":"思考题","title_tokens":["思考题","思考","考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_21","text":"https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["docs","tutorials","understanding",":","/",".","org","ros","humble","ros2","-","topics","en","html","https"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/","text":"服务 话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。 通信模型 在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。 客户端/服务器模型 从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。 同步通信 这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。 一对多通信 比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。 服务接口 和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。 案例一：加法求解器 大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 运行效果 我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3 客户端代码解析 我们来看下客户端的实现方法。 程序实现 learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口 服务端代码解析 至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。 程序实现 learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_server = learning_service.service_adder_server:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口 案例二：机器视觉识别 好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。 运行效果 此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client 客户端代码解析 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], }, 服务端代码解析 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], }, 服务命令行操作 服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求 思考题 话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["指令","raw","学习","代码",".","__","就","大家","开发","3","通用","查询","类","苹果","考题","https","已","图像识别","之为","长度","时间","参考","destroy","订阅","类似","一样","队列","不","继续","例程","一个","img","bgr2hsv","检测","之前","加数","封装","y","网站","bgr8","同样","subscription","中心","网络","存在","as","编写","常见","py","我","左上","add","命令行","终端","二个","mask","具体","解析","bin","第一","文件","utf","介绍","sum","还有","等","法器","传输","按照","callback","addtwoints","示例","出现","shutdown","展现","时候","识别","经常","访问","及","等等","通信","findcontours","接口类型","越快","域名","主","左上角","客户端","计算","物体","知道","都","或者","后续","\\","模型","发给","点画","点","两个","waitkey","sensor","视觉","位置","创建","机器","objectclient","入口","in","srv","成为","设计","开始","setup","image","for","认为","转化成","once","要求","...","但","bridge","初始化","这样","8","不好","函数","node","中","）","发送",">","当","lower","拿到","每","进行","话题","所以","人","有所","一次","求解","化成","h","那有","上层","最为","讲","转圈","应用","作者","方法","包","之后","learning","准备","频率","}","初始","硬件","看到","2","server","变成","图像","比比皆是",":","如下","[","了解","-","与","cvtcolor","python3","到","以上","en","异步","现在","invalid","console","msgs","available","很多","=","名","数值","为","集成","机制","again","思考","随时","bgr","问","看","continue","后","sys","对象","居","繁杂","所在","red","#","retr","从","通过","处理","、","第一个","chain","太小","args","成功","传入","合理","简称","50","打开","cv","核心","处","同步性","回调","电脑","之间","各种","video","大部","interface",")","无法","比比","contours","“","消息","b"," ","界面","假设","发","跟随","两种","python","最新","接口类","import","判断","并","然后","sub","颜色","waiting","return","其中","usb","自定义","argv","程序","唯一","刚才","父类","while","流程","宽","1.0","不同","链接","而是","应该","imgmsg","这些","务器","需求","尽快","不是","关闭","阈值","type","接收","；","%","收到","前者","一","object","得到","绝大","服务","understanding","通信模型","of","加法","第二","rclpy","范围","执行","上角","这么","部分","分别","配置","info","去除","请求","e","cv2","listener","response","接下来","，","服务端","就要","单向","def","高","系统","像素","没有","也","对","exception","想要","client","service","approx","向","并且","传递数据","request","信息","程序实现","类型","了","过程","给","：","timeout","getobjectposition","等待","当前","答","有点","async","guyuehome","x","提供","create","except","一些","+","用到","相对","越快越好","你","break","库","编程","啦","会","不过","\"","客户","下来","circle","二","生活","正常","{","一种","编译","不知","发布者","10","if","勾勒","某些","html","是","跟踪","一问一答","docs","称之为","数据类型","not","提到","图像处理","二值化","返回","设置","服务器发送","a","90","浏览","适合","里程计","多个","一直","自定","upper","功能","浏览器","互相","查看","用于","相机","255","成","result","incoming","'","上","np","detect","n","to","标准","场景","init","0","网页","常用","命令","器","好像","更加","ros2","_","这个","方式","r","tutorials","多","求和","self","numpy","加入","上限","面积","选项","更","宕机","/","完全","在生活中","int","1","加法器","打印输出","并不需要","转换","岂","让","附近","org","data","简单","红色","本","大部分","发布","坐标","总结","可能","humble","一般","目标","adderclient","运动","至于","services","获取","圈圈","第二个","future","position","应答","ints","(","绝大部分","ros","super","原理","128","coding","接下","180","需要","半天","要","done","准确","相比","页面","通信接口","启动","效果","实现","分析","hierarchy","w","后者","一对","有","反应","传感","显示","思考题","针对","驱动","imagesubscriber","可以","节点","此时","控制","另外","软硬件","退出","name","d","某个","]","msg","。","传递","接口","感器","*","from","spin","叫做","上述","（","command","打印","机器人","希望","inrange","满足","数据通信","在","已经","周期性","get","轮廓","出来","true","entry","ok","里程","很","并不知道","传感器","反馈","shape","循环","cvbridge","com","是否","来看","exe","frame","服务器","日志","数据","但是","完成","drawcontours","好","color","opencv","scripts","boundingrect","状态","run","else","根据","出去","销毁","two","imshow","try","进入","150","形式","将","什么","一起","list","xy","控制指令","基本","同步","周期","hsv","sec","输出","array","www",",","env","none","的","send","噪声","failed","call","列表","objectx","下限","服务器端","运行","转化","我们","定义","如果","者","回想","还是","案例","wait","”","软硬","就是","$","adder","转圈圈","这种","points","有所不同","下","数据通","cam","5","<","使用","!","cnt","receiving","@","官方","main","cs","雷达","和","提示","—","objecty","课程","比如","adderserver","放到","usr","class","target","古月","时","操作","logger","三个","越好","结果","说明"],"title":"**服务**","title_tokens":["*","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_1","text":"话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。","text_tokens":["准确","学习","收到","通信","效果","实现","将","本","服务","一起","这种","常用","发布","同步","答","方法","知道","异步","使用","我","多个","可以","话题","节点","另外","是否","—","你","的","，","之间","数据","机制","单向","。","订阅","ros","无法","传输","者","讲","类似","问","消息","我们","一种","发布者"," "],"title":"服务","title_tokens":["服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_2","text":"在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。","text_tokens":["频率","信息","实现","图像","了","答","查询","到","驱动","可以","节点","此时","另外","图像识别","你","机制","。","订阅","一样","问","继续","一个","之前","是","机器人","希望","通过","在","反馈","我","一直","数据","相机","传输","按照"," ","时候","识别","发","跟随","最新","通信","形式","并","然后","好像","周期","物体","这个","其中","或者","模型","发给","的","位置","不同","更","机器","而是","成为","尽快","我们","并不需要","附近","红色","得到","服务","这样","这种","通信模型","发布","有所不同","中","发送","目标","这么","使用","运动","话题","请求","有所","和","课程","比如","应答","，","单向","高","上层","ros","对","应用","变成","service","需要"],"title":"通信模型","title_tokens":["通信","模型","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_3","text":"从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。","text_tokens":["之后","展现","时候","经常","叫做","页面","网站","收到","信息","某些","通信","实现","就","形式","就是","并","从","服务","域名","网页","这种","在","通过","处理","客户端","答","返回","发送","针对","服务器发送","很","或者","简称","常见","反馈","进行","浏览","我","模型","此时","请求","cs","具体","来看","你","的","为","服务器","电脑","应答","比如","浏览器","，","机制","数据","会","客户","各种","需要","某个","/","。","操作","务器","也","服务器端","生活","问","在生活中","我们","上","向"," "],"title":"客户端/服务器模型","title_tokens":["客户","客户端","/","模型","务器","服务器","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_4","text":"这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。","text_tokens":["半天","假设","要求","相比","接收","信息","通信","是","判断","了","过程","服务","反应","越快","转圈圈","网络","在","通过","称之为","同步","不好","客户端","可能","中","一般","这个","到","或者","浏览","圈圈","可以","一直","话题","所以","越快越好","你","的","服务器","之为","浏览器","应答","，","那有","客户","宕机","。","务器","没有","也","服务器端","状态","转圈","越好","我们"],"title":"同步通信","title_tokens":["通信","同步"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_5","text":"比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。","text_tokens":["界面","居","访问","网站","看到","同样","通信","但","是","大家","并","服务","存在","通信模型","客户端","中","这个","都","每","唯一","多个","可以","模型","所以","人","的","服务器","比如","，","但是","客户","古月","。","完全","务器","一样","没有","服务器端","不","一个"],"title":"一对多通信","title_tokens":["通信","一对","多"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_6","text":"和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。","text_tokens":["传递数据","要","还是",".","通信","标准","是","大家","了","给","服务","在","命令","坐标","中","消息","方法","苹果","部分","使用","反馈","后续","话题","核心","请求","和","两个","的","文件","比如","介绍","位置","，","数据","会","还有","msg","。","传递","这些","ros","类似","一样","srv","也","变成","我们","一个","定义"," "],"title":"服务接口","title_tokens":["服务","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_7","text":"大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。","text_tokens":["之后","代码","实现","就","大家","了","有","给","了解","针对","现在","提供","可以","节点","相对","啦","客户","下来","。","例程","一个","后","加数","封装","是","从","通过","编写","反馈","add","功能","服务器","数据","成","“","出去"," ","two","通信","将","并","基本","器","计算","客户端","_","这个","求和","两个","的","应该","务器","服务器端","开始","我们","还是","收到","简单","得到","”","服务","加法","发送","当","进行","官方","请求","求解","接下来","应答","，","ints","就要","时","ros","也","对","接下","想要","结果","需要"],"title":"案例一：加法求解器","title_tokens":["器","加法","案例","一","求解","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_8","text":"我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3","text_tokens":["learning","service","加数","代码","启动","2","实现","是","server","并且","并","$","服务","adder","3","一起","等待","第二","客户端","第一个","如下","下","ros2","发送","_","这个","传入","提供","求和","第二个","节点","终端","二个","请求","功能","两个","的","我们","第一","，","服务端","数据","客户","。","操作","原理","运行","run","client","例程","一个","结果"," ","看"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_9","text":"我们来看下客户端的实现方法。","text_tokens":["客户","客户端","。","下","实现","来看","的","我们","方法"],"title":"客户端代码解析","title_tokens":["代码","解析","客户","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_10","text":"learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], },","text_tokens":["learning","done","}","代码",".","初始","request","信息","__","启动","2","类型","timeout","：",":","等待","如下","[","-","python3","类","async","异步","guyuehome","create","console","available","except","节点","+","=","名","break","库","again","\"","name","客户","]","d","需要","destroy","接口","正常","*","{","一个","编译","from","后","sys","对象","加数","居","spin","if","（","打印","#","处理","not","get","args","as","设置","成功","entry","ok","编写","a","反馈","py","循环","add","自定","打开","功能","com","是否","bin","utf","服务器","sum","文件","数据","完成","interface",")","法器","scripts","result","'","else","addtwoints","示例","b"," ","shutdown","销毁","two","包","python","接口类","import","try","init","并","接口类型","将","计算","客户端","ros2","sec","waiting","_","方式","输出","知道","自定义","argv","r","www","程序",",","self","env","父类","while","加入","两个","none","点","的","send","1.0","failed","创建","选项","入口","call","/","srv","务器","服务器端","运行","int","1","加法器","打印输出","setup","定义","for","once","关闭","让","接收","%","wait","收到","...","初始化","adder","服务","8","of","points","加法","rclpy","函数","node","）","执行","发送","adderclient","进行","!","配置","info","@","future","请求","main","一次","e","response","，","ints","usr","(","class","def","古月","系统","super","coding","logger","exception","client","作者","service","说明"],"title":"程序实现","title_tokens":["实现","程序","程序实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_11","text":"对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口","text_tokens":["销毁","对象","关闭","初始","分析","实现","初始化","并","：","服务","客户端","等待","如下","发送","以上","进行","程序","节点","请求","流程","服务器","应答","编程","，","创建","数据","客户","接口","务器","对","服务器端","想要","我们","一个","如果"," "],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_12","text":"至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。","text_tokens":["通信","实现","了","什么","服务","函数","出现","有点","中","知道","并不知道","至于","话题","用到","请求","回调","的","服务器","，","数据","机制","时间","。","订阅","务器","类似","也","服务器端","不知","者"],"title":"服务端代码解析","title_tokens":["服务端","代码","解析","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_13","text":"learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_server = learning_service.service_adder_server:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], },","text_tokens":["learning","}","代码",".","初始","request","信息","__","类型","server","：",":","等待","如下","[","-","python3","类","guyuehome","提供","create","console","节点","+","=","名","库","退出","\"","name","d","需要","]","destroy","接口","*","{","编译","from","后","spin","对象","居","（","#","已经","处理","、","get","args","设置","entry","编写","a","反馈","py","循环","add","自定","打开","功能","com","回调","bin","utf","服务器","sum","日志","文件","数据","完成","interface",")","法器","scripts","incoming","'","callback","addtwoints","示例","b"," ","shutdown","销毁","two","n","包","python","接口类","import","init","将","接口类型","并","主","计算","ros2","return","知道","_","输出","自定义","www","\\","程序",",","求和","self","env","父类","点","加入","none","的","选项","创建","入口","/","srv","务器","setup","加法器","定义","关闭","让","%","收到","初始化","adder","服务","8","points","加法","rclpy","函数","node","）","执行","中","进行","!","配置","info","@","请求","main","提示","response","应答","ints","，","adderserver","放到","usr","(","class","def","古月","系统","super","coding","对","logger","作者","service","结果","说明"],"title":"程序实现","title_tokens":["实现","程序","程序实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_14","text":"对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口","text_tokens":["销毁","对象","关闭","初始","分析","实现","初始化","并","：","服务","通过","函数","客户端","如下","以上","反馈","进行","程序","节点","处","回调","流程","服务器","应答","编程","服务端","，","创建","客户","结果","接口","务器","对","服务器端","想要","我们","一个","如果","向"," "],"title":"流程总结","title_tokens":["流程","总结"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_15","text":"好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。","text_tokens":["岂","时候","不是","识别","通信","实现","了","服务","通过","已经","器","加法","提到","更加","下","物体","知道","当","目标","合理","刚才","流程","视觉","的","求解","位置","，","啦","机制","好","。","我们","回想","需要"],"title":"案例二：机器视觉识别","title_tokens":["机器","识别","案例","二","视觉","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_16","text":"此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client","text_tokens":["准备","认为","对象","识别","learning","service","上述","；","启动","object","是","机器人","就","server","图像","了","有","：","服务","跟踪","$","然后","发布","客户端","node","当前","cam","ros2","发送","_","目标","当","驱动","拿到","usb","运动","分别","提供","可以","节点","此时","终端","请求","一次","的","视觉","服务器","exe","集成","，","位置","会","数据","客户","相机","一个","随时","机器","需要","。","订阅","时","务器","client","三个","服务器端","运行","run","根据","我们","出现"," ","并且"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_17","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], },","text_tokens":["learning","done","}","代码",".","初始","request","__","server","timeout","：",":","getobjectposition","等待","如下","[","-","python3","类","async","guyuehome","x","create","console","available","except","节点","=","break","库","again","\"","name","d","需要","]","destroy","接口","*","{","编译","from","后","spin","对象","居","y","if","#","not","get","args","as","true","设置","entry","ok","编写","py","自定","打开","功能","com","bin","utf","文件","完成","interface",")","scripts","result","'","else","示例"," ","shutdown","销毁","识别","n","包","python","import","try","init","并","ros2","sec","waiting","_","知道","自定义","r","www","\\","程序",",","self","env","父类","while","加入","none","点","的","send","1.0","位置","failed","创建","选项","objectclient","入口","call","/","srv","setup","定义","for","once","关闭","让","%","wait","...","初始化","object","adder","服务","8","of","points","rclpy","node","目标","进行","!","配置","info","@","future","position","请求","main","e","response","应答","，","usr","(","target","class","def","古月","系统","super","coding","logger","exception","client","作者","service","说明"],"title":"客户端代码解析","title_tokens":["代码","解析","客户","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_18","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], },","text_tokens":["learning","}","raw","代码",".","初始","request","信息","__","2","效果","类型","hierarchy","w","server","图像","：",":","getobjectposition","等待","显示","如下","[","-","与","cvtcolor","python3","类","苹果","guyuehome","x","已","invalid","imagesubscriber","提供","msgs","create","一些","console","节点","+","=","名","数值","为","长度","库","退出","\"","name","d","]","需要","circle","msg","destroy","订阅","接口","队列","bgr","*","{","一个","编译","img","from","10","bgr2hsv","检测","continue","对象","后","居","spin","y","if","red","（","所在","勾勒","bgr8","command","subscription","中心","#","inrange","retr","从","已经","处理","、","get","chain","图像处理","二值化","as","轮廓","太小","出来","true","args","编写","设置","entry","90","反馈","shape","py","循环","50","左上","自定","upper","cv","cvbridge","功能","mask","com","打开","回调","frame","bin","utf","服务器","日志","文件","互相","数据","用于","完成","video","drawcontours","interface","color",")","opencv","255","contours","scripts","boundingrect","'","消息","callback","示例","else"," ","np","detect","销毁","shutdown","识别","n","包","python","及","imshow","接口类","to","import","进入","150","init","findcontours","接口类型","将","0","主","并","list","xy","sub","颜色","计算","左上角","hsv","物体","ros2","return","知道","_","输出","array","自定义","www","\\","程序",",","self","模型","numpy","点画","env","父类","点","加入","none","上限","waitkey","sensor","的","噪声","宽","面积","选项","创建","入口","imgmsg","/","in","srv","务器","下限","objectx","int","1","image","转换","转化","定义","setup","者","for","转化成","阈值","关闭","让","%","收到","data","bridge","初始化","object","红色","得到","adder","服务","8","points","范围","rclpy","函数","坐标","node","）","中","执行","上角","5","目标","lower","<","使用","进行","!","cnt","receiving","去除","@","info","话题","配置","position","请求","main","和","objecty","提示","cv2","listener","response","，","h","化成","usr","(","class","def","target","古月","ros","高","系统","128","super","像素","coding","logger","对","180","client","作者","service","approx","说明"],"title":"服务端代码解析","title_tokens":["服务端","代码","解析","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_19","text":"服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求","text_tokens":["type","data","类型","#","$","：","服务","list","常用","命令","数据类型","如下","ros2",">","_","<","发送","请求","的","查看","数据","name","call","列表","操作","service"," "],"title":"服务命令行操作","title_tokens":["命令行","命令","操作","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_20","text":"话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。","text_tokens":["指令","通信接口","硬件","类型","开发","后者","过程","比比皆是","了","图像","通用","传感","针对","到","很多","控制","软硬件","不过","。","接口","类似","感器","繁杂","是","机器人","满足","一问一答","数据通信","在","周期性","、","数据类型","里程","传感器","适合","里程计","自定","同步性","数据","等","大部","无法","比比","传输"," ","时候","识别","两种","等等","通信","标准","场景","常用","控制指令","同步","周期","这个","都","自定义","的","视觉","位置","更","机器","这些","设计","需求","我们","定义","要求","前者","绝大","软硬","服务","大部分","中","数据通","目标","部分","获取","话题","雷达","和","比如","，","就要","单向","绝大部分","ros","高","最为","也","应用","方法"],"title":"思考题","title_tokens":["思考题","思考","考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_21","text":"https://docs.ros.org/en/ humble /Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["docs","tutorials","understanding",":","services","/",".","org","ros","humble","ros2","-","html","en","https"," "],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/","text":"通信接口 在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。 接口的定义 接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。 ROS通信接口 接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。 语言无关 为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。 标准接口 大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。 案例一：服务接口的定义与使用 了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。 接口定义 在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ... 程序调用 我们在代码中再来重点看下接口的使用方法。 客户端接口调用 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 服务端接口调用 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 案例二：话题接口的定义与使用 话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。 运行效果 现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub 接口定义 在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ... 程序调用 我们在代码中再来重点看下接口的使用方法。 发布者接口调用 learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 订阅者接口调用 learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 接口命令行操作 接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义 参考链接 https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["指令","如何","raw","学习","代码",".","__","rosidl","就","大家","开发","小海龟","还","直接","小海","查询","类","苹果","不管","https","？","好奇","已","字符","理解","程序模块","之为","长度","有没有","参考","destroy","订阅","类似","来","队列","cmakelists","20","继续","例程","一个","代码生成","img","single","bgr2hsv","检测","之前","y","封装","找到","bgr8","subscription","中心","concepts","as","编写","无关","常见","py","整型","左上","两者","命令行","二个","终端","mask","具体","解析","sum","第一","文件","bin","utf","还有","等","传输","精髓","callback","示例","shutdown","group","时候","interfaces","识别","publisher","自动","及","等等","通信","findcontours","接口类型","主","关心","目的","这里","客户端","计算","左上角","物体","知道","都","或者","转","后续","工作","\\","模型","点画","两个","waitkey","sensor","视觉","位置","创建","海龟","default","机器","objectclient","入口","in","值","srv","最终","设计","开始","txt","image","for","转化成","once","内容","接口定义","...","但","bridge","一帧","初始化","and","这样","8","联系","函数","node","概念","中","结构","）","发送",">","lower","每","进行","话题","所以","人","保证","一次","图形化","生成","看上去","h","化成","最为","讲","例子","应用","作者","种","方法","包","learning","}","固定","各个","初始","硬件","看到","2","server","由","图像",":","摄像","第三","如下","[","了解","-","与","cvtcolor","python3","到","以上","en","about","现在","形状","invalid","msgs","available","角速度","可见","转到","=","数值","名","为","机制","again","线速度","30","对应","看看","runtime","bgr","看","continue","后","必须","对象","find","居","所在","red","包含","#","包中","retr","从","pub","通过","传输数据","处理","字符串","、","第一个","就行","chain","太小","args","彼此","三种","50","为了","打开","cv","核心","二维","分成","回调","自语","电脑","用来","编写程序","之间","各种","1s","video","interface",")","contours","subscribernode","“","消息","b"," ","generators","python","接口类","import","位","自言自语","并","再","编译器","衍生","sub","颜色","符合","三原","重复","waiting","return","usb","自定义","程序","g","父类","while","typec","宽","区分","1.0","不同","链接","而是","imgmsg","这些","务器","64","坐标值","到底","看上","重要","不是","速度","关闭","阈值","；","%","相互","收到","一","反正","object","得到","服务","主要","of","范围","加法","第二","由于","肯定","rclpy","执行","上角","use","的话","部分","分别","关系","配置","info","去除","只要","请求","e","cv2","listener","response","接下来","每隔","标准接口","，","服务端","标值","show","单向","def","减少","高","系统","像素","没有","也","exception","对","client","service","组成","approx","自己","并且","像素点","request","输入","信息","类型","表示","了","过程","给","甚至","加","：","那","timeout","数","话","getobjectposition","等待","当前","路径","只有","async","bool","publish","guyuehome","x","提供","一些","动作","create","except","+","用到","得","break","随处可见","编程","库","会","\"","客户","下来","详细","circle","二","里","生活","正常","{","一种","三原色","编译","发布者","10","if","勾勒","关于","html","是","关注","高效","docs","称之为","not","图像处理","二值化","回到","member","a","90","自定","upper","功能","软件","互相","查看","以及","用于","相机","插头","package","32","255","result","成","谁","topic","'","进度","上","np","detect","插座","n","广泛","to","旋转","标准","中间","init","0","想","常用","命令","int32","安装","exec","xml","ros2","_","这个","转到第","换成","上去","才能","r","tutorials","多","求和","self","std","numpy","包装","project","webcam","什么样","上限","micro","面积","选项","更","/","完全","软件开发","int","1","转换","第三个","一下","让","举个","---","org","data","只","将要","红色","share","action","depend","中有","诞生","度","发布","坐标","模块","可能","humble","文件夹","他们","目标","运动","获取","第二个","future","position","有机","应答","(","ros","super","128","coding","接下","180","依赖","需要","主程序","添加","要","done","众多","准确","通信接口","启动","效果","形象化","实现","hierarchy","w","领域","有","int64","便于","哪些","显示","调用","驱动","它","参数","每个","像是","imagesubscriber","可以","原色","节点","控制","形象","另外","此时","语言","一句","退出","name","d","]","某个","msg","。","两","呢","传递","接口","上边","*","from","几个","build","spin","（","command","别人","打印","机器人","希望","inrange","建立","在","布尔","已经","packages","get","轮廓","连接","出来","true","中来","ok","回顾","很","像头","你来我往","反馈","shape","循环","调用函数","cvbridge","com","是否","exe","降低","frame","服务器","日志","数据","完成","drawcontours","好","color","不用","opencv","boundingrect","状态","做成","run","各个领域","根据","else","出去","销毁","图形","这","匹配","数组","个人","imshow","try","进入","150","什么","将","一起","约束","list","xy","把","摄像头","周期","hsv","布尔值","sec","输出","array","体","更为","www",",","env","交流","none","的","send","噪声","failed","call","随处","列表","objectx","下限","运行","研究","转化","objectposition","我们","键盘","无论是","定义","方便","者","string","重点","还是","c++","案例","wait","一边","数据结构","手机","涵盖","”","就是","$","描述","却是","无论","下","cam","5","generate","<","使用","造","角度","!","cnt","receiving","@","轮子","main","和","objecty","—","讲解","提示","required","比如","课程","usr","class","target","古月","时","操作","件夹","三个","logger","输入输出","define","结果","说明"],"title":"**通信接口**","title_tokens":["通信","通信接口","*","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_1","text":"在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。","text_tokens":["重要","不是","这","让","内容","学习","还是","通信接口","个人","通信","将要","标准","是","大家","就是","自言自语","并","甚至","服务","什么","给","在","无论","中","概念","结构","都","或者","？","你来我往","后续","多","动作","为了","可以","话题","用到","人","交流","两个","—","理解","的","自语","，","会","更","数据","而是","好","。","ros","系统","接口","呢","传递","我们","一个","定义"," "],"title":"通信接口","title_tokens":["通信","通信接口","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_2","text":"接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。","text_tokens":["指令","要","像素点","固定","如何","准确","各个","代码","通信接口","硬件","输入","形象化","实现","就","大家","开发","了","领域","有","图像","由","给","那","加","话","直接","摄像","-","调用","只有","到","驱动","它","参数","？","形状","每个","像是","提供","一些","原色","可以","角速度","节点","控制","形象","可见","得","程序模块","之为","自己","一句","随处可见","编程","机制","结果","。","呢","线速度","接口","类似","生活","正常","一个","一种","三原色","必须","所在","关于","是","机器人","高效","关注","建立","通过","传输数据","在","称之为","、","连接","彼此","出来","回到","编写","很","像头","常见","反馈","调用函数","两者","具体","解析","软件","电脑","编写程序","数据","相机","插头","等","好","不用","传输","精髓","各个领域","b","上"," ","插座","时候","匹配","图形","这","包","广泛","等等","通信","标准","什么","一起","约束","常用","关心","目的","符合","把","摄像头","安装","三原","知道","输出","这个","都","上去","usb","才能","工作","程序","更为","多","r","g","包装","什么样","两个","typec","的","micro","更","机器","随处","值","这些","软件开发","完全","运行","开始","我们","键盘","定义","无论是","看上","让","速度","内容","举个","；","还是","相互","但","反正","手机","就是","服务","主要","却是","诞生","发布","函数","肯定","模块","概念","无论","结构","中","他们","使用","每","运动","进行","关系","配置","话题","所以","只要","和","一次","图形化","比如","，","看上去","时","ros","系统","最为","讲","像素","例子","也","输入输出","应用","组成","主程序","并且"],"title":"接口的定义","title_tokens":["的","定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#ros","text":"接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。","text_tokens":["这","让","代码","通信","别人","是","就是","有","服务","通过","一起","常用","便于","联系","、","重复","目标","到","三种","使用","造","每","才能","分别","程序","动作","可以","话题","依赖","节点","核心","轮子","有机","降低","的","我们","，","之间","机制","各种","。","减少","ros","接口","种","也","方便","一种","定义"," "],"title":"ROS通信接口","title_tokens":["通信","通信接口","ros","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_3","text":"为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。","text_tokens":["学习","通信接口",".","看到","表示","了","过程","int64","小海龟","数","还","小海","当前","到","bool","x","动作","可以","节点","此时","另外","转到","数值","语言","编程","会","机制","msg","。","两","里","接口","30","对应","20","编译","一个","一种","10","之前","y","包含","是","机器人","通过","布尔","在","、","就行","a","无关","90","反馈","整型","为了","二维","功能","是否","分成","sum","文件","用来","数据","1s","完成","还有","等","32","传输","“","做成","状态","进度","b"," ","数组","自动","python","通信","旋转","中间","位","将","什么","int32","这里","周期","布尔值","知道","这个","转到第","体","转","求和","两个","的","区分","不同","海龟","机器","srv","这些","64","最终","设计","开始","我们","定义","一下","让","---","还是","c++","一边","只","一帧","数据结构","”","action","描述","服务","度","加法","由于","坐标","结构","中","目标","使用","每","部分","运动","分别","话题","请求","保证","和","生成","比如","应答","每隔","，","单向","ros","三个","结果","需要"],"title":"语言无关","title_tokens":["无关","语言"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_4","text":"大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。","text_tokens":["几个","众多","找到","标准","涵盖","share","大家","了","给","在","哪些","路径","可能","中","安装","文件夹","？","好奇","可以","打开","的","我们","文件","，","。","ros","系统","接口","呢","看看","件夹","到底","定义"],"title":"标准接口","title_tokens":["标准","标准接口","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_5","text":"了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。","text_tokens":["第三个","如何","之前","识别","对象","时候","封装","通信接口","代码","收到","通信","实现","是","就","了","图像","再","有","从","服务","这样","在","发布","第二","第一个","第三","概念","下","中","了解","查询","发送","编写","目标","回顾","驱动","使用","进行","角度","提供","第二个","节点","话题","可以","二个","请求","讲解","的","视觉","第一","接下来","课程","位置","，","服务端","例程","以及","机器","相机","下来","需要","。","接口","来","三个","接下","研究","我们","一个","定义"," "],"title":"案例一：服务接口的定义与使用","title_tokens":["案例","接口","一","与","的","定义","：","服务","使用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_6","text":"在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ...","text_tokens":["learning","指令","}","添加","代码",".","rosidl","表示","就","了","过程","：","还","getobjectposition","bool","x","为","语言","会","\"","name","需要","。","接口","runtime","cmakelists","上边","{","例程","编译","代码生成","后","build","find","y","是","#","在","packages","、","get","true","member","反馈","功能","文件","完成","package","interface",")","根据"," ","group","generators","interfaces","自动","通信","编译器","int32","exec","xml","_","这个","project","两个","的","位置","选项","不同","default","/","srv","txt","我们","定义","让","---","接口定义","...","$","depend","服务","中有","of","坐标","中","的话","generate","目标","<",">","使用","部分","配置","获取","一次","生成","required","，","服务端","(","也","依赖","包"],"title":"接口定义","title_tokens":["定义","接口定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_7","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["在","重点","代码","。","中","下","来","接口","使用","的","我们","方法","再","看"],"title":"程序调用","title_tokens":["程序","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_8","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["learning","done",".","初始","request","__","timeout",":","getobjectposition","等待","-","python3","类","async","guyuehome","x","create","available","except","节点","=","break","库","again","\"","name","d","destroy","接口","*","from","spin","对象","居","y","if","#","not","get","args","as","true","ok","py","自定","com","bin","utf","interface",")","result","'","else","示例"," ","shutdown","销毁","识别","n","python","import","try","init","并","ros2","sec","waiting","_","自定义","r","www","\\",",","self","env","父类","while","none","的","send","1.0","位置","failed","创建","objectclient","call","/","srv","定义","for","once","关闭","%","wait","...","初始化","object","服务","8","of","rclpy","node","目标","进行","!","info","@","future","position","请求","main","e","response","应答","，","usr","(","target","class","def","古月","super","coding","logger","exception","client","作者","service","说明"],"title":"客户端接口调用","title_tokens":["调用","客户","接口","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_9","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["learning","raw",".","初始","request","信息","__","2","效果","类型","hierarchy","w","server","图像",":","getobjectposition","等待","显示","[","-","与","cvtcolor","python3","类","苹果","guyuehome","x","已","invalid","imagesubscriber","提供","msgs","create","一些","节点","+","=","名","数值","为","长度","库","退出","\"","name","d","]","circle","msg","destroy","订阅","接口","队列","bgr","*","一个","img","from","10","bgr2hsv","检测","continue","对象","后","居","spin","y","if","red","（","所在","勾勒","bgr8","command","subscription","中心","#","inrange","retr","从","已经","处理","、","get","chain","图像处理","二值化","as","轮廓","太小","出来","true","args","90","反馈","shape","py","循环","50","左上","自定","upper","cv","cvbridge","mask","com","回调","frame","bin","utf","服务器","日志","互相","数据","用于","video","drawcontours","interface","color",")","opencv","255","contours","boundingrect","'","消息","callback","示例","else"," ","np","detect","销毁","shutdown","识别","n","python","及","imshow","接口类","to","import","进入","150","init","findcontours","接口类型","将","0","主","并","list","xy","sub","颜色","计算","左上角","hsv","物体","ros2","return","_","输出","array","自定义","www","\\",",","self","模型","numpy","点画","env","父类","none","上限","waitkey","sensor","的","噪声","宽","面积","创建","入口","imgmsg","/","in","srv","务器","下限","objectx","int","1","image","转换","转化","定义","者","for","转化成","阈值","关闭","%","收到","data","bridge","初始化","object","红色","得到","服务","8","范围","rclpy","函数","坐标","node","）","中","执行","上角","5","目标","lower","<","使用","进行","!","cnt","receiving","去除","@","info","话题","position","请求","main","和","objecty","提示","cv2","listener","response","，","h","化成","usr","(","class","def","target","古月","ros","高","128","super","像素","coding","logger","对","180","作者","service","approx","说明"],"title":"服务端接口调用","title_tokens":["服务端","调用","服务","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_10","text":"话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。","text_tokens":["之前","识别","通信接口","案例","通信","是","从","衍生","服务","想","发布","把","周期","中来","目标","不管","换成","话题","人","的","视觉","位置","，","有没有","机器","。","接口","类似","没有","也","继续","我们","定义","需要"],"title":"案例二：话题接口的定义与使用","title_tokens":["案例","二","话题","接口","与","的","定义","：","使用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_11","text":"现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub","text_tokens":["learning","第三个","识别","；","封装","启动","标准","object","打印","是","就","希望","图像","出去","并","将","：","$","pub","sub","发布","第二","第一个","node","第三","中","消息","cam","ros2","_","目标","这个","驱动","到","以上","usb","现在","使用","分别","第二个","节点","话题","此时","二个","功能","终端","exe","的","视觉","第一","位置","，","会","数据","相机","需要","interface","。","订阅","ros","来","成","谁","三个","运行","run","topic","image","我们","一个","定义"," "],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_12","text":"在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ...","text_tokens":["learning","}","代码",".","rosidl","表示","了","过程","：","还","x","语言","\"","name","需要","msg","。","接口","cmakelists","{","例程","编译","一个","后","find","y","是","#","在","、","功能","完成","package","interface",")","根据","消息"," ","generators","interfaces","自动","通信","编译器","int32","_","这个","project","的","位置","选项","不同","default","/","坐标值","txt","我们","objectposition","定义","让","内容","接口定义","...","$","服务","描述","坐标","中","generate","目标","使用","进行","配置","话题","生成","required","标值","，","(","包"],"title":"接口定义","title_tokens":["定义","接口定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_13","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["在","重点","代码","。","中","下","来","接口","使用","的","我们","方法","再","看"],"title":"程序调用","title_tokens":["程序","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_14","text":"learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["learning","raw",".","初始","信息","__","2","效果","类型","hierarchy","w","图像",":","等待","显示","[","-","与","cvtcolor","python3","类","苹果","publish","guyuehome","x","已","imagesubscriber","msgs","create","一些","节点","+","=","名","数值","为","长度","库","退出","\"","name","]","circle","msg","destroy","订阅","接口","队列","bgr","*","一个","img","发布者","from","10","bgr2hsv","检测","continue","对象","后","居","spin","y","if","red","（","所在","勾勒","bgr8","subscription","中心","#","inrange","retr","从","pub","处理","、","chain","太小","图像处理","二值化","as","轮廓","出来","get","args","90","shape","py","循环","50","左上","自定","upper","cv","cvbridge","mask","com","回调","frame","bin","utf","日志","互相","用于","video","drawcontours","interface","color",")","opencv","255","contours","boundingrect","topic","'","消息","callback","示例"," ","np","detect","销毁","shutdown","publisher","python","及","imshow","to","import","进入","150","init","findcontours","将","并","0","主","list","xy","sub","颜色","计算","左上角","hsv","ros2","_","输出","array","自定义","www",",","self","模型","numpy","点画","env","webcam","父类","none","上限","waitkey","sensor","的","噪声","宽","位置","面积","创建","入口","imgmsg","/","in","objectx","下限","int","1","objectposition","image","转换","定义","转化","者","for","转化成","阈值","关闭","data","bridge","初始化","object","红色","得到","8","范围","发布","rclpy","函数","坐标","node","）","中","上角","5","目标","lower","<","使用","进行","!","cnt","receiving","去除","@","info","话题","position","main","和","objecty","提示","cv2","listener","，","h","化成","usr","(","class","def","古月","ros","高","128","super","像素","coding","logger","180","作者","approx","说明"],"title":"发布者接口调用","title_tokens":["调用","发布者","发布","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_15","text":"learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["learning",".","初始","信息","__","类型",":","等待","-","python3","类","guyuehome","x","字符","msgs","create","节点","=","名","长度","库","退出","\"","name","d","msg","destroy","订阅","接口","队列","*","一个","from","10","后","spin","对象","居","y","（","subscription","#","处理","字符串","、","get","args","py","循环","自定","com","回调","bin","utf","日志","数据","interface",")","subscribernode","topic","'","消息","callback","示例"," ","shutdown","销毁","python","import","init","并","主","sub","ros2","_","输出","自定义","www","\\",",","self","std","env","父类","none","的","位置","创建","入口","/","objectposition","定义","者","string","关闭","%","收到","初始化","object","8","rclpy","函数","node","执行","目标","进行","!","info","@","话题","position","main","提示","listener","，","usr","(","class","def","target","古月","super","coding","对","logger","作者","说明"],"title":"订阅者接口调用","title_tokens":["调用","订阅","者","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_16","text":"接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义","text_tokens":["接口定义","#","包中","$","：","list","常用","命令","如下","ros2",">","_","<","功能","的","查看","show","name","package","某个","详细","interface","列表","操作","系统","接口","定义"," "],"title":"接口命令行操作","title_tokens":["命令行","命令","操作","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_17","text":"https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["interfaces",".","org","html","and","docs",":","concepts","humble","about","-","en","use","https","tutorials","package","interface","/","ros","define","single"," "],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/","text":"动作 机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。 通信模型 举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。 客户端/服务器模型 动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。 一对多通信 和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。 同步通信 既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。 由服务和话题合成 大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。 案例一：小海龟的动作 我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback 案例二：机器人画圆 如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。 运行效果 启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。 接口定义 例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是动作的目标，enable为true时，表示开始运动； 第二块是动作的执行结果，finish为true，表示动作执行完成； 第三块是动作的周期反馈，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ... 通信模型 通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。 服务端代码解析 learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], }, 客户端代码解析 learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], }, 动作命令行操作 动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["指令","如何","代码",".","达到","__","rosidl","就","大家","小海龟","还","直接","小海","类","https","装","？","理解","有没有","时间","仅仅","参考","destroy","订阅","类似","一样","来","cmakelists","不","20","例程","一个","之前","封装","名字","既然","虽然","同时","编写","转个","rotate","py","add","命令行","终端","第二块","具体","解析","bin","第一","文件","utf","介绍","theta","臂","等","movecircleactionclient","moving","按照","callback","示例","shutdown","interfaces","识别","直到","拒绝执行","自动","通信","接口类型","主","目的","客户端","知道","都","干什么","1.57","转","某","模型","点","只能","两个","指定","位置","创建","海龟","default","以下","机器","入口","in","最终","开始","setup","txt","for","常常","接口定义","...","但","动图","初始化","这样","turtle1","8","其实","函数","node","概念","中","）","发送",">","当","底层","每","进行","话题","段时间","turtlesim","move","一次","生成","取消","例子","转圈","应用","作者","方法","第一块","包","之后","learning","}","初始","看到","server","由",":","起来","第三","如下","[","顺利","-","en","python3","到","异步","特性","现在","console","圆周","=","名","为","被","发现","机制","随时","30","看","后","对象","find","居","画圆","不仅仅","包含","#","机械","从","通过","理","结束","处理","、","抓取","args","成功","打开","回调","1s","interface",")","请","360","消息","一段时间","其"," ","假设","generators","负责","python","接口类","import","并","再","编译器","sleep","又","0.5","写","return","handle","智能","自定义","程序","父类","movecircle","流程","不同","链接","管理","实际","而是","这些","务器","turtle","动","需求","一套","到底","就此结束","不是","一段","关闭","type","接收","；","%","收到","没错","一","服务","understanding","通信模型","第二","rclpy","复杂","肯定","执行","当中","三块","这么","部分","分别","配置","info","隐藏","请求","response","接下来","分拣","每隔","，","服务端","def","系统","没有","也","对","client","过","姿态","信息","rejected","类型","表示","了","过程","：","那","等待","当前","只有","async","bool","能","publish","guyuehome","动作","哪里","用到","相对","得","不会","库","编程","会","\"","客户","下来","circle","二","实时","goal","{","一种","编译","发布者","10","真器","发送给","含义","告诉","if","html","是","是不是","docs","数据类型","not","设置","accepted","多个","自定","功能","一点","查看","package","result","'","actions","进度","上","竟然","发出","仿真","应带","旋转","标准","场景","init","range","处理函数","0","想","常用","命令","int32","像","模拟","ros2","_","这个","方式","进度条","才能","tutorials","多","enable","self","project","加入","读取","选项","再用","送给","--","/","基于","actionclient","先","一下","举个","让","---","多少度","org","data","简单","action","度","发布","坐标","模块","可能","humble","清楚","目标","teleop","运动","多少","rotateabsolute","获取","future","拒绝","某一","time","试一试","(","ros","super","原理","coding","接下","key","需要","actionserver","done","相比","通信接口","state","启动","效果","实现","分析","一对","有","便于","调用","仔细","针对","圈","可以","节点","控制","另外","语言","就此","退出","finish","name","d","某个","]","眼前","。","毕竟","呢","msg","接口","上边","*","遥控","整个","from","execute","spin","（","行为","feedback","机器人","希望","满足","应用层","在","还会","送餐","get","true","entry","加深","ok","很","控","反馈","循环","仿真器","com","是否","圆周运动","服务器","日志","数据","完成","但是","好","movecircleactionserver","scripts","状态","run","根据","不仅","销毁","这","一点一点","absolute","思路","什么","一起","list","导航","较长","同步","把","周期","输出","第三块","更为","www",",","env","所处","none","的","send","完整","publishing","根本","i","succeed","列表","服务器端","运行","我们","键盘","如果","定义","合成","者","案例","wait","一边","received","二块","就是","$","使","一块","这种","points","下","generate","<","使用","角度","!","@","秘密","main","和","—","送货","比如","required","合适","usr","class","背后","古月","时","操作","logger","三个","结果","说明"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_1","text":"机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。","text_tokens":["不仅","常常","识别","一种","含义","不仅仅","名字","行为","通信","简单","实现","场景","是","机器人","就","就是","并","满足","从","那","这种","在","便于","目的","复杂","、","送餐","概念","中","目标","这么","这个","智能","很","运动","进行","动作","可以","用到"," ","功能","另外","具体","上","理解","—","的","我们","流程","送货","被","分拣","某一","，","机制","会","机器","完整","仅仅","某个","等","好","管理","。","ros","系统","这些","也","对","需求","应用","键盘","一个","遥控","需要"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_2","text":"举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。","text_tokens":["之后","指令","信息","表示","就","了","过程","还","当前","到","装","？","现在","圈","哪里","动作","可以","得","有没有","机制","时间","随时","眼前","。","30","不","20","一个","10","后","告诉","行为","是","机器人","在","结束","、","ok","转个","控","反馈","一点","1s","完成","360","进度","一段时间"," ","假设","这","直到","发出","一点一点","通信","旋转","并","再","想","命令","把","像","知道","进度条","转","才能","更为","的","机器","根本","开始","到底","我们","如果","不是","一段","一下","举个","让","多少度","这样","度","肯定","执行","当中","发送","使用","运动","多少","段时间","比如","每隔","取消","，","合适","例子","没有","转圈","需要"],"title":"通信模型","title_tokens":["通信","模型","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_3","text":"动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。","text_tokens":["之后","后","让","姿态","就此结束","收到","达到","一边","信息","通信","是","机器人","就","机械","过程","什么","再","服务","同时","想","导航","又","结束","客户端","坐标","当前","起来","可能","执行","周期","中","抓取","发送","目标","这个","干什么","当","使用","反馈","运动","动作","模型","控制","所处","和","的","服务器","就此","，","臂","客户","机器","。","务器","类似","实时","也","服务器端","状态","动","开始","一个","如果","整个"," "],"title":"客户端/服务器模型","title_tokens":["客户","客户端","/","模型","务器","服务器","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_4","text":"和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。","text_tokens":["先","通信","机器人","大家","有","服务","命令","客户端","中","执行","下","发送","只有","都","才能","运动","多个","动作","可以","只能","和","的","服务器","，","客户","但是","机器","完成","毕竟","。","务器","一样","服务器端","一个"],"title":"一对多通信","title_tokens":["通信","一对","多"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_5","text":"既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。","text_tokens":["之前","通信接口",".","通信","既然","是","action","过程","有","那","同步","中","使用","反馈","进行","动作","的","文件","介绍","，","机制","数据","定义","。","接口","也","我们","一种","过"],"title":"同步通信","title_tokens":["通信","同步"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_6","text":"大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。","text_tokens":["不是","一种","竟然","收到","应带","通信","没错","动图","表示","实现","是","大家","就是","过程","是不是","再","有","服务","应用层","命令","其实","还会","客户端","发布","模块","下","周期","调用","发送","仔细","当","目标","其","底层","使用","反馈","运动","动作","秘密","话题","隐藏","请求","和","两个","的","服务器","发现","，","会","机制","客户","。","时","订阅","者","务器","来","基于","也","三个","上边","服务器端","应用","一个","发布者"," ","看"],"title":"由服务和话题合成","title_tokens":["话题","和","由","合成","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_7","text":"我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback","text_tokens":["}","让","姿态","案例","仿真","启动","feedback","一","absolute","action","$","：","小海龟","turtle1","命令",":","node","小海","概念","ros2","-","加深","_","到","rotate","1.57","使用","teleop","运动","rotateabsolute","动作","某","可以","仿真器","info","控制","理解","turtlesim","的","send","接下来","指定","，","再用","海龟","theta","以下","\"","--","下来","/","。","按照","turtle","对","接下","run","key","goal","我们","{"," ","真器"],"title":"案例一：小海龟的动作","title_tokens":["小海龟","海龟","动作","案例","小海","一","的","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_8","text":"如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。","text_tokens":["如何","假设","让","封装","代码","但","通信","实现","是","就","机器人","希望","过程","并","虽然","服务","有","通过","一起","在","直接","客户端","中","针对","转个","？","使用","特性","圈","动作","话题","和","的","不会","服务器","接下来","，","编程","试一试","实际","而是","下来","一个","好","机器","客户","。","呢","接口","来","基于","务器","请","接下","服务器端","一套","我们","方法"," "],"title":"案例二：机器人画圆","title_tokens":["机器","案例","二","画圆","机器人","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_9","text":"启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。","text_tokens":["之后","learning","一下","信息","看到","启动","分析","实现","就","机器人","server","action","$","并","：","服务","命令","度","结束","客户端","中","模拟","下","ros2","发送","_","目标","这个","每","反馈","分别","运动","动作","可以","终端","和","两个","move","一次","的","服务器","接下来","，","服务端","例程","客户","机器","完成","下来","背后","。","务器","30","最终","原理","服务器端","运行","run","client","开始","我们","示例","接下"," "],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_10","text":"例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是动作的目标，enable为true时，表示开始运动； 第二块是动作的执行结果，finish为true，表示动作执行完成； 第三块是动作的周期反馈，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ...","text_tokens":["learning","指令","}","代码",".","state","rosidl","表示","过程","：","还","当前","第三","到","bool","动作","为","语言","finish","\"","name","需要","。","接口","cmakelists","{","例程","编译","后","find","包含","是","#","机器人","通过","在","true","成功","反馈","自定","第二块","功能","是否","第一","完成","package","interface",")","根据"," ","generators","interfaces","自动","旋转","标准","并","编译器","int32","周期","_","第三块","自定义","enable","project","movecircle","的","位置","选项","不同","default","机器","/","开始","txt","我们","定义","不是","让","---","；","接口定义","...","二块","action","$","一块","第二","中","执行","generate","目标","三块","使用","部分","进行","运动","角度","配置","生成","required","，","(","时","ros","三个","结果","第一块","包"],"title":"接口定义","title_tokens":["定义","接口定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_11","text":"通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。","text_tokens":["后","之前","发送给","一下","相比","代码","信息","通信","一","分析","思路","机器人","就是","并","服务","这样","理","通信模型","结束","较长","客户端","起来","周期","写","发送","清楚","目标","反馈","运动","程序","动作","模型","话题","控制","相对","和","的","我们","服务器","接下来","，","送给","客户","机器","下来","。","务器","接下","开始","运行","例程","一个"," "],"title":"通信模型","title_tokens":["通信","模型","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_12","text":"learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["之后","learning","}","代码",".","初始","信息","__","state","类型","表示","server","：",":","等待","当前","如下","[","-","python3","类","到","publish","guyuehome","console","动作","圆周","节点","=","名","库","退出","finish","\"","name","d","需要","]","circle","msg","destroy","接口","30","*","goal","{","一个","编译","execute","from","后","spin","对象","居","（","feedback","#","从","处理","、","get","args","true","成功","设置","entry","编写","反馈","py","循环","自定","打开","功能","com","圆周运动","回调","bin","utf","服务器","文件","完成","interface",")","movecircleactionserver","moving","scripts","result","'","callback","消息","示例","360"," ","shutdown","销毁","负责","包","python","接口类","import","init","range","接口类型","处理函数","0","并","sleep","主","0.5","周期","ros2","return","知道","_","handle","自定义","www","程序",",","self","env","父类","点","加入","movecircle","none","的","选项","创建","publishing","入口","/","i","in","succeed","务器","最终","setup","定义","for","关闭","让","%","收到","...","初始化","action","服务","8","度","points","发布","rclpy","函数","node","执行","）","目标","运动","进行","!","角度","配置","info","@","main","move","time","，","服务端","usr","(","class","def","古月","系统","super","coding","logger","作者","结果","说明","actionserver"],"title":"服务端代码解析","title_tokens":["服务端","代码","解析","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_13","text":"learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["之后","learning","done","}","代码",".","初始","rejected","__","启动","state","类型","server","：",":","等待","如下","[","顺利","-","python3","类","能","async","异步","guyuehome","console","动作","圆周","节点","=","名","为","被","库","退出","finish","\"","name","客户","d","需要","]","circle","msg","destroy","接口","*","goal","{","一个","编译","from","后","spin","对象","居","if","（","feedback","#","希望","机器人","处理","、","not","get","args","设置","true","entry","编写","accepted","反馈","py","循环","add","自定","打开","功能","com","圆周运动","回调","bin","utf","服务器","日志","文件","数据","完成","interface",")","movecircleactionclient","scripts","result","'","消息","callback","示例"," ","shutdown","销毁","拒绝执行","包","python","接口类","import","init","并","接口类型","主","客户端","周期","ros2","return","知道","_","方式","handle","输出","自定义","www","程序",",","self","enable","env","父类","点","加入","movecircle","none","的","send","读取","选项","创建","机器","入口","/","务器","最终","服务器端","开始","setup","定义","如果","for","actionclient","关闭","让","接收","%","wait","收到","received","初始化","action","使","服务","8","points","rclpy","函数","node","执行","）","发送","目标","运动","进行","!","配置","info","@","future","获取","拒绝","请求","main","move","response","，","usr","(","class","def","古月","时","系统","super","coding","logger","client","作者","结果","说明"],"title":"客户端代码解析","title_tokens":["代码","解析","客户","客户端"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_14","text":"动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求","text_tokens":["type","data","类型","#","action","$","：","服务","list","常用","命令","数据类型","如下","ros2",">","_","<","发送","动作","info","请求","的","send","查看","数据","name","列表","操作","goal"," "],"title":"动作命令行操作","title_tokens":["动作","命令行","命令","操作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["docs","tutorials","understanding",":","/",".","org","ros","humble","ros2","-","html","en","actions","https"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/","text":"参数 话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。 通信模型 比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。 全局字典 在ROS系统中，参数是以全局字典的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。 可动态监控 在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。 案例一：小海龟例程中的参数 在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 参数列表 参数查询与修改 $ ros2 param describe turtlesim background_b $ ros2 param get turtlesim background_b $ ros2 param set turtlesim background_b 10 参数文件保存与加载 $ ros2 param dump turtlesim >> turtlesim.yaml $ ros2 param load turtlesim turtlesim.yaml 案例二：参数编程 接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。 运行效果 $ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle 代码解析 learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], }, 案例三：机器视觉应用 参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。 运行效果 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180 代码解析 learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["如何","raw","代码",".","曝光","__","mbot","就","大家","robot","小海龟","还","小海","跟","查询","类","苹果","默认值","https","？","已","即可","共享","图像识别","很大","理解","长度","大大","监控","参考","destroy","订阅","来","类似","一样","队列","不","继续","例程","一个","img","bgr2hsv","检测","叫","y","bgr8","subscription","中心","比较","存在","nodea","as","编写","py","提炼","左上","命令行","mask","解析","bin","utf","文件","介绍","立刻","等","传输","callback","示例","shutdown","时候","识别","访问","set","及","等等","通信","findcontours","主","左上角","计算","物体","知道","都","或者","一两句","某","模型","点画","点","waitkey","sensor","视觉","指定","创建","海龟","机器","入口","in","值","字典","开始","默认","setup","image","for","转化成","bridge","初始化","丰富","load","8","函数","node","中","）",">","发送","lower","不少","进行","真实","话题","单位","turtlesim","高级","每次","化成","h","么","dump","parameter","应用","作者","方法","三","包","learning","}","麻烦","初始","2","由","图像",":","起来","如下","[","了解","与","-","cvtcolor","python3","到","en","特性","修改","熟悉","console","msgs","很多","=","名","数值","作用","为","机制","bgr","看","continue","后","对象","居","所在","red","#","retr","从","通过","处理","、","chain","太小","args","哪个","三种","50","打开","cv","核心","端口","回调","video","挺",")","形态","contours","消息","b"," ","编码","python","最新","import","再","并","然后","sub","颜色","写","usb","易用","程序","美颜","父类","宽","不同","链接","imgmsg","保存","这些","turtle","以","不是","阈值","那个","type","关闭","%","一","object","得到","服务","understanding","通信模型","范围","rclpy","执行","上角","部分","分别","配置","info","去除","cv2","listener","接下来","，","就要","def","高","系统","像素","一两","也","对","组成","approx","s","输入","信息","类型","表示","了","过程","：","节","等待","其他","guyuehome","x","提供","一些","动作","create","+","用到","优化","库","编程","名称","会","\"","下来","circle","二","{","describe","条","parameternode","一种","declare","编译","10","真器","发送给","含义","if","勾勒","某些","background","html","是","关注","docs","敏感","图像处理","二值化","设置","yaml","90","变量","hello","多个","upper","功能","重新","互相","用于","相机","分辨","255","成","'","大大提高","detect","np","仿真","to","可","init","传输方式","0","影响","常用","命令","办法","提高","像","ros2","环境","_","方式","这个","加载","tutorials","self","numpy","加入","上限","面积","读取","送给","选项","/","int","1","转换","体验","参数值","先","一下","让","秒","org","定时","data","简单","红色","本","考虑","度","从而","坐标","可能","humble","清楚","目标","teleop","键值","多少","获取","全局变量","格式","(","ros","super","128","coding","key","接下","180","需要","效果","实现","hierarchy","w","integer","有","后边","便于","两句","显示","问题","滑动","参数","驱动","分辨率","辨率","imagesubscriber","可以","节点","改变","退出","name","d","]","msg","。","呢","接口","*","整个","from","几个","spin","叫做","（","打印","机器人","nodeb","inrange","在","已经","get","轮廓","连接","出来","entry","shape","循环","输入框","param","仿真器","cvbridge","com","是否","键和值","来看","exe","frame","日志","数据","完成","比较简单","drawcontours","color","opencv","scripts","boundingrect","run","配置文件","销毁","这","imshow","进入","150","什么","将","list","xy","动态","把","周期","hsv","输出","new","array","变化","www",",","timer","env","none","的","噪声","定时器","列表","光线","下限","运行","转化","我们","合成","如果","者","string","案例","c++","就是","$","参数设置","全局","points","区域","value","下","cam","易用性","5","<","号","使用","不如","!","cnt","receiving","@","main","和","说干就干","—","提示","parameters","比如","非常","all","usr","class","古月","logger","说明"],"title":"**参数**","title_tokens":["参数","*"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_1","text":"话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。","text_tokens":["这","c++","通信","某些","是","机器人","大家","再","传输方式","本","服务","节","常用","已经","全局","便于","在","、","中","了解","知道","清楚","方式","三种","参数","变量","程序","多个","动作","全局变量","话题","可以","共享","节点","是否","—","的","介绍","，","编程","机制","数据","机器","。","ros","系统","传输","来","类似","字典","运行","不","我们","一种"," "],"title":"参数","title_tokens":["参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_2","text":"比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。","text_tokens":["曝光","输入","效果","就","图像","过程","有","问题","滑动","到","参数","驱动","分辨率","辨率","一些","很多","可以","节点","图像识别","很大","作用","改变","会","。","一样","条","整个","后","是","关注","nodeb","通过","在","nodea","连接","哪个","设置","输入框","核心","功能","端口","是否","文件","相机","分辨","配置文件"," ","时候","识别","这","编码","等等","什么","影响","像","都","usb","或者","程序","美颜","的","视觉","面积","不同","机器","这些","我们","阈值","那个","就是","参数设置","考虑","度","区域","中","执行","使用","部分","分别","进行","多少","配置","和","格式","比如","，","也","需要"],"title":"通信模型","title_tokens":["通信","模型","通信模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_3","text":"在ROS系统中，参数是以全局字典的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。","text_tokens":["参数值","时候","叫","访问","叫做","是","就","由","就是","了","什么","有","后边","然后","在","全局","存在","合成","跟","中","像","这个","参数","？","或者","号","使用","键值","即可","真实","可以","名","和","数值","键和值","理解","的","为","，","名称","编程","等","。","ros","系统","一样","字典","形态","也","我们","一个","组成","以"," "],"title":"全局字典","title_tokens":["字典","全局"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_4","text":"在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。","text_tokens":["这","访问","最新","丰富","大家","了","有","在","办法","从而","可能","中","ros2","其他","知道","都","参数","特性","进行","修改","某","获取","可以","节点","用到","共享","数值","的","高级","比如","，","编程","非常","立刻","会","。","也","对","一个","如果"," "],"title":"可动态监控","title_tokens":["动态","监控","可"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_5","text":"在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["含义","仿真","一","了","$","小海龟","通过","在","命令","node","小海","起来","中","下","ros2","_","这个","参数","不少","使用","teleop","熟悉","提供","命令行","仿真器","和","turtlesim","的","我们","，","海龟","。","turtle","也","run","key","例程","方法"," ","真器"],"title":"案例一：小海龟例程中的参数","title_tokens":["小海龟","海龟","案例","小海","中","一","的","例程","参数","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_6","text":"","text_tokens":[],"title":"参数列表","title_tokens":["参数","列表"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_7","text":"$ ros2 param describe turtlesim background_b $ ros2 param get turtlesim background_b $ ros2 param set turtlesim background_b 10","text_tokens":["set","param","get","background","ros2","turtlesim","describe","_","10","$"," ","b"],"title":"参数查询与修改","title_tokens":["参数","与","修改","查询"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_8","text":"$ ros2 param dump turtlesim >> turtlesim.yaml $ ros2 param load turtlesim turtlesim.yaml","text_tokens":["load","param",".","dump","ros2","turtlesim",">","yaml","$"," "],"title":"参数文件保存与加载","title_tokens":["保存","与","参数","文件","加载"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_9","text":"接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。","text_tokens":["几个","先","一下","这","简单","实现","就","了","比较","在","函数","两句","中","写","设置","都","参数","一两句","使用","程序","可以","和","的","接下来","读取","，","就要","下来","比较简单","。","来","一两","接下","开始","我们","方法","体验"],"title":"案例二：参数编程","title_tokens":["案例","二","参数","：","编程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_10","text":"$ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle","text_tokens":["learning","name","set","param","declare","turtle","parameter","ros2","run","_","robot","$"," "],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_11","text":"learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], },","text_tokens":["learning","}","代码",".","初始","s","信息","__","2","mbot","robot","：",":","等待","如下","[","-","python3","类","参数","默认值","到","guyuehome","修改","create","console","节点","=","数值","为","库","退出","\"","name","]","需要","destroy","接口","*","{","parameternode","一个","declare","编译","from","后","spin","对象","发送给","居","（","打印","#","从","、","get","args","设置","entry","编写","py","循环","hello","param","打开","功能","com","回调","bin","utf","日志","重新","文件","完成",")","scripts","'","callback","示例"," ","shutdown","销毁","包","set","python","import","init","并","将","主","周期","ros2","知道","_","输出","new","www","程序",",","timer","self","env","父类","点","加入","none","的","读取","指定","创建","送给","选项","入口","定时器","/","列表","值","默认","setup","string","参数值","关闭","type","让","秒","%","定时","初始化","8","points","rclpy","函数","value","node","执行","）","中","发送","进行","!","配置","info","@","main","单位","parameters","，","all","usr","(","class","def","古月","系统","super","parameter","coding","logger","作者","说明"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_12","text":"参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。","text_tokens":["不是","先","如何","识别","阈值","麻烦","代码","效果","是","机器人","大家","就","了","比较","过程","再","大大提高","敏感","在","已经","还","动态","把","提高","中","下","易用性","物体","设置","环境","参数","变化","？","使用","不如","易用","修改","程序","提炼","可以","优化","说干就干","来看","的","视觉","每次","，","不同","会","大大","机器","挺","么","。","呢","光线","成","也","对","运行","应用","继续","我们","示例"," ","看"],"title":"案例三：机器视觉应用","title_tokens":["机器","案例","应用","视觉","三","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_13","text":"$ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180","text_tokens":["detect","learning","set","red","object","$","node","cam","ros2","_","usb","param","upper","exe","h","parameter","run","180"," "],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_14","text":"learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], },","text_tokens":["learning","}","raw","代码",".","初始","信息","__","2","效果","类型","表示","hierarchy","w","图像","integer","：",":","等待","显示","如下","[","-","与","cvtcolor","python3","类","参数","到","苹果","guyuehome","x","已","imagesubscriber","msgs","create","一些","console","节点","+","=","名","数值","为","长度","库","退出","\"","name","d","]","需要","circle","msg","destroy","订阅","接口","队列","bgr","*","{","一个","declare","img","编译","from","10","bgr2hsv","检测","continue","对象","后","居","spin","y","if","red","（","所在","勾勒","bgr8","subscription","中心","打印","#","inrange","retr","从","通过","处理","、","get","chain","图像处理","二值化","as","设置","轮廓","太小","出来","args","编写","entry","90","shape","py","循环","50","左上","param","打开","upper","cv","cvbridge","功能","mask","com","回调","frame","bin","utf","日志","文件","互相","用于","完成","video","drawcontours","color",")","opencv","255","contours","scripts","boundingrect","'","消息","callback","示例"," ","detect","np","销毁","shutdown","识别","包","python","及","imshow","to","import","进入","150","init","findcontours","将","并","0","主","list","xy","sub","颜色","计算","左上角","hsv","ros2","知道","_","输出","array","www","程序",",","self","模型","numpy","点画","env","父类","点","加入","none","上限","waitkey","的","sensor","噪声","宽","读取","面积","创建","选项","入口","imgmsg","/","in","下限","int","1","image","转换","转化","setup","者","for","参数值","转化成","阈值","关闭","让","%","data","bridge","初始化","object","红色","得到","8","points","范围","rclpy","函数","value","node","坐标","）","中","上角","5","目标","lower","<","使用","进行","!","cnt","receiving","info","@","去除","话题","配置","main","和","提示","cv2","listener","，","h","化成","usr","(","class","def","古月","ros","高","系统","128","super","像素","parameter","coding","logger","180","作者","approx","说明"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["docs","tutorials","understanding",":","/",".","org","ros","humble","ros2","-","html","en","parameters","https"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/","text":"分布式通信 智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统，可以实现多计算平台上的任务分配。 分布式通信 什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。 分布式网络搭建 除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。 树莓派配置 在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。 装系统 我们先要给树莓派装系统，这里我们选择的是Ubuntu Mate针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/ 装ROS2 在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。 编译代码 将我们课程的代码也下载到树莓派中，进行编译。 远程桌面 如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728 分布式数据传输 树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 * 如使用虚拟机，请将虚拟机网络修改为桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。 分布式网络分组 没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。 案例一：小海龟分布式控制 分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动。 $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端 案例二：话题分布式通信 我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串。 $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端 案例三：服务分布式通信 话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能。 案例四：机器视觉分布式应用 以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体。 $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。 参考链接 https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["学习","代码",".","放在","系列","就","cpp","大家","开发","桌面","小海龟","而言","还","除了","直接","小海","发生","https","装","？","资料","做","即可","字符","pc","控制器","树莓","安排","qq","监控","参考","订阅","一样","类似","来","不","讲过","继续","一个","例程","叫","之前","比较","网络","concepts","编写","镜像","py","我","互通","命令行","两者","分配","具体","服务器程序","等","一系列","传输","笔记本","于是","出现","经常","访问","识别","下载","通信","计算","这里","客户端","物体","都","world","helloworld","平台","或者","发给","两个","一系","视觉","海龟","机器","分组","笔记","频繁","设计","小组","放置","数据传输","个","这样","简而言之","node","结构","中","较",">","真有","整体","每","进行","话题","更强","turtlesim","一致","看上去","blog","122599728","情况","讲","应用","方法","三","之后","learning","作为","布式","卡顿","由","图像","分布式系统",":","摄像","起来","如下","流畅","顺利","-","about","en","到","搭建","以上","修改","端的","采集","很多","依然","=","为","桥接","机制","支持","sd","分布式","如此","后","互联","#","net","减轻","pub","通过","处理","字符串","、","遇到","article","成功","所","小","电脑","之间","各种","魅力","挺","无法","请"," ","打通","并","再","然后","sub","分布","智能","usb","程序","csdn","派装","局域网络","流程","测试","派端","不同","链接","而是","端","实际","试试","这些","务器","your","计算机","turtle","mate","看上","不是","相互","一","不在话下","服务","主要","加法","复杂","的话","export","这么","任务","放","配置","只要","listener","接下来","，","感受","系统","几乎","没有","也","组成","过","并且","信息","性能","了","给","：","有点","步骤","提供","一些","动作","用到","显示器","同一个","你","确保","啦","会","不过","客户","下来","二","里","实时","带来","编译","发布者","真器","nodes","html","是","talker","docs","demo","id","不够","适合","hello","多个","小型","功能","基本一致","一切","反过来","款","上","友好","局域","仿真","任务分配","笔记本电脑","domain","想","命令","模拟","像","安装","ros2","环境","_","上去","才能","多","求和","局域网","资源","webcam","加入","过来","原本","处于","虚拟","/","能力","完全","采用","客户端程序","岂","先","一下","此外","org","算机","只","先要","红色","轻松","压力","中有","变得","鼠标","发布","全都","可能","humble","他们","teleop","远程","似乎","运动","神奇","虚拟机","52785580","带领","ros","派","接下","key","需要","模式","任何","启动","效果","实现","有","同一","传感","显示","问题","针对","驱动","繁多","可以","节点","控制","框架","另外","一句","。","毕竟","呢","网上","感器","上边","*","如","电机","分布式应用","机器人","希望","事情","则","建立","在","已经","bashrc","连接","传感器","像头","download","仿真器","是否","exe","服务器","数据","派里","完成","好","用","run","选择","这","拆解","将","什么","体积","基本","摄像头","烧写","变化","之外","的","卡中","位于","运行","我们","方便","如果","ubuntu","键盘","details","者","顺利实现","之一","据传","案例","还是","计算能力","就是","$","这种","经典","下","cam","消耗","<","反过","使用","四","典型","和","—","比如","课程","非常","感觉","远程桌面","操作","没","不在","topic"],"title":"**分布式通信**","title_tokens":["布式","分布","通信","*","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_1","text":"智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统，可以实现多计算平台上的任务分配。","text_tokens":["岂","不是","经常","这","拆解","布式","放在","算机","计算能力","任务分配","实现","机器人","卡顿","就是","将","压力","减轻","分布式系统","处理","全都","计算","、","遇到","出现","中","分布","到","不够","智能","任务","？","平台","繁多","多","多个","可以","分配","功能","的","，","会","机器","等","。","能力","里","情况","这些","系统","计算机","运行","分布式","一个","如果","上"," "],"title":"分布式通信","title_tokens":["通信","分布式","布式","分布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_2","text":"什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。","text_tokens":["作为","布式","任何","放在","信息","实现","性能","就","大家","由","了","开发","有","传感","还","分布式系统","起来","有点","到","驱动","？","做","可以","节点","控制","框架","控制器","树莓","另外","为","不过","监控","下来","。","毕竟","感器","上边","不","分布式","一个","叫","之前","过","电机","是","机器人","比较","减轻","在","已经","处理","传感器","适合","分配","功能","小","电脑","之间","各种","数据","派里","魅力","等","挺","好","传输","于是","笔记本","款","上"," ","这","通信","笔记本电脑","什么","将","体积","计算","环境","分布","都","上去","平台","变化","多","资源","两个","原本","的","视觉","不同","机器","这些","位于","笔记","采用","计算机","完全","设计","运行","我们","方便","看上","之一","此外","相互","算机","只","一","就是","压力","主要","这种","复杂","可能","中","结构","下","消耗","较","任务","远程","每","放","运动","配置","更强","典型","和","带领","比如","接下来","，","看上去","非常","感受","ros","系统","讲","派","也","接下","应用","组成","需要","并且"],"title":"分布式通信","title_tokens":["通信","分布式","布式","分布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_3","text":"除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。","text_tokens":["放置","笔记本电脑","机器人","了","除了","在","计算","模拟","平台","使用","我","之外","控制","另外","控制器","树莓","的","电脑","，","机器","。","笔记","派","笔记本","我们","一个","上","选择"],"title":"分布式网络搭建","title_tokens":["网络","布式","分布","分布式","搭建"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_4","text":"在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。","text_tokens":["先","之前","大家","开发","有","在","环境","都","资料","配置","很多","可以","树莓","的","，","好","参考","。","网上","派","也","我们","需要"],"title":"树莓派配置","title_tokens":["配置","派","树莓"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_5","text":"我们先要给树莓派装系统，这里我们选择的是Ubuntu Mate针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/","text_tokens":["之后",".","org","下载","启动","先要","是","就","了","给","：",":","这里","选择","烧写","-","针对","到","https","镜像","download","可以","派装","树莓","的","卡中","，","链接","/","。","系统","sd","派","我们","mate","ubuntu"," "],"title":"装系统","title_tokens":["装","系统"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#ros2","text":"在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。","text_tokens":["在","端","好","。","系统","中","一样","安装","流程","ros2","和","的","mate","电脑","ubuntu"," ","，"],"title":"装ROS2","title_tokens":["ros2","装"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_6","text":"将我们课程的代码也下载到树莓派中，进行编译。","text_tokens":["进行","将","代码","。","下载","中","到","派","也","树莓","的","我们","编译","课程","，"],"title":"编译代码","title_tokens":["编译","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_7","text":"如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728","text_tokens":["访问",".","就","大家","方便","了","net","有","：","桌面","通过","鼠标","在","网络","基本",":","直接","details","显示","如下","article","连接","的话","_","以上","整体","https","使用","远程","步骤","配置","csdn","可以","52785580","树莓","显示器","和","一致","的","流程","基本一致","电脑","，","链接","blog","qq","端","好","参考","/","。","122599728","远程桌面","系统","操作","派","也","不","键盘","如果","上"," "],"title":"远程桌面","title_tokens":["远程","远程桌面","桌面"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_8","text":"树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 * 如使用虚拟机，请将虚拟机网络修改为桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。","text_tokens":["模式","启动","效果","实现","就","cpp","了","：","同一","而言","直接","如下","发生","问题","到","？","做","修改","pc","动作","很多","可以","节点","树莓","同一个","你","为","桥接","确保","会","不过","下来","。","订阅","呢","里","一样","*","不","带来","讲过","一个","发布者","如","后","之前","互联","nodes","是","#","希望","事情","talker","网络","在","已经","、","demo","连接","py","所","命令行","互通","具体","电脑","之间","完成","等","好","无法","用","请","run"," ","这","打通","局域","通信","什么","将","并","命令","计算","像","安装","ros2","_","都","平台","局域网","局域网络","两个","处于","的","测试","派端","虚拟","而是","端","分组","能力","计算机","我们","如果","者","小组","一下","算机","$","个","服务","中有","这样","发布","简而言之","中","他们","使用","神奇","配置","虚拟机","话题","只要","和","listener","接下来","，","感觉","派","也","接下","需要","并且"],"title":"分布式数据传输","title_tokens":["数据","布式","据传","数据传输","分布","传输","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_9","text":"没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。","text_tokens":["小组",".","算机","通信","实现","domain","就","了","将","：","则","同一","这样","在","bashrc","计算","中","id","ros2","问题","export","_","到","<",">","才能","端的","即可","提供","配置","可以","两者","分配","=","树莓","和","同一个","处于","加入","的","电脑","一句","，","不同","机制","分组","。","ros","无法","类似","一样","计算机","没","派","your","我们","一个","如果"," "],"title":"分布式网络分组","title_tokens":["网络","布式","分组","分布","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_10","text":"分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动。 $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端","text_tokens":["先","之前","布式","学习","案例","仿真","启动","通信","#","了","$","建立","小海龟","想","网络","在","已经","经典","node","小海","中","流畅","成功","ros2","分布","反过","真有","这么","_","或者","teleop","似乎","神奇","运动","一些","pc","可以","仿真器","节点","控制","依然","树莓","是否","过来","—","turtlesim","的","测试","键盘","电脑","派端","，","例程","海龟","端","反过来","。","试试","ros","来","派","也","turtle","run","key","分布式","继续","我们","过","上"," ","真器"],"title":"案例一：小海龟分布式控制","title_tokens":["小海龟","海龟","布式","分布式","案例","小海","控制","一","分布","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_11","text":"我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串。 $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端","text_tokens":["learning","先","之前","作为","任何","代码","通信","#","$","pub","在","sub","发布","直接","字符串","下","ros2","_","编写","world","helloworld","？","使用","修改","hello","字符","pc","可以","话题","树莓","是否","的","我们","电脑","派端","，","端","。","订阅","情况","呢","试试","者","派","run","不","topic","例程","发布者"," "],"title":"案例二：话题分布式通信","title_tokens":["布式","分布式","案例","二","话题","通信","分布","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_12","text":"话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能。","text_tokens":["顺利实现","还是","实现","不在话下","服务","加法","客户端","顺利","问题","程序","求和","可以","话题","功能","树莓","服务器程序","服务器","电脑","派端","，","客户","端","。","务器","没有","也","运行","我们","不在"," ","客户端程序"],"title":"案例三：服务分布式通信","title_tokens":["布式","分布式","案例","通信","分布","三","：","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_13","text":"以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体。 $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。","text_tokens":["learning","布式","任何","系列","代码","开发","图像","了","还","摄像","问题","以上","搭建","？","做","修改","端的","提供","采集","pc","可以","节点","用到","树莓","安排","为","啦","会","下来","需要","。","支持","类似","实时","不","分布式","例程","一个","如此","机器人","#","通过","网络","在","处理","连接","不够","像头","小型","功能","exe","电脑","一切","好","一系列","run","上"," ","识别","友好","将","再","然后","sub","摄像头","模拟","物体","ros2","分布","_","都","usb","发给","webcam","的","视觉","测试","一系","派端","机器","端","实际","这些","频繁","我们","红色","轻松","$","变得","复杂","node","中","cam","使用","配置","只要","接下来","，","非常","ros","系统","几乎","派","没","没有","接下","也","方法","topic"],"title":"案例四：机器视觉分布式应用","title_tokens":["应用","机器","布式","分布式","四","案例","分布式应用","分布","视觉","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_14","text":"https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["docs",":","/",".","org","ros","concepts","humble","id","about","-","en","domain","html","https"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2_%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/","text":"从本节开始，我们将进入第二个篇章，以ROS2的核心概念为线索，详细讲解ROS2的应用开发方法。","text_tokens":["篇章","进入","开发","将","第二","概念","本节","ros2","从本节","第二个","线索","二个","核心","讲解","为","的","，","开发方法","详细","。","开始","应用","我们","方法","以"],"title":"2 核心概念","title_tokens":["2","概念"," ","核心"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/","text":"Launch：多节点启动与配置脚本 到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是Launch启动文件。 它是ROS系统中多节点启动与配置的一种脚本。 Launch文件 这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。 多节点启动 运行效果 文件解析 learning_launch/simple.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'learning_topic' , executable = 'topic_helloworld_pub' , ), Node ( package = 'learning_topic' , executable = 'topic_helloworld_sub' , ), ]) 命令行参数配置 运行效果 文件解析 learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): rviz_config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ Node ( package = 'rviz2' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' , rviz_config ] ) ]) 资源重映射 运行效果 文件解析 learning_launch/remapping.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , namespace = 'turtlesim2' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , executable = 'mimic' , name = 'mimic' , remappings = [ ( '/input/pose' , '/turtlesim1/turtle1/pose' ), ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), ] ) ]) ROS参数设置 运行效果 文件解析 learning_launch/parameters.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node def generate_launch_description (): background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) ) return LaunchDescription ([ background_r_launch_arg , background_g_launch_arg , background_b_launch_arg , Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [{ 'background_r' : LaunchConfiguration ( 'background_r' ), 'background_g' : LaunchConfiguration ( 'background_g' ), 'background_b' : LaunchConfiguration ( 'background_b' ), }] ), ]) learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , namespace = 'turtlesim2' , name = 'sim' , parameters = [ config ] ) ]) Launch文件包含 运行效果 文件解析 learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction from launch_ros.actions import PushRosNamespace def generate_launch_description (): parameter_yaml = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ parameter_yaml_with_namespace ]) learning_launch/parameters_nonamespace.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [ config ] ) ]) 功能包编译配置 ... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ... 参考链接 https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docsros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["所有","learning","如何","麻烦","path","}","arguments","代码","各个","系列",".","输入","启动","中多","效果","pose","就","大家","large","了","过程","：","甚至","output","那","还",":","pushrosnamespace","glob","粘合","[","了解","与","-","namespace","en","到","参数","它","remappings","https","？","nonamespace","很多","可以","节点","相当","+","组装","=","launchdescription","text","84","编程","大大","有没有","name","d","]","一次性","arg","参考","。","呢","sim","类似","一样","来","pythonlaunchdescriptionsource","{","*","映射","例程","一种","一个","编译","from","ament","config","background","包含","是","机器人","html","projects","模版","pub","通过","docs","在","simple","packages","files","get","sources","设置","为止","编写","directory","自由","yaml","launchconfiguration","textsubstitution","py","命令行","with","打开","终端","核心","功能","解析","文件","remapping","turtlesim1","当然","各种","脚本","package","rviz2","好","一系列",")","topic","'","actions","出现","合剂","b"," ","多样化","包","之高","阅读","python","rviz","import","前为","0","命令","sub","目的","turtlesim2","好像","像","xml","ros2","return","input","_","方式","都","答案","helloworld","上去","重","或者","index","r","tutorials","多",",","乍","g","os","呀","资源","的","一系","链接","default","launch","机器","完整","/","groupaction","join","基于","turtle","运行","目前为止","我们","cmd","docsros","for","看上","每当","这是","mimic","多样","executable","vel","using","org","...","data","没错","丰富","substitutions","目前","share","122","就是","resource","粘合剂","描述","新","这样","turtle1","参数设置","includelaunchdescription","肯定","node","description","value","原有","中","humble","generate","使用","declarelaunchargument","进行","配置","main","和","turtlesim","一次","带领","parameters","namespaces","每次","，","看上去","(","def","ros","系统","没有","也","parameter","频次","需要"],"title":"**Launch：多节点启动与配置脚本**","title_tokens":["launch","脚本","多","配置","节点","启动","*","与","："]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch","text":"到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是Launch启动文件。 它是ROS系统中多节点启动与配置的一种脚本。","text_tokens":["每当","所有","麻烦","一种","启动","中多","目前","前为","机器人","是","就是","新","这样","那","命令","肯定","中","与","为止","方式","都","到","答案","它","？","配置","很多","可以","节点","打开","呀","终端"," ","一次","的","文件","每次","，","有没有","当然","launch","机器","脚本","一次性","好","。","ros","系统","呢","没有","运行","目前为止","我们","一个","需要"],"title":"Launch：多节点启动与配置脚本","title_tokens":["launch","脚本","多","配置","节点","启动","与","："]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_1","text":"这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。","text_tokens":["如何","代码","各个","系列","输入","启动","就","大家","了","过程","甚至","那","还","粘合","了解","参数","它","很多","可以","节点","相当","组装","编程","大大","。","呢","类似","一样","来","例程","一个","是","模版","通过","在","编写","自由","命令行","核心","功能","文件","各种","一系列","出现","合剂"," ","多样化","之高","阅读","python","命令","目的","好像","像","ros2","上去","或者","乍","呀","的","一系","launch","完整","基于","我们","看上","这是","多样","没错","丰富","就是","粘合剂","描述","这样","原有","中","使用","进行","配置","和","带领","看上去","，","ros","系统","也","频次"],"title":"Launch文件","title_tokens":["launch","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_1","text":"","text_tokens":[],"title":"多节点启动","title_tokens":["启动","节点","多"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_2","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_3","text":"learning_launch/simple.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'learning_topic' , executable = 'topic_helloworld_pub' , ), Node ( package = 'learning_topic' , executable = 'topic_helloworld_sub' , ), ])","text_tokens":["learning","executable",".","import","pub",":","sub","simple","node","description","[","return","generate","_","helloworld","py",","," ","=","launchdescription","launch","package","(","]","def","/",")","ros","topic","'","actions","from"],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_4","text":"","text_tokens":[],"title":"命令行参数配置","title_tokens":["配置","参数","命令行","命令"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_5","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_6","text":"learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): rviz_config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ Node ( package = 'rviz2' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' , rviz_config ] ) ])","text_tokens":["learning","ament","path","executable","arguments","rviz",".","python","config","import","share",":","packages","node","description","get","[","return","-","_","directory","generate","index","py",",","os"," ","=","launchdescription","rviz2","launch","name","package","(","d","def","]","/",")","ros","join","turtle","'","actions","from"],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_7","text":"","text_tokens":[],"title":"资源重映射","title_tokens":["资源","重","映射"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_8","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_9","text":"learning_launch/remapping.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , namespace = 'turtlesim2' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , executable = 'mimic' , name = 'mimic' , remappings = [ ( '/input/pose' , '/turtlesim1/turtle1/pose' ), ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), ] ) ])","text_tokens":["learning","mimic","executable","vel",".","import","pose","output","turtle1",":","turtlesim2","node","description","[","return","namespace","input","generate","_","remappings","py",","," ","=","launchdescription","turtlesim","cmd","remapping","turtlesim1","launch","name","package","(","]","def","/",")","ros","sim","'","actions","from"],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#ros","text":"","text_tokens":[],"title":"ROS参数设置","title_tokens":["参数设置","参数","设置","ros"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_10","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_11","text":"learning_launch/parameters.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node def generate_launch_description (): background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) ) return LaunchDescription ([ background_r_launch_arg , background_g_launch_arg , background_b_launch_arg , Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [{ 'background_r' : LaunchConfiguration ( 'background_r' ), 'background_g' : LaunchConfiguration ( 'background_g' ), 'background_b' : LaunchConfiguration ( 'background_b' ), }] ), ]) learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , namespace = 'turtlesim2' , name = 'sim' , parameters = [ config ] ) ])","text_tokens":["learning","ament","}","executable","path","python",".","config","background","import","substitutions","share","122","0",":","packages","value","node","description","turtlesim2","get","[","return","namespace","_","generate","yaml","directory","launchconfiguration","index","declarelaunchargument","textsubstitution","r","py",",","g","os"," ","=","launchdescription","text","turtlesim","parameters","84","default","launch","name","package","(","arg","def","]","/",")","ros","sim","join","{","'","actions","b","from"],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_2","text":"","text_tokens":[],"title":"Launch文件包含","title_tokens":["launch","包含","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_12","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_13","text":"learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction from launch_ros.actions import PushRosNamespace def generate_launch_description (): parameter_yaml = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ parameter_yaml_with_namespace ]) learning_launch/parameters_nonamespace.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [ config ] ) ])","text_tokens":["learning","ament","path","executable","python",".","config","import","share","includelaunchdescription",":","packages","turtlesim2","description","pushrosnamespace","node","get","sources","[","namespace","return","_","directory","generate","yaml","index","nonamespace","py",",","os","with"," ","=","launchdescription","turtlesim","namespaces","parameters","launch","name","package","(","]","def","/","groupaction",")","ros","join","sim","parameter","pythonlaunchdescriptionsource","'","actions","from"],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_14","text":"... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ...","text_tokens":["ament","path","rviz",".","config","data","...","share","resource","packages","files","glob","[","xml","_","index","py",",","+","os","=","launch","name","package","(","]","/",")","join","*","'"," "],"title":"功能包编译配置","title_tokens":["配置","功能","编译","包"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docsros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["using",".","org","html","projects","large","docs",":","humble","ros2","-","en","https","tutorials"," ","main","launch","/","ros","docsros","for"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/","text":"TF：机器人坐标系管理神器 坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器——TF。 机器人中的坐标系 机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做基坐标系Base Frame，机器人安装位置在外部环境下的参考系叫做世界坐标系World Frame，机器人末端夹爪的位置叫做工具坐标系，外部被操作物体的位置叫做工件坐标系，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是基坐标系Base Link，雷达所在的位置叫做雷达坐标系laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做里程计坐标系odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做地图坐标系map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为平移和旋转两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实向量的数学描述。 ROS中TF功能的底层原理，其实就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。 TF命令行操作 ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。 小海龟跟随例程 这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 查看TF树 $ ros2 run tf2_tools view_frames 查询坐标变换信息 $ ros2 run tf2_ros tf2_echo turtle2 turtle1 坐标系可视化 $ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。 静态TF广播 我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为静态TF变换，我们来看看在程序中该如何实现？ 运行效果 $ ros2 run learning_tf static_tf_broadcaster 代码解析 learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？ TF监听 我们再来学习下如何查询两个坐标系之间的位置关系。 运行效果 $ ros2 run learning_tf tf_listener 代码解析 learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。 海龟跟随功能解析 运行效果 $ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 原理解析 在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？这两个向量我们可以根据海龟的位置话题计算出来，那这个位置向量不就容易得到了么。 我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心是这个向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。 Launch文件解析 learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ]) 坐标系动态广播 learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 海龟跟随 learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":["指令","如何","学习","代码",".","器类","__","就","turtlename","大家","3","小海龟","可视","还","坐标系","小海","发生","查询","累积","类","默认值","https","？","四元","做","变换","理解","launchdescription","之为","长度","时间","prefix","参考","destroy","订阅","夹","段","时刻","一样","来","不","继续","例程","一个","install","意思","spawner","封装","底盘","y","subscription","10.0","中心","geometry","存在","as","左边","编写","sendtransform","f","launchconfiguration","常见","py","算出","两者","命令行","具体","解析","linear","bin","utf","文件","戳","theta","臂","数学","产生","按照","callback","示例","view","shutdown","时候","至关重要","publisher","自动","计算","客户端","物体","知道","都","world","慢慢","某","点","两个","static","连线","位置","创建","海龟","default","机器","入口","srv","默认","setup","quat","内容","初始化","这样","turtle1","8","tf2","其实","函数","node","概念","中","）","turtlefollowing","5.0",">","发送","底层","transformbroadcaster","每","进行","话题","0.0","所以","有所","turtlesim","管理系","生成","包括","么","lookup","情况","向量","最为","parameter","作者","方法","包","之后","learning","准备","}","固定","知识","sqrt","初始","forward","2","神器","计算出来","可视化",":","turtletfbroadcaster","一层","sudo","如下","起来","[","rel","了解","-","与","en","python3","到","the","现在","熟悉","msgs","console","存储","很多","角速度","依然","=","名","基","数值","为","作用","更新","被","想起","缓冲","sim","线速度","看看","spawned","header","看","后","对象","居","所在","移动","激光","#","机械","通过","处理","、","抓取","args","哪个","成功","打开","显得","核心","回调","之间","解决","容易",")","优先","形态","中画","距离","消息","箭头"," ","跟随","turtle2","python","欧拉角","following","import","位","中心点","并","再","然后","house","又","return","两者之间","其中","程序","speed","父类","同理","1.0","链接","管理","应该","转变成","保存","base","试试","这些","务器","turtle","出","随便","动","angular","tf","重要","不是","关闭","速度","缓冲区","executable","%","trans","yaw","一本","substitutions","odom","得到","服务","主要","stamp","范围","rclpy","quaternion","复杂","怎样","description","statictfbroadcaster","scale","部分","关系","配置","info","只要","请求","listener","，","转变","跟随运动","就绪","def","spawn","系统","没有","也","对","client","q","service","向","姿态","s","spawning","request","信息","表示","了","过程","给","：","世界","broadcaster","那","加","数","等待","当前","生变","有点","否则","async","publish","guyuehome","x","监听","提供","末端","一些","create","except","高中","+","相对","得","四乘","不会","库","名称","啦","会","ready","\"","客户","详细","buffer","{","一种","编译","declare","真器","pkg","transformexception","if","漂移","地图","挑战","关于","html","是","欧拉","是不是","发生变化","方向","docs","看似","称之为","报告","demo","not","分解","设置","id","里程计","功能","查看","激光雷达","及时","经过","package","空间","result","'","actions","上","rate","on","pitch","广播","rviz","仿真","to","旋转","中间","init","broadcaster1","0","理论知识","twist","命令","器","4","参考系","安装","ros2","环境","_","这个","z","broadcaster2","tutorials","良好","self","加入","外部","选项","呗","--","你家","外部环境","/","理论","基于","tools","roll","1","该","转换","source","先","参数值","让","vel","动机","org","定时","transformlistener","简单","laser","share","工具","变得","不要","发布","怎么样","坐标","humble","清楚","机器人学","平移","目标","teleop","不变","declarelaunchargument","运动","获取","atan2","失败","time","child","试一试","(","源","ros","爪","super","原理","now","变得复杂","coding","key","transform","需要","要","done","启动","效果","实现","pose","w","有","link","便于","哪些","rotation","中该","参数","可以","节点","误差","控制","另外","退出","d","房子","name","]","着急","msg","。",".__","呢","finished","接口","*","ex","from","spin","叫做","怎么","（","机器人","false","在","已经","还会","euler","get","至关","出来","true","又会有","entry","里程","拆","很","transformstamped","基础","循环","echo","仿真器","com","是否","successfully","frame","服务器","说","两只","数据","rviz2","保持","完成","好","scripts","用","run","根据","else","准备就绪","math","销毁","这","map","教材","不断","try","进入","管理系统","一只","frames","将","transformations","一起","人学","xy","基本","apt","动态","周期","translation","变化","www",",","timer","env","格外","none","的","send","float","launch","完整","定时器","call","内","clock","transformation","运行","cmd","我们","如果","定义","者","string","监听器","could","案例","矩阵","就是","$","描述","这种","points","全局","value","下","5","generate","pos","静态","使用","!","角度","四","@","statictransformbroadcaster","雷达","main","异常","和","提示","—","讲解","parameters","工件","比如","树","算法","非常","usr","class","target","is","背后","古月","绝对","操作","tflistener","时","标志","logger","三个","移动机器人","没","变成","相应","说明"],"title":"**TF：机器人坐标系管理神器**","title_tokens":["tf","机器","管理","坐标系","坐标","*","机器人","神器","："]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf","text":"坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器——TF。","text_tokens":["tf","重要","如何","是","机器人","了","神器","给","人学","在","存在","坐标系","坐标","概念","中","机器人学","？","基础","熟悉","关系","提供","该","很多","—","的","位置","，","非常","会","之间","机器","完整","管理","。","ros","系统","这些","也","我们","一个"," "],"title":"TF：机器人坐标系管理神器","title_tokens":["tf","机器","管理","坐标系","坐标","机器人","神器","："]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_1","text":"机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做基坐标系Base Frame，机器人安装位置在外部环境下的参考系叫做世界坐标系World Frame，机器人末端夹爪的位置叫做工具坐标系，外部被操作物体的位置叫做工件坐标系，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是基坐标系Base Link，雷达所在的位置叫做雷达坐标系laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做里程计坐标系odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做地图坐标系map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为平移和旋转两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实向量的数学描述。 ROS中TF功能的底层原理，其实就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。","text_tokens":["要","固定","知识","就","大家","了","过程","有","世界","link","那","坐标系","一层","哪些","累积","？","末端","一些","可以","误差","相对","基","变换","四乘","为","被","会","详细","参考","。","呢","夹","一样","一个","叫做","封装","所在","移动","漂移","地图","关于","中心","是","机器人","机械","通过","在","看似","分解","抓取","至关","又会有","里程","里程计","两者","显得","功能","frame","臂","之间","空间","数学","形态","中画"," ","至关重要","map","跟随","教材","不断","旋转","管理系统","中心点","理论知识","人学","基本","参考系","安装","物体","环境","这个","都","world","两者之间","变化","良好","格外","两个","外部","的","位置","机器","管理","外部环境","base","内","这些","理论","出","我们","tf","重要","动机","简单","一本","laser","odom","矩阵","工具","就是","描述","主要","变得","范围","其实","坐标","复杂","中","下","机器人学","平移","底层","部分","每","使用","进行","关系","四","雷达","和","讲解","管理系","工件","比如","，","绝对","操作","系统","爪","向量","ros","原理","也","变得复杂","移动机器人","对","方法"],"title":"机器人中的坐标系","title_tokens":["机器","坐标系","坐标","中","机器人","的"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_1","text":"ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。","text_tokens":["tf","先","如何","一种","跟随","机器人","小海龟","通过","坐标系","坐标","小海","中","下","了解","？","使用","的","我们","两只","，","算法","海龟","机器","。","ros","呢","基于","该","示例"],"title":"TF命令行操作","title_tokens":["tf","命令行","命令","操作"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_2","text":"这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key","text_tokens":["之后","先","如何","自动","跟随",".","启动","效果","就","一只","$","小海龟","通过","然后","tf2","apt","sudo","小海","demo","humble","安装","ros2","-","_","这个","其中","？","teleop","运动","py","可以"," ","控制","功能","另外","具体","turtlesim","的","文件","相应","，","海龟","会","launch","跟随运动","install","需要","试一试","示例","。","ros","来","turtle","tools","运行","run","key","我们","一个","包"],"title":"小海龟跟随例程","title_tokens":["小海龟","海龟","跟随","小海","例程"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_2","text":"$ ros2 run tf2_tools view_frames","text_tokens":["view","frames","tf2","ros2","run","tools","_","$"," "],"title":"查看TF树","title_tokens":["tf","查看","树"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_3","text":"$ ros2 run tf2_ros tf2_echo turtle2 turtle1","text_tokens":["turtle1","tf2","turtle2","echo","ros","ros2","run","_","$"," "],"title":"查询坐标变换信息","title_tokens":["坐标","变换","查询","信息"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_4","text":"$ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。","text_tokens":["pkg","tf","先","这","跟随","rviz",".","案例","share","是","大家","$","小海龟","不要","tf2","便于","怎样","小海","有点","下","ros2","-","了解","_","慢慢","？","使用","py","理解","的","我们","，","海龟","rviz2","--","d","(","prefix","着急",")","/","背后","呢","。","来","原理","turtle","run","意思","方法"," "],"title":"坐标系可视化","title_tokens":["坐标","可视","可视化","坐标系"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_3","text":"我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为静态TF变换，我们来看看在程序中该如何实现？","text_tokens":["tf","之后","如何","底盘","激光","简单","实现","是","就","机器人","发生变化","主要","那","这种","在","称之为","基本","坐标系","坐标","生变","中","发生","安装","哪个","中该","这个","拆","很","变化","？","静态","常见","进行","程序","关系","相对","只要","雷达","变换","和","作用","的","不会","之为","比如","说","位置","，","呗","激光雷达","之间","管理","房子","应该","你家","机器","好","。","试试","情况","最为","系统","来","看看","也","对","不","我们","一个"," "],"title":"静态TF广播","title_tokens":["tf","广播","静态"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_5","text":"$ ros2 run learning_tf static_tf_broadcaster","text_tokens":["tf","learning","ros2","run","static","_","broadcaster","$"," "],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_6","text":"learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？","text_tokens":["learning","}","如何","代码",".","初始","器类","__","2","w","broadcaster","了","：","3","数",":","坐标系","等待","如下","[","rotation","-","查询","python3","类","到","？","guyuehome","x","四元","msgs","console","节点","=","变换","为","库","退出","\"","name","时间","]","需要","msg","destroy","段","呢","接口","*","{","header","一个","编译","from","后","spin","对象","居","y","（","10.0","是","#","欧拉","geometry","、","euler","get","args","设置","id","entry","编写","sendtransform","transformstamped","py","循环","打开","功能","com","frame","bin","utf","文件","戳","保持","完成","经过",")","scripts","'","消息","示例"," ","shutdown","销毁","时候","这","包","pitch","广播","python","欧拉角","to","import","旋转","init","将","并","transformations","0","house","又","器","translation","ros2","知道","_","world","z","变化","www","程序",",","self","env","父类","点","加入","两个","static","none","的","位置","选项","创建","入口","/","clock","roll","1","转换","setup","我们","该","tf","quat","让","yaw","初始化","描述","stamp","8","tf2","points","rclpy","quaternion","坐标","node","中","）","5.0","清楚","statictfbroadcaster","目标","平移","静态","不变","使用","进行","!","关系","配置","@","statictransformbroadcaster","0.0","main","child","，","usr","(","class","def","源","古月","ros","系统","now","super","coding","transform","作者","向","说明"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_4","text":"我们再来学习下如何查询两个坐标系之间的位置关系。","text_tokens":["之间","如何","坐标系","关系","学习","坐标","。","下","来","查询","两个","的","我们","再","位置"],"title":"TF监听","title_tokens":["tf","监听"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_7","text":"$ ros2 run learning_tf tf_listener","text_tokens":["tf","learning","ros2","run","_","listener","$"," "],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_8","text":"learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。","text_tokens":["learning","}","固定","姿态","代码",".","初始","s","信息","__","2","w","大家","broadcaster","了","：","数",":","坐标系","等待","当前","如下","否则","[","rotation","了解","-","python3","类","参数","默认值","到","guyuehome","监听","四元","x","现在","create","console","存储","except","节点","=","名","变换","数值","库","缓冲","啦","退出","\"","name","时间","]","需要","buffer","destroy","。","接口","时刻","*","ex","{","继续","一个","declare","编译","from","后","spin","对象","居","y","transformexception","（","挑战","#","处理","报告","euler","not","get","args","as","设置","左边","entry","编写","f","py","循环","打开","功能","com","frame","utf","bin","文件","两只","之间","完成","好",")","优先","用","scripts","'","示例"," ","on","shutdown","销毁","包","跟随","python","to","import","try","进入","init","并","transformations","0","house","基本","周期","translation","ros2","return","知道","_","world","z","www","程序",",","某","self","timer","env","父类","点","加入","两个","外部","none","的","static","1.0","位置","选项","创建","海龟","--","入口","定时器","/","保存","默认","1","setup","我们","如果","string","tf","source","参数值","quat","监听器","关闭","让","缓冲区","could","案例","%","trans","定时","transformlistener","初始化","8","tf2","points","rclpy","quaternion","坐标","node","value","）",">","目标","pos","使用","进行","!","配置","获取","@","info","异常","main","有所","listener","失败","time","，","usr","(","class","def","源","target","古月","tflistener","ros","系统","now","super","lookup","coding","transform","parameter","logger","对","作者","说明"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_9","text":"","text_tokens":[],"title":"海龟跟随功能解析","title_tokens":["跟随","海龟","解析","功能"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_10","text":"$ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key","text_tokens":["tf","learning","launch","py","demo",".","following","turtle","ros2","run","turtlesim","_","key","$"," ","teleop"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_11","text":"在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？这两个向量我们可以根据海龟的位置话题计算出来，那这个位置向量不就容易得到了么。 我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心是这个向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。","text_tokens":["要","如何","学习","代码","2","实现","表示","就","了","有","加","计算出来","那","坐标系","起来","与","？","监听","做","可以","高中","相对","变换","得","长度","想起","时间","参考","。","不","例程","一个","真器","看","叫做","怎么","封装","中心","是","是不是","方向","在","还会","出来","设置","很","算出","两者","仿真器","核心","说","两只","解决","好","容易","按照","用","距离","根据","上","箭头"," ","这","跟随","广播","turtle2","仿真","不断","中间","中心点","再","一起","然后","计算","动态","参考系","周期","这个","world","某","同理","两个","的","连线","位置","海龟","随便","动","1","我们","该","定义","tf","不是","速度","得到","就是","描述","这样","turtle1","全局","发布","怎么样","坐标","中","下","运动","角度","话题","所以","和","比如","，","么","时","向量","也","三个","方法","向"],"title":"原理解析","title_tokens":["原理","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#launch","text":"learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ])","text_tokens":["tf","learning","}","executable","turtle2",".","following","import","substitutions","turtlename","broadcaster","broadcaster1","turtle1",":","value","node","demo","description","[","return","_","generate","launchconfiguration","declarelaunchargument","broadcaster2","py",","," ","=","launchdescription","turtlesim","frame","parameters","listener","default","launch","name","package","(","]","def","target","/",")","ros","sim","turtle","{","'","actions","from"],"title":"Launch文件解析","title_tokens":["解析","launch","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_12","text":"learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], },","text_tokens":["learning","}","代码",".","初始","信息","__","2","pose","turtlename","w","变成","broadcaster","：","3","小海龟","数",":","坐标系","turtletfbroadcaster","等待","小海","如下","否则","[","rotation","-","python3","类","参数","默认值","到","the","guyuehome","x","四元","msgs","create","console","节点","=","变换","数值","为","更新","库","名称","退出","\"","name","时间","]","需要","msg","destroy","订阅","接口","*","{","header","一个","declare","编译","from","后","spin","对象","居","y","（","subscription","#","欧拉","geometry","处理","、","euler","get","args","设置","id","entry","q","f","sendtransform","编写","transformstamped","py","循环","打开","功能","com","回调","frame","bin","utf","文件","戳","theta","及时","完成",")","优先","用","scripts","'","消息","callback","示例"," ","shutdown","销毁","包","pitch","广播","python","欧拉角","to","import","旋转","init","并","将","transformations","0","器","动态","translation","ros2","知道","_","world","z","变化","www","程序",",","self","env","父类","点","加入","none","外部","static","的","send","位置","选项","创建","海龟","入口","转变成","/","clock","transformation","turtle","默认","1","roll","转换","setup","者","string","tf","参数值","关闭","让","yaw","初始化","stamp","8","tf2","points","rclpy","函数","坐标","node","value","quaternion","中","）","目标","平移","transformbroadcaster","使用","进行","!","配置","获取","@","0.0","main","turtlesim","listener","，","转变","child","usr","(","class","def","源","古月","ros","系统","now","super","coding","parameter","transform","作者","向","说明"],"title":"坐标系动态广播","title_tokens":["动态","坐标","广播","坐标系"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_13","text":"learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], },","text_tokens":["learning","指令","}","done","固定","sqrt","准备","姿态","代码",".","初始","spawning","信息","__","forward","2","request","实现","表示","broadcaster","：","还",":","坐标系","等待","当前","如下","否则","rel","rotation","[","-","python3","类","参数","默认值","到","publish","async","guyuehome","监听","x","msgs","create","存储","except","console","节点","角速度","+","控制","依然","=","名","变换","数值","库","缓冲","ready","退出","\"","name","客户","时间","需要","]","buffer","msg",".__","finished","线速度","接口","时刻","destroy","spawned","*","ex","{","一个","declare","编译","from","spawner","spin","对象","后","居","y","transformexception","if","is","#","geometry","false","通过","已经","报告","、","not","get","args","as","设置","成功","左边","true","entry","编写","f","py","循环","打开","功能","com","是否","linear","successfully","frame","bin","utf","服务器","文件","theta","查看","数据","完成",")","优先","产生","用","result","scripts","距离","'","消息","根据","示例","else","rate","准备就绪"," ","on","shutdown","math","销毁","publisher","包","跟随","python","turtle2","following","import","to","try","进入","位","init","并","transformations","0","twist","xy","客户端","计算","4","周期","translation","ros2","return","知道","_","z","变化","www","speed","程序",",","timer","self","env","父类","点","加入","none","外部","static","的","float","位置","选项","创建","海龟","入口","定时器","/","保存","call","srv","务器","turtle","angular","默认","1","cmd","setup","如果","string","tf","source","参数值","监听器","速度","vel","缓冲区","could","内容","关闭","让","trans","定时","transformlistener","初始化","服务","turtle1","8","tf2","points","发布","rclpy","坐标","node","value","turtlefollowing","5","发送","目标","scale","使用","运动","进行","!","角度","配置","获取","@","info","话题","atan2","异常","请求","main","提示","turtlesim","生成","listener","失败","time","，","跟随运动","包括","就绪","usr","(","class","def","源","spawn","古月","标志","ros","系统","now","super","lookup","没有","coding","transform","parameter","logger","client","作者","没","service","说明"],"title":"海龟跟随","title_tokens":["跟随","海龟"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_14","text":"https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":["docs","tutorials","tf2",":","/",".","org","ros","humble","main","-","html","en","https"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/","text":"URDF：机器人建模方法 ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法——URDF，用来描述机器人外观、性能等各方面属性。 机器人的组成 建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由硬件结构、驱动系统、传感器系统、控制系统四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备，驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等，传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境，控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。 URDF ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是XML格式，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为连杆Link，手肘就类似于机器人电机驱动部分，称为关节joint。 所以在URDF建模过程中，关键任务就是通过这里的 和 ，理清楚每一个连杆和关节的描述信息。 连杆Link的描述 标签用来描述机器人某个刚体部分的外观和物理属性，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。Link里边的 部分用来描述机器人的外观，比如 表示几何形状，里边使用 调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的。 表示坐标系相对初始位置的偏移，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分 ，描述碰撞参数，里边的内容似乎和 一样，也有 和 ，看似相同，其实区别还是比较大的。 部分重在描述机器人看上去的状态，也就是视觉效果， 部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过 来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是 里边 描述的形状。 坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。 关节Joint描述 机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 第一种continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 第二种revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 第三种prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 第四种是fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 第五种Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 既然是运动，就是相对的，parent标签描述父连杆，child标签描述子连杆，子连杆会相对父连杆发生运动。 这里的origin表示两个连杆坐标系之间的关系，也就是这个向量，可以理解为这两个连杆该如何安装到一起。 Axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的。 Limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等，大家注意单位，ROS中关于平移的默认单位都是m，旋转是弧度，不是度，所以这里3.14就表示可以在-180度到180度之间运动，速度也是m/s，或者rad/s。 完整机器人模型 最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。 创建机器人模型 好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。 功能包结构 urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件 查看URDF模型结构 $ urdf_to_graphiz mbot_base.urdf # 在模型文件夹下 模型可视化效果 模型文件解析 learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot> 参考链接 https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":["清晰","如何","revolute","尖括号","raw","代码","系列","放在",".","mbot","就","圆柱体","大家","开发","robot","可视","还","坐标系","组成部分","black","发生","https","？","相同","全为","left","树莓","理解","back","算力","参考","类似","一样","来","不","一个","检测","驱动器","未来","之前","叫","y","底盘","名字","手臂","既然","比较","geometry","right","0.16","urdf","区别","xacro","五种","floating","0.06","常见","尺寸","独立","stl","二个","解析","右侧","第一","文件","介绍","臂","当然","planar","三维","等","radius","一系列","产生","按照","转关","面上","示例","子","时候","prismatic","等等","少","计算","这里","0.025","于","设备","都","平台","简化","或者","某","模型","直线","两个","一系","视觉","位置","创建","机器","第三种","频繁","最终","设计","xyz","外观","放置","内容","要求","第六","caster","关键","形成","模型简化","这样","其实","结构","中","旋转关节","较",">","每","进行","真实","所以","单位","一致","管理系","看上去","包括","手肘","碰撞","向量","讲","应用","方法","包","之后","learning","固定","括号","初始","硬件","看到","注意","由","可视化",":","摄像","起来","如下","第三","了解","与","-","en","到","柱体","形状","第四","熟悉","局","属性","=","为","引用","编码器","外壳","length","包围","看","必须","手","移动","#","机械","组合而成","通过","理","rad","碰撞检测","、","属于","极限","第二种","先来","三种","允许","为了","外界","连杆","渲染","电脑","graphiz","用来","之间","相关","无法","浮动","应用软件","驱使"," ","?","编码","有点像","两种","0.18","板载","再","颜色","小臂","刚体","其中","axis","0.4","自定义","平面","接触","唯一","0.05","码器","四大","绿色","1.0","链接","管理","实际","而是","保存","base","这些","m","以","看上","桌子","一段","不是","rpy","速度","material","type","父","算作","continuous","主要","等于","第二","沿某","称为","复杂","四种","的话","惯性","这么","任务","部分","分别","关系","配置","偏移","，","细节","高","系统","也","对","大","组成","限制","自己","度到","所有","s","信息","类型","性能","表示","了","过程","给","：","小车","有点","六种","带有","里边","x","提供","一些","建模","0.9","相对","得","不会","电源","名称","啦","会","不过","\"","visual","统一","在于","视觉效果","正常","最大","一种","质量","关于","html","是","轴","yellow","方向","docs","看似","分解","全称","源代码","无限","大臂","第六种","自定","功能","软件","查看","以及","相机","为例","上","pitch","rviz","to","旋转","实打实","0","最小","网页","安装","xml","感知","环境","_","这个","方式","z","上去","看下","才能","tutorials","多","单位向量","蓝色","外部","外部环境","/","cylinder","完全","0.20","roll","1","该","parent","先","1.5707","让","质心","第一种","动机","0.015","front","org","为此","装置","度","全都","坐标","fixed","第五种","humble","车体","文件夹","一般","清楚","他们","平移","似乎","运动","载体","第二个","肘关节","格式","child","建模语言","ros","派","找","180","sphere","需要","要","认识","启动","效果","有","link","传感","便于","哪些","关节","调用","滑动","参数","驱动","相对运动","它","每个","可以","控制","方面","操作系统","此时","重在","不能","version","语言","0.95","name","专门","某个","几何","着急","。","呢","wheel","感器","0.095","叫做","标签","电机","rgba","机器人","第四种","则","在","limit","连接","控制系统","传感器","像头","弧度","围绕","存放","圆柱","各","自身","框","完成","好","color","用","状态","肌肉","配置文件","不仅","这","管理系统","思路","将","什么","3.14","meshes","一起","把","摄像头","提前","变化","哪","乍","第五","imu","市面","这款","的","launch","完整","组合","物理","独自","我们","无论是","定义","如果","origin","还是","0.19","就是","矩阵","$","描述","一块","这种","无论","下","<","joint","使用","市面上","角度","雷达","轮子","main","和","—","正","white","比如","时","操作","二种","或","件夹","移动机器人","默认"],"title":"**URDF：机器人建模方法**","title_tokens":["机器","建模","urdf","*","机器人","方法","："]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf","text":"ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法——URDF，用来描述机器人外观、性能等各方面属性。","text_tokens":["要","之前","让","如何","一种","认识","外观","为此","性能","是","机器人","了","给","描述","在","还","把","urdf","、","下","方法","？","使用","提供","建模","属性","方面","操作系统","得","—","各","的","介绍","用来","，","啦","当然","不过","机器","专门","等","。","操作","ros","系统","呢","我们","一个"," "],"title":"URDF：机器人建模方法","title_tokens":["机器","建模","urdf","机器人","方法","："]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_1","text":"建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由硬件结构、驱动系统、传感器系统、控制系统四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备，驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等，传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境，控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。","text_tokens":["硬件","看到","由","开发","过程","了","传感","便于","组成部分","摄像","起来","里边","参数","驱动","熟悉","一些","建模","可以","控制","操作系统","树莓","语言","电源","编码器","外壳","。","类似","感器","正常","一个","驱动器","底盘","移动","电机","是","机器人","机械","通过","、","分解","控制系统","传感器","像头","常见","软件","电脑","臂","以及","等","按照","状态","应用软件","面上","驱使","上"," ","这","编码","等等","管理系统","实打实","思路","板载","再","计算","摄像头","把","安装","感知","环境","设备","都","平台","imu","市面","码器","四大","外部","的","机器","管理","组合","这些","我们","无论是","先","动机","还是","就是","描述","主要","装置","其实","结构","中","无论","一般","清楚","部分","市面上","使用","每","进行","载体","雷达","和","管理系","比如","，","包括","建模语言","操作","系统","派","移动机器人","应用","组成","需要","自己"],"title":"机器人的组成","title_tokens":["的","组成","机器","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_1","text":"ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是XML格式，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为连杆Link，手肘就类似于机器人电机驱动部分，称为关节joint。 所以在URDF建模过程中，关键任务就是通过这里的 和 ，理清楚每一个连杆和关节的描述信息。","text_tokens":["清晰","之后","如何","尖括号","括号","代码","系列","信息","就","大家","开发","由","过程","link","还","有点","关节","驱动","相对运动","？","建模","可以","属性","相对","统一","。","呢","包围","类似","一个","看","必须","叫做","标签","手","电机","手臂","是","机器人","机械","组合而成","通过","在","理","urdf","全称","连接","源代码","大臂","独立","连杆","右侧","文件","臂","自身","一系列","无法","产生","肌肉"," ","不仅","有点像","网页","这里","小臂","xml","环境","于","这个","都","其中","刚体","上去","才能","乍","模型","外部","的","一系","机器","组合","外部环境","这些","独自","我们","看上","桌子","算作","就是","关键","描述","这样","称为","中","下","他们","清楚","任务","joint","使用","部分","每","运动","肘关节","所以","和","格式","比如","，","看上去","手肘","ros","也","方法","组成","自己"],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#link","text":"标签用来描述机器人某个刚体部分的外观和物理属性，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。Link里边的 部分用来描述机器人的外观，比如 表示几何形状，里边使用 调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的。 表示坐标系相对初始位置的偏移，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分 ，描述碰撞参数，里边的内容似乎和 一样，也有 和 ，看似相同，其实区别还是比较大的。 部分重在描述机器人看上去的状态，也就是视觉效果， 部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过 来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是 里边 描述的形状。 坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。","text_tokens":["如何","raw","初始","效果","表示","就","圆柱体","了","过程","有","：","小车","link","坐标系","如下","里边","调用","与","到","参数","它","柱体","形状","x","相同","可以","属性","相对","全为","控制","重在","名称","会","算力","name","某个","几何","。","一样","视觉效果","来","类似","不","一个","检测","未来","标签","y","移动","质量","是","机器人","机械","比较","方向","则","通过","在","看似","碰撞检测","、","区别","连接","尺寸","为了","自定","stl","连杆","二个","外界","圆柱","软件","文件","用来","臂","框","三维","等","好","用","状态","为例","上"," ","时候","pitch","旋转","将","0","颜色","计算","提前","刚体","这个","z","上去","简化","自定义","接触","模型","蓝色","的","视觉","绿色","位置","机器","实际","物理","设计","roll","我们","该","定义","以","如果","看上","外观","质心","内容","要求","动机","还是","矩阵","就是","算作","描述","模型简化","这样","其实","第二","坐标","复杂","中","车体","较","的话","惯性","平移","joint","部分","使用","似乎","分别","运动","真实","第二个","轮子","和","一致","比如","偏移","，","看上去","包括","时","碰撞","高","也","移动机器人","大","需要"],"title":"连杆Link的描述","title_tokens":["连杆","link","的","描述"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#joint","text":"机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 第一种continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 第二种revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 第三种prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 第四种是fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 第五种Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 既然是运动，就是相对的，parent标签描述父连杆，child标签描述子连杆，子连杆会相对父连杆发生运动。 这里的origin表示两个连杆坐标系之间的关系，也就是这个向量，可以理解为这两个连杆该如何安装到一起。 Axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的。 Limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等，大家注意单位，ROS中关于平移的默认单位都是m，旋转是弧度，不是度，所以这里3.14就表示可以在-180度到180度之间运动，速度也是m/s，或者rad/s。","text_tokens":["之后","要","如何","revolute","固定","s","类型","表示","注意","就","大家","了","有","小车","link","坐标系","第三","六种","发生","关节","带有","-","滑动","到","相对运动","第四","一些","可以","此时","相对","不能","理解","为","不会","会","不过","。","在于","最大","不","一个","一种","叫","标签","电机","名字","关于","是","机器人","轴","既然","机械","第四种","比较","方向","通过","在","rad","属于","urdf","极限","limit","区别","第二种","连接","无限","三种","允许","五种","floating","第六种","弧度","围绕","连杆","第一","臂","之间","planar","相机","等","产生","转关","浮动","子","上"," ","这","两种","prismatic","少","旋转","什么","3.14","最小","一起","这里","安装","xml","刚体","方式","这个","都","axis","变化","z","哪","或者","平面","才能","唯一","某","第五","模型","直线","单位向量","两个","的","位置","机器","而是","第三种","/","频繁","最终","m","默认","1","该","origin","parent","一段","不是","速度","第一种","内容","还是","第六","父","度到","就是","continuous","描述","这样","这种","等于","度","第二","沿某","坐标","fixed","第五种","中","旋转关节","四种","一般","较","平移","joint","使用","每","运动","进行","角度","关系","所以","轮子","和","单位","正","比如","，","child","ros","向量","二种","也","180","限制"],"title":"关节Joint描述","title_tokens":["关节","描述","joint"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_2","text":"最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。","text_tokens":["所有","之后","先","标签","代码","放在","就","机器人","大家","是","了","robot","由","再","描述","形成","link","一块","在","全都","urdf","哪些","中","下","了解","先来","这个","joint","部分","每","每个","某","局","模型","所以","和","的","，","完成","机器","组合","完整","着急","细节","。","时","完全","最终","对","找","不","一个","组成"," ","看"],"title":"完整机器人模型","title_tokens":["模型","机器","完整","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_3","text":"好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。","text_tokens":["要","动机","还是","移动","机器人","了","过程","一起","urdf","这么","它","看下","多","建模","模型","这款","的","，","啦","机器","完整","好","示例","。","讲","移动机器人","为例","我们","一个","以"," ","看"],"title":"创建机器人模型","title_tokens":["创建","模型","机器","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_4","text":"urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件","text_tokens":["放置","rviz","启动","机器人","：","meshes","urdf","中","xacro","配置","模型","存放","渲染","的","引用","文件","launch","机器","相关","保存","或","配置文件"," "],"title":"功能包结构","title_tokens":["功能","结构","包"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_2","text":"$ urdf_to_graphiz mbot_base.urdf # 在模型文件夹下","text_tokens":["graphiz","在","#","urdf",".","base","模型","文件","下","to","件夹","文件夹","mbot","_","$"," "],"title":"查看URDF模型结构","title_tokens":["查看","urdf","模型","结构"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_5","text":"","text_tokens":[],"title":"模型可视化效果","title_tokens":["效果","可视","模型","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_6","text":"learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot>","text_tokens":["learning","parent","rpy","?","material","type","1.5707","0.015",".","front","rgba","0.19","0.18","mbot","caster","yellow","robot","geometry","continuous","0","link","right","0.16","urdf","0.025","black","xml","-",">","_","<","axis","0.4","joint","0.06","0.9","0.05","=","left","sphere","version","white","back","1.0","0.95","child","length","visual","\"","name","radius","color","/","base","cylinder","0.20","wheel","1","xyz","0.095"," ","origin"],"title":"模型文件解析","title_tokens":["解析","模型","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_7","text":"https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":["docs","tutorials",":","/",".","org","ros","urdf","humble","main","-","html","en","https"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/","text":"Gazebo：三维物理仿真平台 ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台Gazebo，了解一下。 Gazebo仿真平台 介绍 Gazebo是ROS系统中最为常用的三维物理仿真平台，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。 安装 Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-* 运行 通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py 注意：为保证模型顺利加载，请将离线模型文件库下载并放置到~/.gazebo/models路径下， https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。 XACRO机器人模型优化 我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本——XACRO文件。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro 常量定义 一些常用的XACRO文件语法，大家了解下。 标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。 数学计算 如果需要做数学计算，同样是在$加大括号中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 注意：所有数学运算都会转换成浮点数进行，以保证运算精度 宏定义 机器人的轮子我们也做成宏定义，定义方式是通过这个 标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。 文件包含 宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。 机器人仿真模型配置 完善物理参数 第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。 添加Gazebo标签 第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。 配置传动装置 第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。 添加控制器插件 第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。 构建仿真环境 接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ]) 机器人运动仿真 万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard 注意：虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。 Ignition：下一代Gazebo 随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为Ignition，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/ 附录：机器人完整模型 learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["transmission","如何","12","arguments","代码",".","传动装置","重复使用","尝试","mbot","就","大家","开发","robot","3","小海龟","值为","还","where","直接","小海","black","https","部署","？","常量","做","odometry","可编程","运算","控制器","launchdescription","理解","left","back","第四步","0.2","file","周边","me","prefix","参考","wiki","时刻","类似","一样","来","不","20","single","install","火星","一个","spawner","未来","之前","叫","迭代","y","底盘","网站","名字","同样","语句","geometry","升级","同时","附录","弹性系数","right","be","urdf","0.16","版本","models","点数","xacro","directory","火星车","0.06","镜像","py","尺寸","名为","加速","分配","第一","文件","介绍","size","当然","表面","三维","等","浮点数","radius","数学","似曾","插件","因为","于是","传动","出现","想不起","时候","into","enabled","publisher","set","及","较大","下载","gray","hardwareinterface","实验","无人","make","这里","计算","0.025","collision","怎么办","really","都","world","平台","宏","离线","引擎","某","update","模型","两个","改成","位置","创建","海龟","机器","joints","in","join","频繁","设计","xyz","actuator","for","放置","周边环境","bridge","t","丰富","caster","and","个","三步","这样","第一步","load","controller","函数","vgpu10","node","ixz","中",">","~","当","每","进行","相识","0.0","所以","differential","保证","系数","刚好","demos","provided","h","么","碰撞","inertia","最为","ixx","应用","一代","方法","github","包","reference","差不多","learning","}","括号","随着","硬件","技术","2","注意","max","output",":","mass","sudo","摄像","起来","第三","流畅","构建","[","官方网站","了解","-","顺利","到","the","以上","第四","修改","很多","属性","matrix","=","见证","数值","为","不妨","length","人机","torque","sim","支持","we","30","osrf","ament","find","worlds","filename","移动","xmlns","包含","#","separation","加大","从","通过","结束","高质","、","sources","比","reflect","params","为了","inertial","渲染","一步","want","用来","camera","ignitionrobotics","必备","相关","冗余","interface",")","无人机","mechanicalreduction","请","“","b"," ","iyy","完善","?","有点像","python","iyz","0.18","import","转换成","再","并","have","ixy","然后","颜色","写","记得","重复","return","axis","0.4","drive","keyboard","0.05","流程","测试","区分","ign","不同","1.0","gazebo","3.1415926","turngravityoff","base","试试","这些","差速","m","精度","以","tf","不是","material","rpy","速度","总体","executable","关闭","type","trans","yaw","change","得到","them","odom","第一句","continuous","主要","加法","第二","动力","跑","复杂","description","val","defining","use","惯性","export","关系","配置","第二步","认识一下","摩擦","接下来","，","def","spawn","velocityjointinterface","系统","没有","也","对","libgazebo","items","第三步","第二句","所有","传递数据","输入","信息","下一代","了","过程","给","：","小车","甚至","那","手边","own","路径","有点","里边","hardware","动力学","publish","x","提供","一些","建模","+","用到","优化","相对","得","你","blue","不会","库","确保","啦","编程","会","名称","\"","不过","下来","visual","this","{","真器","pkg","spwan","if","diameter","某些","质量","硬件加速","是","想不起来","yellow","是不是","进步","一定","izz","设置","include","a","变量","c","命名","化","功能","c语言","neighborhood","公式","互相","package","高质量","'","actions","上","rate","so","条件","友好","还要","仿真","to","场景","http","可","svga","0","twist","常用","命令","办法","force","4","property","必要","模拟","像","安装","xml","ros2","环境","_","这个","方式","z","换成","加载","帮助","试一下","r","多","奇迹","screen","加入","原本","matter","再用","更","虚拟","--","/","cylinder","0.20","验证","1","该","转换","parent","先","sure","一下","让","---","0.015","动机","vel","source","org","front","去","简单","share","by","万事","装置","考虑","macro","度","motor","交给","模块","fixed","可能","0.001","humble","teleop","运动","实物","entity","虚拟机","格式","0.75","time","child","(","ros","找","接下","嵌套","sphere","需要","添加","used","要","尽量","path","only","认识","摩擦力","启动","state","效果","实现","pose","3.14159","有","link","传感","两句","ignition","关节","调用","问题","除法","针对","参数","它","每个","可以","节点","此时","控制","另外","不能","version","语言","acceleration","一句","装上","0.95","一行","rgbd","name","]","。","呢","传递","接口","wheel","感器","pythonlaunchdescriptionsource","*","plugin","导致","整个","colors","from","几个","标签","怎么","电机","command","rgba","机器人","false","不多","在","已经","很长","bashrc","packages","get","二步","true","为止","传感器","像头","很","echo","仿真器","important","主角","com","our","frame","数据","correctly","完成","好","color","官方网","用","做成","run","diff","续航","不仅","图形","这","这句","box","不断","语法","将","万事俱备","一起","可编","list","doesn","apt","基本","把","摄像头","footprint","变化","index","似曾相识","更为","you","www",",","os","的","launch","完整","根本","物理","pi","运行","cmd","我们","方便","如果","定义","键盘","origin","俱备","0.19","四步","”","就是","$","描述","上来","参数设置","新","这种","includelaunchdescription","value","下","simpletransmission","5","generate","<","力学","joint","使用","弹性","角度","!","二句","限飞","官方","文件格式","轮子","和","—","新一代","切分","比如","课程","算法","放到","all","is","时","没","移动机器人","数学计算","结果","topic","浮点"],"title":"**Gazebo：三维物理仿真平台**","title_tokens":["三维","gazebo","物理","仿真","*","平台","："]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo","text":"ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台Gazebo，了解一下。","text_tokens":["一下","怎么","仿真","是","机器人","开发","手边","了解","怎么办","问题","平台","？","实物","主角","，","当然","机器","三维","gazebo","物理","。","ros","呢","没有","没","我们","如果"],"title":"Gazebo：三维物理仿真平台","title_tokens":["三维","gazebo","物理","仿真","平台","："]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_1","text":"","text_tokens":[],"title":"Gazebo仿真平台","title_tokens":["平台","仿真","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_1","text":"Gazebo是ROS系统中最为常用的三维物理仿真平台，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。","text_tokens":["差不多","要","摩擦力","实现","就","开发","了","那","还","动力学","到","部署","做","提供","可以","属性","此时","优化","为","不妨","周边","人机","。","支持","类似","火星","一个","导致","质量","是","机器人","不多","在","弹性系数","高质","、","火星车","渲染","表面","三维","等","无人机","高质量","用","续航"," ","不仅","图形","及","仿真","场景","再","实验","无人","常用","办法","模拟","环境","都","平台","帮助","引擎","多","加入","的","测试","更","机器","gazebo","物理","频繁","验证","运行","设计","我们","先","周边环境","上来","这样","动力","可能","中","力学","使用","弹性","实物","限飞","所以","系数","和","摩擦","比如","，","算法","ros","系统","最为","没有","应用"],"title":"介绍","title_tokens":["介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_2","text":"Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-*","text_tokens":["先","如何","一下","包","认识","简单","大家","了","$","给","：","通过","这样","已经","命令","apt","直接","sudo","把","跑","起来","中","humble","安装","-","都","它","？","使用","为了","可以","功能","认识一下","和","的","不妨","装上","，","互相","确保","install","相关","完整","gazebo","。","呢","系统","ros","*","我们","一个"," "],"title":"安装","title_tokens":["安装"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_3","text":"通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py 注意：为保证模型顺利加载，请将离线模型文件库下载并放置到~/.gazebo/models路径下， https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。","text_tokens":["认识",".","尝试","启动","注意","就","大家","了","：","还",":","路径","顺利","到","它","https","？","可以","控制","为","库","啦","下来","。","osrf","之前","移动","机器人","是不是","通过","在","models","py","com","文件","请"," ","这句","下载","仿真","还要","将","并","一起","命令","把","记得","ros2","环境","_","加载","离线","模型","的","launch","机器","gazebo","/","试试","设计","我们","该","不是","放置","动机","$","下","中","~","运动","保证","接下来","课程","，","放到","么","ros","接下","移动机器人","github"],"title":"运行","title_tokens":["运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#xacro","text":"我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本——XACRO文件。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro","text_tokens":["传递数据","要","代码","重复使用","实现","就","大家","了","过程","给","：","小车","有","link","传感","甚至","还","直接","sudo","摄像","调用","-","常量","每个","做","一些","建模","可以","此时","优化","可编程","不能","你","编程","会","下来","。","传递","接口","一样","感器","install","一个","之前","叫","底盘","移动","同样","包含","是","机器人","语句","升级","通过","很长","在","、","urdf","版本","xacro","传感器","a","像头","变量","尺寸","为了","化","功能","文件","介绍","数据","好","b"," ","时候","包","条件","友好","这句","可","可编","然后","命令","apt","这里","4","把","计算","摄像头","必要","像","写","安装","重复","都","宏","更为","多","模型","加入","的","不同","创建","再用","更","机器","gazebo","设计","我们","定义","如果","先","放置","让","总体","一下","动机","丰富","$","个","描述","函数","复杂","模块","可能","中","humble","使用","文件格式","轮子","—","切分","格式","比如","接下来","，","放到","ros","没有","也","对","没","接下","移动机器人","方法","需要"],"title":"XACRO机器人模型优化","title_tokens":["机器","模型","优化","机器人","xacro"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_4","text":"一些常用的XACRO文件语法，大家了解下。 标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。","text_tokens":["时候","未来","标签","括号","动机","底盘","移动","质量","就","机器人","大家","”","3.14159","语法","$","加大","了","方便","这样","值为","常用","在","通过","把","urdf","、","下","中","里边","安装","了解","调用","xacro","_","针对","都","很","变化","常量","使用","尺寸","修改","名为","一些","可以","模型","轮子","原本","的","不会","文件","比如","用来","位置","，","一行","数据","机器","需要","好","。","pi","这些","m","“","移动机器人","也","不","找","我们","一个","定义"," "],"title":"常量定义","title_tokens":["定义","常量"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_5","text":"如果需要做数学计算，同样是在$加大括号中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 注意：所有数学运算都会转换成浮点数进行，以保证运算精度","text_tokens":["所有","尽量","括号","注意","就","了","有","：","直接","起来","除法","常量","做","修改","很多","可以","相对","运算","数值","会","。","来","一个","未来","怎么","移动","同样","是","机器人","想不起来","加大","通过","在","点数","公式","数据","浮点数","数学","想不起"," ","时候","这","转换成","计算","写","这个","都","换成","某","模型","加入","两个","的","改成","位置","机器","根本","精度","转换","我们","如果","以","动机","得到","$","加法","可能","中","进行","关系","保证","和","比如","，","移动机器人","数学计算","结果","需要","浮点"],"title":"数学计算","title_tokens":["数学计算","数学","计算"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_6","text":"机器人的轮子我们也做成宏定义，定义方式是通过这个 标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。","text_tokens":["几个","时候","要","这","标签","名字","输入","包含","是","机器人","就","了","描述","同时","参数设置","通过","这样","还","在","link","函数","这里","、","把","两句","中","像","关节","里边","记得","设置","调用","-","方式","这个","参数","当","a","joint","b","使用","镜像","宏","c","关系","一些","可以","模型","用到","轮子","和","两个","刚好","的","比如","区分","位置","，","名称","会","机器","需要","一个","好","。","一样","来","也","做成","1","我们","出现","定义"," "],"title":"宏定义","title_tokens":["定义","宏"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_7","text":"宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。","text_tokens":["不是","底盘","仿真","去","某些","包含","是","机器人","了","再","是不是","然后","这种","还","结束","函数","这里","把","模块","中","像","里边","include","调用","为止","到","参数","很","使用","似曾相识","宏","做","一些","可以","模型","相识","优化","另外","c语言","得","加入","和","语言","的","流程","文件","接下来","，","必备","机器","下来","。","似曾","没有","也","嵌套","做成","对","接下","于是","我们","一个","定义"," "],"title":"文件包含","title_tokens":["文件","包含"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_8","text":"","text_tokens":[],"title":"机器人仿真模型配置","title_tokens":["机器","配置","模型","仿真","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_9","text":"第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。","text_tokens":["仿真","是","有","link","第一步","必要","一定","惯性","都","参数","平台","每","属性","和","一步","的","第一","，","确保","gazebo","物理","。","碰撞","因为","一个","需要"],"title":"完善物理参数","title_tokens":["物理","参数","完善"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_2","text":"第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。","text_tokens":["添加","标签","是","主要","link","这样","在","颜色","第二","urdf","中","二步","每","做","配置","为了","可以","所以","第二步","渲染","和","得","一步","为","的","，","不同","gazebo","冗余","。","系统","因为","一个"],"title":"添加Gazebo标签","title_tokens":["添加","gazebo","标签"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_10","text":"第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。","text_tokens":["要","电机","传动装置","仿真","是","了","给","三步","装置","第三","joint","运动","配置","可以","理解","为","的","，","。","传动","一个","第三步"],"title":"配置传动装置","title_tokens":["配置","传动","装置","传动装置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_11","text":"第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。","text_tokens":["添加","要","速度","电机","四步","是","就","了","小车","那","这样","在","交给","下","第四","角度","可以","分配","控制","控制器","两个","的","第四步","，","不同","完成","gazebo","。","插件","来","差速","一个"],"title":"添加控制器插件","title_tokens":["添加","控制器","插件","控制"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_12","text":"接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ])","text_tokens":["learning","如何","}","path","only","arguments",".","state","pose","就","mbot","了","robot","output",":","where","own","[","-","到","the","x","提供","节点","用到","=","launchdescription","file","name","me","下来","]","。","sim","we","pythonlaunchdescriptionsource","{","single","一个","from","pkg","spawner","ament","spwan","worlds","y","if","#","packages","be","urdf","get","sources","include","true","directory","a","py","功能","our","neighborhood","want","correctly","package",")","run","topic","'","actions"," ","into","enabled","publisher","set","python","to","import","have","force","make","doesn","把","return","really","_","world","z","加载","index","you",",","模型","os","screen","的","matter","launch","gazebo","/","join","sure","executable","---","yaw","t","share","change","them","by","考虑","load","includelaunchdescription","val","description","node","中","use","generate","<","!","entity","0.0","接下来","time","，","provided","all","(","def","spawn","ros","接下","items","需要"],"title":"构建仿真环境","title_tokens":["构建","环境","仿真"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_13","text":"万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard 注意：虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。","text_tokens":["learning",".","硬件","启动","注意","了","过程","：","小海龟","两句","小海","有点","以上","很多","节点","控制","此时","见证","=","一句","不过","\"","下来","需要","。","时刻","整个","硬件加速","机器人","bashrc","已经","urdf","比","py","加速","echo","第一","run"," ","into","有点像","仿真","svga","万事俱备","0","twist","命令","基本","ros2","环境","_","keyboard","奇迹","的","流程","海龟","launch","虚拟","机器","gazebo","/","运行","键盘","我们","关闭","俱备","就是","第一句","$","万事","load","第二","vgpu10","复杂","中",">","export","~","teleop","二句","虚拟机","和","接下来","，","时","接下","第二句"],"title":"机器人运动仿真","title_tokens":["运动","机器","仿真","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#ignitiongazebo","text":"随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为Ignition，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/","text_tokens":["一下","迭代","随着","较大",".","仿真","信息","网站","技术","不断","效果","bridge","org","大家","$","有","从","新","在","度","apt",":","sudo","ignition","版本","进步","流畅","humble","官方网站","ros2","-","_","都","平台","变化","试一下","py","www","多","命名","可以","仿真器","官方","渲染","和","新一代","为","的","demos","不妨","camera","ign","，","ignitionrobotics","install","rgbd","launch","更","gazebo","参考","/","。","ros","来","官方网","也","一代","我们","上"," ","真器"],"title":"Ignition：下一代Gazebo","title_tokens":["gazebo","ignition","下一代","一代","："]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_14","text":"learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["learning","used","}","transmission","12",".","2","mbot","max","robot","3","link",":","mass","black","-","hardware","the","publish","x","odometry","+","matrix","=","left","version","blue","acceleration","back","0.2","0.95","length","visual","\"","name","prefix","this","wiki","torque","30","wheel","plugin","{","*","20","colors","find","filename","y","xmlns","command","rgba","diameter","yellow","separation","geometry","false","right","0.16","urdf","izz","include","true","xacro","0.06","reflect","params","important","inertial","frame","size","radius","color","interface",")","mechanicalreduction","diff","topic","rate"," ","so","iyy","?","gray","iyz","box","0.18","to","hardwareinterface","http","ixy","0","list","property","0.025","collision","xml","_","axis","footprint","z","0.4","drive","r","www","update","0.05","1.0","--","gazebo","3.1415926","joints","/","in","base","pi","cylinder","0.20","turngravityoff","m","1","xyz","actuator","cmd","for","origin","tf","parent","source","material","rpy","0.015","type","vel","org","trans","front","0.19","odom","caster","$","and","continuous","macro","controller","motor","value","ixz","fixed","0.001","defining","simpletransmission","5",">","<","joint","!","differential","0.75","child","h","(","is","velocityjointinterface","ros","inertia","ixx","libgazebo","sphere","reference"],"title":"附录：机器人完整模型","title_tokens":["机器","完整","模型","机器人","：","附录"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/","text":"Rviz：三维可视化显示平台 大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾——Rviz，一款三维可视化显示的神器。 Rviz三维可视化平台 机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。 Rviz介绍 一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。 运行方法 $ ros2 run rviz2 rviz2 彩色相机仿真与可视化 摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。 仿真插件配置 关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 主要配置项如下： 标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 标签：加载摄像头仿真插件 运行仿真环境 模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py 图像数据可视化 $ ros2 run rviz2 rviz2 三维相机仿真与可视化 二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。 仿真插件配置 运行仿真环境 $ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py 点云数据可视化 $ ros2 run rviz2 rviz2 激光雷达仿真与可视化 除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。 仿真插件配置 运行仿真环境 $ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py 点云数据可视化 $ ros2 run rviz2 rviz2 Rviz vs Gazebo 好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下，Gazebo是仿真平台，核心功能是创造数据，我们没有机器人或者传感器，它可以帮我们做一个虚拟的，Rviz是可视化平台，核心功能是显示数据，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。 参考链接 https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":["如何","代码",".","mbot","就","大家","开发","一目了然","可视","除了","坐标系","https","装","？","数字","做","理解","一脸","大大","有没有","周边","参考","这幅","类似","来","机","不","项","一个","玩起来","层面","以待","彩色","范畴","自带","效率","py","具体","介绍","臂","当然","手上","三维","还有","等","插件","按照","拭目以待","时候","into","搞定","自动","等等","规划","样","计算","这里","知道","都","平台","或者","价格比","模型","两个","位置","机器","设计","帮","一位","内容","但","内部","这样","load","中","不少","一目","真实","话题","所以","人","图形化","包括","么","最为","讲","很难","方法","github","learning","懵","看到","图像","神器","出厂","可视化",":","摄像","如下","起来","了解","与","到","巧妇难为无米之炊","熟悉","很多","嘉宾","对应","问","intel","对照","了然","看","移动","激光","机械","才","从","通过","、","噪音","成功","先来","自由","核心","二维","渲染","camera","用来","各种","常备","各种各样","消息"," ","可贵","编码","能够","再","颜色","会用","usb","创造","重量级","流程","链接","gazebo","一分","试试","这些","过瘾","不是","type","汽车","主要","范围","肯定","的话","配置","啥","只要","开放式","驾驶","，","没有","也","对","libgazebo","过","并且","自己","信息","类型","上位","了","过程","给","：","世界","话","不到","路径","不想","只有","能","提供","一些","qt","重量","你","啦","会","不过","一种","某些","关于","是","是不是","docs","设置","命名","混淆","功能","软件","激光雷达","相机","体感","分辨","vs","255","相信","上","大大提高","so","拭目","一分钱","rviz","仿真","场景","各样","0","想","常用","提高","ros2","环境","_","这个","加载","多","玩起","难为","什么样","外部","更","虚拟","外部环境","/","涉及","基于","岂","动机","去","laser","工具","本","满意","发布","全都","坐标","运动","获取","只是","格式","试一试","开放","ros","想不到","需要","添加","众多","启动","效果","分析","有","传感","分钱","哪些","显示","一款","问题","参数","它","分辨率","辨率","可以","框架","不能","一句","rgbd","name","。","呢","感器","几个","叫做","标签","自主","眼中","机器人","希望","巧妇","在","已经","出来","像头","传感器","com","量级","数据","rviz2","好","不用","用","run","kinect","图形","这","什么","stereolabs","导航","摄像头","把","拍摄","价格","www","的","打造","launch","运行","畅想","我们","方便","如果","realsense","点云","案例","还是","就是","$","描述","新","这种","长","下","一堆","使用","官方","雷达","和","—","比如","快速","非常","强调","移动机器人","说明"],"title":"**Rviz：三维可视化显示平台**","title_tokens":["可视","可视化","三维","rviz","显示","*","平台","："]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz","text":"大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾——Rviz，一款三维可视化显示的神器。","text_tokens":["如何","这","能够","rviz","看到","眼中","是","机器人","大家","就","图像","了","什么","世界","本","神器","可视","可视化","范畴","摄像头","摄像","显示","一款","中","问题","到","像头","？","拍摄","嘉宾","什么样","重量","—","的","重量级","介绍","量级","，","有没有","机器","三维","。","呢","涉及","ros","讲","没有","畅想","一位","我们","一个","过"," "],"title":"Rviz：三维可视化显示平台","title_tokens":["可视","可视化","三维","rviz","显示","平台","："]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_1","text":"机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。","text_tokens":["众多","懵","信息","看到","效果","分析","就","开发","图像","过程","给","一目了然","传感","可视","可视化","坐标系","哪些","摄像","路径","一款","到","？","数字","做","很多","可以","理解","你","一脸","大大","周边","这幅","。","类似","感器","问","不","了然","看","移动","自主","层面","激光","是","机器人","希望","机械","才","从","通过","在","、","出来","效率","传感器","像头","功能","渲染","软件","用来","数据","各种","臂","当然","还有","三维","相机","激光雷达","255","各种各样"," ","大大提高","搞定","rviz","等等","规划","场景","样","什么","各样","再","0","导航","颜色","计算","这里","把","摄像头","提高","知道","环境","都","模型","的","位置","机器","这些","设计","我们","如果","岂","内容","动机","去","但","就是","描述","内部","长","这样","全都","肯定","坐标","中","一堆","一目","运动","啥","所以","雷达","只是","人","和","比如","快速","，","么","移动机器人","很难","需要","自己"],"title":"Rviz三维可视化平台","title_tokens":["可视","可视化","三维","rviz","平台"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_2","text":"一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。","text_tokens":["添加","图形","rviz","看到","效果","某些","上位","就","是","机器人","开发","了","工具","有","方便","新","出厂","可视","常用","可视化","话","不到","自带","发布","满意","想","显示","在","中","只有","这个","它","平台","或者","做","多","很多","可以","话题","官方"," ","只要","功能","核心","框架","qt","开放式","的","图形化","打造","一句","，","数据","更","机器","。","开放","ros","插件","按照","基于","没有","对应","想不到","对","不","项","消息","我们","一个","如果","也","机","说明","自己"],"title":"Rviz介绍","title_tokens":["rviz","介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_1","text":"$ ros2 run rviz2 rviz2","text_tokens":["rviz2","ros2","run","$"," "],"title":"运行方法","title_tokens":["方法","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_2","text":"摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。","text_tokens":["是","机器人","了","给","传感","常用","摄像头","肯定","摄像","先来","传感器","像头","装","的","，","机器","。","最为","感器","我们","一种","上"],"title":"彩色相机仿真与可视化","title_tokens":["彩色","可视","可视化","相机","仿真","与"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_3","text":"关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 主要配置项如下： 标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 标签：加载摄像头仿真插件","text_tokens":["type","叫做","标签","编码","代码",".","仿真","关于","类型","大家","图像","给","：","描述","主要","传感","范围","摄像头","摄像","如下","噪音","对照","设置","_","这个","都","自由","参数","像头","传感器","分辨率","使用","加载","辨率","提供","配置","命名","模型"," ","项","的","格式","camera","介绍","so","，","name","gazebo","等","。","分辨","ros","插件","对应","感器","libgazebo","我们","方法","需要"],"title":"仿真插件配置","title_tokens":["配置","仿真","插件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_4","text":"模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py","text_tokens":["learning","into","拭目","rviz",".","仿真","信息","看到","以待","mbot","图像","$","在","已经","load","把","摄像头","摄像","中","出来","成功","ros2","_","能","像头","py","配置","模型","不能","camera","，","啦","launch","gazebo","好","。","拭目以待","我们"," ","并且"],"title":"运行仿真环境","title_tokens":["仿真","环境","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_5","text":"$ ros2 run rviz2 rviz2","text_tokens":["rviz2","ros2","run","$"," "],"title":"图像数据可视化","title_tokens":["数据","图像","可视","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_6","text":"二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。","text_tokens":["可贵","realsense","一分钱","点云","仿真","就","想","传感","常用","这种","通过","分钱","摄像头","摄像","起来","不想","环境","像头","传感器","或者","usb","不少","价格","玩起","获取","价格比","可以","二维","过瘾","外部","的","比如","，","数据","不过","三维","相机","体感","一分","外部环境","不用","。","试试","感器","也","不","intel","我们","kinect","玩起来"],"title":"三维相机仿真与可视化","title_tokens":["可视","可视化","相机","三维","仿真","与"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_7","text":"","text_tokens":[],"title":"仿真插件配置","title_tokens":["配置","仿真","插件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_8","text":"$ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py","text_tokens":["learning","rgbd","launch","load","into","gazebo","py",".","ros2","mbot","_","$"," "],"title":"运行仿真环境","title_tokens":["仿真","环境","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_9","text":"$ ros2 run rviz2 rviz2","text_tokens":["rviz2","ros2","run","$"," "],"title":"点云数据可视化","title_tokens":["数据","点云","可视","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_10","text":"除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。","text_tokens":["自动","动机","汽车","移动","激光","是","机器人","传感","除了","摄像头","摄像","像头","传感器","很多","雷达","和","驾驶","的","，","激光雷达","包括","试一试","机器","三维","相机","。","来","常备","也","感器","移动机器人","我们"],"title":"激光雷达仿真与可视化","title_tokens":["激光雷达","可视","可视化","仿真","激光","雷达","与"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_11","text":"","text_tokens":[],"title":"仿真插件配置","title_tokens":["配置","仿真","插件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_12","text":"$ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py","text_tokens":["learning","launch","load","into","gazebo","py",".","ros2","mbot","laser","_","$"," "],"title":"运行仿真环境","title_tokens":["仿真","环境","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_13","text":"$ ros2 run rviz2 rviz2","text_tokens":["rviz2","ros2","run","$"," "],"title":"点云数据可视化","title_tokens":["数据","点云","可视","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz-vs-gazebo","text":"好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下，Gazebo是仿真平台，核心功能是创造数据，我们没有机器人或者传感器，它可以帮我们做一个虚拟的，Rviz是可视化平台，核心功能是显示数据，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。","text_tokens":["信息","启动","就","大家","了","有","传感","可视","可视化","不到","显示","了解","到","它","做","熟悉","巧妇难为无米之炊","一些","很多","可以","啦","会","不过","。","来","感器","一个","几个","是","机器人","是不是","巧妇","通过","在","已经","传感器","混淆","核心","功能","具体","软件","数据","手上","好","相信","用"," ","时候","这","rviz","仿真","再","常用","这里","环境","会用","平台","或者","难为","创造","两个","的","流程","虚拟","机器","gazebo","帮","我们","如果","不是","案例","还是","下","的话","使用","真实","所以","和","，","非常","强调","讲","没有","也","对","方法","自己"],"title":"Rviz vs Gazebo","title_tokens":["rviz","vs"," ","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_14","text":"https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":["stereolabs","docs","rviz2","www",":","/",".","rviz","com","ros2","github","https"," "],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/","text":"RQT：模块化可视化工具 ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具——rqt。 rqt介绍 正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，接下来，大家就可以跟随我的思路，我们一起来试一试。 日志显示 图像显示 接口控制 数据曲线 数据包管理 节点可视化 参考资料 https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":["指令","麻烦",".","强大","启动","实现","就","大家","开发","了","图像","：","可视","可视化",":","sudo","显示","摄像","起来","有点","里边","-","about","en","它","https","每个","资料","提供","一些","模块化","很多","可以","节点","用到","console","此时","控制","另外","qt","一句","会","不过","下来","参考","。","接口","一样","来","类似","install","一种","一个","而","html","是","通过","docs","在","已经","concepts","很","像头","曲线","我","命名","有些","功能","具体","小","日志","介绍","数据"," ","界面","跟随","rviz","场景","思路","然后","命令","apt","数据包","摄像头","难免会","安装","这个","都","加载","tutorials","rqt","的","前","难免","更","管理","/","基于","参考资料","我们","using","org","只","简单","一","觉得","工具","$","这样","模块","可能","中","下","humble","的话","使用","进行","和","—","比如","接下来","，","试一试","ros","操作","也","接下","正如","需要"],"title":"**RQT：模块化可视化工具**","title_tokens":["可视","可视化","模块化","模块","*","rqt","工具","："]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt","text":"ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具——rqt。","text_tokens":["麻烦","一种","rviz","强大","只","简单","场景","觉得","就","了","工具","图像","可视","已经","可视化","摄像头","模块","显示","可能","中","下","摄像","难免会","有点","的话","很","像头","使用","提供","一些","模块化","有些","用到"," ","此时","功能","另外","—","rqt","的","比如","，","难免","会","不过","更","。","ros","操作","我们","一个","需要"],"title":"RQT：模块化可视化工具","title_tokens":["可视","可视化","模块化","模块","rqt","工具","："]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt_1","text":"正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，接下来，大家就可以跟随我的思路，我们一起来试一试。","text_tokens":["指令","界面","跟随","rviz","而","启动","一","实现","是","就","大家","开发","了","工具","$","思路","通过","可视","在","可视化","这样","然后","命令","sudo","apt","模块","起来","humble","安装","里边","-","这个","都","它","加载","使用","每个","进行","我","命名","很多","可以"," ","功能","qt","和","具体","rqt","小","的","我们","前","一句","接下来","，","install","试一试","下来","。","ros","一样","基于","来","也","类似","接下","正如","一个","需要"],"title":"rqt介绍","title_tokens":["介绍","rqt"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_1","text":"","text_tokens":[],"title":"日志显示","title_tokens":["显示","日志"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_2","text":"","text_tokens":[],"title":"图像显示","title_tokens":["图像","显示"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_3","text":"","text_tokens":[],"title":"接口控制","title_tokens":["控制","接口"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_4","text":"","text_tokens":[],"title":"数据曲线","title_tokens":["数据","曲线"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_5","text":"","text_tokens":[],"title":"数据包管理","title_tokens":["数据","管理","数据包"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_6","text":"","text_tokens":[],"title":"节点可视化","title_tokens":["可视","节点","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_7","text":"https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":["docs","tutorials",":","console","/",".","org","ros","concepts","humble","using","about","-","en","rqt","html","https"," "],"title":"参考资料","title_tokens":["资料","参考","参考资料"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/","text":"资源汇总 常用框架 自主导航 比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/ 自动驾驶 自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/ 路径规划 此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/ 机器人学 ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。 视频课程 斯坦福大学公开课 —— 机器人学 台大机器人学之运动学 Self-Driving Cars with ROS2 & Autoware 古月学院 常用链接 ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":["要","知识","学习","任何","代码",".","当今","工程","社区","2","实现","就","大家","开发","了","有","这套","：","本书","大学","感兴趣",":","视频","路径","台大","热门","-","en","仔细","https","导论","行业","guyuehome","提供","汇总","很多","可以","控制","开课","框架","重在","得","被","会","公开课","基本功","autoware","参考","roscon","。","即便","wiki","documentation","对应","&","不","一种","一个","检测","几个","《","auto","居","自主","移动","autowareauto","找到","包含","是","机器人","内功","html","机械","docs","在","碰撞检测","、","版本","结合","with","io","感兴","功能","com","classic","gazebosim","臂","各种","相关","修炼","还有","等","自身","好","除此","上"," ","选择","这","自动","实操","阅读","工程师","运动学","navigation","规划","具备","http","兴趣","理论知识","人学","常用","导航","基本","中文","每一","斯坦福","ros2","感知","这个","都","index","www","多","self","推荐","资源","之外","书籍","经典著作","的","视觉","链接","更","机器","完整","gazebo","/","理论","这些","github","我们","如果","ubuntu","cars","之一","内容","动机","此外","org","商业","仔细阅读","丰富","一本","除此之外","福大","斯坦福大学","cn","工具","经典","基本功能","称为","学院","模块","人手","中","humble","机器人学","著作","使用","进行","运动","至于","autowarefoundation","moveit","robots","典型","导航系统","和","驾驶","—","比如","快速","分拣","，","算法","非常","gitlab","课程","技能","driving","商业化","》","古月","ros","系统","最为","碰撞","情况","之","也","对","移动机器人","公开","应用","必备","著名","自己"],"title":"**资源汇总**","title_tokens":["资源","汇总","*"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_1","text":"","text_tokens":[],"title":"资源汇总","title_tokens":["资源","汇总"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_2","text":"","text_tokens":[],"title":"常用框架","title_tokens":["框架","常用"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_3","text":"比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/","text_tokens":["要","内容","动机","任何","代码","移动","自主",".","org","navigation","实现","具备","机器人","大家","开发","了","这套","：","导航","在","基本",":","基本功能","中","ros2","这个","都","https","使用","进行","提供","可以","功能","框架","导航系统","和","的","比如","快速","，","算法","会","各种","相关","机器","完整","基本功","链接","好","参考","/","。","即便","ros","系统","也","移动机器人","不","应用","我们","如果","上"," ","自己"],"title":"自主导航","title_tokens":["导航","自主"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_4","text":"自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/","text_tokens":["几个","auto","这","之一","自动",".","当今","org","autowareauto","社区","规划","商业","实现","丰富","包含","是","机器人","大家","了","有","：","兴趣","感兴趣","在",":","、","模块","中","热门","感知","这个","https","行业","www","autowarefoundation","很多","可以","io","控制","典型","框架","功能","感兴","驾驶","和","—","的","，","链接","非常","gitlab","机器","autoware","一个","等","商业化","参考","/","。","ros","系统","最为","也","对","应用","一种","如果","著名"," "],"title":"自动驾驶","title_tokens":["驾驶","自动"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_5","text":"此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/","text_tokens":["这","内容","此外","找到",".","org","规划","是","大家","机械","在",":","碰撞检测","经典","、","中","这个","都","https","使用","运动","多","moveit","可以","功能","框架","的","视觉","分拣","，","链接","臂","非常","相关","更","还有","等","/","。","碰撞","ros","也"," ","检测"],"title":"路径规划","title_tokens":["规划","路径"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_6","text":"ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。","text_tokens":["《","知识","实操","学习","阅读","工程","工程师","除此之外","仔细阅读","一本","是","内功","机器人","开发","就","工具","大家","有","本书","理论知识","人学","经典","称为","每一","中文","版本","人手","选择","结合","机器人学","仔细","都","导论","著作","至于","可以","推荐","之外","重在","得","书籍","经典著作","的","被","比如","，","自身","相关","机器","技能","修炼","。","理论","ros","》","这些","情况","除此","对应","必备"," "],"title":"机器人学","title_tokens":["机器人学","人学","机器","机器人"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_7","text":"斯坦福大学公开课 —— 机器人学 台大机器人学之运动学 Self-Driving Cars with ROS2 & Autoware 古月学院","text_tokens":["cars","运动学","斯坦福大学","福大","机器人","大学","人学","学院","斯坦福","台大","ros2","-","机器人学","运动","self","with","开课","—","driving","公开课","机器","autoware","古月","之","公开","&"," "],"title":"视频课程","title_tokens":["视频","课程"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_8","text":"ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":["居",".","org","2","html","http","cn","：","docs",":","humble","ros2","en","https","index","guyuehome","www","robots","com","classic","gazebosim","gazebo","/","古月","roscon","ros","wiki","documentation","github","ubuntu"," "],"title":"常用链接","title_tokens":["常用","链接"]}]}