{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"引言 机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的 电气时代 。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的 数字时代 ，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发， 智能机器人时代 正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。 教程链接汇总 课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/90 博客泡圈： https://www.guyuehome.com/","text_tokens":["缺少","操控","最佳","机器"," ","视觉","教程","最为","时代","ai","就是","我们","要求","更加","呈","github","不断丰富","逐渐","前夜","自动","井喷","这是","技术","agv","三个","、","对","横跨","：","快速","人类","图文","动作","业生","https","之后","人工",":","汇总","不断","仿生","劳动力","等","拉开","电气","爆发","主要","传感","局部","由示","软件","2000","有限","检测","八十","工业","系统","层面","引言","视频","家庭","俗称","动力","按照","是","后","也","robot","operating","源码","狗","十年","发展","电机","计算机","七八十","控制","机器人","没有","过程","载体","驱动器","高","自主","状","泡圈","之一","教器","不过","而言","感知","www","，","并","tutorials","操作系统","guyuehome","id","伺服","重要","提出","成为","大","七八十年",".","年前","了","出现","gitee","21","关注","类型","感器","传感器","汽车","时期","于","完全","只能","应用","的","智能","_","和","circledetail","驱动","—","伺服电机","减速机","工厂","智能化","system","计算","生产","太","环境","人工智能","2015","ros2","更","/","多","链接","劳动","八十年","博客","拉开序幕","bubble","90","帮助","服务","七八","减速","送餐","此时","四足","序幕","控制器","这","操作","命令","必将","热点","工业生产","经历","随着","。","执行","数字","正式","课程","年","依然","算机","设备","问答","驾驶","com","class","丰富","思考","但是","开发","释放","主角","book"],"title":"引言","title_tokens":["引言"]},{"location":"#_1","text":"机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的 电气时代 。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的 数字时代 ，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发， 智能机器人时代 正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。","text_tokens":["缺少","操控","最佳","机器"," ","视觉","最为","时代","ai","就是","我们","要求","更加","呈","不断丰富","逐渐","前夜","自动","井喷","这是","技术","agv","三个","、","对","横跨","快速","人类","动作","业生","之后","人工","不断","仿生","劳动力","等","拉开","电气","爆发","主要","传感","局部","由示","软件","2000","有限","检测","八十","工业","系统","层面","家庭","俗称","动力","按照","是","后","也","robot","operating","狗","十年","发展","电机","计算机","七八十","控制","机器人","没有","过程","载体","驱动器","高","自主","状","之一","教器","不过","而言","感知","，","并","操作系统","伺服","重要","提出","成为","大","七八十年","年前","了","出现","关注","类型","感器","传感器","汽车","时期","于","完全","只能","应用","的","智能","和","驱动","—","伺服电机","减速机","工厂","智能化","system","计算","生产","太","环境","人工智能","2015","更","多","劳动","八十年","拉开序幕","帮助","服务","七八","减速","送餐","此时","四足","序幕","控制器","这","操作","命令","必将","热点","工业生产","经历","随着","。","执行","数字","正式","课程","年","依然","算机","设备","驾驶","丰富","思考","但是","开发","释放","主角"],"title":"引言","title_tokens":["引言"]},{"location":"#_2","text":"课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/90 博客泡圈： https://www.guyuehome.com/","text_tokens":["tutorials","ros2","id","guyuehome"," ","/","教程","博客","bubble","90","视频",".","gitee","21","源码","github","_","circledetail","课程","：","图文","https",":","泡圈","问答","com","class","www","book"],"title":"教程链接汇总","title_tokens":["链接","汇总","教程"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["但","机器"," ","许可","责任","创新","ai","集","复制","武汉","使用","追究","法律","声明","合法","累积","一体","修改","对本","及","高质","其它","120","地区","、","brand","声明者","精锋","图书","合作","有限公司","众多","个人","等","线上","交流","究其","包括","有限","面向","明者","生态","高质量","视频","通过","模式","任何","捆绑","上述","是","源码","居","创建","进行","法律责任","提供","超过","高校","平台","（","公司","与","机器人","小时","万人","学习","不","实践","单位","镜像","人才培养","校企","版权","》","抄录","未经","产品","赋能","内容","微控","www","培养","，","建立","1000","guyuehome","均","人才","致力于","优质","仅限","华语","学",".","违反","上","古月","本","面向未来","销售","被","）","万字","的","和","出版","用户","如需","质量","请","追究其","限于","社区","构建","为","联系","书面","努力","作品","拥有","传播","科技","课件","@","未来","网站","知名","+","。","ros","交流学习","授权","课程","年","至今","致力","所有","有权","com","将","企业","不得","《","开发","2011","依法","或","学习者","畅销"],"title":"关于我们","title_tokens":["我们","关于"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["机器"," ","创新","ai","集","累积","一体","及","高质","120","地区","、","图书","合作","众多","等","线上","交流","面向","生态","高质量","视频","通过","模式","是","居","创建","提供","超过","高校","平台","（","与","机器人","小时","万人","学习","实践","人才培养","校企","》","赋能","内容","www","培养","，","建立","1000","guyuehome","人才","致力于","优质","华语",".","古月","面向未来","）","万字","的","出版","用户","质量","社区","构建","为","努力","未来","知名","+","。","ros","交流学习","课程","年","至今","致力","com","企业","《","开发","2011","学习者","畅销"],"title":"学机器人，上古月居","title_tokens":["学","，","机器","上","古月","机器人","居"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["但"," ","许可","责任","复制","武汉","使用","追究","法律","声明","合法","修改","对本","其它","、","brand","声明者","精锋","有限公司","个人","等","究其","包括","有限","明者","视频","任何","捆绑","上述","源码","居","进行","法律责任","公司","与","学习","不","单位","镜像","版权","抄录","未经","产品","微控","，","guyuehome","均","仅限",".","违反","古月","销售","本","被","的","和","用户","如需","请","追究其","限于","为","联系","书面","作品","拥有","传播","科技","课件","@","网站","。","授权","课程","所有","有权","com","将","不得","依法","或"],"title":"版权声明","title_tokens":["声明","版权"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/","text":"ROS/ROS2是什么 智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。 ROS的诞生 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人—— PR2 ，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS的发展 ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称 ROSCon ，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。 ROS的特点 ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。 参考资料 关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["来看","图","机器","重新","教程","左右","绝对","维基百","以上","时代","干","手机","大部","下来","全球","没想到","garage","论坛","查看","处理","高效","高度","繁荣","google","排名","全","横跨","最后","上图","不多","推进","：","人类","进化","上市","总体","怀揣","局限性","电脑","c","笔记本","访问","a","肩膀","数据库","还有","爆款","越来","陪","一起","采用","事情","这样","做成","分享","许可证","知识","却","系统","组成","2007","动机","巨大","一家","体感","这些","模块","绝大部分","大部分","大笔","条","大学","嘉宾","源码","自身","提供","做出","木头","详细","专业","又","只想","这里","福大","平台","联合","宽松","学习","不是","下","受限","还","不想","后期","人形","分钟","为什么","pr2","玩耍","各项","有志","数据","价格","成为","研发","大","直接","更为","turtlebot","真正","跑","百科","25","包","根据","上","初期","几百","其中","工具","差不多","有","精致","同时","应用","智能","和","可为","迅猛","圈","算是","成熟","要","暴露","时间","强悍","一款","近两年","简单","革命","同学","一大笔钱","会","受限于","板块","参考资料","类似","据库","增长速度","为例","当时","努力","2015","浪潮","ros2","应用软件","几百万","资金","多","发布","望而却步","移动机器人","都","采购","帮助","复杂","一些","步伐","b","更新","操作","此时","所有人","改为","同理","亚马逊","促使","向","随着","20","地域","越来越","商业","微软","叫做","总称","接下来","但是","机械","推出","棒","此","从","个","许可","引擎","做","月","讨论","org","使用","适用","统计","普遍","当初","人数","github","着","此后","答案","该","这是","discourse","好","技术","商业化","、","roscon","而且","不乏","conference","维基百科","不开","提取","下载","神秘","个人","等","线上","外观","为了","配合","才","不下","想法","选择","图中","生态","只要","不要","来","通过","部分","无论是","问题","效率","新","operating","robot","充足","浏览","熨烫","历经","多媒体系统","相关","很多","公司","出来","找到","无论","成本","注意","生态系统","没有","这群","虽然","进步","无聊","版本","一届","不到","，","操作系统","神兵","人才","加快","大步","方式","今日","150","等等","之","沉淀","很快","完成","一系","年底","工程师","广泛","一下","同一","感器","一套","；","古月","快","五年","于","发表","程度","大有可为","稳定","2017","xbox","第一","简称","创意","入门教程","以叠","国家","有没有","单独","光靠","这款","身影","次数","限于","得以","做到","社区","80","之王","开发者","开始","游戏机","长远","核心","全新","大大","说明","明智","一段","年轻人","向前","风险投资","模块化","率","后续","容易","诞生","更","站","关键","index","使命","每年","2012","很","家","原因","接下","存储","疫情","体系","万","其次","托管","创始","回答","来自","可能","网站","聊天","作为","经历","特性","无疑","。","正式","之内","肩负","这位","ubuntu","既然","了解","通常","更好","问答","将","那","带领","重量","实现","零部件","深知","几个","给出","臂","成功","还是","关于","举办","资料","最高","你","打","多年","美妙","就是","上去","元素","资本","非常","别人","齐聚一堂","比如","看到","搜索","本身","packages","学术","第一次","入门","系列","居高不下","乐意","制造","各样","造","就","看中","集合","呢","踏上","能够","主阵地","不断更新","提问","不断","尝试","每","软件系统","时至今日","起","代码","电路","所以","传感","真的","起点","离不开","物体","维基","同样","第一个","百科全书","层面","250","掌握","记录","独立","一切","机制","任何","自己","动力","一系列","官方","游戏","进行","实验室","居","向前走","日常","增长","标准","同年","台球","想到","参考","来到","斯坦福","目标","泡泡","控制","他们","可以","具备","万人","缩短","野蛮","不","推荐","2","款","确定","价格便宜","跟随","水下","早期","两个","前","场景","多项","支持","产品","起来","巨人","并","对于","用于","四项","研究","重要","总而言之","5","案例","世界","零","肯定","用",".","了","友好","本","涉及","代表","被","几乎","的","生态系","实验","方法","频繁","功能","笔记本电脑","智能化","personal","讲解","system","在","性能","说干就干","只","之上","到","为","2014","速度","年轻","大量","基于","其实","挑战","/","限性","直到","每个","跨平台","这","？","由","毛巾","全球化","回到","大家","基本上","上边","认识","ros","2010","大会","尽量","投了","剪头发","课程","kinect","曲线","至今","特点","绝大","全人类","掀起","所有","趋势","之旅","活跃","解决","100","活动","针对","重量级","叠","2011","百万","项目","或者","迎来","局限","面纱","加","最佳","访问量","时候","新鲜"," ","其他","柔性","嵌入","最为","全书","已有","浏览量","远","所学","效果","一步","活跃度","我们","近几年","衣服","笔记","月底","媒体","而生","逐渐","页面","终于","开发工具","2022","时间轴","120","对","把","长期","希望","快速","复用","领域","变为","windows","虽好","整合","成果","提高","头发","版","阵地","因","主要","不仅","以","软件","各种各样","智慧","已经","工业","正式版","团队","清晰","视频","轮子","张图","围绕","肩负着","斯坦福大学","“","洗衣","是","有人","也","linux","情况","扩展","原型","一大笔","发展","没想","做饭","world","基本","一大步","机器人","中","推动","几年","过程","这一波","利器","开源","助推","而言","度","复合","内容","代","新鲜事","啦","全人","ros1","因为","整理","提出","低","intel","亚马","便宜","做法","多万","结晶","40","”","名称","扫地","新增","迭代","传感器","汽车","这个","如何","正如","完全","介于","—","如果","却步","加上","一样","通信","用户","两年","来讲","各种","不同","设计","一群","让","一定","正在","嵌入式","底盘","得到","熟悉","标志","一次","首先","然后","万万","索引","移动","给","answers","人","风险","wiki","从中","统统","框架","部件","服务","收拾","原本","资源","多媒体","进入","方向","轰动","现在","工程","认识一下","投资","普及","欢迎","一大","一堂","四大","万左右","15","年","一个","苹果","什么","甚至","humble","willow","开发","而","量级","青年"],"title":"ROS和ROS2是什么","title_tokens":["和","ros2","ros","是","什么"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#rosros2","text":"智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。","text_tokens":["，","ros2","面纱","操作系统","一起","机器","挑战"," ","提出","系统","时代","巨大","下来","我们","了","接下","操作","一下","是","这","？","方向","嘉宾","大家","而生","应用","智能","的","高度","向","又","认识一下","认识","对","。","ros","全","机器人","中","智能化","这位","什么","就","进化","呢","掀起","神秘","那","接下来","正在","场景","开发","带领","重量","重量级","量级"],"title":"ROS/ROS2是什么","title_tokens":["ros2","ros","是","/","什么"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人—— PR2 ，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。","text_tokens":["给出","时候","机器"," ","个","图","柔性","做","你","打","干","手机","就是","我们","非常","别人","衣服","处理","看到","而生","学术","高效","答案","第一次","技术","系列","、","横跨","最后","：","就","呢","而且","尝试","头发","个人","软件系统","等","外观","电路","所以","因","才","想法","越来","陪","真的","一起","事情","这样","软件","分享","图中","同样","物体","已经","却","系统","只要","团队","层面","2007","组成","独立","一切","自己","问题","一系列","斯坦福大学","洗衣","效率","是","条","大学","有人","也","robot","充足","实验室","向前走","做出","木头","原型","专业","熨烫","福大","标准","平台","做饭","台球","联合","斯坦福","很多","出来","找到","一大步","机器人","他们","可以","中","推动","没有","不","不是","2","虽然","款","还","不想","无聊","后期","分钟","代","不到","为什么","，","对于","玩耍","并","pr2","用于","有志","操作系统","研究","因为","重要","大步","整理","5","低","成为","肯定","用","了","很快","完成","一系","同一","上","一套","初期","其中","涉及","有","精致","这个","如何","应用","的","智能","和","实验","第一","—","如果","以叠","功能","圈","有没有","personal","要","光靠","这款","在","得以","说干就干","性能","一款","强悍","只","设计","一群","类似","为例","当时","向前","一次","叠","容易","诞生","应用软件","基于","更","资金","多","人","都","从中","框架","帮助","复杂","服务","收拾","一些","部件","很","家","操作","此时","所有人","？","这","毛巾","轰动","大家","可能","聊天","。","一大","ros","之内","剪头发","年","一个","苹果","既然","越来越","什么","甚至","所有","100","那","开发","针对","机械","实现","但是","零部件","或者","深知","青年"],"title":"ROS的诞生","title_tokens":["的","ros","诞生"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_1","text":"ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称 ROSCon ，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。","text_tokens":["局限","从","成功","机器"," ","举办","教程","做","多年","没想到","大部","时代","全球","我们","使用","适用","garage","资本","当初","齐聚一堂","笔记","月底","逐渐","着","终于","此后","该","这是","2022","时间轴","居高不下","把","roscon","、","设计","长期","迎来","各样","快速","就","看中","变为","不乏","虽好","局限性","电脑","conference","能够","提取","每","笔记本","版","个人","等","线上","起","为了","所以","传感","爆款","不下","不仅","越来","起点","采用","软件","分享","各种各样","第一个","已经","系统","正式版","团队","2007","部分","一家","体感","问题","肩负着","斯坦福大学","绝大部分","大部分","自己","是","大笔","大学","operating","robot","也","官方","游戏","进行","原型","历经","一大笔","只想","发展","没想","福大","同年","增长","想到","这里","world","斯坦福","公司","出来","控制","机器人","他们","成本","注意","中","可以","推动","几年","过程","野蛮","开源","下","受限","这群","款","确定","助推","价格便宜","跟随","早期","版本","后期","前","支持","一届","，","pr2","操作系统","因为","重要","价格","加快","5","提出","成为","intel","大","直接","亚马","便宜","而","turtlebot","真正","很快","了","年底","名称","扫地","感器","迭代","传感器","几百","其中","本","这个","于","被","五年","应用","的","稳定","介于","和","2017","xbox","第一","简称","—","却步","加上","笔记本电脑","一样","圈","功能","两年","成熟","暴露","单独","system","身影","时间","在","限于","各种","讲解","一款","之上","近两年","开发者","到","一大笔钱","为","2014","开始","游戏机","让","会","受限于","大大","全新","类似","底盘","年轻","熟悉","标志","年轻人","风险投资","2015","万万","ros2","诞生","几百万","更","给","发布","多","望而却步","限性","直到","风险","人","关键","每个","使命","服务","步伐","每年","2012","原因","原本","疫情","操作","改为","这","进入","亚马逊","创始","回到","现在","来自","投资","经历","随着","普及","。","ros","一大","2010","正式","投了","大会","年","肩负","kinect","一堂","ubuntu","一个","越来越","了解","绝大","所有","humble","商业","微软","叫做","willow","但是","开发","2011","推出","百万","项目"],"title":"ROS的发展","title_tokens":["的","发展","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_2","text":"ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["此","臂","还是","机器"," ","重新","从","引擎","许可","嵌入","做","已有","远","一步","就是","全球","下来","我们","上去","使用","普遍","别人","非常","比如","看到","媒体","本身","着","开发工具","繁荣","技术","商业化","把","、","对","制造","最后","各样","推进","：","快速","造","复用","领域","集合","就","人类","上市","windows","怀揣","整合","c","成果","提高","a","肩膀","时至今日","越来","一起","以","这样","软件","做成","分享","智慧","各种各样","许可证","已经","工业","生态","系统","组成","动机","不要","来","机制","部分","轮子","无论是","一家","自己","这些","围绕","模块","“","是","新","也","linux","自身","向前走","发展","这里","多媒体系统","标准","平台","很多","公司","目标","无论","机器人","他们","可以","中","生态系统","具备","宽松","缩短","不是","开源","水下","还","进步","人形","多项","产品","支持","复合","巨人","，","并","用于","全人","ros1","人才","今日","案例","零","成为","直接","之","沉淀","做法","跑","了","结晶","”","友好","广泛","；","新增","上","工具","汽车","有","代表","这个","被","正如","完全","同时","应用","的","智能","和","生态系","创意","功能","通信","智能化","身影","来讲","时间","在","各种","做到","社区","简单","到","设计","会","长远","核心","嵌入式","明智","向前","模块化","率","ros2","更","移动","给","移动机器人","多","站","都","采购","统统","跨平台","家","b","体系","多媒体","同理","这","由","促使","全球化","大家","特性","。","ros","尽量","四大","一个","至今","越来越","通常","特点","全人类","商业","将","总称","那","开发","机械","实现"],"title":"ROS的特点","title_tokens":["的","特点","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_3","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。","text_tokens":["加","最佳","从","新鲜","来看"," ","关于","访问量","最高","教程","其他","左右","最为","月","维基百","你","以上","讨论","绝对","浏览量","大部","就是","活跃度","全球","org","我们","近几年","使用","元素","统计","非常","论坛","查看","比如","人数","看到","packages","页面","discourse","这是","排名","、","乐意","上图","希望","不多","：","快速","就","呢","总体","整合","维基百科","下载","每","访问","数据库","等","越来","选择","维基","已经","250","清晰","记录","通过","部分","任何","张图","动力","问题","这些","绝大部分","大部分","是","新","源码","也","情况","浏览","日常","发展","这里","增长","相关","参考","很多","基本","中","几年","可以","万人","机器人","学习","这一波","不","利器","两个","助推","而言","度","起来","新鲜事","，","各项","四项","数据","神兵","重要","方式","总而言之","提出","研发","成为","大","150","等等","更为",".","多万","了","百科","40","；","包","25","上","根据","本","差不多","机器","其中","有","代表","发表","快","程度","大有可为","应用","的","和","可为","迅猛","频繁","如果","国家","功能","用户","算是","次数","在","各种","社区","80","不同","革命","开发者","到","速度","说明","核心","会","得到","据库","正在","增长速度","浪潮","索引","其实","answers","发布","多","给","人","wiki","都","每个","index","资源","很","存储","万","？","这","回答","基本上","大家","现在","上边","网站","作为","无疑","。","ros","15","万左右","20","一个","曲线","什么","越来越","地域","绝大","趋势","问答","活跃","活动","开发","棒","几个"],"title":"ROS的社区","title_tokens":["的","社区","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#_1","text":"关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["从","机器","关于","资料"," ","教程","你","最为","美妙","全书","所学","效果","大部","我们","使用","github","搜索","好","google","入门","技术","120","最后","踏上","主阵地","不开","不断更新","提问","不断","还有","阵地","代码","配合","主要","离不开","一起","分享","知识","百科全书","掌握","视频","部分","问题","绝大部分","大部分","是","也","居","提供","扩展","详细","这里","参考","来到","找到","泡泡","中","机器人","可以","万人","学习","开源","推荐","还","内容","，","啦","重要","世界","成为","百科","工程师","古月","本","工具","有","这个","几乎","的","和","方法","入门教程","—","要","在","社区","之王","同学","会","开始","一定","参考资料","板块","一段","努力","首先","然后","后续","大量","ros2","都","其次","更新","托管","这","大家","工程","网站","作为","欢迎","。","ros","课程","一个","绝大","更好","所有","之旅","解决","将","开发","项目","几个"],"title":"参考资料","title_tokens":["参考","参考资料","资料"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/","text":"ROS2对比ROS1 在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。 ROS1的局限性 首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。 全新的ROS2 ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。 ROS2 vs ROS1 系统架构 在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。 DDS通信 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。 核心概念 ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。 编码方式 再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。 命令行 最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随教程，你就会慢慢理解这些特性。","text_tokens":["足够","但","来看","机器","重新","么","是因为","ament","彼此","教程","算力","一种","以上","级别","有且","时代","大部","手机","全球","可移植","完整性","可选","稍安","更加","处理","以下","批量","出错","修改","一页","听说","陆续","变化","三个","揭秘","全","最后","：","保留","一本","哪些","总体","结合","怀揣","局限性","安全性","电脑","国际标准","交道","还有","新版","对象","生活","越来","似乎","这样","做成","封装","理解","整体","更换","系统","移植","干扰","巨大","升级","雷达","一一","一家","自家","这些","再","绝大部分","大部分","伙伴","装修","提供","通信协议","物","这里","最终","平台","run","变得","学习","微控制器","不是","时","下","单兵作战","课时","另外","最早","前方","还","不过","发","举","属性","不断涌现","为什么","pr2","建立","名字","至关","厂家","数据","middleware","研发","大","直接","真正","学","实时性","类型","信号","条件","命令行","上","几百","其中","工具","有","）","同时","应用","智能","当","api","和","连接","不会","高昂","要","地方","第二个","时间","走向","rosrun","翻新","一款","简单","交给","100ms","会","编写","推倒","类似","相对","成","无法","ros2","几百万","编码","常用","发布","多","都","运算","图片","它","受制于","大幅度","复杂","灵活","一些","应用层","导致","操作","总体而言","分散","还会","网络","所示","随着","由于","打成","udp","依然","越来越","过","走向市场","指定","乱麻","客户","如","设备","商业","先进","叫做","丰富","保障","但是","主角","或","图像","天翻地覆","突然","幅度","编译","带来","从","节点","安全","做","更具","体现","暂且","强","学术研究","python3","更接","使用","第二代","适用","工作站","运动学","适合","二代","布式","vs","定性","中间","涌现","答案","搭载","千差万别","好","颠覆","深入","联网","该","opensplice","至关重要","、","历史使命","实时","之后","不难","rtos","迁移","迈过","等","为了","选择","面对","这台","只要","不要","来","加入","看","部分","通过","问题","担忧","后","初次","充足","tcp","保证","用到","确实","中间层","定义","走","选项","二个","相关","（","很多","python","找到","公司","完整","与","无论","最大","成本","注意","没有","高","虽然","诸多","改","版本","，","操作系统","基础","方式","通用","入侵","不好","出现","编程语言","完成","之间","真实","；","一下","广泛","策略","考虑","一套","广泛应用","表示","可移植性","语言","不再","共享内存","继续","于","唯一","只能","稳定","接入","批量生产","第一","也许","驱动","简称","产品化","符合","做到","社区","产品开发","计算","开发者","指挥","是从","长远","说明","开始","核心","全新","软件开发","环境","最新","后续","率","诞生","盖","更","较","why","链接","很大","性","会成","macos","使命","角色","常","可读","主","需求","1ms","切换","可能","变革","接口","特性","。","小","一代","经常","存在","历史","行人","了解","更好","两者","市场","客户端","那","将","企业","带领","方便","实现","fastrtps","discovery","成功","大幅","打交道","你","现有","慢慢","就是","经验","要求","一团","单兵","非常","面临","比如","可靠","以及","网络连接","内部","学术","通信接口","多个","编码方式","master","勿躁","没","新一代","调试","基本保障","各样","过去","角度","就","呢","能够","消费","简单明了","不断","除了","c++","每","轻松","软件系统","调用","代码","只有","比","所以","解算","同样","面向","第一个","5g","层面","编译系统","独立","机制","家庭","明显","任何","消费市场","听","自己","动力","一团乱","按照","topic","良好","毛坯房","测试","进行","加密","他","层","接触","收","方案","担心","除此之外","标准","理器","目标","国际","控制","mcu","流程","他们","安装","可以","具备","动力学","几点","以下几点","不","完善","colcon","款","运动","两个","专注","跟随","差异","场景","支持","产品","强壮","并","体验","对于","用于","有线","只是","不太","研究","重要","相比","运行","肯定","用","通用性","受制","了","本","进程","重来","内存","而已","先","几乎","的","二种","可选项","方法","多功能","ceo","纠结","翻地","频繁","功能","集成","讲解","rostopic","右侧","在","性能","之上","适配","到","为","完","内","不用","航天","发送","大量","基于","其实","挑战","系统工程","/","建筑","干掉","限性","发现","应该","每个","跨平台","当然","一行","道坎","控制器","？","这","延迟","未来","需要","大家","复杂度","协议","之外","含义","对比","周期","ros","尽量","管理","左侧","课程","放在","怎样","便于","发成","绝大","接近","所有","印象","过来","解决","致使","诟病","针对","从而","标准化","管理器","或者","项目","省略","百万","小伙","局限","最佳","时候"," ","其他","嵌入","最为","成功经验","稳定性","看看","一步","编译器","我们","售价","部署","原有","自","大部头","黑客","配置","宕机","底层","上升","小伙伴","最","到底","具体","自动","格局","移植性","意义","远比","例子","话题","一致","对","把","复用","即可","windows","可读性","面向对象","分布式","提高","开发方式","不难理解","作战","满足","解密","不仅","主要","软件","各种各样","有限","全部","减少","已经","房子","颠覆性","catkin","尽力","去","下要","张图","借鉴","下边","借助","概念","发布者","间层","是","dds","也","linux","大致","发展","总之","基本","消失","中","机器人","电脑系统","wifi","总结","部头","过程","尤其","rmw","开源","换成","启动","力学","库会","是否","而言","阶段","啦","架构","不爽","ros1","因为","第二种","android","行为","信息","陌生","除此","名称","之前","工作","各位","汽车","得","优化","对系统","如何","这个","实力","分布","写","—","不能","之初","一旦","通信","如果","程序","请","推倒重来","一样","想要","用户","一边","共享","来讲","编程","各种","不同","设计","生产","让","某","不够","一定","嵌入式","只不过","搬","熟悉","难度","rosbuild","首先","然后","给","协作","里","可靠性","风险","细节","一团乱麻","框架","服务","丢","原本","资源","精力","上手","能","个体","接收","能力","命令","交付","工程","开发成本","普及","项目管理","一个","依赖","什么","另","分解","甚至","驾驶","提","切记","毛坯","开发","第二","amr","而","厂商"],"title":"ROS2对比ROS1","title_tokens":["ros1","对比","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2ros1","text":"在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。","text_tokens":["，","ros2","从","来看","ros1"," ","么","多","你","做","看看","大","就是","我们","使用","第二代","名称","之前","能","上","？","这","其中","二代","有","到底","的","和","听说","也许","变化","对比","ros","。","一个","学习","就","过","不","在","第二","或"],"title":"ROS2对比ROS1","title_tokens":["ros1","对比","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros1","text":"首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。","text_tokens":["足够","来看","从","机器"," ","是因为","嵌入","算力","级别","学术研究","大部","就是","我们","售价","单兵","工作站","黑客","比如","可靠","更加","适合","处理","网络连接","内部","具体","批量","学术","自动","答案","搭载","涌现","新一代","：","就","呢","实时","不断","为了","作战","似乎","这样","软件","做成","有限","这台","第一个","已经","系统","干扰","独立","家庭","部分","自己","问题","担忧","绝大部分","大部分","是","良好","也","充足","他","保证","发展","最终","平台","找到","目标","中","机器人","可以","具备","成本","没有","不","单兵作战","最早","款","虽然","支持","产品","不断涌现","为什么","，","pr2","并","用于","有线","研究","数据","ros1","因为","运行","入侵","用","出现","了","完成","工作","类型","；","条件","上","汽车","有","实力","只能","应用","的","和","批量生产","第一","—","连接","翻地","通信","高昂","要","地方","时间","在","各种","走向","一款","计算","设计","生产","会","让","不够","嵌入式","类似","不用","首先","航天","ros2","诞生","why","可靠性","风险","都","运算","它","框架","复杂","服务","一些","当然","丢","原本","资源","？","这","能力","网络","随着","普及","。","ros","小","一代","课程","一个","由于","历史","什么","走向市场","绝大","甚至","设备","先进","驾驶","市场","致使","那","主角","开发","但是","针对","或者","天翻地覆"],"title":"ROS1的局限性","title_tokens":["的","局限性","局限","ros1","限性"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2","text":"ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。","text_tokens":["但","来看","机器","重新","ament","算力","一种","时代","手机","完整性","更加","以下","出错","修改","变化","全","：","保留","结合","怀揣","安全性","电脑","新版","生活","越来","这样","系统","移植","巨大","升级","这些","装修","提供","最终","平台","微控制器","不是","下","课时","前方","还","数据","研发","大","直接","真正","实时性","信号","上","工具","有","）","同时","应用","智能","api","和","连接","不会","要","走向","翻新","一款","简单","100ms","会","编写","推倒","类似","相对","无法","ros2","多","都","它","受制于","复杂","导致","操作","还会","网络","打成","越来越","叫做","保障","但是","编译","节点","安全","更具","体现","强","python3","使用","运动学","适合","布式","定性","搭载","千差万别","好","颠覆","、","历史使命","实时","rtos","等","为了","选择","面对","问题","后","（","很多","python","完整","与","无论","没有","虽然","诸多","，","操作系统","基础","通用","入侵","不好","出现","之间","完成","一下","策略","考虑","语言","不再","继续","于","稳定","第一","产品化","做到","开发者","长远","说明","全新","环境","最新","后续","盖","更","较","链接","很大","性","使命","macos","角色","需求","1ms","可能","变革","接口","特性","。","经常","历史","行人","市场","那","方便","实现","成功","就是","经验","要求","面临","比如","可靠","以及","网络连接","master","调试","基本保障","各样","过去","就","呢","能够","消费","除了","c++","代码","比","所以","解算","第一个","层面","编译系统","独立","机制","明显","任何","消费市场","自己","动力","毛坯房","测试","进行","加密","方案","标准","理器","控制","mcu","流程","他们","可以","具备","动力学","几点","以下几点","不","colcon","两个","运动","差异","场景","产品","强壮","并","体验","用于","只是","相比","运行","肯定","用","通用性","受制","了","重来","的","二种","方法","纠结","在","性能","之上","到","为","内","不用","发送","大量","挑战","系统工程","建筑","发现","跨平台","控制器","这","？","未来","需要","大家","周期","ros","尽量","管理","课程","怎样","所有","针对","标准化","管理器","项目","或者","最佳","时候"," ","成功经验","稳定性","编译器","我们","部署","原有","黑客","宕机","具体","自动","格局","远比","对","把","windows","分布式","满足","解密","不仅","软件","各种各样","全部","已经","房子","颠覆性","catkin","尽力","去","下要","借鉴","借助","是","dds","也","linux","基本","机器人","中","电脑系统","wifi","尤其","力学","阶段","架构","ros1","第二种","android","行为","工作","汽车","得","优化","对系统","如何","这个","分布","不能","之初","一旦","通信","推倒重来","各种","不同","设计","让","一定","rosbuild","给","协作","细节","风险","框架","原本","能","个体","工程","项目管理","一个","分解","甚至","驾驶","提","毛坯","开发","第二","amr"],"title":"全新的ROS2","title_tokens":["的","全新","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2-vs-ros1","text":"","text_tokens":[],"title":"ROS2 vs ROS1","title_tokens":["vs","ros1"," ","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_1","text":"在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。","text_tokens":["突然","discovery","但","节点","时候"," ","彼此","打交道","有且","就是","我们","自","一团","可选","比如","更加","底层","最","中间","好","通信接口","深入","master","至关重要","把","变化","、","就","哪些","windows","简单明了","不难","rtos","交道","调用","只有","不难理解","主要","这样","理解","封装","整体","更换","系统","听","一团乱","机制","看","明显","通过","张图","雷达","下边","这些","再","间层","是","dds","也","linux","进行","tcp","提供","通信协议","层","大致","接触","中间层","走","标准","选项","很多","理器","公司","找到","消失","安装","中","变得","注意","可以","学习","不","完善","另外","库会","不过","，","并","建立","名字","至关","不太","操作系统","数据","ros1","架构","重要","方式","肯定","信息","了","上","一套","进程","得","共享内存","这个","内存","而已","有","先","应用","的","稳定","写","和","可选项","方法","驱动","ceo","—","连接","频繁","如果","通信","一样","程序","请","共享","右侧","在","简单","指挥","是从","会","开始","让","内","只不过","类似","成","后续","ros2","大量","基于","发布","里","一团乱麻","都","发现","应该","它","会成","macos","角色","复杂","框架","应用层","操作","这","接收","需要","大家","协议","接口","对比","。","ros","左侧","管理","一个","依赖","udp","了解","过","所有","乱麻","客户","两者","印象","客户端","将","那","从而","开发","管理器","而","图像"],"title":"系统架构","title_tokens":["架构","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#dds","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。","text_tokens":["fastrtps","带来","重新"," ","其他","么","机器","做","一种","就是","我们","部署","适用","配置","比如","更加","底层","最","联网","该","多个","好","例子","听说","master","opensplice","变化","、","把","三个","就","复用","能够","国际标准","除了","每","提高","轻松","还有","软件系统","等","代码","为了","所以","满足","选择","这样","软件","减少","5g","更换","系统","只要","层面","移植","加入","部分","一家","自家","问题","按照","这些","再","是","dds","也","tcp","加密","提供","通信协议","收","物","这里","定义","总之","标准","基本","最大","目标","国际","安装","中","成本","可以","机器人","不","不是","rmw","时","开源","高","专注","改","不过","是否","发","版本","场景","产品","举","属性","，","并","对于","厂家","不爽","数据","ros1","middleware","相比","肯定","用","了","广泛","广泛应用","优化","得","这个","于","如何","先","唯一","应用","的","稳定","写","接入","简称","纠结","频繁","如果","功能","通信","一样","程序","符合","想要","用户","要","来讲","在","性能","各种","社区","产品开发","不同","适配","交给","设计","简单","为","完","会","某","让","类似","熟悉","不用","无法","然后","率","ros2","基于","其实","更","给","/","多","都","应该","每个","灵活","常","复杂","当然","一些","丢","需求","一行","精力","这","？","延迟","交付","切换","复杂度","开发成本","协议","之外","接口","。","ros","放在","一个","udp","另","发成","指定","商业","过来","解决","丰富","诟病","开发","实现","省略","厂商"],"title":"DDS通信","title_tokens":["dds","通信"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_2","text":"ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。","text_tokens":["，","并","ros2","从","几百万","ros1"," ","方式","已经","应该","全球","部分","我们","了","一一","概念","陌生","使用","这些","非常","不用","广泛","本","几百","其中","各位","也","有","以及","伙伴","大家","几乎","小伙伴","应用","的","意义","这里","担心","和","二个","一致","方法","含义","很多","。","尽量","ros","如果","课程","中","存在","便于","保留","依然","就","讲解","没有","不","第二个","在","学习","过","开发者","到","会","迁移","开发","第二","熟悉","百万","开发方式","小伙"],"title":"核心概念","title_tokens":["核心","概念"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_3","text":"再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。","text_tokens":["从","机器"," ","教程","暂且","看看","大部","一步","更接","我们","可移植","大部头","稍安","具体","一页","移植性","勿躁","角度","就","一本","总体","之后","可读性","面向对象","提高","迈过","对象","软件","同样","面向","移植","来","不要","再","发布者","是","也","用到","确实","中","机器人","具备","部头","学习","过程","两个","不过","而言","版本","，","ros1","方式","用","学","编程语言","真实","可移植性","语言","如何","当","的","和","写","方法","一边","程序","来讲","编程","在","会","软件开发","搬","难度","后续","ros2","更","编码","发布","多","图片","发现","可读","一些","道坎","操作","总体而言","这","大家","所示","特性","。","课程","一个","更好","接近","如","切记","企业","开发","带领","实现","项目"],"title":"编码方式","title_tokens":["编码方式","编码","方式"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_4","text":"最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随教程，你就会慢慢理解这些特性。","text_tokens":["幅度","节点","大幅"," ","教程","做","最为","你","一种","以上","现有","慢慢","就是","我们","比如","上升","好","话题","master","陆续","把","对","揭秘","没","变化","最后","：","就","即可","每","选择","理解","独立","topic","概念","再","这些","是","dds","也","初次","大致","除此之外","相关","run","控制","中","总结","下","换成","启动","跟随","而言","，","啦","ros1","了","除此","表示","命令行","工具","有","的","和","多功能","—","如果","功能","通信","集成","rostopic","在","rosrun","编程","会","某","核心","相对","难度","后续","ros2","更","常用","干掉","都","大幅度","主","上手","命令","大家","分散","之外","特性","对比","。","ros","一个","所有","印象","开发"],"title":"命令行","title_tokens":["命令行","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/","text":"ROS2安装方法 本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。 Linux系统简介 时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。 Ubuntu系统简介 我们后续课程使用到的Linux发行版就是 ubuntu系统 。 Ubuntu诞生于2004年10月份， 每六个月发布一个新版本 ，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。 Ubuntu虚拟机安装 虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下： 1. 下载系统镜像 下载链接： https://ubuntu.com/download/desktop 2. 在虚拟机中创建系统 3. 设置虚拟机硬盘大小 4. 设置Ubuntu镜像路径 5. 启动虚拟机 6. 设置用户名和密码 7. 等待系统安装 8. 完成安装 Ubuntu系统安装好后，大家可以先随意使用熟悉一下。 ROS2系统安装 接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下： 1. 设置编码 $ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8 2. 添加源 $ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844 3. 安装ROS2 $ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop 4. 设置环境变量 $ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。 ROS2示例测试 为了验证ROS2安装成功，我们可以通过以下示例进行测试。 示例一：命令行示例 先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。 示例二：小海龟仿真示例 再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["但","重新","机器","教程","workstation","绝对","curl","左右","一种","真理","下来","1","正常","前先要","list","vmware","以下","：","终端","电脑","teleop","键盘","products","动手","越来","一起","采用","这样","分享","arch","好者","[","bug","系统","移植","升级","centos","浏览器","再","务器","locale","keyring","大学","上层","指标","这里","吧","千层浪","run","redhat","绑定","看出","source","时","下","镜像","另外","二句","usr","还","伴随","=","蓝色","命名","发行版","互联网","变动","www","维护","修复","户名","指令","名字","数据","按键","试试","成为","大","直接","fedora","虚拟机","关注","命令行","上","顺序","会加","其中","有","同时","应用","智能","和","每隔","迅猛","|","基本相同","bash",">","爱好","成熟","6","第二个","时间",")","all","占据","会","etc","成","人工智能","18","为例","建议","~","ros2","html","应用软件","编码","常用","发布","多","gen","都","发挥","bashrc","一些","何人","更新","操作","此时","添加","by","网络","出于","lts","学生","原理","依然","等待","越来越","并且","商业","com","环境变","叫做","接下来","应用程序","但是","hello","或","从","个","节点","做","月","us","node","org","使用","适用","强大","apt","适合","芬兰","3","codename","反馈","联网","好","该","技术","技术实力","虚拟","优先","二","、","节","一应","download","之后","海龟","经典","下载","准确","个人","null","等","外衣","locales","为了","任何人","准备","选择","内核","持续","来","加入","通过","字符","04","六个","ubuntu20.04","无论是","问题","dev","新","后","浏览","吸引","保证","出","37844","-","计算机","合适","二个","很多","公司","最大","lsb","与","无论","$","订阅","没有","虽然","之一","真器","8","utf","版本","lang","，","print","中将","操作系统","精神","文件","update","通用","等等","出现","并用","完成","表示","一下","一套","考虑","免费","快","于","唯一","探索","稳定","操作界面","第一","介绍","爱好者","多人","upgrade","nodes","构建","计算","开发者","开放","放到","&&","光大","乐于","核心","软件开发","开始","说明","环境","第一句","后续","诞生","更","share","传输","链接","macos","每年","很","sudo","接下","小海","(","可能","发扬","7","变量","激起","。","数字","目前","之内","发扬光大","ubuntu","界面","了解","报错","cpp","上下","操作方法","raw","architecture","将","字符串","企业","实现","\"","摩拳擦掌","还是","成功","关于","资料","蕴藏","d","你","就是","其后","比如","看到","packages","第一次","多个","gnupg","master","deb","各样","就","源代码","试一试","呢","https","当中",":","大小","除了","每","archive","一直","代码","4","其他软件","所以","第一个","echo","收费","本相","evaluation","任何","自己","测试","进行","创建","to","他","尚","turtle","接触","除此之外","标准","dpkg","参考","热爱","控制","安装","可以","o","各个","不","打包","2","两个","运动","源","gpg","点击","起来","场景","支持","可视","os","并","opt","不太","设置","重要","unix","5","运行","sources","决定","林纳斯","key",".","了","编号","通讯","本","githubusercontent","叫","代表","一句","先","编辑","的","动手做","一位","硬盘","方法","install","功能","讲解","pro","紧随其后","在","性能","说干就干","只","之上","小海龟","到","激发","可视化","release","大学生","如遇","大量","lc","兼容","1991","传播","--","/","应该","talker","任务","俱全","这","？","需要","未来","回到","大家","检验","之外","热情","后缀","分别","ros","管理","main","课程","ssl","路径","比较","上下左右","或者","listener","仿真","时候"," ","其他","相同","仿真器","最为","已有","效果","我们","原有","2004","tee","底层","简介","编辑器","最","其","紧随","2022","把","对","en","长期","步骤","快速","一石激起千层浪","自行","领域","windows","人工","最好","验证","量","奥义","版","好后","signed","主要","不仅","以","软件","各种各样","有限","已经","六个月","第二句","模式","概念","10","“","发布者","是","dds","也","linux","desktop","情况","环境变量","至此","发展","一应俱全","world","基本","密码","提交","]","中","唯一标准","机器人","互联","用户名","过程","实践","开源","发行","影响","随意","启动","http","服务器","是否","月份","硬件","先要","啦","py","guyuehome","connect","因为","多用户","个人爱好","示例","除此","”","工作","之前","普通","位置","这个","如何","实力","_","keyrings","—","如果","加上","用户","一样","通信","程序","请","想要","两年","来讲","各种","turtlesim","不同","设计","擦掌","让","一定","熟悉","多用","一次","可","给","多任务","22","如下","这套","rosdistro","背景","者","服务","原本","setup","demo","提到","命令","现在","千层","地址","一般","一","年","一个","依赖","算机","什么","甚至","衡量","failed","行列","humble","export","开发","第二","华丽","ubuntu22.04"],"title":"ROS2安装方法","title_tokens":["安装","ros2","方法"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2","text":"本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。","text_tokens":["，","ros2","一起","操作系统","重要","一种","系统","我们","一下","操作","底层","本","前先要","linux","最","的","—","。","安装","节","了解","先要"],"title":"ROS2安装方法","title_tokens":["安装","ros2","方法"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#linux","text":"时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。","text_tokens":["但","重新"," ","其他","相同","教程","做","已有","真理","就是","我们","原有","使用","适用","强大","比如","底层","适合","芬兰","看到","最","其","反馈","联网","技术","技术实力","把","、","对","各样","快速","一石激起千层浪","就","源代码","呢","windows","当中","之后","最好","量","准确","每","个人","代码","外衣","等","主要","所以","不仅","任何人","动手","越来","一起","软件","分享","内核","有限","各种各样","好者","已经","bug","系统","加入","收费","通过","本相","模式","任何","centos","概念","自己","问题","务器","是","大学","后","也","linux","指标","他","情况","尚","吸引","发展","计算机","标准","参考","热爱","千层浪","很多","公司","提交","基本","redhat","与","绑定","安装","中","唯一标准","可以","互联","没有","过程","不","实践","开源","发行","镜像","下","另外","打包","虽然","之一","还","伴随","服务器","版本","起来","命名","支持","发行版","场景","互联网","硬件","可视","维护","修复","，","并","名字","不太","操作系统","精神","重要","unix","多用户","成为","通用","大","等等","决定","林纳斯","个人爱好","fedora","出现","了","并用","之前","上","一套","本","其中","叫","免费","有","这个","先","实力","唯一","应用","的","动手做","一位","稳定","和","操作界面","方法","—","迅猛","爱好者","加上","用户","功能","基本相同","程序","一样","多人","爱好","成熟","讲解","来讲","时间","在","性能","说干就干","各种","之上","不同","计算","到","设计","开放","开发者","放到","光大","乐于","会","核心","成","熟悉","激发","可视化","多用","大学生","大量","ros2","应用软件","兼容","1991","传播","更","给","多任务","多","常用","这套","都","应该","macos","服务","一些","每年","原本","何人","任务","操作","此时","提到","这","？","需要","回到","现在","检验","千层","发扬","热情","出于","激起","。","一般","管理","目前","学生","年","一个","依赖","发扬光大","原理","ubuntu","算机","什么","越来越","界面","并且","甚至","衡量","行列","商业","操作方法","叫做","企业","应用程序","开发","实现","华丽","或者","或"],"title":"Linux系统简介","title_tokens":["简介","linux","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu","text":"我们后续课程使用到的Linux发行版就是 ubuntu系统 。 Ubuntu诞生于2004年10月份， 每六个月发布一个新版本 ，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。","text_tokens":["摩拳擦掌","从","还是","机器"," ","时候","个","其他","教程","之前","你","绝对","月","资料","已有","效果","就是","其后","我们","使用","2004","比如","编辑器","紧随","联网","好","第一次","2022","虚拟","优先","、","长期","自行","一应","领域","就","试一试","windows","人工","电脑","之后","除了","每","版","一直","等","4","为了","所以","主要","选择","以","这样","软件","已经","系统","持续","移植","六个月","通过","升级","04","六个","ubuntu20.04","无论是","浏览器","自己","再","10","是","新","也","linux","进行","上层","浏览","保证","接触","出","除此之外","这里","合适","一应俱全","参考","很多","最大","无论","看出","机器人","中","可以","安装","互联","各个","时","发行","影响","还","版本","月份","发行版","支持","变动","互联网","硬件","维护","，","因为","重要","5","文件","直接","本","出现","了","虚拟机","编号","除此","关注","表示","通讯","一下","上","顺序","会加","普通","其中","考虑","免费","位置","快","代表","于","如何","有","编辑","的","智能","应用","稳定","硬盘","方法","每隔","第一","介绍","如果","用户","想要","两年","讲解","紧随其后","在","各种","只","性能","不同","到","开发者","占据","会","擦掌","让","软件开发","一定","环境","人工智能","18","为例","熟悉","建议","一次","后续","诞生","更","常用","发布","多","22","都","发挥","很","更新","俱全","未来","大家","可能","网络","之外","后缀","。","数字","lts","之内","课程","年","一个","ubuntu","依然","开发","但是","比较","或","ubuntu22.04"],"title":"Ubuntu系统简介","title_tokens":["简介","ubuntu","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu_1","text":"虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下：","text_tokens":["，","并","products","啦","html","准备","采用"," ","软件","其他","相同","/","workstation","如下","运行","系统","已有","evaluation",".","虚拟机","我们","完成","工作","操作","是","后","vmware","大家","同时","的","多个","这里","和","-","虚拟","地址","。","安装","一个","步骤","可以","请","：","自行","就","pro","在","https","之上","构建","另外",":","com","下载","开始","叫做","让","环境","www","其他软件"],"title":"Ubuntu虚拟机安装","title_tokens":["虚拟机","安装","ubuntu","虚拟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1","text":"下载链接： https://ubuntu.com/download/desktop","text_tokens":[".","https",":"," ","下载","com","/","链接","desktop","ubuntu","：","download"],"title":"1. 下载系统镜像","title_tokens":[".","镜像"," ","1","下载","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2","text":"","text_tokens":[],"title":"2. 在虚拟机中创建系统","title_tokens":["在",".","虚拟机","虚拟","2"," ","中","创建","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3","text":"","text_tokens":[],"title":"3. 设置虚拟机硬盘大小","title_tokens":[".","虚拟机","硬盘","虚拟","设置","大小"," ","3"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4-ubuntu","text":"","text_tokens":[],"title":"4. 设置Ubuntu镜像路径","title_tokens":["路径",".","镜像","设置"," ","ubuntu","4"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#5","text":"","text_tokens":[],"title":"5. 启动虚拟机","title_tokens":[".","虚拟机","虚拟","启动"," ","5"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#6","text":"","text_tokens":[],"title":"6. 设置用户名和密码","title_tokens":[".","和","设置"," ","密码","用户","用户名","6","户名"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#7","text":"","text_tokens":[],"title":"7. 等待系统安装","title_tokens":[".","7"," ","安装","系统","等待"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#8","text":"Ubuntu系统安装好后，大家可以先随意使用熟悉一下。","text_tokens":["，","先","随意","使用","一下","。","安装","熟悉","ubuntu","系统","大家","可以","好后"],"title":"8. 完成安装","title_tokens":[".","完成"," ","8","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_1","text":"接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下：","text_tokens":["，","ros2","如下","系统","下来","我们","了","接下","把","。","安装","中","步骤","可以","ubuntu","：","就","到","接下来"],"title":"ROS2系统安装","title_tokens":["安装","ros2","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1_1","text":"$ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8","text_tokens":["lc"," ","gen","us","update",".","sudo","apt","locale","_","-","install","en","$","all","&&","8","utf","lang","export","=","locales"],"title":"1. 设置编码","title_tokens":[".","设置"," ","1","编码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2_1","text":"$ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844","text_tokens":[" ","d","curl","org","apt","tee","list","codename","packages","gnupg","master","deb","https",":","archive","null","signed","arch","[","echo","“","dev","keyring","to","37844","-","dpkg","参考","lsb","]","$","o","source","usr","http","gpg","=","www","os","，","print","guyuehome","connect","update","sources","key",".","”","githubusercontent","_","keyrings","install","|",">",")","&&","etc","release","如遇","ros2","可","--","share","/","rosdistro","sudo","(","by","ros","main","ssl","ubuntu","报错","failed","raw","com","architecture","\""],"title":"2. 添加源","title_tokens":[".","2"," ","源","添加"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3-ros2","text":"$ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop","text_tokens":["-","humble","sudo","apt"," ","install","ros","$","update","desktop","upgrade"],"title":"3. 安装ROS2","title_tokens":[".","ros2"," ","安装","3"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4","text":"$ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。","text_tokens":["~","opt","，","ros2"," ","/","已经","echo","系统","bashrc",".","了","setup","至此","好","。","ros","$","安装","bash","中",">","就","source","在","humble","\""],"title":"4. 设置环境变量","title_tokens":[".","设置","变量"," ","环境变","环境","4","环境变量"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_2","text":"为了验证ROS2安装成功，我们可以通过以下示例进行测试。","text_tokens":["，","通过","我们","示例","ros2","成功","验证","。","安装","测试","进行","可以","以下","为了"],"title":"ROS2示例测试","title_tokens":["示例","测试","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_1","text":"先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。","text_tokens":["，","listener","ros2","py","节点","数据"," ","重要","传输","发布","试试","最为","第一个","系统","talker","来","者","通过","字符","”","demo","问题","“","发布者","正常","底层","dds","命令","先","以下","_","的","吧","二个","第一","run","world","。","如果","$","通信","一个","订阅","中","：","没有","终端","第二个","nodes","在","cpp","两个","启动","是否","字符串","说明","第二","hello"],"title":"示例一：命令行示例","title_tokens":["示例","命令行","一","命令","："]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_2","text":"再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["，","键盘","指令","第一句","后续","ros2","啦","仿真","节点","中将","成功"," ","仿真器","关于","蕴藏","按键","教程","左右","如下","运行","持续","背景","来","key","node","第二句","示例","我们","”","再","“","上","小海","一句","turtle","探索","_","的","该","至此","分别","run","第一","—","ros","。","$","控制","安装","中","一个","可以","：","就","试一试","终端","在","经典","海龟","小海龟","两个","启动","turtlesim","真器","teleop","二句","上下","将","运动","奥义","点击","蓝色","第二","上下左右"],"title":"示例二：小海龟仿真示例","title_tokens":["示例","海龟","小海龟","仿真","二","小海","："]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/","text":"ROS2命令行操作 在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。 Linux中的命令行 类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。 启动方式 回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。 常用命令操作 我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。 ROS2中的命令行 ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。 运行节点程序 想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看节点信息 当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim 查看话题信息 当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose 发布话题消息 想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 发送服务请求 一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\" 发送动作目标 想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\" 录制控制命令 系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["但","所在","某个","绝对","管理员","一种","以上","消息","很少","{","下来","跟","查看","1","正常","删除","list","goal","geometry","电影","：","保留","终端","哪些","结合","电脑","数量","teleop","二十个","录制","笔记本","theta","还有","死机","键盘","一起","这样","呈现出","[","系统","一件","从来","每次","这些","二十","再","保持","约束","子","提供","详细","又","这里","run","学习","不是","下","子目","体会","目","不过","还","款式","其上","为什么","打开","指令","name","数据","帮上","感兴趣","直接","怎么","做好","cmd","至于","命令行","根据","上","工具","有","play","应用","和","权限","商家",">","要","y","msgs","令人","太","会","类似","而是","成","为例","详细信息","pub","列表","ros2",",","并不一定","常用","播放","发布","多","十个","具体操作","产生","都","它","灵活","一些","操作","此时","商场","pwd","随着","z","指定","叫做","spawn","接下来","但是","推出","或","复现","及其","此","窗口","节点","node","使用","service","常用命令","觉得","3","17","买","该","好","深入","标目","、","适应","动作","海龟","一点","等","科幻电影","选择","若","rosbag2","来","通过","字符","rotateabsolute","04","问题","后","mkdir","初次","目的","改了","用到","确实","出","多到","不变","进一步","选项","-","很多","与","无论","$","系统管理员","没有","件夹","自主","虽然","真器","转","不到","，","异常","<","深色","方式","文件","x","主目录","完成","一系","表示","一下","感受","vel","继续","于","第一","send","鼠标","rm","核心","感兴","改名","容易","更","统管","srv","链接","硬","需求","很","原因","sudo","接下","干什么","小海","可能","随身带","。","列出","既定","规则","小","执行","msg","移入","随身","了解","t","后边","语法","想","将","呀","带领","有点","子目录","实现","布料","\"","新建","既","还是","你","现有","一二","慢慢","就是","复制","文件名","比如","看到","搜索","显示","第一次","及","多个","}","系列","总有","调试","0.2","角度","就","看似","看中","试一试","呢","pose","能够",":","轻松","每","尝试","一直","调用","所以","0","angular","第一个","echo","35","体操","机制","topic","段","自己","枯燥","一系列","参数","进行","创建","实验室","turtle","接触","动","输入","目标","控制","呈现","找","可以","不","2","11","场景","起来","可视","并","对于","体验","rotate","当前工作","不太","只是","重要","拷贝到","案例","2.0","运行","用","key",".","了","写字","本","db3","被","先","一二十个","魅力","服装","编辑","的","实验","功能","笔记本电脑","集成","多种","在","info","小海龟","令人发指","到","为","可视化","不用","发送","逛去","想象","rate","一只","--","'","/","例如","某段","逛来","什么样","rosbag","bag","死记","？","这","由","感觉","需要","未来","回到","大家","孤单","这种","必不可少","+","ros","管理","一二十","至今","路径","所有","背","看不到","解决","cd","或者","terminal","仿真","时候"," ","其他","相同","仿真器","看看","一步","请求","我们","原有","0.0","精心设计","目标目录","黑客","衣服","record","编辑器","难以","科幻","笔记","具体","便捷","2022","精心","现出","话题","对","把","alt","定制","即可","片段","cp","文件夹","专门","死记硬背","主要","满足","麻烦","知道","以","软件","炫酷","已经","去","概念","1.8","当前","右键","“","忙","绝对路径","是","发指","也","linux","查","大致","文件名称","记忆","]","中","则","启动","逛来逛去","absolute","手","内容","本节","啦","均","因为","拷贝","ctrl","linear","信息","call","快捷","40","”","不可","材料","名称","之前","工作","mv","复制到","ls","这个","如何","完全","_","里边","改变","总","—","如果","加上","用户","一样","一边","程序","兴趣","想要","地","来讲","各种","gedit","turtlesim","action","不同","设计","某","让","一定","twist","熟悉","一次","源文件","如下","背景","度高","服务","快捷键","命令","turtle1","一","一个","不一","什么","另","这项","哪","目录","…","受"],"title":"ROS2命令行操作","title_tokens":["操作","命令行","ros2","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2","text":"在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。","text_tokens":["，","一次","本节","ros2","不太","时候","更"," ","重要","多","案例","一种","运行","一步","我们","了","使用","之前","命令行","感受","小海","工具","命令","大家","魅力","可能","接触","的","第一次","深入","进一步","第一","随着","—","。","调试","如果","适应","中","可以","学习","在","海龟","小海龟","到","会","将","一定","带领","有点"],"title":"ROS2命令行操作","title_tokens":["操作","命令行","ros2","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#linux","text":"类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。","text_tokens":["但","还是","时候"," ","其他","你","一种","现有","就是","我们","使用","精心设计","比如","衣服","科幻","看到","便捷","买","精心","总有","现出","、","电影","定制","保留","就","看似","看中","呢","片段","结合","能够","一直","一点","等","满足","麻烦","科幻电影","这样","呈现出","软件","炫酷","已经","来","一件","去","自己","每次","问题","这些","是","约束","linux","这里","很多","无论","中","呈现","可以","没有","不","不是","自主","虽然","逛来逛去","款式","其上","场景","手","起来","可视","为什么","，","并","对于","异常","方式","做好","了","不可","材料","命令行","根据","工具","于","被","先","服装","完全","的","里边","和","商家","功能","一样","想要","来讲","在","各种","设计","为","会","某","一定","类似","成","可视化","逛去","容易","想象","并不一定","多","逛来","什么样","都","度高","灵活","服务","一些","需求","操作","此时","商场","？","命令","大家","这种","必不可少","。","ros","既定","规则","小","一个","不一","至今","什么","所有","哪","解决","呀","但是","推出","布料","受"],"title":"Linux中的命令行","title_tokens":["的","命令行","中","linux","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_1","text":"回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。","text_tokens":["窗口","既","时候","所在"," ","其他","很少","慢慢","一二","就是","我们","使用","黑客","正常","觉得","难以","科幻","看到","笔记","搜索","及","系列","对","电影","alt","：","就","终端","即可","呢","电脑","数量","二十个","专门","笔记本","死机","所以","选择","科幻电影","软件","来","通过","字符","从来","枯燥","二十","一系列","右键","是","参数","发指","后","也","初次","用到","确实","又","多到","输入","记忆","中","可以","不是","体会","启动","不过","手","不到","为什么","，","并","打开","指令","因为","深色","方式","ctrl","怎么","用","写字","快捷","至于","一系","命令行","一下","上","本","工具","有","这个","一二十个","魅力","应用","的","笔记本电脑","功能","多种","鼠标","在","令人发指","到","令人","会","一定","而是","熟悉","不用","列表","常用","十个","都","背景","硬","很","原因","操作","这","快捷键","需要","命令","回到","大家","随身带","+","随着","。","一二十","什么","随身","背","t","这项","看不到","叫做","但是","terminal"],"title":"启动方式","title_tokens":["启动","方式"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_2","text":"我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。","text_tokens":["新建","及其","此"," ","某个","绝对","管理员","复制","我们","原有","文件名","目标目录","常用命令","删除","编辑器","显示","该","多个","及","标目","把","：","就","cp","文件夹","死记硬背","以","[","若","系统","来","这些","当前","“","绝对路径","保持","也","mkdir","linux","创建","目的","查","出","文件名称","不变","选项","目标","]","中","找","可以","系统管理员","没有","不","下","子目","件夹","则","目","，","体验","打开","对于","<","当前工作","只是","指令","均","拷贝","拷贝到","文件","用","主目录","了","”","mv","工作","名称","一下","复制到","ls","先","编辑","的","改变","权限","功能","用户","一边",">","地","gedit","rm","为","会","熟悉","改名","列表","源文件","常用","统管","/","多","链接","它","sudo","死记","由","感觉","需要","命令","回到","pwd","大家","未来","。","列出","执行","管理","一","一个","另","移入","指定","路径","所有","目录","语法","…","将","cd","子目录","或者","或"],"title":"常用命令操作","title_tokens":["操作","常用","常用命令","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2_1","text":"ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。","text_tokens":["，","主要","ros2","仿真","节点","以","一起"," ","相同","第一个","具体操作","都","体操","node","机制","下来","我们","topic","概念","跟","一系","一系列","接下","表示","操作","命令行","比如","参数","干什么","小海","感受","也","linux","有","命令","目的","继续","具体","大致","的","系列","话题","总","第一","对","。","与","功能","集成","一个","中","可以","什么","就","了解","在","下","所有","海龟","小海龟","不同","后边","不过","还","核心","接下来","内容","为例"],"title":"ROS2中的命令行","title_tokens":["的","ros2","命令行","中","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_3","text":"想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["，","键盘","ros2","仿真","节点"," ","例如","某个","运行","key","node","我们","使用","操作","进行","命令","turtle","_","和","run","控制","$","中","可以","想要","：","要","海龟","turtlesim","teleop"],"title":"运行节点程序","title_tokens":["节点","程序","运行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_4","text":"当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim","text_tokens":["，","知道","ros2","啦","节点","这样"," ","/","运行","系统","都","感兴趣","信息","它","来","node","当前","查看","？","有","list","子","命令","详细","的","对","ros","如果","$","加上","中","一个","可以","：","兴趣","就","哪些","呢","info","turtlesim","某","感兴","详细信息"],"title":"查看节点信息","title_tokens":["节点","信息","查看"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_5","text":"当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose","text_tokens":["，","ros2","数据"," ","/","如下","echo","系统","都","消息","topic","使用","当前","查看","有","命令","list","看到","子","的","话题","turtle1","$","加上","中","一个","：","pose","即可","试一试","呢","想","还","某"],"title":"查看话题信息","title_tokens":["信息","查看","话题"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_6","text":"想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":["，","指令","ros2","rate",",","--"," ","angular","发布","/","linear","2.0","直接","x","{","通过","我们","0.0","topic","cmd","1.8","1","命令行","vel","命令","_","}","话题","动","turtle1","geometry","z","控制","$","可以","想要","：","msg","y","msgs","海龟",":","还","起来","twist","pub","\""],"title":"发布话题消息","title_tokens":["话题","发布","消息"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_7","text":"一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\"","text_tokens":["，","ros2","一只","仿真",",","name","'"," ","仿真器","/","srv","产生","call","来","x","{","服务","我们","再","service","改了","提供","孤单","}","—","$","一个","：","0.2","试一试","y","海龟","turtlesim",":","2","真器","太","还","spawn","theta","调用","\""],"title":"发送服务请求","title_tokens":["发送","请求","服务"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_8","text":"想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\"","text_tokens":["，","rotate","发送","ros2","仿真","这样","仿真器"," ","帮上","/","通过","rotateabsolute","完成","忙","命令行","比如","3","命令","这个","goal","提供","具体","_","的","turtle1","send","目标","$","一个","中","可以","想要","：","角度","动作","指定","海龟","action","turtlesim",":","到","真器","让","absolute","theta","转","\""],"title":"发送动作目标","title_tokens":["发送","目标","动作"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_9","text":"系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["，","ros2","0","啦","数据","还是"," ","播放","常用","/","某段","35","运行","系统","以上","看看","rosbag2","用","就是","下来",".","rosbag","04","段","很","bag","cmd","再","40","我们","自己","record","这","？","vel","db3","有","命令","回到","实验室","如何","子","17","大家","play","好","的","_","2022","-","实验","turtle1","把","很多","。","如果","与","功能","$","中","一个","可以","想要","：","11","录制","轻松","每","尝试","还有","实现","复现"],"title":"录制控制命令","title_tokens":["控制","命令","录制"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","text":"ROS2开发环境配置 ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。 Git git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git 下载教程源码 《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。 VSCode Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download VSCode插件配置 为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。 中文语言包 Python插件 C++插件 CMake插件 vscode-icons ROS插件 Msg Language Support Visual Studio IntelliCode URDF Markdown All in One VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["编译","但","机器"," ","语言包","教程","插件","做","visualstudio","以上","已有","中文","我们","language","使用","apt","强大","非常","查看","配置","比如","in","编辑器","github","看到","以及","搜索","最","而生","具体","自动","开发工具","高效","好","多个","入门","系列","、","调试","：","合并","组件","快速","就","终端","源代码","呢","windows","download","https","人工","之后",":","文件夹","不开","下载","众多","记事","c++","轻量","个人","代码","为了","因","所以","离不开","准备","这样","软件","git","bug","系统","成千上万","变更","浏览器","每次","这些","一系列","自己","是","新","行","源码","也","linux","进行","非常简单","visual","官方","提供","扩展","浏览","两款","出","发展","这里","-","很多","python","提交","$","与","安装","机器人","中","可以","不","利器","开源","件夹","linus","推荐","另外","官方网站","intellicode","》","还","增加","版本","支持","内容","硬件","修复","，","并","理工","tutorials","操作系统","guyuehome","神兵","重要","方式","迅速","文件","成为","肯定","成千","有些","等等","直接","用","cmake",".","示例","了","gitee","完成","之间","21","搭建","一系","广泛","千万","广泛应用","icons","几千","冲突","工具","markdown","国内","有","语言","如何","先","被","应用","的","_","编辑","哪里","和","里边","方法","上万","常听到","驱动","install","—","简称","不会","如果","one","功能","vscode","千上万","clone","集成","urdf","这款","在","只","一款","不同","简单","开发者","设计","贡献","all","会","编写","让","记事本","环境","判断","2015","官方网","ros2","大量","后续","更","studio","给","/","多","功能强大","链接","人","下载方式","管理工具","都","自带","macos","复杂","中会","一些","讲","sudo","一行","网上","操作","？","这","需要","命令","大家","切换","喜欢","可能","网站","作为","略显","特性","。","ros","管理","课程","年","一个","码云","便于","msg","所有","审核","support","com","code","微软","几千万","听到","丰富","无限","开发","之父","《","推出","项目","管理软件"],"title":"ROS2开发环境配置","title_tokens":["开发","ros2","环境","配置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros2","text":"ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。","text_tokens":["，","编译","大量","离不开","准备","机器","重要","给","做","git","肯定","中会","一些","我们","示例","完成","这些","查看","配置","？","源码","工具","需要","大家","提供","如何","先","开发工具","两款","的","和","、","ros","—","。","课程","机器人","vscode","呢","推荐","不开","编写","开发","环境","代码"],"title":"ROS2开发环境配置","title_tokens":["开发","ros2","环境","配置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#git","text":"git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git","text_tokens":[" ","已有","我们","使用","apt","非常","比如","github","看到","以及","而生","具体","自动","高效","多个","合并","就","终端","人工","之后","众多","代码","因","所以","软件","git","bug","系统","成千上万","变更","每次","这些","是","新","行","也","linux","进行","非常简单","发展","提交","$","安装","中","可以","不","开源","linus","增加","版本","内容","硬件","修复","，","并","理工","迅速","成千","肯定","有些","等等","直接","gitee","了","之间","完成","广泛","千万","广泛应用","几千","冲突","工具","国内","有","被","应用","的","哪里","和","方法","上万","常听到","驱动","install","—","不会","功能","千上万","这款","在","一款","不同","简单","开发者","设计","贡献","会","让","判断","人","管理工具","都","sudo","一行","这","需要","命令","切换","大家","可能","网站","特性","。","管理","一个","码云","所有","审核","几千万","听到","开发","之父","项目","管理软件"],"title":"Git","title_tokens":["git"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_1","text":"《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。","text_tokens":["，","tutorials","ros2","guyuehome","更"," ","这样","方式","/","多","git","文件","下载方式","系统","自带","用","复杂","讲","gitee",".","21","浏览器","查看","是","源码","有","浏览","_","的","好","入门","里边","和","这里","略显","很多","—","。","如果","$","课程","clone","中","一个","：","集成","vscode","就","https","件夹","文件夹",":","推荐","另外","com","下载","》","还","会","记事","记事本","《","开发","环境","代码"],"title":"下载教程源码","title_tokens":["源码","下载","教程"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode","text":"Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download","text_tokens":["，","2015","官方网","但","操作系统"," ","studio","神兵","/","功能强大","链接","visualstudio","成为","系统","macos",".","强大","非常","搭建","操作","是","编辑器","visual","linux","官方","扩展","网站","编辑","的","和","简称","、","。","功能","年","vscode","一个","可以","组件","快速","：","源代码","利器","download","在","windows","https",":","官方网站","com","下载","code","微软","丰富","轻量","开发","支持","推出","代码","项目"],"title":"VSCode","title_tokens":["vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode_1","text":"为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。","text_tokens":["，","后续","ros2","插件","我们","一系","一系列","扩展","的","系列","。","调试","与","功能","安装","vscode","可以","便于","还","无限","开发","为了"],"title":"VSCode插件配置","title_tokens":["vscode","配置","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_2","text":"","text_tokens":[],"title":"中文语言包","title_tokens":["中文","语言","语言包"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#python","text":"","text_tokens":[],"title":"Python插件","title_tokens":["python","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#c","text":"","text_tokens":[],"title":"C++插件","title_tokens":["c++","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#cmake","text":"","text_tokens":[],"title":"CMake插件","title_tokens":["cmake","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode-icons","text":"","text_tokens":[],"title":"vscode-icons","title_tokens":["-","vscode","icons"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros","text":"","text_tokens":[],"title":"ROS插件","title_tokens":["ros","插件"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#msg-language-support","text":"","text_tokens":[],"title":"Msg Language Support","title_tokens":["support","language","msg"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#visual-studio-intellicode","text":"","text_tokens":[],"title":"Visual Studio IntelliCode","title_tokens":[" ","visual","studio","intellicode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#urdf","text":"","text_tokens":[],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#markdown-all-in-one","text":"VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["，","插件","以上","自己","网上","配置","也","搜索","最","大家","喜欢","出","的","作为","。","vscode","可以","在","只","推荐","众多","开发","个人","支持","环境"],"title":"Markdown All in One","title_tokens":["all"," ","in","one","markdown"]}]}