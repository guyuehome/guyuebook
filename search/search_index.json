{"config":{"indexing":"full","lang":["en","ja"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"引言 机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的 电气时代 。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的 数字时代 ，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发， 智能机器人时代 正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。 教程链接汇总 课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/90 博客泡圈： https://www.guyuehome.com/","text_tokens":["guyuehome"," ","横跨","最为","21","泡圈","伺服电机","、","前夜","operating","帮助","等","拉开","技术","工厂","软件","关注","最佳","依然","井喷","逐渐","—","年前","circledetail","操控","七八十","业生","层面","减速机","人工","释放","2000","自主","由示","驱动器","提出","https","设备","链接","热点","的","人类","成为","动作","传感器","必将","引言","生产","之后","计算","动力","正式","丰富","agv","gitee","时代","2015","减速","类型","并","机器人","我们","博客","对","但是","bubble","开发","更","应用","这","汽车","不断丰富","ai","算机","只能",":","而言","tutorials","之一","思考","是","智能","。","机器","随着","于","局部","com","www","汇总","服务","数字","book","控制器","视觉","计算机","也","家庭","图文","不断","高","主角","环境","class","完全","驱动","/","system","电气","命令","十年","大","要求","就是","状","后","爆发","三个","ros2","送餐","狗","教器","四足","源码","驾驶","时期","年","robot","过程","劳动","90","人工智能","七八","有限","仿生","和","传感","id","问答","了","不过","劳动力","此时","执行","序幕","电机","七八十年","，","操作系统","感知","经历","缺少","载体","自动","_","github","智能化",".","拉开序幕","工业","主要","发展","工业生产","多","控制","感器","呈","教程","系统","快速","八十年","八十","太","按照","课程","出现","重要","视频","检测","没有","更加","这是","俗称","操作","伺服","："],"title":"引言","title_tokens":["引言"]},{"location":"#_1","text":"机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的 电气时代 。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的 数字时代 ，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发， 智能机器人时代 正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。","text_tokens":[" ","横跨","最为","伺服电机","、","前夜","operating","帮助","等","拉开","技术","工厂","软件","关注","最佳","依然","井喷","逐渐","—","年前","操控","七八十","业生","层面","减速机","人工","释放","2000","自主","由示","驱动器","提出","设备","热点","的","人类","成为","动作","传感器","必将","生产","之后","计算","动力","正式","丰富","agv","时代","2015","减速","类型","并","机器人","我们","对","但是","开发","更","应用","这","汽车","不断丰富","ai","算机","只能","而言","之一","思考","是","智能","。","机器","随着","于","局部","服务","数字","控制器","视觉","计算机","也","家庭","不断","高","主角","环境","完全","驱动","system","电气","命令","十年","大","要求","就是","状","后","爆发","三个","送餐","狗","教器","四足","驾驶","时期","年","robot","过程","劳动","人工智能","七八","有限","仿生","和","传感","了","不过","劳动力","此时","执行","序幕","电机","七八十年","，","操作系统","感知","经历","缺少","载体","自动","智能化","拉开序幕","工业","主要","发展","工业生产","多","控制","感器","呈","系统","快速","八十年","八十","太","按照","课程","出现","重要","检测","没有","更加","这是","俗称","操作","伺服"],"title":"引言","title_tokens":["引言"]},{"location":"#_2","text":"课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 教程问答： https://www.guyuehome.com/Bubble/circleDetail/id/90 博客泡圈： https://www.guyuehome.com/","text_tokens":["/","问答","博客","guyuehome"," ","21","bubble","泡圈",":","tutorials","_","circledetail","github","ros2",".","源码","教程","https","com","www","book","90","课程","视频","图文","gitee","class","：","id"],"title":"教程链接汇总","title_tokens":["汇总","链接","教程"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["或","guyuehome"," ","声明","《","120","、","用户","所有","等","限于","未来","武汉","版权","修改","建立","企业","创建","课件","法律责任","构建","复制","不得","上述","有限公司","校企","将","的","书面","优质","精锋","生态","如需","小时","模式","》","均","抄录","机器人","责任","知名","但","开发","内容","+","个人","社区","包括","ai","超过","地区","学习","交流学习","赋能","人才","一体","brand","是","万人","（","使用","。","追究其","机器","com","www","及","被","万字","违反","高质量","平台","对本","销售","未经","不","面向","拥有","古月","合法","畅销","联系","累积","交流","质量","实践","通过","有权","ros","镜像","请","单位","传播","究其","源码","合作","年","上","至今","）","本","2011","明者","为","任何","有限","公司","依法","产品","创新","和","面向未来","集","图书","高质","仅限","作品","网站","，","致力于","提供","致力","微控","追究","众多","法律","与",".","居","人才培养","授权","华语","声明者","@","高校","进行","许可","课程","科技","学","努力","视频","捆绑","培养","1000","线上","出版","其它","学习者"],"title":"关于我们","title_tokens":["关于","我们"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["guyuehome"," ","《","120","、","用户","等","未来","建立","企业","创建","构建","校企","的","优质","生态","小时","模式","》","机器人","知名","开发","内容","+","社区","ai","超过","地区","学习","交流学习","赋能","人才","一体","是","万人","（","。","机器","com","www","及","万字","高质量","平台","面向","古月","畅销","累积","交流","质量","实践","通过","ros","合作","年","至今","）","2011","为","创新","面向未来","集","图书","高质","，","致力于","提供","致力","众多","与",".","居","人才培养","华语","高校","课程","努力","视频","培养","1000","线上","出版","学习者"],"title":"学机器人，上古月居","title_tokens":["上","古月","学","居","机器","，","机器人"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["或","guyuehome"," ","声明","、","用户","所有","等","限于","武汉","版权","修改","课件","法律责任","复制","不得","上述","有限公司","将","的","书面","精锋","如需","均","抄录","责任","但","个人","包括","学习","brand","使用","。","追究其","被","com","违反","销售","对本","未经","不","拥有","古月","合法","联系","有权","镜像","请","单位","传播","究其","源码","本","明者","为","任何","有限","公司","依法","产品","和","仅限","作品","网站","，","微控","追究","法律","与",".","居","授权","声明者","@","进行","许可","课程","科技","视频","捆绑","其它"],"title":"版权声明","title_tokens":["声明","版权"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/","text":"ROS/ROS2是什么 智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。 ROS的诞生 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人—— PR2 ，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS的发展 ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称 ROSCon ，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。 ROS的特点 ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。 参考资料 关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["熟悉","一些","一系","最为","所有","性能","官方","以叠","2010","希望","向前","繁荣","实验","一段","又","直接","？","打","适用","系列","商业化","访问量","提出","今日","自己","更好","工程师","五年","查看","资料","配合","ros1","全新","欢迎","数据库","大部","大家","2015","已有","青年","圈","嵌入","这些","可以","代码","软件系统","页面","学习","正式版","参考","时间轴","一定","情况","可为","稳定","电脑","说明","动机","阵地","领域","国家","做出","服务","其中","远","造","神秘","专业","之","全","平台","用","水下","由","亚马逊","地域","既然","肩负着","总体","给出","做到","部分","以上","完全","每个","kinect","改为","各种各样","开发工具","之王","光靠","智慧","上市","尽量","就是","从中","ros","终于","个","托管","几年","肩负","当初","这一波","基本","类似","研究","微软","踏上","更为","移动","有没有","如何","年","张图","robot","版","因为","至今","发布","团队","进步","程度","搜索","万","任何","公司","人","接下","跑","传感","多年","大步","爆款","一次","望而却步","就","提高","网站","这样","你","笔记本","清晰","巨人","经历","带领","github","万万","说干就干","移动机器人","中","2017","此","推进","工业","发展","教程","年轻人","系统","同一","沉淀","全人类","人形","才","局限","频繁","推荐","框架","制造","许可","方式","详细","或者","xbox","柔性","实现","成本","通常","线上","单独","好","越来越","：","年底","之旅","完成","啦","一堂"," ","问题","充足","版本","b","工程","、","operating","用户","斯坦福","无疑","变为","等","discourse","效果","限于","明智","技术","软件","聊天","新增","从","叫做","离不开","友好","款","想法","做","一起","广泛","传感器","而生","a","原因","基于","生态","其实","新鲜","商业","毛巾","前","联合","2","并","开发者","浏览量","自身","一群","基本上","给","浪潮","后期","受限","社区","容易","大笔","加","主阵地","很快","无聊","而言","整合","站","方向","介于","为了","智能","名称","通信","长期","玩耍","苹果","。","采购","据库","亚马","随着","只要","复杂","复用","2012","功能","出来","index","其他","得以","一大步","包","入门","一大","2014","对于","宽松","福大","到","普遍","不多","助推","大","记录","wiki","答案","turtlebot","棒","多万","速度","什么","ros2","上边","确定","一套","做成","源码","如果","洗衣","乐意","上","过程","推出","大会","特性","非常","原型","本","扩展","高效","同时","模块化","有","产品","会","等等","访问","各种","头发","没想","巨大","长远","为例","事情","此时","数据","20","没想到","别人","windows","操作系统","比如","部件","一步","不开","增长","讨论","零","不下","尝试","看到","价格","感器","深知","来","讲解","算是","起来","这群","采用","外观","早期","看中","全球","日常","首先","精致","其次","课程","第一","案例","没有","每年","浏览","低","linux","下","臂","操作","叠","围绕","美妙","认识","却步","掀起","各样","近几年","他们","5","学术","活跃","世界","之上","org","简称","轰动","帮助","生态系统","google","已经","那","风险投资","实验室","几百万","answers","入门教程","媒体","一样","逐渐","呢","不要","齐聚一堂","得到","都","多项","整理","肯定","100","历经","核心","维基","便宜","加上","迎来","全球化","这个","将","的","成为","人类","代表","起点","标志","引擎","应用软件","为什么","年轻","嘉宾","参考资料","不乏","索引","百科全书","研发","机器人","风险","具备","内容","个人","统计","汽车","资源","关键","所以","时候","游戏机","绝大","效率","暴露","能够","维基百科","后续","同理","月","回到","下载","一切","被","两个","选择","活动","还有","受限于","活跃度","也","不断","手机","图中","2022","古月","百万","ubuntu","更新","结晶","system","绝大部分","集合","packages","只想","度","通过","intel","大量","每","量级","利器","步伐","论坛","曲线","笔记本电脑","板块","开始","40","两年","排名","无论是","“","越来","复合","几乎","百科","家","肩膀","2011","独立","陪","嵌入式","知识","和","月底","接下来","认识一下","第一次","conference","无论","150","此后","而且","大有可为","了","分享","着","价格便宜","几百","游戏","条","让","，","大学","提供","迭代","以","近两年","相关","正在","250","这位","收拾","最高","挑战","pr2","要",".","居","成果","garage","怀揣","控制","干","工具","来到","图","衣服","统统","该","轮子","进行","组成","重要","”","视频","这是","新鲜事","快","熨烫","重新","willow","掌握","不断更新","进化","趋势","横跨","humble","正如","这款","同样","重量","2007","项目","有人","注意","初期","多媒体系统","120","支持","强悍","几个","发表","大部分","笔记","最佳","高度","—","却","居高不下","斯坦福大学","层面","一下","代","率","差不多","四大","全书","许可证","电路","重量级","最后","第一个","所学","物体","了解","不仅","用于","投资","进入","而","多媒体","正式","当时","简单","动力","特点","时代","底盘","我们","零部件","对","但是","一大笔","大大","开发","更","应用","不是","时间","野蛮","这","c","跟随","一家","上图","机械","人才","增长速度","下来","还是","是","万人","不到","模块","使用","机器","成熟","于","直到","针对","加快","起","投了","剪头发","可能","甚至","还","一大笔钱","万左右","缩短","处理","迅猛","存储","泡泡","不","然后","因","次数","资本","很","虽好","提取","开源","作为","/","15","向","真的","推动","总称","world","本身","目标","面纱","新","涉及","疫情","体感","来讲","现在","时至今日","促使","诞生","；","扫地","roscon","关于","真正","同学","场景","把","做法","在","创意","绝对","提问","设计","分钟","四项","为","上去","创始","25","解决","原本","革命","方法","不想","举办","木头","标准","限性","之内","成功","一届","问答","台球","元素","体系","只","来看","回答","不同","总而言之","做饭","向前走","有志","所有人","人数","这里","一款","神兵","资金","智能化","想到","来自","身影","多","主要","局限性","快速","使命","同年","跨平台","根据","一个","机制","80","各项","维基百","努力","普及","生态系","personal","找到","一系列","左右","全人","很多","虽然"],"title":"ROS和ROS2是什么","title_tokens":["什么","ros2","和","是","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#rosros2","text":"智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。","text_tokens":["我们","进化","掀起","向","对"," ","就","了","开发","应用","重量","这","量级","那","面纱","，","ros","认识","操作系统","正在","高度","什么","又","智能化","ros2","方向","挑战","是","智能","？","呢","下来","一下","中","。","机器","提出","系统","重量级","场景","带领","一起","的","而生","神秘","全","接下","这位","接下来","大家","嘉宾","时代","认识一下","操作","巨大","机器人"],"title":"ROS/ROS2是什么","title_tokens":["/","什么","ros2","是","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人—— PR2 ，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。","text_tokens":["完成","他们","5"," ","问题","横跨","一些","充足","一系","、","同样","这款","2007","斯坦福","所有","有人","帮助","初期","等","已经","那","性能","实验室","轰动","技术","强悍","软件","聊天","以叠","向前","实验","—","却","呢","斯坦福大学","？","层面","都","打","代","系列","整理","肯定","100","款","电路","最后","自己","想法","做","一起","这个","的","成为","物体","而生","应用软件","基于","用于","为什么","当时","毛巾","大家","青年","联合","2","机器人","并","我们","零部件","圈","但是","一群","开发","可以","应用","不是","更","学术","这","个人","后期","软件系统","容易","所以","很快","无聊","机械","是","时候","智能","不到","效率","玩耍","苹果","。","机器","只要","一切","针对","复杂","做出","剪头发","服务","可能","甚至","还","出来","其中","功能","得以","专业","一大步","平台","也","用","处理","手机","不","既然","一大","图中","对于","给出","因","很","福大","真的","推动","光靠","就是","从中","ros","答案","个","涉及","什么","类似","研究","诞生","一套","有没有","如果","如何","洗衣","年","robot","在","上","因为","越来","团队","设计","非常","分钟","家","原型","独立","高效","陪","有","人","和","不想","第一次","大步","头发","木头","标准","一次","之内","而且","就","为例","了","台球","分享","这样","事情","此时","你","只","条","做饭","向前走","有志","别人","，","所有人","大学","操作系统","一款","部件","资金","收拾","说干就干","中","pr2","要","多","尝试","看到","深知","干","系统","同一","图","衣服","才","外观","精致","框架","一个","或者","组成","重要","柔性","实现","第一","personal","没有","低","找到","一系列","熨烫","很多","操作","叠","越来越","虽然","："],"title":"ROS的诞生","title_tokens":["诞生","ros","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_1","text":"ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称 ROSCon ，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。","text_tokens":["却步","各样","他们","一堂"," ","问题","5","版本","humble","熟悉","项目","operating","简称","2007","斯坦福","注意","所有","、","变为","等","已经","风险投资","官方","几百万","支持","限于","2010","软件","大部分","笔记","—","一样","逐渐","居高不下","直接","斯坦福大学","齐聚一堂","从","叫做","适用","历经","款","提出","自己","便宜","做","加上","迎来","第一个","这个","五年","的","成为","传感器","起点","了解","不仅","标志","原因","投资","进入","全新","而","商业","年轻","正式","大部","时代","前","2015","不乏","底盘","机器人","风险","开发者","圈","我们","大大","但是","一大笔","更","开发","可以","应用","时间","野蛮","这","给","个人","后期","一家","跟随","受限","关键","大笔","所以","很快","之上","正式版","时间轴","是","游戏机","为了","名称","绝大","电脑","稳定","暴露","能够","介于","使用","。","机器","成熟","亚马","随着","于","回到","直到","加快","被","起","投了","2012","功能","服务","出来","其中","一大笔钱","受限于","也","亚马逊","一大","肩负着","2014","2022","部分","资本","福大","虽好","百万","ubuntu","提取","开源","每个","到","system","kinect","改为","推动","绝大部分","各种各样","助推","大","只想","intel","world","每","ros","步伐","终于","疫情","体感","肩负","turtlebot","几年","笔记本电脑","现在","当初","ros2","类似","开始","微软","诞生","确定","扫地","两年","roscon","真正","年","把","robot","在","版","过程","因为","推出","发布","越来","大会","团队","设计","原型","本","2011","为","公司","人","会","创始","月底","和","原本","各种","传感","多年","没想","举办","爆款","conference","限性","此后","成功","望而却步","一届","就","了","分享","着","价格便宜","几百","游戏","笔记本","没想到","让","，","大学","操作系统","经历","一款","迭代","近两年","这里","万万","中","想到","pr2","增长","来自","身影","2017","不下","多","发展","garage","价格","感器","控制","局限性","教程","年轻人","系统","快速","讲解","这群","采用","早期","看中","使命","同年","全球","局限","该","进行","一个","xbox","重要","普及","成本","第一","线上","每年","这是","下","单独","willow","操作","越来越","长期","年底"],"title":"ROS的发展","title_tokens":["ros","的","发展"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_2","text":"ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化 的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的 应用案例在社区中沉淀 下来； ROS本身也是完全开源的， 商业许可证非常宽松 ； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品， 缩短了产品的上市时间 ； ROS也可以 跨平台使用 ，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多 支持工业应用 的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["各样","他们"," ","b","正如","、","多媒体系统","生态系统","已经","那","支持","明智","技术","软件","向前","繁荣","媒体","不要","直接","新增","都","从","率","多项","商业化","越来越","四大","友好","核心","许可证","今日","最后","自己","做","一起","全球化","这个","将","的","广泛","成为","人类","代表","a","引擎","用于","生态","ros1","多媒体","商业","简单","大家","特点","已有","并","机器人","我们","自身","具备","嵌入","对","开发","可以","这些","不是","c","更","应用","给","这","时间","社区","一家","汽车","机械","人才","整合","站","还是","下来","是","智能","通信","模块","动机","采购","。","使用","机器","同理","领域","复用","被","功能","还","远","造","之","由","也","水下","缩短","平台","宽松","做到","部分","完全","开源","到","普遍","结晶","开发工具","各种各样","集合","智慧","上市","总称","本身","尽量","就是","目标","很多","ros","新","来讲","时至今日","ros2","促使","；","移动","做成","无论是","把","做法","在","创意","“","上","至今","越来","进步","复合","设计","非常","特性","家","肩膀","模块化","同时","嵌入式","有","公司","上去","产品","会","和","跑","各种","无论","标准","长远","提高","就","了","分享","体系","这样","着","向前走","别人","，","巨人","windows","这里","比如","一步","以","智能化","移动机器人","中","此","身影","零","推进","多","成果","发展","看到","怀揣","工具","工业","来","系统","快速","沉淀","全人类","人形","统统","全球","轮子","跨平台","制造","许可","一个","机制","组成","”","实现","生态系","案例","通常","linux","臂","重新","全人","围绕","："],"title":"ROS的特点","title_tokens":["ros","的","特点"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_3","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。","text_tokens":["近几年","趋势"," ","问题","最为","活跃","、","org","用户","无疑","等","discourse","已经","几个","希望","发表","answers","大部分","最佳","得到","呢","？","都","从","差不多","核心","提出","维基","访问量","的","成为","代表","查看","其实","新鲜","数据库","动力","大部","大家","索引","研发","开发者","浏览量","我们","机器人","开发","可以","应用","这些","基本上","这","给","统计","社区","资源","浪潮","加","页面","而言","参考","学习","上图","整合","增长速度","情况","是","万人","可为","绝大","说明","维基百科","使用","。","机器","据库","月","下载","国家","两个","选择","功能","活动","其中","index","其他","万左右","活跃度","包","地域","也","迅猛","存储","不","总体","部分","次数","很","以上","每个","到","作为","15","不多","绝大部分","packages","助推","大","度","通过","每","就是","很多","wiki","ros","利器","新","论坛","几年","曲线","棒","多万","速度","什么","现在","这一波","基本","上边","40","；","更为","排名","关于","源码","如果","张图","在","乐意","上","绝对","发布","越来","非常","程度","百科","四项","本","万","有","任何","人","等等","会","和","访问","25","革命","各种","150","问答","大有可为","就","元素","网站","了","来看","回答","数据","20","不同","总而言之","你","清晰","，","人数","这里","神兵","比如","相关","250","正在","最高","中","讨论","增长",".","多","发展","看到","教程","算是","起来","快速","全球","日常","频繁","根据","方式","一个","80","各项","维基百","重要","浏览","这是","新鲜事","快","左右","记录","越来越","："],"title":"ROS的社区","title_tokens":["ros","社区","的"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#_1","text":"关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["啦","工程"," ","问题","最为","世界","项目","120","所有","google","效果","几个","技术","大部分","入门教程","—","一段","都","从","离不开","全书","最后","更好","工程师","所学","一起","这个","将","的","成为","资料","配合","欢迎","大部","大家","参考资料","百科全书","机器人","我们","开发","可以","代码","这","内容","社区","主阵地","学习","参考","一定","是","万人","绝大","阵地","使用","。","后续","机器","还","还有","也","入门","不断","泡泡","然后","部分","古月","开源","更新","作为","绝大部分","之王","大量","ros","托管","ros2","板块","开始","踏上","关于","同学","在","提问","几乎","百科","搜索","本","扩展","知识","有","会","和","解决","方法","网站","分享","你","，","提供","这里","不开","github","中","要","居","主要","工具","教程","来到","首先","推荐","其次","课程","一个","详细","努力","重要","视频","找到","掌握","好","不断更新","美妙","之旅"],"title":"参考资料","title_tokens":["参考资料","参考","资料"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/","text":"ROS2对比ROS1 在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。 ROS1的局限性 首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。 全新的ROS2 ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。 ROS2 vs ROS1 系统架构 在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。 DDS通信 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。 核心概念 ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。 编码方式 再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。 命令行 最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随教程，你就会慢慢理解这些特性。","text_tokens":["熟悉","一些","角度","最为","客户端","初次","毛坯房","性能","所有","ament","启动","强","没","唯一","一一","直接","？","收","企业","周期","算力","适用","先进","保证","行为","再","担忧","国际标准","自己","更好","大幅","新版","小伙","macos","消费市场","系统工程","编译系统","生产","带来","第二种","ros1","足够","全新","rmw","纠结","另","批量","大部","大家","看","诟病","力学","编译器","下边","嵌入","常用","性","可以","这些","代码","最早","软件系统","只能","基本保障","学习","一定","左侧","新一代","稳定","电脑","说明","小","一团乱麻","管理器","udp","服务","第二","历史使命","生活","对系统","其中","控制器","平台","实力","用","项目管理","全","里","减少","总体","做到","部分","主角","房子","切换","运行","以上","编译","每个","干掉","驱动","打交道","各种各样","一行","编程语言","体现","尽量","就是","较","方案","ros","最终","除此之外","之间","基本","灵活","丢","研究","类似","分解","雷达","天翻地覆","不好","高昂","移植","相对","推倒","如何","张图","编码","因为","发布","先","翻地","真实","任何","尤其","公司","android","对象","翻新","不难理解","成功经验","mcu","就","提高","能","不过","这样","你","稳定性","分散","自动","带领","中","调试","条件","厂家","过去","搬","与","运动","担心","发展","共享内存","除此","教程","系统","写","局限","陌生","频繁","框架","接近","下要","调用","方式","学","或者","学术研究","听说","实现","主","成本","自家","保障","更加","好","越来越","：","完成","装修","改","啦","工程"," ","问题","充足","版本","、","会成","用户","等","即可","么","软件","实时性","建立","中间层","历史","从","叫做","出错","款","二种","不爽","做","可靠","成","广泛","一团","陆续","前方","基于","千差万别","举","其实","5g","商业","之后","接触","放在","ceo","也许","封装","借助","语言","并","能力","开发者","但","某","受制于","颠覆","给","社区","换成","分布式","一本","软件开发","master","体验","通用性","而言","为了","智能","名称","通信","discovery","用到","伙伴","。","随着","是从","只要","复杂","复用","适配","功能","到底","其他","良好","总结","图片","中间","解密","对于","面向","环境","应该","间层","内存","到","安全","python","继续","售价","可选项","大","要求","通信接口","迈过","搭载","答案","存在","后","rtos","表示","以下","什么","比","ros2","三个","乱麻","干扰","变化","自","一套","它","做成","协作","还会","驾驶","产品化","如果","上","阶段","过程","接入","格局","国际","编写","特性","非常","右侧","难度","分布","本","一边","命令行","涌现","同时","有","总体而言","产品","会","各种","重来","地方","宕机","巨大","长远","数据","时","总之","windows","课时","操作系统","比如","一步","幅度","复杂度","发成","topic","概念","进程","来","讲解","不会","全球","首先","物","课程","不断涌现","理解","开发成本","怎样","第一","一页","优化","满足","没有","得","发","有线","linux","下","各位","交道","操作","消失","程序","库会","由于","各样","他们","通信协议","而已","学术","可靠性","之上","简称","二个","运算","安装","已经","那","几百万","面向对象","通用","适合","很大","一样","呢","依然","不要","都","信号","内","肯定","需求","核心","单兵作战","catkin","设备","这个","将","的","省略","最新","单兵","几点","为什么","节点","加入","含义","暂且","厂商","个体","图像","无法","突然","之外","更接","作战","安全性","远比","研发","最","类型","机器人","具备","风险","一代","借鉴","可移植性","之前","结合","汽车","资源","所以","指挥","确实","交付","发送","共享","管理","可读","时候","只是","绝大","能够","批量生产","之初","动力学","（","毛坯","不难","后续","发布者","级别","完善","受制","两个","选择","盖","变得","勿躁","建筑","rostopic","还有","名字","也","第二个","以下几点","不断","加密","手机","连接","尽力","高","百万","对比","开发方式","简单明了","接收","至关重要","编程","致使","colcon","绝大部分","去","命令","听","通过","大量","每","可移植","why","请","开始","是否","内部","当","可选","现有","符合","编码方式","越来","网络","深入","几乎","所示","运动学","）","标准化","揭秘","独立","嵌入式","rosbuild","和","工作站","无论","tcp","广泛应用","角色","上手","看看","了","大幅度","几百","只不过","让","部署","道坎","，","提供","层","相关","定性","话题","挑战","常","pr2","要","从而","当然","怀揣","控制","工具","多功能","轻松","导致","考虑","不能","行人","该","进行","过来","完整","部头","网络连接","出现","重要","fastrtps","上升","完整性","重新","或","面对","选项","印象","客户","最大","项目","注意","同样","不够","二代","微控制器","支持","接口","未来","定义","大部分","大致","最佳","修改","—","例子","细节","层面","一下","率","似乎","配置","工作","明显","一致","最后","dds","另外","第一个","不用","链接","需要","可读性","依赖","了解","不仅","打成","他","用于","而","计算","动力","流程","简单","推倒重来","丰富","消费","时代","布式","延迟","我们","底层","对","但是","哪些","开发","更","时间","应用","这台","1ms","这","不是","基础","协议","跟随","一家","差异","信息","方便","过","是","架构","虽然","使用","机器","于","针对","实时","走向市场","彼此","甚至","还","可能","提","家庭","处理","全部","变革","便于","不","然后","交给","面临","opensplice","迁移","两者","更换","有且","vs","开源","如","/","走","原有","除了","一团乱","至关","目标","发现","第二代","完","来讲","amr","策略","诞生","wifi","指定","；","run","电脑系统","真正","经验","场景","把","整体","在","集成","一种","升级","设计","移植性","保留","为","有限","解决","原本","api","方法","稍安","限性","标准","成功","理器","只有","更具","python3","来看","不同","rosrun","大部头","诸多","精力","测试","middleware","这里","一款","入侵","c++","是因为","小伙伴","慢慢","走向","具体","联网","意义","相比","多","主要","100ms","多个","专注","局限性","一旦","不太","想要","使命","按照","属性","市场","跨平台","颠覆性","经常","一个","机制","普及","黑客","强壮","产品开发","航天","切记","找到","不再","以及","应用层","很多","解算"],"title":"ROS2对比ROS1","title_tokens":["ros2","ros1","对比"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2ros1","text":"在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。","text_tokens":["或","我们","看看"," ","就","之前","能","大","来看","你","这","二代","就是","么","，","ros","第二代","学习","ros2","过","？","名称","从","变化","多","使用","。","在","上","做","第二","的","到底","其中","一个","听说","有","ros1","不","和","也许","对比"],"title":"ROS2对比ROS1","title_tokens":["ros2","ros1","对比"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros1","text":"首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。","text_tokens":["完成"," ","问题","一些","充足","学术","可靠性","不够","运算","已经","支持","那","软件","大部分","适合","—","历史","呢","？","从","都","算力","先进","保证","似乎","款","担忧","单兵作战","工作","设备","自己","第一个","不用","可靠","的","生产","他","单兵","用于","ros1","足够","为什么","计算","批量","大部","作战","类型","具备","能力","我们","机器人","风险","并","嵌入","但是","一代","开发","可以","时间","应用","最早","这台","这","汽车","资源","只能","是","为了","绝大","通信","批量生产","新一代","小","。","机器","随着","级别","针对","复杂","实时","走向市场","服务","甚至","良好","平台","家庭","实力","处理","用","也","不断","不","部分","连接","主角","运行","致使","绝大部分","售价","就是","目标","ros","搭载","答案","最终","why","什么","ros2","丢","研究","干扰","类似","诞生","内部","；","天翻地覆","它","高昂","做成","驾驶","在","上","因为","网络","设计","翻地","独立","嵌入式","涌现","有","有限","产品","会","和","原本","各种","地方","工作站","就","了","这样","来看","数据","让","，","一款","入侵","比如","自动","是因为","中","走向","具体","pr2","条件","要","发展","当然","系统","首先","市场","框架","课程","一个","网络连接","不断涌现","或者","学术研究","出现","普及","黑客","第一","成本","航天","没有","更加","找到","有线","虽然","：","由于"],"title":"ROS1的局限性","title_tokens":["ros1","局限","的","局限性","限性"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2","text":"ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。","text_tokens":["毛坯房","性能","所有","ament","强","直接","？","周期","算力","行为","自己","新版","macos","消费市场","系统工程","编译系统","第二种","ros1","全新","纠结","大家","力学","编译器","代码","性","可以","这些","基本保障","一定","稳定","电脑","说明","管理器","生活","历史使命","第二","对系统","控制器","平台","用","项目管理","全","做到","房子","运行","编译","各种各样","体现","尽量","就是","较","方案","ros","最终","之间","基本","类似","分解","不好","移植","相对","推倒","如何","任何","尤其","android","翻新","成功经验","mcu","就","能","这样","稳定性","自动","中","调试","过去","与","运动","系统","框架","下要","或者","实现","保障","更加","好","越来越","：","完成","装修","工程"," ","问题","、","等","软件","实时性","历史","叫做","出错","二种","可靠","前方","千差万别","借助","语言","并","开发者","但","受制于","颠覆","给","分布式","master","体验","通用性","为了","智能","通信","。","复杂","解密","环境","到","安全","python","继续","大","要求","搭载","后","rtos","以下","比","ros2","变化","还会","它","协作","驾驶","产品化","上","阶段","格局","编写","特性","分布","同时","有","产品","会","各种","重来","宕机","巨大","长远","数据","windows","课时","操作系统","比如","不会","课程","怎样","第一","优化","满足","没有","得","linux","下","操作","各样","他们","之上","已经","那","通用","很大","适合","呢","都","信号","内","肯定","需求","catkin","这个","的","最新","几点","节点","个体","无法","安全性","远比","研发","借鉴","机器人","具备","风险","结合","汽车","所以","发送","管理","时候","只是","能够","毛坯","之初","动力学","（","后续","受制","两个","选择","盖","建筑","也","以下几点","加密","手机","连接","尽力","colcon","去","大量","越来","网络","运动学","）","标准化","独立","rosbuild","和","无论","角色","了","让","部署","，","提供","定性","挑战","要","怀揣","控制","工具","导致","考虑","不能","行人","进行","完整","网络连接","出现","完整性","重新","面对","项目","微控制器","接口","未来","最佳","修改","细节","层面","一下","工作","明显","dds","第一个","不用","链接","需要","不仅","打成","用于","流程","动力","简单","推倒重来","消费","时代","布式","我们","对","但是","开发","更","应用","不是","1ms","基础","这","差异","方便","是","架构","虽然","使用","机器","于","针对","实时","甚至","还","可能","提","全部","变革","不","面临","原有","除了","发现","amr","策略","wifi","电脑系统","真正","经验","场景","把","在","一种","升级","设计","保留","为","原本","api","方法","标准","成功","理器","更具","python3","来看","不同","诸多","测试","一款","入侵","c++","走向","具体","相比","多","100ms","一旦","使命","市场","跨平台","颠覆性","经常","一个","机制","黑客","强壮","不再","以及","很多","解算"],"title":"全新的ROS2","title_tokens":["ros2","的","全新"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2-vs-ros1","text":"","text_tokens":[],"title":"ROS2 vs ROS1","title_tokens":["ros2","vs","ros1"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_1","text":"在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。","text_tokens":["选项","通信协议"," ","印象","而已","客户","客户端","、","注意","会成","所有","安装","那","接口","大致","—","建立","中间层","一样","都","内","肯定","再","明显","另外","dds","成","这个","需要","的","将","依赖","一团","macos","了解","基于","ros1","而","节点","接触","简单","大家","ceo","图像","看","突然","封装","最","并","我们","底层","但","下边","哪些","这些","可以","应用","协议","开发","这","指挥","信息","master","学习","共享","管理","过","是","时候","左侧","架构","通信","稳定","discovery","不难","交道","。","后续","一团乱麻","管理器","是从","复杂","完善","udp","彼此","变得","名字","中间","也","里","不","连接","两者","更换","有且","间层","内存","对比","简单明了","应该","接收","至关重要","打交道","驱动","走","一团乱","可选项","听","至关","通过","库会","通信接口","大量","就是","ros","发现","rtos","ros2","请","乱麻","类似","开始","变化","雷达","自","一套","可选","它","如果","把","张图","整体","在","上","发布","深入","右侧","先","有","公司","会","和","方法","不难理解","tcp","角色","标准","理器","只有","就","了","不过","这样","数据","只不过","让","，","windows","提供","操作系统","比如","层","中","从而","主要","进程","共享内存","不太","系统","写","频繁","进行","框架","调用","方式","一个","机制","理解","重要","得","更加","找到","linux","应用层","好","很多","操作","消失","程序"],"title":"系统架构","title_tokens":["架构","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#dds","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。","text_tokens":["改","通信协议"," ","问题","熟悉","版本","一些","最大","、","简称","用户","性能","安装","等","接口","么","软件","定义","唯一","例子","一样","？","层面","收","都","适用","率","肯定","配置","需求","再","国际标准","dds","不爽","做","不用","这个","的","广泛","省略","带来","基于","举","ros1","其实","5g","rmw","商业","另","纠结","加入","简单","放在","厂商","丰富","之外","无法","诟病","最","延迟","并","机器人","我们","底层","某","协议","可以","应用","不是","更","代码","这","给","这些","开发","软件系统","一家","社区","所以","交付","master","是","为了","能够","通信","稳定","。","机器","于","只要","复用","适配","复杂","udp","选择","功能","还有","其他","用","也","减少","加密","不","然后","交给","对于","opensplice","高","切换","部分","更换","应该","开源","每个","/","除了","一行","每","就是","目标","ros","完","来讲","ros2","三个","基本","灵活","丢","类似","变化","指定","是否","如果","移植","如何","场景","把","在","接入","符合","一种","国际","设计","先","为","产品","会","解决","各种","广泛应用","tcp","标准","就","提高","了","不过","这样","数据","不同","时","部署","总之","，","让","精力","提供","middleware","这里","比如","复杂度","发成","中","常","厂家","联网","要","相比","多","多个","专注","当然","系统","轻松","想要","按照","写","属性","该","频繁","物","过来","一个","开发成本","听说","实现","成本","自家","fastrtps","发","得","产品开发","满足","更加","优化","好","重新","程序"],"title":"DDS通信","title_tokens":["dds","通信"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_2","text":"ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。","text_tokens":["我们","熟悉"," ","就","了","开发","这些","应用","二个","几百","尽量","小伙","已经","很多","几百万","，","ros","存在","这里","学习","依然","一一","ros2","过","中","小伙伴","意义","从","伙伴","担心","使用","概念","。","如果","讲解","一致","在","全球","陌生","不用","并","第二","几乎","非常","广泛","的","其中","保留","课程","方式","本","也","有","ros1","第二个","便于","不","没有","会","含义","和","大家","迁移","部分","以及","方法","百万","各位","应该","开发方式","到","开发者"],"title":"核心概念","title_tokens":["核心","概念"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_3","text":"再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。","text_tokens":[" ","角度","一些","版本","项目","同样","软件","面向对象","不要","从","企业","再","更好","可读性","的","ros1","之后","暂且","大部","大家","更接","语言","机器人","具备","我们","可移植性","更","开发","这","一本","确实","软件开发","而言","学习","可读","是","用到","。","后续","机器","发布者","两个","勿躁","图片","用","也","总体","面向","编程","如","编程语言","迈过","发现","可移植","来讲","ros2","当","移植","如何","在","编码","过程","发布","特性","难度","所示","移植性","一边","真实","总体而言","对象","会","和","方法","稍安","看看","提高","就","不过","道坎","，","大部头","一步","带领","中","具体","搬","多","来","教程","写","接近","课程","方式","一个","学","实现","一页","切记","部头","操作","程序"],"title":"编码方式","title_tokens":["方式","编码方式","编码"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_4","text":"最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随教程，你就会慢慢理解这些特性。","text_tokens":["啦","印象"," ","初次","最为","所有","启动","即可","没","大致","—","都","再","核心","最后","大幅","做","dds","的","陆续","ros1","节点","大家","之外","我们","常用","某","对","开发","更","这些","跟随","换成","master","而言","是","通信","。","后续","选择","功能","rostopic","总结","也","以上","对比","干掉","编程","命令","每","就是","ros","除此之外","表示","ros2","变化","run","如果","相对","把","现有","在","集成","一种","特性","难度","命令行","揭秘","独立","有","会","和","上手","就","了","大幅度","你","rosrun","分散","，","比如","相关","幅度","话题","慢慢","中","topic","概念","工具","控制","除此","多功能","教程","一个","理解","主","上升","下","好","："],"title":"命令行","title_tokens":["命令","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/","text":"ROS2安装方法 本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。 Linux系统简介 时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。 Ubuntu系统简介 我们后续课程使用到的Linux发行版就是 ubuntu系统 。 Ubuntu诞生于2004年10月份， 每六个月发布一个新版本 ，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。 Ubuntu虚拟机安装 虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下： 1. 下载系统镜像 下载链接： https://ubuntu.com/download/desktop 2. 在虚拟机中创建系统 3. 设置虚拟机硬盘大小 4. 设置Ubuntu镜像路径 5. 启动虚拟机 6. 设置用户名和密码 7. 等待系统安装 8. 完成安装 Ubuntu系统安装好后，大家可以先随意使用熟悉一下。 ROS2系统安装 接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下： 1. 设置编码 $ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8 2. 添加源 $ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844 3. 安装ROS2 $ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop 4. 设置环境变量 $ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。 ROS2示例测试 为了验证ROS2安装成功，我们可以通过以下示例进行测试。 示例一：命令行示例 先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。 示例二：小海龟仿真示例 再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["出于","熟悉","guyuehome","一些","最为","性能","启动","按键","唯一","关注","反馈","直接","？","企业","人工","适用","创建","密码","修复","保证","一直","随意","\"","再","share","构建","准确","deb","自己","优先","macos","8","bash","资料","22","大家","已有","尚","3","常用","代码","可以","bashrc","小海龟","参考","lsb","一定","情况","热爱","准备","稳定","电脑","说明","list","领域","行列","普通","芬兰","一句","服务","第二","其中","二句","实力","节","ssl","运行","etc","各种各样","爱好","免费","海龟","就是","update","by","ros","个","除此之外","这套","基本","放到","可视化","移植","如何","年","版","编码","因为","发布","俱全","人工智能","先","会加","任何","公司","顺序","接下","unix","提交","nodes","上下","一次","keyrings","就","试一试","http","这样","你","用户名","utf","说干就干","占据","中","connect","products","与","等待","运动","发展","除此","教程","前先要","浏览器","系统","当中","6","步骤","install","千层","或者","键盘","实现","一般","node","rosdistro","4","唯一标准","opt","ubuntu20.04","好","release","分别","越来越","中将","：","完成","啦","第一句"," ","问题","户名","版本","gpg","报错","、","用户","并且","等","效果","技术","软件","每隔","发扬光大","虚拟","从","叫做","好者","https","做","一起","成","raw","商业","lc","之后","内核","激起","接触","简介","2","开发者","并","者","何人","但","给","demo","d","软件开发",":","master","upgrade","热情","叫","务器","export","变动","智能","一位","为了","通信","长期","。","all","redhat","动手","小海","功能","其他","curl","本相","hello","上下左右","环境","html","应该","大小","到","虚拟机","desktop","至此","一应","-","可","大","实践","地址","locales","githubusercontent","后","表示","镜像","什么","以下","ros2","摩拳擦掌","强大","任务","一套","centos","如果","字符","上","过程","介绍","源","本","命令行","同时","吸引","有","等等","会","各种","紧随","为例","gnupg","此时","发扬","数据","可视","六个月","时","windows","操作系统","吧","比如","好后","爱好者","pro","看到","概念","来","讲解","起来","变量","真理","采用","课程","仿真","echo","第一","硬盘","没有","每年","浏览","linux","下","操作","程序","看出","各样","5","之上","org","fedora","二个","背景","编辑","安装","量","已经","打包","o","并用","通用","适合","一样","依然","呢","&&","大学生","多任务","都","环境变量","通讯","紧随其后","核心","正常","激发","加上","检验","千层浪","这个","us","的","成为","终端","代表","将","应用软件","(","setup","节点","加入","模式","光大","个人爱好","之外","发行","=","最","界面","机器人","之前","编号","cpp","个人","位置","二","林纳斯","服务器","所以","算机","互联","之一","管理","时候","精神","1991","验证","后续","发布者","月","回到","下载","乐于","两个","选择","名字","archive","指令","也","第二个","2022","一","ubuntu","合适","更新","月份","sources","talker",">","packages","命令","通过","大量","多人","每","出","多用","上层","其后","]","18","请","添加","开始","04","$","是否","两年","无论是","环境变","“","failed","越来","网络","路径","第二句","en","和","接下来","目前","第一次","无论","了","分享","经典","workstation","让","sudo","，","如遇","大学","以","_","vmware","其他软件",".","开放","真器","仿真器","控制","示例","考虑","试试","print","该","进行","应用程序","伴随","dpkg","出现","turtle","重要","”","收费","订阅","apt","os","相同","to","快","重新","各个","~","或","蕴藏","listener","lts","humble","最大","传输","自行","codename","支持","未来","建议","—","1","一下","文件","工作","|","另外","dds","10","第一个","一石激起千层浪","链接","signed","点击","需要","依赖","37844","了解","不仅","编辑器","他","基本相同","最好","指标","py","命名","计算","--","如下","我们","底层","一应俱全","对","但是","更","维护","时间","应用","开发","这","keyring","7","还是","下来","是","互联网","原理","null","使用","成熟","机器","于","兼容","发挥","com","www","usr","甚至","还","可能","数字","任何人","计算机","擦掌","其","evaluation","迅猛","不","很","设置","开源","download","/","原有","除了","决定","奥义","world","turtlesim","外衣","华丽","多用户","操作方法","新","比较","来讲","后缀","key","main","技术实力","现在","传播","影响","tee","诞生","run","蓝色","探索","关于",")","locale","2004","硬件","把","场景","在","绝对","一种","升级","设计","六个","gen","有限","源代码","原本","方法","dev","字符串","标准","之内","成功","绑定","arch","只","不同","动手做","测试","这里","提到","学生","联网","[","多个","多","主要","发行版","先要","不太","快速","想要","衡量","teleop","source","bug","一个","操作界面","lang","左右","很多","architecture","持续","虽然","ubuntu22.04"],"title":"ROS2安装方法","title_tokens":["ros2","方法","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2","text":"本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。","text_tokens":["我们","底层","安装","，","操作系统","—","ros2","一下","。","先要","前先要","系统","一起","一种","的","了解","本","重要","节","linux","操作","最"],"title":"ROS2安装方法","title_tokens":["ros2","方法","安装"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#linux","text":"时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。","text_tokens":["或","各样","出于","熟悉"," ","一些","问题","版本","、","之上","用户","并且","fedora","性能","安装","量","已经","支持","打包","等","技术","并用","软件","唯一","通用","反馈","发扬光大","—","呢","适合","大学生","多任务","？","一样","都","企业","叫做","适用","修复","好者","核心","准确","自己","激发","另外","做","加上","一石激起千层浪","一起","检验","成","千层浪","这个","需要","的","成为","macos","依赖","不仅","他","基本相同","最好","应用软件","指标","商业","之后","命名","计算","内核","激起","加入","光大","模式","个人爱好","发行","已有","尚","最","界面","开发者","并","底层","我们","何人","但","对","常用","之前","更","可以","时间","应用","维护","代码","这","开发","个人","给","林纳斯","服务器","所以","算机","互联","热情","参考","叫","务器","之一","管理","情况","是","热爱","互联网","一位","原理","稳定","精神","虽然","1991","使用","。","成熟","行列","回到","redhat","兼容","动手","乐于","芬兰","功能","甚至","还","服务","其中","其他","名字","任何人","计算机","实力","也","其","本相","迅猛","不","ubuntu","应该","开源","到","各种各样","原有","爱好","决定","免费","大","实践","通过","大量","多人","每","就是","多用","华丽","多用户","外衣","操作方法","来讲","后","这套","技术实力","什么","现在","ros2","镜像","强大","基本","传播","任务","一套","放到","centos","可视化","硬件","年","把","场景","在","上","过程","越来","设计","先","本","吸引","任何","有限","源代码","公司","有","等等","会","和","unix","原本","各种","方法","提交","目前","标准","绑定","就","了","分享","此时","发扬","不同","可视","动手做","，","windows","大学","操作系统","比如","说干就干","中","提到","学生","联网","爱好者","与","多","开放","看到","发展","主要","概念","发行版","教程","不太","讲解","系统","快速","起来","当中","真理","衡量","应用程序","伴随","bug","千层","一个","操作界面","或者","出现","重要","实现","收费","一般","没有","每年","相同","linux","下","唯一标准","重新","很多","操作","越来越","程序"],"title":"Linux系统简介","title_tokens":["简介","linux","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu","text":"我们后续课程使用到的Linux发行版就是 ubuntu系统 。 Ubuntu诞生于2004年10月份， 每六个月发布一个新版本 ，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。","text_tokens":["或","5"," ","lts","熟悉","版本","最大","、","用户","性能","编辑","安装","等","效果","支持","已经","自行","未来","软件","每隔","关注","建议","依然","虚拟","直接","都","人工","一下","文件","从","保证","一直","通讯","紧随其后","再","自己","优先","10","的","代表","编辑器","资料","之后","22","接触","大家","之外","发行","已有","机器人","开发者","我们","常用","一应俱全","但是","编号","开发","可以","应用","更","维护","之前","位置","所以","软件开发","互联","参考","还是","一定","互联网","变动","智能","时候","是","为了","稳定","电脑","使用","。","后续","机器","领域","月","于","发挥","选择","普通","可能","还","数字","其中","其他","擦掌","也","2022","很","环境","ubuntu","合适","到","更新","虚拟机","月份","一应","除了","免费","通过","每","就是","出","新","后缀","个","除此之外","比较","表示","上层","其后","摩拳擦掌","18","影响","诞生","04","两年","移植","2004","无论是","如何","如果","年","硬件","在","绝对","上","因为","版","升级","发布","介绍","网络","俱全","六个","人工智能","本","会加","有","会","顺序","各种","方法","第一次","紧随","无论","一次","之内","就","为例","了","试一试","这样","只","不同","你","六个月","让","时","，","windows","这里","比如","以","占据","中","联网","发行版","多","主要","除此","教程","浏览器","系统","讲解","想要","考虑","进行","课程","一个","出现","重要","第一","硬盘","浏览","linux","4","快","ubuntu20.04","好","很多","各个","持续","长期","ubuntu22.04","看出"],"title":"Ubuntu系统简介","title_tokens":["简介","ubuntu","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu_1","text":"虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下：","text_tokens":["/","我们","完成","啦"," ","就","可以","-","之上","地址","安装","自行","workstation","让","，",":","软件","这里","后","虚拟","请","是","vmware","其他软件","products","准备","叫做",".","pro","多个","开始","。","构建","操作","系统","下载","https","工作","另外","在","采用","com","www","的","步骤","其他","一个","同时","evaluation","和","相同","大家","如下","环境","html","运行","已有","虚拟机","：","并"],"title":"Ubuntu虚拟机安装","title_tokens":["虚拟机","安装","ubuntu","虚拟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1","text":"下载链接： https://ubuntu.com/download/desktop","text_tokens":["下载","/","："," ","com","链接",".","ubuntu",":","desktop","https","download"],"title":"1. 下载系统镜像","title_tokens":["下载","镜像","1"," ",".","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2","text":"","text_tokens":[],"title":"2. 在虚拟机中创建系统","title_tokens":["在"," ","虚拟","中",".","创建","虚拟机","2","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3","text":"","text_tokens":[],"title":"3. 设置虚拟机硬盘大小","title_tokens":[" ","虚拟","硬盘",".","设置","大小","虚拟机","3"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4-ubuntu","text":"","text_tokens":[],"title":"4. 设置Ubuntu镜像路径","title_tokens":["镜像"," ","4",".","ubuntu","设置","路径"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#5","text":"","text_tokens":[],"title":"5. 启动虚拟机","title_tokens":["5"," ","虚拟",".","启动","虚拟机"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#6","text":"","text_tokens":[],"title":"6. 设置用户名和密码","title_tokens":[" ","户名","和","用户","6",".","密码","用户名","设置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#7","text":"","text_tokens":[],"title":"7. 等待系统安装","title_tokens":["7"," ",".","等待","安装","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#8","text":"Ubuntu系统安装好后，大家可以先随意使用熟悉一下。","text_tokens":["熟悉","好后","。","可以","大家","一下","安装","ubuntu","随意","先","使用","，","系统"],"title":"8. 完成安装","title_tokens":["完成"," ",".","安装","8"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_1","text":"接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下：","text_tokens":["我们","就","了","可以","安装","，","下来","ros2","中","。","系统","把","步骤","接下","接下来","如下","ubuntu","到","："],"title":"ROS2系统安装","title_tokens":["ros2","安装","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1_1","text":"$ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8","text_tokens":[" ","-","update","sudo","locales","utf","&&","_","export","$",".","all","locale","us","install","gen","8","lang","en","apt","lc","="],"title":"1. 设置编码","title_tokens":["编码","1"," ",".","设置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2_1","text":"$ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844","text_tokens":["guyuehome"," ","gpg","报错","org","codename","o","&&","\"","share","https","|","deb","signed","37844","(","raw","--","=","d","keyring",":","master","参考","lsb","null","list","com","www","usr","archive","curl","ssl","ubuntu","etc","/","sources",">","packages","-","可","update","by","ros","main","githubusercontent","key","]","ros2","tee","$",")","“","failed","dev","keyrings","arch","http","gnupg","sudo","，","如遇","_","connect",".","[","source","print","install","dpkg","”","echo","apt","os","rosdistro","to","release","architecture"],"title":"2. 添加源","title_tokens":[" ","添加","源",".","2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3-ros2","text":"$ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop","text_tokens":["apt"," ","humble","-","$","install","update","sudo","ros","upgrade","desktop"],"title":"3. 安装ROS2","title_tokens":[" ","ros2",".","安装","3"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4","text":"$ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。","text_tokens":["/","至此"," ",">","就","humble","了","安装","已经","，","ros","bashrc","ros2","中","$",".","。","\"","系统","在","source","bash","echo","setup","opt","好","~"],"title":"4. 设置环境变量","title_tokens":["变量"," ","环境变量","4",".","环境","设置","环境变"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_2","text":"为了验证ROS2安装成功，我们可以通过以下示例进行测试。","text_tokens":["成功","我们","以下","ros2","可以","为了","通过","进行","验证","安装","。","，","示例","测试"],"title":"ROS2示例测试","title_tokens":["ros2","示例","测试"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_1","text":"先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。","text_tokens":["底层","者","talker"," ","listener","最为","命令","问题","传输","cpp","二个","通过","数据","demo","启动","world","，","吧","_","以下","ros2","中","通信","run","是否","$","说明","。","来","正常","发布者","如果","系统","字符","dds","在","第一个","“","两个","试试","发布","第二","的","终端","先","一个","重要","”","第二个","第一","订阅","py","节点","hello","没有","nodes","字符串","："],"title":"示例一：命令行示例","title_tokens":["命令","一","命令行","示例","："]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_2","text":"再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["我们","第一句","啦","蕴藏","至此"," ","试一试","就","奥义","海龟","可以","背景","启动","经典","turtlesim","安装","ros","，","按键","小海龟","key","_","—","ros2","中","蓝色","run","$","运动","真器","。","关于","仿真器","控制","来","再","示例","后续","教程","探索","成功","teleop","在","上","“","两个","该","小海","一句","点击","第二","将","的","终端","仿真","一个","二句","第二句","turtle","键盘","指令","”","第一","node","节点","如下","上下左右","左右","分别","运行","持续","中将","上下","："],"title":"示例二：小海龟仿真示例","title_tokens":["小海龟","海龟","小海","二","仿真","示例","："]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/","text":"ROS2命令行操作 在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。 Linux中的命令行 类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。 启动方式 回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。 常用命令操作 我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。 ROS2中的命令行 ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。 运行节点程序 想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看节点信息 当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim 查看话题信息 当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose 发布话题消息 想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 发送服务请求 一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\" 发送动作目标 想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\" 录制控制命令 系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["觉得","转","熟悉","一些","一系","初次","角度","alt","逛来","所有","启动","当前工作","实验","文件名称","又","直接","？","创建","系列","一直","魅力","子目","\"","再","复制","自己","这种","约束","产生","动作","查看","例如","另","大家","复现","3","常用","体操","这些","可以","一二十","小海龟","学习","一定","电脑","小","list","不变","规则","权限","mkdir","服务","用","由","款式","0","theta","运行","以上","完全","打开","找","海龟","感兴趣","就是","ros","当前","科幻电影","消息","灵活","类似","可视化","删除","如何","绝对路径","因为","至今","pwd","发布","随身","先","搜索","改名","action","接下","从来","令人发指","一次","及其","受","就","试一试","播放","不过","查","这样","你","笔记本","这项","带领","中","调试","此","terminal","name","与","db3","里边","商场","系统","太","一只","2.0","调用","方式","详细","或者","键盘","实现","node","常用命令","好","：","rotateabsolute","完成","啦"," ","问题","多种","忙","语法","info","、","知道","用户","孤单","等","即可","软件","子目录","叫做","一起","成","原因","接触","一二十个","怎么","cp","精心","2","并","体会","但","某","进一步","容易",":","体验","名称","用到","。","至于","goal","随着","现出","小海","功能","其他","死机","呈现出","新建","电影","gedit","对于","到","继续","-","列出","absolute","呀","后","表示","什么","ros2","它","如果","文件名","不可","字符","既","0.2","上","必不可少","推出","所在","手","精心设计","play","本","命令行","一边","有","改变","会","各种","vel","目标目录","发指","为例","此时","数据","可视","目的","输入","比如","一步","难以","…","既定","看到","其上","topic","概念","炫酷","来","尝试","起来","}","看中","仿真","写字","echo","第一","案例","满足","没有","ls","深色","源文件","linux","下","service","操作","干什么","程序","详细信息","背景","想","编辑","若","已经","感觉","实验室","一样","呢","快捷键","令人","都","看不到","快捷","自主","本节","需求","右键","正常","核心","目录","加上","这个","将","的","终端","linear","哪","为什么","节点","随身带","列表","geometry","之前","结合","内容","+","每次","所以","确实","rotate","发送","专门","管理","时候","看似","只是","能够","send","件夹","二十","回到","'","pub","段","感受","被","spawn","选择","后边","录制","还有","指令","也","turtle1","msgs","一点","2022","一","rm","去",">","某个","命令","通过","每","出","逛去","科幻","笔记本电脑","拷贝","]",",","40","04","$","死记","管理员","现有","“","则","拷贝到","record","感兴","深入","路径","和","移入","具体操作","接下来","第一次","无论","多到","看看","了","0.0","17","帮上","sudo","让","，","提供","以","_","话题","便捷","要",".","真器","工具","控制","仿真器","想象","轻松","衣服","呈现","该","进行","turtle","重要","”","目","统管","cd","相同","逛来逛去","或","背","选项","定制","显示","改了","十个","商家","未来","不一","笔记","大致","—","1","一下","文件","工作","麻烦","子","第一个","不用","链接","数量","需要","11","了解","编辑器","度高","很少","--","如下","复制到","做好","均","地","总","买","我们","rosbag","对","但是","哪些","更","应用","不是","标目","这","服装","t","z","信息","动","还是","下来","是","不到","异常","虽然","材料","使用","pose","保持","于","鼠标","及","可能","还","x","不","有点","很","文件夹","rate","/","硬","原有","cmd","并不一定","参数","turtlesim","目标","主目录","srv","{","key","来讲","请求","适应","二十个","指定","run","bag","系统管理员","ctrl","mv","总有","1.8","场景","把","绝对","在","集成","call","一种","片段","设计","保留","跟","为","枯燥","某段","什么样","布料","死记硬背","解决","msg","35","y","执行","不同","<","窗口","一件","这里","慢慢","具体","[","多个","多","主要","不太","twist","想要","teleop","兴趣","根据","记忆","一个","机制","而是","黑客","一系列","angular","很多","一二","rosbag2"],"title":"ROS2命令行操作","title_tokens":["ros2","命令","命令行","操作"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2","text":"在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。","text_tokens":["我们"," ","之前","了","海龟","命令","更","可以","进一步","，","小海龟","学习","一步","带领","—","适应","ros2","一定","中","时候","调试","多","使用","。","工具","本节","魅力","如果","不太","随着","在","感受","一种","小海","可能","将","的","深入","命令行","重要","第一","案例","接触","会","有点","大家","第一次","运行","到","一次"],"title":"ROS2命令行操作","title_tokens":["ros2","命令","命令行","操作"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#linux","text":"类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。","text_tokens":[" ","一些","问题","定制","、","逛来","所有","等","已经","商家","不一","软件","一样","呢","？","都","自主","一直","需求","麻烦","自己","这种","成","约束","的","哪","度高","为什么","大家","做好","精心","买","并","我们","但","某","但是","这些","可以","不是","结合","服装","容易","每次","还是","一定","看似","是","时候","能够","异常","材料","使用","。","小","规则","于","被","现出","服务","功能","其他","呈现出","电影","款式","不","一点","对于","完全","去","命令","并不一定","就是","ros","逛去","呀","来讲","科幻","科幻电影","什么","灵活","类似","可视化","总有","不可","场景","现有","在","必不可少","至今","一种","片段","推出","手","设计","精心设计","保留","先","命令行","为","会","什么样","布料","解决","和","各种","无论","受","就","了","这样","此时","你","可视","，","一件","这里","比如","便捷","中","多","既定","看到","其上","工具","炫酷","来","想象","商场","里边","衣服","起来","想要","看中","呈现","根据","方式","一个","满足","没有","linux","逛来逛去","很多","操作","虽然"],"title":"Linux中的命令行","title_tokens":["命令","中","linux","的","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_1","text":"回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。","text_tokens":["觉得","背","熟悉"," ","一系","多种","初次","alt","背景","启动","即可","十个","软件","笔记","又","呢","快捷键","令人","都","叫做","一下","系列","看不到","快捷","魅力","右键","正常","不用","数量","这个","需要","的","终端","原因","很少","为什么","大家","一二十个","随身带","列表","怎么","并","体会","我们","常用","对","但是","可以","应用","不是","一二十","这","+","t","所以","确实","专门","一定","是","时候","不到","用到","电脑","使用","。","至于","二十","回到","随着","鼠标","及","选择","功能","其他","死机","指令","也","用","电影","很","到","打开","硬","命令","通过","参数","就是","后","科幻","科幻电影","笔记本电脑","什么","二十个","ctrl","字符","既","在","上","因为","所在","手","随身","搜索","本","命令行","有","枯燥","会","从来","令人发指","多到","发指","就","不过","笔记本","这项","，","窗口","输入","难以","慢慢","中","terminal","看到","工具","来","记忆","方式","而是","写字","黑客","一系列","深色","操作","一二","："],"title":"启动方式","title_tokens":["方式","启动"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_2","text":"我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。","text_tokens":["或","选项","熟悉"," ","语法","显示","用户","所有","编辑","若","当前工作","感觉","未来","文件名称","子目录","一下","创建","文件","子目","复制","目录","工作","链接","将","的","需要","编辑器","另","大家","复制到","列表","cp","均","地","我们","常用","这些","可以","标目","体验","管理","只是","名称","件夹","。","保持","不变","权限","回到","mkdir","及","功能","新建","由","也","指令","用","gedit","不","对于","一","文件夹","rm","打开","/","找",">","某个","命令","原有","列出","目标","主目录","出","当前","拷贝","]","指定","系统管理员","死记","管理员","mv","它","文件名","删除","把","绝对","“","则","绝对路径","拷贝到","pwd","先","路径","一边","为","改变","改名","会","移入","死记硬背","及其","目标目录","就","了","查","执行","<","目的","sudo","，","以","中","此","…","[","多个","多","来","系统","该","一个","或者","”","目","统管","cd","常用命令","没有","ls","源文件","linux","下","："],"title":"常用命令操作","title_tokens":["命令","常用","操作","常用命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2_1","text":"ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。","text_tokens":["为例","我们","对","继续","体操","一系","命令","不过","可以"," ","就","海龟","不同","内容","所有","参数","目的","，","小海龟","比如","表示","以","大致","什么","话题","ros2","下来","中","具体","都","与","系列","主要","topic","。","概念","核心","在","集成","第一个","感受","一起","后边","小海","功能","还","的","跟","了解","一个","机制","命令行","仿真","也","有","第一","node","节点","具体操作","相同","接下","一系列","接下来","linux","下","操作","总","干什么"],"title":"ROS2中的命令行","title_tokens":["ros2","命令","中","的","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_3","text":"想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["我们"," ","某个","命令","可以","海龟","turtlesim","，","key","_","ros2","中","要","run","$","使用","控制","想要","teleop","进行","例如","仿真","turtle","键盘","node","节点","和","运行","操作","："],"title":"运行节点程序","title_tokens":["节点","程序","运行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_4","text":"当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim","text_tokens":["/","啦","对"," ","某","哪些","命令","可以","info","这样","就","感兴趣","知道","turtlesim","ros","，","信息","当前","呢","ros2","中","？","都","$","list","它","来","如果","系统","子","加上","兴趣","感兴","的","详细信息","查看","一个","详细","有","node","节点","运行","："],"title":"查看节点信息","title_tokens":["节点","信息","查看"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_5","text":"当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose","text_tokens":["/","某"," ","试一试","命令","数据","想","即可","，","当前","消息","话题","呢","ros2","中","都","$","使用","topic","list","看到","pose","系统","子","加上","还","的","查看","一个","turtle1","有","echo","如下","："],"title":"查看话题信息","title_tokens":["话题","信息","查看"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_6","text":"想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":["/","我们"," ","cmd","命令","海龟","可以","y","0.0","通过","z","，","{",":","动","_","1","话题","ros2","直接",",","$","topic","\"","控制","1.8","起来","}","pub","想要","twist","发布","还","2.0","x","命令行","linear","指令","turtle1","msgs","--","angular","geometry","vel","msg","rate","："],"title":"发布话题消息","title_tokens":["发布","消息","话题"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_7","text":"一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\"","text_tokens":["/","我们"," ","试一试","海龟","y","改了","孤单","turtlesim","srv","，","{",":","提供","—","ros2",",","name","$","真器","\"","仿真器","再","来","'","}","0.2","太","call","spawn","2","一只","服务","还","产生","调用","x","仿真","一个","service","theta","："],"title":"发送服务请求","title_tokens":["请求","发送","服务"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_8","text":"想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\"","text_tokens":["转","完成","/","rotateabsolute"," ","角度","忙","命令","海龟","可以","这样","通过","帮上","turtlesim","目标","让","，",":","rotate","提供","发送","absolute","比如","_","ros2","中","具体","指定","$","send","真器","\"","仿真器","3","goal","想要","这个","的","动作","一个","仿真","命令行","turtle1","action","theta","到","："],"title":"发送动作目标","title_tokens":["动作","发送","目标"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_9","text":"系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["/","rosbag","35","我们","常用","啦"," ","看看","播放","cmd","-","命令","可以","17","数据","这","每","就是","实验室","，","以上","实验","_","下来","ros2","中","还是","？","40","与","$","bag","04",".","尝试","rosbag2","。","再","如果","db3","回到","系统","把","想要","段","如何","轻松","子","自己","record","录制","功能","的","11","play","一个","还有","用","turtle1","有","实现","0","某段","2022","大家","很","vel","运行","好","很多","复现","："],"title":"录制控制命令","title_tokens":["控制","录制","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","text":"ROS2开发环境配置 ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。 Git git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git 下载教程源码 《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。 VSCode Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download VSCode插件配置 为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。 中文语言包 Python插件 C++插件 CMake插件 vscode-icons ROS插件 Msg Language Support Visual Studio IntelliCode URDF Markdown All in One VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["完成","guyuehome"," ","一些","21","版本","《","一系","、","这款","项目","简称","所有","编辑","安装","迅速","支持","官方","markdown","软件","喜欢","—","呢","直接","？","都","人工","几千万","增加","文件","离不开","系列","修复","肯定","国内","语言包","配置","常听到","https","自己","另外","做","几千","链接","两款","需要","的","广泛","终端","成为","macos","查看","组件","审核","而生","编辑器","intellicode","studio","之后","简单","》","大家","合并","gitee","丰富","visualstudio","千万","变更","2015","language","已有","最","语言","机器人","开发者","我们","并","讲","但","in","网上","开发","代码","这些","可以","应用","更","这","给","有些","内容","个人","行","每次","所以","无限",":","tutorials","自带","管理","是","准备","为了","linus","插件","件夹","使用","。","后续","机器","all","下载","复杂","被","com","clone","功能","可能","还","哪里","用","也","入门","便于","不","因","切换","环境","以上","编译","开源","文件夹","download","python","code","驱动","/","support","作为","开发工具","贡献","命令","vscode","-","一行","大量","官方网站","one","利器","出","ros","中会","新","略显","之间","ros2","理工","强大","微软","$","源码","如果","如何","硬件","年","在","非常简单","上万","集成","推出","千上万","冲突","搭建","编写","特性","设计","非常","先","搜索","扩展","git","高效","有","官方网","源代码","人","icons","等等","管理软件","和","会","visual","轻量","方法","提交","广泛应用","记事","msg","听到","就","了","网站","功能强大","这样","只","不同","码云","记事本","成千上万","下载方式","让","sudo","，","windows","提供","操作系统","这里","一款","自动","不开","比如","_","神兵","github","c++","众多","成千","中","调试","具体","cmake","与",".","多个","多","中文","发展","看到","工具","示例","教程","浏览器","系统","里边","快速","不会","管理工具","推荐","进行","install","课程","bug","判断","方式","一个","urdf","重要","apt","浏览","一系列","之父","linux","以及","好","很多","操作","："],"title":"ROS2开发环境配置","title_tokens":["ros2","开发","配置","环境"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros2","text":"ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。","text_tokens":["我们","完成","开发工具","一些","开发","代码","这些","、","vscode","给","大量","中会","，","ros","提供","不开","—","呢","？","准备","离不开","肯定","工具","机器","源码","配置","示例","。","如何","做","编写","推荐","两款","需要","的","课程","查看","先","git","重要","和","大家","环境","编译","机器人"],"title":"ROS2开发环境配置","title_tokens":["ros2","开发","配置","环境"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#git","text":"git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git","text_tokens":["完成"," ","版本","这款","项目","所有","安装","迅速","软件","—","直接","都","人工","几千万","增加","修复","肯定","国内","常听到","几千","需要","的","广泛","终端","审核","而生","之后","简单","合并","gitee","大家","千万","变更","已有","开发者","并","我们","代码","这些","可以","开发","应用","这","有些","内容","行","每次","所以","管理","是","linus","使用","。","被","功能","可能","哪里","也","不","因","切换","开源","驱动","贡献","命令","一行","新","之间","理工","$","硬件","在","非常简单","上万","千上万","冲突","特性","设计","非常","git","高效","有","人","等等","管理软件","会","和","方法","提交","广泛应用","听到","就","了","网站","不同","码云","成千上万","让","sudo","，","一款","自动","比如","github","众多","成千","中","具体","多个","发展","看到","工具","系统","不会","管理工具","进行","install","bug","判断","一个","apt","之父","linux","以及"],"title":"Git","title_tokens":["git"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_1","text":"《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。","text_tokens":["/","讲","guyuehome"," ","21","就","《","代码","更","这样","开发","vscode","记事本","下载方式","，",":","略显","这里","tutorials","自带","_","—","ros2","中","是","$",".","文件","件夹","多","。","源码","如果","https","里边","下载","系统","浏览器","另外","复杂","集成","com","clone","推荐","还","的","课程","查看","方式","一个","git","用","有","入门","浏览","会","和","》","gitee","环境","好","很多","记事","文件夹","："],"title":"下载教程源码","title_tokens":["下载","源码","教程"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode","text":"Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download","text_tokens":["/","但"," ","功能强大","代码","vscode","可以","、","项目","简称","开发","网站","编辑","官方网站","支持","利器","官方","，","windows",":","操作系统","神兵","强大","是","微软",".","。","https","系统","快速","年","下载","在","：","com","推出","链接","搭建","功能","的","非常","成为","macos","组件","一个","编辑器","扩展","studio","官方网","源代码","轻量","和","visual","丰富","linux","visualstudio","2015","操作","download","code"],"title":"VSCode","title_tokens":["vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode_1","text":"为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。","text_tokens":["我们","一系","开发","可以","vscode","安装","无限","，","ros2","调试","为了","与","插件","系列","后续","。","功能","还","的","扩展","便于","一系列"],"title":"VSCode插件配置","title_tokens":["插件","vscode","配置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_2","text":"","text_tokens":[],"title":"中文语言包","title_tokens":["中文","语言包","语言"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#python","text":"","text_tokens":[],"title":"Python插件","title_tokens":["插件","python"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#c","text":"","text_tokens":[],"title":"C++插件","title_tokens":["插件","c++"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#cmake","text":"","text_tokens":[],"title":"CMake插件","title_tokens":["插件","cmake"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode-icons","text":"","text_tokens":[],"title":"vscode-icons","title_tokens":["icons","vscode","-"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros","text":"","text_tokens":[],"title":"ROS插件","title_tokens":["插件","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#msg-language-support","text":"","text_tokens":[],"title":"Msg Language Support","title_tokens":["msg","support","language"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#visual-studio-intellicode","text":"","text_tokens":[],"title":"Visual Studio IntelliCode","title_tokens":["studio","intellicode","visual"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#urdf","text":"","text_tokens":[],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#markdown-all-in-one","text":"VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["网上","开发","vscode","可以","只","个人","支持","出","，","喜欢","众多","插件","。","配置","自己","在","推荐","的","搜索","也","大家","环境","以上","最","作为"],"title":"Markdown All in One","title_tokens":["in"," ","all","one","markdown"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/","text":"DDS Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。 通信模型 DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。 DDS DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。 什么是DDS 好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是 Data Distribution Service ，也就是 数据分发服务 ，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。 DDS在ROS2中的应用 DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。 质量服务策略QoS DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是 Domain ，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为 数据提供者和接收者之间的合约 。 具体会有哪些策略？比如： DEADLINE 策略，表示通信数据必须要在每次截止时间内完成一次通信； HISTORY 策略，表示针对历史数据的一个缓存大小； RELIABILITY 策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式； DURABILITY 策略，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。 案例一：在命令行中配置DDS 我们先来试一试在命令行中配置DDS的参数。 启动第一个终端，我们使用best_effort创建一个发布者节点，循环发布任意数据，在另外一个终端中，如果我们使用reliable模型订阅同一话题，无法实现数据通信，如果修改为同样的best_effort，才能实现数据传输。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort 如何去查看ROS2系统中每一个发布者或者订阅者的QoS策略呢，在topic命令后边跟一个\"--verbose\"参数就行了。 $ ros2 topic info /chatter --verbose 案例二：DDS编程示例 接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。 运行效果 启动两个终端，分别运行发布者和订阅者节点： $ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub 可以看到两个终端中的通信效果如下，和之前貌似并没有太大区别。 看效果确实差不多，不过底层通信机理上可是有所不同的。 发布者代码解析 我们看下在代码中，如果加入QoS的配置。 learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , }, 订阅者代码解析 订阅者中的QoS配置和发布者类似。 learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], }, DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们主要带领大家认识DDS，更多使用方法和相关内容，大家也可以参考下边的链接进行学习。 参考链接 https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["垂直","guyuehome","半天","最为","一些","客户端","边","所有","性能","启动","没","video","建模语言","函数","直接","？","implementations","企业","创建","周期","先进","保证","行为","\"","父类","派","自己","这种","broker","中心","更好","helloworld","last","一角","它们","动作","查看","8","医疗","第二种","ros1","通路","欢迎","rmw","纠结","》","空间","大家","预测","from","看","下边","常用","这些","可以","代码","性","最早","点对点","黑入","学习","参考","一定","情况","办法","电脑","说明","晚","并行","不变","qos","领域","无人机","帧","原则","专利","任","服务","第二","某一","发送给","有所","之","由","用","缓存","既然","占用","1989","部分","吃","尽可","成立","运行","每个","生变","class","建设","编译","驱动","貌似","打开","非常复杂","第一种","可信","流畅","课","感兴趣","get","%","尽量","就是","spin","console","终于","ros","一新","之间","消息","灵活","基本","类似","每条","服务质量","不好","尽可能","如何","年","好吃","发布","程度","人机","先","关心","交通","真实","延时","对象","交换","接下","冰山一角","learning","说了半天","一次","self","运转","组成部分","就","提高","试一试","不过","传送","全称","这样","scripts","你","那个","保证数据","名","utf","自动","带领","中","过去","name","与","等待","具体地址","兼容性问题","工业","运动","授权","那该","前边","系统","同一","multiple","太","树莓","频繁","best","丢失","所","的话","框架","发生","我","处","方式","reliability","或者","听说","实现","主","通常","node","保障","更加","服务端","单独","concepts","好","分别","构图","：","完成","啦"," ","问题","可信赖","版本","info","、","知道","用户","并且","必须","等","效果","技术","软件","建立","建模","历史","effort","0.5","https","二种","做","宗旨","一起","成","有所不同","整个","广泛","入口","处理速度","举","生态","其实","5g","商业","中间件","放在","刚才","航拍","截止","借助","语言","并","能力","history","者","讲","但","回调","publish","给","处于","火锅","进一步","分布式","qosprofile",":","s","def","none","而言","务器","entry","神经","为了","架构图","coding","通信","双方","。","能响","reliable","复杂","复用","42","定时器","太多","信赖","输出","功能","到底","集中处理","其他","中间","退出","import","包","入门","hello","points","环境","html","应该","env","大小","到","verbose","python","不多","定位","subscription","可","接口标准","-","大","要求","列出","地址","publishernode","旋转","体","存在","就行了","4g","表示","后","速度","什么","ros2","std","单位","变化","上边","一套","区别","它","历史数据","如果","驾驶","with","字符","callback","上","过程","数据通信","介绍","编写","特性","非常","靠","分发","分布","命令行","高效","模型","有","会","优势","各种","shutdown","databus","distribution","为例","收到","解析","guides","此时","数据","时","高速","像是","比如","一步","许多","增长","类","带","尝试","topic","看到","来","行业","}","logger","uml","默认","string","课程","理解","顺利","掉","啥意思","无用","echo","第一","案例","i","当于","优化","没有","忽略","满足","得","关闭","数据传输","下","service","冰山","how","分组","程序","由于","认识","他们","之上","org","想","about","已经","那","一样","呢","qoshistorypolicy","都","三种","小组","内","args","肯定","定时","需求","核心","正常","避免","无论如何","keep","华为","这个","将","的","成为","门","关系","终端","corba","(","哪","焕然一新","setup","节点","加入","模式","厂商","强制","图像","无法","=","通道","能源","机器人","类型","大大提高","综合","数据通","之前","subscribernode","第四种","该用","个人","位置","内容","资源","二","服务器","每次","所以","同一个","确实","发送","专门","管理","时候","只是","能够","效率","（","高通","发布者","不感兴趣","'","可见","pub","发生变化","两个","选择","后边","像","vendors","还有","美国","数以千计","指令","也","主讲","加密","msgs","bv12z4y167w2","古月","连接","尽力","一","chatter","技术标准","合适","编程","至关重要","接收","受到","国防","去","命令","bin","docs","通过","大量","每","!","这么","无人","神经网络","上层","日志","]",",","$","destroy","当","create","int32","送给","different","提供者","“","符合","网络","感兴","domain","销毁","）","on","兼容性","en","和","接下来","广播","提示","广泛应用","无论","角色","而且","heard","重大","了","作者","depth","让","publishing","，","连接数","提供","以","对应","deadline","_","相关","才能","话题","design","接收者","要","循环","可是","sysml",".","居","当然","控制","示例","来到","图","导致","第三种","结构","进行","应用程序","增多","拿","完整","出现","组成","重要","视频","”","\\","订阅","profile","主讲人","完整性","to","各个","或","通信模型","舰船","选项","遥控器","21","listener","《","客户","传输","焕然","同样","humble","有人","接口","定义","点","修改","—","统一","例子","机理","1","一下","差不多","文件","四大","配置","明显","麻烦","看下","dds","全局","另外","第一个","bilibili","不用","链接","需要","durability","进入","py","包含","丰富","--","布式","如下","库","地","我们","底层","不管","对","但是","大大","哪些","更","维护","应用","不是","相当","航空","这","相当于","有些","开发","时间","初始化","行","信息","一条","过","还是","下来","是","架构","publisher","异常","模块","使用","omg","机器","sub","于","神经网","针对","兼容","海军","com","www","实时","usr","瓶颈","可能","强调","讲到","秒","articles","提","处理","便于","不","有点","第三","super","很","据传","设置","开源","作为","/","质量","向","至关","规模","world","本身","参数","data","差别","{","新","main","__","请求","适应","现在","蓝色","影响","决策","策略","指定","run","；","qosreliabilitypolicy","真正","第四",")","2004","场景","把","在","流畅性","一种","升级","就行","设计","四种","几种","跟","#","为","rclpy","解决","任意","价值","方法","互相","msg","字符串","标准","id","选用","绑定","只有","初始","样","只","python3","来看","不同","执行","集中","在于","组织","所有人","middleware","感知","这里","遥控","众多","提到","具体","[","意思","多个","多","timer","主要","一旦","快速","*","@","使命","按照","兴趣","转移","根据","init","容性","working","一个","回忆","黑客","入个","合约","供者","找到","填充","很多","红色"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds","text":"Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。","text_tokens":["我们","底层","讲","他们","完成"," ","21","最为","《","重大","、","相当","相当于","，","终于","ros","学习","—","话题","ros2","神经","中","是","具体","神经网络","变化","通信","都","。","它","机器","来","来到","前边","系统","神经网","dds","在","过程","网络","服务","的","讲到","我","课程","动作","靠","实现","欢迎","入门","主讲","hello","当于","》","大家","古月","主讲人","好","机器人"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_1","text":"DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。","text_tokens":["通信模型"," ","问题","客户","客户端","知道","并且","想","必须","所有","有人","性能","软件","建立","都","三种","先进","核心","正常","明显","麻烦","二种","dds","broker","自己","中心","这种","不用","这个","需要","的","成为","整个","关系","处理速度","第二种","ros1","其实","通路","节点","包含","无法","通道","并","我们","常用","但","但是","之前","更","可以","第四种","有些","这","点对点","火锅","服务器","进一步","每次","行","务器","一条","一定","是","架构","能够","通信","效率","异常","双方","使用","。","能响","并行","不感兴趣","可见","针对","发生变化","太多","服务","第二","瓶颈","可能","集中处理","其他","之","由","也","处理","有点","第三","连接","很","吃","应该","生变","每个","到","作为","受到","第一种","感兴趣","列出","地址","规模","就是","旋转","请求","速度","消息","类似","影响","变化","每条","当","它","真正","第四","如果","在","上","好吃","一种","发布","感兴","非常","四种","程度","几种","关心","为","模型","会","和","解决","优势","广播","各种","databus","角色","运转","而且","就","了","不过","收到","传送","这样","只","数据","集中","在于","时","，","连接数","所有人","提供","这里","像是","以","一步","中","许多","具体","增长","与","多","具体地址","一旦","系统","导致","第三种","所","进行","框架","兴趣","发生","增多","处","拿","一个","实现","第一","订阅","优化","忽略","没有","服务端","更加","找到","单独","很多"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_1","text":"DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。","text_tokens":["国防","定位","借助"," ","之前","这些","可以","应用","不是","航空","数据","等","已经","，","新","存在","感知","高速","比如","自动","ros2","通信","决策","模块","都","。","需求","领域","驾驶","dds","在","频繁","它们","需要","的","广泛","非常","地","方式","一个","医疗","交通","通常","满足","会","和","交换","预测","很","好","很多","广泛应用","能源","并"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_2","text":"好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是 Data Distribution Service ，也就是 数据分发服务 ，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。","text_tokens":["啦","舰船","垂直"," ","半天","问题","、","等","已经","技术","软件","统一","建模","呢","建模语言","？","一下","需求","dds","做","中心","的","成为","corba","中间件","丰富","强制","大家","布式","地","语言","我们","维护","可以","应用","开发","最早","分布式","专门","管理","过","是","通信","omg","。","于","兼容","复杂","海军","实时","服务","可能","到底","强调","还有","美国","数以千计","提","由","也","中间","1989","环境","技术标准","成立","/","质量","可","课","大量","就是","data","现在","灵活","策略","服务质量","一套","它","2004","年","升级","发布","介绍","网络","设计","分发","分布","兼容性","为","高效","真实","对象","和","解决","各种","价值","说了半天","标准","distribution","全称","数据","组织","，","提供","这里","以","比如","中","意思","sysml","兼容性问题","当然","来","行业","系统","uml","使命","进行","容性","完整","一个","听说","啥意思","订阅","保障","满足","service","好"],"title":"什么是DDS","title_tokens":["dds","是","什么"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#ddsros2","text":"DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。","text_tokens":["或","他们"," ","问题","版本","边","之上","、","用户","想","所有","性能","那","接口","没","技术","软件","建立","一样","统一","呢","函数","？","都","企业","肯定","保证","四大","无论如何","自己","dds","宗旨","华为","这个","需要","的","哪","进入","生态","5g","商业","纠结","中间件","加入","刚才","放在","厂商","大家","布式","机器人","能力","我们","下边","但","不管","对","大大","大大提高","综合","开发","可以","应用","代码","性","更","时间","该用","个人","位置","给","分布式","所以","而言","还是","架构","是","架构图","能够","通信","为了","模块","使用","。","高通","不变","机器","兼容","原则","专利","复用","任","选择","功能","像","某一","可能","其他","中间","也","用","不","既然","部分","开源","建设","编程","至关重要","驱动","可","接口标准","至关","每","尽量","就是","差别","ros","这么","4g","上层","ros2","基本","蓝色","影响","上边","如果","如何","场景","把","在","上","过程","符合","一种","就行","设计","分布","由于","兼容性","有","会","和","无论","标准","选用","组成部分","就","提高","了","这样","此时","你","组织","那个","让","，","middleware","这里","对应","比如","中","提到","具体","要","多个","多","工业","授权","来","系统","按照","转移","根据","容性","一个","组成","重要","实现","得","很多","构图","红色"],"title":"DDS在ROS2中的应用","title_tokens":["dds","在","ros2","中","应用","的"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#qos","text":"DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是 Domain ，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为 数据提供者和接收者之间的合约 。 具体会有哪些策略？比如： DEADLINE 策略，表示通信数据必须要在每次截止时间内完成一次通信； HISTORY 策略，表示针对历史数据的一个缓存大小； RELIABILITY 策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式； DURABILITY 策略，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。","text_tokens":["完成","啦","通信模型"," ","遥控器","可信赖","一些","客户","传输","焕然","必须","所有","定义","例子","历史","呢","effort","？","直接","小组","都","内","保证","行为","配置","需求","避免","派","这种","dds","全局","另外","更好","一起","成","这个","将","的","需要","门","关系","durability","焕然一新","举","节点","模式","加入","空间","大家","航拍","截止","图像","地","history","机器人","我们","对","数据通","但是","哪些","之前","可以","应用","时间","这些","给","处于","资源","每次","同一个","发送","黑入","一定","情况","是","时候","通信","电脑","办法","使用","。","qos","晚","机器","reliable","无人机","帧","针对","选择","信赖","服务","可能","功能","发送给","指令","也","用","缓存","便于","加密","不","占用","尽力","尽可","合适","大小","接收","质量","向","可信","流畅","命令","要求","通过","每","尽量","就是","参数","体","ros","新","一新","这么","无人","之间","表示","适应","ros2","基本","类似","策略","指定","；","不好","历史数据","如果","尽可能","送给","如何","场景","在","流畅性","提供者","过程","数据通信","一种","网络","特性","domain","人机","先","为","模型","有","延时","会","和","互相","一次","id","绑定","只有","了","样","这样","此时","来看","数据","不同","那个","保证数据","让","，","提供","比如","deadline","_","遥控","才能","众多","中","具体","接收者","要","过去","带","运动","多","控制","那该","系统","同一","快速","图","导致","默认","树莓","best","丢失","结构","所","进行","的话","根据","应用程序","完整","reliability","一个","理解","回忆","顺利","掉","出现","重要","视频","无用","实现","黑客","入个","合约","供者","满足","没有","下","完整性","好","各个","分组","程序","："],"title":"质量服务策略QoS","title_tokens":["qos","质量","策略","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_3","text":"我们先来试一试在命令行中配置DDS的参数。 启动第一个终端，我们使用best_effort创建一个发布者节点，循环发布任意数据，在另外一个终端中，如果我们使用reliable模型订阅同一话题，无法实现数据通信，如果修改为同样的best_effort，才能实现数据传输。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort 如何去查看ROS2系统中每一个发布者或者订阅者的QoS策略呢，在topic命令后边跟一个\"--verbose\"参数就行了。 $ ros2 topic info /chatter --verbose","text_tokens":[" ","info","传输","同样","启动","修改","呢","effort","创建","\"","配置","dds","另外","第一个","的","终端","查看","节点","--","无法","我们","者","数据通",":","通信","使用","。","qos","reliable","发布者","pub","42","后边","msgs","chatter","据传","verbose","/","去","命令","-","每","参数","data","就行了","ros2","std","策略","$","int32","如果","如何","在","数据通信","发布","先","跟","命令行","为","模型","任意","msg","试一试","数据","，","_","才能","话题","中","循环","topic","来","系统","同一","best","reliability","一个","或者","实现","echo","第一","订阅","数据传输"],"title":"案例一：在命令行中配置DDS","title_tokens":["dds","在","案例","命令","中","一","配置","命令行","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_4","text":"接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。","text_tokens":["我们"," ","为例","之前","代码","world","，","以","话题","下来","中","通信","尝试","。","配置","dds","在","hello","接下","接下来"],"title":"案例二：DDS编程示例","title_tokens":["dds","案例","：","二","示例","编程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_2","text":"启动两个终端，分别运行发布者和订阅者节点： $ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub 可以看到两个终端中的通信效果如下，和之前貌似并没有太大区别。 看效果确实差不多，不过底层通信机理上可是有所不同的。","text_tokens":["貌似","者","不多","底层"," ","有所","之前","不过","可以","大","不同","启动","效果","，","确实","learning","_","机理","ros2","中","通信","run","$","差不多","可是","区别","看到","。","qos","sub","发布者","pub","上","helloworld","太","两个","发布","有所不同","的","终端","订阅","节点","没有","和","如下","看","分别","运行","：","并"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_3","text":"我们看下在代码中，如果加入QoS的配置。 learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , },","text_tokens":["完成","选项","guyuehome"," ","info","、","知道","已经","接口","点","1","函数","qoshistorypolicy","effort","0.5","创建","周期","文件","args","\"","定时","配置","父类","看下","last","helloworld","keep","需要","的","入口","8","(","setup","py","节点","加入","from","如下","库","=","类型","history","并","我们","回调","代码","publish","初始化","qosprofile",":","s","def","信息","none","entry","publisher","coding","说明","（","。","qos","reliable","发布者","'","pub","原则","定时器","com","www","usr","输出","功能","秒","包","退出","import","hello","msgs","古月","chatter","super","points","class","env","设置","编译","python","打开","/","-","bin","get","world","%","publishernode","spin","data","console","!","{","main","__","后","消息","ros2","std","日志",",","单位","qosreliabilitypolicy","destroy","create",")","如果","字符","callback","在","“","发布","编写","销毁","）","#","为","rclpy","对象","提示","learning","msg","shutdown","字符串","self","初始","作者","depth","python3","执行","数据","scripts","让","publishing","，","名","utf","_","话题","中","类","name","循环",".","等待","timer","居","[","示例","系统","}","*","@","logger","best","进行","string","init","reliability","一个","”","主","node","填充","profile","关闭","程序","："],"title":"发布者代码解析","title_tokens":["代码","发布者","解析","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_4","text":"订阅者中的QoS配置和发布者类似。 learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], }, DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们主要带领大家认识DDS，更多使用方法和相关内容，大家也可以参考下边的链接进行学习。","text_tokens":["完成","选项","guyuehome"," ","listener","info","、","知道","接口","定义","点","1","函数","qoshistorypolicy","effort","创建","文件","args","\"","配置","父类","dds","last","helloworld","keep","一角","链接","需要","的","入口","8","(","setup","py","节点","加入","大家","from","如下","库","=","history","类型","并","者","我们","下边","subscribernode","对","回调","代码","更","初始化","可以","内容","qosprofile",":","s","def","信息","none","学习","参考","entry","是","coding","只是","说明","（","使用","。","qos","sub","发布者","reliable","'","pub","原则","复杂","com","www","usr","输出","功能","包","退出","import","处理","也","hello","msgs","古月","chatter","super","points","class","env","设置","编译","python","打开","非常复杂","/","subscription","-","bin","get","world","%","本身","spin","console","data","!","{","main","__","后","消息","ros2","std","日志",",","]","类似","qosreliabilitypolicy","destroy","create",")","callback","“","发布","编写","销毁","非常","）","#","rclpy","对象","和","提示","方法","冰山一角","learning","msg","shutdown","标准","self","初始","heard","作者","depth","收到","python3","执行","数据","scripts","让","，","名","utf","相关","_","带领","话题","中","类","name","循环",".","等待","[","居","主要","多","示例","系统","}","*","@","logger","best","进行","string","init","reliability","一个","”","i","主","\\","订阅","node","profile","关闭","冰山","程序","：","认识"],"title":"订阅者代码解析","title_tokens":["者","代码","解析","订阅"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_5","text":"https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["/"," ","humble","-","guides","org","docs","about","ros",":","middleware","video","_","design","ros2","implementations",".","with","https","multiple","different","dds","bilibili","com","www","vendors","working","articles","on","en","rmw","bv12z4y167w2","html","concepts","to","how"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/","text":"工作空间：开发过程的大本营 大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是 工程 。 工作空间是什么 类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做 工作空间 。 所以工作空间是一个存放项目开发相关文件的文件夹，也是 开发过程中存放所有资料的大本营 。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。 创建工作空间 了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 自动安装依赖 我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init $ rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y 编译工作空间 依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。 设置环境变量 编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["完成","啦","选项","工程"," ","b","一些","guyuehome","21","手动","、","项目","humble","并且","报错","所有","org","安装","等","行文","未来","定义","大部分","唯一","子目录","1","得到","一样","都","叫做","创建","文件","保存","从","环境变量","\"","子目","配置","目录","工作","子","自己","并列","另外","https","链接","log","数量","点击","这个","大本","的","产生","需要","关系","依赖","rosdepc","了解","终端","a","生产","资料","用于","studio","setup","很少","接触","人为","空间","大部","大家","gitee","--","空间结构","如下","from","均","2","机器人","并","我们","3","允许","否则","某","生效","之前","开发","这些","代码","creator","可以","不是","内容","这","社区","所以","信息",":","bashrc","学习","tutorials","参考","sh","管理","过","放置","src","是","情况","下来","绝大","名称","为了","能够","件夹","使用","后续","。","机器","下载","针对","mkdir","com","两个","build","功能","一部","clone","强调","pip3","还","错误","中间","也","用","里","包","local","一点","总体","部分","环境","html","运行","应该","以上","编译","文件夹","到","eclipse","完全","设置","/","colcon","至此","绝大部分",">","命令","-","docs","参数","就是","update","ros","中会","新","存放","存在","当前","workspace","来讲","后","什么","日志","ros2","类似","开始","$","；","当","大本营","如果","环境变","自动生产","在","集成","过程","“","pip","编写","path","所示","一部分","#","git","仅","creating","有","任何","en","会","和","接下","visual","接下来","各种","可执行文件","dev","成功","就","了","y","此时","执行","b2","python3","w","如图所示","时","sudo","四个","，","脚本","让","rosdep","这里","像是","比如","相关","自动","某些","_","警告","..","缺少","中","要",".","多个","看到","概念","工具","教程","工具栏","里边","系统","变量","想要","不会","source","qt","根目录","结构","进行","install","init","一个","典型","编写程序","或者","多少","出现","”","i","echo","apt","cd","ws","rosdistro","结果","找到","以及","p","操作","程序","：","~"],"title":"工作空间","title_tokens":["空间","工作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_1","text":"大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是 工程 。","text_tokens":["我们","选项","工程"," ","就","之前","开发","这些","、","creator","此时","内容","所有","等","，","新","学习","比如","某些","过","放置","中","是","都","叫做","创建","文件","当","件夹","后续","工具","。","工具栏","工作","里边","想要","在","集成","qt","“","编写","点击","这个","的","产生","一个","编写程序","”","有","studio","接触","和","会","visual","大家","以及","环境","应该","文件夹","eclipse","程序"],"title":"工作空间：开发过程的大本营","title_tokens":["过程","开发","空间","大本","的","大本营","：","工作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_2","text":"类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做 工作空间 。 所以工作空间是一个存放项目开发相关文件的文件夹，也是 开发过程中存放所有资料的大本营 。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。","text_tokens":["工程"," ","b","一些","、","项目","所有","安装","等","行文","未来","定义","大部分","唯一","子目录","1","得到","一样","都","叫做","创建","文件","保存","子目","目录","工作","子","自己","并列","另外","log","数量","这个","需要","的","大本","产生","关系","a","资料","用于","很少","人为","空间","大部","空间结构","2","机器人","并","我们","3","允许","某","开发","代码","可以","不是","这","所以","信息","管理","放置","src","情况","是","绝大","名称","件夹","。","机器","针对","两个","build","功能","一部","强调","错误","中间","也","用","里","一点","总体","部分","环境","运行","以上","编译","文件夹","到","完全","绝大部分","参数","就是","ros","新","存放","存在","来讲","后","日志","类似","开始","；","大本营","在","集成","过程","编写","所示","一部分","有","会","和","各种","可执行文件","dev","成功","就","了","执行","b2","w","如图所示","时","四个","，","脚本","这里","像是","比如","相关","某些","_","警告","中","要","多个","系统","里边","根目录","结构","进行","install","一个","典型","或者","ws","结果","操作","："],"title":"工作空间是什么","title_tokens":["是","空间","什么","工作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_3","text":"了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git","text_tokens":["/","我们","guyuehome"," ","21","了","命令","可以","代码","-","并且","，",":","tutorials","_","下来","src","ros2","创建","$",".","使用","概念","教程","https","工作","下载","mkdir","com","clone","的","了解","一个","git","cd","和","接下","空间","结果","接下来","ws","gitee","如下","p","dev","：","~"],"title":"创建工作空间","title_tokens":["创建","空间","工作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_4","text":"我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init $ rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y","text_tokens":["我们","手动","一些"," ","代码","可以","-","y","python3","humble","社区","安装","update","sudo","，","rosdep","自动","..","src","中","从","都","$","使用","工具","下载","pip","pip3","的","install","rosdepc","init","依赖","path","多少","一个","也","有","i","apt","cd","会","rosdistro","各种","--","from","："],"title":"自动安装依赖","title_tokens":["自动","安装","依赖"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_5","text":"依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。","text_tokens":["/","完成","啦","否则","colcon","成功","就"," ","了","命令","可以","代码","报错","python3","-","、","安装","sudo","，","中会","ros","缺少","自动","后","_","中","$","文件","件夹","使用","看到","。","如果","工作","不会","在","自动生产","过程","log","build","的","install","依赖","错误","或者","生产","出现","有","任何","apt","cd","ws","空间","如下","应该","编译","文件夹","dev","：","~"],"title":"编译工作空间","title_tokens":["编译","空间","工作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_6","text":"编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。","text_tokens":["/","成功","我们","生效","至此","完成"," ",">","就","了","均","执行","、","设置","所有","行文","让","，","当前","bashrc","后","_","sh","为了","能够","环境变量","$","文件",".","创建","。","\"","配置","系统","环境变","变量","工作","在","source","功能","还","的","需要","install","终端","#","包","仅","echo","setup","local","和","ws","找到","空间","环境","可执行文件","编译","dev","：","~"],"title":"设置环境变量","title_tokens":["变量","环境变量","环境","设置","环境变"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_7","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["/","tutorials","creating","en"," ","humble","-","workspace","docs","org",".","html","ros",":","a","https"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/","text":"功能包：开发过程的大本营 在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做 功能包 。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。 创建功能包 如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python 编译功能包 在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash 功能包的结构 功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。 C++功能包 首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。 Python功能包 C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["完成","他们"," ","一些","声明","版本","语法","humble","、","org","想","ament","所有","必须","等","行文","那","么","红豆","软件","版权","例子","一样","呢","？","都","叫做","创建","文件","豆子","率","环境变量","编译成","自主","是不是","很难","配置","正常","https","工作","新创建","一起","链接","数量","这个","大本","的","需要","终端","关系","依赖","将","入口","假设","your","a","bash","setup","之后","py","分析","放在","刚才","空间","包含","大家","--","如下","拿出","五颜六色","看","之外","包并","混合","是否是","袋子","类型","机器人","并","我们","语言","但","但是","开发","代码","可以","这些","不是","c","内容","给","这","社区","所以","txt","package","很快","信息",":","tutorials","参考","entry","之一","type","越","还是","src","是","时候","名称","原理","说明","件夹","使用","。","后续","机器","规则","下载","导航","复用","耦合","两个","普通","build","功能","可能","拆分","出来","其中","视觉","还有","名字","头疼","包","也","用","里","指令","新建","local","型","不","points","手上","环境","html","运行","设置","编译","每个","文件夹","到","python","cmakerlists","编程","/","colcon","找","继续",">","命令","-","docs","只想","尽量","就是","ros","workspace","一颗","发现","包中","存在","除此之外","之间","表示","ros2","三个","降低","描述","绿豆","$","是否","；","当","放到","pkg","移动","大本营","create","源码","如果","如何","环境变","把","在","过程","“","编写","介绍","新创","跟","#","creating","有","en","包是","立刻","会","和","各种","方法","必然","learning","可执行文件","cmakelists","dev","first","译成","就","提高","了","分享","解析","只","执行","不同","你","<","别人","时","，","黄豆","感知","这里","比如","相关","c++","某些","_","才能","颜色","中","cmake","name","要",".","多","主要","看到","当然","控制","某种","来","教程","除此","讲解","起来","里边","变量","source","首先","该","结构","举个","install","拿","判断","一个","机制","或者","而是","重要","”","xml","包该","得","划分","cd","ws","下","分别","好","很多","程序","：","~"],"title":"功能包","title_tokens":["包","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_1","text":"在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做 功能包 。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。","text_tokens":["他们"," ","、","想","等","么","红豆","软件","例子","都","叫做","文件","豆子","率","自主","是不是","很难","一起","数量","这个","需要","的","关系","假设","放在","大家","拿出","五颜六色","混合","袋子","机器人","并","我们","但是","代码","可以","这些","不是","给","社区","所以","很快","之一","越","是","时候","名称","原理","说明","件夹","使用","。","机器","下载","导航","复用","耦合","普通","功能","可能","拆分","出来","其中","视觉","头疼","包","也","用","里","不","手上","每个","文件夹","到","找","只想","尽量","就是","ros","一颗","发现","包中","之间","ros2","三个","降低","绿豆","；","当","放到","移动","源码","如果","如何","把","在","有","立刻","会","方法","就","提高","了","分享","只","不同","你","别人","时","，","黄豆","感知","比如","某些","颜色","中","多","看到","当然","控制","某种","教程","起来","举个","拿","一个","机制","而是","重要","包该","得","划分","很多"],"title":"功能包：开发过程的大本营","title_tokens":["包","过程","开发","功能","大本","的","大本营","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_2","text":"如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python","text_tokens":["/","我们"," ",">","就","命令","可以","-","c","版本","<","ament","那","package","，","这里","比如","表示","相关","_","type","c++","ros2","呢","中","还是","？","cmake","name","src","创建","$","；","create","使用","pkg","。","如果","如何","在","新创建","build","功能","这个","的","新创","终端","跟","一个","#","或者","名字","包","指令","新建","dev","包是","cd","和","ws","--","分别","learning","python","：","~"],"title":"创建功能包","title_tokens":["包","创建","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_3","text":"在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash","text_tokens":["/","我们","完成","colcon","继续"," ","代码","可以","所有","，","包中","_","才能","src","环境变量","创建","$",".","配置","正常","环境变","工作","变量","在","source","编写","功能","build","需要","的","install","#","bash","包","setup","local","之后","cd","和","ws","空间","环境","好","运行","编译","dev","：","~"],"title":"编译功能包","title_tokens":["包","编译","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_4","text":"功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。","text_tokens":["我们","不是","那","，","呢","？","是否","文件","创建","件夹","。","来","如何","新创建","两个","普通","结构","功能","的","新创","判断","一个","文件夹","包","分析","刚才","下","包并","是否是"],"title":"功能包的结构","title_tokens":["包","的","结构","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#c","text":"首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。","text_tokens":[" ","声明","代码","语法","内容","必须","txt","所以","package","，","存在","版权","c++","编译","才能","中","描述","是","cmake","要",".","文件","主要","使用","。","规则","如何","在","两个","首先","该","功能","需要","的","其中","依赖","类型","包","xml","和","包含","各种","下","必然","如下","看","运行","设置","cmakerlists","cmakelists","："],"title":"C++功能包","title_tokens":["包","c++","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#python","text":"C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。","text_tokens":["我们","但","译成","但是","一些"," ","版本","声明","解析","执行","不同","这","内容","给","行文","所以","，","package","信息","版权","除此之外","c++","entry","_","一样","中","是","描述",".","文件","编译成","主要","。","后续","使用","源码","除此","配置","讲解","里边","如何","在","：","“","两个","介绍","功能","需要","将","的","依赖","入口","还有","编程","包","也","有","型","xml","setup","”","不","py","会","和","包含","各种","大家","points","之外","可执行文件","编译","python","程序","语言"],"title":"Python功能包","title_tokens":["包","python","功能"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_5","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["/"," ","humble","-","docs","org","workspace","ros",":","package","tutorials","ros2",".","https","your","a","creating","en","html","first"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/","text":"节点 机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。 通信模型 完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。 案例一：Hello World节点（面向过程） ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。 运行效果 大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ], 创建节点流程 代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。 案例二：Hello World节点（面向对象） 所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。 运行效果 接下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ], 创建节点流程 所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。 案例三：物体识别节点 没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。 运行效果 在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 Attention 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。 代码解析 在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ], 案例四：机器视觉识别节点 用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。 运行效果 启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 Attention 如果是在虚拟机中操作，需要进行以下设置： 1. 把虚拟机设置为兼容USB3.1； 2. 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。 代码解析 相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ], 节点命令行操作 节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息 思考题 现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["ret","guyuehome","熟悉","一些","角度","这座","最为","启动","就让","没","唯一","关注","桌子","函数","模拟","？","部门","创建","周期","\"","再","父类","这种","更好","中心","helloworld","查看","物理","8","hcx","纠结","分析","大家","from","前后","看","先拉","图像识别","常用","这些","可以","代码","color","取","理过","远程","学习","参考","说明","电脑","例程","勾勒","list","contours","其中","为止","三","用","数值","里","0","pyhton","既然","总体","lower","做到","像素","运行","class","绿色","编译","每个","打开","驱动","宽","img","编程语言","get","就是","console","spin","ros","除此之外","之间","没错","image","类似","乃至","更为","移动","移植","可视化","如何","编码","发布","90","先","numpy","获取","对象","接下","细胞","nodes","learning","轮廓","self","就","不过","这样","scripts","你","utf","中","调试","name","等待","运动","除此","系统","128","shape","实际","太","understanding","的话","推荐","框架","步骤","发生","opencv","install","方式","as","或者","实现","主","node","检测","保障","更加","结果","retr","分别","好","看上","中将","：","完成","啦"," ","b","后勤部","问题","info","多种","、","知道","并且","helloworldnode","等","效果","即可","工厂","虚拟","二值化","从","叫做","0.5","https","做","一起","destroyallwindows","稍微","每一项","比喻","入口","a","考题","放在","人为","刚才","前","着急","语言","并","2","这份","网上","但","in","某","下限","自然","给","分布式","马",":","none","def","而言","所以然","entry","usb3.1","src","思考","red","coding","名称","通信","用到","while","boundingrect","苹果","。","复杂","输出","功能","到底","出来","左上","视觉","总结","图片","包","退出","import","中间","阈值","webcam","hello","对于","面向","重点","腿","环境","points","for","左上角","env","应该","html","到","python","虚拟机","-","可","调整","综合体","搭载","呀","后","表示","速度","以下","ros2","mask","负责","变化","任务","它","还会","如果","处理过程","一节","字符","上","状态","过程","所在","编写","介绍","分布","命令行","bgr2hsv","模块化","int","模型","有","总体而言","知其所以然","改变","会","各种","地方","shutdown","面积","为例","收到","解析","可视","时","操作系统","载体","后勤部门","吧","比如","某些","颜色","类","看到","概念","进程","来","算是","起来","array","logger","255","课程","180","理解","思考题","案例","孤立","得","岂","会弹","关闭","下","好像","操作","程序","认识","一张","他们","5","而已","上限","溜溜","cv2","org","安装","行文","那","坐标","面向对象","来源","打印","50","依然","一样","得到","不要","呢","都","continue","查询","args","是不是","正常","设备","保持联系","这个","将","的","成为","终端","休眠","cvtcolor","(","setup","节点","加入","之外","图像","列表","=","机器人","具备","摄像头","综合","可移植性","之前","+","二","所以","算机","一项","图像处理","发送","此处","tutorials","点画","可读","时候","只是","（","同理","'","回到","各不相同","被","监控","两个","object","像","还有","名字","ok","也","指令","cnt","一点","连接","古月","高","一","编程","去",">","命令","detect","bin","噪声","drawcontours","通过","docs","每","去除","出","!","可移植","findcontours","日志","]","请",",","一帧","开始","转换","$","是否","destroy","当","xy","识别","“","像头","编码方式","销毁","四","）","身体","路径","home","独立","心里","en","后勤","和","imshow","看上去","接下来","可执行文件","150","inrange","看看","了","作者","框会","w","只不过","bgr","让","sudo","，","sleep","知其然","提供","以","_","java","循环","要",".","居","当然","控制","示例","if","circle","不能","该","轮子","结构","进行","中心点","过来","上角","完整","编写程序","出现","组成","”","重要","videocapture","apt","相同","重新","waitkey","通信模型","选项","21","apple","humble","jpg","最大","这款","注意","显示","接口","职责","未来","点","动态","修改","—","工人","却","1","h","一下","文件","配置","工作","合理","另外","难","不用","链接","厂房","需要","可读性","cap","物体","框架图","py","命名","计算","流程","简单","读取","布式","如下","库","眼睛","read","我们","但是","更","开发","初始化","不是","时间","这","疑惑","相机","共同","hsv","信息","方便","下来","过","还是","是","ruby","模块","使用","机器","保持","骡子","兼容","com","www","及","usr","实时","可能","还","true","x","time","计算机","处理","hierarchy","不","然后","至","super","很","设置","绿点","联系","云端","/","推动","world","参数","{","main","发现","__","现在","摄像","run","；","生成","关于",")","合体","硬件","整体","把","在","范围","更多要","一种","摇杆","设计","approx","移植性","imread","#","为","rclpy","上去","方法","互相","一线","upper","dev","字符串","成功","初始","chain","y","执行","来看","不同","python3","attention","<","四个","窗口","这里","c++","众多","想到","具体","改成","太小","[","np","相比","多","某种","想要","*","@","根据","init","经常","外界","一个","机制","一台","前后左右","更多","ws","找到","位于","左右","虽然","红色"],"title":"节点","title_tokens":["节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_1","text":"机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。","text_tokens":["我们","综合","就","一些","了"," ","这些","通过","综合体","给","就是","那","取","，","一项","ros","众多","中","是","。","机器","合体","工作","整体","在","“","一起","功能","像","的","每一项","成为","一个","机制","名字","”","节点","各种","连接","细胞","到","机器人"],"title":"节点","title_tokens":["节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_2","text":"完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。","text_tokens":["完成","他们"," ","b","角度","后勤部","这座","这款","、","行文","等","那","职责","工厂","唯一","—","工人","得到","桌子","却","都","从","叫做","文件","部门","查询","配置","工作","另外","做","一起","厂房","这个","需要","的","比喻","物理","a","节点","计算","放在","人为","命名","布式","之外","前后","眼睛","语言","并","机器人","我们","但","摄像头","某","这些","可以","更","不是","自然","这","程序","分布式","算机","共同","信息","远程","下来","是","时候","名称","ruby","。","机器","各不相同","复杂","监控","功能","可能","还","到底","还有","计算机","也","里","不","既然","连接","腿","环境","运行","编译","每个","到","python","编程","云端","推动","去","编程语言","通过","每","参数","就是","搭载","除此之外","速度","摄像","乃至","任务","；","生成","当","移动","它","还会","更为","如何","硬件","整体","在","上","状态","“","像头","摇杆","设计","分布","身体","独立","获取","有","后勤","和","接下","接下来","细胞","地方","互相","一线","可执行文件","看看","就","了","这样","执行","来看","你","不同","让","时","，","操作系统","载体","后勤部门","提供","比如","c++","某些","java","中","想到","具体","运动","多","看到","控制","除此","进程","来","算是","系统","想要","该","轮子","根据","完整","外界","一个","一台","或者","组成","”","实现","前后左右","保障","相同","结果","找到","位于","左右","分别","操作","虽然","：","认识"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world","text":"ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。","text_tokens":["我们"," ","了","最为","world","就是","，","打印","ros2","中","是","开始","循环","从","例程","当然","。","来","字符","复杂","“","编写","功能","需要","的","终端","先","一个","编写程序","”","实现","hello","节点","不","简单","到","字符串","程序","并"],"title":"案例一：Hello World节点（面向过程）","title_tokens":["案例"," ","过程","hello","节点","面向","world","一","（","）","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_3","text":"大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["我们","成功"," ","代码","命令","可以","溜溜","执行","通过","world","效果","马","所以","，","知其然","learning","所以然","后","打印","_","编译","不要","ros2","中","是","循环","run","$","看到","。","再","来","骡子","如何","字符","在","过程","helloworld","“","这个","出来","的","终端","课程","先","”","也","实现","知其所以然","node","然后","节点","分析","hello","做到","大家","下","看","先拉","运行","好","着急","字符串"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_4","text":"这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ],","text_tokens":["完成","选项","guyuehome"," ","info","知道","接口","点","呢","函数","？","0.5","创建","文件","args","\"","配置","正常","helloworld","这个","需要","的","休眠","入口","8","(","setup","py","节点","加入","from","如下","库","=","并","我们","代码","初始化","时间",":","信息","def","none","entry","是","coding","说明","while","使用","。","'","com","www","usr","输出","功能","time","ok","包","import","hello","面向","古月","points","运行","env","设置","编译","python","打开","/","-","bin","get","world","console","!","{","main","后","ros2","日志","]",",","是否","destroy",")","如何","“","过程","发布","编写","销毁","#","rclpy","对象","learning","shutdown","初始","作者","python3","来看","scripts","让","sleep","，","utf","_","类","循环",".","[","居","控制","示例","系统","*","@","logger","进行","init","方式","”","实现","主","node","关闭","下","程序","："],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_5","text":"代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。","text_tokens":["初始","我们"," ","但是","就","更","代码","初始化","这样","可以","接口","，","未来","发现","这里","学习","c++","过","函数","中","是","具体","一下","用到","创建","模块","使用","。","机器","如果","系统","这种","想要","难","做","编码","过程","复杂","不用","功能","销毁","的话","的","稍微","经常","先","方式","一个","理解","总结","或者","出现","编程","重要","机器人","实现","有","模块化","纠结","pyhton","节点","会","流程","简单","面向","对于","大家","关闭","方法","一点","很","做到","应该","虽然","：","并"],"title":"创建节点流程","title_tokens":["创建","流程","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world_1","text":"所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。","text_tokens":["我们"," ","就","了","开发","更","代码","可以","这样","一些","但是","所以","，","可移植","面向对象","比如","方便","ros2","可读","中","调试","改成","使用","。","移植","起来","更好","在","复杂","可移植性","推荐","可读性","的","移植性","方式","也","对象","上去","会","和","刚才","面向","看上去","大家","更加","看上","虽然","编程","具备"],"title":"案例二：Hello World节点（面向对象）","title_tokens":["案例"," ","hello","节点","对象","面向","world","（","二","）","：","面向对象"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_6","text":"接下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["成功"," ","可以","调整","world","效果","，","打印","后","_","下来","ros2","还是","中","循环","一下","run","$","看到","。","字符","在","helloworld","“","的","终端","”","node","hello","节点","接下","接下来","运行","learning","class","字符串","："],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_7","text":"功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ],","text_tokens":["完成","选项","guyuehome"," ","info","知道","helloworldnode","接口","面向对象","点","一样","函数","一下","0.5","创建","文件","args","\"","配置","父类","正常","helloworld","需要","的","休眠","入口","8","(","setup","py","节点","加入","from","如下","看","库","=","并","我们","这份","但是","代码","初始化","时间","程序",":","信息","def","none","entry","coding","说明","while","使用","。","'","com","www","usr","输出","功能","time","ok","退出","import","包","hello","面向","古月","super","points","class","env","运行","设置","编译","python","打开","/","-","bin","get","world","spin","console","!","{","main","__","后","ros2","日志","]",",","变化","是否","destroy",")","“","发布","编写","销毁","#","rclpy","对象","learning","shutdown","self","初始","了","作者","python3","scripts","时","让","，","sleep","utf","_","具体","类","name","循环",".","等待","[","居","控制","示例","系统","*","@","logger","结构","进行","init","发生","方式","一个","”","实现","主","node","关闭","虽然","："],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_8","text":"所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。","text_tokens":["初始","完成"," ","一些","了","不过","而已","初始化","不是","这","疑惑","world","只不过","所以","四个","，","接口","这里","而言","打印","吧","依然","中","是","只是","具体","创建","任务","。","机器","是不是","做","编码","不能","编码方式","功能","销毁","的","步骤","为止","方式","还有","一个","机器人","心里","总体而言","实现","改变","hello","节点","得","总体","大家","关闭","到","编程","并"],"title":"创建节点流程","title_tokens":["创建","流程","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_9","text":"没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。","text_tokens":["我们","网上","就","为例"," ","通过","，","以","没错","下来","模拟","中","从","任务","苹果","。","机器","来","识别","实际","过程","编写","的","视觉","先","一个","一张","图片","实现","节点","接下","找到","接下来","机器人"],"title":"案例三：物体识别节点","title_tokens":["案例","节点","物体","三","：","识别"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_10","text":"在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 Attention 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。","text_tokens":["啦"," ","21","apple","jpg","cv2","注意","安装","即可","修改","—","中心","这个","将","的","需要","(","hcx","py","如下","图像","前","库","=","我们","代码","可以","图像处理","tutorials","src","用到","例程","使用","苹果","勾勒","。","'","被","object","出来","图片","指令","中间","处理","然后","运行","绿色","编译","绿点","/","-","出","后","表示","image","ros2","请","run","$",")","可视化","识别","把","在","imread","#","路径","home","为","learning","dev","轮廓","成功","就","框会","python3","attention","可视","sudo","，","窗口","_","中",".","看到","实际","中心点","opencv","install","一个","apt","node","ws","会弹","重新","："],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_11","text":"在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ],","text_tokens":["waitkey","完成","选项","guyuehome"," ","一些","5","21","info","上限","cv2","显示","apple","jpg","知道","效果","接口","坐标","点","关注","1","得到","函数","模拟","h","二值化","从","continue","创建","文件","args","\"","配置","中心","helloworld","这个","将","的","destroyallwindows","需要","入口","8","cvtcolor","(","setup","hcx","py","节点","计算","加入","大家","from","读取","如下","图像","库","=","2","机器人","并","我们","in","图像识别","代码","初始化","不是","下限","color","+","hsv","图像处理",":","def","none","理过","此处","点画","tutorials","entry","src","是","coding","red","说明","例程","boundingrect","苹果","。","list","机器","勾勒","使用","contours","'","com","www","及","object","usr","功能","出来","左上","x","图片","包","退出","处理","import","数值","0","阈值","hierarchy","cnt","lower","重点","古月","for","像素","高","左上角","points","env","设置","编译","class","python","打开","/","宽","img","detect","-","bin","噪声","drawcontours","通过","get","去除","spin","console","!","{","main","后","image","findcontours","ros2","]","mask",",","转换","destroy","关于",")","xy","处理过程","识别","如何","在","过程","范围","更多要","所在","编写","销毁","approx","90","imread","#","bgr2hsv","home","numpy","rclpy","为","模型","int","对象","和","imshow","upper","learning","shutdown","轮廓","150","dev","面积","inrange","初始","chain","了","作者","y","python3","scripts","<","w","bgr","让","，","utf","_","颜色","中","具体","类","太小","循环",".","np","[","居","等待","概念","来","示例","array","if","系统","*","@","128","shape","circle","logger","255","进行","opencv","init","180","上角","一个","as","出现","实现","主","更多","node","检测","ws","关闭","retr","程序","：","红色"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_12","text":"用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。","text_tokens":["我们","摄像头","问题","就让","没","，","呀","动态","下来","颜色","摄像","类似","苹果","。","机器","合理","识别","太","像头","进行","还","的","其中","物体","或者","图片","用","有","不","节点","接下","接下来","读取","图像","好像","应该","眼睛","机器人"],"title":"案例四：机器视觉识别节点","title_tokens":["案例","节点","四","视觉","机器","：","识别"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_13","text":"启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 Attention 如果是在虚拟机中操作，需要进行以下设置： 1. 把虚拟机设置为兼容USB3.1； 2. 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。","text_tokens":["成功","啦","摄像头"," ","就","可","可以","注意","attention","并且","启动","，","后","_","以下","1","虚拟","ros2","usb3.1","中","是","摄像","run","$",".","；","移动","。","红色","如果","设备","识别","把","兼容","在","object","像头","2","该","实时","进行","需要","的","终端","物体","#","一个","为","node","webcam","节点","至","连接","如下","运行","learning","设置","操作","中将","虚拟机","：","驱动"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_14","text":"相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ],","text_tokens":["waitkey","完成","ret","选项","guyuehome"," ","一些","5","info","最大","cv2","上限","显示","并且","知道","效果","接口","坐标","来源","50","点","修改","1","得到","函数","h","二值化","从","周期","continue","创建","文件","args","\"","配置","中心","helloworld","将","的","cap","需要","入口","8","cvtcolor","(","setup","py","节点","计算","加入","from","读取","如下","图像","库","=","2","并","read","in","摄像头","之前","代码","初始化","下限","color","+","相机","hsv","信息",":","图像处理","def","none","点画","entry","是","coding","red","说明","while","boundingrect","使用","。","苹果","list","勾勒","contours","'","com","www","及","object","usr","功能","出来","左上","true","x","图片","ok","包","import","处理","数值","0","webcam","阈值","hierarchy","cnt","lower","古月","像素","for","高","points","左上角","class","env","设置","编译","python","打开","驱动","/","宽","img","detect","-","bin","噪声","drawcontours","通过","get","去除","console","!","{","main","后","image","findcontours","ros2","]","mask",",","一帧","摄像","变化","转换","destroy",")","xy","识别","范围","像头","所在","编写","销毁","approx","90","#","bgr2hsv","numpy","rclpy","为","模型","int","对象","和","imshow","upper","learning","shutdown","轮廓","150","面积","inrange","初始","chain","了","作者","y","python3","scripts","<","w","bgr","让","，","这里","utf","_","颜色","中","类","太小",".","np","相比","居","[","来","示例","array","if","系统","*","@","128","shape","circle","logger","255","进行","opencv","init","180","上角","as","出现","videocapture","主","node","检测","关闭","retr","程序","：","红色"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_15","text":"节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息","text_tokens":["常用"," ",">","命令","info","<","信息","_","ros2","name","$","list","的","查看","#","node","节点","如下","列表","操作","："],"title":"节点命令行操作","title_tokens":["节点","命令行","操作","命令"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_16","text":"现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。","text_tokens":["他们","熟悉"," ","问题","b","多种","最为","显示","配置","工作","保持联系","另外","这个","将","的","a","框架图","节点","大家","图像","并","机器人","我们","常用","摄像头","这些","不是","这","给","发送","电脑","。","机器","同理","保持","回到","两个","指令","连接","很","应该","联系","参数","ros","发现","之间","后","没错","速度","现在","负责","开始","摄像","还会","如果","一节","把","在","像头","一种","介绍","摇杆","有","改变","会","和","方法","细胞","就","了","收到","，","比如","中","要","运动","看到","概念","控制","某种","系统","想要","框架","过来","一个","机制","实现","孤立","得","岂","下"],"title":"思考题","title_tokens":["思考题","思考","考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_17","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["/","tutorials","en","ros2","humble","-","docs","org","understanding",".","nodes","html","ros",":","https"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/","text":"话题 节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。 通信模型 以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。 发布/订阅模型 从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。 多对多通信 大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。 异步通信 话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。 消息接口 最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。 案例一：Hello World话题通信 了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 运行效果 启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。 发布者代码解析 我们来看下发布者的实现方法。 程序实现 learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口 订阅者代码解析 我们再来看下订阅者的实现方法。 程序实现 learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。 案例二：机器视觉识别 在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。 运行效果 这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。 发布者代码解析 learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], }, 订阅者代码解析 learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], }, 案例三：机器视觉识别优化 通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub 话题命令行操作 话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息 思考题 关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？ 参考链接 https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["ret","guyuehome","角度","控制指令","一些","所有","启动","间","没","video","唯一","又","bw","函数","直接","？","打","周期","创建","保证","\"","再","报社","号","父类","这种","自己","更好","优先","中心","接口定义","helloworld","查看","8","另","分析","大家","from","他会","看","转化","3","常用","这些","可以","异步","代码","队列","color","格式","参考","bgr8","type","一定","说明","例程","list","不变","勾勒","contours","cam","一句","生活","第二","其中","三","用","数值","里","0","既然","lower","做到","像素","转换成","运行","class","以上","编译","每个","完全","打开","驱动","各种各样","宽","img","感兴趣","编程语言","get","%","一行","就是","spin","console","ros","数据结构","！","个","一新","拼接","之间","没错","image","消息","仔细","基本","类似","可视化","移植","如何","渲染","因为","frame","发布","90","排版","先","numpy","获取","任何","想下","人","对象","接下","传感","learning","imgmsg","轮廓","一次","self","就","提高","不过","精简","这样","scripts","你","名","utf","说干就干","中","根本","name","与","等待","运动","hz","系统","128","shape","中是","太","写","不然","cvbridge","understanding","的话","opencv","install","留","方式","as","听说","固定","实现","主","一般","node","检测","retr","好","分别","：","完成","啦"," ","b","问题","info","、","知道","用户","并且","效果","即可","么","软件","二值化","从","叫做","0.5","魔性","报纸","https","做","成","出去","一篇","传感器","入口","a","英文","基于","raw","考题","千丝","东西","举","之后","稍后","刚才","拍摄","语言","并","2","者","长度","但","in","某","讲","回调","publish","说","下限","自然","给","换成","进一步",":","s","def","none","叫","entry","方向","谁","接收数据","coding","名称","通信","red","思考","boundingrect","苹果","。","是从","只要","复杂","定时器","复用","输出","功能","思想","出来","单向","左上","视觉","总结","包","退出","import","阈值","webcam","hello","发送数据","逻辑","对于","points","for","html","左上角","应该","env","到","python","数据类型","subscription","继续","-","要求","词","本原","publishernode","呀","存在","后","画面","以下","什么","ros2","std","mask","单位","变化","不行","它","做成","如果","字符","callback","上","过程","所在","编写","特性","程序实现","千丝万缕","命令行","平时","bgr2hsv","模块化","int","有","模型","等等","会","各种","采集","必然","化成","带宽","shutdown","面积","为例","收到","周期性","接口协议","解析","此时","数据","可视","比如","一步","某些","并不知道","颜色","类","usb","中文","topic","概念","感器","看到","来","讲解","积木","}","array","logger","0.1","255","万缕","string","之为","180","理解","思考题","i","echo","第一","案例","优化","得","没有","满足","关闭","数据传输","下","好像","称之为","随处","操作","对劲","程序","各样","5","上限","cv2","org","二个","想","安装","已经","那","感觉","坐标","通用","适合","一样","得到","呢","都","continue","内","args","肯定","定时","是不是","需求","设备","这个","将","的","传递","成为","关系","终端","cvtcolor","(","焕然一新","setup","杂志","节点","加入","优先级","每换","图像","无法","列表","块","=","最","类型","机器人","subscribernode","可移植性","之前","+","二","图像处理","发送","tutorials","点画","时候","能够","（","发布者","'","可见","pub","被","监控","两个","object","像","联系方式","哪里","还有","文章","已","名字","指令","也","第二个","msgs","cnt","古月","chatter","高","一","合适","接收","编程","小编",">","detect","命令","bin","噪声","听","通过","drawcontours","docs","每","去除","!","可移植","findcontours","日志","]","描述",",","开始","一帧","转换","$","destroy","是否","create","长宽","xy","识别","挺","“","指","符合","感兴","销毁","几乎","）","微信","独立","知识","en","随处可见","值","和","imshow","接下来","提示","第一次","比方","无论","150","inrange","heard","了","作者","w","bgr","让","publishing","sudo","，","以","对应","_","才能","话题","循环","要","从而",".","居","转化成","当然","控制","示例","想象","if","circle","不能","该","结构","进行","上角","阅读","组成","重要","视频","”","videocapture","\\","订阅","imagesubscriber","apt","to","过瘾","waitkey","通信模型","选项","listener","焕然","humble","传输","显示","注意","同样","自行","公众","接口","无关","未来","几个","定义","topics","点","建议","修改","例子","1","统一","h","一下","文件","率","似乎","配置","rgb","最后","dds","另外","10","第一个","链接","数量","需要","cap","了解","物体","用于","进入","py","流程","计算","包含","读取","如下","库","read","我们","对","但是","放入","更","开发","初始化","不是","协议","这","相机","在生活中","hsv","信息","区分","换","receiving","频率","耦","还是","下来","publisher","是","原理","模块","使用","一份","机器","保持","sub","桥梁","com","www","及","实时","usr","可能","还","imagepublisher","秒","true","x","基本原理","处理","hierarchy","不","super","据传","更换","设置","联系","作为","/","解","本身","world","参数","data","目标","exe","{","main","后缀","__","来讲","现在","run","bridge","关于","同学",")","硬件","把","在","集成","范围","一种","摇杆","设计","approx","移植性","就要","传递数据","#","为","rclpy","不知","什么样","原本","方法","互相","upper","逻辑性","msg","字符串","标准","初始","成功","所谓","chain","sensor","只","python3","来看","执行","y","<","组织","cv","这里","太小","[","np","多个","多","timer","某种","发出","不太","*","@","想要","兴趣","init","一个","较强","填充","很多","虽然","红色"],"title":"话题","title_tokens":["话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_1","text":"节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。","text_tokens":["各样","但","各种各样"," ","了","这些","不是","数据","就是","间","，","之间","话题","是","。","它","机器","桥梁","一种","万缕","功能","的","传递","其中","联系方式","传递数据","方式","千丝万缕","独立","机器人","重要","实现","有","千丝","节点","会","各种","最","联系","并"],"title":"话题","title_tokens":["话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_2","text":"以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。","text_tokens":[" ","b","传输","显示","用户","想","得到","？","一下","从","是不是","设备","做","这个","将","的","传递","关系","查看","a","节点","大家","图像","拍摄","机器人","我们","某","可以","不是","这","给","相机","信息","方向","是","。","机器","桥梁","监控","两个","实时","功能","据传","到","作为","驱动","ros","存在","之间","没错","它","可视化","硬件","在","上","渲染","获取","有","必然","就","为例","了","这样","此时","数据","可视","，","以","才能","话题","中","要","某种","之为","方式","一个","视频","实现","数据传输","称之为"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_3","text":"从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为 发布者 ，接收数据的对象称之为 订阅者 ，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。","text_tokens":[" ","角度","传输","、","公众","呢","？","打","从","都","叫做","报纸","号","dds","另外","成","出去","这个","需要","的","成为","基于","杂志","之后","节点","大家","他会","无法","看","类型","机器人","者","对","可以","自然","在生活中","发送","格式","叫","是","接收数据","名称","使用","。","机器","发布者","是从","可见","生活","文章","名字","也","发送数据","古月","据传","应该","到","接收","/","数据类型","小编","要求","感兴趣","本身","每","就是","什么","类似","它","如果","把","“","发布","感兴","特性","排版","平时","微信","知识","模型","有","对象","随处可见","会","和","等等","比方","就","了","收到","这样","来看","数据","组织","，","比如","话题","居","兴趣","的话","之为","一个","”","固定","实现","订阅","没有","数据传输","称之为","好","随处"],"title":"发布/订阅模型","title_tokens":["/","模型","发布","订阅"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_4","text":"大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。","text_tokens":["通信模型"," ","控制指令","、","注意","知道","公众","唯一","建议","一样","1","一下","魔性","报纸","是不是","再","似乎","号","优先","数量","这个","的","东西","杂志","节点","优先级","大家","3","机器人","2","我们","者","并","对","这些","可以","不是","区分","发送","还是","是","谁","通信","。","机器","发布者","被","可能","指令","也","里","不","每个","听","ros","个","存在","没错","画面","仔细","如果","挺","因为","发布","摇杆","模型","有","想下","人","和","了","，","话题","要","多个","多","控制","想象","不然","该","之为","一个","订阅","称之为","很多"],"title":"多对多通信","title_tokens":["多","对","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_5","text":"话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。","text_tokens":[" ","一些","传输","知道","那","公众","修改","适合","？","叫做","周期","报纸","报社","号","这个","一篇","的","传感器","用于","者","某","异步","可以","更","这","是","时候","通信","一份","。","发布者","只要","可能","还有","文章","指令","也","用","不","逻辑","古月","合适","词","参数","就是","后","什么","类似","同学","如果","指","发布","特性","有","不知","等等","传感","第一次","逻辑性","一次","所谓","就","收到","了","数据","你","让","，","比如","某些","并不知道","话题","根本","居","运动","感器","控制","发出","太","阅读","一个","听说","第一","订阅","较强"],"title":"异步通信","title_tokens":["异步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_6","text":"最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过 .msg 后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。","text_tokens":["各样"," ","传输","、","自行","无关","接口","定义","统一","一样","都","文件","rgb","最后","接口定义","成","的","英文","节点","包含","图像","块","语言","机器人","者","我们","可以","说","格式","是","通信","。","机器","发布者","复杂","像","也","既然","像素","据传","每个","编程","各种各样","编程语言","通过","ros","数据结构","后缀","拼接","消息","描述","长宽","在","一种","发布","有","等等","会","和","值","各种","msg","标准","就","了","这样","数据","，","这里","对应","比如","话题","中","与",".","中文","概念","积木","系统","不能","结构","进行","之为","方式","一个","理解","组成","订阅","得","数据传输","称之为"],"title":"消息接口","title_tokens":["接口","消息"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#hello-world","text":"了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。","text_tokens":["我们","啦","者"," ","了","代码","world","本原","，","ros","发送","定义","接收","消息","话题","下来","还是","中","基本","是","开始","原理","从","创建","例程","周期","从而","。","来","发布者","再","字符","“","发布","编写","这个","的","string","就要","了解","一个","基本原理","”","订阅","hello","接下","接下来","chatter","到","字符串","标准","类型"],"title":"案例一：Hello World话题通信","title_tokens":["案例"," ","话题","hello","通信","world","一","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_7","text":"启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。","text_tokens":["者"," ","收到","可以","同样","二个","数据","world","启动","，","以","_","消息","频率","话题","ros2","循环","run","$","topic","看到","。","sub","发布者","pub","字符","第一个","helloworld","“","该","发布","第二","几乎","的","终端","一个","”","也","第二个","第一","订阅","hello","节点","运行","learning","字符串","："],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_8","text":"我们来看下发布者的实现方法。","text_tokens":["我们","实现","发布","来看","方法","下","的","。","发布者"],"title":"发布者代码解析","title_tokens":["代码","发布者","解析","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_9","text":"learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], },","text_tokens":["完成","选项","guyuehome"," ","info","、","知道","已经","接口","点","函数","0.5","创建","周期","文件","args","\"","定时","配置","父类","10","helloworld","需要","的","入口","8","(","setup","py","节点","加入","from","如下","库","=","类型","并","长度","回调","代码","publish","初始化","队列",":","s","def","信息","none","entry","publisher","coding","说明","（","发布者","'","pub","定时器","com","www","usr","输出","功能","秒","包","退出","import","hello","msgs","古月","chatter","super","points","class","env","设置","编译","python","打开","/","-","bin","get","world","%","publishernode","spin","data","console","!","{","main","__","后","消息","ros2","std","日志",",","]","单位","destroy","create",")","字符","callback","“","发布","编写","销毁","）","#","为","rclpy","对象","提示","learning","msg","shutdown","字符串","self","初始","作者","python3","执行","数据","scripts","让","publishing","，","名","utf","_","话题","中","类","name","循环",".","等待","timer","居","[","topic","示例","系统","}","*","@","logger","进行","string","init","一个","”","主","node","填充","关闭","程序","："],"title":"程序实现","title_tokens":["实现","程序实现","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_10","text":"对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口","text_tokens":["我们","初始","对"," ","初始化","接口","，","消息","话题","创建","发布者","如果","想要","：","发布","进行","销毁","一个","实现","对象","节点","分析","流程","填充","关闭","如下","以上","程序","编程","并"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_11","text":"我们再来看下订阅者的实现方法。","text_tokens":["我们","者","实现","订阅","来看","方法","下","的","。","再"],"title":"订阅者代码解析","title_tokens":["者","代码","解析","订阅"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_12","text":"learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], },","text_tokens":["完成","选项","guyuehome"," ","listener","info","、","知道","接口","定义","点","函数","创建","文件","args","\"","配置","父类","10","helloworld","需要","的","入口","8","(","setup","py","节点","加入","from","如下","库","=","类型","并","长度","者","subscribernode","对","回调","代码","初始化","队列",":","s","def","信息","none","entry","coding","说明","（","sub","'","pub","com","www","usr","输出","功能","包","退出","import","处理","hello","msgs","古月","chatter","super","points","class","env","设置","编译","python","打开","/","subscription","-","bin","get","world","%","spin","console","data","!","{","main","__","后","消息","ros2","std","日志",",","]","destroy","create",")","callback","“","编写","销毁","）","#","rclpy","对象","提示","learning","msg","shutdown","标准","self","初始","heard","作者","收到","python3","执行","数据","scripts","让","，","名","utf","_","话题","类","name","循环",".","等待","[","居","topic","示例","系统","}","*","@","logger","进行","string","init","一个","”","i","主","\\","订阅","node","关闭","程序","："],"title":"程序实现","title_tokens":["实现","程序实现","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_13","text":"对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。","text_tokens":["我们","者","初始","啦","对"," ","继续","回调","之前","初始化","数据","world","接口","，","话题","一定","函数","下来","通信","创建","例程","。","机器","如果","想要","：","进行","销毁","还","的","视觉","一个","基于","实现","处理","订阅","过瘾","优化","对象","节点","分析","流程","hello","不","接下","大家","关闭","接下来","如下","下","好","以上","程序","编程","并"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_14","text":"在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。","text_tokens":["我们","驱动","对","但是","问题","了","开发","传输","通过","并且","程序","数据","就是","即可","相机","没","，","间","来讲","话题","联系","中","是","模块","周期","概念","。","机器","做成","讲解","识别","更好","在","过程","两个","功能","并","将","的","这个","视觉","物体","一个","方式","模块化","机器人","实现","节点","没有","和","对于","做到","图像","虽然","红色"],"title":"案例二：机器视觉识别","title_tokens":["案例","二","视觉","机器","：","识别"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_15","text":"这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。","text_tokens":["啦"," ","二个","启动","效果","即可","未来","定义","软件","修改","？","内","保证","这种","更好","第一个","这个","需要","的","将","终端","物体","另","节点","图像","并","我们","可移植性","放入","可以","相机","是","模块","。","保持","不变","sub","pub","两个","功能","第二","思想","视觉","第二个","webcam","更换","运行","完全","驱动","ros","可移植","消息","以下","ros2","run","$","如果","移植","识别","如何","在","范围","发布","设计","移植性","先","模块化","learning","标准","就","了","只","来看","，","_","话题","说干就干","要","topic","看到","中是","一个","实现","第一","订阅","下","好","分别","红色"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_16","text":"learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], },","text_tokens":["完成","ret","选项","guyuehome"," ","info","cv2","、","知道","已经","接口","video","点","函数","创建","周期","文件","args","\"","定时","配置","父类","号","设备","10","helloworld","将","的","cap","需要","入口","8","(","用于","raw","setup","py","节点","稍后","加入","from","读取","如下","图像","库","=","类型","并","长度","read","回调","代码","publish","初始化","队列","换成","相机",":","图像处理","def","信息","none","entry","bgr8","publisher","coding","说明","（","sub","发布者","'","pub","定时器","com","www","usr","输出","功能","imagepublisher","秒","true","包","退出","import","处理","0","webcam","msgs","古月","转换成","super","points","class","env","设置","编译","python","打开","驱动","/","-","bin","get","spin","console","!","ros","{","main","__","后","image","消息","ros2","日志","]",",","一帧","单位","转换","destroy","create","bridge",")","如果","callback","frame","发布","编写","销毁","）","#","为","rclpy","对象","采集","提示","learning","msg","imgmsg","shutdown","self","初始","成功","作者","sensor","python3","执行","scripts","让","publishing","，","名","cv","utf","_","话题","类","name","循环","与",".","等待","timer","居","[","topic","示例","if","系统","}","*","@","0.1","logger","cvbridge","进行","opencv","init","一个","videocapture","视频","主","node","关闭","to","程序","："],"title":"发布者代码解析","title_tokens":["代码","发布者","解析","发布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_17","text":"learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], },","text_tokens":["waitkey","完成","选项","guyuehome"," ","listener","一些","5","info","上限","cv2","、","显示","知道","效果","接口","坐标","video","点","1","得到","函数","h","二值化","从","创建","continue","文件","args","\"","配置","父类","中心","10","helloworld","将","的","需要","入口","8","cvtcolor","(","用于","raw","进入","setup","py","节点","计算","加入","from","如下","图像","库","转化","=","类型","2","长度","者","in","并","回调","代码","初始化","队列","下限","color","+","hsv",":","图像处理","def","none","信息","点画","receiving","entry","bgr8","red","coding","说明","（","boundingrect","苹果","使用","list","勾勒","sub","contours","'","pub","com","www","及","object","usr","输出","功能","出来","左上","x","已","包","退出","import","处理","数值","0","webcam","阈值","msgs","hierarchy","cnt","lower","古月","像素","super","for","高","左上角","class","env","设置","编译","points","python","打开","/","subscription","宽","img","detect","-","bin","噪声","drawcontours","get","去除","spin","console","data","!","ros","{","main","__","后","image","消息","findcontours","ros2","]","mask",",","日志","转换","destroy","create","bridge",")","xy","callback","frame","范围","所在","编写","销毁","approx","90","）","#","bgr2hsv","numpy","rclpy","为","模型","int","对象","和","imshow","提示","互相","upper","learning","化成","msg","imgmsg","轮廓","150","shutdown","self","面积","inrange","初始","chain","作者","sensor","y","python3","scripts","<","w","bgr","让","，","名","cv","utf","_","话题","颜色","中","类","name","太小","与",".","np","[","居","循环","topic","转化成","等待","示例","array","if","系统","*","@","128","shape","circle","logger","}","255","cvbridge","进行","opencv","init","180","上角","as","一个","imagesubscriber","主","订阅","node","检测","关闭","retr","to","程序","：","红色"],"title":"订阅者代码解析","title_tokens":["者","代码","解析","订阅"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_18","text":"通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub","text_tokens":[" ","焕然","humble","安装","感觉","么","接口","软件","通用","又","得到","直接","？","都","率","似乎","是不是","自己","做","需要","的","焕然一新","节点","刚才","大家","每换","图像","我们","常用","对","协议","可以","代码","不是","这","换成","进一步","相机","换","耦","是","例程","使用","。","sub","只要","cam","复用","一句","功能","可能","视觉","哪里","还有","指令","也","用","webcam","不","到","驱动","解","-","一行","通过","目标","exe","ros","！","一新","呀","什么","现在","ros2","变化","run","$","不行","识别","集成","符合","发布","有","任何","什么样","原本","learning","无论","标准","提高","就","了","不过","接口协议","精简","只","这样","你","让","sudo","，","一步","_","话题","中","usb","topic","当然","不太","写","install","一个","一般","apt","node","得","好像","好","对劲"],"title":"案例三：机器视觉识别优化","title_tokens":["案例","优化","视觉","机器","三","：","识别"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_19","text":"话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息","text_tokens":["常用"," ",">","命令","info","传输","数据","<","data","信息","_","频率","bw","话题","ros2","type","消息","name","$","hz","topic","list","pub","发布","的","查看","#","msg","echo","如下","列表","带宽","操作","："],"title":"话题命令行操作","title_tokens":["命令","命令行","操作","话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_20","text":"关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？","text_tokens":["我们","完成","讲","就","周期性","传输","数据","给","所有","，","几个","这里","来讲","适合","例子","话题","呢","思考","是","？","能够","通信","原理","周期","是否","肯定","关于","机器","需求","系统","这种","复杂","特性","的","传递","单向","留","一个","思考题","考题","实现","举","满足","和","对于","大家","方法","数据传输","无法","据传","到","：","机器人"],"title":"思考题","title_tokens":["思考题","思考","考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_21","text":"https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["/","tutorials","en","ros2","humble","-","docs","org","understanding",".","html","ros",":","https","topics"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/","text":"服务 话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。 通信模型 在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。 客户端/服务器模型 从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。 同步通信 这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。 一对多通信 比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。 服务接口 和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。 案例一：加法求解器 大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 运行效果 我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3 客户端代码解析 我们来看下客户端的实现方法。 程序实现 learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口 服务端代码解析 至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。 程序实现 learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口 案例二：机器视觉识别 好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。 运行效果 此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client 客户端代码解析 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], }, 服务端代码解析 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], }, 服务命令行操作 服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求 思考题 话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["guyuehome","半天","展现","一些","客户端","最为","控制指令","启动","官方","希望","video","唯一","反馈","函数","周期","创建","一直","\"","父类","准确","这种","中心","并不需要","...","查看","假设","8","接口类型","分析","done","大部","大家","from","看","转化","argv","加数","3","n","常用","图像识别","异步","可以","这些","代码","队列","color","页面","学习","参考","bgr8","type","准备","电脑","说明","例程","break","list","勾勒","contours","cam","服务","生活","第二","其中","数值","0","lower","部分","像素","运行","class","以上","完全","编译","打开","驱动","宽","img","get","%","就是","spin","console","求解","ros","同步性","当前","之间","image","消息","基本","类似","雷达","不好","放到","except","相对","frame","发布","90","request","numpy","获取","人","对象","接下","传感","比比","learning","imgmsg","轮廓","一次","self","就","网站","接口类","不过","这样","scripts","你","名","utf","中","name","e","与","等待","运动","转圈圈","浏览器","系统","128","shape","cvbridge","尽快","else","understanding","opencv","我","处","方式","as","应答","或者","越好","adderserver","实现","问","主","一般","node","检测","更加","服务端","结果","retr","比比皆是","好","分别","：","打印输出","完成","啦"," ","b","info","知道","、","并且","效果","网页","等","传入","后者","二值化","从","叫做","繁杂","https","一起","服务器端","有所不同","成","出去","器","传感器","入口","求和","a","考题","raw","之后","刚才","封装","2","并","长度","者","in","讲","但","回调","下限","给","一问一答","d",":","interface","def","none","务器","entry","思考","red","coding","通信","用到","while","boundingrect","苹果","。","至于","输出","功能","圈圈","出来","单向","左上","视觉","总结","包","退出","import","阈值","available","for","points","html","左上角","应该","env","到","python","subscription","数据类型","继续","-","要求","通信接口","存在","后","什么","ros2","三个","mask","随时","services","跟踪","如果","前者","callback","上","过程","状态","数据通信","所在","介绍","编写","程序实现","里程","本","sys","命令行","bgr2hsv","int","模型","有","incoming","会","等等","访问","各种","return","转圈","宕机","回想","化成","wait","shutdown","面积","收到","周期性","解析","此时","数据","变成","时","objectx","比如","某些","并不知道","颜色","类","usb","看到","getobjectposition","感器","array","}","logger","255","sec","之为","课程","180","常见","of","思考题","里程计","command","第一","案例","发","浏览","没有","岂","满足","服务器发送","关闭","下","service","好像","称之为","objecty","操作","程序","5","答","上限","cv2","org","简称","二个","越快越好","已经","target","坐标","自定","50","打印","通用","适合","一样","得到","sum","都","continue","一对","查询","args","需求","核心","正常","上述","这个","将","的","成为","传递","终端","not","最新","cvtcolor","(","setup","节点","加入","result","图像","无法","列表","=","界面","类型","机器人","objectclient","invalid","数据通","之前","+","位置","二","服务器","所以","图像处理","发送","法器","点画","tutorials","时候","server","绝大","send","（","后续","发布者","'","exception","两个","object","域名","那有","还有","已","ok","也","第二个","r","指令","msgs","cnt","高","古月","一","接收","编程","绝大部分",">","某个","命令","detect","bin","噪声","drawcontours","通过","docs","每","去除","waiting","两种","!","这么","上层","]","日志","findcontours",",","开始","转换","是否","$","destroy","当","create","xy","识别","two","“","failed","网络","销毁","）","en","和","imshow","接下来","once","提示","150","inrange","了","作者","w","bgr","让","，","position","提供","_","自定义","话题","循环","要",".","居","adder","转化成","控制","示例","if","circle","软硬","进行","上角","出现","imagesubscriber","”","\\","订阅","to","waitkey","通信模型","选项","listener","humble","客户","传输","显示","同样","接口","定义","大部分","点","—","1","h","文件","配置","合理","另外","10","第一个","链接","addtwoints","需要","返回","物体","了解","用于","进入","py","计算","add","简单","流程","如下","库","附近","我们","对","但是","有所","更","开发","应用","初始化","时间","不是","跟随","相机","在生活中","hsv","信息","receiving","频率","还是","下来","是","原理","使用","adderclient","机器","sub","针对","com","www","及","usr","可能","true","x","client","处理","hierarchy","然后","不","有点","super","很","设置","/","反应","timeout","向","ints","async","response","目标","srv","exe","data","{","main","__","请求","现在","future","run","；","bridge","认为",")","越快","硬件","场景","在","集成","call","范围","一种","approx","设计","就要","传递数据","同步","#","发给","为","rclpy","不知","方法","互相","upper","msg","标准","初始","成功","拿到","chain","sensor","y","python3","来看","不同","执行","<","软硬件","1.0","cv","try","提到","具体","太小","[","np","多个","相比","多","加法器","想要","*","@","按照","cs","根据","形式","init","经常","判断","一个","机制","again","而是","加法","很多","红色"],"title":"服务","title_tokens":["服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_1","text":"话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。","text_tokens":["者","我们","讲","常用"," ","收到","异步","可以","传输","知道","答","数据","你","效果","，","ros","学习","之间","消息","—","话题","类似","通信","是否","多个","使用","。","发布者","准确","这种","另外","一起","一种","发布","服务","将","的","单向","我","本","机制","同步","实现","问","订阅","节点","方法","无法"],"title":"服务","title_tokens":["服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_2","text":"在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。","text_tokens":["通信模型"," ","答","传输","希望","反馈","一样","得到","周期","查询","一直","这种","另外","并不需要","有所不同","这个","需要","的","成为","最新","物体","节点","图像","附近","机器人","并","我们","图像识别","对","有所","之前","更","可以","应用","位置","跟随","相机","信息","发送","频率","时候","是","通信","使用","。","机器","服务","其中","单向","然后","高","到","驱动","继续","通过","目标","ros","这么","请求","上层","识别","在","发布","发给","模型","和","了","这样","此时","数据","不同","你","变成","，","比如","话题","中","运动","按照","尽快","形式","我","课程","一个","机制","应答","或者","而是","实现","问","订阅","发","service","好像","红色"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_3","text":"从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。","text_tokens":["/","我们","向"," ","就","某个","答","客户","客户端","收到","此时","来看","你","简称","数据","通过","就是","服务器","网页","在生活中","，","信息","发送","页面","请求","务器","比如","某些","反馈","时候","具体","从","叫做","通信","电脑","。","浏览器","这种","针对","在","上","服务器端","域名","服务","cs","需要","的","形式","我","进行","生活","经常","常见","返回","机制","应答","或者","为","也","实现","问","模型","处理","之后","浏览","会","展现","各种","服务器发送","很","操作","网站","并"],"title":"客户端/服务器模型","title_tokens":["/","务器","模型","客户","客户端","服务","服务器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_4","text":"这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。","text_tokens":["反应","我们","半天","了","客户","客户端","可以","要求","你","通过","越快越好","服务器","所以","，","信息","务器","话题","中","是","通信","相比","不好","。","一直","转圈圈","越快","浏览器","在","状态","过程","服务器端","网络","服务","这个","圈圈","的","可能","之为","判断","那有","假设","同步","应答","或者","越好","也","一般","没有","浏览","转圈","宕机","称之为","到","接收"],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_5","text":"比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。","text_tokens":["通信模型","但","但是","网站","可以","客户","客户端","同样","每","服务器","所以","，","存在","比如","务器","唯一","一样","中","是","都","通信","多个","居","看到","。","服务器端","服务","这个","的","一个","模型","人","不","没有","访问","大家","古月","完全","界面","并"],"title":"一对多通信","title_tokens":["一对","多","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_6","text":"和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。","text_tokens":["我们"," ","了","命令","这些","数据","给","位置","变成","srv","，","坐标","ros","定义","请求","比如","反馈","消息","话题","还是","一样","中","是","类似","通信","要",".","文件","苹果","使用","后续","。","核心","在","两个","介绍","服务","的","传递","传递数据","还有","一个","也","会","和","部分","大家","方法","msg","标准"],"title":"服务接口","title_tokens":["接口","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_7","text":"大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。","text_tokens":["啦"," ","客户","客户端","官方","反馈","得到","从","服务器端","成","出去","这个","需要","的","器","将","了解","求和","之后","节点","计算","add","简单","大家","封装","加数","并","我们","对","代码","可以","给","服务器","发送","务器","下来","还是","是","通信","例程","。","针对","两个","服务","功能","也","应该","ints","通过","求解","ros","请求","后","现在","基本","开始","当","相对","two","“","编写","就要","有","接下","接下来","就","了","收到","数据","时","，","提供","_","想要","进行","一个","应答","”","实现","结果","加法"],"title":"案例一：加法求解器","title_tokens":["案例","加法","器","一","求解","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_8","text":"我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3","text_tokens":["我们"," ","代码","客户","客户端","二个","并且","数据","启动","，","提供","发送","传入","请求","_","ros2","是","server","原理","run","$","例程","等待","。","adder","3","第一个","一起","两个","2","服务","这个","功能","的","第二","终端","一个","求和","client","实现","第二个","第一","节点","服务端","结果","下","如下","service","看","运行","learning","操作","加数","并"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_9","text":"我们来看下客户端的实现方法。","text_tokens":["我们","实现","客户","客户端","来看","方法","下","的","。"],"title":"客户端代码解析","title_tokens":["代码","客户","客户端","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_10","text":"learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], },","text_tokens":["完成","选项","guyuehome"," ","b","客户","客户端","info","知道","启动","接口","自定","定义","点","打印","反馈","1","sum","函数","创建","文件","args","\"","配置","父类","正常","addtwoints","服务器端","将","的","not","...","需要","入口","8","a","(","setup","接口类型","py","节点","计算","add","加入","done","result","from","如下","库","=","argv","加数","类型","2","并","异步","代码","初始化","+","服务器","d",":","interface","发送","def","none","法器","信息","务器","entry","coding","说明","while","（","send","break","adderclient","'","com","www","两个","exception","usr","输出","服务","功能","ok","client","import","处理","r","包","available","古月","super","for","points","class","env","运行","设置","编译","python","打开","接收","/","timeout","ints","-","bin","async","get","response","%","spin","waiting","srv","console","!","{","main","__","请求","后","ros2","]","future",",","是否","destroy","create",")","except","two","call","failed","编写","销毁","）","#","sys","request","rclpy","int","对象","once","learning","wait","shutdown","一次","self","初始","成功","作者","接口类","收到","python3","执行","数据","scripts","1.0","让","，","名","utf","_","自定义","try","类","name","循环","e",".","等待","[","居","adder","示例","加法器","系统","if","}","*","@","logger","else","进行","sec","init","方式","一个","as","of","again","node","关闭","加法","service","程序","：","打印输出"],"title":"程序实现","title_tokens":["实现","程序实现","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_11","text":"对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口","text_tokens":["我们","初始","对"," ","客户","客户端","初始化","数据","服务器","接口","，","发送","请求","务器","创建","等待","如果","想要","：","服务器端","进行","服务","销毁","一个","应答","实现","对象","节点","分析","流程","关闭","如下","以上","程序","编程","并"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_12","text":"至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。","text_tokens":["者","了","回调","时间","知道","数据","服务器","，","请求","务器","并不知道","话题","什么","函数","中","类似","通信","用到","。","至于","服务器端","服务","的","机制","出现","也","实现","订阅","不知","有点"],"title":"服务端代码解析","title_tokens":["代码","服务端","解析","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_13","text":"learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], },","text_tokens":["完成","选项","guyuehome"," ","b","info","、","知道","已经","接口","自定","定义","点","反馈","sum","函数","创建","文件","args","\"","配置","父类","addtwoints","将","的","需要","入口","求和","8","a","(","setup","接口类型","py","节点","add","计算","加入","from","如下","库","=","类型","并","n","对","回调","代码","初始化","+","服务器","d",":","interface","def","信息","none","法器","务器","entry","coding","server","说明","（","'","com","www","usr","输出","服务","功能","包","退出","处理","import","client","古月","super","points","class","env","设置","编译","python","打开","/","ints","-","bin","get","response","%","spin","console","srv","!","{","main","__","请求","后","ros2","日志","]",",","destroy","create","放到",")","two","callback","编写","销毁","）","#","request","rclpy","对象","incoming","提示","return","learning","shutdown","self","初始","作者","接口类","收到","python3","执行","数据","scripts","让","，","名","提供","utf","_","自定义","中","类","name","循环",".","等待","[","居","adder","示例","加法器","系统","}","*","@","logger","进行","init","应答","adderserver","主","\\","node","结果","关闭","加法","service","程序","："],"title":"程序实现","title_tokens":["实现","程序实现","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_14","text":"对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口","text_tokens":["我们","初始","向","对"," ","回调","客户","初始化","客户端","通过","服务器","接口","，","务器","反馈","函数","创建","如果","想要","：","服务器端","进行","服务","销毁","处","一个","应答","实现","对象","节点","分析","服务端","流程","结果","关闭","如下","以上","程序","编程","并"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_15","text":"好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。","text_tokens":["我们","啦","了","知道","不是","通过","位置","已经","目标","求解","，","提到","时候","通信","当","。","识别","合理","服务","需要","器","的","视觉","物体","机制","实现","更加","流程","岂","刚才","加法","下","好","回想"],"title":"案例二：机器视觉识别","title_tokens":["案例","二","视觉","机器","：","识别"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_16","text":"此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client","text_tokens":["我们","拿到"," ","就","了","客户","客户端","可以","此时","数据","并且","位置","启动","服务器","目标","相机","时","，","exe","提供","发送","当前","learning","请求","务器","_","ros2","三个","是","随时","准备","server","run","$","usb","；","当","运动","。","跟踪","机器","认为","识别","cam","上述","集成","object","发布","服务器端","服务","需要","的","根据","终端","视觉","一个","出现","机器人","client","有","订阅","node","对象","节点","会","然后","图像","service","分别","运行","一次","：","驱动"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_17","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], },","text_tokens":["完成","选项","guyuehome"," ","info","知道","target","接口","自定","定义","点","创建","文件","args","\"","配置","父类","需要","的","not","...","入口","8","(","setup","py","节点","加入","done","result","from","如下","库","=","并","objectclient","n","代码","初始化","位置","d",":","interface","def","none","entry","coding","server","说明","while","send","break","'","com","www","exception","object","usr","服务","功能","true","x","ok","client","import","r","包","available","古月","super","for","points","class","env","设置","编译","python","打开","/","timeout","-","bin","async","get","response","%","spin","waiting","目标","srv","console","!","{","main","__","请求","后","ros2","future","]",",","destroy","create",")","except","识别","call","failed","编写","销毁","#","request","rclpy","对象","once","learning","wait","shutdown","self","初始","作者","y","python3","scripts","1.0","让","，","position","utf","_","自定义","try","类","name","e",".","等待","[","居","getobjectposition","adder","示例","if","系统","}","*","@","logger","else","进行","sec","init","as","of","应答","again","\\","node","关闭","service","程序","："],"title":"客户端代码解析","title_tokens":["代码","客户","客户端","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_18","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], },","text_tokens":["waitkey","完成","选项","guyuehome"," ","listener","一些","5","info","上限","cv2","、","显示","知道","效果","已经","target","接口","自定","坐标","定义","50","video","点","反馈","1","得到","函数","h","二值化","从","创建","continue","文件","args","\"","配置","父类","中心","10","将","的","需要","入口","物体","8","cvtcolor","(","用于","raw","进入","setup","接口类型","py","节点","计算","加入","from","如下","图像","库","转化","=","类型","2","长度","者","in","n","invalid","对","并","回调","代码","初始化","队列","下限","color","+","服务器","d","hsv",":","图像处理","interface","def","none","信息","点画","务器","receiving","bgr8","entry","red","coding","server","说明","（","boundingrect","苹果","使用","list","勾勒","sub","contours","'","com","www","及","object","usr","输出","服务","功能","出来","左上","true","x","已","包","退出","import","数值","处理","0","阈值","hierarchy","msgs","cnt","client","lower","古月","像素","super","for","高","左上角","class","env","设置","编译","points","python","打开","/","subscription","宽","img","detect","-","bin","噪声","drawcontours","get","response","去除","%","spin","console","目标","srv","data","!","ros","{","main","__","请求","后","image","消息","findcontours","ros2","]","mask",",","日志","转换","destroy","create","bridge",")","xy","识别","callback","frame","范围","所在","编写","销毁","approx","90","）","#","request","bgr2hsv","numpy","rclpy","为","模型","int","对象","和","imshow","提示","互相","return","upper","learning","化成","msg","imgmsg","轮廓","150","shutdown","self","面积","inrange","初始","chain","作者","接口类","sensor","收到","y","python3","执行","数据","scripts","<","w","bgr","让","，","名","position","提供","cv","utf","objectx","_","自定义","话题","颜色","中","类","name","太小","与",".","np","[","居","循环","getobjectposition","转化成","等待","adder","示例","array","if","系统","*","@","128","shape","circle","logger","}","255","cvbridge","else","进行","opencv","init","180","上角","as","一个","imagesubscriber","command","\\","订阅","node","检测","主","关闭","retr","service","objecty","to","程序","：","红色"],"title":"服务端代码解析","title_tokens":["代码","服务端","解析","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_19","text":"服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求","text_tokens":["常用","数据类型"," ",">","命令","数据","<","data","发送","请求","_","type","ros2","name","$","list","call","服务","的","查看","#","类型","如下","service","列表","操作","："],"title":"服务命令行操作","title_tokens":["命令","命令行","操作","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_20","text":"话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。","text_tokens":[" ","控制指令","最为","传输","、","等","接口","自定","定义","大部分","通用","适合","后者","都","周期","繁杂","需求","这个","的","传感器","大部","图像","无法","类型","机器人","我们","常用","数据通","更","开发","应用","这些","位置","一问一答","是","时候","绝大","通信","。","机器","针对","服务","单向","视觉","指令","也","部分","高","到","数据类型","绝大部分","要求","通信接口","目标","两种","ros","同步性","类似","雷达","识别","前者","场景","硬件","在","过程","数据通信","设计","就要","里程","同步","获取","等等","和","方法","传感","比比","标准","了","周期性","不过","软硬件","数据","，","比如","自定义","话题","中","感器","控制","软硬","里程计","满足","比比皆是","很多"],"title":"思考题","title_tokens":["思考题","思考","考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_21","text":"https://docs.ros.org/en/ humble /Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["/","tutorials","en"," ","ros2","humble","-","docs","org","understanding",".","services","html","ros",":","https"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/","text":"通信接口 在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。 接口的定义 接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。 ROS通信接口 接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。 语言无关 为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。 标准接口 大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。 案例一：服务接口的定义与使用 了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。 接口定义 在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ... 程序调用 我们在代码中再来重点看下接口的使用方法。 客户端接口调用 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 服务端接口调用 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 案例二：话题接口的定义与使用 话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。 运行效果 现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub 接口定义 在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ... 程序调用 我们在代码中再来重点看下接口的使用方法。 发布者接口调用 learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 订阅者接口调用 learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 接口命令行操作 接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义 参考链接 https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["转","guyuehome","一些","最为","角度","客户端","启动","希望","video","关注","反馈","函数","直接","？","周期","创建","保证","\"","再","share","父类","准确","自己","中心","接口定义","约束","...","动作","typec","查看","种","8","接口类型","done","大家","像素点","from","看","转化","编译器","n","常用","代码","可以","三原","角速度","这些","队列","精髓","color","txt","package","学习","小海龟","参考","bgr8","电脑","说明","例程","break","list","勾勒","领域","contours","cam","有机","一句","服务","生活","第二","造","由","数值","里","0","减少","lower","中来","部分","像素","运行","class","以上","完全","图形化","每个","编译","打开","group","驱动","and","宽","img","海龟","get","%","就是","spin","ros","数据结构","最终","当前","包中","之间","image","消息","use","类似","研究","define","更为","except","有没有","如何","程序模块","frame","发布","线速度","90","request","关心","numpy","获取","两","人","action","对象","接下","learning","cmakelists","轮廓","imgmsg","一次","self","插头","就","接口类","这样","名","utf","自动","中","name","e","与","等待","三原色","运动","系统","128","shape","cvbridge","举个","的话","else","opencv","调用","as","应答","或者","详细","键盘","固定","实现","主","node","检测","服务端","结果","retr","concepts","好","分别","看上","位","主程序","：","完成","micro"," ","b","info","、","知道","并且","project","必须","等","效果","软件","每隔","建立","二值化","从","https","整型","布尔值","自言自语","一起","成","出去","广泛","入口","求和","a","raw","封装","语言","并","长度","者","in","讲","但","2","回调","publish","下限","给","换成","d","加","软件开发","interface",":","def","none","形状","务器","red","为了","64","coding","通信","用到","谁","while","却是","坐标值","boundingrect","苹果","。","匹配","只要","输出","小海","功能","出来","到底","单向","左上","视觉","包","中间","import","退出","阈值","webcam","available","重点","for","html","左上角","env","到","python","用来","subscription","继续","required","-","通信接口","旋转","体","表示","后","速度","什么","ros2","三个","mask","std","上边","相互","它","做成","数","字符","callback","上","过程","状态","所在","编写","rosidl","一边","bgr2hsv","命令行","高效","int","有","模型","等等","会","各种","return","---","化成","wait","shutdown","面积","show","收到","解析","此时","20","数据","目的","原色","时","别人","输入","像是","比如","objectx","自语","颜色","类","usb","看到","概念","getobjectposition","topic","输入输出","来","讲解","array","}","logger","255","sec","string","之为","课程","180","常见","理解","of","command","第一","案例","得","没有","关闭","下","service","objecty","称之为","随处","操作","exec","程序","由于","他们","5","第三个","上限","cv2","org","二个","想","about","安装","各个领域","已经","那","target","坐标","自定","反正","50","打印","bool","sum","呢","得到","都","三种","continue","查询","args","肯定","核心","正常","传输数据","这个","将","的","传递","not","关系","终端","cvtcolor","(","节点","result","图像","列表","depend","=","代码生成","类型","机器人","objectclient","invalid","摄像头","subscribernode","之前","内容","个人","位置","+","二","服务器","所以","图像处理","发送","tutorials","点画","find","时候","server","generate","send","（","件夹","后续","发布者","回到","'","可见","pub","exception","两个","object","build","member","还有","已","指令","也","r","第二个","ok","手机","分成","msgs","cnt","连接","古月","高","一","插座","编程",">","某个","packages","detect","命令","generators","度","bin","通过","噪声","drawcontours","每","去除","1s","waiting","!","findcontours","降低","]","添加","描述","一帧","开始",",","日志","转换","是否","$","destroy","create","int32","无论是","xy","识别","“","符合","像头","failed","objectposition","interfaces","销毁","）","路径","en","随处可见","值","和","imshow","看上去","接下来","once","提示","无论","150","inrange","看看","了","作者","标准接口","w","bgr","让","，","position","提供","对应","_","中有","才能","话题","自定义","循环","要","g",".","居","runtime","转化成","控制","示例","if","布尔","circle","30","轮子","结构","进行","上角","编写程序","组成","重要","”","imagesubscriber","\\","订阅","to","各个","waitkey","选项","listener","humble","客户","传输","显示","无关","接口","包装","几个","定义","—","例子","1","h","一下","文件","配置","工作","形象","形象化","衍生","另外","10","第一个","你来我往","不用","链接","需要","依赖","了解","物体","用于","进入","docs","py","计算","包含","如下","库","我们","不管","对","哪些","更","开发","应用","不是","初始化","这","相机","好奇","hsv","信息","区分","标值","方便","receiving","还是","调用函数","下来","是","publisher","模块","使用","机器","sub","com","www","及","32","usr","彼此","甚至","还","转到","可能","true","x","二维","涵盖","client","处理","hierarchy","便于","将要","第三","两者","很","super","文件夹","联系","/","交流","timeout","话","async","response","参数","目标","srv","data","exe","{","main","__","请求","现在","future","摄像","诞生","run","；","生成","bridge","关于",")","硬件","把","在","call","范围","一种","就行","设计","进度","approx","#","为","重复","rclpy","上去","什么样","方法","互相","upper","msg","字符串","标准","图形","初始","只有","chain","sensor","只","y","python3","不同","执行","<","1.0","cv","这里","c++","try","众多","具体","太小","single","np","[","多","主要","转到第","*","@","数组","default","根据","init","一个","机制","again","而是","xml","int64","回顾","找到","加法","以及","红色"],"title":"通信接口","title_tokens":["接口","通信接口","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_1","text":"在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。","text_tokens":["我们","交流"," ","更","可以","不是","内容","给","个人","通信接口","数据","这","就是","让","接口","ros","，","定义","学习","自语","—","什么","话题","还是","呢","中","是","？","为了","都","用到","通信","多","后续","概念","。","系统","在","自言自语","两个","你来我往","结构","服务","甚至","的","传递","动作","一个","理解","或者","而是","重要","人","将要","会","大家","好","无论","标准","并"],"title":"通信接口","title_tokens":["接口","通信接口","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_2","text":"接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。","text_tokens":["micro","他们"," ","b","最为","一些","传输","、","知道","并且","必须","安装","各个领域","等","那","接口","包装","反正","软件","定义","关注","建立","反馈","例子","呢","函数","直接","？","都","肯定","配置","正常","工作","形象","形象化","准确","自己","一起","不用","传输数据","约束","这个","的","广泛","关系","typec","节点","大家","像素点","图像","随处","机器人","我们","讲","摄像头","常用","但","开发","更","应用","代码","三原","角速度","这","内容","这些","可以","给","精髓","所以","加","相机","软件开发","形状","还是","调用函数","是","时候","通信","电脑","模块","却是","使用","。","机器","领域","回到","匹配","可见","只要","两个","输出","彼此","生活","服务","一句","出来","由","也","r","指令","包","手机","连接","像素","两者","很","插座","运行","完全","图形化","到","每个","编程","驱动","话","-","通过","每","通信接口","就是","参数","ros","速度","什么","摄像","类似","开始","诞生","相互","更为","；","关于","它","无论是","如何","硬件","把","在","上","程序模块","符合","一种","像头","发布","编写","线速度","所在","关心","高效","有","随处可见","等等","值","和","上去","看上去","什么样","无论","一次","图形","标准","插头","只有","就","了","解析","数据","目的","原色","时","让","，","输入","提供","像是","比如","才能","话题","中","具体","要","g","usb","多","主要","三原色","概念","运动","控制","输入输出","系统","结构","举个","进行","之为","调用","常见","一个","机制","编写程序","组成","键盘","固定","实现","得","结果","称之为","好","看上","各个","主程序","程序"],"title":"接口的定义","title_tokens":["接口","的","定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#ros","text":"接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。","text_tokens":["我们","常用"," ","代码","可以","、","这","通过","每","就是","别人","目标","让","接口","ros","，","定义","之间","方便","才能","话题","降低","联系","是","通信","三种","使用","。","核心","有机","一起","轮子","一种","服务","的","动作","依赖","种","造","机制","重复","也","有","便于","减少","节点","各种","分别","到","程序"],"title":"ROS通信接口","title_tokens":["接口","ros","通信接口","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_3","text":"为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。","text_tokens":["转","完成"," ","b","传输","、","知道","等","无关","接口","坐标","定义","每隔","反馈","bool","sum","一下","周期","文件","保证","整型","布尔值","另外","10","这个","将","的","需要","动作","求和","a","节点","包含","语言","机器人","我们","之前","这些","可以","区分","学习","小海龟","还是","是","为了","64","通信","使用","。","机器","两个","32","小海","服务","功能","还","转到","单向","x","还有","二维","中间","数值","里","分成","部分","编译","python","到","编程","用来","海龟","度","通过","每","通信接口","1s","srv","目标","旋转","体","ros","数据结构","最终","当前","请求","表示","什么","三个","描述","一帧","开始","是否","生成","int32","做成","数","在","状态","过程","“","一种","就行","设计","进度","90","一边","两","action","会","和","---","msg","了","只","y","此时","不同","数据","20","让","，","这里","比如","自动","对应","c++","话题","中",".","运动","看到","转到第","布尔","数组","30","结构","一个","机制","应答","”","int64","结果","加法","分别","位","由于"],"title":"语言无关","title_tokens":["语言","无关"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_4","text":"大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。","text_tokens":["我们","看看","了","哪些","可以","给","安装","接口","好奇","ros","，","几个","定义","呢","众多","中","？","文件","件夹","。","打开","share","系统","在","可能","到底","的","路径","涵盖","找到","大家","文件夹","标准"],"title":"标准接口","title_tokens":["接口","标准接口","标准"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_5","text":"了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。","text_tokens":["我们"," ","角度","了","代码","之前","第三个","这样","就","二个","可以","收到","通信接口","位置","目标","接口","相机","，","提供","定义","发送","请求","话题","下来","三个","中","是","时候","研究","通信","从","例程","查询","使用","概念","。","机器","再","来","讲解","如何","识别","在","第一个","发布","编写","服务","第二","需要","的","进行","课程","视觉","了解","一个","实现","有","第一","第二个","回顾","对象","节点","服务端","接下","接下来","第三","下","以及","图像","封装","驱动"],"title":"案例一：服务接口的定义与使用","title_tokens":["案例","定义","服务","与","的","一","使用","接口","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_6","text":"在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ...","text_tokens":["完成","选项"," ","、","project","接口","坐标","定义","反馈","bool","文件","\"","配置","接口定义","这个","需要","的","...","依赖","(","编译器","depend","代码生成","语言","我们","代码","位置","txt","package","interface","find","是","通信","generate","例程","使用","。","两个","build","服务","功能","还","member","true","x","指令","包","也","部分","编译","group","/","required",">","packages","generators","get","srv","目标","{","表示","后","添加","上边","$","生成","int32",")","在","过程","interfaces","rosidl","#","为","获取","会","---","learning","cmakelists","一次","就","了","y","不同","<","让","，","自动","_","中有","中","name",".","runtime","getobjectposition","}","default","的话","根据","of","xml","服务端","exec","："],"title":"接口定义","title_tokens":["接口","接口定义","定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_7","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["我们","在","来","代码","中","重点","方法","下","的","看","使用","。","接口","再"],"title":"程序调用","title_tokens":["程序","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_8","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["guyuehome"," ","info","target","接口","自定","定义","创建","args","\"","父类","的","not","...","8","(","py","节点","done","result","from","库","=","并","objectclient","n","初始化","位置","d",":","interface","def","none","coding","说明","while","send","break","'","com","www","exception","object","usr","服务","true","x","ok","client","import","r","available","古月","super","for","class","env","python","/","timeout","-","bin","async","get","response","%","spin","waiting","目标","srv","!","main","__","请求","ros2","future",",","destroy","create",")","except","识别","call","failed","销毁","#","request","rclpy","对象","once","learning","wait","shutdown","self","初始","作者","y","python3","1.0","，","position","utf","_","自定义","try","类","name","e",".","等待","居","getobjectposition","示例","if","*","@","logger","else","进行","sec","init","as","of","应答","again","\\","node","关闭","service"],"title":"客户端接口调用","title_tokens":["接口","客户","客户端","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_9","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["waitkey","guyuehome"," ","listener","一些","5","info","上限","cv2","、","显示","效果","已经","target","接口","自定","坐标","定义","50","video","反馈","1","得到","函数","h","二值化","从","创建","continue","args","\"","父类","中心","10","将","的","入口","物体","8","cvtcolor","(","用于","raw","进入","接口类型","py","节点","计算","from","图像","库","转化","=","类型","2","长度","者","in","n","invalid","对","并","回调","初始化","队列","下限","color","+","服务器","d","hsv",":","图像处理","interface","def","none","信息","点画","务器","receiving","bgr8","red","coding","server","说明","（","boundingrect","苹果","使用","list","勾勒","sub","contours","'","com","www","及","object","usr","输出","服务","出来","左上","true","x","已","退出","import","数值","处理","0","阈值","hierarchy","msgs","cnt","lower","古月","像素","super","for","高","左上角","class","env","python","/","subscription","宽","img","detect","-","bin","噪声","drawcontours","get","response","去除","%","spin","目标","srv","data","!","ros","main","__","请求","后","image","消息","findcontours","ros2","]","mask",",","日志","转换","destroy","create","bridge",")","xy","识别","callback","frame","范围","所在","销毁","approx","90","）","#","request","bgr2hsv","numpy","rclpy","为","模型","int","对象","和","imshow","提示","互相","return","upper","learning","化成","msg","imgmsg","轮廓","150","shutdown","self","面积","inrange","初始","chain","作者","接口类","sensor","收到","y","python3","执行","数据","<","w","bgr","，","名","position","提供","cv","utf","objectx","_","自定义","话题","颜色","中","类","name","太小","与",".","np","[","居","循环","getobjectposition","转化成","等待","示例","array","if","*","@","128","shape","circle","logger","255","cvbridge","else","进行","opencv","init","180","上角","as","一个","imagesubscriber","command","\\","订阅","node","检测","主","关闭","retr","service","objecty","to","红色"],"title":"服务端接口调用","title_tokens":["接口","调用","服务端","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_10","text":"话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。","text_tokens":["我们","不管","继续","之前","想","通信接口","位置","换成","目标","接口","，","定义","话题","是","类似","通信","从","周期","。","机器","有没有","识别","衍生","把","发布","服务","需要","的","视觉","也","案例","人","没有","中来"],"title":"案例二：话题接口的定义与使用","title_tokens":["案例","话题","定义","与","的","二","使用","接口","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_11","text":"现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub","text_tokens":["我们","驱动"," ","就","第三个","此时","二个","数据","位置","启动","目标","exe","相机","，","ros","以上","希望","定义","learning","interface","打印","image","消息","_","现在","话题","三个","中","是","谁","ros2","run","$","usb","；","使用","。","topic","来","sub","识别","cam","pub","第一个","object","发布","成","功能","第二","将","的","这个","出去","需要","视觉","终端","一个","第二个","第一","订阅","node","节点","会","第三","图像","运行","分别","封装","到","标准","：","并"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_12","text":"在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ...","text_tokens":["完成","选项"," ","、","project","接口","坐标","定义","\"","配置","接口定义","这个","需要","的","...","(","编译器","语言","我们","代码","内容","位置","txt","package","interface","标值","find","是","坐标值","通信","generate","例程","使用","。","服务","功能","还","x","包","编译","/","required","generators","目标","{","表示","后","消息","描述","$","生成","int32",")","在","过程","objectposition","interfaces","rosidl","#","learning","msg","cmakelists","了","y","不同","让","，","自动","_","话题","中","name",".","}","default","进行","根据","一个","："],"title":"接口定义","title_tokens":["接口","接口定义","定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_13","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["我们","在","来","代码","中","重点","方法","下","的","看","使用","。","接口","再"],"title":"程序调用","title_tokens":["程序","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_14","text":"learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["waitkey","guyuehome"," ","listener","一些","5","info","上限","cv2","、","显示","效果","接口","自定","坐标","定义","50","video","1","得到","函数","h","二值化","从","创建","continue","args","\"","父类","中心","10","将","的","入口","8","cvtcolor","(","用于","raw","进入","py","节点","计算","from","图像","库","转化","=","类型","2","长度","者","in","并","回调","publish","初始化","队列","下限","color","位置","+","hsv","interface",":","图像处理","def","none","信息","点画","receiving","bgr8","publisher","red","coding","说明","（","boundingrect","苹果","使用","list","勾勒","sub","发布者","contours","'","pub","com","www","及","object","usr","输出","出来","左上","x","已","退出","import","处理","数值","0","阈值","hierarchy","msgs","cnt","webcam","lower","古月","像素","super","for","高","左上角","class","env","python","/","subscription","宽","img","detect","-","bin","噪声","drawcontours","get","去除","spin","目标","data","!","ros","main","__","后","image","消息","findcontours","ros2","]","mask",",","日志","转换","destroy","create","bridge",")","xy","callback","frame","范围","发布","所在","objectposition","销毁","approx","90","）","#","bgr2hsv","numpy","rclpy","为","模型","int","对象","和","imshow","提示","互相","upper","learning","化成","msg","imgmsg","轮廓","150","shutdown","self","面积","inrange","初始","chain","作者","sensor","y","python3","<","w","bgr","，","名","position","cv","utf","objectx","_","自定义","话题","颜色","中","类","name","太小","与",".","np","[","居","循环","topic","转化成","等待","示例","array","if","*","@","128","shape","circle","logger","255","cvbridge","进行","opencv","init","180","上角","as","一个","imagesubscriber","主","订阅","node","检测","关闭","retr","objecty","to","红色"],"title":"发布者接口调用","title_tokens":["接口","发布者","发布","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_15","text":"learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["guyuehome"," ","listener","info","、","target","接口","自定","定义","函数","创建","args","\"","父类","10","的","入口","8","(","py","节点","from","库","=","类型","并","长度","者","subscribernode","对","回调","初始化","队列","位置","d","interface",":","def","信息","none","coding","说明","（","sub","'","com","www","object","usr","输出","x","退出","import","处理","msgs","古月","super","class","env","python","/","subscription","-","bin","get","%","spin","目标","!","main","__","后","消息","ros2","std","日志",",","destroy","create",")","字符","callback","objectposition","销毁","#","rclpy","对象","提示","learning","msg","shutdown","字符串","self","初始","作者","收到","y","python3","执行","数据","，","名","position","utf","_","自定义","话题","类","name","循环",".","等待","居","topic","示例","*","@","logger","进行","string","init","一个","主","\\","订阅","node","关闭"],"title":"订阅者接口调用","title_tokens":["接口","者","订阅","调用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_16","text":"接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义","text_tokens":["常用"," ",">","某个","命令","<","接口","package","interface","定义","包中","_","ros2","name","$","list","系统","：","接口定义","功能","的","查看","#","详细","如下","列表","操作","show"],"title":"接口命令行操作","title_tokens":["接口","命令","命令行","操作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_17","text":"https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["/"," ","humble","-","docs","org","about","package","ros",":","interface","tutorials","use","single",".","define","https","interfaces","en","concepts","html","and"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/","text":"动作 机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。 通信模型 举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。 客户端/服务器模型 动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。 一对多通信 和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。 同步通信 既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。 由服务和话题合成 大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。 案例一：小海龟的动作 我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback 案例二：机器人画圆 如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。 运行效果 启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。 接口定义 例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是 动作的目标 ，enable为true时，表示开始运动； 第二块是 动作的执行结果 ，finish为true，表示动作执行完成； 第三块是 动作的周期反馈 ，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ... 通信模型 通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。 服务端代码解析 learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], }, 客户端代码解析 learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], }, 动作命令行操作 动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["转","guyuehome","角度","客户端","启动","希望","反馈","一段","又","函数","模拟","直接","？","周期","创建","\"","行为","再","父类","这种","接口定义","...","动作","查看","假设","8","接口类型","分析","done","大家","from","看","编译器","圈","常用","这些","可以","代码","异步","合成","txt","只能","package","小海龟","参考","type","一点一点","说明","例程","list","导航","movecircle","某一","服务","第二","发送给","由","0","既然","部分","theta","运行","class","编译","打开","海龟","使","get","%","不仅仅","就是","spin","enable","console","ros","最终","当前","accepted","取消","没错","消息","仔细","类似","更为","有没有","相对","如何","发布","先","actionclient","获取","action","一块","对象","接下","learning","结束","cmakelists","一次","self","state","就","试一试","能","接口类","这样","scripts","第二块","名","utf","自动","中","根本","name","多少度","等待","运动","系统","当中","实际","写","understanding","举个","调用","方式","二块","键盘","实现","达到","竟然","主","node","服务端","结果","好","分别","背后","：","rotateabsolute","完成","三块"," ","info","、","知道","project","等","效果","每隔","从","0.5","https","动图","姿态","一起","服务器端","整个","入口","告诉","基于","其实","之后","封装","语言","并","者","in","但","某","回调","publish","d",":","interface","def","none","务器","entry","毕竟","coding","智能","通信","用到","。","goal","复杂","送货","输出","小海","功能","到底","包","退出","import","for","points","html","第一块","env","到","python","数据类型","required","-","通信接口","加深","旋转","absolute","后","表示","以下","什么","ros2","三个","负责","随时","上边","一套","还会","如果","callback","上","过程","状态","介绍","应带","特性","编写","rosidl","一边","命令行","同时","模型","有","会","return","转圈","---","1.57","wait","所处","shutdown","收到","解析","20","数据","目的","时","比如","类","看到","概念","来","起来","}","logger","不会","仿真","理解","顺利","i","第一","案例","满足","得","没有","画圆","关闭","下","臂","操作","拒绝","干什么","程序","handle","org","想","那","坐标","自定","一样","bool","呢","眼前","都","一对","args","肯定","需求","是不是","feedback","就此结束","这个","的","not","终端","(","setup","节点","含义","加入","控","result","列表","=","类型","机器人","rejected","之前","较长","位置","二","服务器","rotate","发送","tutorials","find","管理","server","generate","send","（","360","发布者","'","被","两个","像","哪里","名字","指令","也","ok","turtle1","一点","古月","actions","一","合适","编程","接收","actionserver",">","某个","命令","generators","度","bin","通过","docs","每","1s","!","这么","]","日志","请",",","开始","$","是否","destroy","当","第三块","int32","识别","送给","抓取","interfaces","销毁","转个","）","圆周运动","en","进度条","和","接下来","movecircleactionserver","了","作者","received","让","publishing","，","sleep","_","才能","话题","自定义","循环",".","居","真器","控制","仿真器","示例","if","circle","30","分拣","进行","完整","圆周","turtle","订阅","finish","通信模型","段时间","选项","humble","客户","一段时间","接口","定义","点","—","例子","一下","再用","文件","配置","仅仅","另外","movecircleactionclient","10","链接","需要","不仅","py","流程","add","简单","包含","--","读取","如下","库","秘密","我们","底层","对","但是","清楚","应用","不是","时间","初始化","这","move","信息","动","机械","隐藏","过","下来","是","原理","模块","使用","机器","就此","直到","针对","com","www","实时","usr","可能","常常","还","true","time","思路","其","client","处理","便于","不","第三","super","很","设置","/","处理函数","async","response","turtlesim","目标","data","{","main","发现","__","key","请求","现在","future","送餐","指定","run","；","生成",")","场景","把","在","一种","理","进度","同步","#","为","rclpy","moving","装","方法","拒绝执行","range","msg","标准","成功","初始","只有","execute","执行","python3","不同","<","遥控","具体","[","多个","多","相比","发出","*","teleop","@","按照","default","根据","init","一个","机制","多少","而是","succeed","应用层","虽然"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_1","text":"机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。","text_tokens":["我们","对"," ","就","某个","这些","可以","应用","、","不仅仅","就是","等","目标","那","目的","，","ros","这么","遥控","—","管理","中","是","送餐","智能","具体","通信","用到","从","运动","。","概念","机器","需求","行为","仅仅","识别","系统","场景","这种","另外","复杂","在","上","被","送货","一种","分拣","功能","这个","需要","的","常常","某一","动作","完整","进行","一个","不仅","机制","名字","理解","键盘","机器人","也","实现","便于","满足","会","含义","简单","流程","很","好","并"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_2","text":"举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。","text_tokens":["转","完成","段时间"," ","知道","、","一段时间","想","每隔","例子","反馈","一段","眼前","？","一下","肯定","行为","再","10","需要","的","动作","假设","告诉","之后","控","并","机器人","我们","圈","可以","时间","不是","这","信息","发送","是","一点一点","通信","使用","。","机器","360","直到","像","还","到底","哪里","指令","ok","不","一点","合适","到","命令","度","1s","旋转","当前","后","表示","取消","现在","随时","开始","更为","有没有","如果","把","在","过程","转个","进度","装","进度条","转圈","结束","就","了","这样","执行","20","让","，","比如","才能","根本","多少度","运动","发出","当中","30","举个","一个","多少","机制","得","没有"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_3","text":"动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。","text_tokens":[" ","就","收到","客户","客户端","执行","想","服务器","让","目标","，","坐标","信息","发送","当前","务器","动","机械","反馈","什么","又","后","结束","中","是","类似","开始","通信","周期","运动","当","使用","。","机器","控制","再","如果","就此","起来","导航","就此结束","抓取","状态","过程","姿态","服务器端","实时","服务","这个","可能","的","整个","动作","一个","一边","同时","也","模型","达到","之后","和","臂","所处","干什么","机器人"],"title":"客户端/服务器模型","title_tokens":["/","务器","模型","客户","客户端","服务","服务器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_4","text":"和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。","text_tokens":["完成","只有","但是","命令","客户","客户端","可以","执行","服务器","，","只能","发送","务器","一样","才能","毕竟","中","通信","都","多个","运动","。","机器","服务器端","服务","的","动作","先","一个","有","和","大家","下","机器人"],"title":"一对多通信","title_tokens":["一对","多","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_5","text":"既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。","text_tokens":["我们","之前","数据","通信接口","那","接口","，","定义","反馈","过","中","是","通信",".","文件","使用","。","过程","一种","介绍","进行","的","动作","同步","机制","也","有","action","既然"],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_6","text":"大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。","text_tokens":["者","底层"," ","收到","命令","客户","客户端","不是","应用","就是","目标","时","服务器","，","发现","发送","请求","务器","表示","没错","隐藏","反馈","话题","仔细","三个","是","上边","通信","模块","周期","当","运动","使用","。","还会","是不是","再","发布者","来","动图","过程","两个","一种","服务器端","发布","应带","服务","的","动作","调用","一个","机制","基于","也","竟然","有","其实","订阅","其","实现","会","和","大家","下","看","应用层","秘密"],"title":"由服务和话题合成","title_tokens":["由","话题","和","服务","合成"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_7","text":"我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback","text_tokens":["/","我们","rotateabsolute","对"," ","某","命令","海龟","可以","info","-","启动","加深","turtlesim","让","，","{","rotate","absolute",":","小海龟","key","_","以下","下来","ros2","指定","再用","$","run","运动","send","真器","。","概念","仿真器","使用","控制","\"","goal","feedback","}","teleop","按照","姿态","小海","的","动作","仿真","理解","turtle","turtle1","案例","node","action","接下","接下来","--","一","theta","1.57","到","："],"title":"案例一：小海龟的动作","title_tokens":["小海龟","案例","海龟","小海","的","一","动作","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_8","text":"如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。","text_tokens":["我们","圈","但"," ","就","试一试","代码","客户","客户端","通过","服务器","让","接口","，","希望","务器","话题","呢","下来","中","是","？","直接","请","通信","一套","使用","。","机器","来","如何","针对","不会","在","实际","过程","一起","服务器端","服务","特性","的","转个","动作","假设","一个","而是","基于","机器人","实现","有","和","接下","接下来","方法","好","封装","虽然","编程","并"],"title":"案例二：机器人画圆","title_tokens":["案例","画圆","二","机器","：","机器人"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_9","text":"启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。","text_tokens":["我们","完成"," ","就","命令","客户","客户端","可以","度","启动","每","目标","服务器","move","，","信息","最终","发送","learning","务器","_","反馈","ros2","下来","中","模拟","server","开始","一下","run","$","例程","原理","运动","看到","。","机器","示例","两个","30","服务器端","服务","并","这个","的","终端","动作","client","实现","action","之后","服务端","和","接下","分析","接下来","下","分别","运行","结束","背后","一次","：","机器人"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_10","text":"例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是 动作的目标 ，enable为true时，表示开始运动； 第二块是 动作的执行结果 ，finish为true，表示动作执行完成； 第三块是 动作的周期反馈 ，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ...","text_tokens":["finish","完成","三块","选项"," ","角度","project","接口","自定","定义","反馈","bool","周期","\"","配置","接口定义","需要","的","...","动作","(","包含","编译器","语言","机器人","并","我们","代码","不是","位置","txt","package","interface","find","是","generate","例程","使用","。","机器","movecircle","功能","第二","还","true","指令","包","部分","第三","第一块","编译","到","/","required","generators","通过","enable","目标","旋转","ros","{","当前","表示","后","三个","开始","是否","$","；","第三块","生成","int32",")","在","过程","interfaces","rosidl","#","为","action","一块","---","learning","cmakelists","标准","成功","state","执行","不同","第二块","时","让","，","自动","_","自定义","中","name",".","运动","}","进行","default","根据","二块","第一","结果","："],"title":"接口定义","title_tokens":["接口","接口定义","定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_11","text":"通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。","text_tokens":["我们","通信模型"," ","清楚","之前","代码","客户","客户端","这样","较长","就是","目标","服务器","，","信息","发送","务器","后","反馈","话题","下来","开始","通信","一下","周期","例程","相比","运动","。","控制","机器","相对","送给","起来","写","理","服务","并","的","动作","发送给","一个","思路","模型","分析","接下","和","接下来","一","运行","结束","程序","机器人"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_12","text":"learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["finish","完成","选项","guyuehome"," ","handle","角度","info","、","知道","接口","自定","定义","点","反馈","函数","从","0.5","创建","周期","文件","args","\"","配置","父类","feedback","需要","的","...","动作","入口","8","(","setup","接口类型","py","节点","之后","加入","result","from","如下","库","=","类型","并","in","回调","代码","publish","初始化","服务器","d","move",":","interface","def","信息","none","务器","entry","coding","server","说明","（","360","goal","'","com","www","usr","movecircle","服务","功能","true","time","包","退出","import","处理","0","古月","super","for","points","class","env","设置","编译","python","到","打开","/","处理函数","actionserver","-","bin","度","get","%","spin","console","目标","!","最终","{","main","当前","__","表示","后","消息","ros2","]","负责",",","destroy",")","callback","发布","编写","销毁","）","#","rclpy","圆周运动","moving","action","对象","movecircleactionserver","return","range","learning","msg","shutdown","self","初始","成功","state","execute","作者","接口类","收到","python3","执行","scripts","让","publishing","，","名","sleep","utf","_","自定义","类","name","循环",".","等待","[","居","运动","示例","系统","}","*","@","circle","logger","30","进行","init","圆周","一个","i","主","node","服务端","succeed","结果","关闭","程序","："],"title":"服务端代码解析","title_tokens":["代码","服务端","解析","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_13","text":"learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["finish","完成","选项","guyuehome"," ","handle","客户","客户端","、","info","知道","启动","接口","自定","希望","定义","点","反馈","函数","创建","周期","文件","args","\"","配置","父类","feedback","movecircleactionclient","服务器端","需要","的","not","动作","入口","8","(","setup","接口类型","py","节点","add","之后","加入","done","result","from","读取","如下","库","=","类型","机器人","并","rejected","回调","异步","代码","初始化","服务器","d","move",":","interface","def","发送","none","务器","entry","coding","server","说明","send","（","机器","goal","'","com","www","被","usr","movecircle","输出","服务","功能","true","包","client","import","处理","退出","古月","super","for","points","class","env","设置","编译","python","打开","接收","/","-","bin","使","async","get","response","%","spin","console","enable","目标","!","最终","{","main","accepted","__","请求","后","消息","ros2","future","日志",",","]","开始","destroy",")","如果","callback","编写","销毁","）","#","actionclient","为","rclpy","获取","圆周运动","action","对象","拒绝执行","return","learning","wait","msg","shutdown","self","初始","state","作者","接口类","能","收到","received","python3","执行","数据","scripts","时","让","，","名","utf","_","自定义","类","name","循环",".","等待","[","居","运动","示例","if","}","系统","*","@","circle","logger","进行","init","圆周","方式","一个","顺利","主","node","结果","关闭","拒绝","程序","："],"title":"客户端代码解析","title_tokens":["代码","客户","客户端","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_14","text":"动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求","text_tokens":["常用","数据类型"," ",">","命令","info","数据","<","data","发送","请求","_","type","ros2","name","$","send","list","goal","服务","的","动作","查看","#","类型","action","如下","列表","操作","："],"title":"动作命令行操作","title_tokens":["命令","命令行","操作","动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["/","tutorials","en","ros2","humble","-","docs","org","understanding","actions",".","html","ros",":","https"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/","text":"参数 话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。 通信模型 比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。 全局字典 在ROS系统中，参数是以 全局字典 的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。 可动态监控 在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。 案例一：小海龟例程中的参数 在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 启动两个终端，分别运行小海龟仿真器和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看参数列表 当前系统中有哪些参数呢？我们可以启动一个终端，并使用如下命令查询： $ ros2 param list 参数查询与修改 如果想要查询或者修改某个参数的值，可以在param命令后边跟get或者set子命令： $ ros2 param describe turtlesim background_b # 查看某个参数的描述信息 $ ros2 param get turtlesim background_b # 查询某个参数的值 $ ros2 param set turtlesim background_b 10 # 修改某个参数的值 参数文件保存与加载 一个一个查询/修改参数太麻烦了，不如试一试参数文件，ROS中的参数文件使用yaml格式，可以在param命令后边跟dump子命令，将某个节点的参数都保存到文件中，或者通过load命令一次性加载某个参数文件中的所有内容： $ ros2 param dump turtlesim >> turtlesim.yaml # 将某个节点的参数保存到参数文件中 $ ros2 param load turtlesim turtlesim.yaml # 一次性加载某一个文件中的所有参数 案例二：参数编程 接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。 运行效果 启动一个终端，先运行第一句指令，启动param_declare节点，终端中可以看到循环打印的日志信息，其中的“mbot”就是我们设置的一个参数值，参数名称是“robot_name”，通过命令行修改这个参数，看下终端中会发生什么？ $ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle 代码解析 我们来看下在代码中，如何声明、创建、修改一个参数的值。 learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], }, 案例三：机器视觉应用 参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。 运行效果 启动三个终端，分别运行： 相机驱动节点 视觉识别节点 修改红色阈值 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180 在启动的视觉识别节点中，我们故意将视觉识别中红色阈值的上限设置为0，如果不修改参数，将无法实现目标识别。 为了便于调整阈值，我们在节点中将红色阈值的限位修改为了ROS参数，通过命令行修改该参数的值，就可以实现视觉识别啦。 代码解析 我们来看下在视觉识别的代码中，是如何通过参数来设置阈值的。 learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["熟悉","guyuehome","一些","声明","所有","启动","video","关注","函数","？","创建","周期","保存","\"","再","父类","号","中心","动作","查看","8","new","大家","from","看","转化","常用","图像识别","这些","可以","代码","队列","合成","color","格式","小海龟","参考","bgr8","type","办法","说明","例程","一两句","list","勾勒","contours","cam","一句","服务","其中","发送给","三","由","数值","0","节","lower","部分","像素","运行","class","编译","load","打开","驱动","宽","img","海龟","区域","get","%","就是","spin","console","ros","当前","image","消息","类似","如何","robot","编码","frame","光线","90","先","numpy","配置文件","真实","获取","立刻","对象","接下","默认值","一两","learning","imgmsg","轮廓","一次","self","parameters","就","试一试","提高","scripts","那个","名","nodeb","utf","说干就干","中","name","与","等待","系统","美颜","128","shape","太","写","cvbridge","understanding","opencv","发生","方式","as","或者","键盘","实现","主","node","检测","retr","分别","中将","：","完成","第一句","啦"," ","问题","b","info","、","知道","效果","等","即可","么","二值化","从","叫做","不如","https","成","整个","入口","raw","分辨率","2","并","长度","者","in","某","回调","下限","yaml","d",":","s","def","none","体验","叫","entry","red","coding","为了","名称","通信","用到","boundingrect","两句","。","all","苹果","定时器","输出","小海","一次性","功能","出来","左上","视觉","其他","包","退出","import","阈值","hello","points","环境","for","左上角","html","env","到","python","subscription","继续","可","-","调整","存在","后","表示","什么","ros2","三个","mask","单位","变化","如果","callback","过程","所在","介绍","编写","特性","非常","本","命令行","bgr2hsv","int","模型","有","改变","等等","会","访问","化成","shutdown","面积","解析","数据","输入","比如","某些","颜色","类","usb","看到","来","起来","}","变量","logger","array","默认","255","string","180","仿真","理解","第一","案例","优化","键值","关闭","下","程序","5","上限","cv2","org","已经","坐标","50","打印","很大","一样","得到","呢","param","都","三种","continue","查询","args","定时","核心","高级","integer","不少","这个","参数值","的","将","终端","最新","全局变量","cvtcolor","(","setup","节点","含义","加入","图像","无法","列表","=","类型","机器人","大大提高","内容","+","二","每次","图像处理","发送","tutorials","点画","共享","时候","（","'","监控","两个","后边","object","像","实现目标","已","比较简单","指令","也","msgs","cnt","端口","连接","古月","高","一","编程","形态",">","某个","命令","detect","bin","度","噪声","通过","drawcontours","docs","去除","set","!","findcontours","日志","]","描述",",","开始","传输方式","故意","转换","是否","$","destroy","create","xy","识别","送给","nodea","挺","“","销毁","）","en","值","和","imshow","作用","接下来","提示","declare","150","辨率","inrange","了","作者","条","w","bgr","让","，","提供","以","_","中有","话题","提炼","循环","从而","易用",".","居","真器","转化成","仿真器","控制","示例","if","circle","考虑","该","进行","上角","曝光","turtle","组成","”","imagesubscriber","订阅","to","重新","waitkey","通信模型","选项","listener","humble","传输","显示","接口","几个","点","动态","修改","—","1","h","一下","文件","配置","子","麻烦","全局","10","分辨","链接","需要","了解","物体","哪个","用于","进入","py","计算","简单","丰富","读取","如下","库","我们","对","大大","清楚","哪些","字典","初始化","应用","不是","这","限位","相机","hsv","信息","receiving","下来","是","dump","使用","机器","敏感","sub","com","www","及","usr","可能","还","秒","x","键和值","处理","hierarchy","便于","不","然后","super","设置","mbot","/","参数","turtlesim","value","exe","目标","data","{","main","__","key","比较","影响","run","指定","background","bridge",")","把","在","滑动","范围","一种","parameter","approx","就要","跟","#","为","rclpy","方法","互相","upper","msg","初始","chain","sensor","y","执行","来看","不同","python3","<","易用性","cv","c++","太小","参数设置","[","np","多个","timer","想要","teleop","*","@","输入框","init","parameternode","加载","多少","机制","一个","describe","很多","红色"],"title":"参数","title_tokens":["参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_1","text":"话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。","text_tokens":["我们","常用"," ","清楚","字典","可以","传输","、","知道","这","数据","参数","已经","，","ros","c++","某些","—","共享","话题","中","是","类似","传输方式","通信","三种","是否","多个","。","机器","再","来","系统","变量","全局","在","一种","介绍","服务","的","动作","了解","本","机制","方式","全局变量","便于","不","节点","节","大家","运行","程序","编程","机器人"],"title":"参数","title_tokens":["参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_2","text":"比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。","text_tokens":[" ","问题","一些","效果","关注","很大","一样","都","文件","配置","核心","分辨","需要","的","整个","哪个","节点","分辨率","图像","我们","图像识别","这些","可以","这","相机","格式","时候","是","使用","。","机器","功能","像","视觉","也","阈值","端口","部分","连接","设置","到","驱动","度","通过","区域","参数","就是","后","什么","影响","是否","识别","nodea","在","编码","过程","滑动","配置文件","有","改变","等等","会","和","作用","面积","辨率","就","执行","不同","条","那个","，","输入","nodeb","比如","中","参数设置","usb","美颜","考虑","输入框","进行","曝光","多少","或者","分别","很多","程序"],"title":"通信模型","title_tokens":["模型","通信模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_3","text":"在ROS系统中，参数是以 全局字典 的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。","text_tokens":["我们","形态"," ","就","了","字典","可以","合成","参数","就是","等","即可","ros","，","名","存在","以","叫","什么","一样","中","是","？","时候","名称","叫做","使用","。","号","系统","在","全局","后边","像","参数值","的","这个","跟","键和值","理解","一个","或者","组成","由","真实","数值","也","为","有","然后","和","访问","键值","编程"],"title":"全局字典","title_tokens":["字典","全局"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_4","text":"在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。","text_tokens":["某","对"," ","了","可以","知道","这","参数","，","比如","修改","共享","ros2","中","都","办法","从而","用到","。","如果","在","高级","进行","特性","可能","的","非常","最新","其他","一个","也","有","获取","数值","立刻","节点","会","访问","丰富","大家","编程"],"title":"可动态监控","title_tokens":["监控","可","动态"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_5","text":"在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 启动两个终端，分别运行小海龟仿真器和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["我们","熟悉"," ","了","命令","海龟","通过","启动","参数","turtlesim","，","提供","小海龟","key","_","ros2","中","run","$","例程","真器","使用","。","仿真器","控制","起来","teleop","在","两个","小海","不少","这个","的","终端","仿真","命令行","turtle","键盘","也","node","节点","含义","和","方法","下","一","分别","运行","："],"title":"案例一：小海龟例程中的参数","title_tokens":["小海龟","案例","海龟","中","小海","例程","一","的","参数","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_6","text":"当前系统中有哪些参数呢？我们可以启动一个终端，并使用如下命令查询： $ ros2 param list","text_tokens":["我们"," ","哪些","命令","可以","启动","参数","，","当前","中有","呢","ros2","param","？","$","查询","使用","list","系统","终端","一个","如下","：","并"],"title":"查看参数列表","title_tokens":["参数","列表","查看"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_7","text":"如果想要查询或者修改某个参数的值，可以在param命令后边跟get或者set子命令： $ ros2 param describe turtlesim background_b # 查看某个参数的描述信息 $ ros2 param get turtlesim background_b # 查询某个参数的值 $ ros2 param set turtlesim background_b 10 # 修改某个参数的值","text_tokens":[" ","b","某个","命令","可以","get","参数","turtlesim","set","，","信息","修改","_","ros2","param","描述","$","查询","background","如果","子","想要","在","10","后边","的","跟","查看","#","或者","describe","值","："],"title":"参数查询与修改","title_tokens":["与","参数","修改","查询"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_8","text":"一个一个查询/修改参数太麻烦了，不如试一试参数文件，ROS中的参数文件使用yaml格式，可以在param命令后边跟dump子命令，将某个节点的参数都保存到文件中，或者通过load命令一次性加载某个参数文件中的所有内容： $ ros2 param dump turtlesim >> turtlesim.yaml # 将某个节点的参数保存到参数文件中 $ ros2 param load turtlesim turtlesim.yaml # 一次性加载某一个文件中的所有参数","text_tokens":["/","某"," ","试一试","了","命令","可以","某个",">","通过","内容","yaml","所有","参数","turtlesim","ros","，","格式","修改","ros2","param","中","都","dump","$","文件","保存",".","查询","不如","使用","子","麻烦","在","太","后边","一次性","将","的","跟","加载","一个","#","或者","节点","到","load","一次","："],"title":"参数文件保存与加载","title_tokens":["与","文件","保存","参数","加载"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_9","text":"接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。","text_tokens":["我们","就","了","可以","这","参数","，","几个","比较","体验","下来","函数","中","开始","都","一下","一两句","两句","使用","。","来","在","写","的","就要","先","比较简单","实现","接下","和","简单","接下来","读取","一两","方法","设置","程序"],"title":"案例二：参数编程","title_tokens":["案例","：","参数","二","编程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_10","text":"启动一个终端，先运行第一句指令，启动param_declare节点，终端中可以看到循环打印的日志信息，其中的“mbot”就是我们设置的一个参数值，参数名称是“robot_name”，通过命令行修改这个参数，看下终端中会发生什么？ $ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle","text_tokens":["我们","第一句"," ","命令","可以","通过","设置","启动","参数","就是","set","，","信息","打印","_","修改","什么","日志","param","中","是","？","ros2","循环","名称","name","$","run","看到","robot","“","一句","这个","参数值","的","发生","终端","其中","parameter","先","一个","命令行","turtle","指令","”","数值","第一","节点","会","下","看","运行","learning","declare","mbot"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_11","text":"我们来看下在代码中，如何声明、创建、修改一个参数的值。 learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], },","text_tokens":["完成","选项","guyuehome"," ","声明","info","、","知道","接口","点","打印","修改","param","函数","从","创建","周期","文件","args","\"","定时","配置","父类","参数值","的","将","需要","入口","8","(","setup","new","py","节点","加入","读取","from","如下","库","列表","=","2","并","我们","回调","代码","初始化",":","s","def","信息","发送","none","entry","type","coding","说明","（","。","all","'","定时器","com","www","usr","输出","功能","秒","发送给","包","退出","import","数值","hello","古月","super","points","class","env","设置","编译","python","到","mbot","打开","/","-","bin","get","%","参数","spin","console","value","set","!","{","main","__","后","ros2","日志","]",",","单位","指定","destroy","create",")","如何","送给","callback","robot","在","编写","销毁","parameter","）","#","为","rclpy","对象","值","默认值","learning","declare","shutdown","self","初始","parameters","作者","python3","来看","执行","scripts","让","，","utf","_","中","类","name","循环",".","[","timer","居","等待","示例","系统","}","*","@","logger","默认","进行","init","parameternode","string","一个","主","node","关闭","下","重新","程序","："],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_12","text":"参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。","text_tokens":["我们","对"," ","继续","了","代码","就","应用","可以","不是","大大","不同","来看","参数","效果","已经","每次","么","，","易用性","比较","动态","修改","呢","说干就干","中","是","？","提炼","易用","变化","不如","使用","。","机器","敏感","再","示例","如何","识别","麻烦","把","在","挺","过程","成","光线","还","的","视觉","先","物体","也","阈值","优化","会","提高","大家","下","环境","看","运行","设置","程序","大大提高","机器人"],"title":"案例三：机器视觉应用","title_tokens":["案例","应用","视觉","机器","三","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_13","text":"启动三个终端，分别运行： 相机驱动节点 视觉识别节点 修改红色阈值 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180 在启动的视觉识别节点中，我们故意将视觉识别中红色阈值的上限设置为0，如果不修改参数，将无法实现目标识别。 为了便于调整阈值，我们在节点中将红色阈值的限位修改为了ROS参数，通过命令行修改该参数的值，就可以实现视觉识别啦。","text_tokens":["我们","啦","驱动"," ","就","detect","命令","上限","可以","调整","设置","限位","启动","参数","通过","set","exe","相机","目标","，","ros","learning","修改","_","ros2","三个","param","red","中","h","故意","为了","run","$","usb","。","如果","识别","cam","在","object","该","parameter","的","将","终端","180","视觉","实现目标","命令行","为","实现","0","阈值","node","便于","不","节点","值","无法","分别","运行","upper","中将","：","红色"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_14","text":"我们来看下在视觉识别的代码中，是如何通过参数来设置阈值的。 learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], },","text_tokens":["waitkey","完成","选项","guyuehome"," ","listener","一些","5","info","上限","cv2","、","显示","知道","效果","接口","坐标","50","video","打印","点","1","得到","param","函数","h","二值化","从","创建","continue","文件","args","\"","配置","父类","中心","10","integer","参数值","的","将","需要","入口","8","cvtcolor","(","用于","raw","进入","setup","py","节点","计算","加入","from","读取","如下","图像","库","转化","=","类型","2","长度","我们","者","in","并","回调","代码","初始化","队列","下限","color","+","d","hsv",":","图像处理","def","none","信息","点画","receiving","entry","bgr8","是","coding","red","说明","（","boundingrect","苹果","。","list","勾勒","使用","sub","contours","'","com","www","及","object","usr","输出","功能","出来","左上","视觉","x","已","包","退出","import","处理","数值","阈值","0","hierarchy","msgs","cnt","lower","古月","像素","super","for","高","左上角","class","env","设置","编译","points","python","到","打开","/","subscription","宽","img","detect","-","bin","噪声","drawcontours","通过","get","%","去除","参数","spin","console","目标","value","data","!","ros","{","main","__","表示","后","image","消息","findcontours","ros2","]","日志",",","mask","转换","destroy","create","bridge",")","xy","如何","识别","callback","在","frame","范围","所在","编写","销毁","parameter","approx","90","）","#","bgr2hsv","numpy","rclpy","为","模型","int","对象","和","imshow","提示","互相","upper","learning","declare","msg","imgmsg","轮廓","150","化成","self","面积","inrange","初始","shutdown","chain","作者","sensor","y","python3","来看","scripts","<","w","bgr","让","，","名","cv","utf","_","话题","颜色","中","类","name","太小","与",".","np","[","居","循环","等待","转化成","来","示例","array","if","系统","*","@","128","logger","shape","circle","}","255","cvbridge","进行","opencv","init","180","上角","as","一个","imagesubscriber","主","订阅","node","检测","关闭","下","retr","to","程序","：","红色"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["/","tutorials","parameters","en","ros2","humble","-","docs","org","understanding",".","html","ros",":","https"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/","text":"分布式通信 智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。 分布式通信 什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。 分布式网络搭建 除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。 树莓派配置 在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。 装系统 我们先要给树莓派装系统，这里我们选择的是 Ubuntu Mate 针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/ 安装ROS2 在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。 编译代码 将我们课程的代码也下载到树莓派中，进行编译。 远程桌面 如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728 分布式数据传输 树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。 分布式网络分组 没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。 案例一：小海龟分布式控制 分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动： $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端 案例二：话题分布式通信 我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串： $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端 案例三：服务分布式通信 话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能： $ ros2 run learning_service service_adder_server # PC端 $ ros2 run learning_service service_adder_client 2 3 # 树莓派端 案例四：机器视觉分布式应用 以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体： $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 没有任何问题，视觉识别的效果如下。 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。 参考链接 https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["一些","一系","客户端","性能","启动","没","服务器程序","希望","模拟","直接","？","派端","系列","魅力","再","派","这种","helloworld","动作","讲过","带来","资料","大家","3","这些","可以","代码","客户端程序","bashrc","远程","参考","小海龟","学习","情况","电脑","例程","小","cam","一句","服务","控制器","details","局域","三","平台","由","用","里","运行","以上","完全","编译","驱动","流畅","海龟","较","就是","ros","个","之间","基本","远程桌面","类似","发布","先","article","任何","接下","传感","nodes","learning","122599728","就","不过","这样","你","笔记本","卡中","net","带领","中","端的","运动","系统","同一","实际","分配","树莓","频繁","所","的话","框架","步骤","发生","我","或者","键盘","实现","node","打通","此外","concepts","好","看上","：","完成","啦","基本一致"," ","问题","、","并且","全都","等","效果","即可","建立","虚拟","友好","款","https","压力","做","不在","传感器","求和","卡顿","之后","放在","2","遇到","能力","网上","者","讲","并","消耗","给","demo","处于","分布式",":","而言","叫","务器","export","毕竟","智能","小型","通信","用到","。","只要","复杂","小海","功能","视觉","派里","webcam","hello","blog","环境","html","到","端","虚拟机","继续","-","确保","后","镜像","什么","ros2","上边","变化","相互","任务","桥接","如果","字符","上","编写","非常","qq","分布","命令行","有","顺利实现","会","访问","各种","采集","事情","数据","如此","电机","比如","usb","topic","感器","来","起来","采用","课程","典型","桌面","仿真","顺利","拆解","案例","没有","岂","数据传输","下","service","操作","分组","程序","他们","org","想","about","安装","pc","已经","感觉","任务分配","依然","适合","一样","呢","局域网络","都","小组","分布式应用","将","的","your","节点","模式","加入","之外","无法","图像","计算能力","=","体积","机器人","摄像头","之前","cpp","资源","二","服务器","算机","同一个","互联","之一","神奇","放置","server","繁多","发布者","下载","pub","一切","感受","监控","两个","选择","派装","像","变得","mate","也","52785580","安排","反过来","连接","一","ubuntu","talker",">","命令","docs","通过","每","这么","笔记本电脑","请","$","是否","识别","csdn","挺","则","像头","简而言之","网络","domain","几乎","四","en","和","看上去","接下来","了","减轻","经典","，","提供","_","中有","才能","话题",".","真器","adder","控制","仿真器","轻松","于是","试试","结构","进行","过来","出现","组成","烧写","turtle","订阅","互通","listener","humble","客户","传输","显示","不够","支持","笔记","修改","—","一下","似乎","配置","一致","另外","链接","需要","不在话下","物体","py","计算","流程","布式","分布式系统","更强","如下","我们","反过","开发","应用","不是","这","信息","方便","过","下来","还是","是","使用","机器","sub","针对","鼠标","实时","可能","还","计算机","client","处理","不","然后","有点","两者","据传","download","如","作为","/","除了","world","turtlesim","exe","比较","key","摄像","run","sd","整体","在","搭建","设计","#","发给","为","装","上去","原本","方法","字符串","id","成功","只","attention","不同","<","测试","这里","具体","多个","多","主要","放","先要","teleop","经常","显示器","一个","机制","真有","而是","局域网","一系列","加法","位于","很多","红色"],"title":"分布式通信","title_tokens":["分布","通信","布式","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_1","text":"智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统， 可以实现多计算平台上的任务分配。","text_tokens":["能力"," ","这些","可以","减轻","、","不是","这","全都","不够","就是","等","分布式","算机","，","任务分配","情况","中","？","智能","任务","繁多","多个","多","。","机器","如果","压力","系统","上","分配","功能","将","的","经常","分布","一个","出现","计算机","机器人","平台","处理","里","卡顿","拆解","实现","计算","放在","会","岂","布式","分布式系统","运行","计算能力","到","遇到"],"title":"分布式通信","title_tokens":["分布","通信","布式","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_2","text":"什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。","text_tokens":[" ","传输","并且","性能","等","已经","笔记","适合","？","都","魅力","配置","款","派","压力","这种","另外","做","将","的","需要","传感器","节点","计算","放在","大家","布式","更强","分布式系统","体积","机器人","我们","讲","之前","这些","可以","消耗","应用","开发","这","资源","分布式","算机","信息","远程","方便","叫","之一","过","毕竟","下来","是","通信","电脑","小","。","机器","复杂","感受","监控","两个","功能","可能","还","控制器","视觉","计算机","由","也","平台","处理","派里","不","有点","环境","一","运行","完全","到","作为","驱动","每","较","就是","ros","比较","之间","笔记本电脑","什么","上边","变化","相互","任务","在","上","挺","设计","非常","分布","为","有","任何","上去","和","接下","看上去","原本","各种","接下来","传感","就","了","减轻","不过","只","不同","笔记本","数据","电机","，","比如","带领","中","多","主要","运动","放","控制","感器","系统","起来","于是","分配","采用","树莓","结构","框架","典型","一个","组成","实现","此外","位于","下","好","看上"],"title":"分布式通信","title_tokens":["分布","通信","布式","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_3","text":"除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。","text_tokens":["我们","除了","了","笔记本","，","笔记","笔记本电脑","放置","模拟","电脑","使用","。","机器","控制","派","另外","在","上","树莓","选择","的","我","控制器","一个","平台","计算","之外","机器人"],"title":"分布式网络搭建","title_tokens":["搭建","网络","布式","分布式","分布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_4","text":"在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。","text_tokens":["我们","网上","之前","开发","可以","，","参考","都","。","配置","派","在","树莓","需要","的","先","资料","也","有","大家","环境","好","很多"],"title":"树莓派配置","title_tokens":["树莓","配置","派"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_5","text":"我们先要给树莓派装系统，这里我们选择的是 Ubuntu Mate 针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/","text_tokens":["/","我们"," ","就","了","可以","-","org","给","启动","卡中","，",":","这里","镜像","是",".","。","先要","sd","派","系统","下载","https","针对","派装","树莓","选择","链接","的","mate","download","烧写","之后","ubuntu","到","："],"title":"装系统","title_tokens":["装","系统"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#ros2","text":"在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。","text_tokens":["在"," ","一样","ros2","中","和","流程","电脑","的","安装","ubuntu","好","。","mate","，","端","系统"],"title":"安装ROS2","title_tokens":["ros2","安装"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_6","text":"将我们课程的代码也下载到树莓派中，进行编译。","text_tokens":["下载","我们","也","树莓","代码","中","进行","将","的","课程","。","编译","，","到","派"],"title":"编译代码","title_tokens":["编译","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_7","text":"如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728","text_tokens":["/","基本一致","就"," ","了","可以","显示","通过","，",":","net","远程","方便","参考","_","直接","基本","远程桌面","电脑",".","使用","。","配置","如果","派","系统","一致","整体","https","在","上","鼠标","csdn","树莓","链接","网络","的话","的","步骤","qq","显示器","details","桌面","article","键盘","也","有","52785580","不","流程","和","访问","大家","连接","blog","如下","好","以上","122599728","操作","端","："],"title":"远程桌面","title_tokens":["远程","桌面","远程桌面"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_8","text":"树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 Attention 如使用虚拟机，请将虚拟机网络修改为 桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。","text_tokens":["完成","他们","listener"," ","问题","、","并且","启动","pc","效果","已经","安装","等","感觉","希望","修改","一样","虚拟","呢","局域网络","直接","？","都","一下","派端","小组","配置","派","做","需要","的","将","动作","讲过","带来","py","节点","计算","模式","如下","无法","并","能力","我们","者","之前","可以","cpp","这","demo","处于","同一个","算机","互联","而言","神奇","下来","是","通信","电脑","使用","。","发布者","只要","两个","服务","像","局域","计算机","平台","用","也","里","不","连接","到","端","虚拟机","如","talker","命令","确保","个","之间","后","什么","ros2","请","run","$","桥接","如果","在","简而言之","发布","网络","#","命令行","为","会","和","接下","接下来","nodes","就","了","不过","这样","attention","事情","你","，","测试","_","中有","话题","中","具体","同一","树莓","所","发生","一个","而是","实现","订阅","打通","局域网","互通","好","很多","分组","："],"title":"分布式数据传输","title_tokens":["传输","数据","数据传输","布式","据传","分布式","分布"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_9","text":"没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： $ export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。","text_tokens":["我们","就","问题","了"," ","可以",">","这样","不同","处于","<","即可","同一个","没","，","算机","提供","bashrc","ros","_","一样","才能","ros2","export","中","端的","类似","通信","电脑",".","小组","$","id","。","配置","如果","派","同一","在","分配","则","树莓","一句","domain","将","的","your","一个","机制","计算机","实现","计算","和","加入","两者","无法","=","分组","：","到"],"title":"分布式网络分组","title_tokens":["网络","布式","分布式","分布","分组"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_10","text":"分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动： $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端","text_tokens":["成功","我们","反过","继续","一些","了","之前"," ","海龟","可以","流畅","想","启动","经典","turtlesim","pc","已经","分布式","，","ros","这么","测试","学习","小海龟","key","依然","建立","—","神奇","过","ros2","中","_","通信","电脑","是否","例程","$","运动","run","真器","。","派端","似乎","仿真器","来","控制","派","teleop","在","上","树莓","试试","小海","网络","过来","的","先","分布","仿真","#","真有","或者","turtle","键盘","也","案例","node","节点","反过来","布式","端","："],"title":"案例一：小海龟分布式控制","title_tokens":["小海龟","案例","海龟","小海","布式","一","分布式","分布","控制","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_11","text":"我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串： $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端","text_tokens":["我们","者","端"," ","之前","代码","可以","world","pc","，","修改","_","话题","呢","ros2","情况","直接","？","通信","电脑","是否","例程","$","run","派端","使用","topic","sub","发布者","派","字符","pub","在","helloworld","树莓","试试","发布","编写","的","先","#","任何","订阅","不","hello","下","learning","字符串","：","作为"],"title":"案例二：话题分布式通信","title_tokens":["案例","话题","通信","布式","二","分布式","分布","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_12","text":"话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能： $ ros2 run learning_service service_adder_server # PC端 $ ros2 run learning_service service_adder_client 2 3 # 树莓派端","text_tokens":["我们"," ","问题","客户","客户端","可以","客户端程序","pc","服务器","，","服务器程序","务器","_","话题","还是","ros2","server","电脑","派端","$","run","。","adder","3","树莓","2","服务","不在","不在话下","功能","#","求和","顺利","也","实现","顺利实现","client","没有","加法","service","运行","learning","端","程序","："],"title":"案例三：服务分布式通信","title_tokens":["案例","服务","通信","布式","分布式","分布","三","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_13","text":"以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体： $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 没有任何问题，视觉识别的效果如下。 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。","text_tokens":["啦"," ","问题","一系","不够","pc","效果","支持","没","修改","模拟","？","都","派端","系列","友好","配置","再","派","做","将","的","需要","物体","节点","布式","图像","如下","机器人","我们","摄像头","这些","可以","开发","代码","分布式","下来","小型","电脑","用到","例程","使用","。","机器","sub","cam","只要","一切","复杂","实时","功能","变得","还","视觉","也","处理","webcam","安排","然后","不","连接","以上","端","通过","exe","ros","ros2","摄像","类似","run","$","识别","在","上","像头","搭建","网络","几乎","非常","分布","#","发给","为","任何","会","接下","接下来","采集","方法","learning","了","如此","，","测试","提供","_","端的","中","usb","topic","系统","轻松","实际","树莓","频繁","一个","node","没有","一系列","好","：","红色"],"title":"案例四：机器视觉分布式应用","title_tokens":["案例","应用","布式","四","视觉","分布式","分布","机器","分布式应用","："]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_14","text":"https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["/","en","humble","-","docs","org","domain",".","about","concepts","html","ros",":","https","id"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2_%E6%A6%82%E5%BF%B5%E6%80%BB%E8%A7%88/","text":"从本节开始，我们将进入第二个篇章，以ROS2的核心概念为线索，详细讲解ROS2的应用开发方法。","text_tokens":["我们","线索","开发","从本节","应用","二个","，","以","ros2","开始","开发方法","篇章","概念","。","本节","核心","讲解","第二","将","的","详细","为","第二个","进入","方法"],"title":"概念总览","title_tokens":["总览","概念"]}]}