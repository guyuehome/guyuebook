{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"机器人的发展横跨七八十年，经历了三个重要时期。 2000年前 ，机器人主要应用于工业生产，俗称工业机器人，由示教器操控，帮助工厂释放劳动力，此时的机器人并没有太多智能而言，完全按照人类的命令执行动作，更加关注电气层面的驱动器、伺服电机、减速机、控制器等设备，这是机器人的电气时代。 2000年后 ，计算机和视觉技术逐渐应用，机器人的类型不断丰富，出现了AGV、视觉检测等应用，此时的机器人传感器更加丰富，但是依然缺少自主思考的过程，智能化有限，只能感知局部环境，这是机器人的数字时代，不过这也是机器人大时代的前夜。 2015年之后 ，随着人工智能技术的快速发展，机器人成为了AI技术的最佳载体，家庭服务机器人、送餐机器人、四足仿生机器狗、自动驾驶汽车等应用呈井喷状爆发，智能机器人时代正式拉开序幕。 智能机器人的快速发展，必将对机器人开发提出更高的要求，软件层面最为热点的技术之一就是机器人操作系统，这也是我们课程的主角—— Robot Operating System 。 教程链接 课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 博客泡泡： https://www.guyuehome.com/ 教程问答： https://www.guyuehome.com/bubble/index 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 参考资料： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["数字","操控","时期","是","操作系统","经历","应用","于","工厂","劳动","丰富","年","只能","前夜","快速","ai","com","_","减速","工业生产","缺少","参考资料","送餐","机器人","业生","www","思考","的","2015","视觉","等","，","减速机","2000","tutorials","七八十年","更","agv","环境","链接","1dvxugmhxlxnsnfdezuxw0g","智能化","人工","算机","状","robot","三个","帮助","视频","俗称","井喷","热点","baidu","电机","八十","高","不断丰富","源码","十年","大","更加","并","https","层面","后","控制","操作","逐渐","感知","软件","bubble","正式","资料","不断","传感","设备","之一","拉开","时代","成为","课程","驱动","完全","序幕","index","劳动力","guyuehome","家庭","七八","自动","计算机",".","、","泡泡","了","工业","：","book","技术","控制器","伺服","计算","命令","exc6","pan","四足","。","汽车","年前","出现","驾驶","提出","operating","这是","由示","对","也","ros2","人类","类型","释放","—","执行","最为","码","主角","系统","电气","要求","教器","动力","依然","21",":","主要","自主","参考","驱动器","我们","过程","按照","问答","重要","横跨","这","system","发展","感器","动作","检测","github","开发","s","但是","太","/","七八十","呈","多","服务","机器","教程","class"," ","不过","人工智能","智能","爆发","伺服电机","关注","此时","有限","图文","载体","拉开序幕","和","最佳","传感器","没有","gitee","八十年","博客","生产","提取","狗","随着","而言","就是","局部","仿生","必将","之后"],"title":"引言","title_tokens":["引言"]},{"location":"#_1","text":"课程视频： https://class.guyuehome.com/ 图文教程： https://book.guyuehome.com/ 博客泡泡： https://www.guyuehome.com/ 教程问答： https://www.guyuehome.com/bubble/index 教程源码： Gitee： https://gitee.com/guyuehome/ros2_21_tutorials Github： https://github.com/guyuehome/ros2_21_tutorials 参考资料： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["/","源码","ros2","https","教程","class","bubble"," ","码","com","_","资料","参考资料","图文","21","课程",":","www","index","参考","gitee","tutorials","guyuehome","链接","1dvxugmhxlxnsnfdezuxw0g","博客","提取",".","问答","泡泡","：","book","视频","github","baidu","exc6","pan","s"],"title":"教程链接","title_tokens":["教程","链接"]},{"location":"about/","text":"学机器人，上古月居 古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。 版权声明 古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["限于","合法","追究其","是","对本","年","赋能","线上","创建","培养","依法","使用","精锋","com","ai","生态","追究","交流","复制","用户","声明者","有权","1000","机器人","www","模式","的","上","本","等","出版","，","高质量","与","》","网站","拥有","质量","120","至今","其它","构建","视频","人才培养","人才","累积","通过","销售","建立","校企","源码","联系","社区","将","及","但","知名","实践","创新","如需","高质","课程","企业","不","法律","进行","交流学习","guyuehome","抄录",".","优质","、","究其","法律责任","请","修改","。","作品","或","未经","单位","包括","面向未来","未来","高校","地区","违反","众多","声明","超过","@","2011","集","面向","武汉","镜像","任何","万字","万人","居","一体","上述","图书","开发","畅销","被","ros","均","致力","华语","努力","捆绑","提供","机器","平台","传播","所有"," ","（","课件","+","微控","学习者","产品","有限","致力于","明者","许可","个人","）","和","不得","学习","有限公司","授权","内容","书面","古月","为","仅限","小时","brand","版权","公司","科技","责任","合作","《","学"],"title":"关于教程","title_tokens":["教程","关于"]},{"location":"about/#_1","text":"古月居 ，是华语地区知名的ROS机器人社区（ www.guyuehome.com ），致力于为机器人学习者提供优质的交流学习平台，线上用户超过120万人，努力构建集人才、内容、校企为一体的社区生态，2011年创建至今，累积高质量内容超过1000万字、视频课程超过1000小时，出版《ROS机器人开发实践》等畅销图书，与众多高校及企业建立合作，通过AI机器人+社区生态的创新模式，赋能面向未来的人才培养。","text_tokens":["是","年","赋能","线上","创建","培养","com","ai","生态","交流","用户","1000","机器人","www","模式","的","等","出版","，","高质量","与","》","质量","120","至今","构建","视频","人才培养","人才","累积","通过","建立","校企","社区","及","知名","实践","创新","高质","课程","企业","交流学习","guyuehome",".","优质","、","。","面向未来","未来","高校","地区","众多","超过","2011","集","面向","万字","万人","居","一体","图书","开发","畅销","ros","致力","华语","努力","提供","机器","平台"," ","（","+","学习者","致力于","）","学习","内容","古月","为","小时","合作","《"],"title":"学机器人，上古月居","title_tokens":["上","，","古月","机器","机器人","居","学"]},{"location":"about/#_2","text":"古月居网站的所有作品，包括但不限于课程、视频、课件和源码等均为武汉精锋微控科技有限公司合法拥有版权或依法有权使用的作品，仅限被授权用户的个人学习使用。 未经本公司书面许可，任何单位或个人不得对本网站的作品进行使用、复制、修改、抄录、传播、镜像或与其它产品捆绑使用、销售等。 违反上述声明者，本公司将追究其法律责任。 如需授权请联系 brand@guyuehome.com 。","text_tokens":["限于","合法","追究其","对本","依法","使用","精锋","com","追究","复制","用户","声明者","有权","的","本","等","，","与","网站","拥有","其它","视频","销售","源码","联系","将","但","如需","课程","不","法律","进行","guyuehome","抄录",".","、","究其","法律责任","请","修改","。","或","作品","未经","单位","包括","违反","声明","@","武汉","镜像","任何","居","上述","被","均","捆绑","传播","所有"," ","课件","微控","产品","有限","明者","许可","个人","和","不得","学习","有限公司","授权","书面","古月","为","仅限","brand","版权","公司","科技","责任"],"title":"版权声明","title_tokens":["声明","版权"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/","text":"ROS/ROS2是什么 智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。 ROS的诞生 对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。 ROS的发展 ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称ROSCon，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。 ROS的特点 ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的应用案例在社区中沉淀下来； ROS本身也是完全开源的，商业许可证非常宽松； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品，缩短了产品的上市时间； ROS也可以跨平台使用，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多支持工业应用的新特性和新技术，促使ROS在越来越多领域中被使用。 ROS的社区 社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。 参考资料 关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["入门教程","斯坦福","一大笔钱","两年","限于","来讲","笔记本电脑","模块","google","为例","经历","等等","只想","暴露","熨烫","不要","嵌入式","效果","不想","模块化","现在","生态","做成","用户","移动机器人","适用","工程师","开源","程度","低","打","的","在","处理","你","各种","清晰","啦","移动","40","回答","智能化","把","为了","120","重新","维基","不仅","直接","一个","玩耍","全","年轻人","普及","intel","体感","逐渐","将","全书","认识一下","全球","性能","同理","成为","到","虽好","加快","张图","进行","其实","2014","挑战","因","风险投资","好","answers","所学","框架","进化","跨平台","简单","第一次","统计","引擎","扫地","pr2","人形","怀揣","提出","根据","会","通信","可能","一款","风险","革命","踏上","人类","—","多年","最为","还是","world","确定","系统","各种各样","下载","自身","变为","那","相关","“","类似","wiki","做饭","原因","以叠","2011","2007","研发","主要","洗衣","做法","参考","终于","具备","望而却步","任何","浏览量","齐聚一堂","重要","推出","毛巾","system","都","发展","很","开发","被","ros","个","近几年","/","personal","标准","willow","可以","索引","更新","xbox","a","平台","所有","一堂","做到","成功","托管","快","复杂","c","来","许可","方式","臂","和","多项","100","一群","没想","人","成熟","就是","宽松","体系","5","向","资源","率","中","支持","作为","关键","远","记录","组成","巨大","conference","学术","答案","推动","介于","四大","活跃","案例","是","年轻","普遍","快速","这些","于","还有","世界","使用","衣服","论坛","说明","涉及","量级","事情","特点","一步","缩短","活动","无论","广泛","造","之上","turtlebot","上","一次","掀起","研究","garage","改为","本","，","上市","日常","时间轴","知识","更为","新增","疫情","起","其中","至今","下","尽量","浪潮","领域","访问量","迭代","做出","动机","向前走","想到","商业化","数据","之旅","绝对","加上","从","每个","org","大","早期","机械","更好","后续","软件","说干就干","跑","正式","直到","同年","肩负","又","详细","工程","课程","来自","无疑","前","四项","kinect","15","选择","设计","第一","次数","跟随","discourse","新鲜事","主阵地","有志","着","配合","2017","商业","精致","分钟","页面","看到","搜索","讨论","左右","万","原型","阵地","来看","轮子","原本","月","零","时至今日","助推","几百万","明智","起来","当初","正在","家","多媒体","查看","却","万人","据库","几乎","roscon","项目","国家","电路","带领","时候","回到","一家","物体","github","爆款","实现","图中","部件","方法","叫做","努力","最高","大学","居高不下","机器","第一个","总而言之","让","推进","智能","外观","自己","资本","产品","linux","上图","部分","无聊","几个","什么","其他","速度","资金","如何","两个","而且","发表","学习","有没有","上边","古月","集合","而言","一段","不断更新","肩膀","对于","百科","非常","欢迎","推荐","友好","找到","不开","目标","新鲜","不下","大步","一系列","一套","电脑","水下","迎来","亚马","别人","站","问题","离不开","复合","25","针对","250","为什么","受限","参考资料","所有人","进入","机器人","光靠","大笔","真的","几百","版本","或者","标志","等","轰动","各样","沉淀","2010","特性","头发","给","使命","网站","游戏机","代码","robot","叠","帮助","上去","视频","应用软件","人才","不到","初期","接下来","没想到","掌握","百科全书","利器","他们","通过","而生","？","源码","无论是","大部分","接下","出来","有人","用于","社区","嘉宾","这样","要","年底","不断","差不多","传感","2022","陪","提问","不","底盘","不多","度","神秘","解决","完全","index","之内","万万","局限","有","只","功能","150","虽然","场景","做","关于",".","一切","了","工业","野蛮","下来","技术","促使","分享","熟悉","之王","版","棒","汽车","收拾","巨人","独立","肩负着","核心","也","月底","创始","来到","肯定","充足","希望","这个","呢","重量级","一届","机制","维基百","只要","越来越","一样","动力","最后","进步","曲线","还","效率","方向","总体","大部","一大笔","百万","繁荣","问答","了解","媒体","柔性","横跨","斯坦福大学","基本上","感器","受限于","入门","基本","；","长远","青年","神兵","多","福大","条","比如","windows","服务","提供","教程","如果","同学","大量","从中","局限性","然后","此时","采购","既然","其次","20","尝试","工具","举办","此","传感器","诞生","结晶","图","内容","提取","正如","讲解","容易","零部件","同一","公司","起点","投资","这一波","不乏","humble","以上","游戏","几年","单独","代表","围绕","操作系统","剪头发","应用","b","本身","年","强悍","线上","能够","活跃度","完成","已经","大有可为","万左右","算是","这里","2015","总称","ros1","这群","更","全球化","注意","存储","复用","面纱","开发者","不是","干","包","生态系","人数","给出","亚马逊","绝大","款","一大步","聊天","这位","智慧","每年","一定","并","提高","层面","控制","成果","操作","每","一起","笔记","木头","资料","专业","浏览","多万","今日","时代","80","才","却步","笔记本","当时","趋势","可为","大大","团队","所以","得以","整理","因为","时间","、","身影","重量","全人类","泡泡","该","：","近两年","同时","系列","。","2012","通常","很快","operating","就","这是","频繁","迅猛","许可证","对","一些","扩展","ros2","微软","高效","软件系统","绝大部分","而","同样","限性","联合","发布","价格","真正","圈","美妙","已有","投了","想法","此后","大家","地域","首先","苹果","越来","情况","之","这款","我们","实验","得到","过程","各项","手机","台球","数据库","居","这","生态系统","稳定","全新","认识","一大","元素","packages","不同","名称","访问","但是","ubuntu","开发工具","板块","向前","制造","采用","增长速度","五年","”","很多","便宜","长期"," ","2","开始","由","步伐","排名","创意","实验室","一系","嵌入","全人","个人","以","看中","甚至","代","最佳","大会","正式版","没有","整合","一下","增长","新","基于","加","高度","为","官方","用","乐意","随着","历经","成本","深知","价格便宜","多媒体系统","统统","简称","维基百科","后期"],"title":"ROS和ROS2是什么","title_tokens":["和","什么","ros2","是","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#rosros2","text":"智能时代，机器人正在向全场景的高度智能化方向进化，这对机器人开发提出了巨大挑战，机器人操作系统ROS应用而生。 那什么是ROS？什么又是ROS2呢？ 接下来，我们就一起掀起ROS的神秘面纱，带领大家认识一下机器人开发中这位重量级的嘉宾。","text_tokens":["这位","巨大","提出","而生","就","？","对","ros2","是","接下","操作系统","应用","机器","操作"," ","一起","智能","系统","呢","认识一下","重量级","嘉宾","又","那","量级","时代","机器人","什么","大家","的","神秘","掀起","正在","，","我们","方向","挑战","一下","智能化","高度","场景","面纱","进化","重量","带领","这","了","向","下来","认识","中","开发","接下来","。","ros","全"],"title":"ROS/ROS2是什么","title_tokens":["/","什么","ros2","是","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros","text":"对于越来越复杂的智能机器人系统，已经不是一个人或者一个团队可以独立完成的，如何高效开发机器人，是技术层面上非常重要的一个问题，针对这个问题，一群斯坦福大学的有志青年尝试给出一个答案，那就是 机器人操作系统 。 2007年，他们诞生了这样一个想法，我们有没有可能做一款个人服务机器人，帮助我们完成洗衣做饭收拾家等一切你不想做的事情，甚至还可以在你无聊的时候，陪你聊天玩耍，最后他们真的做出来了。 当时，他们深知做出这样一款机器人并不容易，机械、电路、软件等都要涉及，而且横跨很多个专业，光靠自己肯定做不到，此时他们诞生了这样一个想法： 既然自己做不到，那为什么不联合所有人一起干呢？ 如果设计一套标准的机器人平台和其中的软件，大家都可以在这个平台上做应用开发，既然应用软件都基于同一平台，应用的分享也很容易实现，这就类似别人开发的苹果手机应用，只要你有苹果手机，同样也可以用。 说干就干，初期的机器人原型是用实验室可以找到的木头和一些零部件组成的，后期有了充足的资金，才得以实现图中这款外观精致、性能强悍的机器人——PR2，Personal Robot 2代。 在上图中，我们可以看到PR2机器人已经可以完成叠毛巾、熨烫衣服、打台球、剪头发等一系列复杂的应用功能，以叠毛巾为例，这在当时是轰动机器人圈的重要研究，因为第一次有机器人可以完成柔性物体的处理，虽然效率很低，在100分钟之内只完成了5条毛巾的整理，但是在学术层面却推动机器人向前走了一大步。 这款机器人中的软件框架就是ROS的原型，所以ROS因这款个人服务机器人而生，很快也从中独立出来，成为一款用于更多机器人的软件系统。","text_tokens":["学术","答案","推动","斯坦福","找到","是","操作系统","剪头发","一套","应用","一系列","为例","大步","年","强悍","熨烫","别人","完成","不想","衣服","问题","涉及","针对","已经","为什么","事情","所有人","机器人","光靠","低","真的","的","在","上","你","或者","打","等","轰动","研究","，","一次","更","头发","不是","其中","干","robot","叠","给出","帮助","应用软件","不到","初期","款","做出","一大步","向前走","一个","玩耍","他们","聊天","而生","？","并","有人","出来","层面","用于","机械","操作","软件","一起","说干就干","木头","这样","要","专业","陪","性能","成为","不","才","当时","之内","有","团队","因","所以","得以","只","功能","因为","设计","做","虽然","整理","第一","、","框架","一切","了","第一次","：","有志","技术","分享","pr2","系列","。","后期","收拾","很快","精致","就","分钟","独立","看到","一些","也","可能","一款","肯定","高效","充足","软件系统","同样","—","联合","这个","系统","呢","圈","原型","想法","只要","越来越","那","最后","类似","苹果","越来","做饭","还","以叠","效率","2007","洗衣","家","这款","我们","实验","处理","却","手机","台球","电路","重要","时候","横跨","都","斯坦福大学","这","毛巾","柔性","很","物体","一大","开发","但是","实现","ros","图中","个","部件","向前","青年","personal","标准","多","福大","可以","大学","条","服务","很多","机器","平台","所有"," ","如果","2","智能","外观","自己","从中","此时","复杂","既然","实验室","一系","无聊","什么","个人","资金","甚至","尝试","和","代","如何","100","而且","一群","诞生","没有","有没有","图","基于","人","用","容易","就是","零部件","同一","5","中","深知","对于","非常","组成","大家"],"title":"ROS的诞生","title_tokens":["诞生","的","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_1","text":"ROS诞生于2007年的斯坦福大学，这是早期PR2机器人的原型，这个项目很快被一家商业公司Willow Garage看中，类似现在的风险投资一样，他们投了一大笔钱给这群年轻人，PR2机器人在资本的助推下成功诞生。 2010年，随着PR2机器人的发布，其中的软件正式确定了名称，就叫做机器人操作系统，Robot Operating System，简称为ROS。同年，ROS也肩负着让更多人使用的使命，正式开源。 PR2机器人虽好，但是成本居高不下，几百万的价格让绝大部分开发者望而却步，官方也注意到了这个问题，所以在2011年发布了一款后期成为ROS圈爆款的机器人—— Turtlebot ，这款机器人采用扫地机器人的底盘，加上xbox游戏机中的体感传感器Kinect，直接使用笔记本电脑就可以控制，支持ROS的所有开源功能，关键是价格便宜，随着这款机器人的普及，大大推动了ROS的应用。 从2012年开始，使用ROS的人越来越多，ROS官方也开始每年举办一届ROS开发者大会—— ROS Conference ，简称ROSCon，来自全球的开发者会齐聚一堂分享自己使用ROS开发的机器人应用，其中不乏亚马逊、Intel、微软等大公司的身影，近两年因为疫情原因改为线上举办，名称也变为了ROS World。 经历前几年野蛮而快速的增长，ROS逐渐迭代稳定，2014年起，ROS跟随Ubuntu系统，每两年推出一个长期支持版，每个版本支持五年时间，这标志着ROS的成熟，也让ROS加快了普及的步伐。 回到时间轴的起点，ROS的创始团队原本只想做一款个人服务机器人，万万没想到， ROS被越来越多机器人使用，受限于当初设计的局限性，ROS的问题也逐渐暴露 。为了能够真正设计一款适用于所有机器人的操作系统，ROS2在2017年底正式发布，历经多年迭代，我们终于在2022年5月底，迎来了ROS2第一个长期支持版—— ROS2 Humble ，ROS2已经成熟，我们也进入了一个全新的ROS2时代。 从ROS发展的时间轴中，我们不仅可以了解到ROS的发展过程，更重要的是熟悉ROS和ROS2诞生的原因。 这里我们也把ROS2发展的时间轴单独提取出来，介于ROS在各种各样机器人中应用的问题，ROS2在2014年提出，2015年开始迭代，2017年推出第一个正式版，此后快速迭代，直到2022年推出了第一个长期支持版，本教程也会在该版本ROS2之上进行讲解。","text_tokens":["游戏","conference","介于","推动","斯坦福","一大笔钱","两年","几年","限于","笔记本电脑","单独","各种","年轻","不下","操作系统","是","应用","于","电脑","经历","快速","年","迎来","线上","只想","暴露","亚马","能够","使用","问题","现在","已经","受限","适用","进入","机器人","开源","大笔","这里","的","在","几百","turtlebot","改为","版本","garage","等","标志","，","2010","各样","这群","时间轴","更","注意","给","使命","把","开发者","游戏机","为了","疫情","起","其中","下","robot","教程","亚马逊","绝大","迭代","款","直接","没想到","不仅","一个","想到","他们","加上","从","年轻人","普及","每年","每个","大部分","intel","大","早期","出来","控制","体感","操作","逐渐","软件","每","笔记","正式","直到","同年","肩负","全球","年底","传感","2022","时代","到","成为","底盘","却步","笔记本","虽好","来自","前","加快","kinect","大大","万万","局限","进行","2014","团队","风险投资","所以","功能","因为","设计","做","时间","第一","、","跟随","身影","了","该","近两年","野蛮","分享","着","熟悉","扫地","版","pr2","商业","。","后期","2012","2017","很快","提出","operating","就","这是","会","肩负着","也","月底","微软","一款","风险","创始","绝大部分","ros2","而","—","限性","发布","价格","这个","world","确定","系统","圈","真正","原型","投了","一届","各种各样","此后","变为","越来越","一样","原本","助推","几百万","越来","原因","2011","2007","当初","终于","我们","望而却步","过程","大部","齐聚一堂","一大笔","百万","roscon","项目","之上","了解","重要","推出","回到","system","斯坦福大学","这","稳定","一家","感器","一大","受限于","全新","发展","开发","名称","但是","爆款","被","ros","ubuntu","2015","采用","叫做","多","willow","福大","可以","大学","五年","居高不下","xbox","服务","机器","便宜","长期","第一个","所有"," ","让","开始","一堂","步伐","多年","成功","资本","自己","局限性","部分","本","个人","看中","和","举办","大会","正式版","传感器","诞生","没想","增长","人","为","提取","官方","成熟","讲解","随着","5","历经","公司","成本","投资","中","支持","关键","价格便宜","起点","简称","不乏","humble","类似"],"title":"ROS的发展","title_tokens":["的","发展","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_2","text":"ROS怀揣“ 提高机器人软件复用率 ”的目标，促使社区快速发展和繁荣，时至今日，ROS已经广泛用于各种机器人的开发，无论是机械臂、移动机器人、水下机器人，还是人形机器人、复合机器人，统统都可以看到ROS的身影，ROS已经成为机器人领域的普遍标准。 提高机器人软件复用率，这个目标简单来讲就是 不要重新造轮子 。 正如一家做汽车的公司，从零制造汽车并不是一个明智的做法，他们通常会采购A家的轮子、B家的引擎、C家的多媒体系统，最后把这些整合到一起做成汽车。同理，我们也可以将ROS社区中已有的各种软件集合到一起，在此之上去实现自己的创意，同时还可以将自己的成果分享给别人，这样大家都可以站在巨人的肩膀上，向前走的更远，一步一步，智能机器人才会有更多沉淀和更长远的进步。 围绕这个核心目标，ROS在自身的设计上也尽量做到了模块化，由 通信机制、开发工具、应用功能、生态系统 四大部分组成。同时ROS具备多项特点，这里的ROS是ROS1和ROS2的总称， 比如： 社区是全球化的，那就可以集合全人类的智慧来推进机器人的智能化发展； 这些智慧的结晶都会以各种各样的应用案例在社区中沉淀下来； ROS本身也是完全开源的，商业许可证非常宽松； 对商业应用功能友好，这就代表着公司可以直接使用ROS开发商业化的机器人产品，缩短了产品的上市时间； ROS也可以跨平台使用，Linux、Windows、嵌入式系统都可以跑； ROS2中也新增了很多支持工业应用的新特性和新技术，促使ROS在越来越多领域中被使用。","text_tokens":["四大","来讲","模块","友好","围绕","目标","案例","是","代表","普遍","快速","b","这些","水下","应用","本身","嵌入式","不要","使用","别人","站","模块化","复合","生态","做成","已经","移动机器人","缩短","一步","特点","机器人","开源","无论","广泛","造","各种","的","在","上","这里","总称","各样","上市","沉淀","ros1","，","特性","更","移动","全球化","给","智能化","复用","新增","把","不是","至今","重新","上去","尽量","生态系","领域","人才","动机","直接","向前走","一个","商业化","他们","智慧","从","无论是","并","提高","用于","成果","机械","社区","软件","一起","将","跑","这样","全球","今日","同理","成为","到","完全","有","功能","设计","做","时间","、","身影","全人类","跨平台","简单","了","：","工业","促使","下来","同时","分享","引擎","着","技术","人形","。","商业","汽车","巨人","通常","怀揣","就","会","看到","核心","通信","也","许可证","ros2","对","人类","还是","这个","各种各样","系统","机制","已有","自身","轮子","越来越","那","“","时至今日","零","最后","进步","明智","越来","还","做法","家","之","我们","具备","多媒体","繁荣","媒体","都","这","生态系统","发展","一家","开发","被","实现","ros","；","开发工具","制造","向前","长远","标准","多","比如","可以","windows","”","a","很多","机器","平台"," ","做到","由","推进","智能","自己","linux","产品","创意","采购","c","部分","嵌入","来","许可","全人","以","臂","和","工具","多项","此","整合","结晶","新","正如","集合","就是","宽松","体系","率","公司","中","肩膀","支持","多媒体系统","统统","远","非常","组成","大家"],"title":"ROS的特点","title_tokens":["的","ros","特点"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#ros_3","text":"社区是ROS快速发展的核心动力，什么是社区呢？其实就是ROS相关资源的整合方式，比如wiki说明、问答网站、应用源码、论坛讨论等都算是社区中的元素。 ROS全球社区有几个重要网站： answers.ros.org，这是一个ROS问答网站，大家可以在上边提出任何关于ROS的问题，全球很多开发者都很乐意回答我们的问题； wiki.ros.org，这是ROS的维基百科，记录了ROS教程和各种功能包的使用； discourse.ros.org，这是ROS论坛，关于ROS开发的新鲜事都可以在这里发表和查看，比如ROS的活动、新功能包的发布等等。 index.ros.org，是ROS各种资源的一个索引网站； packages.ros.org，是ROS功能包存储的数据库。 这几个网站的使用情况基本就可以代表ROS社区的活跃度了。 上图是近几年ROS社区页面浏览量的增长曲线，从总体趋势上来看，各项增长速度都非常快，wiki作为日常使用最为频繁的网站，使用度无疑是最高的，现在每个月有 150万左右 的访问量，answers和packages现在差不多，每个月有 80万 左右，其他两个不多，四项加起来每个月基本有 250万左右 的访问量，已经是一个活跃度非常棒的社区了。 从访问人数上来看，上边这张图更为清晰， wiki每个月有20到25万人使用 ， answers每个月有15万人以上使用 ，四项加起来每个月差不多有40多万的使用人数，这些用户绝大部分都是机器人开发者，可以看到ROS使用人数是越来越多了。 这张图是根据功能包下载次数统计得到的地域排名，基本上可以代表不同国家机器人研发的活跃程度，给大家作为一个参考。 总而言之，通过这些数据，我们可以看到的是ROS发展迅猛，正在助推机器人革命这一波大浪潮，大家每一个人在其中都大有可为。 如果你希望学习机器人开发，ROS绝对会成为你开发机器人的神兵利器，本教程也绝对是你的最佳选择。","text_tokens":["以上","几年","代表","活跃","新鲜","是","这些","快速","应用","等等","使用","活跃度","论坛","问题","现在","说明","25","250","已经","用户","大有可为","万左右","算是","活动","机器人","程度","各种","的","在","这里","上","你","本","等","日常","，","清晰","40","更为","回答","存储","给","网站","开发者","其中","包","人数","浪潮","维基","访问量","绝大","一个","利器","数据","通过","绝对","从","？","源码","每个","org","大部分","大","社区","每","全球","浏览","差不多","多万","80","到","不","成为","不多","度","可为","趋势","index","无疑","四项","张图","其实","15","选择","有","功能","150","关于","次数",".","、","discourse","answers","新鲜事","了","统计","：","。","棒","根据","提出","就","这是","频繁","迅猛","页面","会","看到","核心","也","绝大部分","革命","讨论","希望","发布","最为","左右","万","呢","维基百","下载","来看","越来越","动力","相关","月","wiki","曲线","地域","助推","越来","情况","研发","起来","参考","正在","我们","得到","任何","浏览量","总体","查看","各项","大部","万人","据库","数据库","问答","国家","重要","都","这","基本上","packages","发展","很","元素","不同","开发","访问","基本","ros","；","近几年","神兵","多","增长速度","比如","可以","索引","最高","很多","机器","教程","总而言之"," ","如果","排名","上图","快","部分","几个","20","什么","方式","其他","速度","和","最佳","两个","发表","学习","整合","增长","上边","新","加","人","乐意","而言","就是","资源","中","作为","这一波","百科","记录","非常","维基百科","大家"],"title":"ROS的社区","title_tokens":["的","社区","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.1_ROS%E5%92%8CROS2%E6%98%AF%E4%BB%80%E4%B9%88/#_1","text":"关于本教程的参考资料，主要推荐这几个网站。 首先是最为推荐的搜索之王—— Google ，几乎所有问题，都可以在这里解决，作为开发工程师的同学，一定要掌握这个重要工具的使用方法。 其次是开源项目的主阵地—— Github ，ROS和社区中的绝大部分代码，都在这里托管，还有大量可以作为我们学习参考的开源项目都可以在这里找到，也是我们离不开的一个网站。 然后是 古月居 网站，这里有大量ROS机器人开发的技术内容和视频课程，还可以在泡泡板块中提问，也欢迎大家在这里和120万人分享你所学的知识。 最后是 本教程网站 ，会提供详细的ROS2入门教程，后续也会不断更新和扩展，努力成为大家学习ROS机器人开发的百科全书，配合课程视频学习，效果会更好。 好啦，欢迎大家来到ROS的世界，从这里开始，我们将一起踏上一段美妙的机器人开发之旅。","text_tokens":["入门教程","欢迎","推荐","找到","不开","是","google","世界","还有","效果","使用","问题","离不开","参考资料","工程师","开源","机器人","这里","的","在","你","本","，","啦","知识","网站","代码","120","视频","掌握","绝大","百科全书","一个","之旅","从","一定","大部分","更好","社区","后续","一起","将","全书","资料","要","不断","提问","详细","工程","课程","成为","解决","有","好","关于","所学","泡泡","主阵地","技术","之王","分享","配合","。","会","扩展","也","搜索","ros2","来到","绝大部分","踏上","—","最为","这个","美妙","阵地","最后","首先","还","主要","参考","我们","大部","万人","几乎","居","项目","重要","这","都","github","开发","入门","ros","板块","方法","努力","可以","更新","提供","机器","教程","所有"," ","同学","大量","开始","托管","然后","部分","其次","几个","和","工具","学习","内容","古月","中","不断更新","作为","一段","百科","大家"],"title":"参考资料","title_tokens":["参考","资料","参考资料"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/","text":"ROS2对比ROS1 在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。 ROS1的局限性 首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。 全新的ROS2 ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。 ROS2 vs ROS1 系统架构 在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。 DDS通信 ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。 核心概念 ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。 编码方式 再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。 命令行 最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随课程，你就会慢慢理解这些特性。","text_tokens":["自","国际标准","master","来讲","揭秘","嵌入式","不要","之外","改","初次","以下","只不过","除此之外","做成","细节","用户","带来","适用","开源","伙伴","各种","的","在","处理","你","联网","可移植","第二个","需求","一本","启动","啦","消费","千差万别","把","简单明了","一一","为了","重新","陆续","语言","第二种","动力学","不仅","收","直接","面临","一个","运算","全","实时性","而已","python3","普及","举","不用","更加","能力","进程","安装","常","历史","属性","图片","可读","将","但","黑客","灵活","全球","国际","接近","性能","编译","到","系统工程","程序","对象","无法","张图","opensplice","进行","其实","可选项","确实","强","挑战","好","通用性","小伙伴","框架","跨平台","至关","简单","一行","共享内存","差异","修改","另","新版","pr2","当","或","用到","wifi","出现","概念","怀揣","只有","会","macos","通信","最新","除了","一款","风险","行人","可能","调用","足够","方案","干掉","—","依赖","最为","各种各样","担忧","不够","系统","指挥","体验","多个","那","相关","怎样","体现","受制于","研发","理器","完整性","主要","面向","策略","具备","迈过","任何","也许","优化","完善","消失","微控制器","重要","都","可移植性","编写","听说","发展","自家","面向对象","开发","话题","较","含义","库会","ros","middleware","切记","/","标准","陌生","工作","可以","平台","所有","到底","做到","乱麻","条件","成功","以下几点","高昂","得","借鉴","复杂","来","方式","和","大部头","tcp","colcon","ament","似乎","过去","就是","多功能","资源","过来","rosbuild","中","支持","强壮","听","率","android","难度","各位","致使","巨大","学术","答案","不好","交付","厂家","常用","深入","先进","过","第二","是","这些","还有","于","分布式","丰富","使用","不爽","说明","一团乱麻","批量","一步","最大","无论","保证","广泛","加入","之上","交给","上","宕机","研究","本","主","，","信息","环境","一代","印象","其中","下","尽量","定性","分布","单兵作战","数据","catkin","从","明显","算力","每个","大","通用","稍安","轻松","开发成本","更好","后续","软件","分散","网络连接","先","作战","api","设备","工程","课程","层","企业","哪些","变化","选择","内部","连接","之初","家庭","设计","第一","走向市场","上手","跟随","udp","至关重要","请","计算","入侵","命令","上升","不难理解","突然","商业","新一代","完","搬","类型","是因为","发现","去","不太","rosrun","对系统","来看","提","要求","翻新","毛坯","原本","结合","暂且","几百万","行为","生活","即可","工作站","共享","一旦","除此","vs","几乎","丢","以及","项目","个体","之间","会成","实时","时候","带领","一家","意义","完整","是从","他","实现","通信接口","接入","topic","方法","角度","叫做","搭载","对比","可选","机器","第一个","rtos","让","更换","智能","fastrtps","自己","linux","产品","阶段","地方","部分","发送","方便","rostopic","什么","其他","如何","两个","真实","学习","中间","变得","需要","运动学","良好","生产","发布者","物","一团乱","安全","而言","稳定性","航天","对于","最早","应该","why","内存","非常","学","集成","run","受制","二代","售价","大致","找到","目标","一套","内","电脑","5g","是否","总结","网络","总之","尽力","重来","amr","问题","python","针对","诸多","为什么","彼此","更具","机器人","几百","版本","或者","各样","等","特性","满足","存在","给","使命","标准化","mcu","代码","历史使命","三个","应用层","dds","协作","如","编译系统","产品开发","中间层","相对","高","比","他们","通过","建立","？","单兵","大部分","用于","大幅度","有且","诟病","社区","装修","开发方式","这样","要","通信协议","两者","不断","软件开发","不","驱动","选项","不再","解决","局限","有","架构","1ms","走向","解算","功能","虽然","做","自动","场景","产品化","当然","了","名字","成","熟悉","客户","符合","测试","运动","汽车","最终","毛坯房","不会","独立","核心","也","推倒重来","配置","肯定","充足","担心","这台","理解","这个","呢","机制","厂商","未来","角色","力学","只要","越来越","一样","动力","依然","涌现","最后","小伙","没","前方","还","颠覆","成功经验","表示","整体","切换","总体","大部","第二代","打成","看","百万","大幅","了解","一页","现有","接触","基本","具体","导致","专注","；","保留","指定","长远","一团","多","比如","windows","继续","服务","提供","discovery","教程","流程","如果","省略","大量","编程语言","只是","接口","延迟","放在","局限性","然后","保障","rmw","原有","升级","工具","部头","一种","诞生","编码","运行","ceo","干扰","移植性","讲解","节点","再","精力","公司","性","之后","管理器","幅度","以上","级别","全部","编译器","有线","c++","操作系统","应用","只能","建筑","能够","命令行","时","之前","完成","远比","一边","已经","打交道","周期","这里","ros1","总体而言","可靠性","雷达","更","链接","与","注意","变革","复用","勿躁","开发者","不是","分解","左侧","接收","编码方式","封装","颠覆性","翻地","可读性","绝大","下边","款","面对","广泛应用","能","一定","盖","发","并","提高","后","控制","层面","操作","每","间层","定义","道坎","么","复杂度","经验","二个","安全性","移植","时代","很大","基础","批量生产","房子","尤其","还会","所以","可靠","因为","基本保障","时间","、","市场","最","该","：","同时","控制器","天翻地覆","。","右侧","从而","驾驶","格局","另外","就","频繁","信号","一些","对","ros2","例子","绝大部分","软件系统","唯一","而","由于","同样","限性","发布","真正","主角","小","交道","大家","首先","协议","越来","经常","部署","项目管理","考虑","底层","我们","解密","过程","按照","手机","它","便于","课时","学术研究","调试","发成","二种","这","稳定","全新","适配","不同","实力","名称","但是","不断涌现","换成","借助","里","想要","不难","电脑系统","出错","管理","很多"," ","不过","开始","（","更接","编程","图像","看看","下要","推倒","不能","100ms","有限","嵌入","写","甚至","）","最佳","所示","适合","客户端","迁移","没有","慢慢","一下","相比","基于","加密","为","减少","某","一致","用","随着","走","成本","布式","简称","几点","纠结","消费市场","类似"],"title":"ROS2对比ROS1","title_tokens":["ros2","对比","ros1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2ros1","text":"在学习ROS2之前，你也许听说或使用过ROS1，ROS2从名称上来看，不就是在第二代ROS么，变化能有多大？ 我们就ROS1和ROS2做一个对比，看看这其中的变化到底有多大。","text_tokens":["从","能","就","二代","？","多","过","第二","大","ros2","对比"," ","到底","使用","看看","之前","一个","么","来看","不","的","在","上","你","和","ros1","学习","，","变化","有","我们","也许","第二代","做","其中","就是","这","听说","名称","。","或","ros"],"title":"ROS2对比ROS1","title_tokens":["ros2","对比","ros1"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros1","text":"首先来看第一个问题： 为什么会有ROS2？Why ROS2？ 当然是因为ROS1有一些问题了，具体是什么问题呢？从ROS发展的历史中，我们似乎可以找到答案。 ROS最早的设计目标就是开发这样一款PR2家庭服务机器人，这款机器人绝大部分时间都是独立工作，为了让他具备充足的能力： 它搭载了 工作站级别的计算平台 和各种先进的通信设备，不用担忧算力不够，有足够的实力支持各种复杂的实时运算和处理； 由于是单兵作战，通信绝大部分都自己内部完成，那就可以用有线连接， 保证了良好的网络连接 ，没有丢数据或者黑客入侵的风险； 这台机器人最终虽然小批量生产，但是由于 高昂的成本和售价 ，也只能用于学术研究。 随着ROS的普及，应用ROS的机器人类型已经和PR2机器人有了天翻地覆的问题，也并不具备PR2这样的条件，那原本针对PR2设计的软件框架，就会出现一些问题，比如： 要在资源有限的 嵌入式系统 中运行； 要在 有干扰的地方 保证通信的可靠性； 要做成 产品走向市场 ，甚至用在自动驾驶汽车和航天机器人上。 类似的问题不断涌现，致使更加适合各种机器人应用的新一代ROS诞生了，也就是我们课程的主角——ROS2。","text_tokens":["级别","致使","学术","答案","售价","先进","找到","有线","目标","是","应用","只能","嵌入式","网络","完成","问题","针对","做成","已经","为什么","批量","机器人","保证","各种","的","处理","在","上","或者","研究","ros1","，","可靠性","一代","为了","翻地","绝大","款","一个","运算","单兵作战","数据","从","？","算力","普及","单兵","大部分","不用","更加","能力","并","用于","历史","软件","网络连接","黑客","这样","要","作战","不断","设备","课程","不","批量生产","有","内部","连接","家庭","可靠","因为","走向","设计","虽然","时间","自动","第一","走向市场","框架","当然","市场","了","：","计算","入侵","天翻地覆","pr2","。","新一代","汽车","出现","驾驶","最终","就","会","独立","一些","通信","也","ros2","一款","风险","充足","绝大部分","足够","是因为","这台","由于","类型","—","主角","担忧","不够","呢","系统","小","来看","那","原本","涌现","首先","我们","工作站","具备","大部","丢","它","学术研究","实时","这","都","发展","开发","实力","具体","但是","他","ros","不断涌现","；","搭载","工作","可以","比如","服务","机器","平台","第一个"," ","让","条件","高昂","自己","产品","地方","有限","部分","复杂","嵌入","什么","甚至","和","适合","没有","诞生","运行","良好","干扰","生产","似乎","用","随着","就是","资源","航天","成本","中","支持","最早","why","类似"],"title":"ROS1的局限性","title_tokens":["的","ros1","局限","局限性","限性"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2","text":"ROS2怀揣变革智能机器人时代的历史使命，在设计之初，就考虑到要满足各种各样机器人应用的需求。 多机器人系统 ：未来机器人一定不会是独立的个体，机器人和机器人之间也需要通信和协作，ROS2为多机器人系统的应用提供了标准方法和通信机制。 跨平台 ：机器人应用场景不同，使用的控制平台也会有很大差异，比如自动驾驶汽车中的算力性能肯定比AMR机器人强很多，为了让所有机器人都可以运行ROS2，ROS2可以跨平台运行于Linux、Windows、MacOS、RTOS，甚至是没有任何系统的微控制器（MCU）上，这样我们就不用纠结自己的控制器能不能用ROS了。 实时性 ：机器人运动控制和很多行为策略要求机器人具备实时性，比如机器人要可靠得在100ms内发现前方的行人，或者稳定的在1ms周期内完成运动学、动力学的解算，ROS2为类似这样的实时性需求提供了基本保障。 网络连接 ：无论在怎样的网络环境下，ROS2都可以尽量保障机器人大量数据的完整性和安全性，比如在wifi信号不好的时候数据也要尽力发送过去，在有黑客入侵风险的场景下要对数据进行加密解密。 产品化 ：，大量机器人已经走向我们的生活，未来还会越来越多，ROS2不仅可以用于机器人研发阶段，还可以直接搭载在产品中，走向消费市场，这对ROS2的稳定性、强壮性也提除了巨大挑战。 项目管理 ：机器人开发是一个复杂的系统工程，设计、开发、调试、测试、部署等全流程的项目管理工具和机制，也会在ROS2中体现，更方便我们去开发一款机器人。 要满足这些需求，ROS2的设计和开发工作并不简单，相对手机这样标准化的产品，Android系统也可以尽量做到标准化，但是机器人课时千差万别， 如何能够适合尽量多的机器人，这可能远比开发一个手机系统或者电脑系统更加复杂。 ROS开发者面对的选择有两个，第一个是在ROS1的架构之上，进行修改和优化，类似一个盖好的房子，我们把它打成毛坯房，重新装修翻新一下，但肯定会受制于原本建筑的格局，长远来看并不是最佳选择，他们最终选择了第二种方案，那就是 推倒重来 。 所以ROS2是一个全新的机器人操作系统，在借鉴ROS1成功经验的基础上，对系统架构和软件代码全部进行了重新设计和实现。与ROS1相比，体现在以下几点： 系统架构进行了颠覆性的变化 ，ROS1中所有节点都需要在节点管理器ROS Master的管理下进行工作，一旦Master出现问题，系统就面临宕机的风险，ROS2实现了真正的分布式，不再有Master这个角色，借助一种全新的通信框架DDS，为所有节点的通信提供可靠保障。 软件API进行了重新设计 ，ROS1原有的接口已经无法满足需求，ROS2结合C++最新标准和Python3语言特性，设计了更具通用性的API，虽然导致原有ROS1的代码无法直接在ROS2中运行，但是尽量保留了类似的使用方法，同时提供了大量移植的说明。 编译系统进行了升级 ，ROS1中使用的rosbuild和catkin问题诸多，尤其是针对代码较多的大项目以及Python编写的项目，编译、链接经常会出错，ROS2对这些问题也进行了优化，重新优化后的编译系统叫做ament和colcon，大家在后续的课程中就会体验到新版编译器的使用方法。 这几点只是框架层面，ROS1和ROS2的明显变化，具体细节如何呢？我们继续给大家分解。","text_tokens":["master","以下","细节","各种","的","在","需求","消费","千差万别","把","为了","重新","语言","第二种","动力学","不仅","直接","面临","一个","全","实时性","python3","不用","更加","历史","但","黑客","性能","编译","到","系统工程","无法","进行","强","挑战","好","通用性","框架","跨平台","简单","差异","修改","新版","wifi","出现","怀揣","会","macos","通信","最新","除了","行人","风险","一款","可能","方案","各种各样","系统","体验","那","怎样","体现","受制于","研发","理器","完整性","策略","具备","任何","优化","微控制器","都","编写","开发","较","ros","标准","工作","可以","平台","所有","做到","成功","以下几点","得","借鉴","复杂","和","colcon","ament","过去","就是","rosbuild","中","强壮","android","巨大","不好","第二","是","这些","于","分布式","使用","说明","无论","之上","上","宕机","，","环境","下","尽量","定性","分布","数据","catkin","明显","算力","大","通用","后续","软件","网络连接","api","工程","课程","变化","选择","之初","连接","设计","第一","入侵","发现","去","对系统","提","来看","要求","翻新","毛坯","原本","结合","行为","生活","一旦","以及","项目","个体","之间","实时","时候","完整","实现","方法","叫做","搭载","机器","第一个","rtos","让","智能","自己","linux","产品","阶段","发送","方便","如何","两个","需要","运动学","安全","稳定性","受制","内","电脑","网络","尽力","重来","amr","问题","python","针对","诸多","更具","机器人","或者","各样","等","特性","满足","给","使命","标准化","mcu","代码","历史使命","dds","协作","编译系统","相对","比","他们","？","用于","装修","这样","要","不","不再","有","架构","1ms","走向","解算","虽然","场景","自动","产品化","了","测试","运动","汽车","毛坯房","最终","不会","独立","推倒重来","也","肯定","这个","机制","呢","未来","角色","力学","越来越","动力","前方","还","颠覆","成功经验","打成","纠结","基本","具体","导致","保留","长远","多","比如","windows","继续","提供","流程","大量","只是","接口","保障","原有","升级","工具","一种","运行","节点","性","管理器","全部","编译器","c++","操作系统","应用","能够","完成","远比","已经","周期","ros1","更","链接","与","变革","开发者","不是","分解","颠覆性","面对","能","一定","盖","并","后","控制","层面","操作","经验","安全性","移植","时代","很大","基础","房子","尤其","还会","所以","可靠","基本保障","、","市场","：","同时","控制器","。","驾驶","格局","就","信号","对","ros2","真正","大家","越来","经常","部署","项目管理","考虑","我们","解密","手机","它","课时","调试","二种","这","稳定","全新","不同","但是","借助","电脑系统","出错","管理","很多"," ","（","下要","推倒","不能","100ms","甚至","）","最佳","适合","没有","一下","相比","加密","为","用","布式","几点","建筑","消费市场","类似"],"title":"全新的ROS2","title_tokens":["ros2","的","全新"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#ros2-vs-ros1","text":"","text_tokens":[],"title":"ROS2 vs ROS1","title_tokens":["vs","ros2","ros1"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_1","text":"在这张图中，左侧是ROS1，右侧是ROS2，大家注意看两者最明显的变化，那就是 Master 。 在ROS1中，应用层里Master这个节点管理器的角色至关重要，所有节点都得听它指挥，类似是一个公司的CEO，有且只有一个，如果这个CEO突然消失，公司肯定会成一团乱麻。ROS2把这个最不稳定的角色请走了，节点可以通过另外一套discovery—— 自发现机制 ，找到彼此，从而建立稳定的通信连接。 中间层是ROS封装好的标准通信接口，我们写程序的时候，会频繁和这些通信接口打交道，比如发布一个图像的数据，接收一个雷达的信息，客户端库会再调用底层复杂的驱动和通信协议，让我们的开发变得更加简单明了。 在ROS1中，ROS通信依赖底层的TCP和UDP协议，而在ROS2中，通信协议更换成了更加复杂但也更加完善的 DDS系统 。 如果是在进程内需要进行大量数据的通信，ROS1和ROS2都提供了基于 共享内存 的通信方法，只不过名字不太一样而已。 最下边是系统层，也就是可以将ROS安装在哪些操作系统上，ROS1主要安装在Linux上，ROS2的可选项就很多了， Linux、windows、MacOS、RTOS 都可以。 通过这样对比的方式，我们了解了ROS2的整体架构，如果大家有接触过ROS1，这个框架应该并不难理解，如果大家是从ROS2开始学习，先大致有一个印象，通过后续的学习，就会有更加深入的理解。","text_tokens":["自","master","大致","深入","过","找到","是","这些","操作系统","应用","一套","内","只不过","一团乱麻","打交道","彼此","的","在","上","ros1","，","雷达","信息","注意","把","简单明了","印象","左侧","接收","封装","应用层","dds","下边","中间层","一个","数据","通过","而已","明显","建立","更加","安装","进程","并","有且","操作","后续","间层","但","将","这样","先","通信协议","两者","层","程序","不","驱动","哪些","选项","张图","进行","变化","可选项","架构","有","连接","好","、","框架","最","至关","至关重要","了","简单","udp","名字","共享内存","成","请","客户","不难理解","突然","。","右侧","从而","另外","就","频繁","只有","会","macos","通信","也","ros2","调用","肯定","而","发现","—","依赖","发布","理解","这个","不太","系统","机制","指挥","角色","一样","那","交道","大家","协议","理器","底层","主要","我们","整体","共享","完善","看","它","消失","会成","重要","了解","时候","这","都","稳定","接触","开发","是从","库会","ros","通信接口","里","一团","方法","不难","标准","管理","比如","可以","windows","对比","discovery","提供","可选","很多","rtos","所有"," ","如果","让","大量","不过","乱麻","更换","图像","开始","接口","得","linux","复杂","方式","写","和","客户端","学习","中间","变得","tcp","需要","ceo","基于","一团乱","节点","就是","再","走","公司","中","听","应该","管理器","内存","类似"],"title":"系统架构","title_tokens":["系统","架构"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#dds","text":"ROS2相比ROS1最大的变化，除了省略了Master之外，应该就是通信系统的变化了。ROS1中基于TCP/UDP的通信系统，频繁诟病于延迟、丢数据、无法加密等问题，ROS2中的DDS在通信层面的功能就丰富多了。 DDS其实是物联网中广泛应用的一种通信协议 ，类似于我们常听说的5G通信一样，DDS是一个国际标准，能够实现该标准的软件系统并不是唯一的，所以我们可以选择多个厂家提供的DDS系统，比如这里的OpenSplice、FastRTPS，还有更多厂家提供的，每一家的性能不同，适用的场景也不同。 不过这就带来一个问题，每个DDS厂家的软件接口肯定是不一样的，如果我们按照某一家的接口写完了程序，想要切换其他厂家的DDS，不是要重新写代码么？这当然不符合ROS提高软件复用率的目标。 为了解决这个问题，ROS2设计了一个 ROS Middleware，简称RMW ，也就是指定一个标准的接口，比如如何发数据，如何收数据，数据的各种属性如何配置，都定义好了，如果厂家想要接入ROS社区，就得按照这个标准写一个适配的接口，把自家的DDS给移植过来，这样就把问题交给了最熟悉自家DDS的厂商。对于我们这些用户来讲，某一个DDS用的不爽，只要安装另一个，然后做一个简单的配置，程序一行的都不用改，轻松更换底层的通信系统。 举一个例子，比如我们在产品开发时，可以先用开源版本的DDS满足基本需求，部署交付的产品时，再更换为商业版本更稳定的DDS，这样可以减少开发成本。 总之，DDS的加入，让ROS2系统更加稳定，也更加灵活，当然复杂度也会高一些。这样，我们不用再纠结ROS的通信系统是否稳定、该如何优化等问题，更多精力都可以放在其他三个部分，专注优化我们的机器人应用功能。","text_tokens":["国际标准","master","交付","厂家","来讲","目标","是","这些","还有","应用","于","丰富","5g","是否","能够","总之","之外","不爽","改","时","问题","用户","带来","适用","最大","开源","加入","广泛","机器人","这里","的","在","各种","联网","交给","版本","等","ros1","，","需求","满足","更","给","复用","把","不是","为了","代码","重新","三个","dds","广泛应用","收","产品开发","一个","高","数据","？","每个","发","举","不用","安装","更加","并","提高","常","层面","轻松","属性","开发成本","诟病","每","软件","社区","定义","灵活","这样","要","么","国际","通信协议","先","复杂度","性能","移植","程序","不","无法","解决","opensplice","其实","变化","选择","所以","好","功能","设计","场景","做","、","udp","当然","最","了","该","简单","一行","熟悉","符合","另","商业","。","完","就","频繁","会","一些","通信","也","除了","ros2","配置","肯定","例子","唯一","软件系统","这个","系统","厂商","多个","只要","一样","协议","部署","底层","我们","切换","优化","丢","按照","发成","这","都","听说","一家","适配","自家","稳定","不同","开发","基本","实现","ros","专注","middleware","想要","接入","指定","/","标准","多","比如","可以","提供","机器"," ","省略","不过","如果","让","更换","fastrtps","延迟","接口","得","产品","然后","放在","复杂","部分","其他","写","rmw","如何","一种","相比","tcp","基于","加密","为","减少","某","物","用","就是","再","精力","过来","率","中","成本","对于","简称","纠结","应该","类似"],"title":"DDS通信","title_tokens":["dds","通信"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_2","text":"ROS1应用已经非常广泛，全球有几百万开发者，大家已经熟悉了ROS1的开发方式以及其中的很多概念。ROS2尽量保留了这些概念，便于开发者从ROS1迁移到ROS2。 如果各位熟悉ROS1，这里的概念应该并不陌生，在ROS2中，这些概念依然存在，意义也几乎一致，在本课程的第二个部分，我们就会一一讲解这些概念的含义和使用方法，没有学习过ROS的小伙伴也不用担心。","text_tokens":["概念","保留","从","就","方法","会","陌生","过","也","第二","ros2","并","不用","这些","担心","应用","很多"," ","如果","小伙","使用","开发方式","全球","二个","已经","依然","部分","课程","几百万","方式","到","广泛","不","ros","这里","的","应该","几百","在","和","本","伙伴","ros1","迁移","，","第二个","我们","有","没有","学习","存在","百万","几乎","一一","开发者","小伙伴","以及","便于","一致","讲解","其中","了","尽量","意义","含义","熟悉","中","开发","。","非常","各位","大家"],"title":"核心概念","title_tokens":["概念","核心"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_3","text":"再来看看编码，同样是一个发布者的程序，ROS1和ROS2的实现版本如两个图片所示。 总体而言，ROS2会用到更多面向对象的实现方法和语言特性，从编程语言的角度来讲，难度确实会提高一些，不过当我们迈过这道坎之后，就会发现我们写的程序会更具备可读性和可移植性，也会更接接近真实企业中机器人软件开发的过程。 具体如何编码，大家暂且稍安勿躁，切记不要搬来一本大部头的编程语言教程，一页一页学习，更好的方式是在项目开发的过程中一边用一边学，后续课程我们也会带领大家一步一步来操作。","text_tokens":["来讲","是","不要","一边","一步","机器人","的","在","可移植","版本","ros1","总体而言","，","特性","一本","更","勿躁","难度","语言","可读性","如","一个","从","提高","稍安","更好","图片","后续","软件","可读","操作","道坎","接近","软件开发","移植","课程","程序","企业","对象","确实","当","。","用到","就","会","搬","一些","也","ros2","同样","发现","发布","暂且","面向","我们","迈过","具备","过程","总体","大部","项目","一页","带领","这","可移植性","面向对象","开发","具体","实现","切记","方法","角度","多","机器","教程"," ","不过","更接","编程","编程语言","看看","来","方式","写","和","所示","如何","部头","真实","两个","大部头","学习","编码","移植性","发布者","用","而言","再","中","之后","学","大家"],"title":"编码方式","title_tokens":["编码方式","编码","方式"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.2_ROS2%E5%AF%B9%E6%AF%94ROS1/#_4","text":"最后我们再对比下ROS开发中最为常用的一种工具——命令行。 ROS1中的命令行相对分散，每一个功能都是一个独立的命令，比如rosrun启动某一个节点，rostopic控制话题相关的功能。 ROS2对命令行做了大幅度的集成，所有命令都集成在一个ros2的主命令中，比如ros2 run，表示启动某一个节点，ros2 topic表示话题相关的功能。 除此之外，ros2命令行也会有更多功能，我们在后续教程中陆续揭秘。 好啦，以上，我们把ROS2和ROS1做了对比，总结而言就是： 节点干掉了Master 通信换成了DDS 核心概念没变化 编程难度有上升 如果大家初次上手就选择了ROS2，现有一个大致印象即可，跟随课程，你就会慢慢理解这些特性。","text_tokens":["以上","master","常用","大致","揭秘","是","这些","总结","幅度","命令行","之外","初次","除此之外","的","在","你","ros1","主","，","特性","启动","更","啦","把","印象","下","dds","陆续","一个","相对","大幅度","控制","后续","每","分散","课程","变化","选择","有","好","功能","做","上手","跟随","了","：","命令","上升","。","概念","就","独立","会","对","通信","也","核心","ros2","干掉","—","理解","最为","rosrun","相关","最后","没","即可","我们","表示","除此","大幅","都","现有","开发","话题","ros","换成","topic","比如","对比","教程","所有"," ","如果","编程","rostopic","和","工具","一种","集成","慢慢","某","节点","而言","就是","再","多功能","中","难度","run","大家"],"title":"命令行","title_tokens":["命令","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/","text":"ROS2安装方法 本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。 Linux系统简介 时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。 Ubuntu系统简介 我们后续课程使用到的Linux发行版就是ubuntu系统。 Ubuntu诞生于2004年10月份，每六个月发布一个新版本，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。 Ubuntu虚拟机安装 虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下： 1. 下载系统镜像 下载链接： https://ubuntu.com/download/desktop 2. 在虚拟机中创建系统 3. 设置虚拟机硬盘大小 4. 设置Ubuntu镜像路径 5. 启动虚拟机 6. 设置用户名和密码 7. 等待系统安装 8. 完成安装 Ubuntu系统安装好后，大家可以先随意使用熟悉一下。 ROS2系统安装 接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下： 1. 设置编码 $ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8 2. 添加源 $ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844 3. 安装ROS2 $ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop 4. 设置环境变量 $ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。 ROS2示例测试 为了验证ROS2安装成功，我们可以通过以下示例进行测试。 示例一：命令行示例 先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。 示例二：小海龟仿真示例 再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。 附：虚拟机镜像 为了方便大家入门学习，我们也提供了预装好ROS2软件和教程代码的虚拟机镜像，有需要的小伙伴可以通过以下链接下载： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["ubuntu22.04","master","服务器","两年","数字","乐于","来讲","好后","发行","一直","为例","等等","先要","准备","创建","效果","之外","本相","com","7","现在","以下","除此之外","export","keyrings","预装","用户","适用","开源","www","伙伴","各种","的","在","联网","你","爱好","第二个","变动","啦","启动","把","为了","重新","=","构建","download","baidu","不仅","bashrc","直接","一个","http","安装","个人爱好","lang","将","但","紧随","自行","实践","任何人","性能","程序","到","成为","source","修复","进行","[","apt","探索","好","小伙伴","多任务","试一试","第一次","usr","互联网","18","pro","决定","小海","或","出现","bug","概念","任务","install","macos","会","通信","除了","可能","小海龟","—","依赖","最为","d","还是","各种各样","world","系统","多个","下载","connect","热情","上层","listener","setup","“","failed","路径","主要","这套","用户名","参考","仿真器","任何","重要","都","gnupg","后缀","发展","很","每隔","开发","通讯","ros","个","/","报错","标准","centos","可以","更新","工作","3","&&","hello","人工智能","成功","all","多用","快","来","发扬","激发","和","操作方法","指标","成熟","就是","二句","curl","5","中","支持","一位","常用","海龟","--","命名","第二","rosdistro","是","快速","于","学生","使用","说明","务器","指令","最大","加入","无论","保证","兼容","之上","上","一次","本","，","可视","编辑","环境","deb","算机","其中","en","量","经典","下","领域","talker","如遇","千层","数据","绝对","加上","从","动手做","org","大","通用","https","后续","持续","软件","内核","说干就干","检验","37844","二","先","evaluation","之一","奥义","林纳斯","课程","企业","lsb","选择","当中","订阅","guyuehome","设计","计算机","吸引","衡量","第一",")","一应俱全","光大","请","计算","fedora","多人","命令","exc6","pan","商业","看到","opt","码","左右","操作界面","不太","gen","前先要","分别","原本","月","文件","release",":","起来","强大","镜像","除此","终端","并用","|","6","时候","回到","编辑器","可","叫","实现","他","by","仿真","方法","cpp","叫做","精神","大学","简介","机器","10","介绍","第一个","让","智能","发行版","turtlesim","自己","linux","关注","等待","share","archive","方便","反馈","unix","什么","其他","浏览器","如何","伴随","两个","学习","并且","需要","户名","发布者","应该","run","真器","步骤","desktop","ubuntu20.04","发挥","蕴藏","传输","一套","电脑","是否","网络","keyring","比较","其他软件","问题","俱全","吧","机器人","模式","turtle","虚拟","版本","或者","各样","等","外衣","teleop","gpg","1dvxugmhxlxnsnfdezuxw0g","给","紧随其后","代码","月份","基本相同","dds","os","应用软件","接下来","~","地址","字符串","尚","通过","upgrade","$","？","无论是","接下","上下左右","华丽","这样","出于","界面","软件开发","源","2022","变量","不","第一句","之内","有","只","功能","最好","虽然","做","场景","关于",".","其后","了","名字","技术","下来","分享","熟悉","成","\"","硬盘","版","测试","正常","运动","附","激起","核心","也","开放","其","8","这个","呢","一应","nodes","未来","越来越","一样","唯一标准","依然","小伙","还","位置","表示","dev","了解","示例","接触","入门","1","基本","中将","(","ssl","多","好者","比如","windows","占据","虚拟机","服务","提供","vmware","教程","null","etc","按键","如果","locale","大量","utf","4","出","to","一般","影响","此时","o","原有","升级","一种","node","诞生","六个月","编码","运行","提交","提取","demo","lts","py","讲解","准确","节点","再","1991","公司","节","之后","githubusercontent","humble","芬兰","us","raw","代表","背景","操作系统","应用","动手","年","locales","signed","命令行","时","之前","完成","workstation","_","上下","已经","redhat","密码","这里","key","products","更","维护","链接","真理","与","人工","开发者","各个","者","04","硬件","list","一","放到","architecture","验证","发扬光大","每年","一定","并","爱好者","后","控制","绑定","合适","操作","原理","每","一起","擦掌","大小","点击","行列","资料","浏览","打包","看出","目前","二个","至此","移植","会加","何人","六个","update","print","千层浪","免费","所以","可视化","因为","时间","键盘","、","最","dpkg","tee","：","一石激起千层浪","该","同时","字符","设置","顺序","sudo","。","技术实力","22","另外","就","迅猛","热爱","一些","互联","对","ros2","唯一","发布","已有","arch","2004","main","越来","情况","底层","考虑","echo","我们","添加","过程","提到","环境变","]","一句","多用户","这","大学生","packages","稳定","源代码","第二句","不同","实力","优先","lc","s","但是","ubuntu","想要","采用","随意","收费","管理","”","sources","很多","传播","长期","蓝色"," ","2","开始","bash","试试","有限","编号","摩拳擦掌","个人","以","相同","甚至","如下","适合","没有","一下","普通","新",">","建议","应用程序","-","环境变量","codename","html","大家"],"title":"ROS2安装方法","title_tokens":["安装","ros2","方法"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2","text":"本节，我们一起安装ROS2，安装前先要了解一下ROS2底层最重要的一种操作系统——Linux。","text_tokens":["安装","ros2","操作系统","先要","操作","一起","—","系统","linux","前先要","的","底层","本","一种","，","我们","一下","了解","重要","最","节","。"],"title":"ROS2安装方法","title_tokens":["安装","ros2","方法"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#linux","text":"时间回到1991年，一位热爱计算机的芬兰大学生 林纳斯 ，在熟悉了操作系统原理和unix系统后，决定自己动手做一个，实践是检验真理的唯一标准，说干就干，他参考已有的一些通用标准，重新设计了一套操作系统内核，不仅可以实现多用户、多任务的管理，还可以兼容unix原有的应用程序。最重要的是，他把这套尚不成熟的操作系统分享到了互联网上，并用自己的名字命名了这套系统，也就是 Linux 。 原本出于个人爱好的Linux系统通过互联网快速传播，更多爱好者看到Linux之后，也激发了乐于分享的热情，就把使用过程中的问题和修复方法做了反馈。 一石激起千层浪，越来越多人加入到了Linux维护的行列当中，一个原本功能有限、bug很多的操作系统，快速强大起来， 伴随其中发扬光大的是开源精神 。 与Windows系统收费，或MacOS硬件绑定的模式不同， Linux是一套免费并且开放源代码的操作系统 ，任何人都可以使用或者提交反馈，这就吸引了大量的开发者、爱好者，甚至很多企业，现在，每年对Linux系统提交的代码量已经成为衡量一个大公司技术实力的重要指标之一。 Linux发展迅猛，已经成为了性能稳定的多用户操作系统，也是ROS2依赖的重要底层系统。虽然ROS2目前也支持Windows、MacOS，但对Linux系统的支持最好，在本教程中，我们主要讲解Linux之上的ROS2使用方法，其他系统原理也基本相同。 所以在使用ROS2之前，我们需要先安装Linux，此时会出现另外一个概念—— 发行版 。 什么叫发行版呢？准确来讲，我们提到的 Linux应该叫做操作系统内核 ，并没有可视化界面，发行版就是给这个内核加上华丽的外衣，把操作界面和各种应用软件放到一起，打包成我们安装系统的镜像。 所以一般情况下，我们常用到的Linux系统，都是各种各样的发行版，比如Ubuntu、Fedora、RedHat等等，每一个发行版都有其适用的场景，比如RedHat适合商业应用、CentOS适合服务器、Ubuntu、Fedora适合个人使用等，每一个版本的界面不太一样，但核心都是Linux，操作方法基本相同。","text_tokens":["芬兰","服务器","常用","乐于","来讲","各种","命名","发行","是","操作系统","快速","一套","应用","等等","动手","年","学生","使用","本相","之前","问题","现在","务器","已经","用户","redhat","适用","开源","加入","模式","兼容","的","在","上","联网","或者","本","之上","外衣","爱好","，","可视","各样","等","更","维护","真理","与","给","把","开发者","算机","代码","其中","量","重新","基本相同","下","应用软件","不仅","千层","一个","硬件","尚","通过","加上","放到","？","动手做","发扬光大","每年","大","安装","通用","并","爱好者","后","绑定","个人爱好","操作","原理","软件","一起","内核","说干就干","但","每","华丽","检验","行列","出于","先","实践","打包","任何人","目前","界面","之一","林纳斯","性能","程序","到","不","何人","企业","成为","版本","修复","千层浪","有","当中","免费","所以","功能","最好","设计","做","时间","虽然","计算机","吸引","衡量","、","多任务","场景","最","了","光大","一石激起千层浪","名字","技术","分享","熟悉","计算","互联网","多人","成","决定","fedora","商业","。","或","技术实力","出现","bug","概念","另外","任务","就","激起","迅猛","macos","会","看到","热爱","一些","互联","也","对","ros2","核心","唯一","开放","其","依赖","—","这个","操作界面","各种各样","系统","呢","不太","已有","越来越","热情","唯一标准","原本","一样","越来","还","情况","起来","底层","这套","主要","参考","我们","强大","镜像","过程","任何","提到","并用","重要","回到","多用户","都","大学生","这","发展","源代码","稳定","不同","开发","实力","叫","基本","实现","他","ubuntu","方法","标准","多","好者","管理","精神","可以","大学","windows","收费","叫做","比如","很多","传播","教程","服务"," ","大量","发行版","自己","linux","多用","一般","有限","此时","反馈","unix","发扬","激发","其他","个人","什么","相同","原有","和","甚至","适合","伴随","没有","并且","操作方法","需要","提交","指标","应用程序","成熟","centos","讲解","准确","就是","1991","公司","中","支持","可视化","之后","一位","应该"],"title":"Linux系统简介","title_tokens":["简介","系统","linux"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu","text":"我们后续课程使用到的Linux发行版就是ubuntu系统。 Ubuntu诞生于2004年10月份，每六个月发布一个新版本，用户可以一直免费升级使用，我们常用的浏览器、文件编辑器、通讯软件等一应俱全。在软件开发领域，无论是互联网开发，还是人工智能开发，还是大家关注的机器人开发，Ubuntu都占据绝对重要的位置。 Ubuntu的版本变动比较快，如何选择合适自己使用的版本很重要，因为其中各种软件版本不同会直接影响我们上层应用的移植效果。在选择版本的时候，大家可以关注一下紧随其后的编号，比如Ubuntu22.04。22代表2022年，04表示2022年的4月份发布，除了04还可能会出现的是10，就是10月份发布，所以从数字编号上就可以看出各个版本发布的顺序。 但是这样依然会有很多版本，为了让更多开发者有一个稳定的系统环境，Ubuntu每隔两年的4月份会发布一个长期支持版，后缀会加LTS，保证5年之内持续维护更新，比如Ubuntu20.04 LTS，Ubuntu22.04 LTS，除此之外的版本都是普通版，只维护18个月，所以大家在选择时， 优先考虑长期支持版 。 在本教程中，我们以 Ubuntu22.04 为例进行讲解，大家也可以选择其他长期支持版本。 好了，大家一定已经摩拳擦掌想要试一试Ubuntu了，安装方法很多，如果你之前已经熟悉Linux，建议在电脑上硬盘安装Ubuntu，这样可以发挥出硬件最大的性能，如果你是第一次接触Linux，建议在已有的windows上通过虚拟机安装，未来熟悉之后再考虑硬盘安装。 这里我们主要介绍虚拟机中的安装方法，大家也可以参考课程资料或网络资料，自行考虑硬盘安装。","text_tokens":["ubuntu22.04","常用","两年","数字","代表","ubuntu20.04","发挥","发行","是","一直","为例","应用","于","电脑","年","效果","网络","使用","之外","时","比较","之前","除此之外","俱全","用户","已经","机器人","最大","无论","保证","各种","的","在","上","版本","联网","本","等","你","一次","，","编辑","变动","更","维护","环境","人工","紧随其后","开发者","为了","月份","其中","各个","领域","直接","04","一个","硬件","通过","绝对","从","无论是","一定","安装","合适","后续","每","软件","持续","擦掌","紧随","这样","资料","自行","浏览","看出","软件开发","2022","移植","性能","课程","到","六个","会加","之内","进行","选择","有","免费","所以","只","好","因为","第一","、","其后","一应俱全","试一试","了","第一次","熟悉","互联网","18","硬盘","顺序","版","。","或","22","出现","就","会","互联","除了","也","可能","发布","还是","系统","一应","已有","未来","2004","上层","依然","月","文件","还","位置","主要","考虑","参考","我们","表示","除此","重要","时候","编辑器","都","后缀","稳定","接触","很","每隔","不同","开发","优先","通讯","但是","虚拟","个","ubuntu","想要","方法","多","比如","可以","更新","windows","占据","虚拟机","很多","机器","长期","10","教程","介绍"," ","让","如果","人工智能","智能","发行版","4","自己","linux","出","影响","关注","快","编号","其他","以","摩拳擦掌","浏览器","升级","如何","诞生","六个月","一下","普通","新","建议","lts","讲解","就是","再","5","支持","中","之后","这里","大家"],"title":"Ubuntu系统简介","title_tokens":["简介","ubuntu","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ubuntu_1","text":"虚拟机是一个软件，可以在已有系统之上，构建另外一个虚拟的系统，让多个操作环境同时运行。 这里我们采用的虚拟机软件叫做vmware，下载地址如下，安装步骤和其他软件相同，请大家自行下载并安装： https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html 准备工作完成后，就可以开始系统安装啦，安装步骤如下：","text_tokens":["另外","就","/","采用","步骤","叫做","安装","可以","并","是","https","虚拟机","工作","后","vmware","操作","准备","软件"," ","让","开始","系统","com","已有","多个","下载","其他软件","自行","workstation","完成","evaluation",":","其他","www","相同","这里","之上","在","虚拟","的","如下","和","products","，","我们","啦","环境","运行",".","：","构建","同时","请","pro","-","地址","。","一个","html","大家"],"title":"Ubuntu虚拟机安装","title_tokens":["ubuntu","安装","虚拟","虚拟机"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1","text":"下载链接： https://ubuntu.com/download/desktop","text_tokens":[".","ubuntu","com","/","：","下载","desktop","download","https","链接",":"," "],"title":"1. 下载系统镜像","title_tokens":[".","系统","下载","镜像","1"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2","text":"","text_tokens":[],"title":"2. 在虚拟机中创建系统","title_tokens":[".","在","虚拟","系统","中","虚拟机","创建"," ","2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3","text":"","text_tokens":[],"title":"3. 设置虚拟机硬盘大小","title_tokens":[".","大小","虚拟","3","设置","硬盘","虚拟机"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4-ubuntu","text":"","text_tokens":[],"title":"4. 设置Ubuntu镜像路径","title_tokens":[".","ubuntu","路径","4","镜像","设置"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#5","text":"","text_tokens":[],"title":"5. 启动虚拟机","title_tokens":[".","虚拟","5","启动","虚拟机"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#6","text":"","text_tokens":[],"title":"6. 设置用户名和密码","title_tokens":[".","6","和","用户名","设置","用户","密码","户名"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#7","text":"","text_tokens":[],"title":"7. 等待系统安装","title_tokens":[".","系统","7","安装","等待"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#8","text":"Ubuntu系统安装好后，大家可以先随意使用熟悉一下。","text_tokens":["ubuntu","使用","系统","随意","，","先","熟悉","安装","好后","可以","一下","。","大家"],"title":"8. 完成安装","title_tokens":[".","完成","安装"," ","8"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_1","text":"接下来，我们就可以把ROS2安装到Ubuntu系统中了。安装步骤如下：","text_tokens":["ubuntu","就","步骤","安装","可以","ros2","接下","系统","到","如下","，","我们","把","了","：","下来","中","接下来","。"],"title":"ROS2系统安装","title_tokens":["安装","ros2","系统"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#1_1","text":"$ sudo apt update && sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL = en_US.UTF-8 LANG = en_US.UTF-8 $ export LANG = en_US.UTF-8","text_tokens":["us","$","install","&&"," ","8","locale","lang","locales","utf","gen","_","all","export","update","apt",".","en","=","lc","-","sudo"],"title":"1. 设置编码","title_tokens":[".","设置","编码","1"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#2_1","text":"$ sudo apt update && sudo apt install curl gnupg lsb-release $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $( source /etc/os-release && echo $UBUNTU_CODENAME ) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null 如遇报错“ Failed to connect to raw.githubusercontent.com ”，可参考 https://www.guyuehome.com/37844","text_tokens":["master","raw","--","rosdistro","signed","keyring","com","_","keyrings","www","key","，","gpg","deb","=","os","如遇","list","$","architecture","http","org","https","37844","source","update","print","lsb","[","apt","guyuehome",")",".","dpkg","tee","usr","\"","sudo","install","ros2","d","arch","connect","main","“","release",":","failed","githubusercontent","echo","参考","dev","|","]","gnupg","packages","可","ros","(","by","ubuntu","ssl","/","报错","”","&&","sources","null","etc"," ","to","o","share","archive",">","curl","-","codename"],"title":"2. 添加源","title_tokens":[".","添加","源"," ","2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#3-ros2","text":"$ sudo apt update $ sudo apt upgrade $ sudo apt install ros-humble-desktop","text_tokens":["update","upgrade","$","install","desktop","apt","-","sudo","humble","ros"," "],"title":"3. 安装ROS2","title_tokens":[".","安装","3","ros2"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#4","text":"$ source /opt/ros/humble/setup.bash $ echo \" source /opt/ros/humble/setup.bash\" >> ~/.bashrc 至此，ROS2就已经在系统中安装好了。","text_tokens":["$","就","/","安装","ros2","opt"," ","系统","bash","已经","至此","setup","source","在","echo","，",">","好","。",".","了","中","\"","~","bashrc","humble","ros"],"title":"4. 设置环境变量","title_tokens":[".","环境变","4","设置","环境","环境变量","变量"," "]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#ros2_2","text":"为了验证ROS2安装成功，我们可以通过以下示例进行测试。","text_tokens":["通过","为了","成功","示例","验证","进行","，","我们","以下","安装","ros2","可以","测试","。"],"title":"ROS2示例测试","title_tokens":["示例","测试","ros2"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_1","text":"先来试试ROS2最为重要的底层通信系统DDS是否正常吧。 启动第一个终端，通过以下命令启动一个数据的发布者节点： $ ros2 run demo_nodes_cpp talker 启动第二个终端，通过以下命令启动一个数据的订阅者节点： $ ros2 run demo_nodes_py listener 如果“Hello World”字符串在两个终端中正常传输，说明通信系统没有问题。","text_tokens":["通过","$","正常","cpp","通信","第二","ros2","”","传输","是否","第一个"," ","如果","最为","发布","hello","world","系统","nodes","_","问题","以下","先","说明","试试","二个","listener","吧","来","“","的","在","底层","两个","，","第二个","没有","启动","订阅","终端","发布者","第一","demo","py","重要","节点","：","dds","者","talker","中","字符","命令","字符串","。","一个","run","数据"],"title":"示例一：命令行示例","title_tokens":["一","命令行","示例","：","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_2","text":"再来试一试ROS中的经典示例——小海龟仿真器。 启动两个终端，分别运行如下指令： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 第一句指令将启动一个蓝色背景的海龟仿真器，第二句指令将启动一个键盘控制节点，在该终端中点击键盘上的“上下左右”按键，就可以控制小海龟运动啦。 关于小海龟中蕴藏的ROS奥义，我们在后续教程中将持续探索。 至此，ROS2安装成功。","text_tokens":["仿真","$","就","海龟","第二","run","ros2","背景","”","可以","蕴藏","控制","安装","小海龟","蓝色","后续","教程","按键"," ","—","将","左右","点击","持续","成功","上下左右","turtlesim","_","上下","分别","奥义","指令","至此","来","“","第一句","的","如下","turtle","key","在","node","两个","上","，","teleop","我们","运动","仿真器","启动","啦","探索","运行","终端","关于","第一","键盘","试一试","一句","节点","再","经典","示例","：","二句","该","第二句","中","小海","中将","。","一个","ros","真器"],"title":"示例二：小海龟仿真示例","title_tokens":["仿真","示例","：","海龟","二","小海","小海龟"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.3_ROS2%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/#_3","text":"为了方便大家入门学习，我们也提供了预装好ROS2软件和教程代码的虚拟机镜像，有需要的小伙伴可以通过以下链接下载： 链接： https://pan.baidu.com/s/1DVxUgMhXlxnsnfdEZuxw0g 提取码：exc6","text_tokens":["通过","/","也","ros2","可以","https","虚拟机","提供","教程","软件"," ","码","com","下载","以下","预装","方便",":","小伙","伙伴","的","和","虚拟","学习","，","我们","有","镜像","需要","链接","好","1dvxugmhxlxnsnfdezuxw0g","提取","小伙伴",".","为了","代码","了","：","入门","baidu","exc6","pan","s","大家"],"title":"附：虚拟机镜像","title_tokens":["虚拟","：","镜像","虚拟机","附"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/","text":"ROS2命令行操作 在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。 Linux中的命令行 类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。 启动方式 回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。 常用命令操作 我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。 ROS2中的命令行 ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。 运行节点程序 想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 查看节点信息 当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim 查看话题信息 当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose 发布话题消息 想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\" 发送服务请求 一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\" 发送动作目标 想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\" 录制控制命令 系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["消息","来讲","款式","笔记本电脑","一直","为例","移入",",","创建","初次","语法","复制","段","用户","兴趣","令人发指","各种","的","在","商场","你","多到","11","需求","启动","啦","40","把","枯燥","转","每次","直接","一个","geometry","17","pub","pose","不用","复现","将","但","黑客","灵活","专门","买","一二","到","程序","'","angular","怎么","进行","参数","精心设计","ctrl","确实","[","知道","好","记忆","试一试","play","第一次","spawn","录制","小海","另","感受","用到","或","科幻","概念","播放","根据","感兴","会","至于","可能","调用","忙","小海龟","—","msg","还是","系统","体验","多个","“","类似","原因","路径","现出","主要","二十","找","子","仿真器","快捷","重要","推出","都","很","目标目录","约束","话题","被","cmd","ros","多种","/","1.8","工作","可以","3","源文件","看似","所有","帮上","魅力","改名","bag","来","方式","和","新建","孤单","x","就是","中","总有","及其","常用","做好","海龟","深入","既","--","案例","是","这些","还有","于","send","使用","衣服","mkdir","目录","alt","子目","一步","指令","无论","定制","name","产生","上","一次","本","，","可视","编辑","具体操作","信息","至今","下","数据","绝对","加上","轻松","软件","及","一二十个","布料","2.0","当前工作","先","又","0.0","详细","哪些","选择","死机","商家","设计","第一","常用命令","rotate","info","右键","命令","逛来逛去","背","有点","看到","t","目的","搜索","rotateabsolute","去","不太","结合","文件",":","令人","即可","起来","goal","查看","终端","turtle1","硬","这种","时候","带领","回到","编辑器","动作","保持","实现","仿真","topic","vel","角度","叫做","手","呈现","第一个","让","turtlesim","自己","linux","发送","度高","什么","其他","如何","学习","需要","rm","感兴趣","0.2","查","十个","…","对于","列出","一件","集成","run","y","真器","例如","大致","目标","一系列","适应","电脑","复制到","感觉","请求","问题","既定","所在","为什么","不可","逛来","一点","鼠标","turtle","call","或者","等","teleop","干什么","满足","很少","后边","db3","科幻电影","不到","接下来","改变","快捷键","通过","若","$","？","接下","体操","则","电影","件夹","这样","要","rate","2022","列表","不","选项","文件名称","解决","完全","材料","有","功能","虽然","场景","总","跟","35",".","cd","了","下来","成","受","熟悉","动","\"","record","正常","目","核心","也","呀","数量","想","里边","这个","呢","机制","难以","未来","其上","一样","逛去","还","自主","表示","ls","了解","现有","接触","1","显示","具体","本节","均","保留","指定","地","多","比如","继续","{","服务","提供","子目录","如果","pwd","+","只是","发指","出","统管","此时","原有","死记","工具","尝试","一种","此","node","cp","内容","运行","拷贝到","容易","节点","再","某段","觉得","文件名","以上","详细信息","}","service","rosbag","背景","系统管理员","应用","必不可少","z","从来","能够","action","命令行","之前","完成","_","terminal","一边","已经","想象","这里","异常","key","更","链接","与","不一","rosbag2","gedit","不是","规则","04","并不一定","list","这项","一","srv","哪","一定","并","管理员","twist","后","控制","操作","每","一起","笔记","拷贝","片段","看不到","不变","权限","<","笔记本","二十个","所以","可视化","因为","标目","键盘","、","theta","该","：","字符","系列","sudo","。","就","输入","一些","对","一二十","ros2","麻烦","绝对路径","深色","执行","发布","呈现出","体会","msgs","小","打开","炫酷","linear","死记硬背","什么样","echo","我们","实验","便捷","服装","它","调试","]","这","文件夹","随身带","不同","名称","0","但是","mv","想要","精心","太","管理","改了","”","很多"," ","不过","由","2","删除","当前","看看","一系","实验室","以","主目录","相同","看中","如下","absolute","而是","进一步","没有","慢慢","一下",">","为","某","写字","某个","用","随着","窗口","一只","随身","-","大家"],"title":"ROS2命令行操作","title_tokens":["ros2","操作","命令","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2","text":"在之前运行小海龟案例的时候，我们接触到了ROS2中一种重要的调试工具—— 命令行 ，大家如果第一次使用，可能会有点不太适应，本节将带领大家进一步使用ROS2中的更多命令，随着学习的深入，大家一定可以感受到命令行的魅力。","text_tokens":["海龟","会","有点","多","深入","一定","案例","ros2","可能","可以","小海龟","适应","—"," ","如果","将","命令行","使用","不太","之前","魅力","一步","到","的","在","工具","一次","一种","进一步","，","我们","学习","更","运行","。","第一","重要","调试","时候","带领","了","第一次","随着","接触","中","命令","小海","感受","本节","大家"],"title":"ROS2命令行操作","title_tokens":["ros2","操作","命令","命令行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#linux","text":"类似于科幻电影中的片段，命令行操作异常炫酷，但是其上手并不容易。为什么这样一种操作看似并不便捷的方式会被一直保留至今呢？无论对于Linux还是ROS来讲，都是必不可少的，大家先来想象一种场景。 比如我们去商场买衣服，商场里边的衣服虽然多，但并不是每次都可以满足我们的需求，总有一些时候我们逛来逛去就是哪一件都没有看中，此时你看到某一个商家推出服装定制服务，可以根据现有的所有款式，结合我们自己的需求，自主定制，虽然操作起来麻烦一点，但是灵活度高呀，你想要什么样的就可以设计成什么样的，完全不受既定规则的约束。 在这种场景中，其他商家为我们呈现出已经做好的衣服，就类似于可视化软件一样，都是被精心设计的，但是并不一定能够完全解决我们的问题，这里定制服务中的各种布料、工具等就类似命令行，我们可以使用这些材料和工具灵活定制各种功能，约束就小很多了。","text_tokens":["做好","来讲","款式","是","一直","这些","于","必不可少","能够","命令行","使用","衣服","问题","既定","已经","为什么","不可","想象","无论","逛来","定制","一点","这里","的","异常","商场","你","在","各种","等","，","可视","需求","满足","不一","不是","至今","科幻电影","规则","每次","并不一定","一个","哪","？","一定","并","电影","操作","软件","但","布料","灵活","这样","片段","先","买","不","解决","完全","材料","精心设计","可视化","功能","虽然","场景","商家","设计","、","了","成","受","命令","逛来逛去","。","科幻","根据","就","会","看到","一些","呀","麻烦","里边","还是","去","呈现出","呢","小","其上","一样","结合","炫酷","逛去","类似","现出","起来","自主","什么样","我们","便捷","服装","这种","时候","推出","都","现有","约束","但是","被","ros","想要","保留","精心","多","比如","可以","服务","很多","手","看似","呈现","所有"," ","自己","linux","此时","来","度高","什么","方式","其他","看中","和","工具","一种","没有","为","某","容易","就是","中","总有","对于","一件","大家"],"title":"Linux中的命令行","title_tokens":["的","命令行","linux","中","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_1","text":"回到命令行来，一系列的命令都是通过字符的方式输入的，怎么输入呢，并不是使用写字本，而是使用专门的软件，叫做 Terminal，终端 。 启动终端的方式有很多种： 在应用列表中打开 快捷键Ctrl+Alt+T打开 鼠标右键选择打开终端 打开后这个深色背景的窗口就是终端，因为都是命令的输入，所以我们很少会用到鼠标，这也是为什么科幻电影中看到的黑客，笔记本电脑随身带，但是从来看不到鼠标的原因。 初次上手，大家一定会觉得命令行既枯燥，又难以记忆，这很正常，随着我们对这项工具的熟悉，大家一定可以慢慢体会到命令行操作的魅力所在。 至于命令行指令及功能参数的数量，确实多到令人发指，不过不用死机硬背，我们常用的命令也就一二十个，其他命令在需要用的时候搜索一下即可。","text_tokens":["常用","既","笔记本电脑","背景","是","一系列","应用","电脑","从来","命令行","使用","初次","alt","terminal","所在","为什么","指令","令人发指","鼠标","的","在","上","多到","本","，","启动","很少","不是","枯燥","科幻电影","不到","快捷键","这项","通过","一定","不用","并","后","电影","操作","软件","及","笔记","一二十个","黑客","专门","又","看不到","列表","一二","到","笔记本","怎么","二十个","参数","选择","有","ctrl","确实","死机","所以","因为","功能","记忆","：","右键","字符","熟悉","命令","系列","。","用到","正常","科幻","背","输入","就","会","看到","对","t","也","至于","数量","一二十","搜索","深色","这个","体会","呢","难以","打开","令人","原因","即可","二十","我们","终端","快捷","硬","时候","回到","都","这","很","随身带","但是","多种","叫做","可以","手"," ","不过","+","发指","魅力","一系","来","方式","什么","其他","工具","而是","慢慢","一下","需要","写字","用","随着","就是","窗口","十个","中","觉得","随身","大家"],"title":"启动方式","title_tokens":["启动","方式"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_2","text":"我们先来体验一下Linux的常用命令，找找感觉。 cd 语法：cd <目录路径> 功能：改变工作目录。若没有指定“目录路径”，则回到用户的主目录 pwd 语法：pwd 功能：此命令显示出当前工作目录的绝对路径 mkdir 语法：mkdir [选项] <目录名称> 功能：创建一个目录/文件夹 ls 语法：ls [选项] [目录名称…] 功能：列出目录/文件夹中的文件列表 gedit 语法：gedit <文件名称> 功能：打开gedit编辑器编辑文件，若没有此文件则会新建 mv 语法：mv [选项] <源文件或目录> <目地文件或目录> 功能：为文件或目录改名或将文件由一个目录移入另一个目录中 cp 语法：cp [选项] <源文件名称或目录名称> <目的文件名称或目录名称> 功能：把一个文件或目录拷贝到另一文件或目录中，或者把多个源文件复制到目标目录中 rm 语法：rm [选项] <文件名称或目录名称…> 功能：该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变 sudo 语法：sudo [选项] [指令] 功能：以系统管理员权限来执行指令 这些命令大家不需要死记硬背，未来一边用一边查，用的多了，就会熟悉。","text_tokens":["常用","目标","这些","系统管理员","移入","创建","复制到","感觉","语法","mkdir","目录","一边","复制","用户","子目","指令","的","或者","，","编辑","链接","把","gedit","下","改变","一个","若","一","绝对","管理员","则","将","及","拷贝","件夹","当前工作","先","不变","列表","权限","文件名称","选项","不","<","[","功能","标目","常用命令","cd","了","该","：","熟悉","命令","另","sudo","。","或","就","会","目","目的","也","绝对路径","执行","系统","体验","多个","未来","打开","“","文件","路径","死记硬背","找","我们","ls","它","]","回到","编辑器","文件夹","目标目录","名称","显示","保持","mv","均","指定","/","地","多","管理","工作","可以","”","源文件","子目录","所有"," ","由","pwd","删除","当前","只是","linux","出","统管","改名","来","以","主目录","原有","死记","此","新建","没有","cp","一下","rm","需要",">","为","某个","用","拷贝到","查","中","…","对于","及其","列出","文件名","大家"],"title":"常用命令操作","title_tokens":["常用命令","常用","操作","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#ros2_1","text":"ROS2命令行的操作机制与Linux相同，不过所有操作都集成在一个ros2的总命令中，后边第一个参数表示不同的操作目的，比如node表示对节点的操作，topic表示对话题的操作，具体操作干什么，还可以在后边继续跟一系列参数内容。 接下来我们就以小海龟仿真为例，一起感受下ROS2命令行的主要功能，也对ROS2中的核心概念有一个大致了解。","text_tokens":["仿真","概念","topic","就","海龟","大致","对","核心","目的","比如","ros2","可以","继续","接下","也","一系列","为例","体操","小海龟","操作","第一个","所有"," ","不过","一起","命令行","机制","linux","一系","什么","以","相同","还","的","在","主要","node","，","参数","表示","具体操作","干什么","我们","有","内容","与","功能","感受","总","第一","跟","后边","了解","节点","都","下","下来","中","不同","命令","接下来","小海","话题","系列","具体","。","一个","集成"],"title":"ROS2中的命令行","title_tokens":["的","命令行","中","ros2","命令"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_3","text":"想要运行ROS2中某个节点，我们可以使用ros2 run命令进行操作，例如我们要运行海龟仿真节点和键盘控制节点： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["仿真","想要","$","例如","海龟","ros2","可以","控制","操作"," ","使用","turtlesim","要","_","和","turtle","key","node","进行","，","我们","teleop","运行","键盘","某个","节点","：","中","命令","run"],"title":"运行节点程序","title_tokens":["程序","节点","运行"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_4","text":"当前运行的ROS系统中都有哪些节点呢？可以这样来查看： $ ros2 node list 如果对某一个节点感兴趣，加上一个info子命令，就可以知道它的详细信息啦： $ ros2 node info /turtlesim","text_tokens":["加上","$","就","感兴","详细信息","？","/","对","可以","ros2"," ","如果","系统","当前","呢","这样","一个","turtlesim","兴趣","详细","来","哪些","的","node","，","知道","有","子","信息","啦","运行","查看","感兴趣","某","它","info","节点","都","：","中","命令","list","ros"],"title":"查看节点信息","title_tokens":["信息","节点","查看"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_5","text":"当前系统中都有话题呢，使用如下命令即可查看： $ ros2 topic list 还想看到某一个话题中的消息数据，加上echo子命令试一试： $ ros2 topic echo /turtle1/pose","text_tokens":["加上","topic","$","/","消息","看到","pose","想","ros2"," ","使用","系统","当前","呢","一个","还","即可","如下","的","echo","，","有","子","查看","某","turtle1","试一试","都","：","中","命令","话题","list","数据"],"title":"查看话题信息","title_tokens":["信息","话题","查看"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_6","text":"想要控制海龟动起来，我们还可以直接通过命令行发布话题指令： $ ros2 topic pub --rate 1 /turtle1/cmd_vel geometry_msgs/msg/Twist \"{linear: {x: 2.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 1.8}}\"","text_tokens":["通过","geometry","想要","topic","$","/","}","1.8","海龟","--","vel","pub","可以","ros2","twist","{","控制","z",","," ","msg","发布","命令行","2.0","_","msgs","rate","0.0","指令","linear",":","还","angular","起来","，","我们","话题","turtle1","x","：","动","\"","命令","1","直接","cmd","y"],"title":"发布话题消息","title_tokens":["发布","消息","话题"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_7","text":"一只海龟太孤单，仿真器还提供改了一个服务——产生海龟，我们试一试服务调用，再来一只海龟： $ ros2 service call /spawn turtlesim/srv/Spawn \"{x: 2, y: 2, theta: 0.2, name: ''}\"","text_tokens":["仿真","srv","太","$","/","}","海龟","service","改了","调用","ros2","{","服务","提供",",","—"," ","2","turtlesim","来",":","name","还","产生","'","call","，","我们","仿真器","0.2","孤单","试一试","x","theta","再","：","spawn","\"","一只","一个","y","真器"],"title":"发送服务请求","title_tokens":["服务","请求","发送"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_8","text":"想要让海龟完成一个具体动作，比如转到指定角度，仿真器中提供的这个action可以帮上忙，通过命令行这样发送动作目标： $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"theta: 3\"","text_tokens":["通过","仿真","想要","指定","$","/","海龟","角度","比如","可以","目标","ros2","3","忙","提供","帮上","让","action"," ","这个","send","命令行","rotateabsolute","完成","这样","_","turtlesim","发送","到",":","absolute","的","goal","，","仿真器","rotate","turtle1","theta","：","动作","中","\"","转","命令","具体","一个","真器"],"title":"发送动作目标","title_tokens":["动作","目标","发送"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.4_ROS2%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/#_9","text":"系统运行中的数据有很多，如果想要把某段数据录制下来，回到实验室再复现这段数据如何？ROS2中的rosbag功能还是很好用的，轻松实现数据的录制与播放： $ ros2 bag record /turtle1/cmd_vel $ ros2 bag play rosbag2_2022_04_11-17_35_40/rosbag2_2022_04_11-17_35_40_0.db3 以上就是ROS2中我们常用的命令啦，每一个命令的子命令还有很多，大家可以自己尝试看看。","text_tokens":["以上","想要","播放","$","/","常用","？","vel","17","rosbag","ros2","可以","轻松","很多","还有","每","复现","如果"," ","还是","系统","看看","_","自己","段","bag","2022","实验室","cmd","大家","的","尝试","如何","11","，","我们","实验","有","子","啦","40","运行","好","功能","与","rosbag2","把","35","turtle1",".","用","db3","play","回到","再","某段","这","：","下来","就是","很","中","record","录制","命令","-","04","0","。","一个","实现","数据"],"title":"录制控制命令","title_tokens":["命令","录制","控制"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","text":"ROS2开发环境配置 ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。 Git git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git 下载教程源码 《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。 VSCode Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download VSCode插件配置 为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。 中文语言包 Python插件 C++插件 CMake插件 vscode-icons ROS插件 Msg Language Support Visual Studio IntelliCode URDF Markdown All in One VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["以上","language","推荐","不开","c++","是","这些","操作系统","等等","应用","丰富","快速","准备","年","一系列","使用","冲突","com","完成","常听到","_","离不开","千万","python","搭建","审核","in","成千","机器人","开源","广泛","这里","的","在","2015","版本","非常简单","，","特性","编辑","tutorials","studio","更","环境","链接","给","与","无限","》","记事本","人工","开发者","网站","下载方式","记事","两款","代码","略显","visualstudio","为了","组件","download","语言","每次","广泛应用","直接","urdf","一个","硬件","vscode","linus","理工","利器","而生","$","源码","？","安装","并","https","操作","合并","软件","后续","但","语言包","千上万","件夹","这样","visual","浏览","先","编译","课程","成为","驱动","不","修复","进行","有","apt","因","所以","guyuehome","code","好","功能","自带","设计","做","自动","只",".","、","码云","讲","最","简单","了","一行","：","搜索","markdown","命令","sudo","系列","。","上万","one","bug","不会","就","听到","install","另外","会","macos","几千","一些","看到","也","扩展","ros2","配置","肯定","git","可能","一款","高效","里边","微软","有些","官方网","—","msg","support","系统","呢","管理软件","已有","行","多个","下载","喜欢","众多","21","文件",":","还","icons","国内","迅速","官方网站","这款","我们","轻量","强大","切换","贡献","查看","终端","插件","以及","管理工具","之间","哪里","重要","项目","推出","编辑器","示例","都","增加","编写","发展","这","变更","文件夹","github","不同","源代码","开发","入门","调试","具体","被","cmake","ros","开发工具","成千上万","/","方法","神兵","多","管理","比如","可以","windows","提供","很多","机器","教程","所有"," ","让","如果","大量","便于","判断","all","linux","出","自己","几千万","复杂","一系","方式","个人","clone","浏览器","和","工具","如何","gitee","之父","集成","中文","需要","内容","新","提交","人","官方","用","中会","中","支持","作为","网上","intellicode","功能强大","简称","之后","-","非常","《","大家"],"title":"ROS2开发环境配置","title_tokens":["ros2","开发","环境","配置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros2","text":"ROS机器人开发肯定离不开代码编写，我们课程中会给大家提供大量示例源码，这些代码如何查看、编写、编译呢？我们需要先做一些准备，完成开发环境的配置，给大家推荐两款重要的开发工具——vscode和git。","text_tokens":["开发工具","源码","？","一些","推荐","不开","配置","肯定","git","这些","提供","机器","准备","—","大量","呢","完成","离不开","先","编译","课程","机器人","的","和","工具","如何","，","我们","需要","环境","给","查看","做","、","两款","代码","重要","示例","编写","中会","开发","。","vscode","ros","大家"],"title":"ROS2开发环境配置","title_tokens":["ros2","开发","环境","配置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#git","text":"git是一个 版本管理软件 ，也是因Linux而生。 Linux发展迅速，成千上万人都会贡献代码，这些代码有些是修复bug的，有些是贡献新硬件驱动的，有些是增加系统新特性的，几千万行的代码人工一行一行审核合并肯定是不可能的，这就需要有一款软件，可以高效管理所有提交的代码，让开发者看到每次提交变更的代码具体是哪里，自动判断会不会有已有代码冲突，以及在多个不同版本之间切换等等功能，所以Linux之父Linus就设计并开发了这款版本管理工具——git，之后也被广泛应用，比如我们常听到的开源项目网站Github，和国内的码云Gitee，都在使用git工具进行众多开源项目的内容管理。 Linux中安装git的方法非常简单，大家直接在终端中使用这一行命令就可以完成安装。 $ sudo apt install git","text_tokens":["是","这些","等等","应用","使用","冲突","完成","常听到","千万","审核","成千","开源","广泛","的","在","版本","非常简单","，","特性","人工","开发者","网站","代码","每次","广泛应用","直接","硬件","一个","linus","理工","而生","$","安装","并","合并","软件","千上万","驱动","不","修复","进行","有","apt","因","所以","功能","设计","自动","码云","简单","了","一行","命令","sudo","。","上万","bug","不会","就","听到","install","会","几千","看到","也","可能","git","肯定","一款","高效","有些","—","系统","管理软件","已有","行","多个","众多","国内","迅速","这款","我们","切换","贡献","终端","以及","管理工具","之间","哪里","项目","都","增加","这","变更","发展","github","不同","开发","具体","被","成千上万","方法","管理","比如","可以","所有"," ","让","判断","linux","几千万","和","工具","gitee","之父","需要","内容","新","提交","人","中","之后","非常","大家"],"title":"Git","title_tokens":["git"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_1","text":"《ROS2入门21讲》课程源码的下载方式： $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 下载好的课程代码是这样的，里边有很多文件夹，文件夹中还会有更多文件夹和代码文件，如果用系统自带的文件浏览器和记事本查看，就略显复杂，这里推荐另外一个集成开发环境——VSCode。","text_tokens":["$","就","/","另外","源码","会","多","推荐","ros2","git","https","是","里边","很多"," ","如果","—","系统","com","件夹","下载","_","这样","浏览","21","复杂","vscode","课程","文件",":","方式","clone","还","的","和","浏览器","这里","，","gitee","tutorials","有","更","集成","guyuehome","环境","好","查看","自带","》","记事本","记事","下载方式",".","略显","讲","代码","用","：","文件夹","中","入门","开发","。","一个","《"],"title":"下载教程源码","title_tokens":["下载","源码","教程"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode","text":"Visual Studio Code，简称VSCode，是微软在2015年推出的一个轻量但功能强大的源代码编辑器，支持 Windows、Linux和 macOS操作系统，扩展组件非常丰富，可以快速搭建成为项目开发的神兵利器。 官方网站： https://code.visualstudio.com/ 下载链接： https://code.visualstudio.com/Download","text_tokens":["/","macos","神兵","扩展","利器","微软","windows","是","可以","操作系统","快速","官方网","丰富","https","操作","年"," ","但","系统","com","下载","visual","linux","搭建","vscode","成为",":","的","在","2015","和","官方网站","，","编辑","studio","轻量","强大","功能强大","code","链接","功能","网站","官方",".","、","项目","代码","visualstudio","推出","编辑器","：","组件","源代码","download","支持","开发","简称","。","一个","非常"],"title":"VSCode","title_tokens":["vscode"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode_1","text":"为了便于后续ROS2的开发与调试，我们还可以安装一系列插件，无限扩展VSCode的功能。","text_tokens":["扩展","安装","ros2","可以","一系列","后续","一系","还","的","，","我们","与","无限","功能","插件","为了","便于","调试","开发","系列","。","vscode"],"title":"VSCode插件配置","title_tokens":["插件","vscode","配置"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#_2","text":"","text_tokens":[],"title":"中文语言包","title_tokens":["中文","语言包","语言"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#python","text":"","text_tokens":[],"title":"Python插件","title_tokens":["插件","python"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#c","text":"","text_tokens":[],"title":"C++插件","title_tokens":["插件","c++"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#cmake","text":"","text_tokens":[],"title":"CMake插件","title_tokens":["插件","cmake"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#vscode-icons","text":"","text_tokens":[],"title":"vscode-icons","title_tokens":["vscode","icons","-"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#ros","text":"","text_tokens":[],"title":"ROS插件","title_tokens":["插件","ros"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#msg-language-support","text":"","text_tokens":[],"title":"Msg Language Support","title_tokens":["support","language"," ","msg"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#visual-studio-intellicode","text":"","text_tokens":[],"title":"Visual Studio IntelliCode","title_tokens":["visual","intellicode"," ","studio"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#urdf","text":"","text_tokens":[],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/1.%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/1.5_ROS2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/#markdown-all-in-one","text":"VSCode支持的插件众多，以上只作为个人推荐，大家也可以在网上搜索，配置出自己最喜欢的开发环境。","text_tokens":["以上","推荐","也","搜索","可以","配置","喜欢","自己","出","众多","个人","的","在","，","环境","只","插件","最","支持","网上","作为","开发","。","vscode","大家"],"title":"Markdown All in One","title_tokens":["all","one","markdown","in"," "]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/","text":"DDS Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。 通信模型 DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。 DDS DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。 什么是DDS 好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是Data Distribution Service，也就是数据分发服务，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。 DDS在ROS2中的应用 DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。 质量服务策略QoS DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是Domain，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为数据提供者和接收者之间的合约。 具体会有哪些策略？比如这个列表中描述的DEADLINE策略，表示通信数据必须要在每次截止时间内完成一次通信，HISTORY策略，表示针对历史数据的一个缓存大小，RELIABILITY策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式。 还有这个DURABILITY，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。 案例一：在命令行中配置DDS 我们先来试一试在命令行中配置DDS的参数。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort $ ros2 topic info /chatter --verbose 案例二：DDS编程示例 接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。 运行效果 $ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub 发布者代码解析 learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , }, 订阅者代码解析 learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], }, 参考链接 DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们课上主要带领大家认识DDS，更多使用方法和相关内容，课程配套的教程中会有介绍，大家也可以参考这里的链接进行学习。 https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["忽略","服务器","小组","import","消息","模块","为例","必须",",","创建","4g","效果","design","像是","com","publish","价值","交换","现在","生态","用户","兴趣","优势","树莓","开源","程度","www","各种","的","在","处理","你","避免","scripts","交通","传送","需求","啦","初始化","主讲人","》","原则","把","四种","为了","coding","=","语言","第二种","垂直","每次","直接","许多","bv12z4y167w2","一个","python3","举","神经网络","pub","不用","更加","能力","日志","历史","publishing","将","但","关闭","服务端","收到","黑客","灵活","专门","html","#","性能","编译","到","成为","程序","对象","无法","'","流畅","进行","其实","参数","知道","[","with","好","框架","试一试","至关","保证数据","人机","usr","航空","当","或","一新","填充","出现","根据","感兴","只有","会","通信","包含","可能","—","msg","最为","还是","不管","函数","系统","world","多个","神经网","样","众多","那","21","上层","listener","setup","“","建模语言","相关","宗旨","接口标准","完整性","焕然一新","主要","参考","终于","different","策略","作者","优化","__","定位","重要","都","高速","占用","编写","听说","很","开发","能源","话题","ros","middleware","/","焕然","标准","42","可以","所有","hello","到底","统一","得","bin","复杂","来","方式","规模","点对点","和","sub","无用","连接数","分组","过去","就是","资源","向","中会","中","那个","作为","《","组成","合约","专利","四大","不好","相当","callback","常用","--","先进","过","第二","案例","是","这些","还有","快速","于","丰富","分布式","使用","learning","结构","说明","广播","增多","这么","务器","id","一步","指令","双方","广泛","保证","无论","兼容","之上","加入","上","一次","课","任","我","提供者","主","，","none","信息","环境","broker","subscription","en","刚才","下","尽量","领域","%","分布","受到","history","通路","无人机","数据","明显","每个","第三","org","可信","https","更好","软件","同一个","二","先","reliability","working","课程","企业","哪些","互相","变化","选择","连接","订阅","guyuehome","空间","处理速度","设计","晚",")","第一","info","容性","至关重要","处","命令","商业","某一","multiple","的话","冰山一角","有点","类型","args","durability","定时器","行","提","来看","要求","第四","遥控","截止","文件",":","模型","行为","架构图","火锅","强制","一旦","中间件","库","之间","这种","实时","时候","它们","带领","动作","可","派","完整","高通","实现","通道","topic","databus","方法","差别","机器","介绍","舰船","全局","让","reliable","默认","自己","等待","部分","发送","什么","其他","速度","data","如何","真实","而且","学习","中间","并且","需要","说了半天","上边","古月","感兴趣","集中处理","掉","第三种","发布者","destroy","而言","最早","列出","应该","才能","非常","run","成立","一角","欢迎","尽可能","找到","传输","一套","强调","5g","前边","电脑","内","决策","适应","rclpy","last","网络","subscribernode","docs","尽力","请求","问题","退出","python","针对","建模","所有人","进入","机器人","点","模式","版本","等","verbose","服务质量","在于","特性","满足","how","存在","给","使命","门","兼容性问题","代码","dds","qos","视频","可见","边","qosreliabilitypolicy","接下来","供者","地址","字符串","0.5","他们","通过","depth","航拍","$","profile","best","建立","？","distribution","数以千计","keep","有人","接下","销毁","技术标准","感知","uml","这样","要","通信模型","列表","送给","驱动","不","选项","兼容性","解决","第一种","对应","接收者","架构","有","第四种","只","omg","集中","功能","自动","做","该用","场景","入口",".","video","heard","相当于","当然","每条","了","体","工业","console","下来","技术","成","客户","\"","符合","publishernode","正常","运动","生变","env","回忆","implementations","核心","也","来到","想","配置","肯定","单位","几种","理解","8","这个","非常复杂","呢","厂商","流畅性","角色","意思","解析","一样","没","效率","就行","位置","描述","表示","发送给","on","i","from","示例","半天","chatter","入门","1","医疗","基本","具体","导致","(","指定","地","effort","多","无论如何","配套","比如","{","入个","服务","提供","教程","选用","如果","大量","utf","只是","接口","放在","不感兴趣","影响","顺利","父类","此时","保障","转移","既然","初始","to","string","init","rmw","预测","升级","尝试","一种","node","授权","图","内容","运行","三种","关心","std","太多","py","节点","get","重大","同一","create","建设","性","humble","质量","黑入","数据通信","}","单独","丢失","service","应用","本身","年","遥控器","能够","好吃","命令行","时","完成","之前","deadline","_","历史数据","已经","周期","这里","异常","海军","logger","具体地址","分发","ros1","name","关系","更","维护","链接","与","复用","不是","接收","当于","延时","靠","各个","包","秒","*","者","广泛应用","下边","尽可","国防","一","哪","带","一定","组织","并","瓶颈","提高","timer","控制","后","绑定","啥意思","合适","每","冰山","一起","articles","guides","大小","定义","构图","helloworld","bilibili","不变","运转","发生","可信赖","super","大大","所","shutdown","所以","sysml","那该","时间","、","讲","组成部分","吃","：","字符","类","设置","。","驾驶","通常","华为","就","另外","频繁","corba","红色","对","一些","ros2","麻烦","例子","无人","高效","def","旋转","self","像","有些","由于","\\","about","执行","发布","真正","points","拿","中心","信赖","msgs","打开","提示","2004","main","大家","@","并行","情况","底层","echo","之","我们","回调","过程","1989","美国","提到","按照","居","它","便于","int32","]","二种","主讲","这","综合","帧","循环","不同","讲到","认识","发生变化","但是","domain","s","借助","全称","管理","”","很多","蓝色","缓存","class","一条"," ","由","不过","（","输出","编程","图像","spin","vendors","定时","处于","entry","办法","课上","以","个人","能响","名","）","神经","publisher","客户端","进一步","qosprofile","如下","没有","行业","大大提高","一下","增长","新","加密","为","concepts","整个","应用程序","用","qoshistorypolicy","!","布式","-","纠结","数据通","类似"],"title":"**DDS**","title_tokens":["*","dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds","text":"Hello，大家好，欢迎来到《ROS2入门21讲》，我是主讲人古月。 终于讲到ROS2中最为重大的变化—— DDS ，我们在前边课程中学习的话题、服务、动作，他们底层通信的具体实现过程，都是靠DDS来完成的，它相当于是 ROS机器人系统中的神经网络 。","text_tokens":["他们","相当","欢迎","神经网络","通信","来到","ros2","是","服务","机器","前边"," ","hello","最为","—","网络","系统","完成","神经网","21","来","课程","机器人","ros","的","在","神经","底层","我","终于","，","变化","我们","学习","过程","古月","好","主讲人","》","它","、","讲","当于","相当于","靠","主讲","都","重大","dds","中","动作","讲到","入门","话题","具体","。","实现","《","大家"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_1","text":"DDS的核心是通信，能够实现通信的模型和软件框架非常多，这里我们列出常用的四种模型。 第一种， 点对点模型 ，许多客户端连接到一个服务端，每次通信时，通信双方必须建立一条连接。当通信节点增多时，连接数也会增多。而且每个客户端都需要知道服务器的具体地址和所提供的服务，一旦服务器地址发生变化，所有客户端都会受到影响。 第二种， Broker模型 ，针对点对点模型进行了优化，由Broker集中处理所有人的请求，并进一步找到真正能响应该服务的角色。这样客户端就不用关心服务器的具体地址了。不过问题也很明显，Broker作为核心，它的处理速度会影响所有节点的效率，当系统规模增长到一定程度，Broker就会成为整个系统的性能瓶颈。更麻烦是，如果Broker发生异常，可能导致整个系统都无法正常运转。之前的ROS1系统，使用的就是类似这样的架构。 第三种， 广播模型 ，所有节点都可以在通道上广播消息，并且节点都可以收到消息。这个模型解决了服务器地址的问题，而且通信双方也不用单独建立连接，但是广播通道上的消息太多了，所有节点都必须关心每条消息，其实很多是和自己没有关系的。 第四种，就是 以数据为中心的DDS模型 了，这种模型与广播模型有些类似，所有节点都可以在DataBus上发布和订阅消息。但它的先进之处在于，通信中包含了很多并行的通路，每个节点可以只关心自己感兴趣的消息，忽略不感兴趣的消息，有点像是一个旋转火锅，各种好吃的都在这个DataBus传送，我们只需要拿自己想吃的就行，其他的和我们没有关系。 可见，在这几种通信模型中，DDS的优势更加明显。","text_tokens":["忽略","服务器","常用","消息","单独","先进","第二","找到","是","必须","能够","好吃","使用","时","像是","之前","请求","问题","广播","增多","针对","务器","兴趣","一步","所有人","优势","双方","程度","这里","的","处理","异常","具体地址","在","上","各种","ros1","，","在于","传送","关系","更","与","四种","broker","dds","可见","第二种","每次","许多","地址","受到","一个","通路","数据","明显","建立","每个","一定","第三","不用","更加","并","有人","瓶颈","软件","但","服务端","收到","这样","通信模型","运转","性能","发生","到","成为","无法","第一种","解决","进行","其实","变化","知道","架构","所","连接","订阅","第四种","只","集中","处理速度","第一","框架","每条","了","吃","处","客户","当","。","正常","生变","就","感兴","会","有点","核心","通信","也","想","麻烦","可能","包含","旋转","有些","几种","发布","真正","这个","系统","拿","中心","行","角色","第四","模型","并行","效率","火锅","之","我们","一旦","优化","它","这种","二种","都","这","很","发生变化","具体","导致","但是","实现","通道","databus","多","可以","服务","提供","很多","一条"," ","所有","由","不过","如果","自己","不感兴趣","影响","其他","以","速度","规模","点对点","能响","和","一种","客户端","而且","进一步","没有","并且","增长","需要","三种","连接数","集中处理","为","整个","关心","感兴趣","第三种","太多","节点","就是","中","作为","列出","应该","非常","类似"],"title":"通信模型","title_tokens":["通信模型","模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_1","text":"DDS并不是一个新的通信方式，在ROS2之前，DDS已经广泛应用在很多领域，比如航空，国防，交通，医疗，能源等。 比如在自动驾驶领域，通常会存在感知，预测，决策和定位等模块，这些模块都需要非常高速和频繁地交换数据。借助DDS，可以很好地满足它们的通信需求。","text_tokens":["驾驶","通常","借助","频繁","会","地","通信","模块","比如","ros2","并","可以","这些","很多","应用","感知"," ","决策","之前","交换","已经","方式","广泛","预测","的","在","和","等","，","交通","需求","满足","需要","存在","新","好","自动","不是","定位","都","高速","它们","dds","领域","很","广泛应用","航空","医疗","能源","国防","。","一个","非常","数据"],"title":"DDS","title_tokens":["dds"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_2","text":"好啦，说了半天DDS，到底啥意思呢？我们来做一个完整的介绍 DDS的全称是Data Distribution Service，也就是数据分发服务，2004年由 对象管理组织OMG 发布和维护，是一套专门为 实时系统 设计的 数据分发/订阅标准 ，最早应用于美国海军， 解决舰船复杂网络环境中大量软件升级的兼容性问题，现在已经成为强制标准。 DDS强调 以数据为中心 ，可以提供丰富的 服务质量策略 ，以保障数据进行实时、高效、灵活地分发，可满足各种分布式实时通信应用需求。 这里也提一下对象管理组织OMG，成立于1989年，它的使命是开发技术标准，为数以千计的垂直行业提供真实的价值，比如大家课可能听说过的统一建模语言SYSML和UML，还有中间件标准CORBA等，当然还有DDS。","text_tokens":["成立","service","过","是","还有","一套","应用","于","强调","丰富","年","分布式","网络","价值","问题","现在","已经","建模","兼容","的","海军","各种","这里","课","分发","等","，","服务质量","需求","满足","啦","维护","环境","使命","兼容性问题","dds","语言","垂直","分布","一个","数据","distribution","？","组织","数以千计","技术标准","啥意思","软件","灵活","uml","专门","成为","对象","兼容性","解决","进行","订阅","好","omg","sysml","设计","做","、","容性","当然","技术","。","corba","通信","也","可能","高效","发布","系统","呢","中心","意思","提","2004","建模语言","强制","我们","策略","中间件","1989","美国","它","实时","半天","听说","可","开发","完整","全称","/","地","标准","管理","比如","可以","服务","提供","介绍","舰船"," ","到底","由","大量","统一","保障","复杂","来","以","data","升级","和","真实","中间","行业","一下","说了半天","为","就是","中","布式","最早","质量","大家"],"title":"什么是DDS","title_tokens":["dds","是","什么"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#ddsros2","text":"DDS在ROS2系统中的位置至关重要，所有上层建设都建立在DDS之上。在这个ROS2的架构图中，蓝色和红色部分就是DDS。 刚才我们也提到，DDS是一种通信的标准，就像4G、5G一样，既然是标准，那大家都可以按照这个标准来实现对应的功能，所以华为、高通都有很多5G的技术专利，DDS也是一样， 能够按照DDS标准实现的通信系统很多 ，这里每一个红色模块，就是某一企业或组织实现的一种DDS系统。 既然可选用的DDS这么多，那我们该用哪一个呢？具体而言，他们肯定都符合基本标准，但还是会有性能上的差别，ROS2的原则就是尽量兼容，让用户根据使用场景选择，比如个人开发，我们选择一个开源版本的DDS就行，如果是工业应用，那可能得选择一个商业授权的版本了。 为了实现对多个DDS的兼容，ROS设计了一个 Middleware中间件 ，也就是一个统一的标准，不管我们用那个DDS，保证上层编程使用的函数接口都是一样的。此时兼容性的问题就转移给了DDS厂商，如果他们想让自己的DDS系统进入ROS生态，就得按照ROS的接口标准，开发一个驱动，也就是这个部分。 无论如何，ROS的宗旨不变，要提高软件代码的复用性，下边DDS任你边，上边的软件没影响。 在ROS的四大组成部分中，由于DDS的加入，大大提高了分布式通信系统的综合能力，这样我们在开发机器人的过程中，就不需要纠结通信的问题，可以把更多时间放在其他部分的应用开发上。","text_tokens":["专利","四大","模块","是","应用","5g","分布式","能够","4g","使用","问题","生态","这么","用户","进入","开源","机器人","无论","保证","加入","这里","之上","的","在","上","兼容","版本","任","你","，","更","给","复用","把","原则","为了","代码","刚才","尽量","dds","边","下边","分布","一个","他们","哪","建立","？","组织","能力","提高","每","软件","但","构图","这样","要","不变","性能","企业","驱动","不","兼容性","对应","大大","选择","架构","有","所以","功能","设计","场景","该用","时间","、","组成部分","至关","至关重要","容性","了","工业","技术","符合","商业","。","或","某一","根据","华为","就","会","红色","通信","也","对","ros2","可能","肯定","想","像","由于","这个","还是","不管","系统","呢","函数","厂商","多个","一样","那","上层","架构图","没","就行","宗旨","位置","接口标准","我们","过程","中间件","提到","按照","重要","都","综合","可","开发","基本","具体","高通","实现","ros","middleware","标准","多","无论如何","比如","可以","差别","很多","蓝色","机器","所有"," ","选用","让","如果","编程","统一","自己","接口","得","放在","影响","此时","转移","部分","既然","来","其他","个人","和","如何","一种","中间","授权","大大提高","需要","上边","用","而言","就是","中","建设","那个","布式","性","纠结","组成","大家"],"title":"DDS在ROS2中的应用","title_tokens":["的","在","dds","中","ros2","应用"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#qos","text":"DDS为ROS的通信系统提供提供了哪些特性呢？我们通过这个通信模型图来看下。 DDS中的基本结构是Domain，Domain将各个应用程序绑定在一起进行通信，回忆下之前我们配置树莓派和电脑通信的时候，配置的那个DOMAIN ID，就是对全局数据空间的分组定义，只有处于同一个DOMAIN小组中的节点才能互相通信。这样可以避免无用数据占用的资源。 DDS中另外一个重要特性就是 质量服务策略，QoS 。 QoS是一种网络传输策略，应用程序指定所需要的网络传输质量行为，QoS服务实现这种行为要求，尽可能地满足客户对通信质量的需求，可以理解为数据提供者和接收者之间的合约。 具体会有哪些策略？比如这个列表中描述的DEADLINE策略，表示通信数据必须要在每次截止时间内完成一次通信，HISTORY策略，表示针对历史数据的一个缓存大小，RELIABILITY策略，表示数据通信的模式，配置成BEST_EFFORT，就是尽力传输模式，网络情况不好的时候，也要保证数据流畅，此时可能会导致数据丢失，配置成RELIABLE，就是可信赖模式，可以在通信中尽量保证图像的完整性，我们可以根据应用功能场景选择合适的通信模式。 还有这个DURABILITY，可以配置针对晚加入的节点，也保证有一定的历史数据发送过去，可以让新节点快速适应系统。 所有这些策略在ROS系统中都可以通过类似这样的结构体配置，如果不配置的话，系统也会使用默认的参数。 举一个机器人的例子便于大家理解。 比如我们遥控一个无人机航拍，如果网络情况不好的话，遥控器向无人机发送运动指令的过程，可以用reliable通信模式，保证每一个命令都可以顺利发送给无人机，但是可能会有一些延时，无人机传输图像的过程可以用best effort模式，保证视频的流畅性，但是可能会有掉帧。 如果此时出现一个黑客黑入我们的网络，也没有关系，我们可以给ROS2的通信数据进行加密，黑客也没有办法直接控制无人机。 DDS的加入，让ROS2的通信系统焕然一新，多众多样的通信配置，可以更好的满足不同场景下的机器人应用。 好啦，DDS这么好，那该如何配置和使用呢？我们先带大家入个门。","text_tokens":["合约","黑入","数据通信","不好","小组","丢失","尽可能","是","传输","这些","还有","应用","必须","电脑","内","快速","适应","遥控器","网络","使用","尽力","之前","deadline","完成","结构","_","这么","针对","历史数据","id","指令","树莓","机器人","加入","模式","保证","的","在","一次","避免","提供者","特性","，","需求","满足","关系","啦","给","门","接收","延时","各个","下","尽量","dds","qos","视频","每次","供者","尽可","直接","一个","history","无人机","数据","通过","航拍","best","？","带","一定","举","可信","控制","绑定","历史","合适","每","更好","一起","将","大小","定义","黑客","这样","要","同一个","通信模型","先","reliability","列表","送给","程序","可信赖","不","哪些","互相","流畅","接收者","进行","参数","选择","有","所","好","功能","空间","场景","时间","晚","那该","体","了","保证数据","人机","成","客户","命令","。","运动","一新","的话","出现","根据","回忆","另外","只有","会","对","通信","也","一些","配置","可能","例子","无人","ros2","理解","durability","这个","系统","呢","信赖","流畅性","样","来看","要求","众多","遥控","截止","大家","模型","行为","情况","焕然一新","完整性","描述","我们","策略","表示","过程","发送给","便于","之间","这种","重要","时候","都","占用","帧","不同","派","基本","完整","domain","具体","导致","实现","ros","但是","指定","焕然","地","effort","多","比如","可以","入个","提供","服务","缓存","机器","全局","所有"," ","让","如果","reliable","图像","默认","顺利","处于","此时","发送","办法","和","如何","一种","没有","图","需要","新","无用","分组","为","加密","应用程序","过去","用","节点","就是","资源","同一","向","中","那个","才能","掉","数据通","质量","类似"],"title":"质量服务策略QoS","title_tokens":["策略","质量","qos","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_3","text":"我们先来试一试在命令行中配置DDS的参数。 $ ros2 topic pub /chatter std_msgs/msg/Int32 \"data: 42\" --qos-reliability best_effort $ ros2 topic echo /chatter --qos-reliability reliable $ ros2 topic echo /chatter --qos-reliability best_effort $ ros2 topic info /chatter --verbose","text_tokens":["topic","$","/","best","--","effort","pub","42","配置","ros2"," ","msg","命令行","reliable","_","msgs","先","reliability","来",":","data","的","在","echo","verbose","我们","参数","std","试一试","int32","info","dds","qos","中","chatter","\"","命令","-","。"],"title":"案例一：在命令行中配置DDS","title_tokens":["一","在","命令行","：","dds","中","案例","配置","命令"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#dds_4","text":"接下来，我们尝试在代码中配置DDS，以之前Hello World话题通信为例。","text_tokens":["通信","配置","接下","为例"," ","hello","world","之前","以","尝试","在","，","我们","代码","下来","dds","中","接下来","话题","。"],"title":"案例二：DDS编程示例","title_tokens":["编程","示例","：","dds","二","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_2","text":"$ ros2 run learning_qos qos_helloworld_pub $ ros2 run learning_qos qos_helloworld_sub","text_tokens":["learning","$","_","qos","pub","helloworld","ros2","sub","run"," "],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_3","text":"learning_qos/qos_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . pub = self . create_publisher ( String , \"chatter\" , qos_profile ) # 创建发布者对象（消息类型、话题名、QoS原则） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"qos_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , },","text_tokens":["callback","}","import","消息","args","rclpy",",","创建","last","learning","com","publish","完成","_","退出","说明","python","已经","周期","点","www","name","加入","的","logger","主","scripts","，","none","信息","初始化","原则","coding","代码","包","=","秒","*","qos","qosreliabilitypolicy","%","字符串","0.5","一个","history","数据","depth","python3","profile","best","pub","keep","并","timer","日志","后","销毁","publishing","关闭","helloworld","reliability","#","编译","程序","super","对象","选项","'","进行","知道","[","shutdown","guyuehome","入口","功能",")",".","、","info","console","：","usr","\"","类","字符","publishernode","设置","填充","env","ros2","self","配置","def","单位","类型","定时器","8","发布","msg","执行","world","函数","系统","points","msgs","打开","提示","main","“","setup","@",":","文件","回调","作者","居","库","__","from","示例","编写","循环","chatter","1","话题","s","(","/","effort","{","”","class","输出"," ","hello","让","（","utf","spin","reliable","定时","接口","父类","bin","初始","等待","entry","string","init","data","）","名","如下","publisher","node","qosprofile","需要","古月","为","std","发布者","py","节点","destroy","qoshistorypolicy","get","create","中","!","-"],"title":"发布者代码解析","title_tokens":["发布","代码","解析","发布者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_4","text":"learning_qos/qos_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 QoS示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 from rclpy.qos import QoSProfile , QoSReliabilityPolicy , QoSHistoryPolicy # ROS2 QoS类 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 qos_profile = QoSProfile ( # 创建一个QoS原则 # reliability=QoSReliabilityPolicy.BEST_EFFORT, reliability = QoSReliabilityPolicy . RELIABLE , history = QoSHistoryPolicy . KEEP_LAST , depth = 1 ) self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , qos_profile ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、QoS原则） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"qos_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'qos_helloworld_pub = learning_qos.qos_helloworld_pub:main' , 'qos_helloworld_sub = learning_qos.qos_helloworld_sub:main' , ], },","text_tokens":["callback","}","import","消息","args","rclpy",",","创建","last","subscribernode","learning","com","完成","_","退出","说明","python","点","www","name","加入","的","处理","logger","主","scripts","，","none","信息","初始化","原则","subscription","coding","代码","包","=","*","者","qos","qosreliabilitypolicy","%","一个","history","数据","depth","python3","profile","best","pub","keep","并","后","日志","销毁","关闭","定义","收到","helloworld","reliability","#","编译","程序","super","对象","选项","'","进行","知道","[","shutdown","订阅","guyuehome","入口","功能",")",".","、","heard","info","console","：","usr","\"","类","设置","env","对","ros2","self","配置","def","类型","\\","8","msg","执行","函数","world","points","系统","msgs","打开","提示","listener","main","“","setup","@",":","文件","回调","作者","居","库","__","i","]","from","示例","编写","循环","chatter","1","话题","s","(","/","effort","标准","{","”","class","输出"," ","hello","让","（","utf","spin","reliable","接口","父类","bin","初始","等待","entry","string","init","data","）","名","如下","node","qosprofile","需要","sub","古月","std","py","节点","destroy","qoshistorypolicy","get","create","!","-"],"title":"订阅者代码解析","title_tokens":["订阅","代码","者","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.10_DDS/#_5","text":"DDS本身是一个非常复杂的系统，ROS2使用的也只是冰山一角，我们课上主要带领大家认识DDS，更多使用方法和相关内容，课程配套的教程中会有介绍，大家也可以参考这里的链接进行学习。 https://design.ros2.org/articles/ros_on_dds.html https://docs.ros.org/en/humble/Concepts/About-Different-Middleware-Vendors.html https://docs.ros.org/en/humble/How-To-Guides/Working-with-multiple-RMW-implementations.html https://www.bilibili.com/video/BV12z4y167w2","text_tokens":["middleware","冰山一角","一角","/","方法","implementations","org","多","配套","也","ros2","可以","是","https","articles","humble","冰山","本身","教程","介绍","about"," ","guides","非常复杂","使用","系统","design","docs","只是","vendors","_","com","html","to","bilibili","复杂","working","相关","课程","课上",":","www","rmw","这里","的","和","主要","参考","进行","，","我们","学习","有","different","更","how","with","内容","链接","concepts","video",".","on","en","带领","中会","dds","认识","-","bv12z4y167w2","。","一个","非常","ros","multiple","大家"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/","text":"工作空间：开发过程的大本营 大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是工程。 工作空间是什么 类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做工作空间。 所以工作空间是一个存放项目开发相关文件的文件夹，也是开发过程中存放所有资料的大本营。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。 创建工作空间 了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git 自动安装依赖 我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init & rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y 编译工作空间 依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。 设置环境变量 编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":["工具栏","编写程序","以上","保存","--","来讲","结果","过","找到","rosdistro","是","这些","b","强调","创建","能够","build","使用","docs","时","像是","之前","com","_","结构","src","目录","mkdir","完成","针对","缺少","子目","eclipse","pip","机器人","一点","各种","的","在","产生","这里","或者","等","如图所示","，","studio","关系","信息","tutorials","啦","环境","存在","path","链接","存放","很少","不是","为了","代码","en","包","qt","绝大","接下来","~","bashrc","一个","生效","否则","$","从","python3","ws","org","大部分","安装","并列","并","接下","用于","日志","后","https","后续","操作","社区","人为","b2","点击","定义","件夹","visual","资料","要","自动生产","允许","放置","#","至此","工程","编译","程序","到","变量","选项","source","update","完全","进行","仅","参数","有","log","apt","creating","所以","guyuehome","sh","功能","空间","自动","p","手动",".","、","cd","典型","大本","了","：","下来","\"","设置","命令","sudo","当","。","可执行文件","&","出现","概念","空间结构","另外","就","install","不会","某些","会","看到","一些","也","数量","ros2","配置","git","里边","绝大部分","唯一","错误","依赖","执行","这个","w","系统","多少","未来","多个","下载","一部","creator","一样","21","相关","大本营","“","文件","大家","四个",":","setup","情况","还","行文","echo","参考","我们","子","rosdep","得到","dev","过程","任何","总体","大部","终端","以及","项目","环境变","了解","i","workspace","from","local","都","这","编写","文件夹","接触","脚本","开发","名称","1","警告","ros","；","均","里","想要","/","报错","叫做","管理","工作","比如","根目录","”","可以","3","a","humble","机器","教程","子目录","rosdepc","所有"," ","2","开始","..","如果","让","成功","当前","自己","此时","部分","init","什么","clone","如下","和","工具","所示","两个","学习","中间","一部分","并且","gitee","内容","需要","新","运行",">","colcon","某","生产","用","就是","中会","中","-","环境变量","pip3","应该","html","集成","y","类似"],"title":"**工作空间：开发过程的大本营**","title_tokens":["的","大本","大本营","：","*","工作","开发","过程","空间"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_1","text":"大家在之前的学习和开发中，应该有接触过某些集成开发环境，比如Visual Studio、Eclipse、Qt Creator等，当我们想要编写程序之前，都会在这些开发环境的工具栏中，点击一个“创建新工程”的选项，此时就产生一个文件夹，后续所有工作产生的文件，都会放置在这个文件夹中，这个文件夹以及里边的内容，就叫做是工程。","text_tokens":["工具栏","编写程序","想要","就","某些","会","叫做","过","比如","工作","”","里边","这些","是","后续","所有"," ","创建","点击","这个","之前","件夹","visual","creator","此时","eclipse","放置","“","工程","程序","文件","选项","的","在","和","工具","产生","等","学习","，","我们","有","studio","环境","内容","新","。","以及","、","都","编写","文件夹","接触","中","qt","开发","当","应该","一个","集成","大家"],"title":"工作空间：开发过程的大本营","title_tokens":["的","大本","大本营","：","工作","开发","过程","空间"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_2","text":"类似的，在ROS机器人开发中，我们针对机器人某些功能进行代码开始时，各种编写的代码、参数、脚本等文件，也需要放置在某一个文件夹里进行管理，这个文件夹在ROS系统中就叫做工作空间。 所以工作空间是一个存放项目开发相关文件的文件夹，也是开发过程中存放所有资料的大本营。 ROS系统中一个典型的工作空间结构如图所示，这个dev_ws就是工作空间的根目录，里边会有四个子目录，或者叫做四个子空间。 src，代码空间 ，未来编写的代码、脚本，都需要人为的放置到这里； build，编译空间 ，保存编译过程中产生的中间文件； install，安装空间 ，放置编译得到的可执行文件和脚本； log，日志空间 ，编译和运行过程中，保存各种警告、错误、信息等日志。 总体来讲，这四个空间的文件夹，我们绝大部分操作都是在src中进行的，编译成功后，就会执行install里边的结果，build和log两个文件夹用的很少。 这里也要强调一点， 工作空间的名称我们可以自己定义 ，数量也并不是唯一的，比如： 工作空间1：dev_w_a，用于A机器人的开发； 工作空间2：dev_ws_b，用于B机器人的一部分功能； 工作空间3：dev_ws_b2，用于开发B机器人另外一些功能。 以上情况是完全允许的，就像是我们在集成开发环境中创建了多个新工程一样，都是并列存在的关系。","text_tokens":["以上","保存","来讲","结果","是","b","强调","创建","build","时","像是","_","结构","src","目录","针对","子目","机器人","一点","各种","的","在","这里","产生","或者","等","如图所示","，","关系","信息","环境","存在","存放","很少","不是","代码","绝大","一个","ws","大部分","安装","并列","并","用于","日志","后","操作","人为","b2","定义","件夹","资料","要","允许","放置","编译","工程","到","完全","进行","参数","有","log","所以","功能","空间","、","典型","大本","了","：","。","可执行文件","空间结构","另外","就","install","某些","会","一些","也","数量","里边","绝大部分","唯一","错误","执行","这个","w","系统","未来","多个","一部","一样","相关","大本营","四个","文件","情况","行文","我们","子","得到","dev","过程","总体","大部","项目","都","这","编写","文件夹","脚本","开发","名称","1","警告","ros","；","里","叫做","管理","工作","根目录","可以","比如","3","a","机器","子目录","所有"," ","2","开始","成功","自己","部分","和","所示","两个","一部分","中间","需要","运行","新","某","用","就是","中","集成","类似"],"title":"工作空间是什么","title_tokens":["工作","空间","是","什么"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_3","text":"了解了工作空间的概念和结果，接下来我们可以使用如下命令创建一个工作空间，并且下载教程的代码： $ mkdir -p ~/dev_ws/src $ cd ~/dev_ws/src $ git clone https://gitee.com/guyuehome/ros2_21_tutorials.git","text_tokens":["概念","$","/","ws","结果","工作","可以","ros2","接下","git","https","教程"," ","创建","使用","com","下载","_","mkdir","src","21",":","clone","的","和","如下","，","我们","gitee","并且","tutorials","dev","guyuehome","空间","p",".","cd","了解","代码","了","：","下来","接下来","命令","-","~","一个"],"title":"创建工作空间","title_tokens":["工作","空间","创建"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_4","text":"我们从社区中下载的各种代码，多少都会有一些依赖，我们可以手动一个一个安装，也可以使用rosdep工具自动安装： $ sudo apt install -y python3-pip $ sudo pip3 install rosdepc $ sudo rosdepc init & rosdepc update $ cd .. $ rosdepc install -i --from-path src --rosdistro humble -y","text_tokens":["从","$","install","python3","会","--","一些","也","安装","可以","rosdistro","humble","社区","rosdepc","依赖"," ","..","使用","多少","下载","src","pip","init","各种","的","update","工具","，","我们","有","rosdep","apt","path","自动","手动","cd","代码","i","from","都","：","中","-","sudo","pip3","&","一个","y"],"title":"自动安装依赖","title_tokens":["安装","自动","依赖"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_5","text":"依赖安装完成后，就可以使用如下命令编译工作空间啦，如果有缺少的依赖，或者代码有错误，编译过程中会有报错，否则编译过程应该不会出现任何错误： $ sudo apt install python3-colcon-ros $ cd ~/dev_ws/ $ colcon build 编译成功后，就可以在工作空间中看到自动生产的build、log、install文件夹了。","text_tokens":["否则","不会","就","$","install","python3","/","报错","ws","看到","安装","可以","工作","后","错误","依赖","如果"," ","build","使用","成功","完成","件夹","_","自动生产","缺少","编译","文件","如下","的","在","或者","，","有","log","啦","apt","过程","任何","dev","空间","colcon","自动","。","生产","、","cd","代码","了","：","文件夹","中会","中","命令","~","-","sudo","应该","ros","出现"],"title":"编译工作空间","title_tokens":["工作","编译","空间"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_6","text":"编译成功后，为了让系统能够找到我们的功能包和可执行文件，还需要设置环境变量： $ source install/local_setup.sh # 仅在当前终端生效 $ echo \" source ~/dev_ws/install/local_setup.sh\" >> ~/.bashrc # 所有终端均生效 至此，我们就完成了工作空间的创建、编译和配置。","text_tokens":["均","$","就","install","/","ws","找到","工作","配置","后","所有"," ","执行","能够","让","创建","成功","系统","当前","完成","_","至此","#","setup","编译","文件","变量","source","还","的","和","在","行文","echo","，","我们","仅","dev","需要","环境","sh","功能","终端",">","空间",".","为了","环境变","、","包","local","了","：","\"","设置","~","bashrc","环境变量","。","可执行文件","生效"],"title":"设置环境变量","title_tokens":["环境变","设置","环境","环境变量","变量"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.1_%E5%B7%A5%E4%BD%9C%E7%A9%BA%E9%97%B4/#_7","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html","text_tokens":[".","workspace","en","docs","/","org","tutorials","creating","https","-","a","ros","humble","html",":"," "],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/","text":"功能包：开发过程的大本营 在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做功能包。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。 创建功能包 如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python 编译功能包 在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash 功能包的结构 功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。 C++功能包 首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。 Python功能包 C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["--","立刻","c++","是","这些","还有","必须","是否","颜色","必然","只想","创建","build","使用","之外","别人","时","learning","完成","_","结构","src","语法","说明","python","除此之外","first","拆分","指令","机器人","name","这里","的","在","视觉","举个","你","或者","等","版本","各种","，","关系","混合","信息","移动","tutorials","环境","存在","链接","给","复用","把","不是","txt","代码","其中","package","en","包","刚才","下","尽量","三个","语言","规则","导航","pkg","~","新创建","一个","一些","他们","放到","$","源码","每个","头疼","？","ws","包并","org","并","提高","出来","黄豆","控制","https","社区","感知","原理","一起","软件","将","但","后续","docs","型","件夹","要","么","之一","#","编译","变量","到","程序","不","source","<","五颜六色","有","creating","所以","只","好","功能","空间","入口","新创","跟","划分","、","cd",".","降低","当然","大本","了","包是","：","该","名字","编译成","分享","设置","命令","当","。","正常","可执行文件","很快","包该","就","install","才能","某些","会","看到","手上","某种","也","想","ros2","可能","例子","豆子","数量","包中","很难","配置","类型","包含","里边","发现","依赖","执行","points","这个","还是","机制","拿","呢","是否是","下载","cmakerlists","解析","绿豆","分别","一样","假设","那","越","相关","大本营","setup","文件","声明","红豆","首先","“",":","起来","主要","自主","行文","参考","找","描述","我们","表示","dev","过程","xml","除此","终端","看","译成","之间","环境变","耦合","重要","时候","local","都","cmakelists","这","文件夹","编写","拿出","workspace","不同","开发","名称","但是","cmake","ros","；","里","/","方法","叫做","多","比如","可以","继续","工作","”","分析","很多","机器","教程","介绍","a","所有"," ","如果","一颗","编程","判断","放在","得","bash","entry","c","来","如下","和","袋子","如何","而是","两个","新建","type","普通","需要","运行",">","内容","colcon","ament","是不是","用","py","讲解","your","就是","create","版权","率","中","-","环境变量","之后","humble","html","大家"],"title":"**功能包：开发过程的大本营**","title_tokens":["的","包","大本","：","*","开发","过程","功能","大本营"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_1","text":"在下载的教程代码中，大家可以看到有很多不同名称的文件夹，这些在ROS2并不是普通的文件夹，而是叫做功能包。 每个机器人可能有很多功能，比如移动控制、视觉感知、自主导航等，如果我们把这些功能的源码都放到一起当然也是可以的，但是当我们想把其中某些功能分享给别人时，就会发现代码都混合到了一起，很难拆分出来。 举个例子，我们手上有很多红豆、绿豆、黄豆，假设都放在一个袋子里，如果只想把黄豆都拿出来，是不是得在五颜六色的豆子里一颗一颗都找出来，数量越多，你就越头疼；如果我们把不同颜色的豆子放在不同的三个袋子里，需要拿出某种豆子的时候，不就立刻可以找出来了么。 功能包就是这个原理，我们把不同功能的代码划分到不同的功能包中，尽量降低他们之间的耦合关系，当需要在ROS社区中分享给别人的时候，只需要说明这个功能包该如何使用，别人很快就可以用起来了。 所以功能包的机制，是提高ROS中软件复用率的重要方法之一。","text_tokens":["立刻","是","这些","颜色","只想","使用","别人","时","说明","拆分","机器人","的","在","视觉","举个","你","等","，","关系","混合","移动","给","复用","把","不是","代码","其中","包","尽量","三个","导航","一个","他们","放到","源码","每个","头疼","并","提高","黄豆","出来","控制","社区","感知","原理","一起","软件","件夹","么","之一","到","不","五颜六色","有","所以","只","功能","划分","、","降低","当然","了","分享","当","。","很快","包该","就","某些","会","看到","手上","某种","也","想","ros2","可能","例子","豆子","数量","包中","很难","发现","这个","机制","拿","下载","绿豆","假设","越","文件","红豆","起来","自主","找","我们","之间","耦合","重要","时候","都","文件夹","拿出","不同","名称","但是","ros","；","里","方法","叫做","多","比如","可以","很多","机器","教程"," ","如果","一颗","放在","得","袋子","如何","而是","普通","需要","是不是","用","就是","率","中","大家"],"title":"功能包：开发过程的大本营","title_tokens":["的","包","大本","：","开发","过程","功能","大本营"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_2","text":"如何在ROS2中创建一个功能包呢？我们可以使用这个指令： $ ros2 pkg create --build-type <build-type> <package_name> ros2命令中： pkg ：表示功能包相关的功能； create ：表示创建功能包； build-type ：表示新创建的功能包是C++还是Python的，如果使用C++或者C，那这里就跟ament_cmake，如果使用Python，就跟ament_python； package_name ：新建功能包的名字。 比如在终端中分别创建C++和Python版本的功能包： $ cd ~/dev_ws/src $ ros2 pkg create --build-type ament_cmake learning_pkg_c # C++ $ ros2 pkg create --build-type ament_python learning_pkg_python # Python","text_tokens":["；","$","就","/","？","ws","--","比如","ros2","可以","c++"," ","创建","如果","这个","build","使用","还是","呢","learning","_","src","python","分别","那","c","指令","相关","#","name","这里","的","在","<","和","如何","或者","版本","，","我们","type","表示","新建","dev",">","功能","终端","。","新创","ament","跟","cd","package","包","包是","：","名字","create","中","cmake","pkg","命令","-","~","新创建","一个"],"title":"创建功能包","title_tokens":["功能","包","创建"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_3","text":"在创建好的功能包中，我们可以继续完成代码的编写，之后需要编译和配置环境变量，才能正常运行： $ cd ~/dev_ws/src $ colcon build # 编译工作空间所有功能包 $ source install/local_setup.bash","text_tokens":["$","/","才能","install","ws","包中","工作","可以","继续","配置","所有"," ","创建","build","完成","_","src","bash","#","setup","编译","变量","source","的","在","和","，","我们","dev","需要","环境","运行","好","功能","空间","colcon",".","环境变","代码","cd","包","local","：","编写","~","环境变量","之后","正常"],"title":"编译功能包","title_tokens":["功能","编译","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_4","text":"功能包并不是普通的文件夹，那如何判断一个文件夹是否是功能包呢？我们来分析下刚才新创建两个功能包的结构。","text_tokens":["？","包并","分析","是否","创建","判断","是否是","呢","件夹","结构","那","来","文件","的","如何","两个","，","我们","普通","功能","。","新创","不是","包","刚才","下","文件夹","新创建","一个"],"title":"功能包的结构","title_tokens":["功能","结构","的","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#c","text":"首先看下C++类型的功能包，其中必然存在两个文件： package.xml 和 CMakerLists.txt 。 package.xml文件的主要内容如下，包含功能包的版权描述，和各种依赖的声明。 CMakeLists.txt文件是编译规则，C++代码需要编译才能运行，所以必须要在该文件中设置如何编译，使用CMake语法。","text_tokens":["包含","c++","是","类型","必须","必然"," ","依赖","使用","要","cmakerlists","语法","声明","编译","文件","首先","各种","的","和","如下","主要","在","如何","两个","描述","，","xml","内容","存在","需要","运行","功能","所以","看",".","txt","cmakelists","其中","package","代码","包","下","：","该","版权","中","规则","设置","才能","。","cmake"],"title":"C++功能包","title_tokens":["功能","c++","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#python","text":"C++功能包需要将源码编译成可执行文件，但是Python语言是解析型的，不需要编译，所以会有一些不同，但也会有这两个文件： package.xml 和 setup.py 。 package.xml文件的主要内容和C++版本功能包一样，包含功能包的版权描述，和各种依赖的声明。 setup.py文件里边也包含一些版权信息，除此之外，还有“entry_points”配置的程序入口，在后续编程讲解中，我们会给大家介绍如何使用。","text_tokens":["源码","会","一些","也","包含","c++","是","里边","”","还有","配置","后续","介绍"," ","执行","将","但","依赖","points","之外","编程","使用","型","_","解析","python","除此之外","一样","entry","声明","setup","编译","文件","“","程序","不","各种","的","和","在","主要","版本","如何","行文","两个","描述","，","我们","有","信息","xml","需要","所以","内容","除此","功能","入口","给","译成",".","py","讲解","package","包","编译成","这","：","版权","中","语言","不同","但是","。","可执行文件","大家"],"title":"Python功能包","title_tokens":["功能","python","包"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.2_%E5%8A%9F%E8%83%BD%E5%8C%85/#_5","text":"https://docs.ros.org/en/ humble /Tutorials/Workspace/Creating-A-Workspace.html https://docs.ros.org/en/ humble /Tutorials/Creating-Your-First-ROS2-Package.html","text_tokens":["/","org","ros2","humble","https","a"," ","docs","first",":","tutorials","creating",".","your","en","package","-","workspace","html","ros"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/","text":"节点 机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。 通信模型 完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。 案例一：Hello World节点（面向过程） ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。 运行效果 大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ], 创建节点流程 代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。 案例二：Hello World节点（面向对象） 所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。 运行效果 下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。 代码解析 功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ], 创建节点流程 所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。 案例三：物体识别节点 没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。 运行效果 在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。 代码解析 在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ], 案例四：机器视觉识别节点 用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。 运行效果 启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 注意：如果是在虚拟机中操作，需要进行以下设置： 把虚拟机设置为兼容USB3.1； 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。 代码解析 相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ], 节点命令行操作 节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息 思考题 现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":["像素","保持联系","import","模块","为例","会弹",",","创建","不要","效果","先拉","之外","com","模块化","只不过","以下","现在","除此之外","知其所以然","www","waitkey","思考","各种","的","在","可移植","你","处理","合理","实际","scripts","tutorials","啦","移动","启动","初始化","识别","把","coding","=","重新","上限","img","语言","upper","一个","这座","好像","比喻","而已","python3","while","不用","更加","安装","进程","for","object","日志","知其然","图片","可读","将","但","关闭","hsv","收到","摇杆","监控","三","#","这份","编译","下限","到","成为","程序","对象","同理","true","'","进行","参数","知道","[","apt","宽","好","云端","90","为止","框架","简单","框会","四","难","usr","面积","查询","后勤","修改","着急","当","处理过程","用到","array","框架图","出现","概念","根据","任务","install","sleep","hierarchy","会","点画","通信","可能","—","前后","最为","函数","world","还是","系统","众多","那","21","setup","“","四个","image","cv2","np","坐标","类似","打印","路径","参考","面向","具备","看上","作者","imshow","__","重要","疑惑","都","可移植性","编写","很","面向对象","动态","开发","cvtcolor","被","ros","多种","/","改成","工作","可以","if","a","hello","到底","做到","成功","得","bin","更多","复杂","来","方式","findcontours","和","一台","数值","java","webcam","是不是","x","就是","一节","5","过来","中","合体","组成","推动","常用","结果","过","命名","乃至","案例","是","这些","还有","分布式","使用","pyhton","learning","厂房","inrange","结构","说明","指令","h","drawcontours","最大","加入","name","mask","兼容","上","主","，","none","可视","信息","环境","更为","算机","其中","en","刚才","下","骡子","usb3.1","调整","分布","想到","轮廓","物理","从","每个","org","https","更好","255","各不相同","及","心里","二","先","设备","课程","lower","互相","videocapture","后勤部门","前","变化","128","连接","guyuehome","设计","计算机",")","勾勒","孤立","info","请","计算","命令","的话","工人","看到","approx","发现","as","左右","去","没错","来看","分别","轮子","岂","文件",":","模型","即可","一项","起来","身体","除此","查看","却","终端","一张","太小","库","之间","这种","时候","实时","一帧","看上去","摄像","回到","物体","可","bgr2hsv","保持","完整","左上角","detect","实现","time","方法","角度","叫做","搭载","共同","分析","机器","opencv","介绍","让","ok","地方","转换","关注","等待","方便","发送","速度","重点","如何","两个","学习","中间","并且","需要","古月","continue","destroy","而言","腿","对于","应该","run","稍微","y","编写程序","步骤","推荐","找到","args","工厂","是否","rclpy","总结","50","电脑","read","docs","外界","例程","退出","python","去除","imread","int","所在","destroyallwindows","问题","桌子","吧","机器人","点","一点","虚拟","或者","等","给","代码","中心点","上去","cap","接下来","字符串","0.5","改变","高","通过","他们","$","？","ws","接下","出来","销毁","联系","人为","这样","要","通信模型","思考题","列表","ret","不","选项","驱动","噪声","有","入口","功能","150","虽然","做","home","关于",".","位于","当然","了","console","名字","下来","熟悉","\"","所以然","正常","运动","env","来源","职责","某些","独立","helloworldnode","马","也","呀","配置","理解","8","这个","w","机制","呢","nodes","未来","解析","apple","一样","依然","考题","没","还","表示","范围","整体","图像处理","dev","总体","读取","看","hcx","from","示例","检测","1","显示","中将","具体","；","(","模拟","多","比如","{","更多要","虚拟机","提供","流程","numpy","如果","utf","编程语言","+","只是","放在","接口","出","父类","然后","一线","初始","保障","既然","contours","生成","init","jpg","node","一种","编码","运行","180","ruby","移植性","py","retr","节点","再","get","bgr","humble","负责","取","c++","b","操作系统","自然","颜色","命令行","时","完成","之前","_","src","就让","in","周期","算是","远程","这里","logger","视觉","总体而言","状态","更","注意","链接","眼睛","不是","编码方式","溜溜","包","每一项","*","可读性","硬件","list","一","此处","并","后","控制","操作","每","xy","一起","helloworld","绿色","移植","发生","super","red","<","左上","还会","shutdown","chain","所以","可视化","时间","、","该","：","字符","类","设置","至","sudo","。","可执行文件","图像识别","理过","shape","另外","就","获取","某种","一些","红色","ros2","self","color","def","唯一","像","执行","发布","休眠","points","中心","cnt","打开","main","@","苹果","经常","行文","这款","我们","boundingrect","得到","过程","居","它","绿点","相机","]","调试","这","二值化","综合","认识","综合体","不同","循环","阈值","名称","0","但是","里","想要","understanding","太","上角","”","class","输出"," ","不过","开始","（","2","circle","编程","spin","图像","看看","不能","entry","像头","后勤部","载体","以","相同","）","如下","前后左右","一下","相比",">","为","某","细胞","用","部门","摄像头","窗口","网上","!","布式","-","纠结","html","大家"],"title":"**节点**","title_tokens":["*","节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_1","text":"机器人是各种功能的综合体，每一项功能就像机器人的一个工作细胞，众多细胞通过一些机制连接到一起，成为了一个机器人整体。 在ROS中，我们给这些 “细胞”取了一个名字，那就是 节点 。","text_tokens":["通过","就","取","一些","工作","是","”","这些","机器","像","一起"," ","机制","众多","那","“","机器人","到","成为","各种","的","在","一项","，","我们","整体","连接","给","功能","细胞","节点","就是","每一项","了","名字","综合","综合体","中","。","一个","合体","ros"],"title":"节点","title_tokens":["节点"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_2","text":"完整的机器人系统可能并不是一个物理上的整体，比如这样一个的机器人： 在机器人身体里搭载了一台计算机A，它可以通过机器人的眼睛——摄像头，获取外界环境的信息，也可以控制机器人的腿——轮子，让机器人移动到想要去的地方。除此之外，可能还会有另外一台计算机B，放在你的桌子上，它可以远程监控机器人看到的信息，也可以远程配置机器人的速度和某些参数，还可以连接一个摇杆，人为控制机器人前后左右运动。 这些功能虽然位于不同的计算机中，但都是这款机器人的工作细胞，也就是节点，他们共同组成了一个完整的机器人系统。 节点在机器人系统中的职责就是 执行某些具体的任务 ，从计算机操作系统的角度来看，也叫做进程； 每个节点都是一个可以 独立运行的可执行文件 ，比如执行某一个python程序，或者执行C++编译生成的结果，都算是运行了一个节点； 既然每个节点都是独立的执行文件，那自然就可以想到，得到这个执行文件的 编程语言可以是不同的 ，比如C++、Python，乃至Java、Ruby等更多语言。 这些节点是功能各不相同的细胞，根据系统设计的不同，可能位于计算机A，也可能位于计算机B，还有可能运行在云端，这叫做 分布式 ，也就是可以分布在不同的硬件载体上； 每一个节点都需要有 唯一的命名 ，当我们想要去找到某一个节点的时候，或者想要查询某一个节点的状态时，可以通过节点的名称来做查询。 节点也可以比喻是一个一个的工人，分别完成不同的任务，他们有的在一线厂房工作，有的在后勤部门提供保障，他们互相可能并不认识，但却一起推动机器人这座“工厂”，完成更为复杂的任务。 接下来，我们就来看看， 节点这个工作细胞，到底该如何实现。","text_tokens":["推动","结果","命名","乃至","找到","c++","是","b","这些","操作系统","还有","分布式","工厂","自然","之外","时","厂房","完成","外界","python","除此之外","桌子","算是","机器人","远程","的","在","上","你","或者","等","，","状态","信息","移动","更","环境","更为","眼睛","不是","算机","语言","接下来","分布","一个","想到","硬件","这座","比喻","通过","他们","物理","从","每个","并","进程","接下","控制","操作","每","各不相同","一起","人为","但","摇杆","这样","监控","编译","到","程序","不","互相","后勤部门","还会","参数","有","连接","功能","云端","虽然","设计","做","计算机","、","位于","了","该","：","下来","查询","计算","后勤","当","。","运动","可执行文件","根据","另外","任务","就","职责","获取","某些","独立","看到","工人","也","配置","可能","唯一","—","执行","前后","左右","这个","去","系统","来看","分别","轮子","那","“","文件","还","行文","身体","这款","我们","整体","得到","除此","却","它","时候","都","这","摄像","认识","不同","名称","完整","具体","实现","；","里","想要","角度","叫做","多","搭载","比如","可以","工作","”","共同","a","提供","机器"," ","让","到底","编程","编程语言","看看","放在","地方","一线","保障","复杂","既然","像头","来","生成","载体","后勤部","速度","相同","和","一台","前后左右","如何","java","运行","需要","某","ruby","细胞","部门","节点","摄像头","就是","腿","中","布式","组成"],"title":"通信模型","title_tokens":["通信模型","模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world","text":"ROS2中节点的实现当然是需要编写程序了，我们从Hello World例程开始，先来实现一个最为简单的节点，功能并不复杂，就是循环打印一个“Hello World”字符串到终端中。","text_tokens":["编写程序","从","ros2","并","是","”"," ","hello","开始","最为","world","例程","先","复杂","来","“","程序","到","不","的","打印","，","我们","需要","功能","终端","节点","当然","简单","就是","了","编写","循环","中","字符","字符串","。","一个","实现"],"title":"案例一：Hello World节点（面向过程）","title_tokens":["一","（","hello","world","节点","）","：","面向","案例","过程"," "]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_3","text":"大家先不要着急看代码，是骡子是马，先拉出来溜溜，我们通过ros2 run命令，运行编译好的课程代码，看下这个节点执行的效果如何，然后再来分析代码的实现过程，做到知其然也知其所以然。 $ ros2 run learning_node node_helloworld 运行成功后，可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["通过","$","马","看到","也","ros2","可以","是","出来","后","分析","知其然","”"," ","执行","做到","不要","先拉","这个","效果","成功","learning","hello","world","_","先","然后","helloworld","知其所以然","编译","课程","来","“","所以然","的","在","打印","如何","node","，","我们","过程","所以","运行","好","终端","看","代码","溜溜","节点","再","下","骡子","循环","中","字符","命令","着急","字符串","。","实现","run","大家"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_4","text":"这个节点是如何实现的呢？我们来看下代码。 learning_node/node_helloworld.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向过程的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_helloworld\" ) # 创建ROS2节点对象并进行初始化 while rclpy . ok (): # ROS2系统是否正常运行 node . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , ],","text_tokens":["import","是","args","是否","rclpy",",","创建","使用","learning","com","完成","_","说明","python","点","www","加入","的","logger","主","scripts","none","，","信息","初始化","coding","代码","包","=","下","*","0.5","python3","？","while","并","日志","控制","销毁","后","关闭","helloworld","#","编译","程序","对象","选项","'","进行","知道","[","shutdown","guyuehome","入口","功能","时间",")",".","info","console","：","usr","\"","类","设置","。","正常","env","sleep","ros2","配置","def","8","发布","休眠","这个","world","函数","系统","呢","points","来看","打开","main","“","setup","@",":","文件","面向","我们","过程","作者","居","库","]","from","示例","编写","循环","实现","(","/","time","{","”","输出"," ","hello","让","utf","ok","接口","bin","初始","entry","init","方式","如下","如何","node","需要","运行","古月","py","节点","destroy","get","!","-"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_5","text":"代码中出现的函数大家未来会经常用到，大家先不用纠结函数的具体使用方法，更重要的是理解节点的编码流程。 总结一下，想要实现一个节点，代码的实现流程是这样做： 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 大家如果有学习过C++或者Pyhton的话，应该可以发现这里我们使用的是面向过程的编程方法，这种方式虽然实现简单，但是对于稍微复杂一点的机器人系统，就很难做到模块化编码。","text_tokens":["出现","想要","就","方法","会","过","不用","模块","可以","并","是","c++","销毁","但是","机器","总结","流程","发现","理解"," ","创建","如果","函数","关闭","使用","编程","pyhton","系统","做到","未来","这样","一个","模块化","接口","先","初始","复杂","机器人","方式","一点","经常","应该","的","这里","或者","，","学习","我们","有","面向","更","一下","的话","编码","初始化","过程","功能","虽然","做","纠结","代码","重要","节点","这种","简单","：","难","很","中","对于","具体","。","用到","实现","稍微","大家"],"title":"创建节点流程","title_tokens":["流程","节点","创建"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#hello-world_1","text":"所以在ROS2的开发中，我们更 推荐大家使用面向对象的编程方式 ，比如刚才的代码就可以改成这样，虽然看上去复杂了一些，但是代码会具备更好的可读性和可移植性，调试起来也会更加方便。","text_tokens":["就","会","推荐","一些","改成","比如","ros2","可以","也","更加","更好"," ","可读","使用","编程","这样","复杂","方便","移植","方式","对象","的","在","和","可移植","起来","，","我们","面向","具备","看上","更","所以","虽然","移植性","代码","调试","刚才","了","看上去","上去","可移植性","中","面向对象","开发","可读性","但是","。","大家"],"title":"案例二：Hello World节点（面向对象）","title_tokens":["（","hello","world","节点","）","：","面向","二","面向对象","案例"," ","对象"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_6","text":"下来运行一下调整后的节点： $ ros2 run learning_node node_helloworld_class 运行成功后，可以还是可以在终端中看到循环打印“Hello World”字符串的效果。","text_tokens":["$","看到","ros2","可以","”","后","class"," ","hello","还是","world","成功","效果","learning","_","helloworld","“","的","在","打印","node","，","一下","运行","终端","节点","：","调整","下来","循环","中","字符","字符串","。","run"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_7","text":"功能虽然一样，但是程序的结构发生了变化，我们具体看一下这份代码。 learning_node/node_helloworld_class.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-发布“Hello World”日志信息, 使用面向对象的实现方式 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import time \"\"\" 创建一个HelloWorld节点, 初始化时输出“hello world”日志 \"\"\" class HelloWorldNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 while rclpy . ok (): # ROS2系统是否正常运行 self . get_logger () . info ( \"Hello World\" ) # ROS2日志输出 time . sleep ( 0.5 ) # 休眠控制循环时间 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = HelloWorldNode ( \"node_helloworld_class\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , ],","text_tokens":["import","args","是否","rclpy",",","创建","使用","learning","com","时","完成","_","结构","退出","说明","python","点","www","name","加入","的","logger","主","scripts","，","none","信息","初始化","coding","代码","包","=","*","0.5","一个","python3","while","并","日志","控制","销毁","后","关闭","helloworld","#","这份","发生","编译","程序","super","对象","选项","'","进行","变化","知道","[","shutdown","guyuehome","入口","功能","虽然","时间",")",".","info","了","console","：","usr","\"","类","设置","。","正常","env","helloworldnode","sleep","ros2","self","配置","def","8","发布","休眠","函数","world","points","系统","打开","一样","main","“","setup","@",":","文件","面向","我们","作者","看","居","库","__","]","from","示例","编写","循环","面向对象","但是","具体","实现","(","/","time","{","”","class","输出"," ","hello","让","utf","spin","ok","接口","父类","bin","初始","等待","entry","init","方式","如下","node","一下","需要","运行","古月","py","节点","destroy","get","!","-"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_8","text":"所以总体而言，节点的实现方式依然是这四个步骤，只不过编码方式做了一些改变而已。 编程接口初始化 创建节点并初始化 实现节点功能 销毁节点并关闭接口 到这里为止，大家是不是心里还有一个疑惑，机器人中的节点不能只是打印Hello World吧，是不是得完成一些具体的任务。","text_tokens":["而已","任务","步骤","一些","并","是","还有","销毁","机器"," ","不过","创建","心里","关闭","hello","编程","world","只是","完成","只不过","接口","不能","得","初始","依然","吧","四个","到","方式","机器人","这里","的","打印","总体而言","，","所以","总体","编码","初始化","功能","。","做","为止","不是","是不是","编码方式","节点","而言","疑惑","这","了","中","具体","改变","一个","实现","大家"],"title":"创建节点流程","title_tokens":["流程","节点","创建"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_9","text":"没错，接下来我们就以机器视觉的任务为例，模拟实际机器人中节点的实现过程。 我们先从网上找到一张苹果的图片，通过编写一个节点来识别图片中的苹果。","text_tokens":["通过","模拟","就","任务","从","找到","接下","为例","机器","图片"," ","没错","先","来","机器人","苹果","以","的","视觉","实际","，","我们","过程","识别","一张","节点","编写","下来","中","网上","接下来","。","一个","实现"],"title":"案例三：物体识别节点","title_tokens":["节点","：","物体","三","案例","识别"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_10","text":"在这个例程中，我们将用到一个图像处理的库——OpenCV，运行前请使用如下指令安装： $ sudo apt install python3-opencv 然后就可以运行例程啦： $ ros2 run learning_node node_object #注意修改图片路径后重新编译 运行前需要将learning_node/node_object.py代码中的图片路径，修改为实际路径，修改后重新编译运行即可： image = cv2.imread(' /home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg ') 例程运行成功后，会弹出一个可视化窗口，可以看到苹果被成功识别啦，一个绿色框会把苹果的轮廓勾勒出来，中间的绿点表示中心点。","text_tokens":["会弹","使用","learning","_","例程","src","imread","指令","的","在","处理","实际","，","可视","tutorials","啦","注意","识别","把","代码","中心点","重新","=","一个","轮廓","$","python3","ws","安装","object","后","出来","图片","将","绿色","#","编译","'","前","apt","可视化","home",")",".","勾勒","框会","：","请","修改","sudo","。","用到","就","install","看到","ros2","—","这个","中心","apple","21","cv2","image","苹果","即可","路径","我们","表示","图像处理","dev","hcx","库","绿点","被","(","/","可以","opencv"," ","成功","图像","出","然后","如下","jpg","node","中间","需要","运行","为","py","窗口","中","-","run"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_11","text":"在这个例程中，我们加入了图像识别的处理过程，模拟一个节点的功能，关于图像处理的具体实现，并不是此处的重点，大家更多要关注我们是如何通过节点的概念来实现一个具体的机器人功能。 learning_node/node_object.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过颜色识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 0 ) cv2 . destroyAllWindows () def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) image = cv2 . imread ( '/home/hcx/dev_ws/src/ros2_21_tutorials/learning_node/learning_node/apple.jpg' ) # 读取图像 object_detect ( image ) # 苹果检测 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , ],","text_tokens":["像素","import","是","args","rclpy","颜色",",","创建","效果","使用","learning","com","inrange","完成","_","去除","例程","int","说明","python","destroyallwindows","in","所在","imread","src","h","drawcontours","机器人","点","加入","www","waitkey","mask","的","在","处理","logger","主","scripts","，","none","tutorials","初始化","识别","不是","coding","代码","包","=","*","上限","img","upper","一个","list","高","通过","轮廓","此处","从","python3","ws","并","for","object","出来","后","销毁","图片","255","xy","将","及","关闭","hsv","helloworld","#","编译","下限","程序","red","lower","对象","选项","'","<","噪声","左上","进行","[","128","知道","chain","shutdown","guyuehome","宽","入口","功能","90","150","home","关于",")",".","勾勒","info","setup","了","console","：","usr","面积","\"","类","计算","设置","。","图像识别","处理过程","array","出现","env","理过","概念","shape","hierarchy","点画","红色","一些","approx","ros2","color","配置","def","8","as","points","这个","w","函数","系统","中心","cnt","apple","打开","21","main","cv2","np","@",":","苹果","image","模型","坐标","退出","文件","boundingrect","我们","范围","图像处理","得到","dev","过程","作者","读取","居","hcx","太小","库","imshow","]","from","示例","二值化","编写","循环","检测","阈值","cvtcolor","bgr2hsv","1","显示","0","具体","detect","左上角","实现","(","模拟","/","上角","{","更多要","if","机器","opencv","class","circle"," ","numpy","2","让","utf","spin","图像","+","接口","转换","bin","更多","关注","初始","等待","contours","entry","来","init","findcontours","重点","和","如下","如何","node","jpg","数值","180","需要","古月","为","continue","py","retr","节点","x","destroy","get","5","中","!","-","bgr","y","大家"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_12","text":"用图片进行识别好像还不太合理，机器人应该有眼睛呀，没问题，接下来我们就让节点读取摄像头的图像，动态识别其中的苹果，或者类似颜色的物体。","text_tokens":["太","呀","接下","机器","图片","颜色","图像","问题","就让","像头","机器人","不","苹果","没","还","合理","的","或者","进行","，","我们","有","眼睛","识别","读取","。","用","节点","摄像头","其中","摄像","下来","物体","动态","接下来","应该","好像","类似"],"title":"案例四：机器视觉识别节点","title_tokens":["识别","节点","视觉","四","：","案例","机器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_13","text":"启动一个终端，运行如下节点： $ ros2 run learning_node node_object_webcam #注意设置摄像头 注意：如果是在虚拟机中操作，需要进行以下设置： 把虚拟机设置为兼容USB3.1； 在可移动设备中将摄像头连接至虚拟机。 运行成功后，该节点就可以驱动摄像头，并且实时识别摄像头中的红色物体啦。","text_tokens":["；","$","就","红色","ros2","可以","是","object","虚拟机","后","操作"," ","如果","成功","learning","_","以下","设备","#","像头","驱动","兼容","如下","在","虚拟","的","node","进行","，","并且","启动","移动","连接","需要","运行","注意","啦","终端","为","把","识别","webcam","节点","摄像头","实时","usb3.1","：","摄像","该","物体","中","至","可","设置","中将","。","一个","run"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_14","text":"相比之前的程序，这里最大的变化是修改了图片的来源，使用OpenCV中的VideoCapture()来驱动相机，并且周期read摄像头的信息，并进行识别。 learning_node/node_object_webcam.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2节点示例-通过摄像头识别检测图片中出现的苹果 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import cv2 # OpenCV图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 def object_detect ( image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = Node ( \"node_object_webcam\" ) # 创建ROS2节点对象并进行初始化 node . get_logger () . info ( \"ROS2节点示例：检测图片中的苹果\" ) cap = cv2 . VideoCapture ( 0 ) while rclpy . ok (): ret , image = cap . read () # 读取一帧图像 if ret == True : object_detect ( image ) # 苹果检测 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'node_helloworld = learning_node.node_helloworld:main' , 'node_helloworld_class = learning_node.node_helloworld_class:main' , 'node_object = learning_node.node_object:main' , 'node_object_webcam = learning_node.node_object_webcam:main' , ],","text_tokens":["像素","import","是","50","args","rclpy","颜色",",","read","创建","效果","使用","learning","com","之前","inrange","_","去除","int","完成","说明","python","in","所在","h","周期","drawcontours","最大","点","www","加入","waitkey","mask","这里","的","处理","logger","主","scripts","，","none","信息","初始化","识别","coding","代码","包","=","*","cap","上限","img","upper","list","高","通过","轮廓","从","python3","while","并","for","object","出来","后","销毁","图片","255","xy","将","及","关闭","hsv","helloworld","#","编译","下限","程序","ret","驱动","red","lower","对象","true","videocapture","<","选项","'","噪声","进行","左上","变化","[","128","知道","chain","shutdown","guyuehome","宽","入口","150","90","功能",")",".","勾勒","info","了","console","：","usr","面积","\"","类","计算","修改","设置","。","array","出现","env","shape","来源","hierarchy","点画","红色","一些","approx","ros2","color","配置","def","8","as","points","w","函数","系统","中心","cnt","打开","main","cv2","np","@",":","苹果","image","模型","坐标","setup","文件","boundingrect","范围","图像处理","得到","作者","读取","居","太小","库","imshow","相机","]","from","一帧","示例","摄像","二值化","编写","检测","阈值","cvtcolor","bgr2hsv","1","显示","0","左上角","detect","(","/","上角","{","if","opencv","class","circle"," ","numpy","2","让","utf","图像","ok","+","接口","转换","bin","初始","entry","contours","像头","来","init","findcontours","如下","和","node","数值","并且","相比","180","需要","古月","为","continue","webcam","py","retr","节点","摄像头","x","destroy","get","5","中","!","-","bgr","y"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_15","text":"节点命令的常用操作如下： $ ros2 node list # 查看节点列表 $ ros2 node info <node_name> # 查看节点信息","text_tokens":["$","常用","ros2","操作"," ","_","#","列表","name","的","如下","<","node","信息","查看",">","info","节点","：","命令","list"],"title":"节点命令行操作","title_tokens":["命令","操作","节点","命令行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_16","text":"现在，大家应该熟悉节点这个工作细胞的概念和实现方法了，回到这个机器人系统的框架图，我们还会发现另外一个问题。 电脑B中的摇杆，要控制机器人运动，这两个节点岂不是应该有某种连接，比如摇杆节点发送一个速度指令给运动节点，收到后机器人开始运动。 同理，如果我们想要改变机器人的速度，负责配置参数的节点就得发送一个指令给运动节点，如果电脑B想要显示机器人看到的图像，电脑A中的摄像头节点就得把图像发送过来。 没错，在一个ROS机器人的系统中， 节点并不是孤立的，他们之间会有很多种机制保持联系 ，下一节，我们将给大家介绍这些机制中最为常用的一种。","text_tokens":["负责","保持联系","常用","b","这些","电脑","问题","现在","指令","机器人","的","在","，","给","把","不是","下","改变","一个","他们","并","后","控制","联系","将","收到","摇杆","要","同理","还会","参数","有","连接","孤立","框架","了","熟悉","。","运动","框架图","概念","另外","就","会","某种","看到","配置","发现","最为","这个","系统","机制","没错","岂","我们","之间","回到","这","摄像","很","显示","保持","实现","ros","想要","多种","方法","工作","比如","a","机器","介绍"," ","如果","开始","图像","得","发送","像头","速度","和","一种","两个","细胞","节点","摄像头","一节","过来","中","应该","大家"],"title":"思考题","title_tokens":["思考","考题","思考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.3_%E8%8A%82%E7%82%B9/#_17","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Nodes.html","text_tokens":[".","understanding","en","docs","nodes","/","org","tutorials","ros2","https","-","ros","humble","html",":"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/","text":"话题 节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。 通信模型 以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。 发布/订阅模型 从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为发布者，接收数据的对象称之为订阅者，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。 多对多通信 大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。 异步通信 话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。 消息接口 最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过.msg后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。 案例一：Hello World话题通信 了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。 运行效果 启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。 发布者代码解析 我们来看下发布者的实现方法。 程序实现 learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口 订阅者代码解析 我们再来看下订阅者的实现方法。 程序实现 learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。 案例二：机器视觉识别 在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。 运行效果 这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。 发布者代码解析 learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], }, 订阅者代码解析 learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], }, 案例三：机器视觉识别优化 通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub 话题命令行操作 话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息 思考题 关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？ 参考链接 https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":["像素","格式","消息","import","来讲","模块","为例","等等","必然",",","创建","效果","publish","com","模块化","以下","现在","做成","用户","兴趣","www","waitkey","思考","各种","的","在","打","你","处理","可移植","scripts","指","第二个","需求","tutorials","啦","启动","初始化","识别","把","coding","=","报社","上限","img","语言","upper","队列","直接","一个","好像","python3","exe","举","传递数据","pub","安装","for","数据结构","object","日志","publishing","将","但","关闭","hsv","收到","摇杆","自行","监控","三","#","编译","下限","到","成为","程序","对象","留","无法","'","true","对劲","进行","参数","知道","[","apt","宽","好","90","第一次","一行","usr","面积","修改","另","array","一新","填充","联系方式","概念","不然","hierarchy","感兴","点画","install","会","通信","包含","可能","基本原理","msg","还是","各种各样","world","系统","函数","imgmsg","多个","cvbridge","那","仔细","listener","setup","“","类似","image","cv2","np","坐标","焕然一新","参考","谁","作者","任何","优化","imshow","__","重要","都","可移植性","后缀","听说","编写","开发","cvtcolor","话题","被","ros","个","/","焕然","标准","可以","3","if","a","报纸","所有","hello","做到","成功","统一","不行","千丝万缕","得","bin","复杂","sensor","来","方式","findcontours","和","数值","中文","sub","人","就要","webcam","似乎","是不是","x","就是","5","率","中","听","作为","组成","callback","常用","频率","第二","案例","是","这些","还有","千丝","采集","使用","learning","inrange","结构","说明","东西","指令","h","一步","比方","drawcontours","加入","name","保证","mask","无论","过瘾","上","一次","主","，","可视","none","信息","知识","化成","subscription","其中","en","刚才","下","精简","%","数据","轮廓","从","每个","org","通用","https","更好","255","软件","说干就干","及","发出","二","先","又","设备","单向","lower","互相","videocapture","变化","128","订阅","发送数据","guyuehome","设计",")","第一","勾勒","info","据传","计算","命令","积木","的话","看到","魔性","approx","类型","定时器","as","不太","稍后","值","没错","来看","要求","分别","原本","文件",":","模型","生活","即可","查看","终端","几乎","太小","接收数据","库","之间","这种","实时","时候","一帧","物体","长度","叫","bgr2hsv","保持","是从","一篇","detect","左上角","实现","topic","方法","角度","叫做","分析","机器","区分","第一个","10","英文","opencv","出去","桥梁","让","更换","自己","转换","等待","较强","发送","思想","几个","什么","data","说","如何","两个","并且","需要","古月","感兴趣","渲染","imagesubscriber","不知","continue","发布者","destroy","receiving","0.1","本原","一份","中是","所谓","对于","周期性","才能","带宽","应该","run","y","集成","目标","传输","args","内","是否","rclpy","总结","frame","read","subscribernode","感觉","docs","退出","例程","问题","python","去除","int","所在","topics","排版","cv","进入","机器人","点","万缕","各样","特性","在生活中","满足","存在","给","代码","无关","cap","dds","视频","可见","接下来","字符串","0.5","高","通过","$","？","接下","用于","平时","出来","联系","销毁","传递","长宽","这样","要","块","通信模型","思考题","传感","列表","ret","bw","驱动","不","选项","对应","完全","噪声","有","入口","只","功能","video","虽然","做","150","关于",".","heard","当然","了","console","名字","下来","成","\"","publishernode","符合","数据类型","运动","env","某些","独立","也","想","数量","配置","呀","单位","肯定","理解","8","这个","w","呢","异步","bgr8","未来","解析","只要","一样","考题","最后","没","还","描述","范围","方向","图像处理","称之为","usb","读取","转化","看","公众","了解","i","from","示例","感器","拼接","chatter","检测","1","显示","基本","之为","每换","(","多","比如","{","继续","解","固定","他会","流程","numpy","如果","同学","utf","编程语言","+","接口","父类","to","一般","此时","初始","既然","contours","string","init","一种","node","传感器","type","转换成","运行","180","移植性","std","py","retr","讲解","节点","再","get","create","挺","之后","bgr","humble","放入","以上","}","raw","b","本身","自然","颜色","能够","命令行","完成","之前","_","耦","in","已经","想象","周期","转化成","想下","这里","logger","视觉","关系","更","杂志","注意","与","程序实现","复用","链接","不是","接收","包","rgb","控制指令","秒","*","者","并不知道","硬件","随处可见","list","一","组织","接口定义","一定","并","timer","提高","后","控制","合适","随处","每","原理","xy","操作","定义","么","helloworld","二个","不变","移植","super","red","<","左上","shutdown","chain","imagepublisher","可视化","因为","、","讲","最","该","：","字符","类","设置","sudo","。","逻辑性","从而","shape","另外","就","获取","词","某种","对","一些","红色","ros2","self","color","def","唯一","例子","像","\\","同样","执行","发布","points","中心","msgs","cnt","打开","提示","main","大家","@","cam","苹果","协议","hz","什么样","已","echo","boundingrect","我们","逻辑","回调","微信","得到","过程","居","它","相机","哪里","]","一句","这","二值化","循环","阈值","bridge","优先","名称","接口协议","s","但是","0","数据传输","换成","里","想要","understanding","太","上角","”","很多","优先级","class","输出"," ","2","开始","（","circle","不过","编程","图像","画面","spin","定时","不能","拍摄","entry","阅读","以","写","）","名","如下","publisher","适合","进一步","没有","换","！","一下","基于",">","建议","为","某","用","小编","文章","号","!","根本","-","html","间"],"title":"**话题**","title_tokens":["*","话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_1","text":"节点实现了机器人各种各样的功能，但这些功能并不是独立的，之间会有千丝万缕的联系，其中最重要的一种联系方式就是话题，它是 节点间传递数据的桥梁 。","text_tokens":["独立","会","传递数据","数据","并","是","这些","联系","机器","千丝","传递"," ","但","桥梁","各种各样","千丝万缕","机器人","方式","万缕","各种","的","各样","一种","，","有","功能","不是","它","之间","节点","其中","最","重要","了","就是","话题","。","间","实现","联系方式"],"title":"话题","title_tokens":["话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_2","text":"以两个机器人节点为例。A节点的功能是驱动相机这个硬件设备，获取得到相机拍摄的图像信息，B节点的功能是视频监控，将相机拍摄到的图像实时显示给用户查看。 大家可以想一下，这两个节点是不是必然存在某种关系？没错，节点A要将获取的图像数据传输给节点B，有了数据，节点B才能做这样可视化的渲染。 此时从节点A到节点B传递图像数据的方式，在ROS中，我们就称之为 话题 ，它作为一个桥梁，实现了节点之间某一个方向上的数据传输。","text_tokens":["是","传输","b","为例","必然","用户","机器人","的","在","上","，","可视","关系","信息","存在","给","不是","视频","一个","硬件","数据","从","？","传递","将","这样","要","监控","设备","到","驱动","有","功能","可视化","做","了","据传","。","就","获取","某种","想","这个","没错","我们","方向","得到","称之为","查看","它","相机","之间","实时","这","显示","话题","之为","实现","ros","数据传输","可以","a","机器"," ","桥梁","图像","此时","拍摄","方式","以","两个","一下","渲染","某","是不是","节点","中","作为","才能","大家"],"title":"通信模型","title_tokens":["通信模型","模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_3","text":"从话题本身的实现角度来看，使用了基于DDS的 发布/订阅模型 ，什么叫发布和订阅呢？ 话题数据传输的特性是从一个节点到另外一个节点，发送数据的对象称之为发布者，接收数据的对象称之为订阅者，每一个话题都需要有一个名字，传输的数据也需要有固定的数据类型。 打一个比方，大家平时应该也会看微信公众号，比如有一个公众号，它的名字叫做“古月居”，这个古月居就是话题名称，公众号的发布者是古月居的小编，他会把组织好的机器人知识排版成要求格式的公众号文章，发布出去，这个文章格式，就是话题的数据类型。如果大家对这个话题感兴趣，就可以订阅“古月居”，成为订阅者之后自然就可以收到古月居的公众号文章，没有订阅的话，也就无法收到。 类似这样的发布/订阅模型在生活中随处可见，比如订阅报纸、订阅杂志等等。","text_tokens":["格式","是","传输","等等","本身","自然","使用","兴趣","排版","比方","机器人","打","的","，","特性","在生活中","知识","杂志","把","接收","dds","者","可见","一个","随处可见","数据","从","？","组织","平时","随处","每","收到","这样","到","成为","对象","无法","有","订阅","发送数据","好","、","了","名字","据传","成","数据类型","。","的话","另外","就","感兴","会","对","也","类型","发布","这个","呢","来看","要求","“","类似","模型","生活","微信","称之为","看","居","公众","接收数据","它","都","叫","名称","话题","是从","之为","实现","数据传输","/","角度","叫做","比如","可以","”","固定","他会","机器","报纸"," ","出去","如果","发送","什么","和","没有","需要","基于","古月","感兴趣","发布者","节点","就是","小编","文章","号","之后","应该","大家"],"title":"发布/订阅模型","title_tokens":["发布","订阅","/","模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_4","text":"大家再仔细想下这些可以订阅的东西，是不是并不是唯一的，我们每个人可以订阅很多公众号、报纸、杂志，这些公众号、报纸、杂志也可以被很多人订阅，没错，ROS里的话题也是一样，发布者和订阅者的数量并不是唯一的，可以称之为是多对多的通信模型。 因为话题是多对多的模型，发布控制指令的摇杆可以有一个，也可以有2个、3个，订阅控制指令的机器人可以有1个，也可以有2个、3个，大家可以想象一下这个画面，似乎还是挺魔性的，如果存在多个发送指令的节点，建议大家要 注意区分优先级 ，不然机器人可能不知道该听谁的了。","text_tokens":["是","这些","东西","指令","想象","机器人","想下","的","，","杂志","存在","注意","不是","控制指令","者","一个","每个","并","控制","摇杆","要","通信模型","不","知道","有","订阅","因为","、","了","该","。","不然","对","通信","也","数量","魔性","可能","唯一","发布","这个","还是","多个","没错","一样","仔细","模型","谁","我们","称之为","公众","优先","1","话题","之为","被","ros","个","里","多","可以","3","很多","机器","区分","优先级","报纸"," ","2","如果","画面","发送","和","一下","人","建议","发布者","似乎","是不是","节点","再","挺","听","号","大家"],"title":"多对多通信","title_tokens":["通信","多","对"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_5","text":"话题通信还有一个特性，那就是异步，这个词可能有同学是第一次听说？所谓异步，只要是指发布者发出数据后，并不知道订阅者什么时候可以收到，类似古月居公众号发布一篇文章，你什么时候阅读的，古月居根本不知道，报社发出一份报纸，你什么时候收到，报社也是不知道的。这就叫做异步。 异步的特性也让话题更适合用于一些周期发布的数据，比如传感器的数据，运动控制的指令等等，如果某些逻辑性较强的指令，比如修改某一个参数，用话题传输就不太合适了。","text_tokens":["是","传输","还有","等等","指令","周期","的","一次","你","特性","，","指","更","报社","者","并不知道","一个","数据","？","用于","后","控制","合适","发出","收到","传感","不","参数","知道","有","订阅","第一","了","第一次","修改","。","运动","逻辑性","就","某些","词","一些","通信","也","可能","发布","这个","异步","只要","那","逻辑","居","公众","时候","这","听说","感器","话题","一篇","太","叫做","比如","可以","报纸"," ","让","同学","如果","较强","阅读","什么","适合","传感器","古月","不知","某","发布者","用","就是","文章","一份","号","所谓","根本","类似"],"title":"异步通信","title_tokens":["通信","异步"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_6","text":"最后，既然是数据传输，发布者和订阅者就得统一数据的描述格式，不能一个说英文，一个理解成了中文。在ROS中，话题通信数据的描述格式称之为消息，对应编程语言中数据结构的概念。比如这里的一个图像数据，就会包含图像的长宽像素值、每个像素的RGB等等，在ROS中都有标准定义。 消息是ROS中的一种接口定义方式 ，与编程语言无关，我们也可以通过.msg后缀的文件自行定义，有了这样的接口，各种节点就像积木块一样，通过各种各样的接口进行拼接，组成复杂的机器人系统。","text_tokens":["像素","格式","消息","是","传输","等等","结构","机器人","这里","的","在","各种","各样","，","与","无关","rgb","者","语言","一个","数据","通过","每个","接口定义","数据结构","定义","长宽","这样","自行","块","对应","进行","有","订阅",".","、","了","据传","成","积木","。","概念","就","会","通信","也","包含","像","理解","msg","发布","各种各样","系统","值","一样","最后","文件","描述","我们","称之为","都","后缀","拼接","话题","之为","ros","数据传输","标准","比如","可以","机器","英文"," ","编程","统一","编程语言","图像","接口","得","不能","复杂","既然","方式","和","说","一种","中文","发布者","节点","中","组成"],"title":"消息接口","title_tokens":["消息","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#hello-world","text":"了解了话题的基本原理，接下来我们就要开始编写代码啦。 还是从Hello World例程开始，我们来创建一个发布者，发布话题“chatter”，周期发送“Hello World”这个字符串，消息类型是ROS中标准定义的String，再创建一个订阅者，订阅“chatter”这个话题，从而接收到“Hello World”这个字符串。","text_tokens":["从","消息","标准","接下","”","是","类型","基本原理","原理"," ","hello","开始","创建","还是","world","发布","这个","定义","例程","发送","周期","来","“","string","到","的","，","我们","啦","订阅","就要","发布者","接收","了解","代码","再","了","编写","下来","本原","者","chatter","字符","中","接下来","基本","话题","字符串","。","一个","从而","ros"],"title":"案例一：Hello World话题通信","title_tokens":["一","hello","world","：","通信","案例","话题"," "]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_7","text":"启动第一个终端，运行话题的发布者节点： $ ros2 run learning_topic topic_helloworld_pub 启动第二个终端，运行话题的订阅者节点： $ ros2 run learning_topic topic_helloworld_sub 可以看到发布者循环发布“Hello World”字符串消息，订阅者也以几乎同样的频率收到该话题的消息数据。","text_tokens":["topic","$","消息","频率","看到","pub","第二","也","ros2","可以","”","第一个","同样"," ","hello","发布","world","learning","收到","_","helloworld","二个","“","以","的","，","第二个","启动","订阅","运行","sub","终端","几乎","发布者","第一","节点","该","：","者","循环","字符","话题","字符串","。","一个","run","数据"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_8","text":"我们来看下发布者的实现方法。","text_tokens":["发布","的","下","方法","我们","来看","。","实现","发布者"],"title":"发布者代码解析","title_tokens":["发布","代码","解析","发布者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_9","text":"learning_topic/topic_helloworld_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布“Hello World”话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 \"\"\" 创建一个发布者节点 \"\"\" class PublisherNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . pub = self . create_publisher ( String , \"chatter\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.5 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） def timer_callback ( self ): # 创建定时器周期执行的回调函数 msg = String () # 创建一个String类型的消息对象 msg . data = 'Hello World' # 填充消息对象中的消息数据 self . pub . publish ( msg ) # 发布话题消息 self . get_logger () . info ( 'Publishing: \" %s \"' % msg . data ) # 输出日志信息，提示已经完成话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = PublisherNode ( \"topic_helloworld_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , ], },","text_tokens":["callback","}","import","消息","args","rclpy",",","创建","learning","com","publish","完成","_","退出","说明","python","已经","周期","点","www","name","加入","的","logger","主","scripts","，","none","信息","初始化","coding","代码","包","=","秒","*","队列","%","字符串","0.5","一个","数据","python3","pub","并","timer","日志","后","销毁","publishing","关闭","helloworld","#","编译","程序","super","对象","选项","'","进行","知道","[","shutdown","guyuehome","入口","功能",")",".","、","info","console","：","usr","\"","类","字符","publishernode","设置","填充","env","ros2","self","配置","def","单位","类型","定时器","8","发布","msg","执行","world","函数","系统","points","msgs","打开","提示","main","“","setup","@",":","文件","回调","作者","居","库","__","]","from","示例","编写","循环","chatter","长度","话题","s","(","topic","/","{","”","class","10","输出"," ","hello","让","（","utf","spin","定时","接口","父类","bin","初始","等待","entry","string","init","data","）","名","如下","publisher","node","需要","古月","为","std","发布者","py","节点","destroy","get","create","中","!","-"],"title":"程序实现","title_tokens":["实现","程序","程序实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_10","text":"对以上程序进行分析，如果我们想要实现一个发布者，流程如下： 编程接口初始化 创建节点并初始化 创建发布者对象 创建并填充话题消息 发布话题消息 销毁节点并关闭接口","text_tokens":["以上","想要","消息","对","并","分析","销毁","流程"," ","如果","发布","创建","关闭","编程","接口","初始","程序","对象","如下","进行","，","我们","初始化","发布者","节点","：","话题","一个","实现","填充"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_11","text":"我们再来看下订阅者的实现方法。","text_tokens":["的","再","下","方法","我们","者","来看","订阅","。","实现"],"title":"订阅者代码解析","title_tokens":["订阅","代码","者","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_12","text":"learning_topic/topic_helloworld_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅“Hello World”话题消息 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # ROS2标准定义的String消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ String , \"chatter\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'I heard: \" %s \"' % msg . data ) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"topic_helloworld_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , ], },","text_tokens":["callback","}","import","消息","args","rclpy",",","创建","subscribernode","learning","com","完成","_","退出","说明","python","点","www","name","加入","的","处理","logger","主","scripts","，","none","信息","初始化","subscription","coding","代码","包","=","*","者","队列","%","一个","数据","python3","pub","并","后","日志","销毁","关闭","定义","收到","helloworld","#","编译","程序","super","对象","选项","'","进行","知道","[","shutdown","订阅","guyuehome","入口","功能",")",".","、","heard","info","console","：","usr","\"","类","设置","env","对","ros2","self","配置","def","类型","\\","8","msg","执行","函数","world","points","系统","msgs","打开","提示","listener","main","“","setup","@",":","文件","回调","作者","居","库","__","i","]","from","示例","编写","循环","chatter","长度","话题","s","(","topic","/","标准","{","”","class","10","输出"," ","hello","让","（","utf","spin","接口","父类","bin","初始","等待","entry","string","init","data","）","名","如下","node","需要","sub","古月","std","py","节点","destroy","get","create","!","-"],"title":"程序实现","title_tokens":["实现","程序","程序实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_13","text":"对以上程序进行分析，如果我们想要实现一个订阅者，流程如下： 编程接口初始化 创建节点并初始化 创建订阅者对象 回调函数处理话题数据 销毁节点并关闭接口 好啦，Hello World例程大家一定还不过瘾，接下来我们基于话题通信，继续优化下之前的机器视觉例程。","text_tokens":["以上","想要","一定","对","通信","并","接下","继续","分析","销毁","机器","流程"," ","如果","创建","hello","函数","关闭","编程","world","之前","例程","接口","初始","大家","程序","不","对象","还","如下","处理","过瘾","的","视觉","进行","，","我们","回调","啦","订阅","初始化","好","基于","优化","节点","下","：","下来","者","接下来","话题","。","一个","实现","数据"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_14","text":"在节点概念的讲解过程中，我们通过一个节点驱动了相机，并且实现了对红色物体的识别。功能虽然没问题，但是对于机器人开发来讲，并没有做到程序的模块化，更好的方式是将相机驱动和视觉识别做成两个节点，节点间的联系就是这个图像数据，通过话题周期传输即可。","text_tokens":["通过","概念","来讲","对","红色","模块","数据","并","是","传输","联系","机器","更好","做到","将","这个","图像","问题","模块化","做成","周期","机器人","程序","驱动","方式","没","即可","的","在","和","视觉","两个","，","我们","没有","并且","过程","功能","识别","虽然","相机","讲解","节点","就是","了","物体","中","开发","对于","话题","但是","。","一个","实现","间"],"title":"案例二：机器视觉识别","title_tokens":["识别","视觉","：","二","案例","机器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_15","text":"这个图像消息在ROS中是标准定义好的，如果未来要更换另一个相机，只需要修改驱动节点，视觉识别节点完全是软件功能，就可以保持不变了，这种模块化的设计思想，可以更好的保证软件的可移植性。 好啦，说干就干，我们先来看下效果如何？ 启动两个终端，分别运行以下两个节点，第一个节点驱动相机并发布图像话题，第二个节点订阅图像话题并实现视觉识别。 $ ros2 run learning_topic topic_webcam_pub $ ros2 run learning_topic topic_webcam_sub 将红色物体放入相机范围内，即可看到识别效果。","text_tokens":["消息","模块","第二","是","内","效果","learning","_","模块化","以下","保证","的","在","视觉","可移植","，","第二个","啦","启动","识别","下","一个","$","？","pub","并","更好","软件","将","说干就干","定义","要","先","二个","不变","移植","驱动","完全","订阅","只","好","功能","设计","第一","了","修改","另","。","就","看到","红色","ros2","发布","这个","未来","来看","分别","即可","我们","范围","终端","相机","这种","可移植性","物体","话题","保持","实现","ros","topic","标准","可以","第一个"," ","如果","更换","图像","思想","如何","两个","需要","运行","sub","移植性","webcam","节点","中是","run","放入"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_16","text":"learning_topic/topic_webcam_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-发布图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 \"\"\" 创建一个发布者节点 \"\"\" class ImagePublisher ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . publisher_ = self . create_publisher ( Image , 'image_raw' , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . timer = self . create_timer ( 0.1 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . cap = cv2 . VideoCapture ( 0 ) # 创建一个视频采集对象，驱动相机采集图像（相机设备号） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于稍后将OpenCV的图像转换成ROS的图像消息 def timer_callback ( self ): ret , frame = self . cap . read () # 一帧一帧读取图像 if ret == True : # 如果图像读取成功 self . publisher_ . publish ( self . cv_bridge . cv2_to_imgmsg ( frame , 'bgr8' )) # 发布图像消息 self . get_logger () . info ( 'Publishing video frame' ) # 输出日志信息，提示已经完成图像话题发布 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImagePublisher ( \"topic_webcam_pub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , ], },","text_tokens":["raw","callback","import","消息","}","args","rclpy","frame",",","采集","创建","read","learning","com","publish","完成","_","退出","说明","python","已经","周期","cv","点","www","name","加入","的","处理","logger","主","scripts","，","none","信息","初始化","与","coding","代码","包","=","秒","*","cap","视频","队列","一个","python3","pub","并","timer","用于","日志","后","销毁","publishing","将","关闭","helloworld","设备","#","编译","ret","程序","super","对象","驱动","选项","true","'","videocapture","进行","知道","[","shutdown","imagepublisher","guyuehome","入口","功能","video",")",".","、","info","console","：","usr","\"","类","设置","env","ros2","self","配置","def","单位","类型","定时器","8","发布","msg","执行","函数","imgmsg","系统","bgr8","稍后","points","msgs","打开","提示","cvbridge","main","cv2","image","@",":","setup","文件","图像处理","回调","作者","读取","居","库","__","相机","]","from","一帧","示例","编写","循环","bridge","长度","话题","0","ros","(","换成","topic","/","{","if","opencv","class","10","输出"," ","如果","让","（","utf","成功","图像","spin","定时","接口","父类","转换","bin","to","初始","等待","entry","sensor","init","）","名","如下","publisher","node","转换成","需要","sub","古月","为","webcam","发布者","py","节点","destroy","get","0.1","create","!","号","-"],"title":"发布者代码解析","title_tokens":["发布","代码","解析","发布者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_17","text":"learning_topic/topic_webcam_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2话题示例-订阅图像话题 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 10 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'topic_helloworld_pub = learning_topic.topic_helloworld_pub:main' , 'topic_helloworld_sub = learning_topic.topic_helloworld_sub:main' , 'topic_webcam_pub = learning_topic.topic_webcam_pub:main' , 'topic_webcam_sub = learning_topic.topic_webcam_sub:main' , ], },","text_tokens":["像素","raw","callback","import","消息","}","args","rclpy","颜色",",","frame","创建","效果","使用","learning","com","inrange","完成","_","去除","int","退出","说明","python","in","所在","h","cv","drawcontours","进入","点","www","name","waitkey","mask","转化成","的","处理","logger","加入","主","scripts","，","none","信息","初始化","化成","与","subscription","coding","代码","包","=","*","者","上限","img","upper","队列","一个","list","高","轮廓","从","python3","pub","for","并","用于","object","出来","后","日志","销毁","255","xy","将","及","关闭","hsv","helloworld","#","编译","下限","程序","super","red","lower","对象","互相","'","<","选项","噪声","左上","进行","[","128","知道","chain","shutdown","订阅","guyuehome","宽","入口","150","90","video","功能",")",".","、","勾勒","info","console","：","usr","面积","\"","类","计算","设置","array","env","shape","hierarchy","点画","红色","一些","approx","ros2","self","color","def","配置","类型","8","msg","as","函数","w","imgmsg","系统","bgr8","points","中心","msgs","cnt","打开","提示","cvbridge","listener","main","cv2","image","@",":","np","模型","苹果","坐标","setup","文件","已","boundingrect","范围","图像处理","回调","得到","作者","转化","居","太小","库","imshow","__","]","from","示例","二值化","编写","循环","阈值","检测","bridge","长度","cvtcolor","bgr2hsv","话题","0","左上角","detect","1","显示","ros","(","topic","/","上角","{","if","opencv","class","10","circle"," ","numpy","2","（","输出","utf","spin","图像","让","+","接口","父类","转换","bin","to","初始","等待","entry","sensor","contours","init","findcontours","data","）","名","和","如下","node","数值","180","sub","需要","古月","为","imagesubscriber","continue","webcam","py","retr","节点","x","receiving","destroy","get","5","create","中","!","-","bgr","y"],"title":"订阅者代码解析","title_tokens":["订阅","代码","者","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_18","text":"通过话题对原本节点功能的解耦，似乎让视觉识别的例程焕然一新了，不过似乎还有哪里不太对劲，大家有感觉到么？ ROS的目标不是提高软件复用率么，现在视觉识别的节点可以复用了，相机驱动节点好像不行呀，每换一个相机，是不是都得换一个驱动节点？这当然是不可能的！ 常用的usb相机驱动一般都是通用的，ROS中也集成了usb相机的标准驱动，我们只需要通过这样一行指令，就可以安装好，无论你用什么样的相机，只要符合usb接口协议，就可以直接使用ROS中的相机驱动节点，发布标准的图像话题了。 $ sudo apt install ros-humble-usb-cam 这样，我们的代码又得到了进一步精简，刚才自己写的图像发布节点换成了这样一句指令，视觉识别节点不需要做任何变化。 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic topic_webcam_sub","text_tokens":["常用","目标","是","还有","使用","感觉","learning","耦","_","例程","现在","指令","一步","无论","的","视觉","你","，","识别","复用","不是","代码","刚才","精简","直接","一个","好像","通过","$","？","exe","安装","run","通用","提高","软件","这样","么","又","到","驱动","不","对劲","变化","有","apt","只","好","功能","做","当然","了","一行","符合","sudo","。","一新","就","install","对","也","呀","ros2","可能","发布","不太","只要","原本","cam","协议","焕然一新","什么样","我们","得到","任何","usb","相机","哪里","一句","都","这","接口协议","话题","每换","ros","换成","topic","焕然","标准","可以","解"," ","让","不过","图像","不行","自己","接口","得","一般","什么","写","node","进一步","换","！","需要","sub","webcam","似乎","是不是","用","节点","率","中","-","humble","集成","大家"],"title":"案例三：机器视觉识别优化","title_tokens":["识别","视觉","：","三","案例","机器","优化"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_19","text":"话题命令的常用操作如下： $ ros2 topic list # 查看话题列表 $ ros2 topic info <topic_name> # 查看话题信息 $ ros2 topic hz <topic_name> # 查看话题发布频率 $ ros2 topic bw <topic_name> # 查看话题传输带宽 $ ros2 topic echo <topic_name> # 查看话题数据 $ ros2 topic pub <topic_name> <msg_type> <msg_data> # 发布话题消息","text_tokens":["topic","$","常用","频率","消息","pub","ros2","传输","操作"," ","msg","发布","_","#","列表","bw","hz","name","data","的","如下","<","echo","type","信息","查看",">","info","：","命令","话题","带宽","list","数据"],"title":"话题命令行操作","title_tokens":["操作","命令","命令行","话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_20","text":"关于话题通信的原理和实现方法我们就讲到这里，给大家留一个思考题：话题通信的特性是单向传输，适合周期性的数据传递，对于一个复杂的机器人系统来讲，这种特性肯定无法满足所有数据传输的需求，大家是否能够举几个例子，是话题通信无法完成的呢？","text_tokens":["就","方法","？","举","来讲","通信","数据","例子","是","传输","肯定","机器","是否","原理","传递","所有","能够","系统","呢","完成","思考题","复杂","单向","考题","周期","几个","到","机器人","留","思考","这里","的","和","无法","适合","，","我们","特性","满足","需求","给","关于","讲","这种","：","据传","周期性","对于","话题","一个","实现","数据传输","大家"],"title":"思考题","title_tokens":["思考","考题","思考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.4_%E8%AF%9D%E9%A2%98/#_21","text":"https://docs.ros.org/en/humble/Tutorials/Topics/Understanding-ROS2-Topics.html","text_tokens":[".","understanding","en","docs","/","topics","org","tutorials","ros2","https","-","ros","humble","html",":"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/","text":"服务 话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。 通信模型 在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。 客户端/服务器模型 从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。 同步通信 这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。 一对多通信 比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。 服务接口 和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。 案例一：加法求解器 大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。 运行效果 我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3 客户端代码解析 我们来看下客户端的实现方法。 程序实现 learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口 服务端代码解析 至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。 程序实现 learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_server = learning_service.service_adder_server:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], }, 流程总结 对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口 案例二：机器视觉识别 好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。 运行效果 此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client 客户端代码解析 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], }, 服务端代码解析 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], }, 服务命令行操作 服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求 思考题 话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。 参考链接 https://docs.ros.org/en/ humble /Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":["像素","同步性","服务器","sec","import","消息","一直","等等","准备",",","创建","效果","com","现在","target","www","waitkey","思考","各种","的","在","处理","你","网页","合理","scripts","第二个","需求","tutorials","啦","启动","初始化","识别","服务器发送","coding","越好","=","上限","img","upper","队列","一个","好像","sum","python3","while","break","exe","传递数据","except","更加","for","object","日志","将","但","越快","关闭","return","服务端","收到","hsv","器","html","后者","#","编译","again","到","成为","程序","对象","下限","无法","'","true","进行","知道","[","宽","好","90","简单","usr","自定义","面积","查询","展现","当","用到","array","一对","出现","根据","adderclient","hierarchy","点画","会","sys","通信","最新","至于","argv","可能","—","msg","最为","d","还是","函数","imgmsg","系统","多个","cvbridge","上层","listener","setup","“","类似","image","坐标","np","failed","cv2","打印","参考","作者","imshow","服务器端","__","有所不同","都","编写","很","cvtcolor","开发","话题","ros","/","position","标准","可以","3","if","a","of","add","成功","判断","bin","sensor","方式","findcontours","那有","域名","和","...","数值","加法器","发给","sub","人","就要","x","就是","5","向","中","不好","callback","常用","频率","结果","第二","前者","案例","并不需要","是","这些","还有","send","使用","learning","inrange","objectx","说明","这么","务器","h","指令","drawcontours","response","name","加入","mask","上","宕机","一次","本","我","加法","主","，","none","信息","objecty","化成","问","附近","subscription","其中","en","刚才","下","传入","%","数据","轮廓","变成","从","org","通用","https","后续","255","及","server","two","加数","二","单向","课程","lower","互相","随时","128","cs","订阅","guyuehome","设计",")","第一","勾勒","跟随","info","处","计算","命令","async","页面","有点","看到","waiting","approx","类型","as","来看","要求","分别","岂","假设","文件",":","模型","生活","接口类","查看","里程计","终端","太小","库","之间","这种","时候","物体","addtwoints","e","adderserver","长度","bgr2hsv","左上角","detect","实现","通信接口","方法","叫做","自定","client","分析","机器","opencv","介绍","第一个","10","出去","让","ok","n","圈圈","转换","等待","部分","发送","反馈","什么","data","浏览器","两个","跟踪","学习","并且","需要","古月","比比","imagesubscriber","不知","continue","发布者","result","destroy","receiving","求解","周期性","应该","run","集成","y","目标","传输","应答","args","是否","电脑","rclpy","总结","50","frame","网络","docs","请求","退出","例程","求和","python","int","针对","去除","所在","adder","cv","越快越好","机器人","点","进入","call","或者","等","在生活中","满足","存在","给","网站","代码","返回","三个","接下来","相对","高","通过","$","大部分","接下","用于","出来","销毁","ints","传递","两种","这样","要","通信模型","思考题","try","界面","传感","列表","驱动","不","选项","完全","噪声","有","入口","功能","150","video","场景",".","了","console","下来","成","客户","\"","数据类型","正常","运动","env","法器","某些","核心","也","转圈","配置","希望","8","这个","w","机制","异步","bgr8","解析","invalid","一样","timeout","考题","available","位置","里程","范围","图像处理","request","称之为","usb","大部","转化","看","了解","from","上述","示例","半天","感器","检测","1","基本","显示","具体","之为","(","；","多","比如","继续","r","{","服务","提供","流程","numpy","如果","utf","+","接口","父类","然后","一般","to","此时","初始","contours","软硬","init","future","一种","node","传感器","type","形式","180","运行","py","认为","retr","节点","准确","拿到","get","create","exception","一问一答","之后","bgr","humble","以上","objectclient","数据通信","}","raw","service","软硬件","b","应用","颜色","命令行","时","之前","完成","_","wait","in","已经","command","周期","转化成","logger","回想","视觉","雷达","状态","更","链接","程序实现","与","不是","接收","包","封装","控制指令","*","getobjectposition","者","绝大","services","同步","并不知道","list","硬件","一","srv","放到","发","并","答","后","控制","操作","每","原理","一起","xy","done","定义","interface","反应","浏览","二个","else","super","red","常见","<","有所","左上","比比皆是","繁杂","shutdown","chain","所以","时间","、","讲","：","类","设置","。","图像识别","shape","另外","就","获取","对","红色","一些","ros2","self","color","def","唯一","绝大部分","\\","同样","执行","发布","points","中心","msgs","cnt","1.0","打开","提示","接口类型","main","cam","@","苹果","经常","not","已","boundingrect","我们","回调","得到","过程","尽快","提到","按照","居","相机","]","二值化","循环","阈值","不同","bridge","访问","0","但是","understanding","想要","上角","”","很多","class","输出"," ","2","开始","（","circle","不过","spin","图像","编程","当前","转圈圈","entry","如下","名","）","打印输出","而是","客户端","适合","没有","相比",">","为","官方","某个","incoming","!","-","简称","once","数据通","大家"],"title":"**服务**","title_tokens":["*","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_1","text":"话题通信可以实现多个ROS节点之间数据的单向传输，使用这种异步通信机制，发布者无法准确知道订阅者是否收到消息，本讲我们将一起学习ROS另外一种常用的通信方法—— 服务 ，可以实现类似 你问我答的同步通信 效果。","text_tokens":["另外","常用","方法","消息","通信","可以","传输","答","服务","是否","一起","将","发布","—"," ","效果","使用","机制","异步","收到","多个","单向","类似","无法","的","你","本","一种","我","，","我们","知道","学习","订阅","问","。","发布者","之间","这种","节点","准确","讲","者","话题","同步","实现","ros","数据"],"title":"服务","title_tokens":["服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_2","text":"在之前的课程中，我们通过一个节点驱动相机，发布图像话题，另外一个节点订阅图像话题，并实现对其中红色物体的识别，此时我们可以按照图像识别的频率，周期得到物体的位置。 这个位置信息可以继续发给机器人的上层应用使用，比如可以跟随目标运动，或者运动到目标位置附近。此时，我们并不需要这么高的频率一直订阅物体的位置，而是更希望在需要这个数据的时候，发一个查询的请求，然后尽快得到此时目标的最新位置。 这样的通信模型和话题单向传输有所不同，变成了发送一个请求，反馈一个应答的形式，好像是你问我答一样，这种通信机制在ROS中成为 服务，Service 。","text_tokens":["频率","service","目标","并不需要","传输","一直","是","应用","应答","使用","之前","请求","这么","周期","机器人","的","在","你","或者","我","，","信息","更","问","识别","附近","其中","一个","好像","高","数据","通过","变成","发","并","答","这样","通信模型","单向","课程","到","成为","驱动","有所","订阅","跟随","了","查询","。","运动","图像识别","另外","对","红色","最新","通信","希望","发布","这个","机制","一样","上层","模型","位置","我们","得到","尽快","按照","相机","有所不同","这种","时候","物体","不同","话题","实现","ros","比如","可以","继续","服务","机器"," ","图像","然后","此时","发送","反馈","和","而是","发给","形式","需要","节点","中"],"title":"通信模型","title_tokens":["通信模型","模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_3","text":"从服务的实现机制上来看，这种你问我答的形式叫做 客户端/服务器模型 ，简称为CS模型，客户端在需要某些数据的时候，针对某个具体的服务，发送请求信息，服务器端收到请求之后，就会进行处理并反馈应答信息。 这种通信机制在生活中也很常见，比如我们经常浏览的各种网页，此时你的电脑浏览器就是客户端，通过域名或者各种操作，向网站服务器发送请求，服务器收到之后返回需要展现的页面数据。","text_tokens":["通过","从","就","/","服务器","某些","会","或者","叫做","页面","通信","也","比如","域名","并","答","服务","应答","电脑","操作"," ","展现","机制","收到","请求","浏览","来看","针对","务器","此时","发送","反馈","模型","经常","生活","各种","的","在","上","你","处理","客户端","我","常见","进行","，","我们","在生活中","网页","cs","信息","形式","需要","问","为","服务器发送","网站","服务器端","某个","这种","时候","就是","浏览器","向","返回","很","客户","简称","之后","具体","。","实现","数据"],"title":"客户端/服务器模型","title_tokens":["客户端","/","服务器","客户","务器","服务","模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_4","text":"这个过程一般要求越快越好，假设服务器半天没有反应，你的浏览器一直转圈圈，那有可能是服务器宕机了，或者是网络不好，所以相比话题通信，在服务通信中，客户端可以通过接收到的应答信息，判断服务器端的状态，我们也称之为同步通信。","text_tokens":["通过","不好","服务器","通信","也","转圈","可以","可能","是","一直","服务","应答","越快","这个","网络","判断","反应","转圈圈","圈圈","浏览","一般","要求","务器","假设","越快越好","到","那有","浏览器","的","在","你","宕机","或者","客户端","，","没有","我们","状态","信息","相比","过程","所以","称之为","同步","。","服务器端","接收","越好","了","半天","中","客户","话题","之为"],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_5","text":"比如古月居这个网站，服务器是唯一存在的，并没有多个完全一样的古月居网站，但是可以访问古月居网站的客户端是不唯一的，大家每一个人都可以看到同样的界面。所以服务通信模型中，服务器端唯一，但客户端可以不唯一。","text_tokens":["服务器","看到","通信","比如","可以","并","是","唯一","服务","每","同样","但","这个","多个","通信模型","务器","界面","一样","不","模型","的","完全","客户端","，","没有","所以","存在","古月","人","居","网站","服务器端","都","中","客户","访问","但是","。","一个","大家"],"title":"一对多通信","title_tokens":["多","一对","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_6","text":"和话题通信类似，服务通信的核心还是要传递数据，数据变成了两个部分，一个 请求的数据 ，比如请求苹果位置的命令，还有一个 反馈的数据 ，比如反馈苹果坐标位置的数据，这些数据和话题消息一样，在ROS中也是要标准定义的，话题使用.msg文件定义，服务使用的是.srv文件定义，后续我们会给大家介绍定义的方法。","text_tokens":["srv","变成","方法","消息","会","传递数据","核心","通信","也","比如","标准","是","这些","服务","还有","后续","传递","介绍"," ","msg","还是","定义","使用","请求","要","一样","部分","反馈","类似","文件","坐标","苹果","大家","的","和","位置","在","两个","，","我们","给",".","了","中","命令","话题","。","一个","ros","数据"],"title":"服务接口","title_tokens":["接口","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_7","text":"大家现在对ROS服务通信应该有了基本了解，接下来我们就要开始编写代码啦。还是从一个相对简单的例程开始，也是ROS官方的一个例程，通过服务实现一个加法求解器的功能。 当我们需要计算两个加数的求和结果时，就通过客户端节点，将两个加数封装成请求数据，针对服务“add_two_ints”发送出去，提供这个服务的服务器端节点，收到请求数据后，开始进行加法计算，并将求和结果封装成应答数据，反馈给客户端，之后客户端就可以得到想要的结果啦。","text_tokens":["服务器","结果","是","应答","时","请求","_","例程","现在","求和","针对","务器","的","加法","，","啦","给","代码","封装","接下来","一个","相对","数据","通过","从","并","接下","后","ints","将","收到","器","two","加数","进行","有","功能","简单","了","下来","成","计算","客户","当","。","就","对","通信","也","还是","这个","“","我们","得到","服务器端","了解","编写","基本","实现","ros","想要","可以","”","服务","提供"," ","add","开始","出去","发送","反馈","客户端","两个","需要","就要","官方","节点","求解","之后","应该","大家"],"title":"案例一：加法求解器","title_tokens":["一","加法","：","求解","器","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_8","text":"我们一起操作下这个例程，并且看下代码的实现原理。 启动两个终端，并运行如下节点，第一个节点是服务端，等待请求数据并提供求和功能，第二个节点是客户端，发送传入的两个加数并等待求和结果。 $ ros2 run learning_service service_adder_server $ ros2 run learning_service service_adder_client 2 3","text_tokens":["$","service","结果","第二","ros2","并","是","3","client","服务","提供","操作","原理","第一个"," ","一起","2","这个","服务端","learning","server","请求","_","例程","求和","加数","二个","adder","等待","发送","的","如下","客户端","两个","，","我们","第二个","并且","启动","运行","功能","终端","看","第一","代码","节点","下","客户","传入","。","一个","实现","run","数据"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_9","text":"我们来看下客户端的实现方法。","text_tokens":["的","客户端","下","方法","我们","来看","客户","。","实现"],"title":"客户端代码解析","title_tokens":["客户端","客户","代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_10","text":"learning_service/service_adder_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-发送两个加数，请求加法器计算 \"\"\" import sys import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( AddTwoInts , 'add_two_ints' ) # 创建服务客户端对象（服务接口类型，服务名） while not self . client . wait_for_service ( timeout_sec = 1.0 ): # 循环等待服务器端成功启动 self . get_logger () . info ( 'service not available, waiting again...' ) self . request = AddTwoInts . Request () # 创建服务请求的数据对象 def send_request ( self ): # 创建一个发送服务请求的函数 self . request . a = int ( sys . argv [ 1 ]) self . request . b = int ( sys . argv [ 2 ]) self . future = self . client . call_async ( self . request ) # 异步方式发送服务请求 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderClient ( \"service_adder_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () # 发送服务请求 while rclpy . ok (): # ROS2系统正常运行 rclpy . spin_once ( node ) # 循环执行一次节点 if node . future . done (): # 数据是否处理完成 try : response = node . future . result () # 接收服务器端的反馈数据 except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( # 将收到的反馈信息打印输出 'Result of add_two_ints: for %d + %d = %d ' % ( node . request . a , node . request . b , response . sum )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , ], },","text_tokens":["服务器","sec","import","}","service","b","args","是否","rclpy",",","send","创建","learning","com","完成","_","请求","wait","int","说明","python","务器","adder","点","www","name","response","加入","的","logger","call","一次","处理","加法","scripts","，","none","启动","信息","初始化","接收","coding","代码","包","=","*","%","一个","数据","srv","sum","python3","while","break","except","for","并","后","销毁","ints","将","done","关闭","interface","定义","收到","two","加数","try","else","#","编译","again","程序","super","对象","选项","'","进行","[","知道","shutdown","guyuehome","入口","功能",")",".","info","console","：","usr","自定义","\"","计算","类","客户","设置","正常","env","法器","adderclient","async","sys","waiting","ros2","self","argv","def","配置","类型","8","执行","as","函数","d","points","系统","异步","1.0","打开","timeout","接口类型","main","setup","文件","@",":","failed","available","打印","not","接口类","request","作者","居","库","服务器端","__","]","from","示例","编写","循环","addtwoints","e","1","(","/","自定","{","r","if","client","服务","a","class","of","输出"," ","add","2","（","让","utf","成功","spin","ok","+","接口","父类","bin","初始","等待","entry","发送","反馈","init","方式","）","名","如下","打印输出","future","node","两个","客户端","...","加法器","需要","运行","古月","py","result","节点","destroy","get","create","exception","!","-","once"],"title":"程序实现","title_tokens":["实现","程序","程序实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_11","text":"对以上程序进行分析，如果我们想要实现一个客户端，流程如下： 编程接口初始化 创建节点并初始化 创建客户端对象 创建并发送请求数据 等待服务器端应答数据 销毁节点并关闭接口","text_tokens":["以上","想要","服务器","对","并","分析","服务","应答","销毁","流程"," ","如果","创建","关闭","编程","请求","接口","务器","初始","等待","发送","程序","对象","如下","客户端","进行","，","我们","初始化","服务器端","节点","：","客户","一个","实现","数据"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_12","text":"至于服务器端的实现，有点类似话题通信中的订阅者，并不知道请求数据什么时间出现，也用到了回调函数机制。","text_tokens":["出现","服务器","有点","至于","通信","数据","也","服务","函数","机制","请求","务器","什么","的","，","知道","回调","订阅","。","不知","时间","服务器端","了","者","中","话题","并不知道","用到","实现","类似"],"title":"服务端代码解析","title_tokens":["代码","解析","服务端","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_13","text":"learning_service/service_adder_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供加法器的服务器处理功能 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import AddTwoInts # 自定义的服务接口 class adderServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . srv = self . create_service ( AddTwoInts , 'add_two_ints' , self . adder_callback ) # 创建服务器对象（接口类型、服务名、服务器回调函数） def adder_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 response . sum = request . a + request . b # 完成加法求和计算，将结果放到反馈的数据中 self . get_logger () . info ( 'Incoming request \\n a: %d b: %d ' % ( request . a , request . b )) # 输出日志信息，提示已经完成加法求和计算 return response # 反馈应答信息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = adderServer ( \"service_adder_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_server = learning_service.service_adder_server:main' , 'service_adder_server = learning_service.service_adder_server:main' , ], },","text_tokens":["服务器","callback","import","}","service","结果","b","应答","args","rclpy",",","创建","learning","com","完成","_","请求","退出","求和","说明","python","务器","adder","已经","点","www","name","response","加入","的","处理","logger","加法","主","scripts","，","none","信息","初始化","coding","代码","包","=","*","%","数据","srv","放到","sum","python3","并","后","日志","销毁","ints","将","关闭","interface","定义","return","收到","server","two","#","编译","程序","super","对象","选项","'","进行","知道","[","shutdown","guyuehome","入口","功能",")",".","、","info","console","：","usr","自定义","\"","类","计算","设置","env","法器","对","ros2","self","配置","def","类型","\\","8","执行","d","函数","points","系统","打开","提示","接口类型","main","setup","文件","@",":","接口类","回调","request","作者","居","库","__","]","from","示例","编写","循环","addtwoints","adderserver","(","/","自定","{","服务","提供","a","class","输出"," ","add","让","（","utf","spin","n","+","接口","父类","bin","初始","等待","entry","反馈","init","）","名","如下","node","加法器","需要","古月","py","节点","incoming","destroy","get","create","中","!","-"],"title":"程序实现","title_tokens":["实现","程序","程序实现"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_14","text":"对以上程序进行分析，如果我们想要实现一个服务端，流程如下： 编程接口初始化 创建节点并初始化 创建服务器端对象 通过回调函数处进行服务 向客户端反馈应答结果 销毁节点并关闭接口","text_tokens":["以上","通过","想要","服务器","对","结果","并","服务","分析","应答","销毁","流程"," ","如果","创建","函数","关闭","编程","服务端","接口","务器","初始","反馈","程序","对象","如下","客户端","进行","，","我们","回调","初始化","服务器端","节点","：","向","处","客户","一个","实现"],"title":"流程总结","title_tokens":["总结","流程"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_15","text":"好啦，加法求解器已经实现了，回想下刚才我们提到的视觉识别流程，当我们需要知道目标物体位置的时候，通过服务通信的机制，岂不是更加合理。","text_tokens":["通过","通信","更加","目标","服务","流程","机制","器","已经","岂","的","回想","视觉","位置","合理","加法","，","我们","知道","啦","需要","好","识别","提到","不是","时候","刚才","了","下","求解","物体","当","。","实现"],"title":"案例二：机器视觉识别","title_tokens":["识别","视觉","：","二","案例","机器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_16","text":"此时会有三个节点出现： 相机驱动节点 ，发布图像数据； 视觉识别节点 ，订阅图像数据，并且集成了一个服务器端对象，随时准备提供目标位置； 客户端节点 ，我们可以认为是一个机器人目标跟踪的节点，当需要根据目标运动时，就发送一次请求，然后拿到一个当前的目标位置。 启动三个终端，分别运行上述三个节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_service service_object_server $ ros2 run learning_service service_object_client","text_tokens":["；","出现","根据","$","就","服务器","exe","会","service","run","目标","可以","是","ros2","object","服务","提供","机器","client","准备"," ","发布","图像","时","当前","learning","server","请求","_","然后","务器","分别","此时","发送","cam","机器人","驱动","对象","的","视觉","位置","一次","客户端","跟踪","node","，","随时","我们","有","并且","运动","启动","订阅","需要","运行","usb","识别","终端","服务器端","认为","相机","节点","拿到","上述","了","：","三个","客户","当","。","一个","集成","数据"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_17","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , ], },","text_tokens":["objectclient","}","sec","import","service","目标","应答","args","rclpy",",","send","创建","learning","com","完成","_","请求","wait","说明","python","adder","target","点","www","name","response","加入","的","logger","call","scripts","，","none","初始化","识别","coding","代码","包","=","*","getobjectposition","%","srv","python3","while","break","except","for","并","object","后","销毁","done","关闭","interface","定义","server","try","else","#","编译","again","程序","super","对象","选项","true","'","进行","知道","[","shutdown","guyuehome","入口","功能",")",".","info","console","：","usr","自定义","\"","类","设置","env","async","waiting","ros2","self","配置","def","\\","8","as","d","points","系统","1.0","打开","timeout","main","setup","文件","@",":","failed","available","位置","not","request","作者","居","库","__","]","from","示例","编写","e","(","/","position","自定","{","r","if","client","服务","class","of"," ","让","utf","spin","ok","n","接口","父类","bin","初始","等待","entry","init","如下","future","node","...","需要","古月","py","result","节点","x","destroy","get","create","exception","!","-","once","y"],"title":"客户端代码解析","title_tokens":["客户端","客户","代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_18","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'service_adder_client = learning_service.service_adder_client:main' , 'service_adder_server = learning_service.service_adder_server:main' , 'service_object_client = learning_service.service_object_client:main' , 'service_object_server = learning_service.service_object_server:main' , ], },","text_tokens":["像素","raw","callback","import","消息","服务器","service","}","目标","50","args","rclpy","颜色",",","frame","创建","效果","使用","learning","com","inrange","完成","_","去除","objectx","int","说明","python","请求","in","务器","所在","target","已经","adder","h","command","cv","drawcontours","进入","点","www","name","waitkey","mask","转化成","的","处理","logger","response","加入","主","scripts","，","none","信息","初始化","objecty","与","化成","识别","subscription","coding","代码","包","=","*","getobjectposition","者","上限","img","upper","队列","%","一个","list","高","数据","轮廓","srv","从","python3","for","并","object","用于","出来","后","日志","销毁","255","xy","将","及","关闭","interface","定义","hsv","收到","return","server","else","#","编译","下限","程序","super","red","lower","对象","互相","'","<","true","选项","噪声","左上","进行","[","128","知道","chain","shutdown","订阅","guyuehome","宽","入口","150","90","video","功能",")",".","、","勾勒","info","setup","console","：","usr","自定义","面积","\"","类","计算","设置","array","env","shape","hierarchy","点画","红色","一些","approx","对","ros2","self","color","def","配置","类型","\\","8","msg","as","函数","w","imgmsg","执行","bgr8","d","中心","系统","msgs","cnt","打开","invalid","提示","cvbridge","listener","接口类型","main","cv2","image","@",":","np","模型","苹果","坐标","退出","文件","接口类","已","boundingrect","范围","图像处理","回调","得到","request","作者","转化","居","太小","库","imshow","__","points","]","from","示例","二值化","编写","物体","循环","阈值","检测","bridge","长度","cvtcolor","bgr2hsv","话题","0","左上角","detect","1","显示","ros","(","/","position","自定","上角","{","if","client","服务","提供","opencv","class","10","circle"," ","numpy","2","（","输出","utf","spin","图像","n","+","让","接口","父类","转换","bin","to","初始","等待","entry","sensor","contours","反馈","init","findcontours","data","）","名","和","如下","node","数值","180","sub","需要","古月","为","imagesubscriber","continue","py","retr","节点","x","receiving","destroy","get","5","create","中","!","-","bgr","y"],"title":"服务端代码解析","title_tokens":["代码","解析","服务端","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_19","text":"服务命令的常用操作如下： $ ros2 service list # 查看服务列表 $ ros2 service type <service_name> # 查看服务数据类型 $ ros2 service call <service_name> <service_type> <service_data> # 发送服务请求","text_tokens":["$","常用","service","ros2","服务","类型","操作"," ","_","请求","#","列表","发送","name","data","的","如下","<","call","type","查看",">","：","命令","数据类型","list","数据"],"title":"服务命令行操作","title_tokens":["操作","命令","命令行","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_20","text":"话题和服务是ROS中最为常用的两种数据通信方法，前者适合传感器、控制指令等周期性、单向传输的数据，后者适合一问一答，同步性要求更高的数据，比如获取机器视觉识别到的目标位置。 在机器人开发过程中，类似的通信应用比比皆是，ROS针对绝大部分通用场景，都设计了标准的话题和服务数据类型，比如图像数据、雷达数据、里程计数据等等，不过机器人软硬件繁杂，很多时候这些标准定义也无法满足我们的需求，这个时候，我们就要自定义通信接口了。","text_tokens":["同步性","数据通信","常用","前者","目标","是","传输","软硬件","这些","应用","等等","针对","指令","周期","机器人","的","在","视觉","等","，","需求","雷达","满足","更","识别","控制指令","绝大","同步","硬件","高","数据","大部分","通用","控制","两种","定义","后者","传感","单向","到","无法","比比皆是","繁杂","设计","场景","、","了","自定义","数据类型","。","获取","通信","也","绝大部分","类型","最为","这个","要求","位置","里程","我们","过程","里程计","大部","时候","都","感器","开发","话题","ros","通信接口","方法","标准","自定","比如","服务","很多","机器"," ","不过","图像","接口","部分","软硬","和","适合","传感器","比比","就要","中","一问一答","周期性","数据通","类似"],"title":"思考题","title_tokens":["思考","考题","思考题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.5_%E6%9C%8D%E5%8A%A1/#_21","text":"https://docs.ros.org/en/ humble /Tutorials/Services/Understanding-ROS2-Services.html","text_tokens":[".","understanding","en","docs","/","org","tutorials","ros2","services","https","-","ros","humble","html",":"," "],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/","text":"通信接口 在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。 接口的定义 接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。 ROS通信接口 接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。 语言无关 为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。 标准接口 大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。 案例一：服务接口的定义与使用 了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。 接口定义 在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ... 程序调用 我们在代码中再来重点看下接口的使用方法。 客户端接口调用 learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 服务端接口调用 learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 案例二：话题接口的定义与使用 话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。 运行效果 现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub 接口定义 在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ... 程序调用 我们在代码中再来重点看下接口的使用方法。 发布者接口调用 learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 订阅者接口调用 learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 接口命令行操作 接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义 参考链接 https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["像素","服务器","sec","int64","import","消息","模块","必须","等等",",","创建","匹配","build","效果","像是","com","publish","现在","做成","target","各个领域","www","waitkey","各种","的","在","处理","第二个","tutorials","启动","初始化","识别","把","use","为了","coding","=","上限","img","语言","转","upper","直接","队列","一个","sum","python3","while","break","exe","except","pub","不用","安装","for","数据结构","object","日志","将","但","关闭","return","服务端","收到","hsv","#","包装","编译","again","程序","到","下限","对象","形象化","true","'","进行","参数","知道","[","宽","好","90","depend","usr","自定义","面积","查询","三原","小海","array","用到","概念","根据","hierarchy","点画","只有","会","通信","包含","调用","可能","小海龟","—","msg","最为","依赖","还是","函数","d","系统","imgmsg","不管","众多","那","cvbridge","listener","“","image","np","坐标","cv2","failed","and","打印","路径","主要","形状","参考","谁","看上","作者","imshow","g","__","重要","都","编写","很","每隔","开发","约束","cvtcolor","话题","ros","角速度","/","position","标准","工作","可以","if","typec","整型","a","of","到底","generators","将要","得","bin","sensor","来","findcontours","和","数组","...","数值","sub","人","webcam","x","就是","5","中","组成","64","常用","主程序","海龟","中有","callback","结果","第二","案例","是","这些","还有","send","使用","learning","inrange","结构","objectx","说明","务器","指令","h","drawcontours","无论","广泛","保证","造","name","response","mask","上","一次","研究","加法","主","，","none","信息","更为","objecty","化成","---","txt","subscription","en","package","下","领域","调用函数","反正","%","数据","话","轮廓","从","每个","第三","衍生","org","https","32","group","后续","255","软件","及","server","二","单向","详细","课程","哪些","lower","互相","128","连接","guyuehome","订阅","设计",")","第一","勾勒","info","计算","命令","用来","的话","30","async","看到","waiting","目的","approx","类型","as","find","值","分别","轮子","文件",":","模型","生活","分成","接口类","show","xml","查看","终端","太小","以及","库","之间","single","时候","回到","一帧","看上去","摄像","物体","动作","e","长度","第三个","bgr2hsv","micro","却是","detect","左上角","实现","通信接口","topic","方法","角度","自定","client","形象","机器","区分","10","第一个","opencv","让","出去","ok","n","自己","转换","关注","share","部分","方便","发送","反馈","等待","几个","什么","速度","data","member","有机","重点","精髓","如何","两个","图形化","exec","学习","中间","有没有","并且","需要","上边","古月","imagesubscriber","continue","发布者","result","destroy","receiving","才能","run","y","编写程序","找到","目标","传输","应答","args","电脑","是否","rclpy","50","frame","subscribernode","docs","别人","请求","线速度","例程","求和","python","交流","去除","int","所在","退出","彼此","cv","进入","机器人","插座","call","或者","等","rosidl","给","代码生成","代码","无关","上去","三个","可见","接下来","字符串","高","通过","他们","$","建立","？","无论是","接下","出来","用于","联系","销毁","传递","布尔值","件夹","这样","要","两者","try","软件开发","程序模块","列表","驱动","选项","坐标值","度","完全","对应","噪声","有","只","入口","功能","150","video","自动","define","关于","输入输出",".","转到第","体","了","下来","成","\"","客户","符合","插头","正常","运动","env","最终","转到","核心","也","想","配置","包中","肯定","希望","理解","8","这个","w","呢","机制","bgr8","解析","中来","只要","invalid","传输数据","timeout","available","还","就行","位置","描述","表示","范围","图像处理","request","称之为","种","usb","转化","看","了解","cmakelists","from","示例","检测","1","显示","具体","之为","；","(","多","比如","{","r","继续","固定","服务","提供","interfaces","标值","numpy","utf","+","涵盖","接口","父类","to","此时","初始","contours","生成","20","init","string","标准接口","future","一种","node","诞生","内容","运行","180","三种","关心","std","py","retr","讲解","准确","节点","再","get","default","create","exception","bgr","humble","以上","objectclient","编译器","}","raw","进度","service","布尔","c++","b","图形","应用","颜色","action","命令行","时","之前","完成","_","required","像素点","两","runtime","一边","wait","in","已经","command","周期","位","转化成","这里","logger","举个","视觉","好奇","关系","状态","更","generate","链接","与","不是","相互","三原色","各个","包","封装","getobjectposition","*","者","随处可见","硬件","list","一","srv","接口定义","并","自言自语","后","控制","随处","每","xy","一起","操作","done","定义","interface","二个","else","super","red","常见","<","左上","shutdown","chain","所以","键盘","、","讲","原色","降低","重复","二维","：","字符","自语","类","。","shape","另外","就","输入","获取","一些","红色","对","例子","ros2","self","def","高效","color","旋转","由于","\\","about","执行","发布","中心","msgs","cnt","1.0","打开","提示","接口类型","main","大家","@","cam","苹果","not","什么样","已","boundingrect","我们","添加","回调","得到","过程","手机","居","它","便于","相机","int32","一句","]","这","二值化","文件夹","packages","循环","阈值","不同","数","project","bridge","0","换成","里","上角","”","class","输出"," ","由","开始","（","2","circle","编程","图像","当前","看看","spin","1s","像头","个人","甚至","名","）","objectposition","publisher","而是","客户端","如下","回顾","没有","一下","减少","加","bool","为",">","concepts","你来我往","某个","摄像头","!","-","once","html","类似"],"title":"**通信接口**","title_tokens":["*","接口","通信接口","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_1","text":"在ROS系统中，无论话题还是服务，或者我们后续将要学习的动作，都会用到一个重要的概念—— 通信接口 。 通信并不是一个人自言自语，而是两个甚至更多个人，你来我往的交流，交流的内容是什么呢？为了让大家都好理解，我们可以给传递的数据定义一个标准的结构，这就是通信接口。","text_tokens":["概念","？","会","标准","多","通信","数据","可以","并","是","自言自语","服务","后续","传递","—"," ","让","理解","还是","定义","系统","呢","一个","结构","接口","将要","交流","什么","无论","个人","的","在","甚至","或者","而是","两个","，","我们","学习","更","内容","好","人","给","不是","你来我往","为了","重要","就是","都","这","中","动作","自语","话题","。","用到","ros","通信接口","大家"],"title":"通信接口","title_tokens":["接口","通信接口","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_2","text":"接口的概念在各个领域随处可见，无论是硬件结构还是软件开发，都有广泛的应用。 比如生活中最为常见的插头和插座，两者必须匹配才能使用，电脑和手机上的USB接口也是，什么Micro-USB、TypeC等等，都是关于接口的具体定义。 软件开发中，接口的使用就更多了，比如我们在编写程序时，使用的函数和函数的输入输出也称之为接口，每一次调用函数的时候，就像是把主程序和调用函数通过这个接口连接到一起，系统才能正常工作。 更为形象的是图形化编程中使用的程序模块，每一个模块都有固定的结构和形状，只有两个模块相互匹配，才能在一起工作，这就很好的讲代码形象化了。 所以什么是接口，它是一种相互关系，只有彼此匹配，才能建立连接。 回到ROS的通信系统，它的主要目的就是传输数据，那就得让大家高效的建立连接，并且准确包装和解析传输的数据内容，话题、服务等机制也就诞生了，他们传输的数据，都要 符合通信接口的标准定义 。 比如摄像头驱动发布的图像话题，由每个像素点的R、G、B三原色值组成，控制机器人运动的速度指令，由线速度和角速度组成，进行机器人配置的服务，有配置的参数和反馈的结果组成等等，类似这些常用的定义，在ROS系统中都有提供，我们也可以自己开发。 这些接口看上去像是给我们加了一些约束，但却是ROS系统的精髓所在 。举个例子，我们使用相机驱动节点的时候，完全不用关注它是如何驱动相机的，只要一句话运行，我们就可以知道发布出来的图像数据是什么样的了，直接开始我们的应用开发；类似的，键盘控制我们也可以安装一个ROS包，如何实现的呢？不用关心，反正它发布出来的肯定是线速度和角速度。","text_tokens":["编写程序","像素","常用","主程序","结果","模块","是","传输","b","图形","应用","必须","电脑","等等","这些","匹配","使用","时","像是","结构","像素点","线速度","所在","各个领域","彼此","指令","机器人","无论","广泛","的","在","插座","上","一次","举个","等","，","关系","更","更为","给","把","相互","代码","三原色","各个","包","上去","领域","可见","调用函数","反正","直接","随处可见","硬件","一个","数据","通过","他们","话","建立","？","每个","无论是","不用","安装","出来","控制","随处","每","软件","一起","但","定义","要","两者","软件开发","程序模块","包装","程序","到","驱动","形象化","常见","完全","进行","参数","知道","有","连接","所以","好","关于","输入输出","键盘","、","讲","原色","了","三原","符合","插头","。","正常","运动","概念","就","输入","只有","一些","通信","也","目的","配置","调用","例子","肯定","高效","最为","发布","还是","函数","这个","系统","机制","呢","值","解析","只要","传输数据","那","类似","生活","主要","什么样","形状","我们","看上","称之为","usb","手机","它","g","相机","一句","时候","回到","都","这","摄像","编写","看上去","很","开发","约束","micro","话题","具体","之为","却是","实现","ros","通信接口","角速度","；","标准","多","比如","工作","可以","r","固定","typec","形象","服务","机器","提供","输出"," ","让","由","开始","编程","图像","自己","接口","得","关注","像头","反馈","什么","速度","和","精髓","一种","两个","图形化","如何","诞生","并且","内容","运行","加","关心","准确","摄像头","就是","节点","中","-","才能","组成","大家"],"title":"接口的定义","title_tokens":["的","接口","定义"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#ros","text":"接口可以让程序之间的依赖降低，便于我们使用别人的代码，也方便别人使用我们的代码，这就是ROS的核心目标，减少重复造轮子。 ROS有三种常用的通信机制，分别是 话题、服务、动作 ，通过每一种通信种定义的接口，各种节点才能有机的联系到一起。","text_tokens":["通过","常用","核心","通信","也","可以","目标","是","服务","联系","每","依赖","让"," ","一起","定义","使用","别人","机制","接口","分别","轮子","方便","程序","到","造","各种","的","有机","一种","，","我们","有","种","减少","三种","便于","之间","代码","降低","重复","就是","、","这","节点","动作","话题","才能","。","ros"],"title":"ROS通信接口","title_tokens":["接口","ros","通信接口","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_3","text":"为了保证每一个节点可以使用不同语言编程，ROS将这些接口的设计做成了和 语言无关 的，比如这里看到的int32表示32位的整型数，int64表示64位的整型数，bool表示布尔值，还可以定义数组、结构体，这些定义在编译过程中，会自动生成对应到C++、Python等语言里的数据结构。 话题通信接口的定义使用的是.msg文件，由于是单向传输，只需要描述传输的每一帧数据是什么就行，比如在这个定义里，会传输两个32位的整型数，x、y，我们可以用来传输二维坐标的数值。 服务通信接口的定义使用的是.srv文件，包含请求和应答两部分定义，通过中间的“---”区分，比如之前我们学习的加法求和功能，请求数据是两个64位整型数a和b，应答是求和的结果sum。 动作是另外一种通信机制，用来描述机器人的一个运动过程，使用.action文件定义，比如我们让小海龟转90度，一边转一边周期反馈当前的状态，此时接口的定义分成了三个部分，分别是动作的目标，比如是开始运动，运动的结果，最终旋转的90度是否完成，还有一个周期反馈，比如每隔1s反馈一下当前转到第10度、20度还是30度了，让我们知道运动的进度。","text_tokens":["64","int64","海龟","进度","结果","布尔","目标","c++","是","传输","这些","b","应答","还有","是否","action","使用","之前","完成","请求","结构","两","求和","python","一边","做成","周期","位","机器人","保证","这里","的","在","加法","等","，","状态","为了","---","无关","三个","语言","转","一个","数据","通过","srv","sum","数据结构","32","每","将","定义","布尔值","单向","编译","到","度","对应","知道","只","功能","90","设计","自动",".","、","转到第","二维","体","了","小海","用来","。","运动","最终","另外","30","转到","会","看到","通信","包含","旋转","小海龟","由于","msg","这个","还是","机制","分别","“","文件","坐标","还","就行","分成","描述","表示","我们","过程","int32","一帧","每隔","动作","不同","数","话题","ros","通信接口","里","比如","可以","”","整型","服务","区分","a","机器","10"," ","让","开始","编程","当前","1s","接口","此时","部分","反馈","生成","20","什么","和","一种","两个","数组","数值","中间","学习","一下","需要","bool","节点","x","中","y"],"title":"语言无关","title_tokens":["语言","无关"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_4","text":"大家可能好奇ROS系统到底给我们定义了哪些接口呢？我们可以在ROS安装路径中的share文件夹中找到，涵盖众多标准定义，大家可以打开几个看看。","text_tokens":["？","标准","找到","安装","可以","可能","到底","定义","系统","呢","看看","件夹","涵盖","接口","打开","众多","share","文件","几个","哪些","的","在","路径","好奇","，","我们","给","了","文件夹","中","。","ros","大家"],"title":"标准接口","title_tokens":["标准","标准接口","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_5","text":"了解了通信接口的概念，接下来我们再从代码实现的角度，研究下如何定义以及使用一个接口。 在之前服务概念讲解的课程中，我们编写了这样一个例程，我们再来回顾下。 有三个节点，第一个驱动相机发布图像话题，第二个是机器视觉识别节点，封装了一个服务的服务端对象，提供目标识别位置的查询服务，第三个节点在需要目标位置的时候，就可以发送请求，收到位置进行使用了。","text_tokens":["概念","从","就","角度","第三","通信","第二","目标","可以","接下","是","服务","提供","机器","第一个"," ","发布","定义","使用","图像","服务端","收到","之前","这样","请求","例程","接口","二个","发送","来","课程","驱动","对象","的","在","视觉","位置","研究","如何","进行","，","我们","回顾","有","第二个","需要","识别","第一","以及","相机","了解","代码","讲解","节点","再","了","下","封装","编写","下来","三个","时候","中","查询","接下来","第三个","话题","。","一个","实现","通信接口"],"title":"案例一：服务接口的定义与使用","title_tokens":["一","的","定义","使用","与","：","接口","案例","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_6","text":"在这个例程中，我们使用GetObjectPosition.srv定义了服务通信的接口： learning_interface/srv/GetObjectPosition.srv bool get # 获取目标位置的指令 --- int32 x # 目标的X坐标 int32 y # 目标的Y坐标 定义中有两个部分，上边是获取目标位置的指令，get为true的话，就表示我们需要一次位置，服务端就会反馈这个x、y坐标了。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"srv/GetObjectPosition.srv\" ) ... 功能包的package.xml文件中也需要添加代码生成的功能依赖： ... <build_depend> rosidl_default_generators </build_depend> <exec_depend> rosidl_default_runtime </exec_depend> <member_of_group> rosidl_interface_packages </member_of_group> ...","text_tokens":["编译器","中有","}","目标","是","build","使用","learning","完成","required","_","runtime","例程","指令","name","的","在","一次","，","generate","rosidl","代码生成","---","txt","代码","package","包","getobjectposition","语言","srv","$","接口定义","后","group","定义","interface","服务端","#","编译","选项","true","<","功能","depend","自动",")",".","、","了","：","\"","。","的话","根据","就","获取","会","通信","也","配置","依赖","这个","find","文件","坐标","还","位置","我们","表示","添加","过程","xml","int32","cmakelists","packages","不同","project","(","/","{","服务","interfaces","of"," ","让","generators","接口","部分","反馈","生成","member","两个","...","exec","需要","上边",">","bool","为","x","get","default","中","y"],"title":"接口定义","title_tokens":["定义","接口定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_7","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["代码","在","重点","的","再","使用","下","方法","。","我们","接口","中","来","看"],"title":"程序调用","title_tokens":["调用","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_8","text":"learning_service/service_object_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-请求目标识别，等待目标位置应答 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 class objectClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . client = self . create_client ( GetObjectPosition , 'get_target_position' ) while not self . client . wait_for_service ( timeout_sec = 1.0 ): self . get_logger () . info ( 'service not available, waiting again...' ) self . request = GetObjectPosition . Request () def send_request ( self ): self . request . get = True self . future = self . client . call_async ( self . request ) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = objectClient ( \"service_object_client\" ) # 创建ROS2节点对象并进行初始化 node . send_request () while rclpy . ok (): rclpy . spin_once ( node ) if node . future . done (): try : response = node . future . result () except Exception as e : node . get_logger () . info ( 'Service call failed %r ' % ( e ,)) else : node . get_logger () . info ( 'Result of object position: \\n x: %d y: %d ' % ( response . x , response . y )) break node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["objectclient","sec","import","service","目标","应答","args","rclpy",",","send","创建","learning","com","_","请求","wait","说明","python","target","www","name","response","的","logger","call","，","none","初始化","识别","coding","=","*","getobjectposition","%","srv","python3","while","break","except","for","并","object","销毁","done","关闭","interface","定义","try","else","#","again","super","对象","true","'","进行","shutdown","guyuehome",")",".","info","usr","自定义","\"","类","env","async","waiting","ros2","self","def","\\","8","as","d","1.0","timeout","main","@",":","failed","available","位置","not","request","作者","居","库","__","from","示例","e","(","/","position","自定","r","if","client","服务","class","of"," ","utf","spin","ok","n","接口","父类","bin","初始","等待","init","future","node","...","古月","py","result","节点","x","destroy","get","create","exception","!","-","once","y"],"title":"客户端接口调用","title_tokens":["客户端","客户","调用","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_9","text":"learning_service/service_object_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2服务示例-提供目标识别服务 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 import numpy as np # Python数值计算库 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 from learning_interface.srv import GetObjectPosition # 自定义的服务接口 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . srv = self . create_service ( GetObjectPosition , # 创建服务器对象（接口类型、服务名、服务器回调函数） 'get_target_position' , self . object_position_callback ) self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def object_position_callback ( self , request , response ): # 创建回调函数，执行收到请求后对数据的处理 if request . get == True : response . x = self . objectX # 目标物体的XY坐标 response . y = self . objectY self . get_logger () . info ( 'Object position \\n x: %d y: %d ' % ( response . x , response . y )) # 输出日志信息，提示已经反馈 else : response . x = 0 response . y = 0 self . get_logger () . info ( 'Invalid command' ) # 输出日志信息，提示已经反馈 return response def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"service_object_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["像素","raw","callback","import","消息","服务器","service","目标","50","args","rclpy","颜色",",","frame","创建","效果","使用","learning","com","inrange","_","去除","objectx","int","说明","python","请求","in","务器","所在","target","已经","h","command","cv","drawcontours","进入","www","name","waitkey","mask","转化成","的","处理","logger","response","主","，","none","信息","初始化","objecty","与","化成","识别","subscription","coding","=","*","getobjectposition","者","上限","img","upper","队列","%","一个","list","高","数据","轮廓","srv","从","python3","for","并","object","用于","出来","后","日志","销毁","255","xy","将","及","关闭","interface","定义","hsv","收到","return","server","else","#","下限","super","red","lower","对象","互相","'","<","true","噪声","左上","进行","[","128","chain","shutdown","订阅","guyuehome","宽","入口","150","90","video",")",".","、","勾勒","info","usr","自定义","面积","\"","类","计算","array","env","shape","hierarchy","点画","红色","一些","approx","对","ros2","self","color","def","类型","\\","8","msg","as","函数","w","imgmsg","执行","bgr8","d","中心","msgs","cnt","invalid","提示","cvbridge","listener","接口类型","main","cv2","image","@",":","np","模型","苹果","坐标","退出","接口类","已","boundingrect","范围","图像处理","回调","得到","request","作者","转化","居","太小","库","imshow","__","]","from","示例","二值化","物体","循环","阈值","检测","bridge","长度","cvtcolor","bgr2hsv","话题","0","左上角","detect","1","显示","ros","(","/","position","自定","上角","if","服务","提供","opencv","class","10","circle"," ","numpy","2","（","输出","utf","spin","图像","n","+","接口","父类","转换","bin","to","初始","等待","sensor","contours","反馈","init","findcontours","data","）","名","和","node","数值","180","sub","古月","为","imagesubscriber","continue","py","retr","节点","x","receiving","destroy","get","5","create","中","!","-","bgr","y"],"title":"服务端接口调用","title_tokens":["调用","接口","服务端","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_10","text":"话题通信接口的定义也是类似的，继续从之前的机器视觉案例中来衍生，我们想把服务换成话题，周期发布目标识别的位置，不管有没有人需要。","text_tokens":["换成","从","衍生","通信","也","想","案例","继续","是","目标","服务","机器","发布","不管","定义","之前","接口","中来","周期","的","视觉","位置","，","我们","没有","有没有","需要","人","识别","把","话题","。","通信接口","类似"],"title":"案例二：话题接口的定义与使用","title_tokens":["的","定义","使用","与","：","接口","二","案例","话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_11","text":"现在我们会运行三个节点： 第一个节点，将驱动相机并发布图像话题，此时的话题数据使用的是ROS中标准定义的Image图像消息； 第二个节点，会运行视觉识别功能，识别目标的位置，这个位置我们希望封装成话题消息，发布出去，谁需要使用谁就来订阅； 第三个节点，订阅位置话题，打印到终端中。 启动三个终端，分别运行以上节点： $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_topic interface_object_pub $ ros2 run learning_topic interface_object_sub","text_tokens":["；","以上","topic","$","就","exe","会","消息","标准","第三","pub","第二","run","目标","并","是","ros2","object","第一个","希望"," ","将","发布","出去","这个","定义","使用","图像","learning","interface","_","现在","二个","分别","此时","来","image","到","cam","驱动","的","打印","视觉","位置","node","，","我们","第二个","谁","启动","订阅","需要","运行","sub","usb","功能","识别","终端","第一","相机","节点","封装","：","三个","成","中","第三个","话题","。","一个","ros","数据"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_12","text":"在这个例程中，我们使用ObjectPosition.msg定义了服务通信的接口： learning_interface/msg/ObjectPosition.msg int32 x # 表示目标的X坐标 int32 y # 表示目标的Y坐标 话题消息的内容是一个位置，我们使用x、y坐标值进行描述。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"msg/ObjectPosition.msg\" ) ...","text_tokens":["编译器","}","消息","目标","是","使用","learning","完成","required","_","例程","name","的","在","，","generate","rosidl","txt","代码","package","包","语言","一个","$","接口定义","后","定义","interface","#","编译","选项","坐标值","进行","功能","自动",")",".","、","了","：","\"","。","根据","通信","配置","msg","这个","find","坐标","还","位置","描述","我们","表示","过程","int32","cmakelists","不同","project","话题","(","/","{","服务","标值","interfaces"," ","让","generators","接口","生成","objectposition","...","内容","需要","x","default","中","y"],"title":"接口定义","title_tokens":["定义","接口定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_13","text":"我们在代码中再来重点看下接口的使用方法。","text_tokens":["代码","在","重点","的","再","使用","下","方法","。","我们","接口","中","来","看"],"title":"程序调用","title_tokens":["调用","程序"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_14","text":"learning_topic/interface_object_pub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-发布目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , 'image_raw' , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） self . pub = self . create_publisher ( ObjectPosition , \"object_position\" , 10 ) # 创建发布者对象（消息类型、话题名、队列长度） self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . objectX = 0 self . objectY = 0 def object_detect ( self , image ): hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , # 将苹果的图像中心点画出来 ( 0 , 255 , 0 ), - 1 ) self . objectX = int ( x + w / 2 ) self . objectY = int ( y + h / 2 ) cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , 'bgr8' ) # 将ROS的图像消息转化成OpenCV图像 position = ObjectPosition () self . object_detect ( image ) # 苹果检测 position . x , position . y = int ( self . objectX ), int ( self . objectY ) self . pub . publish ( position ) # 发布目标位置 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"topic_webcam_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["像素","raw","callback","import","消息","目标","50","args","rclpy","颜色",",","frame","创建","效果","使用","learning","com","inrange","publish","_","去除","objectx","int","说明","python","退出","in","所在","h","cv","drawcontours","进入","www","name","waitkey","mask","转化成","的","处理","logger","主","，","none","信息","初始化","objecty","与","化成","subscription","coding","=","*","者","上限","img","upper","队列","一个","list","高","轮廓","从","python3","pub","for","并","object","用于","出来","后","日志","销毁","255","xy","将","及","关闭","interface","定义","hsv","#","下限","super","red","lower","对象","互相","'","<","噪声","左上","进行","[","128","chain","shutdown","订阅","guyuehome","宽","入口","150","90","video",")",".","、","勾勒","info","usr","自定义","面积","\"","类","计算","array","env","shape","hierarchy","点画","红色","一些","approx","ros2","self","color","def","类型","8","发布","msg","as","函数","w","imgmsg","bgr8","中心","msgs","cnt","提示","cvbridge","listener","main","cv2","image","@",":","np","模型","苹果","坐标","位置","已","boundingrect","范围","图像处理","回调","得到","作者","转化","居","太小","库","imshow","__","]","from","示例","二值化","循环","阈值","检测","bridge","长度","cvtcolor","bgr2hsv","话题","0","左上角","detect","1","显示","ros","(","topic","/","position","自定","上角","if","opencv","class","10","circle"," ","numpy","2","（","输出","utf","spin","图像","+","接口","父类","转换","bin","to","初始","等待","sensor","contours","init","findcontours","data","）","objectposition","名","和","publisher","node","数值","180","sub","古月","为","imagesubscriber","continue","发布者","webcam","py","retr","节点","x","receiving","destroy","get","5","create","中","!","-","bgr","y"],"title":"发布者接口调用","title_tokens":["发布","调用","接口","发布者"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_15","text":"learning_topic/interface_object_sub.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2接口示例-订阅目标位置 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from std_msgs.msg import String # 字符串消息类型 from learning_interface.msg import ObjectPosition # 自定义的目标位置消息 \"\"\" 创建一个订阅者节点 \"\"\" class SubscriberNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( \\ ObjectPosition , \"/object_position\" , self . listener_callback , 10 ) # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度 def listener_callback ( self , msg ): # 创建回调函数，执行收到话题消息后对数据的处理 self . get_logger () . info ( 'Target Position: \"( %d , %d )\"' % ( msg . x , msg . y )) # 输出日志信息，提示订阅收到的话题消息 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = SubscriberNode ( \"interface_position_sub\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口","text_tokens":["callback","import","消息","目标","args","rclpy",",","创建","subscribernode","learning","com","_","退出","说明","python","target","www","name","的","处理","logger","主","，","none","信息","初始化","subscription","coding","=","*","者","队列","%","字符串","一个","数据","python3","并","object","后","日志","销毁","关闭","interface","定义","收到","#","super","对象","'","进行","shutdown","订阅","guyuehome","入口",")",".","、","info","usr","自定义","\"","类","字符","env","对","ros2","self","def","类型","\\","8","msg","执行","函数","d","msgs","提示","listener","main","@",":","位置","回调","作者","居","库","__","from","示例","循环","长度","话题","(","topic","/","position","自定","class","10","输出"," ","（","utf","spin","接口","父类","bin","初始","等待","string","init","objectposition","名","node","sub","古月","std","py","节点","x","destroy","get","create","!","-","y"],"title":"订阅者接口调用","title_tokens":["调用","订阅","者","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_16","text":"接口命令的常用操作如下： $ ros2 interface list # 查看系统接口列表 $ ros2 interface show <interface_name> # 查看某个接口的详细定义 $ ros2 interface package <package_name> # 查看某个功能包中的接口定义","text_tokens":["$","常用","接口定义","包中","ros2","操作"," ","interface","定义","系统","_","接口","#","列表","详细","name","的","如下","<","show","查看",">","功能","某个","package","：","命令","list"],"title":"接口命令行操作","title_tokens":["操作","命令","接口","命令行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.6_%E9%80%9A%E4%BF%A1%E6%8E%A5%E5%8F%A3/#_17","text":"https://docs.ros.org/en/humble/Concepts/About-ROS-Interfaces.html https://docs.ros.org/en/humble/Tutorials/Single-Package-Define-And-Use-Interface.html","text_tokens":["/","org","https","interfaces","about"," ","interface","docs",":","and","tutorials","concepts","define",".","use","en","single","package","-","humble","html","ros"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/","text":"动作 机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。 通信模型 举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。 客户端/服务器模型 动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。 一对多通信 和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。 同步通信 既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。 由服务和话题合成 大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。 案例一：小海龟的动作 我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback 案例二：机器人画圆 如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。 运行效果 启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。 接口定义 例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是动作的目标，enable为true时，表示开始运动； 第二块是动作的执行结果，finish为true，表示动作执行完成； 第三块是动作的周期反馈，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ... 通信模型 通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。 服务端代码解析 learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], }, 客户端代码解析 learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], }, 动作命令行操作 动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求 参考链接 https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":["进度条","服务器","import","消息","模块","理",",","创建","效果","publish","com","现在","以下","www","的","在","处理","实际","scripts","需求","tutorials","启动","初始化","识别","把","coding","一段时间","=","语言","转","导航","不仅","直接","思路","一个","python3","feedback","for","日志","publishing","但","关闭","return","服务端","收到","隐藏","#","编译","到","程序","对象","true","'","进行","其实","知道","[","好","试一试","handle","简单","usr","达到","自定义","小海","秘密","当","用到","一对","概念","根据","sleep","只有","会","通信","包含","可能","调用","小海龟","—","msg","d","函数","系统","多个","那","仔细","movecircle","setup","坐标","参考","送货","仿真器","作者","服务器端","__","都","编写","很","每隔","话题","含义","被","ros","动图","/","标准","合成","可以","if","到底","generators","add","成功","enable","得","bin","复杂","来","方式","臂","和","...","是不是","就是","第一块","中","取消","callback","常用","海龟","--","结果","过","第二","案例","是","这些","圆周运动","send","使用","learning","段时间","说明","这么","务器","指令","加入","name","response","上","一次","就此结束","主","，","none","信息","更为","---","txt","en","package","下","毕竟","%","finish","数据","清楚","从","第三","org","360","https","结束","机械","发出","直到","装","server","二","先","又","随时","当中","订阅","guyuehome","accepted",")","rotate","第一","info","请","命令","某一","眼前","30","async","看到","目的","类型","发现","应带","rotateabsolute","多少","find","没错","所处","分别","假设","遥控","文件","分拣",":","行为","模型","起来","goal","接口类","查看","终端","turtle1","库","这种","实时","动作","完整","实现","拒绝执行","通信接口","movecircleactionserver","仿真","方法","time","角度","自定","仅仅","client","分析","机器","10","介绍","让","智能","ok","turtlesim","第二块","等待","部分","发送","反馈","什么","data","如何","转个","两个","有没有","需要","上边","古月","发布者","result","destroy","多少度","一段","抓取","才能","run","真器","目标","一套","args","是否","rclpy","不仅仅","docs","请求","退出","例程","python","针对","机器人","点","一点","turtle","等","teleop","特性","干什么","满足","rosidl","代码","三个","应用层","actions","接下来","0.5","相对","通过","$","？","接下","销毁","这样","通信模型","列表","一块","送给","不","选项","度","就此","有","入口","功能","虽然","场景","自动",".","了","console","名字","下来","动","客户","\"","数据类型","state","运动","env","最终","不会","也","想","转圈","配置","肯定","其","希望","理解","8","这个","机制","呢","使","异步","解析","一样","还","位置","常常","告诉","表示","actionserver","读取","看","发送给","cmakelists","i","from","示例","具体","；","(","指定","模拟","二块","多","比如","{","服务","interfaces","流程","如果","utf","range","较长","接口","父类","顺利","处理函数","初始","既然","生成","20","init","received","future","一种","node","type","三块","运行","第三块","py","节点","再","get","default","圆周","之后","humble","负责","一点一点","编译器","}","进度","应用","只能","action","命令行","时","完成","之前","_","required","wait","一边","in","周期","送餐","logger","举个","key","状态","generate","链接","succeed","不是","接收","包","封装","*","者","同步","list","一","能","接口定义","并","后","控制","合适","操作","每","再用","一起","原理","done","定义","interface","execute","super","<","竟然","还会","shutdown","时间","键盘","、","theta","：","同时","类","设置","move","。","另外","就","moving","获取","对","ros2","例子","self","def","拒绝","旋转","像","执行","发布","points","圈","movecircleactionclient","打开","加深","接口类型","main","大家","背后","@","底层","not","我们","回调","过程","按照","居","便于","1.57","哪里","int32","]","这","循环","不同","project","0","但是","understanding","管理","控","class","circle"," ","由","开始","（","输出","编程","spin","当前","1s","entry","absolute","写","actionclient","）","名","如下","客户端","而是","没有","姿态","一下","相比","基于",">","bool","为","整个","某","某个","画圆","rejected","!","根本","-","html","类似"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_1","text":"机器人是一个复杂的智能系统，并不仅仅是键盘遥控运动、识别某个目标这么简单，我们需要实现的是送餐、送货、分拣等满足具体场景需求的机器人。 在这些应用功能的实现中，另外一种ROS通信机制也会被常常用到——那就是 动作 。从这个名字上就可以很好理解这个概念的含义，这种通信机制的目的就是便于 对机器人某一完整行为的流程进行管理 。","text_tokens":["概念","另外","从","就","会","对","通信","也","目的","目标","并","是","仅仅","这些","可以","应用","机器","不仅仅","流程"," ","—","理解","这个","智能","系统","机制","一个","这么","那","复杂","遥控","送餐","机器人","分拣","行为","某一","的","在","上","常常","一种","等","进行","，","我们","需求","满足","送货","管理","需要","好","功能","识别","场景","键盘","、","某个","这种","便于","简单","就是","名字","很","用到","中","动作","含义","被","不仅","完整","具体","。","运动","实现","ros"],"title":"动作","title_tokens":["动作"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_2","text":"举个例子，比如我们想让机器人转个圈，这肯定不是一下就可以完成的，机器人得一点一点旋转，直到360度才能结束，假设机器人并不在我们眼前，发出指令后，我们根本不知道机器人到底有没有开始转圈，转到哪里了？ OK，现在我们需要的是一个反馈，比如每隔1s，告诉我们当前转到多少度了，10度、20度、30度，一段时间之后，到了360度，再发送一个信息，表示动作执行完成。 这样一个需要执行一段时间的行为，使用动作的通信机制就更为合适，就像装了一个进度条，我们可以随时把控进度，如果运动过程当中，我们还可以随时发送一个取消运动的命令。","text_tokens":["一点一点","进度条","进度","是","使用","完成","段时间","现在","指令","机器人","一点","的","举个","在","，","信息","更为","把","不是","一段时间","转","一个","？","360","并","后","结束","合适","发出","直到","装","这样","到","不","度","随时","知道","当中","时间","、","了","命令","。","运动","眼前","就","30","才能","通信","想","例子","转圈","肯定","旋转","像","执行","圈","机制","多少","假设","行为","还","我们","告诉","表示","过程","哪里","这","每隔","动作","比如","可以","机器","控","10"," ","让","到底","开始","如果","ok","当前","1s","得","发送","反馈","20","转个","没有","有没有","一下","需要","多少度","再","一段","根本","之后","取消"],"title":"通信模型","title_tokens":["通信模型","模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_3","text":"动作和服务类似，使用的也是客户端和服务器模型，客户端发送动作的目标，想让机器人干什么，服务器端执行动作过程， 控制机器人达到运动的目标，同时周期反馈动作执行过程中的状态。 客户端发送一个运动的目标，想让机器人动起来，服务器端收到之后，就开始控制机器人运动，一边运动，一边反馈当前的状态，如果是一个导航动作，这个反馈可能是当前所处的坐标，如果是机械臂抓取，这个反馈可能又是机械臂的实时姿态。当运动执行结束后，服务器再反馈一个动作结束的信息。整个通信过程就此结束。","text_tokens":["就","服务器","通信","也","想","目标","可能","是","后","服务","控制","机器","机械","结束"," ","让","执行","开始","如果","这个","使用","收到","当前","一个","一边","所处","又","务器","发送","周期","反馈","机器人","什么","模型","坐标","臂","的","和","就此","起来","就此结束","客户端","，","姿态","干什么","状态","信息","过程","整个","服务器端","当","实时","再","达到","同时","动作","客户","中","动","导航","之后","抓取","。","运动","类似"],"title":"客户端/服务器模型","title_tokens":["客户端","/","服务器","客户","务器","服务","模型"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_4","text":"和服务一样，动作通信中的客户端可以有多个，大家都可以发送运动命令，但是服务器端只能有一个，毕竟只有一个机器人，先执行完成一个动作，才能执行下一个动作。","text_tokens":["服务器","只有","通信","可以","服务","机器","只能","执行","完成","多个","一个","先","务器","一样","发送","机器人","的","和","客户端","，","有","服务器端","都","下","毕竟","动作","中","客户","命令","才能","但是","。","运动","大家"],"title":"一对多通信","title_tokens":["多","一对","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_5","text":"既然有反馈，那动作也是一种同步通信机制，之前我们也介绍过，动作过程中的数据通信接口，使用.action文件进行定义。","text_tokens":["通信","也","过","是","介绍","action","定义","使用","机制","之前","接口","那","既然","反馈","文件","的","一种","进行","，","我们","有","过程","。",".","动作","中","同步","通信接口","数据"],"title":"同步通信","title_tokens":["同步","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_6","text":"大家再仔细看下上边的动图，是不是还会发现一个隐藏的秘密。 动作的三个通信模块，竟然有两个是服务，一个是话题，当客户端发送运动目标时，使用的是服务的请求调用，服务器端也会反馈一个应带，表示收到命令。动作的反馈过程，其实就是一个话题的周期发布，服务器端是发布者，客户端是订阅者。 没错，动作是一种应用层的通信机制，其底层就是基于话题和服务来实现的。","text_tokens":["服务器","会","通信","模块","也","目标","调用","是","服务","应用","其","发现"," ","应带","发布","使用","时","收到","机制","请求","没错","务器","仔细","隐藏","发送","反馈","周期","大家","来","的","和","底层","客户端","竟然","两个","其实","，","还会","表示","有","运动","一种","过程","订阅","上边","基于","看","发布者","不是","服务器端","是不是","就是","再","下","三个","应用层","者","动作","客户","命令","话题","秘密","当","。","一个","实现","动图"],"title":"由服务和话题合成","title_tokens":["和","合成","服务","由","话题"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_7","text":"我们再用小海龟的案例加深对动作概念的理解。 按照以下命令启动小海龟仿真器，接下来使用action命令控制小海龟的动作，可以让海龟运动到某一指定的姿态： $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key $ ros2 action info /turtle1/rotate_absolute $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" $ ros2 action send_goal /turtle1/rotate_absolute turtlesim/action/RotateAbsolute \"{theta: -1.57}\" --feedback","text_tokens":["一","仿真","概念","指定","$","/","}","海龟","--","对","feedback","案例","可以","接下","ros2","{","控制","小海龟","再用"," ","理解","action","让","send","rotateabsolute","使用","turtlesim","_","以下","加深","到",":","absolute","的","turtle","key","node","goal","，","我们","姿态","teleop","启动","仿真器","按照","某","rotate","turtle1","1.57","info","theta","：","下来","动作","\"","命令","小海","接下来","-","。","运动","run","真器"],"title":"案例一：小海龟的动作","title_tokens":["一","的","：","海龟","动作","案例","小海","小海龟"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_8","text":"如何通过代码来实现动作的编程呢？ 动作虽然是基于话题和服务实现的，但在实际使用中，并不会直接使用话题和服务的编程方法，而是有一套针对动作特性封装好的编程接口，接下来我们就一起试一试。 假设我们有一个机器人，我们希望通过动作的通信方法，让机器人转个圈，请编程实现动作通信中，客户端和服务器端的实现过程。","text_tokens":["通过","不会","就","服务器","方法","？","通信","并","是","接下","服务","直接","一套","机器","希望"," ","一起","但","让","编程","使用","呢","圈","接口","针对","务器","假设","来","机器人","的","和","在","如何","而是","实际","转个","客户端","，","特性","我们","有","过程","基于","好","虽然","服务器端","代码","试一试","封装","下来","动作","中","请","客户","接下来","话题","。","一个","实现"],"title":"案例二：机器人画圆","title_tokens":["画圆","：","二","案例","机器","机器人"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_9","text":"启动两个终端，分别运行一下命令，启动动作示例的服务端和客户端： $ ros2 run learning_action action_move_server $ ros2 run learning_action action_move_client 终端中，我们可以看到客户端发送动作目标之后，服务器端开始模拟机器人运动，每30度发送一次反馈信息，最终完成运动，并反馈结束运动的信息。 接下来我们就分析下这个例程实现背后的原理。","text_tokens":["最终","$","模拟","服务器","30","就","看到","ros2","可以","目标","并","client","服务","接下","机器","结束","分析","每","原理"," ","action","开始","这个","服务端","learning","server","完成","_","例程","分别","务器","发送","反馈","机器人","背后","度","的","和","一次","客户端","两个","，","我们","启动","一下","信息","运行","终端","服务器端","示例","下","：","下来","动作","客户","中","命令","接下来","move","之后","。","运动","实现","run"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_10","text":"例程使用的动作并不是ROS中的标准定义，我们通过MoveCircle.action进行自定义： learning_interface/action/MoveCircle.action bool enable # 定义动作的目标，表示动作开始的指令 --- bool finish # 定义动作的结果，表示是否成功执行 --- int32 state # 定义动作的反馈，表示当前执行到的位置 包含三个部分： 第一块是动作的目标，enable为true时，表示开始运动； 第二块是动作的执行结果，finish为true，表示动作执行完成； 第三块是动作的周期反馈，表示当前机器人旋转到的角度。 完成定义后，还需要在功能包的CMakeLists.txt中配置编译选项，让编译器在编译过程中，根据接口定义，自动生成不同语言的代码： ... find_package ( rosidl_default_generators REQUIRED ) rosidl_generate_interfaces ( ${ PROJECT_NAME } \"action/MoveCircle.action\" ) ...","text_tokens":["编译器","}","结果","第二","目标","是","是否","action","使用","learning","时","完成","required","_","例程","指令","周期","机器人","name","的","在","，","generate","rosidl","不是","---","txt","代码","package","包","三个","语言","finish","通过","$","第三","接口定义","并","后","定义","interface","#","一块","编译","到","选项","true","进行","功能","自动",")","第一",".","：","自定义","\"","state","。","运动","根据","包含","配置","旋转","执行","find","movecircle","还","位置","我们","表示","过程","int32","cmakelists","动作","不同","project","ros","；","(","/","角度","二块","标准","自定","{","interfaces","机器"," ","让","开始","generators","成功","当前","enable","接口","第二块","部分","反馈","生成","...","三块","需要","bool","为","第三块","default","第一块","中"],"title":"接口定义","title_tokens":["定义","接口定义","接口"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_11","text":"通信模型就是这样，客户端发送给一个动作目标，服务器控制机器人开始运动，并周期反馈，结束后反馈结束信息。 思路理清楚，接下来开始写代码。相比之前话题和服务的程序，动作通信的例程相对较长，我们一起来运行并分析一下。","text_tokens":["一","清楚","服务器","通信","目标","并","接下","后","服务","控制","机器","结束","分析","理"," ","开始","思路","之前","这样","较长","例程","通信模型","务器","发送","周期","反馈","送给","机器人","程序","模型","写","的","和","起来","客户端","，","我们","运动","信息","相比","一下","运行","发送给","代码","就是","下来","动作","客户","接下来","话题","。","一个","相对"],"title":"通信模型","title_tokens":["通信模型","模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_12","text":"learning_action/action_move_server.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-负责执行圆周运动动作的服务端 \"\"\" import time import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionServer # ROS2 动作服务器类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionServer ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_server = ActionServer ( # 创建动作服务器（接口类型、动作名、回调函数） self , MoveCircle , 'move_circle' , self . execute_callback ) def execute_callback ( self , goal_handle ): # 执行收到动作目标之后的处理函数 self . get_logger () . info ( 'Moving circle...' ) feedback_msg = MoveCircle . Feedback () # 创建一个动作反馈信息的消息 for i in range ( 0 , 360 , 30 ): # 从0到360度，执行圆周运动，并周期反馈信息 feedback_msg . state = i # 创建反馈信息，表示当前执行到的角度 self . get_logger () . info ( 'Publishing feedback: %d ' % feedback_msg . state ) goal_handle . publish_feedback ( feedback_msg ) # 发布反馈信息 time . sleep ( 0.5 ) goal_handle . succeed () # 动作执行成功 result = MoveCircle . Result () # 创建结果消息 result . finish = True return result # 反馈最终动作执行的结果 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionServer ( \"action_move_server\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["负责","服务器","callback","import","消息","}","结果","目标","args","rclpy","圆周运动",",","创建","action","learning","com","publish","完成","_","退出","说明","python","in","务器","周期","点","www","name","加入","的","处理","logger","主","scripts","，","none","信息","初始化","succeed","coding","代码","包","=","*","%","0.5","一个","finish","从","python3","feedback","360","for","并","后","销毁","publishing","关闭","interface","定义","服务端","收到","execute","server","return","#","编译","到","程序","super","对象","选项","度","'","true","进行","知道","[","shutdown","guyuehome","入口","功能",")",".","、","info","handle","console","：","usr","自定义","\"","类","设置","move","state","运动","env","最终","30","moving","sleep","ros2","self","配置","def","类型","8","执行","msg","函数","d","发布","系统","points","打开","movecircle","接口类型","main","setup","文件","@",":","goal","接口类","表示","actionserver","回调","作者","居","库","__","i","]","from","示例","编写","循环","动作","0","movecircleactionserver","(","/","time","角度","自定","{","服务","class","circle"," ","让","（","utf","成功","spin","当前","range","接口","父类","bin","处理函数","初始","等待","entry","反馈","init","）","名","如下","node","...","需要","古月","py","result","节点","destroy","get","!","圆周","-","之后"],"title":"服务端代码解析","title_tokens":["代码","解析","服务端","服务"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_13","text":"learning_action/action_move_client.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2动作示例-请求执行圆周运动动作的客户端 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from rclpy.action import ActionClient # ROS2 动作客户端类 from learning_interface.action import MoveCircle # 自定义的圆周运动接口 class MoveCircleActionClient ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . _action_client = ActionClient ( # 创建动作客户端（接口类型、动作名） self , MoveCircle , 'move_circle' ) def send_goal ( self , enable ): # 创建一个发送动作目标的函数 goal_msg = MoveCircle . Goal () # 创建一个动作目标的消息 goal_msg . enable = enable # 设置动作目标为使能，希望机器人开始运动 self . _action_client . wait_for_server () # 等待动作的服务器端启动 self . _send_goal_future = self . _action_client . send_goal_async ( # 异步方式发送动作的目标 goal_msg , # 动作目标 feedback_callback = self . feedback_callback ) # 处理周期反馈消息的回调函数 self . _send_goal_future . add_done_callback ( self . goal_response_callback ) # 设置一个服务器收到目标之后反馈时的回调函数 def goal_response_callback ( self , future ): # 创建一个服务器收到目标之后反馈时的回调函数 goal_handle = future . result () # 接收动作的结果 if not goal_handle . accepted : # 如果动作被拒绝执行 self . get_logger () . info ( 'Goal rejected :(' ) return self . get_logger () . info ( 'Goal accepted :)' ) # 动作被顺利执行 self . _get_result_future = goal_handle . get_result_async () # 异步获取动作最终执行的结果反馈 self . _get_result_future . add_done_callback ( self . get_result_callback ) # 设置一个收到最终结果的回调函数 def get_result_callback ( self , future ): # 创建一个收到最终结果的回调函数 result = future . result () . result # 读取动作执行的结果 self . get_logger () . info ( 'Result: { %d }' % result . finish ) # 日志输出执行结果 def feedback_callback ( self , feedback_msg ): # 创建处理周期反馈消息的回调函数 feedback = feedback_msg . feedback # 读取反馈的数据 self . get_logger () . info ( 'Received feedback: { %d }' % feedback . state ) def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = MoveCircleActionClient ( \"action_move_client\" ) # 创建ROS2节点对象并进行初始化 node . send_goal ( True ) # 发送动作目标 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'action_move_client = learning_action.action_move_client:main' , 'action_move_server = learning_action.action_move_server:main' , ], },","text_tokens":["服务器","callback","import","消息","}","结果","目标","args","rclpy","圆周运动",",","创建","action","send","learning","com","时","完成","_","请求","wait","退出","说明","python","务器","周期","机器人","点","www","name","response","加入","的","处理","logger","主","scripts","，","none","启动","初始化","接收","coding","代码","包","=","*","%","一个","finish","数据","能","python3","feedback","for","并","日志","后","销毁","done","关闭","interface","定义","return","收到","server","#","编译","程序","super","对象","选项","true","'","进行","知道","[","shutdown","guyuehome","accepted","入口","功能",")",".","、","info","handle","console","：","usr","自定义","\"","客户","类","设置","move","state","运动","env","最终","async","获取","ros2","self","拒绝","def","配置","类型","希望","8","执行","msg","函数","d","points","movecircleactionclient","使","异步","系统","打开","movecircle","接口类型","main","setup","文件","@",":","not","goal","接口类","回调","作者","读取","居","库","服务器端","__","]","from","示例","编写","循环","动作","被","拒绝执行","(","/","自定","{","if","client","服务","机器","class","circle"," ","add","开始","（","如果","utf","输出","spin","让","enable","接口","父类","顺利","bin","初始","等待","entry","发送","反馈","init","方式","received","actionclient","）","名","如下","future","客户端","node","需要","古月","为","py","result","节点","destroy","get","rejected","!","圆周","-","之后"],"title":"客户端代码解析","title_tokens":["客户端","客户","代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_14","text":"动作命令的常用操作如下： $ ros2 action list # 查看服务列表 $ ros2 action info <action_name> # 查看服务数据类型 $ ros2 action send_goal <action_name> <action_type> <action_data> # 发送服务请求","text_tokens":["$","常用","ros2","服务","类型","操作"," ","send","action","_","请求","#","列表","发送","name","data","的","如下","<","goal","type","查看",">","info","：","动作","命令","数据类型","list","数据"],"title":"动作命令行操作","title_tokens":["动作","操作","命令","命令行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.7_%E5%8A%A8%E4%BD%9C/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Understanding-ROS2-Actions.html","text_tokens":[".","understanding","en","docs","/","org","actions","tutorials","ros2","https","-","ros","humble","html",":"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/","text":"参数 话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。 通信模型 比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。 全局字典 在ROS系统中，参数是以全局字典的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。 可动态监控 在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。 案例一：小海龟例程中的参数 在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key 参数列表 参数查询与修改 $ ros2 param describe turtlesim background_b $ ros2 param get turtlesim background_b $ ros2 param set turtlesim background_b 10 参数文件保存与加载 $ ros2 param dump turtlesim >> turtlesim.yaml $ ros2 param load turtlesim turtlesim.yaml 案例二：参数编程 接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。 运行效果 $ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle 代码解析 learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], }, 案例三：机器视觉应用 参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。 运行效果 $ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180 代码解析 learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":["像素","格式","import","消息","立刻","等等",",","创建","效果","com","www","waitkey","的","在","两句","作用","处理","scripts","加载","tutorials","初始化","识别","把","coding","=","重新","上限","img","parameternode","每次","upper","队列","一个","integer","比较简单","python3","键值","exe","滑动","for","object","日志","字典","将","关闭","hsv","键和值","监控","三","#","编译","下限","程序","到","nodeb","对象","'","进行","参数","知道","输入框","[","宽","90","不如","简单","usr","面积","查询","修改","小海","array","用到","不少","hierarchy","点画","高级","会","通信","最新","可能","小海龟","—","msg","d","函数","imgmsg","系统","多个","体验","cvbridge","listener","setup","cv2","类似","image","np","坐标","打印","参考","仿真器","作者","优化","端口","imshow","__","都","编写","动态","cvtcolor","光线","话题","含义","ros","/","合成","可以","if","hello","all","bin","一两句","sensor","来","方式","易用性","findcontours","和","数值","sub","就要","x","就是","5","中","那个","组成","callback","常用","海龟","案例","是","这些","丰富","参数值","敏感","使用","learning","inrange","说明","h","drawcontours","加入","name","mask","本","主","，","none","信息","set","环境","化成","subscription","load","en","下","%","数据","轮廓","清楚","从","org","配置文件","https","255","说干就干","及","二","先","lower","互相","形态","变化","128","连接","guyuehome","订阅",")","勾勒","info","计算","命令","approx","类型","传输方式","定时器","as","多少","哪个","值","来看","分别","文件",":","模型","美颜","即可","起来","共享","太小","库","时候","物体","动作","可","长度","叫","yaml","bgr2hsv","左上角","value","detect","实现","仿真","方法","叫做","机器","opencv","介绍","全局","10","parameter","让","默认","turtlesim","转换","关注","nodea","等待","部分","发送","几个","什么","其他","data","参数设置","一两","如何","真实","需要","古月","declare","imagesubscriber","continue","destroy","receiving","非常","run","y","真器","parameters","保存","目标","传输","args","50","是否","rclpy","frame","docs","比较","问题","例程","退出","python","去除","int","所在","cv","进入","机器人","点","turtle","或者","等","特性","teleop","存在","describe","后边","代码","dump","robot","接下来","改变","高","通过","$","？","接下","用于","出来","销毁","易用","通信模型","列表","变量","送给","不","驱动","选项","度","噪声","有","提炼","入口","功能","150","video","跟",".","了","console","下来","成","熟悉","辨率","\"","env","某些","核心","也","配置","单位","理解","8","这个","w","机制","呢","bgr8","解析","一样","还","表示","范围","图像处理","param","usb","读取","转化","看","发送给","了解","from","示例","检测","1","显示","(","指定","比如","条","{","继续","服务","提供","numpy","如果","utf","+","接口","父类","影响","然后","to","初始","contours","init","string","一种","node","type","编码","运行","180","三种","分辨","py","retr","节点","再","get","全局变量","create","挺","节","bgr","humble","}","raw","c++","b","应用","颜色","命令行","完成","_","in","已经","周期","转化成","logger","key","视觉","background","链接","与","不是","包","秒","*","者","list","默认值","一","并","timer","提高","后","xy","么","super","red","很大","<","大大","左上","shutdown","chain","、","区域","：","类","设置","。","图像识别","从而","shape","就","输入","获取","一些","对","红色","ros2","self","麻烦","def","color","像","执行","points","中心","msgs","cnt","打开","提示","main","cam","@","苹果","考虑","已","boundingrect","我们","回调","得到","过程","居","便于","相机","]","这","分辨率","二值化","循环","阈值","不同","bridge","名称","访问","s","0","understanding","上角","很多","class","输出"," ","由","开始","2","（","circle","编程","图像","new","spin","mbot","定时","entry","办法","以","写","）","名","曝光","如下","大大提高","一下",">","为","整个","某","号","!","-","html","大家"],"title":"**参数**","title_tokens":["*","参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_1","text":"话题、服务、动作，不知道这三种通信机制大家是否已经了解清楚，本节我们再来介绍一种ROS系统中常用的数据传输方式—— 参数 。 类似C++编程中的全局变量，可以便于在多个程序中共享某些数据， 参数是ROS机器人系统中的全局字典，可以运行多个节点中共享数据。","text_tokens":["清楚","常用","某些","通信","数据","可以","c++","是","传输","服务","机器","是否","介绍","全局","字典","传输方式","—"," ","编程","系统","机制","多个","已经","来","类似","变量","方式","不","程序","机器人","的","在","本","一种","，","我们","知道","参数","共享","运行","三种","、","便于","了解","节点","再","这","全局变量","动作","中","节","话题","。","ros","大家"],"title":"参数","title_tokens":["参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_2","text":"比如在机器视觉识别的时候，有很多参数都会影响视觉识别的效果。 在NodeA相机驱动节点中，就需要考虑很多问题，相机连接到哪个usb端口，使用的图像分辨率是多少，曝光度和编码格式分别是什么，这些都可以通过参数设置，我们可以通过配置文件或者程序进行设置。 NodeB节点中也是一样，图像识别使用的阈值是多少，整个图像面积很大，那个部分是我们关注的核心区域，识别过程是否需要美颜等等，就像我们使用美颜相机一样，我们可以通过滑动条或者输入框设置很多参数，不同参数设置后，都会改变执行功能的一些效果。 这就是参数的作用。","text_tokens":["格式","是","这些","等等","是否","效果","使用","问题","的","在","视觉","作用","或者","，","识别","改变","通过","滑动","配置文件","后","到","程序","驱动","nodeb","很大","度","进行","参数","输入框","有","连接","功能","区域","面积","辨率","设置","。","图像识别","就","输入","会","核心","一些","也","配置","像","执行","多少","哪个","分别","一样","文件","美颜","考虑","我们","过程","usb","端口","相机","时候","都","分辨率","这","阈值","不同","条","比如","可以","很多","机器"," ","图像","影响","关注","nodea","部分","什么","参数设置","和","曝光","需要","编码","分辨","整个","节点","就是","中","那个"],"title":"通信模型","title_tokens":["通信模型","模型","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_3","text":"在ROS系统中，参数是以全局字典的形态存在的，什么叫字典？就像真实的字典一样，由名称和数值组成，也叫做键和值，合成 键值 。或者我们也可以理解为，就像编程中的参数一样，有一个参数名 ，然后跟一个等号，后边就是参数值了，在使用的时候，访问这个参数名即可。","text_tokens":["就","键值","？","叫做","也","合成","可以","是","像","字典","全局","参数值"," ","由","理解","这个","编程","系统","键和值","使用","然后","一样","什么","以","组成","即可","的","在","和","形态","或者","名","真实","等","，","参数","数值","我们","有","存在","为","跟","后边","就是","时候","了","中","号","叫","名称","访问","。","一个","ros"],"title":"全局字典","title_tokens":["全局","字典"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_4","text":"在ROS2中，参数的特性非常丰富，比如某一个节点共享了一个参数，其他节点都可以访问，如果某一个节点对参数进行了修改，其他节点也有办法立刻知道，从而获取最新的数值。这在 参数的高级编程 中，大家都可能会用到。","text_tokens":["获取","高级","会","对","立刻","也","比如","ros2","可以","最新","可能","丰富"," ","如果","从而","编程","办法","其他","的","在","进行","，","参数","特性","有","共享","知道","数值","某","节点","了","都","这","用到","中","修改","访问","。","一个","非常","大家"],"title":"可动态监控","title_tokens":["动态","可","监控"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_5","text":"在小海龟的例程中，仿真器也提供了不少参数，我们一起来通过这个例程，熟悉下参数的含义和命令行的使用方法。 $ ros2 run turtlesim turtlesim_node $ ros2 run turtlesim turtle_teleop_key","text_tokens":["一","仿真","通过","不少","$","方法","海龟","也","ros2","提供","小海龟"," ","这个","命令行","使用","turtlesim","_","例程","的","在","和","起来","turtle","node","key","，","参数","我们","teleop","仿真器","。","了","下","中","熟悉","命令","小海","含义","run","真器"],"title":"案例一：小海龟例程中的参数","title_tokens":["一","的","：","海龟","例程","参数","中","案例","小海","小海龟"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_6","text":"","text_tokens":[],"title":"参数列表","title_tokens":["列表","参数"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_7","text":"$ ros2 param describe turtlesim background_b $ ros2 param get turtlesim background_b $ ros2 param set turtlesim background_b 10","text_tokens":["$","background","get","turtlesim","_","param","ros2","set","describe","b","10"," "],"title":"参数查询与修改","title_tokens":["查询","修改","参数","与"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_8","text":"$ ros2 param dump turtlesim >> turtlesim.yaml $ ros2 param load turtlesim turtlesim.yaml","text_tokens":[".","load","$","dump","turtlesim","param","ros2","yaml",">"," "],"title":"参数文件保存与加载","title_tokens":["保存","参数","加载","与","文件"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_9","text":"接下来就要开始写程序了，在程序中设置参数和读取参数都比较简单，一两句函数就可以实现，我们先来体验一下这几个函数的使用方法。","text_tokens":["就","方法","可以","接下","开始","函数","使用","比较","体验","先","一两句","来","几个","程序","写","的","在","和","一两","两句","，","参数","我们","一下","读取","就要","简单","了","都","这","下来","中","设置","接下来","。","实现","比较简单"],"title":"案例二：参数编程","title_tokens":["编程","：","参数","二","案例"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_10","text":"$ ros2 run learning_parameter param_declare $ ros2 param set param_declare robot_name turtle","text_tokens":["turtle","learning","$","_","robot","name","param","ros2","set","declare","run"," ","parameter"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_11","text":"learning_parameter/param_declare.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-创建、读取、修改参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 class ParameterNode ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . timer = self . create_timer ( 2 , self . timer_callback ) # 创建一个定时器（单位为秒的周期，定时执行的回调函数） self . declare_parameter ( 'robot_name' , 'mbot' ) # 创建一个参数，并设置参数的默认值 def timer_callback ( self ): # 创建定时器周期执行的回调函数 robot_name_param = self . get_parameter ( 'robot_name' ) . get_parameter_value () . string_value # 从ROS2系统中读取参数的值 self . get_logger () . info ( 'Hello %s !' % robot_name_param ) # 输出日志信息，打印读取到的参数值 new_name_param = rclpy . parameter . Parameter ( 'robot_name' , # 重新将参数值设置为指定值 rclpy . Parameter . Type . STRING , 'mbot' ) all_new_parameters = [ new_name_param ] self . set_parameters ( all_new_parameters ) # 将重新创建的参数列表发送给ROS2系统 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ParameterNode ( \"param_declare\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , ], },","text_tokens":["parameters","callback","}","import","args","rclpy",",","参数值","创建","learning","com","完成","_","退出","说明","python","周期","点","www","name","加入","的","logger","主","scripts","，","none","信息","set","初始化","coding","代码","包","=","秒","robot","*","重新","parameternode","%","一个","默认值","从","python3","并","timer","日志","后","销毁","将","关闭","#","列表","编译","送给","到","程序","super","对象","选项","'","进行","参数","[","知道","shutdown","guyuehome","入口","功能",")",".","、","info","console","：","usr","\"","类","设置","修改","env","ros2","self","配置","def","单位","定时器","8","执行","points","函数","系统","值","打开","main","setup","文件","@",":","打印","回调","param","作者","读取","居","库","发送给","__","]","from","示例","编写","循环","s","value","(","指定","/","{","class","输出"," ","parameter","2","（","hello","utf","new","默认","spin","让","mbot","定时","all","接口","父类","bin","初始","等待","entry","发送","init","string","）","如下","node","数值","type","需要","古月","declare","为","py","节点","destroy","get","create","中","!","-"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_12","text":"参数大家已经会使用了，如何在机器人中应用呢？ 继续优化机器视觉的示例，物体识别对光线比较敏感，不同的环境大家使用的阈值也是不同的，每次在代码中修改阈值还挺麻烦，不如我们就把阈值提炼成参数，运行过程中就可以动态设置，不是大大提高了程序的易用性么？ 说干就干，我们先来看下效果如何，再看下代码中的变化。","text_tokens":["就","？","会","对","也","麻烦","继续","是","可以","提高","应用","机器"," ","说干就干","敏感","效果","使用","呢","比较","易用","么","先","来看","已经","机器人","程序","易用性","还","的","在","视觉","如何","大大","，","参数","我们","变化","大大提高","提炼","过程","环境","运行","识别","优化","把","看","不是","代码","不如","再","了","示例","下","物体","成","中","不同","阈值","挺","光线","每次","修改","动态","设置","。","大家"],"title":"案例三：机器视觉应用","title_tokens":["视觉","：","三","案例","应用","机器"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_13","text":"$ ros2 run usb_cam usb_cam_node_exe $ ros2 run learning_parameter param_object_detect $ ros2 param set param_object_detect red_h_upper 180","text_tokens":["$","exe","ros2","object"," ","parameter","learning","_","h","cam","red","node","param","set","180","usb","upper","detect","run"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_14","text":"learning_parameter/param_object_detect.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2参数示例-设置目标识别的颜色阈值参数 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from sensor_msgs.msg import Image # 图像消息类型 from cv_bridge import CvBridge # ROS与OpenCV图像转换类 import cv2 # Opencv图像处理库 import numpy as np # Python数值计算库 lower_red = np . array ([ 0 , 90 , 128 ]) # 红色的HSV阈值下限 upper_red = np . array ([ 180 , 255 , 255 ]) # 红色的HSV阈值上限 \"\"\" 创建一个订阅者节点 \"\"\" class ImageSubscriber ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . sub = self . create_subscription ( Image , # 创建订阅者对象（消息类型、话题名、订阅者回调函数、队列长度） 'image_raw' , self . listener_callback , 10 ) self . cv_bridge = CvBridge () # 创建一个图像转换对象，用于OpenCV图像与ROS的图像消息的互相转换 self . declare_parameter ( 'red_h_upper' , 0 ) # 创建一个参数，表示阈值上限 self . declare_parameter ( 'red_h_lower' , 0 ) # 创建一个参数，表示阈值下限 def object_detect ( self , image ): upper_red [ 0 ] = self . get_parameter ( 'red_h_upper' ) . get_parameter_value () . integer_value # 读取阈值上限的参数值 lower_red [ 0 ] = self . get_parameter ( 'red_h_lower' ) . get_parameter_value () . integer_value # 读取阈值下限的参数值 self . get_logger () . info ( 'Get Red H Upper: %d , Lower: %d ' % ( upper_red [ 0 ], lower_red [ 0 ])) # 通过日志打印读取到的参数值 hsv_img = cv2 . cvtColor ( image , cv2 . COLOR_BGR2HSV ) # 图像从BGR颜色模型转换为HSV模型 mask_red = cv2 . inRange ( hsv_img , lower_red , upper_red ) # 图像二值化 contours , hierarchy = cv2 . findContours ( mask_red , cv2 . RETR_LIST , cv2 . CHAIN_APPROX_NONE ) # 图像中轮廓检测 for cnt in contours : # 去除一些轮廓面积太小的噪声 if cnt . shape [ 0 ] < 150 : continue ( x , y , w , h ) = cv2 . boundingRect ( cnt ) # 得到苹果所在轮廓的左上角xy像素坐标及轮廓范围的宽和高 cv2 . drawContours ( image , [ cnt ], - 1 , ( 0 , 255 , 0 ), 2 ) # 将苹果的轮廓勾勒出来 cv2 . circle ( image , ( int ( x + w / 2 ), int ( y + h / 2 )), 5 , ( 0 , 255 , 0 ), - 1 ) # 将苹果的图像中心点画出来 cv2 . imshow ( \"object\" , image ) # 使用OpenCV显示处理后的图像效果 cv2 . waitKey ( 50 ) def listener_callback ( self , data ): self . get_logger () . info ( 'Receiving video frame' ) # 输出日志信息，提示已进入回调函数 image = self . cv_bridge . imgmsg_to_cv2 ( data , \"bgr8\" ) # 将ROS的图像消息转化成OpenCV图像 self . object_detect ( image ) # 苹果检测 def main ( args = None ): # ROS2节点主入口main函数 rclpy . init ( args = args ) # ROS2 Python接口初始化 node = ImageSubscriber ( \"param_object_detect\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'param_declare = learning_parameter.param_declare:main' , 'param_object_detect = learning_parameter.param_object_detect:main' , ], },","text_tokens":["像素","raw","callback","import","消息","}","目标","50","args","rclpy","颜色",",","参数值","创建","frame","效果","使用","learning","com","inrange","完成","_","去除","int","退出","说明","python","in","所在","h","cv","drawcontours","进入","点","www","name","waitkey","mask","转化成","的","处理","logger","加入","主","scripts","，","none","信息","初始化","化成","与","识别","subscription","coding","代码","包","=","*","者","上限","img","upper","队列","%","一个","integer","list","高","通过","轮廓","从","python3","for","并","object","用于","日志","出来","后","销毁","255","xy","将","及","关闭","hsv","#","编译","下限","到","程序","super","red","lower","对象","互相","'","<","选项","噪声","左上","进行","参数","[","128","知道","chain","shutdown","订阅","guyuehome","宽","入口","150","90","video","功能",")",".","、","勾勒","info","console","：","usr","面积","\"","类","设置","计算","array","env","shape","hierarchy","点画","红色","一些","approx","ros2","self","color","def","配置","类型","8","msg","as","函数","d","w","imgmsg","bgr8","系统","中心","points","msgs","cnt","打开","提示","cvbridge","listener","main","cv2","image","@",":","np","模型","苹果","坐标","setup","打印","文件","已","boundingrect","表示","范围","图像处理","回调","param","得到","作者","读取","转化","居","太小","库","imshow","__","]","from","示例","二值化","编写","循环","阈值","检测","bridge","长度","cvtcolor","bgr2hsv","话题","0","左上角","detect","value","1","ros","显示","(","/","上角","{","if","opencv","class","10","circle"," ","parameter","numpy","（","2","utf","输出","图像","spin","+","让","接口","父类","转换","bin","to","初始","等待","entry","sensor","contours","init","findcontours","data","）","名","和","如下","node","数值","180","sub","需要","古月","declare","imagesubscriber","为","continue","py","retr","节点","x","receiving","destroy","get","5","create","中","!","-","bgr","y"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.8_%E5%8F%82%E6%95%B0/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Parameters/Understanding-ROS2-Parameters.html","text_tokens":[".","understanding","en","docs","parameters","/","org","tutorials","ros2","https","-","ros","humble","html",":"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/","text":"分布式通信 智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统，可以实现多计算平台上的任务分配。 分布式通信 什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。 分布式网络搭建 除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。 树莓派配置 在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。 装系统 我们先要给树莓派装系统，这里我们选择的是Ubuntu Mate针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/ 装ROS2 在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。 编译代码 将我们课程的代码也下载到树莓派中，进行编译。 远程桌面 如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728 分布式数据传输 树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 * 如使用虚拟机，请将虚拟机网络修改为桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。 分布式网络分组 没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。 案例一：小海龟分布式控制 分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动。 $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端 案例二：话题分布式通信 我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串。 $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端 案例三：服务分布式通信 话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能。 案例四：机器视觉分布式应用 以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体。 $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。 参考链接 https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":["服务器","小组","笔记本电脑","先要","效果","遇到","之外","export","qq","带来","blog","树莓","此外","各种","的","处理","在","你","实际","于是","启动","啦","识别","=","download","bashrc","直接","一个","exe","pub","安装","能力","将","监控","三","基本一致","#","性能","编译","到","程序","无法","流畅","进行","端的","好","框架","四","修改","小海","感受","用到","确保","出现","分配","任务","会","通信","除了","可能","小海龟","显示器","—","还是","world","不够","系统","多个","下载","listener","类似","消耗","端","主要","参考","看上","仿真器","任何","都","编写","开发","话题","较","ros","个","/","可以","任务分配","平台","反过","hello","成功","魅力","复杂","来","局域网","和","发给","sub","分组","webcam","似乎","就是","article","资源","过来","中","支持","作为","组成","中有","海龟","过","案例","是","这些","不在","分布式","局域网络","采集","使用","learning","结构","这么","务器","id","事情","加入","上","加法","我","，","信息","环境","算机","en","csdn","经典","下","毕竟","talker","小型","分布","数据","org","https","轻松","sd","装","全都","同一个","先","二","如此","之一","课程","变化","选择","连接","订阅","设计","计算机","details","典型","据传","请","计算","命令","卡顿","的话","有点","局域","岂","原本",":","即可","桥接","神奇","起来","122599728","镜像","客户端程序","几乎","之间","这种","带领","实时","看上去","摄像","物体","动作","派","叫","实现","仿真","topic","方法","cpp","机器","智能","turtlesim","简而言之","方便","什么","52785580","两个","不在话下","学习","并且","减轻","变得","需要","上边","发布者","your","而言","反过来","才能","非常","run","真器","步骤","友好","派装","传输","一系列","电脑","是否","网络","感觉","docs","比较","问题","例程","求和","搭建","针对","机器人","模式","鼠标","turtle","虚拟","或者","等","teleop","给","代码","上去","接下来","如","电机","字符串","通过","他们","$","pc","建立","？","接下","则","这样","两者","传感","放置","不","驱动","完全","有","只","功能","做",".","位于","一切","了","下来","客户","测试","运动","也","想","配置","希望","net","呢","nodes","机制","顺利实现","只要","一样","依然","没","还","整体","体积","usb","感器","显示","基本","具体","模拟","互通","多","比如","继续","虚拟机","服务","提供","打通","流程","如果","放在","分布式系统","顺利","然后","服务器程序","node","传感器","运行","压力","demo","py","节点","再","同一","挺","之后","humble","以上","应用","命令行","之前","完成","_","真有","已经","远程","这里","key","视觉","派端","链接","不是","相互","*","者","款","讲过","一","放","并","后","控制","操作","每","笔记","资料","helloworld","发生","<","笔记本","计算能力","所","键盘","、","讲","：","控制器","字符","系列","。","另外","就","频繁","烧写","一些","红色","互联","ros2","像","about","发布","小","繁多","卡中","cam","经常","情况","我们","安排","远程桌面","一句","这","分布式应用","拆解","不同","派里","访问","domain","数据传输","ubuntu","里","采用","桌面","mate","很多"," ","由","不过","图像","处于","试试","一系","像头","如下","适合","而是","客户端","没有","一下",">","为","concepts","一致","用","摄像头","更强","网上","布式","-","html","大家"],"title":"**分布式通信**","title_tokens":["*","通信","布式","分布","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_1","text":"智能机器人的功能繁多，全都放在一个计算机里，经常会遇到计算能力不够、处理出现卡顿等情况，如果可以将这些任务拆解，分配到多个计算机中运行岂不是可以减轻压力？ 这就是分布式系统，可以实现多计算平台上的任务分配。","text_tokens":["分配","里","任务","？","会","多","能力","可以","这些","任务分配","机器","分布式","平台"," ","如果","将","智能","遇到","不够","系统","多个","全都","放在","繁多","分布式系统","岂","机器人","到","经常","情况","的","处理","上","计算能力","等","，","减轻","运行","功能","计算机","不是","压力","、","算机","就是","这","拆解","中","计算","布式","卡顿","分布","。","一个","实现","出现"],"title":"分布式通信","title_tokens":["分布","分布式","布式","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_2","text":"什么叫分布式？ 之前我们也讲过，在ROS系统中，机器人功能是由各种节点组成的，这些节点可能位于不同的计算机中，这种结构可以将原本资源消耗较多的任务，分配到不同的平台上，减轻计算压力，这就是分布式通信框架的典型应用之一。 比如这款机器人系统中，有两个计算平台。 机器人体积比较小，不适合放一个笔记本电脑在上边，于是采用 树莓派 作为控制器，主要实现传感器驱动和电机控制等功能，不过视觉处理和应用功能就不适合在树莓派里运行了，我们放在另外一个性能更强的 笔记本电脑 中，此外我们还需要在电脑上监控机器人的传感器信息，并且远程控制机器人运动。 两个电脑之间的通信，看上去还有点复杂，毕竟相互传输的数据还挺多的，不过ROS系统都已经为我们设计好了，我们只需要在每一个电脑上配置好ROS环境，功能开发上完全不需要做任何变化，实现非常方便。 接下来，我们就带领大家一起来感受下ROS分布式系统的魅力。","text_tokens":["笔记本电脑","过","是","传输","这些","应用","分布式","电脑","之前","比较","结构","已经","树莓","机器人","此外","远程","各种","的","在","上","视觉","处理","等","，","于是","信息","环境","算机","相互","下","上去","毕竟","接下来","款","电机","分布","一个","数据","一","放","？","接下","控制","每","将","笔记","监控","之一","传感","性能","到","不","驱动","笔记本","完全","变化","有","只","好","功能","设计","做","计算机","讲","位于","框架","典型","了","下来","计算","控制器","感受","。","运动","分配","另外","任务","就","有点","通信","也","配置","可能","系统","小","原本","还","消耗","主要","起来","我们","看上","体积","任何","之间","这种","带领","这","看上去","都","感器","不同","派里","派","叫","开发","较","实现","ros","采用","多","比如","可以","机器","平台"," ","由","不过","放在","魅力","分布式系统","复杂","方便","什么","和","适合","两个","传感器","并且","减轻","需要","运行","上边","为","压力","节点","就是","资源","更强","中","挺","作为","布式","非常","组成","大家"],"title":"分布式通信","title_tokens":["分布","分布式","布式","通信"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_3","text":"除了我使用的笔记本电脑之外，另外一个计算平台我们选择了树莓派，模拟一个放置在机器人上的控制器。","text_tokens":["另外","模拟","笔记本电脑","除了","控制","平台","电脑","机器","笔记","使用","之外","放置","树莓","机器人","的","在","笔记本","上","我","，","我们","选择","了","计算","控制器","派","。","一个"],"title":"分布式网络搭建","title_tokens":["网络","搭建","布式","分布","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_4","text":"在开发之前，我们需要先配置好树莓派的环境，网上也有很多资料，大家都可以参考。","text_tokens":["也","配置","可以","很多","之前","资料","先","树莓","的","在","参考","，","我们","有","需要","环境","好","都","网上","开发","派","。","大家"],"title":"树莓派配置","title_tokens":["配置","树莓","派"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_5","text":"我们先要给树莓派装系统，这里我们选择的是Ubuntu Mate针对树莓派的镜像，下载镜像之后，烧写到树莓派的SD卡中就可以启动系统了。 Ubuntu MATE镜像下载链接： https://ubuntu-mate.org/download/","text_tokens":["ubuntu","就","/","烧写","org","mate","派装","可以","是","https","先要"," ","sd","系统","下载","针对","卡中","树莓","到",":","这里","的","，","我们","选择","镜像","启动","链接","给",".","了","：","download","派","-","之后","。"],"title":"装系统","title_tokens":["系统","装"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#ros2","text":"在安装好的Ubuntu Mate系统中，安装ROS2，和电脑端安装的流程一样。","text_tokens":["ubuntu","的","在","系统","和","端","。","，","mate","安装","中","ros2","一样","好","电脑","流程"," "],"title":"装ROS2","title_tokens":["ros2","装"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_6","text":"将我们课程的代码也下载到树莓派中，进行编译。","text_tokens":["的","代码","。","树莓","下载","进行","，","我们","也","中","派","编译","课程","到","将"],"title":"编译代码","title_tokens":["编译","代码"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_7","text":"如果大家有显示器，可以直接在树莓派上连接键盘鼠标显示器使用，如果使用不方便的话，也可以在树莓派上配置好远程桌面，就可以通过网络访问树莓派的桌面系统了。 以上步骤的整体流程和电脑端操作基本一致，大家也可以参考如下链接配置树莓派： https://blog.csdn.net/qq_52785580/article/details/122599728","text_tokens":["通过","以上","就","/","步骤","桌面","也","可以","配置","https","电脑","操作","流程","显示器"," ","如果","net","网络","使用","系统","_","基本一致","qq","blog","方便","树莓","大家",":","不","52785580","远程","鼠标","的","在","上","和","端","如下","参考","122599728","，","有","整体","连接","远程桌面","好","链接","键盘","一致",".","details","article","csdn","了","：","派","访问","显示","直接","基本","。","的话"],"title":"远程桌面","title_tokens":["远程","桌面","远程桌面"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_8","text":"树莓派配置完成后，确保已经和你所使用的电脑连接到了同一个局域网络中。接下来我们打通两个计算平台的通信能力。具体需要做什么呢？ 简而言之，什么都不需要做。我们直接用命令行测试一下话题通信的效果。 * 如使用虚拟机，请将虚拟机网络修改为桥接模式 在树莓派端，使用如下命令启动一个发布者节点： $ ros2 run demo_nodes_cpp talker #树莓派端 接下来在电脑端，使用如下命令启动一个订阅者节点： $ ros2 run demo_nodes_py listener #PC端 神奇的事情就这样发生了，只要两个计算机安装好ROS2，并且处于同一网络中，他们就可以实现之前讲过的话题、服务、动作等通信了，感觉就像在一个电脑里一样。 不过这也会带来一个问题，如果一个网络中有很多个计算机，我们并不希望他们都可以互通互联，而是可以分组通信，小组之间是无法实现通信的。","text_tokens":["中有","小组","是","电脑","局域网络","网络","效果","使用","命令行","感觉","完成","之前","_","问题","已经","带来","事情","树莓","模式","的","在","虚拟","你","等","，","派端","启动","算机","*","者","talker","接下来","如","直接","一个","讲过","他们","$","pc","？","安装","能力","并","接下","后","将","这样","同一个","#","发生","到","不","无法","所","连接","订阅","好","做","计算机","、","了","：","下来","请","计算","命令","修改","测试","。","确保","就","会","局域","通信","也","互联","配置","ros2","像","希望","发布","呢","nodes","只要","一样","listener","桥接","端","神奇","我们","之间","都","这","动作","派","话题","具体","实现","个","里","互通","cpp","可以","虚拟机","服务","很多","平台","打通"," ","不过","如果","简而言之","处于","什么","局域网","如下","和","而是","两个","并且","一下","需要","分组","为","发布者","demo","py","用","节点","而言","同一","中","run"],"title":"分布式数据传输","title_tokens":["据传","传输","布式","分布","分布式","数据传输","数据"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_9","text":"没问题，ROS2提供了一个DOMAIN的机制，就类似分组一样，处于同一个DOMAIN中的计算机才能通信，我们可以在电脑和树莓派端的.bashrc中加入这样一句配置，即可将两者分配到一个小组中： export ROS_DOMAIN_ID = <your_domain_id> 如果分配的ID不同，则两者无法实现通信。","text_tokens":["分配","就","小组","通信","ros2","可以","配置","提供","电脑","则"," ","将","如果","机制","这样","问题","同一个","_","export","两者","处于","id","一样","树莓","到","加入","没","即可","的","在","和","<","无法","，","我们","端的",">","分组","计算机",".","your","算机","一句","了","=","同一","：","中","计算","不同","派","bashrc","才能","domain","。","一个","实现","ros","类似"],"title":"分布式网络分组","title_tokens":["网络","布式","分组","分布","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_10","text":"分布式通信网络似乎已经建立成功了，是否真有我们想的这么神奇，我们继续测试之前学习过的一些例程。 先来试试ROS中的经典案例——小海龟。 我们可以在电脑端启动小海龟仿真器，树莓派上启动键盘控制节点，或者反过来也可以，依然可以流畅的控制小海龟运动。 $ ros2 run turtlesim turtlesim_node # PC端 $ ros2 run turtlesim turtle_teleop_key # 树莓派端","text_tokens":["仿真","$","pc","建立","海龟","一些","通信","过","想","案例","继续","可以","也","ros2","控制","run","小海龟","是否","分布式","电脑","反过"," ","—","网络","成功","之前","turtlesim","_","例程","真有","这么","先","试试","已经","依然","#","turtle","来","树莓","的","神奇","测试","在","端","上","或者","流畅","node","，","我们","学习","teleop","key","启动","仿真器","派端","似乎","键盘","节点","经典","了","反过来","过来","中","派","小海","布式","分布","。","运动","ros","真器"],"title":"案例一：小海龟分布式控制","title_tokens":["一","：","海龟","分布","案例","小海","布式","控制","小海龟","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_11","text":"我们之前编写的例程是否可以在不修改任何代码的情况下，直接使用呢？ 先试试话题通信，树莓派作为发布者，发布Hello World字符串，电脑作为订阅者，订阅Hello World字符串。 $ ros2 run learning_topic topic_helloworld_pub # 树莓派端 $ ros2 run learning_topic topic_helloworld_sub # PC端","text_tokens":["topic","$","pc","？","pub","通信","可以","ros2","是否","电脑"," ","hello","发布","world","使用","呢","learning","之前","_","例程","先","helloworld","试试","#","树莓","不","情况","的","在","端","，","我们","派端","订阅","任何","sub","发布者","话题","代码","下","编写","者","字符","作为","修改","派","直接","字符串","。","run"],"title":"案例二：话题分布式通信","title_tokens":["：","二","通信","案例","布式","话题","分布","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_12","text":"话题没有问题，服务也不在话下。 我们电脑端运行服务器程序，树莓派端运行客户端程序，还是可以顺利实现加法求和功能。","text_tokens":["服务器","也","可以","不在","服务","电脑"," ","还是","顺利实现","问题","求和","顺利","务器","服务器程序","树莓","程序","端","客户端","加法","不在话下","，","没有","我们","派端","运行","客户端程序","功能","客户","话题","。","实现"],"title":"案例三：服务分布式通信","title_tokens":["：","三","通信","案例","布式","服务","分布","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_13","text":"以上这些功能还不够复杂？没问题，视觉识别的例程安排上。 接下来，我们将使用树莓派连接摄像头，模拟一个小型机器人，可以采集实时图像，然后再通过分布式网络，将图像发给电脑端的处理节点，识别图像中的红色物体。 $ ros2 run usb_cam usb_cam_node_exe # 树莓派端 $ ros2 run learning_topic topic_webcam_sub # PC端 好啦，我们在分布式网络中测试了ROS一系列例程，都没有任何问题，在实际的机器人开发中，类似的方法会频繁用到，ROS为分布式网络的搭建提供了非常友好的支持，我们几乎不需要任何配置，代码也不需要做任何修改， 只要使用ROS系统，一切都会变得如此轻松 。","text_tokens":["以上","友好","这些","一系列","分布式","电脑","采集","网络","使用","learning","_","问题","例程","搭建","树莓","机器人","的","处理","视觉","上","在","实际","，","派端","啦","识别","代码","小型","接下来","分布","一个","通过","$","pc","？","exe","接下","轻松","将","如此","#","不","端的","连接","好","功能","做","一切","了","下来","修改","系列","测试","。","用到","频繁","会","红色","也","ros2","配置","不够","系统","只要","cam","没","还","端","我们","安排","任何","usb","几乎","实时","都","摄像","物体","开发","派","ros","topic","模拟","方法","可以","提供","机器"," ","图像","然后","复杂","一系","像头","node","没有","发给","变得","需要","sub","为","webcam","节点","摄像头","再","中","支持","布式","非常","run","类似"],"title":"案例四：机器视觉分布式应用","title_tokens":["视觉","四","：","分布式应用","分布","案例","布式","应用","机器","分布式"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2.9_%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/#_14","text":"https://docs.ros.org/en/humble/Concepts/About-Domain-ID.html","text_tokens":[".","en","docs","/","about","org","domain","id","https","-","ros","concepts","humble","html",":"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/2.%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/2_%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/","text":"从本节开始，我们将进入第二个篇章，以ROS2的核心概念为线索，详细讲解ROS2的应用开发方法。","text_tokens":["概念","方法","核心","第二","ros2","应用","将","开始","开发方法","二个","详细","进入","以","的","篇章","，","我们","第二个","线索","为","。","讲解","从本节","开发","本节"],"title":"2 核心概念","title_tokens":["核心","概念"," ","2"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/","text":"Launch：多节点启动与配置脚本 到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是Launch启动文件。 它是ROS系统中多节点启动与配置的一种脚本。 Launch文件 这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。 多节点启动 运行效果 文件解析 learning_launch/simple.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'learning_topic' , executable = 'topic_helloworld_pub' , ), Node ( package = 'learning_topic' , executable = 'topic_helloworld_sub' , ), ]) 命令行参数配置 运行效果 文件解析 learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): rviz_config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ Node ( package = 'rviz2' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' , rviz_config ] ) ]) 资源重映射 运行效果 文件解析 learning_launch/remapping.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , namespace = 'turtlesim2' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , executable = 'mimic' , name = 'mimic' , remappings = [ ( '/input/pose' , '/turtlesim1/turtle1/pose' ), ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), ] ) ]) ROS参数设置 运行效果 文件解析 learning_launch/parameters.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node def generate_launch_description (): background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) ) return LaunchDescription ([ background_r_launch_arg , background_g_launch_arg , background_b_launch_arg , Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [{ 'background_r' : LaunchConfiguration ( 'background_r' ), 'background_g' : LaunchConfiguration ( 'background_g' ), 'background_b' : LaunchConfiguration ( 'background_b' ), }] ), ]) learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , namespace = 'turtlesim2' , name = 'sim' , parameters = [ config ] ) ]) Launch文件包含 运行效果 文件解析 learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction from launch_ros.actions import PushRosNamespace def generate_launch_description (): parameter_yaml = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ parameter_yaml_with_namespace ]) learning_launch/parameters_nonamespace.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [ config ] ) ]) 功能包编译配置 ... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ... 参考链接 https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docsros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["答案","相当","parameters","}","import","是","b","一系列","丰富","executable",",","rviz2","效果","命令行","使用","learning","arg","docs","_","mimic","例程","pushrosnamespace","python","launchconfiguration","rviz","机器人","name","textsubstitution","各种","的","在","turtle","一次","或者","turtlesim2","background","，","tutorials","启动","generate","path","链接","与","映射","代码","en","package","各个","=","包","上去","*","actions","os","每次","之高","一个","好像","通过","频次","？","org","pub","pose","config","namespace","for","https","乍","return","84","这样","每当","自由","目前","helloworld","groupaction","编译","到","'","index","进行","大大","参数","模版","[","with","好","功能","arguments","为止",")",".","description","当然","了","：","一次性","设置","命令","系列","。","组装","出现","合剂","namespaces","输入","这是","就","text","核心","directory","目的","呀","配置","麻烦","肯定","ros2","也","def","包含","docsros","像","目前为止","d","前为","系统","呢","launchdescription","中多","没错","粘合剂","解析","打开","一样","那","nonamespace","main","文件","大家",":","重","还","declarelaunchargument","参考","描述","我们","using","看上","projects","过程","xml","glob","终端","粘合","simple","它","turtle1","g","了解","]","带领","from","都","看上去","编写","packages","sim","脚本","yaml","完整","0","value","cmd","ros","(","input","topic","large","/","122","launch","vel","多","可以","{","r","sources","turtlesim1","很多","机器","所有"," ","parameter","编程","多样化","+","turtlesim","pythonlaunchdescriptionsource","share","一系","阅读","来","方式","多样","substitutions","data","甚至","原有","和","参数设置","如何","一种","node","...","files","没有","有没有","resource","需要","运行","新","基于","sub","ament","py","节点","remapping","就是","get","资源","default","remappings","output","中","join","includelaunchdescription","-","humble","html","类似"],"title":"**Launch：多节点启动与配置脚本**","title_tokens":["节点","：","*","launch","多","脚本","启动","配置","与"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch","text":"到目前为止，每当我们运行一个ROS节点，都需要打开一个新的终端运行一个命令。机器人系统中节点很多，每次都这样启动好麻烦呀。有没有一种方式可以一次性启动所有节点呢？答案当然是肯定的，那就是Launch启动文件。 它是ROS系统中多节点启动与配置的一种脚本。","text_tokens":["答案","？","launch","呀","麻烦","可以","是","肯定","配置","很多","机器","目前为止","所有"," ","前为","系统","呢","这样","中多","每当","打开","目前","那","文件","到","机器人","方式","的","一次","一种","，","我们","没有","有没有","启动","需要","运行","新","好","与","终端","为止","它","节点","当然","就是","都","一次性","中","脚本","命令","每次","。","一个","ros"],"title":"Launch：多节点启动与配置脚本","title_tokens":["节点","：","launch","多","脚本","启动","配置","与"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_1","text":"这是一个完整的Launch文件，乍看上去，好像Python代码呀，没错， ROS2中的Launch文件就是基于Python描述的 。 Launch的核心目的是 启动节点 ，我们在命令行中输入的各种参数，在Launch文件中，通过类似这样的很多代码模版，也可以进行配置，甚至还可以使用Python原有的编程功能，大大丰富了启动过程中的多样化配置。 Launch文件在ROS系统中出现的频次相当之高，它就像粘合剂一样，可以自由组装和配置各个节点，那如何编写或者阅读一个Launch文件呢，我们通过一系列例程带领大家来了解。","text_tokens":["相当","是","一系列","丰富","命令行","使用","例程","python","各种","的","在","或者","，","启动","代码","各个","上去","之高","一个","好像","通过","频次","乍","这样","自由","进行","大大","参数","模版","功能","了","命令","系列","。","组装","出现","合剂","输入","这是","就","核心","目的","呀","ros2","也","配置","像","系统","呢","没错","粘合剂","一样","那","文件","大家","还","描述","我们","看上","过程","粘合","它","了解","带领","看上去","编写","完整","ros","launch","可以","很多"," ","编程","多样化","一系","阅读","来","多样","甚至","原有","和","如何","基于","节点","就是","中","类似"],"title":"Launch文件","title_tokens":["文件","launch"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_1","text":"","text_tokens":[],"title":"多节点启动","title_tokens":["启动","节点","多"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_2","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_3","text":"learning_launch/simple.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'learning_topic' , executable = 'topic_helloworld_pub' , ), Node ( package = 'learning_topic' , executable = 'topic_helloworld_sub' , ), ])","text_tokens":["(","topic","/","import","launch","pub","def","executable",","," ","return","learning","launchdescription","_","helloworld",":","'","node","[","generate","sub",")","simple",".","py","description","]","package","from","=","actions","ros"],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_4","text":"","text_tokens":[],"title":"命令行参数配置","title_tokens":["配置","命令","参数","命令行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_5","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_6","text":"learning_launch/rviz.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): rviz_config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'rviz' , 'turtle_rviz.rviz' ) return LaunchDescription ([ Node ( package = 'rviz2' , executable = 'rviz2' , name = 'rviz2' , arguments = [ '-d' , rviz_config ] ) ])","text_tokens":["(","/","import","launch","directory","config","def","executable",","," ","rviz2","d","return","learning","launchdescription","_","python","share","rviz",":","name","'","turtle","index","node","[","generate","path","ament","arguments",")",".","py","description","]","package","from","get","=","packages","actions","os","join","-","ros"],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_7","text":"","text_tokens":[],"title":"资源重映射","title_tokens":["映射","资源","重"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_8","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_9","text":"learning_launch/remapping.launch.py from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , namespace = 'turtlesim1' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , namespace = 'turtlesim2' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'turtlesim' , executable = 'mimic' , name = 'mimic' , remappings = [ ( '/input/pose' , '/turtlesim1/turtle1/pose' ), ( '/output/cmd_vel' , '/turtlesim2/turtle1/cmd_vel' ), ] ) ])","text_tokens":["(","input","/","import","launch","vel","pose","namespace","def","turtlesim1","executable",","," ","return","learning","launchdescription","_","turtlesim","mimic",":","name","turtlesim2","'","node","[","generate",")",".","py","description","turtle1","]","remapping","from","package","=","actions","sim","remappings","output","cmd","ros"],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#ros","text":"","text_tokens":[],"title":"ROS参数设置","title_tokens":["参数","设置","ros","参数设置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_10","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_11","text":"learning_launch/parameters.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration , TextSubstitution from launch_ros.actions import Node def generate_launch_description (): background_r_launch_arg = DeclareLaunchArgument ( 'background_r' , default_value = TextSubstitution ( text = '0' ) ) background_g_launch_arg = DeclareLaunchArgument ( 'background_g' , default_value = TextSubstitution ( text = '84' ) ) background_b_launch_arg = DeclareLaunchArgument ( 'background_b' , default_value = TextSubstitution ( text = '122' ) ) return LaunchDescription ([ background_r_launch_arg , background_g_launch_arg , background_b_launch_arg , Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [{ 'background_r' : LaunchConfiguration ( 'background_r' ), 'background_g' : LaunchConfiguration ( 'background_g' ), 'background_b' : LaunchConfiguration ( 'background_b' ), }] ), ]) learning_launch/parameters_yaml.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , namespace = 'turtlesim2' , name = 'sim' , parameters = [ config ] ) ])","text_tokens":["(","parameters","/","122","import","launch","}","text","directory","config","{","r","def","b","namespace","executable",","," ","return","learning","arg","launchdescription","84","_","turtlesim","python","launchconfiguration","share","substitutions",":","name","textsubstitution","turtlesim2","'","declarelaunchargument","index","node","background","[","generate","path","ament",")",".","py","description","g","]","package","from","=","get","packages","default","actions","sim","os","join","yaml","0","value","ros"],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#launch_2","text":"","text_tokens":[],"title":"Launch文件包含","title_tokens":["文件","包含","launch"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_12","text":"","text_tokens":[],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_13","text":"learning_launch/namespaces.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch.actions import GroupAction from launch_ros.actions import PushRosNamespace def generate_launch_description (): parameter_yaml = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'learning_launch' ), 'launch' ), '/parameters_nonamespace.launch.py' ]) ) parameter_yaml_with_namespace = GroupAction ( actions = [ PushRosNamespace ( 'turtlesim2' ), parameter_yaml ] ) return LaunchDescription ([ parameter_yaml_with_namespace ]) learning_launch/parameters_nonamespace.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch_ros.actions import Node def generate_launch_description (): config = os . path . join ( get_package_share_directory ( 'learning_launch' ), 'config' , 'turtlesim.yaml' ) return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' , parameters = [ config ] ) ])","text_tokens":["(","parameters","/","import","launch","directory","config","namespace","def","sources","executable",","," ","parameter","return","learning","launchdescription","_","pushrosnamespace","turtlesim","python","pythonlaunchdescriptionsource","groupaction","nonamespace","share",":","name","turtlesim2","'","index","node","[","generate","with","path","ament",")",".","py","description","]","package","from","get","=","packages","actions","os","sim","join","includelaunchdescription","yaml","ros","namespaces"],"title":"文件解析","title_tokens":["文件","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_14","text":"... data_files = [ ( 'share/ament_index/resource_index/packages' , [ 'resource/' + package_name ]), ( 'share/' + package_name , [ 'package.xml' ]), ( os . path . join ( 'share' , package_name , 'launch' ), glob ( os . path . join ( 'launch' , '*.launch.py' ))), ( os . path . join ( 'share' , package_name , 'config' ), glob ( os . path . join ( 'config' , '*.*' ))), ( os . path . join ( 'share' , package_name , 'rviz' ), glob ( os . path . join ( 'rviz' , '*.*' ))), ], ...","text_tokens":["(","/","launch","config",","," ","+","_","share","rviz","name","data","'","files","index","...","resource","[","xml","path","glob","ament",")",".","py","]","package","=","packages","*","os","join"],"title":"功能包编译配置","title_tokens":["功能","编译","配置","包"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.1_Launch/#_15","text":"https://docs.ros.org/en/humble/Tutorials/Launch/Launch-Main.html https://docsros.org/en/humble/Tutorials/Launch/Using-ROS2-Launch-For-Large-Projects.html","text_tokens":["large","/","launch","org","ros2","for","https","docsros"," ","docs","main",":","using","tutorials","projects",".","en","-","humble","html","ros"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/","text":"TF：机器人坐标系管理神器 坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器——TF。 机器人中的坐标系 机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做基坐标系Base Frame，机器人安装位置在外部环境下的参考系叫做世界坐标系World Frame，机器人末端夹爪的位置叫做工具坐标系，外部被操作物体的位置叫做工件坐标系，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是基坐标系Base Link，雷达所在的位置叫做雷达坐标系laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做里程计坐标系odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做地图坐标系map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为平移和旋转两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实向量的数学描述。 ROS中TF功能的底层原理，其实就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。 TF命令行操作 ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。 小海龟跟随例程 这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 查看TF树 $ ros2 run tf2_tools view_frames 查询坐标变换信息 $ ros2 run tf2_ros tf2_echo turtle2 turtle1 坐标系可视化 $ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。 静态TF广播 我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为静态TF变换，我们来看看在程序中该如何实现？ 运行效果 $ ros2 run learning_tf static_tf_broadcaster 代码解析 learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？ TF监听 我们再来学习下如何查询两个坐标系之间的位置关系。 运行效果 $ ros2 run learning_tf tf_listener 代码解析 learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。 海龟跟随功能解析 运行效果 $ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key 原理解析 在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？这两个向量我们可以根据海龟的位置话题计算出来，那这个位置向量不就容易得到了么。 我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心是这个向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。 Launch文件解析 learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ]) 坐标系动态广播 learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 海龟跟随 learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], }, 参考链接 https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":["服务器","import","消息","准备",",","rviz2","创建","不要","效果","缓冲区","publish","com","现在","段","target","移动机器人","the","www","四乘","的","在","处理","作用","箭头","scripts","tflistener","tutorials","一本","启动","移动","啦","初始化","coding","=","一个","基","计算出来","geometry","python3","except","pose","安装","器类","将","关闭","return","roll","器","拆","#","编译","同理","程序","到","对象","source","true","'","angular","怎么","进行","其实","参数","[","知道","apt","挑战","好","转变成","试一试","至关","odom","简单","四","usr","spawn","查询","quat","小海","漂移","着急","跟随运动","概念","根据","install","会","link","pitch","爪","小海龟","—","msg","最为","d","函数","world","树","系统","ex","is","高中","那","listener","连线","怎样","setup","坐标","算法","主要","参考","仿真器","作者","transformstamped","__","重要","都","turtletfbroadcaster","编写","很","外部","动态","tools","话题","被","cmd","ros","角速度","5.0","/","可以","3","更新","if","看似","scale","成功","得","理论","bin","复杂","来","substitutions","臂","和","机器人学","数值","是不是","x","就是","5","向","神器","中","报告","header","callback","q","监听","海龟","--","案例","是","这些","世界","参数值","send","spawner","使用","learning","经过","说明","广播","务器","id","指令","加入","name","transformexception","产生","上","atan2","随便","prefix","，","可视","none","信息","知识","环境","static","subscription","其中","package","en","下","pkg","动机","%","数据","绝对","否则","清楚","变成","缓冲","org","https","机械","显得","house","又会有","先","又","0.0","误差","详细","哪些","形态","变化","管理系","订阅","guyuehome",".__","空间",")","transformbroadcaster","跟随","transformations","info","至关重要","trans","ready","转变","计算","命令","你家","broadcaster1","f","格外","async","管理系统","有点","就绪","lookup","包括","定时器","as","向量","哪个","base","两只","文件",":","起来","里程计","查看","translation","turtle1","库","之间","这种","时候","物体","sim","rotation","长度","保持","完整","value","实现","map","仿真","参考系","方法","time","角度","vel","叫做","左边","client","机器","监听器","全局","让","parameter","默认","math","turtlesim","距离","转换","share","部分","等待","发送","statictransformbroadcaster","速度","如何","tf","两个","相应","说","学习","中间","变得","需要","古月","良好","declare","result","destroy","教材","抓取","应该","euler","非常","run","y","following","真器","呗","parameters","两者之间","broadcaster","保存","spawned","broadcaster2","目标","数学","args","内","是否","rclpy","frame","docs","请求","退出","例程","线速度","python","戳","所在","launchconfiguration","rel","rviz","进入","机器人","点","turtle","call","标志","teleop","准备就绪","存在","给","矩阵","代码","中心点","turtlefollowing","三个","理论知识","actions","相对","累积","通过","$","？","出来","turtlename","销毁","这样","要","两者","不断","源","try","rate","坐标系","末端","及时","不","选项","底盘","解决","10.0","变换","平移","有","入口","功能","speed","自动","做","关于",".","工件","stamp","pos","了","console","熟悉","\"","动","客户","运动","生变","env","不会","核心","也","配置","理解","8","这个","w","呢","中该","launchdescription","spawning","意思","解析","中画","只要","一样","buffer","依然","没","还","位置","描述","里程","表示","范围","方向","request","称之为","看","on","了解","一层","from","示例","失败","静态","1","基本","具体","之为","forward","(","时刻","launch","比如","{","继续","固定","提供","服务","人学","sendtransform","如果","想起","utf","+","4","接口","出","父类","然后","to","初始","could","init","四元","string","生成","finished","工具","一种","node","欧拉角","float","内容","运行","demo","py","讲解","节点","容易","再","get","default","create","之后","humble","}","激光雷达","service","怎么样","executable","z","successfully","命令行","时","完成","quaternion","_","欧拉","算出","已经","周期","位","异常","key","logger","关系","雷达","generate","链接","存储","与","分解","不是","包","封装","*","false","者","默认值","yaw","srv","child","并","timer","twist","后","控制","操作","每","原理","一起","xy","done","定义","么","不变","else","发生","super","基础","常见","房子","有所","还会","shutdown","所以","可视化","时间","transformation","、","description","theta","该","：","类","设置","tf2","sudo","。","另外","就","turtle2","获取","一些","对","ros2","view","self","def","旋转","statictfbroadcaster","发布","points","中心","msgs","1.0","打开","提示","main","linear","背后","@","frames","情况","declarelaunchargument","夹","底层","echo","not","我们","回调","变得复杂","clock","过程","得到","按照","居","便于","transform","]","这","循环","数","优先","名称","发生变化","0","s","transformlistener","管理","很多","class","激光"," ","2","（","spin","当前","看看","定时","试试","entry","地图","now","）","如下","名","publisher","客户端","外部环境","laser","姿态","没有","慢慢","基于",">","为","加","某","sqrt","用","!","一只","-","html","大家"],"title":"**TF：机器人坐标系管理神器**","title_tokens":["tf","：","*","管理","神器","坐标系","机器","机器人","坐标"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf","text":"坐标系是我们非常熟悉的一个概念，也是机器人学中的重要基础，在一个完整的机器人系统中，会存在很多坐标系，这些坐标系之间的位置关系该如何管理？ ROS给我们提供了一个坐标系的管理神器——TF。","text_tokens":["概念","？","会","也","管理","是","这些","提供","很多","机器"," ","人学","—","系统","坐标系","机器人","坐标","基础","的","在","位置","如何","tf","，","我们","机器人学","关系","存在","给","之间","重要","了","该","熟悉","中","神器","完整","。","一个","非常","ros"],"title":"TF：机器人坐标系管理神器","title_tokens":["tf","：","管理","神器","坐标系","机器","机器人","坐标"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_1","text":"机器人中都有哪些坐标系呢？ 比如在机械臂形态的机器人中，机器人安装的位置叫做基坐标系Base Frame，机器人安装位置在外部环境下的参考系叫做世界坐标系World Frame，机器人末端夹爪的位置叫做工具坐标系，外部被操作物体的位置叫做工件坐标系，在机械臂抓取外部物体的过程中，这些坐标系之间的关系也在跟随变化。 在移动机器人系统中，坐标系一样至关重要，比如一个移动机器人的中心点是基坐标系Base Link，雷达所在的位置叫做雷达坐标系laser link，机器人要移动，里程计会累积位置，这个位置的参考系叫做里程计坐标系odom，里程计又会有累积误差和漂移，绝对位置的参考系叫做地图坐标系map。 一层一层坐标系之间关系复杂，有一些是相对固定的，也有一些是不断变化的，看似简单的坐标系也在空间范围内变得复杂，良好的坐标系管理系统就显得格外重要。 关于坐标系变换关系的基本理论，在每一本机器人学的教材中都会有讲解，可以分解为平移和旋转两个部分，通过一个四乘四的矩阵进行描述，在空间中画出坐标系，那两者之间的变换关系，其实向量的数学描述。 ROS中TF功能的底层原理，其实就是对这些数学变换进行了封装，详细的理论知识大家可以参考机器人学的教材，我们主要讲解TF坐标管理系统的使用方法。","text_tokens":["两者之间","是","世界","这些","数学","内","frame","使用","所在","移动机器人","机器人","四乘","的","在","，","关系","雷达","一本","移动","知识","环境","矩阵","分解","中心点","下","封装","理论知识","动机","一个","基","相对","累积","通过","绝对","？","安装","机械","显得","操作","每","原理","又会有","要","两者","不断","坐标系","误差","详细","末端","哪些","变换","形态","平移","进行","其实","变化","有","管理系","功能","空间","关于","跟随","工件","至关","至关重要","odom","简单","四","了","漂移","。","格外","就","管理系统","link","会","一些","对","也","旋转","爪","这个","world","系统","呢","中心","向量","base","中画","一样","那","坐标","位置","主要","夹","底层","参考","描述","里程","我们","范围","变得复杂","过程","里程计","之间","重要","一层","都","物体","外部","基本","被","ros","map","参考系","方法","叫做","管理","比如","可以","固定","机器","看似"," ","人学","出","理论","复杂","部分","地图","臂","和","工具","tf","两个","外部环境","laser","机器人学","变得","良好","为","讲解","就是","教材","中","抓取","大家"],"title":"机器人中的坐标系","title_tokens":["的","中","坐标系","机器","机器人","坐标"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_1","text":"ROS中的TF该如何使用呢？我们先通过两只小海龟的示例，了解下基于坐标系的一种机器人跟随算法。","text_tokens":["通过","？","海龟","小海龟","机器","使用","呢","先","两只","坐标系","机器人","坐标","算法","的","如何","tf","一种","，","我们","基于","跟随","了解","示例","该","下","中","小海","。","ros"],"title":"TF命令行操作","title_tokens":["tf","操作","命令","命令行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_2","text":"这个示例需要我们先安装相应的功能包，然后就可以通过一个launch文件启动，之后我们可以控制其中的一只小海龟，另外一只小海龟会自动跟随运动。 $ sudo apt install ros-humble-turtle-tf2-py ros-humble-tf2-tools 具体运行的效果如何？我们来试一试。 $ ros2 launch turtle_tf2_py turtle_tf2_demo.launch.py $ ros2 run turtlesim turtle_teleop_key","text_tokens":["通过","另外","就","$","install","具体","launch","海龟","会","？","安装","可以","humble","ros2","run","控制","小海龟"," ","这个","效果","_","turtlesim","先","然后","来","文件","的","turtle","key","相应","如何","，","我们","teleop","运动","sudo","启动","apt","需要","运行","功能","自动","demo",".","跟随","py","试一试","其中","包","示例","tools","小海","一只","-","之后","tf2","。","一个","跟随运动","ros"],"title":"小海龟跟随例程","title_tokens":["跟随","海龟","例程","小海","小海龟"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_2","text":"$ ros2 run tf2_tools view_frames","text_tokens":["$","_","frames","ros2","tools","view","tf2","run"," "],"title":"查看TF树","title_tokens":["tf","树","查看"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_3","text":"$ ros2 run tf2_ros tf2_echo turtle2 turtle1","text_tokens":["turtle1","$","turtle2","echo","_","ros2","tf2","ros","run"," "],"title":"查询坐标变换信息","title_tokens":["查询","信息","坐标","变换"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_4","text":"$ ros2 run rviz2 rviz2 -d $( ros2 pkg prefix --share turtle_tf2_py ) /rviz/turtle_rviz.rviz 小海龟跟随的案例有点意思，这背后的原理是怎样的呢？大家不要着急，我们先来了解下TF的使用方法，便于大家慢慢理解。","text_tokens":["(","$","/","方法","？","海龟","--","有点","ros2","案例","是","小海龟","原理","rviz2"," ","理解","d","不要","使用","呢","_","意思","先","share","rviz","怎样","来","背后","的","turtle","tf","prefix","，","我们","慢慢",")",".","py","跟随","了解","便于","这","下","pkg","小海","-","tf2","着急","。","run","大家"],"title":"坐标系可视化","title_tokens":["坐标系","可视","坐标","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_3","text":"我们说TF的主要作用是对坐标系进行管理，那就管理一个试试呗？ 坐标变换中最为简单的应该是相对位置不发生变化的情况，比如你家的房子在哪个位置，只要房子不拆，这个坐标应该就不会变化。 在机器人系统中也很常见，比如激光雷达和机器人底盘之间的位置关系，安装好之后基本不会变化。 在TF中，这种情况也称之为静态TF变换，我们来看看在程序中该如何实现？","text_tokens":["呗","不会","就","激光雷达","？","常见","对","管理","比如","也","安装","是","机器","激光"," ","最为","这个","系统","中该","看看","哪个","只要","试试","拆","那","坐标系","发生","来","机器人","坐标","不","程序","底盘","情况","如何","的","在","变换","主要","说","tf","作用","位置","进行","，","我们","变化","房子","雷达","关系","之为","称之为","好","。","之后","之间","和","这种","简单","很","中","你家","静态","基本","发生变化","应该","一个","实现","相对","生变"],"title":"静态TF广播","title_tokens":["tf","静态","广播"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_5","text":"$ ros2 run learning_tf static_tf_broadcaster","text_tokens":["learning","$","tf","broadcaster","_","ros2","static","run"," "],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_6","text":"learning_tf/static_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播静态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros.static_transform_broadcaster import StaticTransformBroadcaster # TF静态坐标系广播器类 class StaticTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . tf_broadcaster = StaticTransformBroadcaster ( self ) # 创建一个TF广播器对象 static_transformStamped = TransformStamped () # 创建一个坐标变换的消息对象 static_transformStamped . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 static_transformStamped . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 static_transformStamped . child_frame_id = 'house' # 设置一个坐标变换的目标坐标系 static_transformStamped . transform . translation . x = 10.0 # 设置坐标变换中的X、Y、Z向的平移 static_transformStamped . transform . translation . y = 5.0 static_transformStamped . transform . translation . z = 0.0 quat = tf_transformations . quaternion_from_euler ( 0.0 , 0.0 , 0.0 ) # 将欧拉角转换为四元数（roll, pitch, yaw） static_transformStamped . transform . rotation . x = quat [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） static_transformStamped . transform . rotation . y = quat [ 1 ] static_transformStamped . transform . rotation . z = quat [ 2 ] static_transformStamped . transform . rotation . w = quat [ 3 ] self . tf_broadcaster . sendTransform ( static_transformStamped ) # 广播静态坐标变换，广播后两个坐标系的位置关系保持不变 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = StaticTFBroadcaster ( \"static_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , ], }, 经过这段代码，两个坐标系的变化是描述清楚了，到了使用的时候，我们又该如何查询呢？","text_tokens":["header","broadcaster","}","import","消息","目标","是","args","rclpy","frame",",","z","创建","使用","learning","com","完成","quaternion","_","欧拉","退出","经过","说明","广播","python","戳","id","段","点","www","name","加入","的","scripts","，","none","关系","初始化","static","coding","代码","包","=","*","一个","yaw","geometry","清楚","python3","child","？","并","后","销毁","器类","将","house","roll","器","又","源","0.0","不变","#","坐标系","编译","程序","到","super","对象","选项","'","10.0","变换","平移","进行","变化","[","知道","shutdown","guyuehome","入口","功能","时间",")",".","transformations","stamp","、","了","console","：","该","usr","查询","\"","类","设置","quat","tf2","env","ros2","self","pitch","def","配置","statictfbroadcaster","旋转","8","msg","points","w","world","系统","呢","msgs","打开","main","setup","文件","@",":","坐标","位置","描述","我们","clock","作者","居","transformstamped","translation","库","transform","__","]","from","时候","示例","这","编写","循环","静态","数","rotation","1","保持","0","ros","(","5.0","/","3","{","class"," ","2","sendtransform","（","让","utf","spin","接口","父类","to","bin","转换","初始","等待","entry","init","四元","now","statictransformbroadcaster","）","如下","如何","tf","node","欧拉角","两个","需要","古月","为","py","节点","x","destroy","get","向","中","!","-","euler","y"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#tf_4","text":"我们再来学习下如何查询两个坐标系之间的位置关系。","text_tokens":["之间","的","位置","。","再","如何","下","两个","学习","我们","关系","查询","坐标系","来","坐标"],"title":"TF监听","title_tokens":["tf","监听"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_7","text":"$ ros2 run learning_tf tf_listener","text_tokens":["learning","$","tf","_","ros2","listener","run"," "],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_8","text":"learning_tf/tf_listener.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-监听某两个坐标系之间的变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 class TFListener ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'source_frame' , 'world' ) # 创建一个源坐标系名的参数 self . source_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) . get_parameter_value () . string_value self . declare_parameter ( 'target_frame' , 'house' ) # 创建一个目标坐标系名的参数 self . target_frame = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'target_frame' ) . get_parameter_value () . string_value self . tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self . tf_listener = TransformListener ( self . tf_buffer , self ) # 创建坐标变换的监听器 self . timer = self . create_timer ( 1.0 , self . on_timer ) # 创建一个固定周期的定时器，处理坐标信息 def on_timer ( self ): try : now = rclpy . time . Time () # 获取ROS系统的当前时间 trans = self . tf_buffer . lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 self . target_frame , self . source_frame , now ) except TransformException as ex : # 如果坐标变换获取失败，进入异常报告 self . get_logger () . info ( f 'Could not transform { self . target_frame } to { self . source_frame } : { ex } ' ) return pos = trans . transform . translation # 获取位置信息 quat = trans . transform . rotation # 获取姿态信息（四元数） euler = tf_transformations . euler_from_quaternion ([ quat . x , quat . y , quat . z , quat . w ]) self . get_logger () . info ( 'Get %s --> %s transform: [ %f , %f , %f ] [ %f , %f , %f ]' % ( self . source_frame , self . target_frame , pos . x , pos . y , pos . z , euler [ 0 ], euler [ 1 ], euler [ 2 ])) def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TFListener ( \"tf_listener\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], }, 好啦，大家现在对TF的基本使用有所了解了。我们继续挑战两只海龟跟随的案例。","text_tokens":["}","保存","监听","import","--","broadcaster","海龟","目标","案例","args","rclpy","frame",",","参数值","创建","z","使用","缓冲区","learning","com","完成","quaternion","_","退出","现在","说明","python","target","周期","进入","点","www","name","加入","transformexception","的","异常","处理","logger","tflistener","，","none","scripts","信息","啦","初始化","存储","static","coding","代码","包","=","*","%","一个","默认值","否则","python3","缓冲","except","并","timer","后","销毁","关闭","house","return","try","源","#","坐标系","编译","到","程序","super","对象","source","选项","'","变换","有所","进行","参数","[","知道","shutdown","挑战","guyuehome","入口","好","功能","时间",")",".","transformations","pos","info","跟随","trans","了","console","：","usr","\"","类","设置","quat","tf2","。","env","f","获取","对","ros2","self","lookup","def","配置","定时器","8","as","points","w","world","ex","系统","1.0","打开","两只","buffer","listener","main","setup","文件","@",":","坐标","位置","not","我们","作者","居","translation","库","on","之间","transform","__","]","from","失败","示例","了解","编写","循环","外部","数","rotation","优先","1","基本","s","0","value","transformlistener","ros","(","/","time","时刻","{","继续","左边","固定","监听器","class"," ","parameter","如果","（","2","utf","spin","默认","当前","让","定时","接口","父类","to","bin","初始","等待","entry","could","init","string","四元","now","）","名","如下","tf","两个","node","数值","姿态","需要","古月",">","declare","某","py","用","节点","x","destroy","get","create","!","报告","-","euler","y","大家"],"title":"代码解析","title_tokens":["代码","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_9","text":"","text_tokens":[],"title":"海龟跟随功能解析","title_tokens":["功能","跟随","海龟","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_10","text":"$ ros2 launch learning_tf turtle_following_demo.launch.py $ ros2 run turtlesim turtle_teleop_key","text_tokens":[".","py","turtle","key","learning","$","tf","_","launch","turtlesim","teleop","run","ros2","following"," ","demo"],"title":"运行效果","title_tokens":["效果","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_11","text":"在两只海龟的仿真器中，我们可以定义三个坐标系，比如仿真器的全局参考系叫做world，turtle1和turtle2坐标系在两只海龟的中心点，这样，turtle1和world坐标系的相对位置，就可以表示海龟1的位置，海龟2也同理。 要实现海龟2向海龟1运动，我们在两者中间做一个连线，再加一个箭头，怎么样，是不是有想起高中时学习的向量计算？这两个向量我们可以根据海龟的位置话题计算出来，那这个位置向量不就容易得到了么。 我们说坐标变换的描述方法就是向量，所以在这个跟随例程中，用TF就可以很好的解决。 向量的长度表示距离，方向表示角度，有了距离和角度，我们随便设置一个时间，不就可以计算得到速度了么，然后就是速度话题的封装和发布，海龟2也就可以动起来了。 所以这个例程的核心是这个向量的计算，两只海龟还会不断运动，这个向量也得按照某一个周期计算，这就得用上TF的动态广播与监听了。 我们一起看下代码该如何实现。","text_tokens":["监听","海龟","怎么样","是","时","算出","例程","广播","周期","的","在","箭头","上","随便","，","与","不是","代码","中心点","封装","下","三个","一个","计算出来","相对","？","出来","一起","定义","这样","要","么","两者","不断","坐标系","同理","不","解决","变换","怎么","还会","有","所以","好","做","时间","跟随","了","该","动","计算","设置","。","运动","根据","turtle2","就","核心","也","发布","这个","world","中心","向量","高中","两只","那","连线","坐标","位置","起来","参考","描述","我们","表示","方向","仿真器","得到","看","按照","turtle1","这","很","动态","长度","1","话题","实现","仿真","参考系","方法","角度","叫做","比如","可以","全局"," ","2","想起","距离","得","然后","速度","和","说","tf","两个","如何","学习","中间","加","某","是不是","用","容易","就是","再","向","中","真器"],"title":"原理解析","title_tokens":["原理","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#launch","text":"learning_tf/launch/turtle_following_demo.launch.py from launch import LaunchDescription from launch.actions import DeclareLaunchArgument from launch.substitutions import LaunchConfiguration from launch_ros.actions import Node def generate_launch_description (): return LaunchDescription ([ Node ( package = 'turtlesim' , executable = 'turtlesim_node' , name = 'sim' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster1' , parameters = [ { 'turtlename' : 'turtle1' } ] ), DeclareLaunchArgument ( 'target_frame' , default_value = 'turtle1' , description = 'Target frame name.' ), Node ( package = 'learning_tf' , executable = 'turtle_tf_broadcaster' , name = 'broadcaster2' , parameters = [ { 'turtlename' : 'turtle2' } ] ), Node ( package = 'learning_tf' , executable = 'turtle_following' , name = 'listener' , parameters = [ { 'target_frame' : LaunchConfiguration ( 'target_frame' )} ] ), ])","text_tokens":["(","parameters","turtle2","/","broadcaster","import","launch","}","broadcaster2","{","def","turtlename","executable","frame",","," ","return","learning","launchdescription","_","turtlesim","launchconfiguration","target","listener","substitutions",":","name","'","turtle","declarelaunchargument","tf","node","[","following","generate",")","demo",".","py","description","turtle1","]","package","from","=","default","actions","sim","value","broadcaster1","ros"],"title":"Launch文件解析","title_tokens":["文件","launch","解析"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_12","text":"learning_tf/turtle_tf_broadcaster.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-广播动态的坐标变换 \"\"\" import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 from geometry_msgs.msg import TransformStamped # 坐标变换消息 import tf_transformations # TF坐标变换库 from tf2_ros import TransformBroadcaster # TF坐标变换广播器 from turtlesim.msg import Pose # turtlesim小海龟位置消息 class TurtleTFBroadcaster ( Node ): def __init__ ( self , name ): super () . __init__ ( name ) # ROS2节点父类初始化 self . declare_parameter ( 'turtlename' , 'turtle' ) # 创建一个海龟名称的参数 self . turtlename = self . get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'turtlename' ) . get_parameter_value () . string_value self . tf_broadcaster = TransformBroadcaster ( self ) # 创建一个TF坐标变换的广播对象并初始化 self . subscription = self . create_subscription ( # 创建一个订阅者，订阅海龟的位置消息 Pose , f '/ { self . turtlename } /pose' , # 使用参数中获取到的海龟名称 self . turtle_pose_callback , 1 ) def turtle_pose_callback ( self , msg ): # 创建一个处理海龟位置消息的回调函数，将位置消息转变成坐标变换 transform = TransformStamped () # 创建一个坐标变换的消息对象 transform . header . stamp = self . get_clock () . now () . to_msg () # 设置坐标变换消息的时间戳 transform . header . frame_id = 'world' # 设置一个坐标变换的源坐标系 transform . child_frame_id = self . turtlename # 设置一个坐标变换的目标坐标系 transform . transform . translation . x = msg . x # 设置坐标变换中的X、Y、Z向的平移 transform . transform . translation . y = msg . y transform . transform . translation . z = 0.0 q = tf_transformations . quaternion_from_euler ( 0 , 0 , msg . theta ) # 将欧拉角转换为四元数（roll, pitch, yaw） transform . transform . rotation . x = q [ 0 ] # 设置坐标变换中的X、Y、Z向的旋转（四元数） transform . transform . rotation . y = q [ 1 ] transform . transform . rotation . z = q [ 2 ] transform . transform . rotation . w = q [ 3 ] # Send the transformation self . tf_broadcaster . sendTransform ( transform ) # 广播坐标变换，海龟位置变化后，将及时更新坐标变换信息 def main ( args = None ): rclpy . init ( args = args ) # ROS2 Python接口初始化 node = TurtleTFBroadcaster ( \"turtle_tf_broadcaster\" ) # 创建ROS2节点对象并进行初始化 rclpy . spin ( node ) # 循环等待ROS2退出 node . destroy_node () # 销毁节点对象 rclpy . shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , ], },","text_tokens":["header","broadcaster","}","import","消息","海龟","callback","q","目标","args","rclpy","frame",",","参数值","创建","z","send","使用","learning","com","完成","quaternion","_","欧拉","退出","说明","广播","python","戳","id","the","点","www","name","加入","的","turtle","处理","scripts","，","none","信息","初始化","static","subscription","coding","代码","包","=","*","者","一个","默认值","yaw","geometry","否则","变成","python3","child","pose","并","turtlename","后","销毁","将","关闭","roll","器","源","0.0","#","坐标系","编译","到","及时","super","对象","选项","程序","'","变换","平移","进行","参数","[","变化","知道","shutdown","订阅","guyuehome","入口","功能","转变成","时间","transformation",")","transformbroadcaster",".","transformations","stamp","、","theta","console","：","usr","转变","\"","类","设置","小海","tf2","env","f","获取","ros2","self","pitch","def","配置","旋转","小海龟","8","msg","points","函数","world","w","系统","msgs","打开","listener","main","setup","文件","@",":","坐标","位置","回调","clock","作者","居","transformstamped","translation","库","__","transform","]","from","示例","turtletfbroadcaster","编写","循环","外部","动态","数","rotation","优先","名称","1","0","value","ros","(","/","3","{","更新","class"," ","parameter","2","（","sendtransform","utf","spin","默认","让","turtlesim","接口","父类","to","bin","转换","初始","等待","entry","init","string","四元","now","）","如下","tf","node","欧拉角","数值","需要","古月","declare","为","py","用","节点","x","destroy","get","向","create","中","!","-","euler","y"],"title":"坐标系动态广播","title_tokens":["坐标系","动态","坐标","广播"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_13","text":"learning_tf/turtle_following.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- \"\"\" @作者: 古月居(www.guyuehome.com) @说明: ROS2 TF示例-通过坐标变化实现海龟跟随功能 \"\"\" import math import rclpy # ROS2 Python接口库 from rclpy.node import Node # ROS2 节点类 import tf_transformations # TF坐标变换库 from tf2_ros import TransformException # TF左边变换的异常类 from tf2_ros.buffer import Buffer # 存储坐标变换信息的缓冲类 from tf2_ros.transform_listener import TransformListener # 监听坐标变换的监听器类 from geometry_msgs.msg import Twist # ROS2 速度控制消息 from turtlesim.srv import Spawn # 海龟生成的服务接口 class TurtleFollowing ( Node ) : def __init__ ( self, name ) : super () .__init__ ( name ) # ROS2节点父类初始化 self.declare_parameter ( 'source_frame' , 'turtle1' ) # 创建一个源坐标系名的参数 self.source_frame = self.get_parameter ( # 优先使用外部设置的参数值，否则用默认值 'source_frame' ) .get_parameter_value () .string_value self.tf_buffer = Buffer () # 创建保存坐标变换信息的缓冲区 self.tf_listener = TransformListener ( self.tf_buffer, self ) # 创建坐标变换的监听器 self.spawner = self.create_client ( Spawn, 'spawn' ) # 创建一个请求产生海龟的客户端 self.turtle_spawning_service_ready = False # 是否已经请求海龟生成服务的标志位 self.turtle_spawned = False # 海龟是否产生成功的标志位 self.publisher = self.create_publisher ( Twist, 'turtle2/cmd_vel' , 1 ) # 创建跟随运动海龟的速度话题 self.timer = self.create_timer ( 1 .0, self.on_timer ) # 创建一个固定周期的定时器，控制跟随海龟的运动 def on_timer ( self ) : from_frame_rel = self.source_frame # 源坐标系 to_frame_rel = 'turtle2' # 目标坐标系 if self.turtle_spawning_service_ready: # 如果已经请求海龟生成服务 if self.turtle_spawned: # 如果跟随海龟已经生成 try: now = rclpy.time.Time () # 获取ROS系统的当前时间 trans = self.tf_buffer.lookup_transform ( # 监听当前时刻源坐标系到目标坐标系的坐标变换 to_frame_rel, from_frame_rel, now ) except TransformException as ex: # 如果坐标变换获取失败，进入异常报告 self.get_logger () .info ( f 'Could not transform {to_frame_rel} to {from_frame_rel}: {ex}' ) return msg = Twist () # 创建速度控制消息 scale_rotation_rate = 1 .0 # 根据海龟角度，计算角速度 msg.angular.z = scale_rotation_rate * math.atan2 ( trans.transform.translation.y, trans.transform.translation.x ) scale_forward_speed = 0 .5 # 根据海龟距离，计算线速度 msg.linear.x = scale_forward_speed * math.sqrt ( trans.transform.translation.x ** 2 + trans.transform.translation.y ** 2 ) self.publisher.publish ( msg ) # 发布速度指令，海龟跟随运动 else : # 如果跟随海龟没有生成 if self.result.done () : # 查看海龟是否生成 self.get_logger () .info ( f 'Successfully spawned {self.result.result().name}' ) self.turtle_spawned = True else : # 依然没有生成跟随海龟 self.get_logger () .info ( 'Spawn is not finished' ) else : # 如果没有请求海龟生成服务 if self.spawner.service_is_ready () : # 如果海龟生成服务器已经准备就绪 request = Spawn.Request () # 创建一个请求的数据 request.name = 'turtle2' # 设置请求数据的内容，包括海龟名、xy位置、姿态 request.x = float ( 4 ) request.y = float ( 2 ) request.theta = float ( 0 ) self.result = self.spawner.call_async ( request ) # 发送服务请求 self.turtle_spawning_service_ready = True # 设置标志位，表示已经发送请求 else : self.get_logger () .info ( 'Service is not ready' ) # 海龟生成服务器还没准备就绪的提示 def main ( args = None ) : rclpy.init ( args = args ) # ROS2 Python接口初始化 node = TurtleFollowing ( \"turtle_following\" ) # 创建ROS2节点对象并进行初始化 rclpy.spin ( node ) # 循环等待ROS2退出 node.destroy_node () # 销毁节点对象 rclpy.shutdown () # 关闭ROS2 Python接口 完成代码的编写后需要设置功能包的编译选项，让系统知道Python程序的入口，打开功能包的setup.py文件，加入如下入口点的配置： entry_points = { 'console_scripts' : [ 'static_tf_broadcaster = learning_tf.static_tf_broadcaster:main' , 'turtle_tf_broadcaster = learning_tf.turtle_tf_broadcaster:main' , 'tf_listener = learning_tf.tf_listener:main' , 'turtle_following = learning_tf.turtle_following:main' , ], },","text_tokens":["}","保存","import","海龟","监听","消息","service","服务器","spawned","broadcaster","目标","args","是否","rclpy","frame",",","参数值","创建","spawner","z","successfully","准备","使用","缓冲区","learning","com","publish","完成","_","请求","线速度","退出","说明","python","务器","已经","rel","指令","周期","位","让","进入","点","www","name","加入","transformexception","的","turtle","异常","产生","标志","logger","call","atan2","scripts","，","none","信息","准备就绪","初始化","存储","static","coding","代码","包","=","turtlefollowing","*","false","一个","默认值","数据","通过","geometry","srv","否则","python3","缓冲","except","twist","timer","并","后","控制","销毁","xy","done","关闭","return","try","源","rate","else","#","坐标系","编译","到","程序","super","对象","source","选项","true","'","变换","angular","进行","变化","参数","知道","[","shutdown",".__","guyuehome","入口","功能","speed","时间",")",".","跟随","transformations","info","、","trans","theta","console","ready","：","usr","spawn","\"","类","设置","客户","计算","tf2","运动","跟随运动","env","f","根据","turtle2","async","获取","就绪","ros2","self","lookup","def","配置","包括","定时器","8","msg","as","发布","ex","points","系统","is","msgs","spawning","打开","提示","buffer","依然","listener","main","setup","linear","@",":","坐标","文件","没","还","位置","not","表示","request","作者","查看","居","translation","库","turtle1","transform","__","on","]","from","失败","示例","编写","循环","外部","rotation","优先","1","话题","0","value","transformlistener","实现","ros","cmd","角速度","(","forward","/","time","时刻","vel","角度","{","if","左边","服务","client","监听器","固定","class"," ","parameter","如果","2","scale","utf","成功","默认","当前","math","+","定时","turtlesim","4","距离","接口","父类","to","bin","初始","等待","entry","发送","could","生成","init","string","now","finished","速度","如下","名","publisher","tf","node","客户端","数值","没有","姿态","float","内容","需要","古月","declare","sqrt","py","用","result","节点","x","destroy","get","5","create","!","报告","spin","-","following","y"],"title":"海龟跟随","title_tokens":["跟随","海龟"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.2_TF/#_14","text":"https://docs.ros.org/en/humble/Tutorials/Tf2/Tf2-Main.html","text_tokens":[".","en","docs","/","org","tutorials","https","tf2","-","ros","main","humble","html",":"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/","text":"URDF：机器人建模方法 ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法——URDF，用来描述机器人外观、性能等各方面属性。 机器人的组成 建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由硬件结构、驱动系统、传感器系统、控制系统四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备，驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等，传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境，控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。 URDF ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是XML格式，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为连杆Link，手肘就类似于机器人电机驱动部分，称为关节joint。 所以在URDF建模过程中，关键任务就是通过这里的 和 ，理清楚每一个连杆和关节的描述信息。 连杆Link的描述 标签用来描述机器人某个刚体部分的外观和物理属性，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。Link里边的 部分用来描述机器人的外观，比如 表示几何形状，里边使用 调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的。 表示坐标系相对初始位置的偏移，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分 ，描述碰撞参数，里边的内容似乎和 一样，也有 和 ，看似相同，其实区别还是比较大的。 部分重在描述机器人看上去的状态，也就是视觉效果， 部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过 来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是 里边 描述的形状。 坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。 关节Joint描述 机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 第一种continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 第二种revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 第三种prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 第四种是fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 第五种Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 既然是运动，就是相对的，parent标签描述父连杆，child标签描述子连杆，子连杆会相对父连杆发生运动。 这里的origin表示两个连杆坐标系之间的关系，也就是这个向量，可以理解为这两个连杆该如何安装到一起。 Axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的。 Limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等，大家注意单位，ROS中关于平移的默认单位都是m，旋转是弧度，不是度，所以这里3.14就表示可以在-180度到180度之间运动，速度也是m/s，或者rad/s。 完整机器人模型 最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。 创建机器人模型 好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。 功能包结构 urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件 查看URDF模型结构 $ urdf_to_graphiz mbot_base.urdf # 在模型文件夹下 模型可视化效果 模型文件解析 learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot> 参考链接 https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":["最小","格式","提前","为例","等等","必须","理","创建","效果","细节","移动机器人","树莓","单位向量","的","在","front","网页","实际","第二个","清晰","tutorials","啦","移动","启动","把","存放","平面","四种","为了","属于","=","语言","第二种","不仅","思路","一个","geometry","滑动","安装","属性","0.19","将","roll","limit","专门","允许","#","cylinder","性能","到","parent","无法","等于","进行","其实","参数","圆柱","组合","好","大臂","自定义","相对运动","着急","或","模型简化","1.5707","任务","看下","link","会","3.14","调用","pitch","六种","—","带有","还是","系统","自身","相关","建模语言","类似","坐标","视觉效果","fixed","caster","主要","形状","参考","找","子","看上","origin","尺寸","xacro","都","外部","开发","较","ros","轴","rpy","少","/","0.20","可以","区别","平台","看似","所有","统一","0.95","得","手肘","复杂","stl","来","方式","revolute","臂","小车","和","0.025","似乎","x","就是","中","关键","组成","市面","四大","第二","是","质心","这些","于","prismatic","装置","使用","white","learning","结构","这么","最大","无论","name","产生","上","，","可视","引用","信息","环境","无限","其中","en","下","动机","wheel","物理","清楚","算力","第三","每个","org","大","配置文件","形成","https","机械","乍","软件","right","back","visual","全都","先","连杆","设备","旋转关节","哪些","变化","管理系","连接","设计","floating","第一","几何","m","计算","简化","用来","外壳","正","?","的话","管理系统","有点","看到","称为","类型","包括","version","向量","独自","柱体","base","弧度","分别","要求","轮子","第四","graphiz","文件","length",":","模型","车体","起来","有点像","驱动器","xml","查看","浮动","以及","之间","这种","时候","看上去","摄像","派","叫","完整","为此","方法","角度","叫做","自定","机器","手","介绍","让","刚体","外观","默认","自己","部分","什么","速度","如何","真实","两个","父","碰撞","需要","渲染","第三种","一段","才能","小臂","y","保存","left","axis","一系列","电脑","方面","转关","docs","0.015","比较","全为","外界","桌子","建模","rviz","机器人","第六","手臂","或者","电源","等","市面上","在于","给","矩阵","代码","上去","关节","robot","应用软件","直线","电机","相对","高","通过","他们","$","？","无论是","第六种","planar","则","感知","两种","件夹","这样","要","0.9","传感","rad","放置","坐标系","一块","驱动","不","底盘","度","第一种","平移","完全","有","第四种","black","功能","0.4","关于",".","当然","第五种","了","圆柱体","名字","熟悉","\"","正常","运动","最终","不会","0.16","独立","实打实","也","配置","里边","单位","组合而成","肘关节","理解","这个","呢","未来","解析","各","一样","还","位置","描述","表示","方向","看","限制","了解","示例","感器","接触","检测","1","偏移","0.05","launch","多","比如","固定","提供","如果","度到","三维","放在","to","一般","初始","此时","既然","continuous","一种","沿某","传感器","type","编码","算作","内容","三种","180","再","material","之后","humble","质量","碰撞检测","raw","围绕","操作系统","应用","joint","颜色","z","标签","时","之前","编码器","括号","完成","meshes","_","这里","视觉","雷达","状态","关系","0.06","注意","与","链接","分解","不是","包","包围","先来","urdf","重在","硬件","板载","哪","child","尖括号","面上","imu","控制","操作","每","一起","定义","二个","绿色","第五","发生","常见","<","所以","可视化","、","组成部分","讲","控制系统","框","该","：","系列","。","右侧","惯性","就","频繁","肌肉","一些","对","color","唯一","旋转","1.0","五种","main","yellow","这款","我们","过程","0.095","按照","它","便于","相机","二种","这","驱使","xyz","文件夹","源代码","认识","名称","0","s","全称","管理","sphere","蓝色"," ","不过","由","mbot","不能","一系","像头","载体","以","相同","如下","而是","外部环境",">","为","极限","rgba","码器","某","一致","某个","用","摄像头","0.18","radius","-","html","局","大家"],"title":"**URDF：机器人建模方法**","title_tokens":["方法","：","*","urdf","建模","机器","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf","text":"ROS是机器人操作系统，当然要给机器人使用啦，不过在使用之前，还得让ROS认识下我们使用的机器人，如何把一个机器人介绍给ROS呢？ 为此，ROS专门提供了一种机器人建模方法——URDF，用来描述机器人外观、性能等各方面属性。","text_tokens":["方法","？","是","操作系统","提供","机器","属性","操作","介绍","方面"," ","让","不过","—","使用","系统","呢","外观","之前","要","专门","得","各","建模","性能","机器人","还","的","在","如何","一种","等","描述","，","我们","啦","给","把","、","当然","了","下","认识","用来","urdf","。","一个","ros","为此"],"title":"URDF：机器人建模方法","title_tokens":["方法","：","urdf","建模","机器","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_1","text":"建模描述机器人的过程中，我们自己需要先熟悉机器人的组成和参数，比如机器人一般是由硬件结构、驱动系统、传感器系统、控制系统四大部分组成，市面上一些常见的机器人，无论是移动机器人还是机械臂，我们都可以按照这四大组成部分进行分解。 硬件结构就是底盘、外壳、电机等实打实可以看到的设备，驱动系统就是可以驱使这些设备正常使用的装置，比如电机的驱动器，电源管理系统等，传感系统包括电机上的编码器、板载的IMU、安装的摄像头、雷达等等，便于机器人感知自己的状态和外部的环境，控制系统就是我们开发过程的主要载体了，一般是树莓派、电脑等计算平台，以及里边的操作系统和应用软件。 机器人建模的过程，其实就是按照类似的思路，通过建模语言，把机器人每一个部分都描述清楚，再组合起来的过程。","text_tokens":["市面","四大","是","这些","操作系统","等等","应用","电脑","装置","使用","编码器","结构","移动机器人","建模","树莓","机器人","无论","的","上","电源","市面上","等","，","雷达","状态","移动","环境","把","分解","应用软件","语言","动机","电机","思路","硬件","一个","板载","通过","清楚","无论是","安装","面上","imu","控制","机械","操作","感知","软件","每","先","传感","设备","驱动","底盘","常见","进行","其实","参数","管理系","组合","、","组成部分","控制系统","了","熟悉","计算","外壳","正常","。","管理系统","看到","一些","实打实","里边","包括","还是","系统","建模语言","主要","起来","描述","我们","驱动器","过程","按照","以及","便于","都","这","驱使","摄像","感器","外部","开发","派","管理","比如","可以","机器","平台"," ","由","自己","一般","部分","像头","载体","臂","和","传感器","需要","编码","码器","摄像头","就是","再","中","组成","类似"],"title":"机器人的组成","title_tokens":["机器","的","机器人","组成"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_1","text":"ROS中的建模方法叫做 URDF ，全称是 统一机器人描述格式 ，不仅可以清晰描述机器人自身的模型，还可以描述机器人的外部环境，比如这里的桌子，也可以算作一个模型。 URDF模型文件使用的是XML格式，右侧就是一个机器人的URDF描述，乍看上去，有点像网页开发的源代码，都是由一系列尖括号包围的标签和其中的属性组合而成。 如何使用这样一个文件描述机器人呢？比如这个机械臂，大家可以看下自己的手臂，我们的手臂是由大臂和小臂组成，他们独自是无法运动的，必须通过一个手肘关节连接之后，才能通过肌肉驱动，产生相对运动。 在建模中，大臂和小臂就类似机器人的这些独立的刚体部分，称为连杆Link，手肘就类似于机器人电机驱动部分，称为关节joint。 所以在URDF建模过程中，关键任务就是通过这里的 和 ，理清楚每一个连杆和关节的描述信息。","text_tokens":["格式","是","这些","一系列","必须","于","joint","理","标签","使用","括号","桌子","建模","机器人","这里","的","产生","手臂","在","网页","之后","，","清晰","信息","环境","代码","其中","包围","下","上去","关节","不仅","电机","urdf","一个","相对","他们","通过","清楚","尖括号","？","属性","机械","乍","每","这样","连杆","驱动","无法","连接","所以","组合","大臂","相对运动","系列","右侧","。","运动","就","任务","才能","有点","独立","肌肉","link","也","称为","组合而成","肘关节","这个","呢","独自","自身","文件","类似","模型","还","描述","有点像","我们","看上","xml","过程","看","都","看上去","源代码","外部","开发","ros","全称","方法","叫做","比如","可以","机器","手"," ","由","刚体","统一","自己","手肘","部分","一系","臂","和","如何","外部环境","算作","就是","中","关键","小臂","组成","大家"],"title":"URDF","title_tokens":["urdf"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#link","text":"标签用来描述机器人某个刚体部分的外观和物理属性，外观包括尺寸、颜色、形状，物理属性包括质量、惯性矩阵、碰撞参数等。 以这个机械臂连杆为例，它的link描述如下： link标签中的name表示该连杆的名称，我们可以自定义，未来joint连接link的时候，会使用到这个名称。Link里边的 部分用来描述机器人的外观，比如 表示几何形状，里边使用 调用了一个在三维软件中提前设计好的蓝色外观，就是这个stl文件，看上去和真实机器人是一致的。 表示坐标系相对初始位置的偏移，分别是x、y、z方向上的平移，和roll、pitch、raw旋转，不需要偏移的话，就全为0。 第二个部分 ，描述碰撞参数，里边的内容似乎和 一样，也有 和 ，看似相同，其实区别还是比较大的。 部分重在描述机器人看上去的状态，也就是视觉效果， 部分则是描述机器人运动过程中的状态，比如机器人与外界如何接触算作碰撞。 在这个机器人模型中，蓝色部分是通过 来描述的，在实际控制过程中，这样复杂的外观在计算碰撞检测时，要求的算力较高，为了简化计算，我们将碰撞检测用的模型简化为了绿色框的圆柱体，也就是 里边 描述的形状。 坐标系偏移也是类似，可以描述刚体质心的偏移。 如果是移动机器人的话，link也可以用来描述小车的车体、轮子等部分。","text_tokens":["碰撞检测","raw","提前","第二","是","质心","为例","joint","颜色","z","标签","效果","使用","时","比较","全为","外界","移动机器人","机器人","name","的","在","上","视觉","等","实际","，","第二个","状态","移动","与","矩阵","为了","上去","动机","重在","一个","相对","高","通过","物理","算力","大","控制","属性","机械","则","软件","将","定义","roll","这样","连杆","二个","绿色","坐标系","到","不","平移","其实","圆柱","参数","有","连接","好","设计","、","几何","框","了","该","：","圆柱体","自定义","计算","简化","用来","。","运动","模型简化","的话","惯性","就","link","会","也","调用","pitch","里边","旋转","包括","这个","还是","未来","柱体","分别","要求","一样","轮子","文件","坐标","视觉效果","模型","车体","位置","形状","描述","表示","我们","方向","看上","过程","它","尺寸","时候","看上去","接触","检测","名称","0","较","偏移","自定","比如","可以","机器","蓝色","看似","区别"," ","刚体","如果","外观","三维","初始","部分","stl","复杂","来","以","相同","臂","如下","和","小车","如何","真实","碰撞","需要","内容","算作","似乎","一致","某个","用","x","就是","中","质量","y","类似"],"title":"连杆Link的描述","title_tokens":["描述","连杆","link","的"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#joint","text":"机器人模型中的刚体最终要通过关节joint连接之后，才能产生相对运动。 URDF中的关节有六种运动类型。 第一种continuous，描述旋转运动，可以围绕某一个轴无限旋转，比如小车的轮子，就属于这种类型。 第二种revolute，也是旋转关节，和continuous类型的区别在于不能无限旋转，而是带有角度限制，比如机械臂的两个连杆，就属于这种运动。 第三种prismatic，是滑动关节，可以沿某一个轴平移，也带有位置的极限，一般直线电机就是这种运动方式。 第四种是fixed，固定关节，是唯一一种不允许运动的关节，不过使用还是比较频繁的，比如相机这个连杆，安装在机器人上，相对位置是不会变化的，此时使用的连接方式就是Fixed。 第五种Floating是浮动关节，第六种planar是平面关节，这两种使用相对较少。 在URDF模型中，每一个link都使用这样一段xml内容描述，比如关节的名字叫什么，运动类型是哪一种。 既然是运动，就是相对的，parent标签描述父连杆，child标签描述子连杆，子连杆会相对父连杆发生运动。 这里的origin表示两个连杆坐标系之间的关系，也就是这个向量，可以理解为这两个连杆该如何安装到一起。 Axis表示关节运动轴的单位向量，比如z等于1，就表示这个旋转运动是围绕z轴的正方向进行的。 Limit就表示运动的一些限制了，比如最小位置，最大位置，和最大速度等，大家注意单位，ROS中关于平移的默认单位都是m，旋转是弧度，不是度，所以这里3.14就表示可以在-180度到180度之间运动，速度也是m/s，或者rad/s。","text_tokens":["最小","第二","围绕","是","axis","joint","转关","prismatic","z","标签","使用","比较","机器人","最大","第六","这里","的","产生","在","上","单位向量","之后","等","或者","，","在于","关系","注意","无限","平面","四种","不是","属于","关节","第二种","直线","电机","urdf","一个","相对","通过","哪","child","第三","滑动","第六种","planar","安装","机械","每","两种","一起","这样","要","limit","连杆","rad","允许","第五","坐标系","旋转关节","发生","到","不","parent","度","第一种","等于","平移","进行","变化","有","连接","所以","第四种","关于","floating","第一","第五种","了","该","名字","m","相对运动","。","运动","正","最终","不会","就","频繁","link","会","一些","3.14","也","单位","唯一","类型","旋转","六种","带有","理解","还是","这个","向量","弧度","五种","轮子","第四","坐标","模型","fixed","位置","描述","表示","子","方向","xml","origin","浮动","限制","相机","这种","之间","二种","这","都","叫","1","s","较","ros","轴","少","/","角度","比如","可以","固定","机器","区别"," ","刚体","不过","默认","度到","不能","一般","此时","既然","方式","什么","revolute","速度","臂","小车","continuous","和","如何","一种","而是","两个","沿某","父","内容","180","三种","为","极限","某","第三种","就是","中","一段","-","才能","大家"],"title":"关节Joint描述","title_tokens":["joint","描述","关节"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_2","text":"最终所有的link和joint标签完成了对机器人每个部分的描述和组合，全都放在一个robot标签中，就形成了完整的机器人模型。 所以大家在看某一个URDF模型时，先不着急看每一块代码的细节，先来找link和joint，看下这个机器人是由哪些部分组成的，了解完全局之后，再看细节。","text_tokens":["最终","就","link","每个","对","形成","是","joint","机器","每","所有"," ","由","标签","着急","这个","时","完成","全都","放在","先","细节","部分","一块","机器人","模型","不","哪些","的","和","在","完全","之后","描述","，","找","所以","组合","看","某","代码","了解","再","了","下","robot","中","先来","完整","urdf","。","一个","组成","局","大家"],"title":"完整机器人模型","title_tokens":["完整","机器","机器人","模型"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_3","text":"好啦，讲了这么多，还是要看一个完整的示例。 我们以这款移动机器人模型为例，一起看下它的URDF建模过程。","text_tokens":["看下","多","为例","机器"," ","一起","还是","要","这么","移动机器人","建模","机器人","模型","以","的","，","我们","这款","啦","移动","过程","好","看","它","讲","了","示例","动机","完整","urdf","。","一个"],"title":"创建机器人模型","title_tokens":["机器","机器人","模型","创建"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_4","text":"urdf：存放机器人模型的URDF或xacro文件 meshes：放置URDF中引用的模型渲染文件 launch：保存相关启动文件 rviz：保存rviz的配置文件","text_tokens":["保存","launch","配置文件","配置","机器"," ","meshes","放置","相关","rviz","文件","机器人","模型","的","引用","启动","渲染","存放","xacro","：","中","urdf","或"],"title":"功能包结构","title_tokens":["功能","结构","包"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#urdf_2","text":"$ urdf_to_graphiz mbot_base.urdf # 在模型文件夹下","text_tokens":[".","在","$","mbot","件夹","_","base","文件夹","下","to","模型","#","graphiz","urdf","文件"," "],"title":"查看URDF模型结构","title_tokens":["urdf","结构","模型","查看"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_5","text":"","text_tokens":[],"title":"模型可视化效果","title_tokens":["可视化","效果","可视","模型"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_6","text":"learning_urdf/urdf/mbot_base.urdf <?xml version=\"1.0\" ?> <robot name= \"mbot\" > <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"0.16\" radius= \"0.20\" /> </geometry> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> </visual> </link> <joint name= \"left_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"left_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"left_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"right_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 -0.19 -0.05\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"right_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"right_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"1.5707 0 0\" /> <geometry> <cylinder radius= \"0.06\" length = \"0.025\" /> </geometry> <material name= \"white\" > <color rgba= \"1 1 1 0.9\" /> </material> </visual> </link> <joint name= \"front_caster_joint\" type= \"continuous\" > <origin xyz= \"0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"front_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"front_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> <joint name= \"back_caster_joint\" type= \"continuous\" > <origin xyz= \"-0.18 0 -0.095\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"back_caster_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"back_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"0.015\" /> </geometry> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> </visual> </link> </robot>","text_tokens":["rpy","geometry","wheel","1.5707","0.16","/","0.05","child","link","0.20","color","left","sphere","axis","joint","0.19"," ","right","back","version","learning","white","mbot","0.015","_","base","visual","0.9","0.95","1.0","cylinder","length","name","yellow","parent","<","continuous","front","caster","0.025","type","0.06","xml","origin","black",">","rgba","0.095","0.4",".","=","robot","xyz","0.18","\"","radius","material","1","-","0","urdf","?"],"title":"模型文件解析","title_tokens":["文件","解析","模型"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.3_URDF/#_7","text":"https://docs.ros.org/en/humble/Tutorials/URDF/URDF-Main.html","text_tokens":[".","en","docs","/","org","tutorials","https","-","main","ros","urdf","humble","html",":"],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/","text":"Gazebo：三维物理仿真平台 ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台Gazebo，了解一下。 Gazebo仿真平台 介绍 Gazebo是ROS系统中最为常用的三维物理仿真平台，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。 安装 Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-* 运行 通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py 注意：为保证模型顺利加载，请将离线模型文件库下载并放置到~/.gazebo/models路径下， https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。 XACRO机器人模型优化 我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本——XACRO文件。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro 常量定义 一些常用的XACRO文件语法，大家了解下。 标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。 数学计算 如果需要做数学计算，同样是在$加大括号中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 注意：所有数学运算都会转换成浮点数进行，以保证运算精度 宏定义 机器人的轮子我们也做成宏定义，定义方式是通过这个 标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。 文件包含 宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。 机器人仿真模型配置 完善物理参数 第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。 添加Gazebo标签 第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。 配置传动装置 第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。 添加控制器插件 第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。 构建仿真环境 接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ]) 机器人运动仿真 万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard 注意：虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。 Ignition：下一代Gazebo 随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为Ignition，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/ 附录：机器人完整模型 learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["格式","传动装置","import","模块","名为","ignitionrobotics",",","make","创建","效果","torque","publish","com","语法","export","odometry","做成","移动机器人","第一步","the","www","公式","的","在","两句","你","弹性系数","front","于是","加载","高质量","启动","啦","移动","把","use","为了","=","motor","构建","hardwareinterface","语言","macro","动力学","不仅","bashrc","直接","一个","运算","二步","geometry","传递数据","语句","pose","http","安装","property","for","val","属性","0.19","our","将","0.75","关闭","return","认识一下","浮点","高质","cylinder","#","到","gazebo","parent","表面","true","'","source","怎么","流畅","进行","参数","[","12","apt","好","为止","弹性","简单","odom","人机","一行","spawn","引擎","matter","matrix","修改","小海","当","用到","确保","出现","分配","万事","三步","install","除法","link","会","包含","可能","调用","mass","小海龟","第四步","—","最为","函数","world","系统","is","下载","neighborhood","entity","那","相关","“","类似","wiki","and","装上","算法","fixed","路径","caster","主要","参考","找","仿真器","附录","origin","优化","完善","尺寸","collision","xacro","都","iyy","很","we","开发","较大","cmd","ros","见证","个","rpy","force","/","怎么办","周边","0.20","改成","可以","3","if","a","平台","所有","条件","0.95","all","得","复杂","c","来","方式","小车","和","doesn","0.025","数值","defining","上来","ament","file","so","where","是不是","x","第二步","就是","二句","5","output","中","支持","includelaunchdescription","only","3.1415926","切分","velocityjointinterface","常量","万事俱备","常用","精度","海龟","--","结果","第二","命名","acceleration","是","这些","丰富","spawner","装置","使用","learning","一步","h","加入","续航","保证","name","交给","上","加法","，","prefix","信息","set","环境","separation","更为","一代","---","load","package","下","尽量","pkg","迭代","动机","无人机","数据","me","wheel","物理","似曾相识","从","每个","第三","org","https","hardware","结束","screen","right","及","跑","back","visual","先","传动","0.0","课程","change","互相","变化","设计",")","第一","mechanicalreduction","trans","size","izz","m","请","计算","命令","用来","turngravityoff","新一代","?","30","有点","t","box","transmission","blue","去","version","find","used","base","轮子","第四","原本","ixy","文件","length",":","模型","起来","有点像","镜像","xml","库","这种","single","时候","试一下","摄像","sim","github","可","叫","完整","value","实现","仿真","by","actuator","topic","方法","time","角度","vel","机器","区分","介绍","让","pi","记得","pythonlaunchdescriptionsource","转换","share","方便","几个","速度","参数设置","如何","似曾","两个","tf","碰撞","宏","simpletransmission","需要","渲染","0.2","3.14159","硬件加速","ixz","可编程","run","y","真器","this","第三步","友好","xmlns","left","axis","数学","frame","you","0.015","问题","摩擦力","python","系数","火星车","针对","差速","plugin","必要","建模","冗余","机器人","虚拟","版本","等","teleop","给","网站","代码","robot","关节","帮助","actions","os","~","接下来","rgbd","电机","c语言","相对","比","通过","$","？","想不起","diameter","接下","传递","嵌套","摩擦","这样","要","camera","刚好","差不多","传感","不断","joints","放置","rate","变量","spwan","不","底盘","不多","第一句","度","footprint","这句","index","加大","have","有","black","功能","做","场景","0.4",".","ignition","当然","了","下来","名字","技术","\"","enabled","inertia","测试","state","运动","gray","不会","0.16","某些","也","配置","里边","理解","这个","呢","launchdescription","未来","力学","一样","动力","reference","进步","没","还","不妨","位置","描述","ixx","总体","插件","really","demos","了解","from","them","重复使用","感器","provided","sure","want","1","基本","导致","(","模拟","时刻","0.05","launch","多","比如","{","r","虚拟机","提供","下一代","流程","如果","+","4","三维","接口","to","顺利","然后","此时","四步","20","osrf","升级","尝试","continuous","drive","node","传感器","type","转换成","运行","reflect","libgazebo","py","节点","再","get","join","material","humble","质量","以上","differential","}","b","图形","应用","joint","diff","executable","颜色","z","标签","时","之前","括号","_","完成","点数","in","已经","command","这里","关系","0.06","更","generate","path","注意","controller","不是","包","*","false","urdf","硬件","list","yaw","own","放到","child","文件格式","俱备","验证","一定","数学计算","filename","并","twist","控制","浮点数","每","再用","一起","定义","interface","周边环境","可编","么","vgpu10","inertial","update","<","params","限飞","所以","因为","arguments","手边","items","键盘","、","重复","description","该","：","同时","奇迹","控制器","设置","be","sudo","。","worlds","惯性","另外","就","输入","频繁","一些","对","directory","correctly","ros2","color","无人","def","官方网","像","同样","important","主角","models","1.0","yellow","部署","考虑","echo","官方网站","火星","我们","实验","添加","还要","得到","过程","离线","它","]","一句","这","xyz","packages","第二句","认识","into","不同","bridge","名称","0","必备","max","keyboard","相识","换成","colors","0.001","ign","”","sphere","sources","很多","svga"," ","不过","2","编程","值为","mbot","include","不能","试试","像头","办法","实物","写","以","iyz","甚至","publisher","没有","想不起来","加速","一下","新",">","为","rgba","整个","某","官方","用","随着","摄像头","化","0.18","!","radius","-","很长","根本","大家"],"title":"**Gazebo：三维物理仿真平台**","title_tokens":["仿真","物理","：","*","三维","平台","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo","text":"ROS机器人开发，机器人当然是主角，如果我们手边没有实物机器人，怎么办呢？没问题，机器人三维物理仿真平台Gazebo，了解一下。","text_tokens":["仿真","物理","？","怎么办","是","机器","平台","如果","主角","呢","问题","三维","机器人","实物","没","gazebo","怎么","，","我们","没有","一下","手边","了解","当然","开发","。","ros"],"title":"Gazebo：三维物理仿真平台","title_tokens":["仿真","物理","：","三维","平台","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_1","text":"","text_tokens":[],"title":"Gazebo仿真平台","title_tokens":["仿真","平台","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_1","text":"Gazebo是ROS系统中最为常用的三维物理仿真平台，支持动力学引擎，可以实现高质量的图形渲染，不仅可以模拟机器人及周边环境，还可以加入摩擦力、弹性系数等物理属性。 比如我们要开发一个火星车，那就可以在Gazebo中模拟火星表面的环境，再比如我们做无人机，续航和限飞都导致我们没有办法频繁用实物做实验，此时不妨使用Gazebo先做仿真，等算法开发的差不多了，再部署到实物上来运行。 所以类似Gazebo这样的仿真平台，可以帮助我们验证机器人算法、优化机器人设计、测试机器人场景应用，为机器人开发提供更多可能。","text_tokens":["常用","是","图形","应用","使用","摩擦力","系数","火星车","机器人","加入","续航","的","在","弹性系数","等","，","高质量","更","环境","帮助","动力学","不仅","一个","无人机","物理","验证","属性","及","摩擦","周边环境","这样","要","先","差不多","高质","到","gazebo","表面","不多","限飞","所以","设计","做","场景","、","弹性","了","人机","引擎","测试","。","就","频繁","可能","无人","最为","系统","力学","那","动力","不妨","还","算法","部署","火星","我们","实验","优化","都","开发","导致","实现","ros","仿真","模拟","周边","多","比如","可以","提供","平台","机器"," ","三维","此时","办法","实物","和","没有","上来","运行","渲染","为","用","再","中","支持","质量","类似"],"title":"介绍","title_tokens":["介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_2","text":"Gazebo如何使用呢？我们不妨先把它给跑起来，互相认识一下。 为了确保系统中已经完整安装了Gazebo相关的功能包，大家可以通过这样一个命令，简单直接的把和gazebo相关的包都给装上： $ sudo apt install ros-humble-gazebo-*","text_tokens":["通过","$","install","？","安装","可以","humble"," ","跑","使用","认识一下","呢","系统","这样","先","已经","相关","gazebo","不妨","装上","互相","的","和","起来","如何","，","我们","sudo","apt","一下","给","功能","把","它","为了","简单","包","了","都","：","*","认识","中","命令","-","直接","完整","。","一个","ros","确保","大家"],"title":"安装","title_tokens":["安装"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_3","text":"通过这句命令就可以启动啦： $ ros2 launch gazebo_ros gazebo.launch.py 注意：为保证模型顺利加载，请将离线模型文件库下载并放置到~/.gazebo/models路径下， https://github.com/osrf/gazebo_models 认识了Gazebo，接下来是不是该试试机器人仿真啦？ 大家还记得之前课程中，我们设计的移动机器人模型么？我们一起尝试把它放到Gazebo中，还要控制它在仿真环境中运动。","text_tokens":["com","之前","_","移动机器人","机器人","保证","的","在","，","加载","启动","啦","移动","环境","注意","把","不是","下","~","接下来","动机","通过","放到","$","？","并","接下","https","控制","一起","将","么","放置","课程","到","gazebo","这句","设计",".","了","该","：","下来","请","命令","。","运动","就","ros2","models","下载","文件",":","模型","还","路径","我们","还要","离线","库","它","认识","github","ros","仿真","/","launch","可以","机器"," ","记得","顺利","试试","osrf","尝试","为","py","是不是","中","大家"],"title":"运行","title_tokens":["运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#xacro","text":"我们之前设计好的URDF模型此时还不能直接放到Gazebo中，需要我们做一些优化。这里给大家介绍一个URDF文件格式的升级版本——XACRO文件。 同样也是对机器人URDF模型的创建，XACRO文件加入了更多编程化的实现方法，可以让模型创建更友好。 比如： 宏定义，一个小车有4个轮子，每个轮子都一样，我们就没必要创建4个一样的link，像函数定义一样，做一个可重复使用的模块就可以了。 文件包含，复杂机器人的模型文件可能会很长，为了切分不同的模块，比如底盘、传感器，我们还可以把不同模块的模型放置在不同的文件中，然后再用一个总体文件做包含调用。 可编程接口，比如在XACRO模型文件中，定义一些常量，描述机器人的尺寸，定义一些变量，在调用宏定义的时候传递数据，还可以在模型中做数据计算，甚至加入条件语句，比如你的机器人叫A，就有摄像头，如果叫B，就没有摄像头。 XACRO建模过程就像写代码一样，功能更为丰富了。 接下来，我们就通过XACRO文件对移动机器人的模型做一下优化，大家先要使用这句命令安装必要的功能包。 $ sudo apt install ros-humble-xacro","text_tokens":["常量","格式","友好","模块","是","b","丰富","创建","使用","之前","必要","移动机器人","建模","机器人","加入","这里","的","在","版本","你","，","更","移动","更为","给","把","为了","代码","包","接下来","直接","动机","urdf","一个","数据","通过","放到","$","文件格式","每个","传递数据","语句","安装","接下","传递","再用","定义","要","可编","先","传感","放置","变量","gazebo","底盘","这句","有","apt","好","功能","设计","做","、","重复","了","：","下来","计算","命令","sudo","。","就","install","link","会","一些","对","也","包含","可能","调用","像","同样","—","函数","轮子","一样","文件","模型","没","还","描述","我们","过程","总体","优化","尺寸","xacro","时候","都","摄像","重复使用","感器","不同","可","叫","实现","ros","个","方法","多","比如","可以","humble","a","机器","介绍"," ","让","如果","编程","条件","4","接口","不能","然后","此时","复杂","像头","写","升级","小车","甚至","传感器","没有","宏","一下","需要","摄像头","化","中","很长","-","可编程","切分","大家"],"title":"XACRO机器人模型优化","title_tokens":["xacro","机器","优化","机器人","模型"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_4","text":"一些常用的XACRO文件语法，大家了解下。 标签用来定义一些常量，比如这样定义一个PI的常量名为“M_PI”，值为“3.14159”，在调用的时候，通过$加大括号，里边就可以使用定义好的常量了。 针对原本移动机器人的URDF文件，我们就可以把底盘的质量、尺寸，轮子的质量、尺寸、安装位置，这些不会变化的数据，都通过常量定义，未来需要修改的时候也很方便，就不需要在模型文件中一行一行找了。","text_tokens":["通过","常量","$","就","常用","不会","一些","数据","也","比如","名为","调用","”","里边","可以","安装","这些","机器"," ","标签","定义","使用","值为","pi","括号","这样","语法","_","未来","针对","轮子","移动机器人","原本","方便","“","文件","机器人","不","模型","底盘","的","在","位置","加大","找","，","我们","变化","urdf","移动","需要","好","把","、","了解","尺寸","xacro","时候","了","下","3.14159","都","m","一行","很","中","修改","动机","用来","。","一个","质量","大家"],"title":"常量定义","title_tokens":["定义","常量"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_5","text":"如果需要做数学计算，同样是在$加大括号中进行，比如某一个位置，我们可以通过这两个常量做运算得到，就加入了加法和除法运算。 在移动机器人的模型中，很多有相对关系的数据，我们尽量都改成公式计算，如果直接写结果的数值，未来修改的时候，可能根本想不起来这个数据是怎么来的。 注意：所有数学运算都会转换成浮点数进行，以保证运算精度","text_tokens":["常量","精度","结果","是","数学","括号","点数","移动机器人","机器人","加入","公式","保证","的","在","加法","，","关系","移动","注意","尽量","直接","动机","一个","运算","相对","数据","通过","$","想不起","数学计算","浮点数","浮点","怎么","加大","进行","有","做","了","：","计算","修改","。","就","除法","会","可能","同样","这个","未来","模型","位置","起来","我们","得到","时候","这","都","换成","改成","比如","可以","很多","机器","所有"," ","如果","转换","来","以","写","和","两个","数值","想不起来","需要","转换成","某","中","根本"],"title":"数学计算","title_tokens":["数学计算","计算","数学"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_6","text":"机器人的轮子我们也做成宏定义，定义方式是通过这个 标签描述的，还可以像函数一样，设置里边会用到的一些参数，比如这里的A、B、C。 当需要使用这个宏的时候，就可以像这样，通过宏名字的标签，来调用，同时要记得把几个参数设置好。 比如在模型中，轮子的宏定义是这样的，包含了link描述和joint关节设置，link的名称和关节的位置，是通过输入的参数来区分的，在使用的时候，通过这两句调用，两个轮子就出现了。 这里的1和-1，是设置关节位置的，刚好是一个镜像关系。","text_tokens":["通过","就","输入","会","link","一些","也","比如","可以","调用","是","里边","b","a","包含","机器","像","joint","区分"," ","标签","这个","定义","函数","使用","这样","要","一个","记得","做成","轮子","一样","刚好","c","来","几个","机器人","方式","模型","还","这里","的","参数设置","在","和","位置","两句","两个","描述","，","我们","参数","关系","宏","镜像","需要","好","把","、","时候","了","这","关节","名字","同时","中","设置","名称","1","-","当","。","用到","出现"],"title":"宏定义","title_tokens":["宏","定义"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_7","text":"宏定义是可以嵌套的，于是我们把机器人的底盘也做成了一个宏，然后使用另外一个模型文件，对底盘宏定义的文件做了一个包含，然后再调用。 这种流程是不是似曾相识，很像C语言中的include文件包含，然后再去调用里边的某些函数。 到这里为止，仿真使用的模型优化还没有结束，接下来我们还得加入一些仿真必备的模块和参数。","text_tokens":["仿真","另外","似曾相识","某些","对","一些","也","模块","可以","包含","是","调用","里边","接下","机器","像","结束","嵌套","流程"," ","函数","定义","使用","去","include","得","然后","做成","文件","机器人","到","模型","加入","底盘","还","这里","的","和","c语言","似曾","，","于是","我们","没有","宏","参数","优化","把","做","为止","不是","是不是","这种","再","了","下来","很","中","语言","接下来","必备","。","一个","相识"],"title":"文件包含","title_tokens":["包含","文件"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_8","text":"","text_tokens":[],"title":"机器人仿真模型配置","title_tokens":["仿真","配置","机器","机器人","模型"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_9","text":"第一步是确保每一个link都有惯性参数和碰撞属性，因为Gazebo是物理仿真平台，必要的物理参数是一定需要的。","text_tokens":["仿真","物理","惯性","link","一定","是","属性","平台","每","第一步","必要","一步","gazebo","的","和","，","参数","有","碰撞","需要","因为","第一","都","。","一个","确保"],"title":"完善物理参数","title_tokens":["完善","物理","参数"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#gazebo_2","text":"第二步是为link添加gazebo标签，主要是为了可以在gazebo中渲染每一个link的颜色，因为URDF中的颜色系统和gazebo中的不同，所以得做一步这样的冗余配置。","text_tokens":["二步","link","第二","可以","配置","是","每","颜色","标签","系统","这样","得","一步","冗余","gazebo","的","在","和","主要","，","添加","所以","因为","为","渲染","做","为了","第二步","中","不同","urdf","。","一个"],"title":"添加Gazebo标签","title_tokens":["标签","添加","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_10","text":"第三步是要给运动的joint配置传动装置，可以理解为仿真了一个电机。","text_tokens":["仿真","三步","第三步","传动装置","第三","配置","可以","是","joint","理解","装置","要","一个","传动","的","，","给","为","了","电机","。","运动"],"title":"配置传动装置","title_tokens":["装置","配置","传动","传动装置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_11","text":"第四步，要添加一个gazebo的控制器插件，小车是差速控制的，那就添加差速控制器插件，这样在不同角度下两个电机的速度分配，就可以交给控制器插件来完成了。","text_tokens":["分配","就","角度","可以","是","控制","第四步","完成","这样","要","差速","四步","第四","那","来","gazebo","速度","的","小车","在","交给","两个","，","添加","插件","了","下","控制器","不同","电机","。","一个"],"title":"添加控制器插件","title_tokens":["控制器","插件","添加","控制"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_12","text":"接下来就考虑如何把模型加载到Gazebo中了，需要用到一个gazebo提供的功能节点spwan_entity。 learning_gazebo/launch/load_urdf_into_gazebo.launch.py import os from ament_index_python.packages import get_package_share_directory from launch import LaunchDescription from launch.actions import IncludeLaunchDescription from launch.launch_description_sources import PythonLaunchDescriptionSource from launch_ros.actions import Node def generate_launch_description (): # Include the robot_state_publisher launch file, provided by our own package. Force sim time to be enabled # !!! MAKE SURE YOU SET THE PACKAGE NAME CORRECTLY !!! package_name = 'learning_gazebo' #<--- CHANGE ME world_file_path = 'worlds/neighborhood.world' pkg_path = os . path . join ( get_package_share_directory ( package_name )) world_path = os . path . join ( pkg_path , world_file_path ) # Pose where we want to spawn the robot spawn_x_val = '0.0' spawn_y_val = '0.0' spawn_z_val = '0.0' spawn_yaw_val = '0.0' mbot = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( package_name ), 'launch' , 'mbot.launch.py' )]), launch_arguments = { 'use_sim_time' : 'true' , 'world' : world_path } . items () ) # Include the Gazebo launch file, provided by the gazebo_ros package gazebo = IncludeLaunchDescription ( PythonLaunchDescriptionSource ([ os . path . join ( get_package_share_directory ( 'gazebo_ros' ), 'launch' , 'gazebo.launch.py' )]), ) # Run the spawner node from the gazebo_ros package. The entity name doesn't really matter if you only have a single robot. spawn_entity = Node ( package = 'gazebo_ros' , executable = 'spawn_entity.py' , arguments = [ '-topic' , 'robot_description' , '-entity' , 'mbot' , '-x' , spawn_x_val , '-y' , spawn_y_val , '-z' , spawn_z_val , '-Y' , spawn_yaw_val ], output = 'screen' ) # Launch them all! return LaunchDescription ([ mbot , gazebo , spawn_entity , ])","text_tokens":["}","import","executable","z",",","make","spawner","you","learning","_","python","the","name","的","，","加载","generate","set","path","把","use","---","load","package","=","robot","actions","os","接下来","pkg","urdf","一个","yaw","own","me","pose","接下","val","our","screen","return","0.0","#","spwan","到","gazebo","change","true","'","<","index","have","[","功能","arguments",")","items",".","description","了","下来","spawn","matter","be","enabled","state","。","用到","worlds","就","directory","correctly","t","def","world","launchdescription","neighborhood","entity",":","模型","考虑","really","]","single","from","them","packages","want","provided","into","sim","sure","we","ros","(","by","topic","force","/","time","launch","{","if","sources","提供","a"," ","mbot","include","all","pythonlaunchdescriptionsource","to","share","doesn","如何","node","publisher","需要","ament","file","where","py","节点","x","get","output","中","join","!","includelaunchdescription","only","-","run","y"],"title":"构建仿真环境","title_tokens":["仿真","环境","构建"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_13","text":"万事俱备，接下来就是见证奇迹的时刻。 我们需要运行两句命令，第一句启动仿真环境，第二句启动键盘控制节点。 $ ros2 launch learning_gazebo load_urdf_into_gazebo.launch.py $ ros2 run teleop_twist_keyboard teleop_twist_keyboard 注意：虚拟机中运行时需要关闭硬件加速：echo \" export SVGA_VGPU10=0\" >> ~/.bashrc 整个仿真有点像控制小海龟的过程，不过此时的机器人和仿真环境，已经比小海龟复杂很多了。 以上就是Gazebo机器人的仿真的基本流程。","text_tokens":["以上","万事俱备","海龟","第二","learning","时","_","export","已经","机器人","的","两句","虚拟","，","teleop","启动","环境","注意","load","=","接下来","~","bashrc","urdf","硬件","比","$","俱备","twist","接下","控制","关闭","vgpu10","gazebo","第一句","第一","键盘",".","了","：","下来","奇迹","\"","命令","小海","。","万事","有点","ros2","小海龟","echo","有点像","我们","过程","一句","第二句","into","基本","0","keyboard","见证","仿真","/","时刻","launch","虚拟机","svga","机器","很多","流程"," ","不过","此时","复杂","和","加速","需要","运行",">","整个","py","节点","就是","二句","硬件加速","中","run"],"title":"机器人运动仿真","title_tokens":["机器","仿真","运动","机器人"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#ignitiongazebo","text":"随着技术的进步，Gazebo仿真平台也在不断迭代，新一代的Gazebo命名为Ignition，从渲染效果和仿真流畅度上都有较大的变化，我们不妨也来试一下。 $ sudo apt install ros-humble-ros-ign $ ros2 launch ros_ign_gazebo_demos rgbd_camera_bridge.launch.py 更多新版本仿真器的信息，大家也可以参考官方网站: www.ignitionrobotics.org/","text_tokens":["仿真","从","$","install","/","launch","org","多","也","命名","humble","ign","ros2","可以","官方网","平台","ignitionrobotics"," ","效果","_","camera","不断","来","大家","进步",":","www","gazebo","不妨","度","的","在","和","上","流畅","版本","参考","官方网站","，","变化","我们","有","apt","一下","更","仿真器","信息","新","一代","为","渲染","网站","demos",".","py","官方","ignition","随着","试一下","都","技术","bridge","迭代","较大","-","rgbd","sudo","。","新一代","ros","真器"],"title":"Ignition：下一代Gazebo","title_tokens":["ignition","下一代","：","一代","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.4_Gazebo/#_14","text":"learning_gazebo/urdf/mbot_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <xacro:include filename= \"$(find learning_gazebo)/urdf/mbot_base_gazebo.xacro\" /> <xacro:mbot_base_gazebo/> </robot> learning_gazebo/urdf/mbot_base_gazebo.xacro <?xml version=\"1.0\"?> <robot name= \"mbot\" xmlns:xacro= \"http://www.ros.org/wiki/xacro\" > <!-- PROPERTY LIST --> <xacro:property name= \"M_PI\" value= \"3.1415926\" /> <xacro:property name= \"base_mass\" value= \"1\" /> <xacro:property name= \"base_radius\" value= \"0.20\" /> <xacro:property name= \"base_length\" value= \"0.16\" /> <xacro:property name= \"wheel_mass\" value= \"0.2\" /> <xacro:property name= \"wheel_radius\" value= \"0.06\" /> <xacro:property name= \"wheel_length\" value= \"0.025\" /> <xacro:property name= \"wheel_joint_y\" value= \"0.19\" /> <xacro:property name= \"wheel_joint_z\" value= \"0.05\" /> <xacro:property name= \"caster_mass\" value= \"0.2\" /> <xacro:property name= \"caster_radius\" value= \"0.015\" /> <!-- wheel_radius - ( base_length/2 - wheel_joint_z) --> <xacro:property name= \"caster_joint_x\" value= \"0.18\" /> <!-- Defining the colors used in this robot --> <material name= \"yellow\" > <color rgba= \"1 0.4 0 1\" /> </material> <material name= \"black\" > <color rgba= \"0 0 0 0.95\" /> </material> <material name= \"gray\" > <color rgba= \"0.75 0.75 0.75 1\" /> </material> <!-- Macro for inertia matrix --> <xacro:macro name= \"sphere_inertial_matrix\" params= \"m r\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${2*m*r*r/5}\" ixy= \"0\" ixz= \"0\" iyy= \"${2*m*r*r/5}\" iyz= \"0\" izz= \"${2*m*r*r/5}\" /> </inertial> </xacro:macro> <xacro:macro name= \"cylinder_inertial_matrix\" params= \"m r h\" > <inertial> <mass value= \"${m}\" /> <inertia ixx= \"${m*(3*r*r+h*h)/12}\" ixy = \"0\" ixz = \"0\" iyy= \"${m*(3*r*r+h*h)/12}\" iyz = \"0\" izz= \"${m*r*r/2}\" /> </inertial> </xacro:macro> <!-- Macro for robot wheel --> <xacro:macro name= \"wheel\" params= \"prefix reflect\" > <joint name= \"${prefix}_wheel_joint\" type= \"continuous\" > <origin xyz= \"0 ${reflect*wheel_joint_y} ${-wheel_joint_z}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_wheel_link\" /> <axis xyz= \"0 1 0\" /> </joint> <link name= \"${prefix}_wheel_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> <material name= \"gray\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"${M_PI/2} 0 0\" /> <geometry> <cylinder radius= \"${wheel_radius}\" length = \"${wheel_length}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${wheel_mass}\" r= \"${wheel_radius}\" h= \"${wheel_length}\" /> </link> <gazebo reference= \"${prefix}_wheel_link\" > <material> Gazebo/Gray </material> </gazebo> <!-- Transmission is important to link the joints and the controller --> <transmission name= \"${prefix}_wheel_joint_trans\" > <type> transmission_interface/SimpleTransmission </type> <joint name= \"${prefix}_wheel_joint\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> </joint> <actuator name= \"${prefix}_wheel_joint_motor\" > <hardwareInterface> hardware_interface/VelocityJointInterface </hardwareInterface> <mechanicalReduction> 1 </mechanicalReduction> </actuator> </transmission> </xacro:macro> <!-- Macro for robot caster --> <xacro:macro name= \"caster\" params= \"prefix reflect\" > <joint name= \"${prefix}_caster_joint\" type= \"fixed\" > <origin xyz= \"${reflect*caster_joint_x} 0 ${-(base_length/2 + caster_radius)}\" rpy= \"0 0 0\" /> <parent link= \"base_link\" /> <child link= \"${prefix}_caster_link\" /> </joint> <link name= \"${prefix}_caster_link\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> <material name= \"black\" /> </visual> <collision> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <sphere radius= \"${caster_radius}\" /> </geometry> </collision> <xacro:sphere_inertial_matrix m= \"${caster_mass}\" r= \"${caster_radius}\" /> </link> <gazebo reference= \"${prefix}_caster_link\" > <material> Gazebo/Black </material> </gazebo> </xacro:macro> <xacro:macro name= \"mbot_base_gazebo\" > <link name= \"base_footprint\" > <visual> <origin xyz= \"0 0 0\" rpy= \"0 0 0\" /> <geometry> <box size= \"0.001 0.001 0.001\" /> </geometry> </visual> </link> <gazebo reference= \"base_footprint\" > <turnGravityOff> false </turnGravityOff> </gazebo> <joint name= \"base_footprint_joint\" type= \"fixed\" > <origin xyz= \"0 0 ${base_length/2 + caster_radius*2}\" rpy= \"0 0 0\" /> <parent link= \"base_footprint\" /> <child link= \"base_link\" /> </joint> <link name= \"base_link\" > <visual> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> <material name= \"yellow\" /> </visual> <collision> <origin xyz= \" 0 0 0\" rpy= \"0 0 0\" /> <geometry> <cylinder length= \"${base_length}\" radius= \"${base_radius}\" /> </geometry> </collision> <xacro:cylinder_inertial_matrix m= \"${base_mass}\" r= \"${base_radius}\" h= \"${base_length}\" /> </link> <gazebo reference= \"base_link\" > <material> Gazebo/Blue </material> </gazebo> <xacro:wheel prefix= \"left\" reflect= \"1\" /> <xacro:wheel prefix= \"right\" reflect= \"-1\" /> <xacro:caster prefix= \"front\" reflect= \"-1\" /> <xacro:caster prefix= \"back\" reflect= \"1\" /> <!-- controller --> <gazebo> <plugin name= \"differential_drive_controller\" filename= \"libgazebo_ros_diff_drive.so\" > <update_rate> 30 </update_rate> <left_joint> left_wheel_joint </left_joint> <right_joint> right_wheel_joint </right_joint> <wheel_separation> ${wheel_joint_y*2} </wheel_separation> <wheel_diameter> ${2*wheel_radius} </wheel_diameter> <max_wheel_torque> 20 </max_wheel_torque> <max_wheel_acceleration> 1.0 </max_wheel_acceleration> <command_topic> cmd_vel </command_topic> <publish_odom> true </publish_odom> <publish_odom_tf> true </publish_odom_tf> <publish_wheel_tf> true </publish_wheel_tf> <odometry_topic> odom </odometry_topic> <odometry_frame> odom </odometry_frame> <robot_base_frame> base_footprint </robot_base_frame> <odometry_source> 1 </odometry_source> </plugin> </gazebo> </xacro:macro> </robot>","text_tokens":["differential","this","}","--","xmlns","acceleration","left","axis","diff","joint","z","frame","torque","learning","0.015","publish","_","odometry","in","plugin","the","h","command","www","name","front","prefix","0.06","separation","controller","=","motor","robot","*","false","hardwareinterface","macro","urdf","list","wheel","geometry","$","child","http","org","diameter","filename","property","for","hardware","0.19","right","0.75","interface","back","visual","rate","joints","cylinder","inertial","gazebo","parent","source","true","footprint","<","update","params","12","black","0.4",")","mechanicalreduction",".","trans","odom","size","izz","m","matrix","\"","inertia","turngravityoff","gray","?","30","0.16","link","color","box","mass","transmission","important","blue","version","find","used","is","base","1.0","ixy","reference","wiki","length",":","and","yellow","fixed","caster","ixx","xml","origin","collision","xacro","iyy","xyz","1","0","max","value","cmd","ros","(","rpy","actuator","topic","/","0.05","vel","0.20","colors","0.001","3","{","r","sphere"," ","2","+","mbot","pi","0.95","include","to","20","iyz","continuous","drive","tf","0.025","type","defining","simpletransmission","reflect",">","rgba","0.2","so","libgazebo","x","5","0.18","!","radius","material","3.1415926","-","ixz","y","velocityjointinterface"],"title":"附录：机器人完整模型","title_tokens":["：","附录","完整","机器","机器人","模型"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/","text":"Rviz：三维可视化显示平台 大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾——Rviz，一款三维可视化显示的神器。 Rviz三维可视化平台 机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。 Rviz介绍 一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。 运行方法 $ ros2 run rviz2 rviz2 彩色相机仿真与可视化 摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。 仿真插件配置 关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 主要配置项如下： 标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 标签：加载摄像头仿真插件 运行仿真环境 模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py 图像数据可视化 $ ros2 run rviz2 rviz2 三维相机仿真与可视化 二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。 仿真插件配置 运行仿真环境 $ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py 点云数据可视化 $ ros2 run rviz2 rviz2 激光雷达仿真与可视化 除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。 仿真插件配置 运行仿真环境 $ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py 点云数据可视化 $ ros2 run rviz2 rviz2 Rviz vs Gazebo 好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下，Gazebo是仿真平台，核心功能是创造数据，我们没有机器人或者传感器，它可以帮我们做一个虚拟的，Rviz是可视化平台，核心功能是显示数据，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。 参考链接 https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":["难为","格式","数字","消息","等等","出厂","rviz2","效果","com","不想","移动机器人","www","各种","的","在","你","加载","啦","移动","启动","把","导航","一个","intel","不用","体感","但","自由","这幅","到","gazebo","参数","知道","好","框架","试一试","不少","只有","会","手上","除了","一款","—","最为","还是","各种各样","项","样","众多","坐标","路径","主要","参考","都","外部","开发","话题","ros","/","混淆","周边","可以","平台","成功","来","臂","和","人","so","是不是","点云","就是","中","神器","一位","会用","常用","过","啥","命名","案例","是","世界","快速","这些","还有","一堆","使用","learning","满意","说明","涉及","噪音","量级","name","玩起","过瘾","上","本","，","可视","信息","环境","打造","问","load","巧妇","下","动机","数据","话","从","https","机械","255","软件","装","全都","哪些","kinect","内部","设计","计算","用来","的话","看到","很难","类型","包括","去","常备","开放式","岂",":","模型","起来","vs","这种","时候","摄像","github","机","仿真","方法","叫做","一目了然","分析","机器","介绍","自己","方便","几个","什么","一分钱","如何","两个","图形化","真实","有没有","并且","需要","渲染","分钱","非常","run","realsense","强调","docs","问题","rviz","机器人","虚拟","或者","各样","等","给","代码","以待","qt","不到","rgbd","一脸","通过","$","？","一分","想不到","出来","帮","嘉宾","这样","camera","价格比","传感","坐标系","不","对应","有","功能","自带","做","场景","关于","自动","长",".","当然","了","熟悉","辨率","运动","汽车","某些","核心","也","想","配置","肯定","开放","上位","希望","理解","这个","呢","重量级","stereolabs","只要","效率","位置","自主","描述","范围","usb","插件","看","相信","眼中","了解","感器","创造","显示","具体","玩起来","launch","多","比如","提供","流程","如果","只是","三维","可贵","工具","一种","传感器","type","编码","内容","运行","分辨","libgazebo","py","规划","再","拭目","激光雷达","图形","颜色","对照","能够","标签","搞定","巧妇难为无米之炊","_","已经","这里","雷达","更","链接","与","不是","一目","先来","能","提高","层面","么","才","了然","大大","所以","可视化","拭目以待","、","讲","重量","二维","：","设置","彩色","。","驾驶","畅想","就","获取","对","一些","ros2","发布","价格","大家","什么样","我们","添加","过程","按照","它","相机","一句","这","分辨率","into","0","范畴","很多","激光"," ","不过","图像","mbot","不能","试试","拍摄","像头","如下","外部环境","laser","没有","大大提高","新","基于","懵","官方","用","摄像头","类似"],"title":"**Rviz：三维可视化显示平台**","title_tokens":["：","*","三维","可视","可视化","显示","rviz","平台"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz","text":"大家有没有畅想过一个问题，机器人眼中的世界是什么样的呢？如何能够看到机器人摄像头拍摄到的图像？ 这就涉及到可视化显示的范畴了，本讲我们介绍一位ROS中的重量级嘉宾——Rviz，一款三维可视化显示的神器。","text_tokens":["畅想","就","？","看到","范畴","过","一款","是","世界","机器","介绍"," ","—","能够","图像","呢","重量级","嘉宾","问题","三维","涉及","拍摄","量级","像头","rviz","机器人","什么","到","的","如何","什么样","本","，","没有","有没有","可视","我们","可视化","眼中","讲","重量","摄像头","这","了","摄像","中","神器","显示","一位","。","一个","ros","大家"],"title":"Rviz：三维可视化显示平台","title_tokens":["：","三维","可视","可视化","显示","rviz","平台"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_1","text":"机器人开发过程中，各种各样的功能，如果我们只是从数据层面去做分析，很难快速理解数据的效果，比如给你一堆0到255的数字，问这幅图像描述的内容是什么？你肯定一脸懵。但如果我们把这些数字通过颜色渲染出来，岂不就一目了然么？ 类似的场景还有很多，比如机器人模型，我们需要知道自己设计的模型长啥样，还有模型内部众多坐标系在运动过程中都在哪些位置。 再比如机械臂运动规划和移动机器人自主导航，我们希望可以看到机器人周边的环境、规划的路径，当然还有传感器的信息，摄像头、三维相机、激光雷达等等，数据是用来做计算的，可视化的效果才是给人看的。 所以，数据可视化可以大大提高开发效率，Rviz就是这样一款机器人开发过程中的数据可视化软件，机器人模型、传感器信息、环境信息等等，全都可以在这里搞定。","text_tokens":["激光雷达","数字","啥","是","这些","还有","快速","等等","颜色","效果","一堆","搞定","移动机器人","rviz","机器人","各种","的","在","这里","你","各样","，","可视","雷达","信息","移动","环境","给","问","把","一目","导航","动机","一脸","数据","通过","从","？","提高","出来","层面","机械","255","软件","但","这样","全都","么","这幅","传感","坐标系","到","不","才","哪些","了然","大大","知道","内部","所以","功能","可视化","设计","做","场景","长","、","当然","计算","用来","。","运动","就","看到","一款","肯定","很难","希望","理解","各种各样","去","样","岂","众多","坐标","模型","效率","路径","位置","自主","描述","我们","过程","看","相机","都","摄像","感器","开发","0","周边","比如","一目了然","可以","分析","很多","机器","激光"," ","如果","图像","只是","自己","三维","像头","什么","臂","和","传感器","大大提高","内容","需要","人","渲染","懵","规划","摄像头","就是","再","中","类似"],"title":"Rviz三维可视化平台","title_tokens":["三维","可视","可视化","rviz","平台"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz_2","text":"一句话说明Rviz的功能，只要有数据，它就可以可视化，只有我们想不到的，没有Rviz做不到的。 Rviz的核心框架是基于 Qt可视化工具 打造的一个开放式平台，官方出厂就自带了很多机器人常用的可视化显示插件，只要我们按照ROS中的消息发布对应的话题，就可以看到图形化的效果了。如果我们对显示的效果不满意，或者想添加某些新的显示项，也可以在Rviz这个平台中，开发更多可视化效果，方便打造我们自己的上位机。","text_tokens":["话","机","就","常用","只有","消息","某些","看到","核心","对","也","想不到","可以","想","是","多","图形","很多","开放","平台","机器","上位","出厂"," ","如果","发布","效果","项","这个","满意","开放式","自己","说明","只要","方便","rviz","机器人","不","的","在","工具","对应","或者","图形化","，","可视","我们","有","没有","添加","更","新","基于","可视化","功能","打造","做","自带","插件","按照","官方","它","框架","一句","了","qt","中","不到","开发","显示","话题","。","一个","ros","数据"],"title":"Rviz介绍","title_tokens":["rviz","介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_1","text":"$ ros2 run rviz2 rviz2","text_tokens":["$","ros2","rviz2","run"," "],"title":"运行方法","title_tokens":["方法","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_2","text":"摄像头肯定是最为常用的一种传感器了，我们先来给机器人装上摄像头。","text_tokens":["常用","是","肯定","机器","最为","装","传感","像头","机器人","的","上","一种","传感器","，","我们","给","摄像头","了","摄像","感器","先来","。"],"title":"彩色相机仿真与可视化","title_tokens":["仿真","相机","可视","彩色","与","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_3","text":"关于传感器的仿真，都需要使用Gazebo提供的插件，摄像头对应的插件叫做libgazebo_ros_camera.so，我们对照模型的代码给大家介绍这个插件的使用方法。 主要配置项如下： 标签：描述传感器 type：传感器类型，camera name：摄像头命名，自由设置 标签：描述摄像头参数 分辨率，编码格式，图像范围，噪音参数等 标签：加载摄像头仿真插件","text_tokens":["仿真","方法","格式","叫做","命名","配置","提供","类型","介绍"," ","对照","标签","这个","项","使用","图像","_","camera","自由","噪音","传感","像头","模型","gazebo","name","的","如下","对应","主要","等","描述","传感器","，","我们","type","参数","范围","加载","需要","编码","给","插件","so","分辨","libgazebo","关于",".","代码","摄像头","都","分辨率","摄像","：","感器","辨率","设置","。","ros","大家"],"title":"仿真插件配置","title_tokens":["仿真","插件","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_4","text":"模型已经配置好啦，能不能把摄像头成功仿真出来，并且在Rviz中看到图像信息，我们拭目以待。 $ ros2 launch learning_gazebo load_mbot_camera_into_gazebo.launch.py","text_tokens":["仿真","能","$","launch","看到","配置","ros2","出来"," ","成功","图像","learning","mbot","_","不能","camera","已经","像头","rviz","模型","gazebo","在","，","我们","并且","啦","信息","好","拭目以待","把",".","py","load","摄像头","摄像","以待","into","中","拭目","。"],"title":"运行仿真环境","title_tokens":["仿真","环境","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_5","text":"$ ros2 run rviz2 rviz2","text_tokens":["$","ros2","rviz2","run"," "],"title":"图像数据可视化","title_tokens":["可视化","可视","图像","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_6","text":"二维摄像头不过瘾，想不想试试三维相机，比如我们常用的Kinect体感传感器，或者Intel的Realsense，可以获取外部环境的点云数据。这种相机的价格比usb摄像头可贵不少，不过我们也可以通过仿真，一分钱不用，就可以玩起来。","text_tokens":["通过","仿真","不少","就","玩起来","常用","获取","intel","realsense","也","想","比如","可以","一分","不用","体感","不过","价格","不想","三维","可贵","试试","价格比","传感","像头","不","玩起","过瘾","的","一分钱","起来","或者","kinect","外部环境","，","我们","传感器","环境","usb","相机","这种","二维","摄像头","点云","摄像","感器","外部","分钱","。","数据"],"title":"三维相机仿真与可视化","title_tokens":["仿真","相机","三维","可视","与","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_7","text":"","text_tokens":[],"title":"仿真插件配置","title_tokens":["仿真","插件","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_8","text":"$ ros2 launch learning_gazebo load_mbot_rgbd_into_gazebo.launch.py","text_tokens":[".","py","load","learning","$","mbot","_","launch","into","ros2","rgbd"," ","gazebo"],"title":"运行仿真环境","title_tokens":["仿真","环境","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_9","text":"$ ros2 run rviz2 rviz2","text_tokens":["$","ros2","rviz2","run"," "],"title":"点云数据可视化","title_tokens":["可视化","点云","可视","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_10","text":"除了摄像头和三维相机，激光雷达也是很多移动机器人常备的传感器，包括自动驾驶汽车，我们也来试一试。","text_tokens":["驾驶","激光雷达","也","除了","是","很多","机器","包括","激光","常备","三维","传感","移动机器人","像头","来","机器人","的","和","，","传感器","我们","雷达","移动","自动","相机","试一试","摄像头","摄像","感器","动机","。","汽车"],"title":"激光雷达仿真与可视化","title_tokens":["仿真","激光雷达","可视","雷达","与","可视化","激光"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_11","text":"","text_tokens":[],"title":"仿真插件配置","title_tokens":["仿真","插件","配置"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_12","text":"$ ros2 launch learning_gazebo load_mbot_laser_into_gazebo.launch.py","text_tokens":[".","py","load","learning","$","mbot","_","launch","laser","into","ros2"," ","gazebo"],"title":"运行仿真环境","title_tokens":["仿真","环境","运行"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_13","text":"$ ros2 run rviz2 rviz2","text_tokens":["$","ros2","rviz2","run"," "],"title":"点云数据可视化","title_tokens":["可视化","点云","可视","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#rviz-vs-gazebo","text":"好啦，通过这几个案例，相信大家对Rviz可视化平台的使用流程已经非常熟悉了，也了解了常用传感器的仿真方法。 讲到这里，Gazebo和Rviz这两个软件的具体功能，大家是不是会有一些混淆。 我们再来强调下，Gazebo是仿真平台，核心功能是创造数据，我们没有机器人或者传感器，它可以帮我们做一个虚拟的，Rviz是可视化平台，核心功能是显示数据，如果没有数据，它也巧妇难为无米之炊。 所以在很多时候，我们使用Gazebo做机器人仿真的时候，也会启动Rviz来显示仿真环境的信息，如果自己手上有真实机器人的话，Gazebo就用不到了，不过还是会用Rviz显示真实机器人传感器的信息。","text_tokens":["难为","常用","案例","是","强调","巧妇难为无米之炊","使用","已经","rviz","机器人","这里","的","在","虚拟","或者","，","可视","啦","启动","信息","环境","不是","巧妇","下","不到","一个","数据","通过","软件","帮","传感","到","gazebo","有","所以","好","可视化","功能","做","讲","了","熟悉","。","的话","就","会","对","一些","也","核心","手上","还是","我们","相信","它","了解","时候","这","感器","创造","显示","具体","仿真","方法","混淆","可以","很多","平台","机器","流程"," ","如果","不过","自己","来","几个","和","两个","真实","传感器","没有","是不是","用","再","非常","会用","大家"],"title":"Rviz vs Gazebo","title_tokens":["rviz","vs"," ","gazebo"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.5_Rviz/#_14","text":"https://github.com/ros2/rviz https://www.stereolabs.com/docs/ros2/rviz2/","text_tokens":[".","docs","com","/","www","stereolabs","github","ros2","https","rviz2","rviz",":"," "],"title":"参考链接","title_tokens":["参考","链接"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/","text":"RQT：模块化可视化工具 ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具——rqt。 rqt介绍 正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，接下来，大家就可以跟随我的思路，我们一起来试一试。 日志显示 图像显示 接口控制 数据曲线 数据包管理 节点可视化 参考资料 https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":["模块","命名","是","使用","docs","模块化","已经","参考资料","指令","rviz","的","在","我","，","可视","加载","tutorials","数据包","更","启动","en","下","qt","接下来","思路","一个","数据","通过","一","$","每个","org","安装","接下","https","日志","控制","操作","这样","资料","界面","难免会","前","进行","apt","只","可视化","功能","场景",".","跟随","试一试","简单","了","console","：","下来","命令","sudo","。","用到","的话","rqt","另外","就","install","有点","会","一些","也","麻烦","可能","里边","而","有些","about","—","这个","小","一样","大家","曲线",":","难免","起来","参考","我们","using","强大","它","一句","都","摄像","很","开发","显示","具体","实现","ros","/","管理","比如","可以","提供","很多","介绍"," ","不过","图像","接口","然后","此时","像头","来","和","工具","一种","需要","基于","concepts","正如","节点","摄像头","中","觉得","-","humble","html","类似"],"title":"**RQT：模块化可视化工具**","title_tokens":["rqt","工具","：","*","模块化","可视","模块","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt","text":"ROS中的Rviz功能已经很强大了，不过有些场景下，我们可能更需要一些简单的模块化的可视化工具，比如只显示一个摄像头的图像，使用Rviz的话，难免会觉得操作有点麻烦。 此时，我们就会用到ROS提供的另外一种模块化可视化工具——rqt。","text_tokens":["rqt","另外","就","有点","会","一些","模块","比如","麻烦","可能","提供","有些","操作"," ","不过","—","使用","图像","模块化","已经","此时","rviz","像头","难免会","的","工具","难免","一种","，","我们","可视","强大","更","需要","只","功能","可视化","场景","摄像头","简单","了","下","摄像","很","用到","中","觉得","显示","。","一个","ros","的话"],"title":"RQT：模块化可视化工具","title_tokens":["rqt","工具","：","模块化","可视","模块","可视化"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#rqt_1","text":"正如RQT的命名，它和Rviz一样，也是基于QT可视化工具开发而来，在使用前，我们需要通过这样一句指令进行安装，然后就可以通过rqt这个命令启动使用了。 $ sudo apt install ros-humble-rqt $ rqt 类似这个界面一样，里边可以加载很多小模块，每个模块都可以实现一个具体的小功能，接下来，大家就可以跟随我的思路，我们一起来试一试。","text_tokens":["通过","rqt","一","$","就","install","每个","模块","命名","也","安装","可以","是","humble","里边","接下","很多","而"," ","这个","使用","思路","这样","小","然后","界面","一样","指令","rviz","来","大家","的","和","工具","在","起来","前","我","进行","，","可视","我们","加载","启动","apt","需要","基于","可视化","功能","正如","它","跟随","试一试","一句","了","都","下来","qt","开发","命令","接下来","-","sudo","具体","。","一个","实现","ros","类似"],"title":"rqt介绍","title_tokens":["rqt","介绍"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_1","text":"","text_tokens":[],"title":"日志显示","title_tokens":["显示","日志"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_2","text":"","text_tokens":[],"title":"图像显示","title_tokens":["图像","显示"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_3","text":"","text_tokens":[],"title":"接口控制","title_tokens":["接口","控制"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_4","text":"","text_tokens":[],"title":"数据曲线","title_tokens":["曲线","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_5","text":"","text_tokens":[],"title":"数据包管理","title_tokens":["数据包","管理","数据"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_6","text":"","text_tokens":[],"title":"节点可视化","title_tokens":["可视化","节点","可视"]},{"location":"ROS2/3.%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/3.6_Rqt/#_7","text":"https://docs.ros.org/en/humble/Concepts/About-RQt.html https://docs.ros.org/en/humble/Tutorials/Rqt-Console/Using-Rqt-Console.html","text_tokens":[".","rqt","en","docs","/","console","about","org","using","tutorials","https","-","ros","concepts","humble","html",":"," "],"title":"参考资料","title_tokens":["参考","资料","参考资料"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/","text":"资源汇总 常用框架 自主导航 比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/ 自动驾驶 自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/ 路径规划 此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/ 机器人学 ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。 视频课程 斯坦福大学公开课 —— 机器人学 台大机器人学之运动学 Self-Driving Cars with ROS2 & Autoware 古月学院 常用链接 ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":["autowarefoundation","碰撞检测","仔细阅读","driving","常用","斯坦福","推荐","模块","找到","是","这些","快速","应用","丰富","还有","使用","之外","docs","著作","com","基本功能","除此之外","移动机器人","兴趣","工程师","机器人","此外","www","各种","的","在","上","导航系统","视觉","版本","等","，","一本","更","移动","知识","经典著作","链接","修炼","内功","》","导论","代码","en","经典","理论知识","视频","gitlab","基本功","导航","动机","重在","一个","商业化","documentation","org","http","书籍","https","控制","机械","社区","感知","要","html","之一","公开","工程","课程","不","gazebo","实操","学院","对应","index","进行","选择","有","with","guyuehome","classic","好","功能","自动","当今",".","、","框架","典型","了","：","即便","商业","。","运动","台大","&","autowareauto","驾驶","就","感兴","会","对","至于","也","ros2","包含","self","称为","本书","—","最为","这个","navigation","系统","自身","仔细","结合","相关","wiki","分拣",":","算法","情况","路径","自主","这套","参考","之","我们","具备","除此","任何","auto","每一","居","roscon","技能","都","这","斯坦福大学","检测","github","开发","基本","io","完整","热门","著名","被","实现","ros","必备","ubuntu","/","cars","多","比如","可以","福大","大学","提供","很多","机器","人手"," ","如果","人学","2","gazebosim","moveit","自己","得","理论","开课","阅读","几个","robots","臂","和","工具","一种","公开课","机器人学","学习","行业","碰撞","cn","中文","内容","运动学","感兴趣","古月","汇总","规划","资源","autoware","中","-","humble","非常","《","大家"],"title":"**资源汇总**","title_tokens":["资源","汇总","*"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_1","text":"","text_tokens":[],"title":"资源汇总","title_tokens":["资源","汇总"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_2","text":"","text_tokens":[],"title":"常用框架","title_tokens":["常用","框架"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_3","text":"比如移动机器人基本都会具备的自主导航功能，ROS2提供了完整的自主导航系统框架和各种实现好的算法，即便我们不开发任何代码，也可以在自己的机器人上，使用这套系统，快速实现自主导航的基本功能。 大家如果要进行相关的应用开发，可以参考这个链接中的内容： https://navigation.ros.org/","text_tokens":["/","会","org","也","比如","ros2","可以","https","提供","快速","机器","应用"," ","如果","这个","navigation","使用","系统","要","自己","基本功能","移动机器人","相关","机器人",":","不","算法","各种","的","和","在","导航系统","上","自主","这套","参考","进行","，","我们","具备","移动","任何","内容","链接","好","功能",".","框架","代码","都","了","：","中","即便","基本功","导航","开发","基本","动机","完整","。","实现","ros","大家"],"title":"自主导航","title_tokens":["自主","导航"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_4","text":"自动驾驶是当今最为热门的行业之一，也是一种典型的机器人应用。 在ROS社区中，有一个著名的自动驾驶框架——Autoware，包含了自动驾驶中的感知、规划、控制等模块和实现，功能非常丰富，很多商业化的自动驾驶系统，也参考了这个框架。 大家如果对自动驾驶感兴趣，可以参考这几个链接： https://www.autoware.org/ https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/","text_tokens":["驾驶","autowarefoundation","感兴","/","非常","org","对","模块","也","包含","可以","是","https","控制","应用","机器","丰富","社区","感知","很多"," ","—","最为","如果","这个","系统","之一","商业","兴趣","著名","几个","机器人",":","www","的","在","和","一种","等","参考","，","行业","有","auto","链接","感兴趣","功能","自动","当今",".","、","规划","框架","典型","了","autoware","这","：","autowareauto","gitlab","中","io","热门","。","一个","实现","ros","商业化","大家"],"title":"自动驾驶","title_tokens":["驾驶","自动"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_5","text":"此外还有机械臂相关的运动规划、碰撞检测、视觉分拣等功能，也都可以使用ROS中的MoveIt框架。 这也是ROS中非常经典的功能，大家可以在这个链接中找到更多内容: https://moveit.ros.org/","text_tokens":["碰撞检测","/","org","多","也","找到","可以","是","https","还有","机械"," ","这个","使用","moveit","相关","分拣","此外",":","臂","的","在","视觉","等","，","碰撞","更","内容","链接","功能",".","、","规划","框架","经典","都","这","检测","中","。","运动","非常","ros","大家"],"title":"路径规划","title_tokens":["规划","路径"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_6","text":"ROS是机器人开发的工具，重在学习实操技能。至于内功的修炼，就得学习机器人学相关的理论知识，比如《机器人学导论》，被称为机器人工程师人手必备的一本理论书籍，推荐大家仔细阅读。 除此之外，这些都是机器人学的经典著作，每一本书都有对应的中文版本，大家可以结合自身的情况选择。","text_tokens":["《","仔细阅读","就","推荐","至于","书籍","比如","可以","是","称为","人手","这些","机器","本书","选择"," ","人学","之外","著作","得","理论","除此之外","自身","仔细","结合","相关","阅读","工程","工程师","机器人","情况","的","实操","工具","对应","版本","，","学习","机器人学","有","一本","经典著作","中文","知识","除此","每一","重在","修炼","内功","》","导论","技能","经典","都","理论知识","开发","必备","。","被","ros","大家"],"title":"机器人学","title_tokens":["机器","机器人学","机器人","人学"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_7","text":"斯坦福大学公开课 —— 机器人学 台大机器人学之运动学 Self-Driving Cars with ROS2 & Autoware 古月学院","text_tokens":["driving","斯坦福","cars","福大","self","大学","ros2","机器","&"," ","人学","—","开课","公开","机器人","学院","公开课","之","机器人学","with","运动学","古月","斯坦福大学","autoware","-","台大","运动"],"title":"视频课程","title_tokens":["课程","视频"]},{"location":"ROS2/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/4.%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/#_8","text":"ROS： https://www.ros.org ROS 2 Documentation： https://docs.ros.org/en/humble/index.html 古月居： https://www.guyuehome.com/ ROS : https://www.ros.org ROS Wiki : http://wiki.ros.org/ ROSCon : https://roscon.ros.org ROS Robots : https://robots.ros.org/ Ubuntu Wiki ： https://wiki.ubuntu.org.cn ROS2 Github ： https://github.com/ros2 Gazebo : https://classic.gazebosim.org","text_tokens":["ubuntu","/","org","http","ros2","https"," ","2","docs","gazebosim","com","wiki","robots",":","www","gazebo","index","cn","guyuehome","classic","古月","居","roscon",".","en","：","github","humble","html","ros","documentation"],"title":"常用链接","title_tokens":["常用","链接"]}]}